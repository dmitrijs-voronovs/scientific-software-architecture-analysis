quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:15124,integrat,integrator,15124,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,3,['integrat'],['integrator']
Integrability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:14736,integrat,integrator,14736,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,13,['integrat'],['integrator']
Integrability,"e;  The size of the inline storage of an RVec. More...;  ; struct  SmallVectorAlignmentAndSize;  Used to figure out the offset of the first element of an RVec. More...;  ; class  SmallVectorBase;  This is all the stuff common to all SmallVectors. More...;  ; struct  SmallVectorStorage;  Storage for the SmallVector elements. More...;  ; struct  SmallVectorStorage< T, 0 >;  We need the storage to be properly aligned even for small-size of 0 so that the pointer math in SmallVectorTemplateCommon::getFirstEl() is well-defined. More...;  ; class  SmallVectorTemplateBase;  SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that are designed to work with non-trivial T's. More...;  ; class  SmallVectorTemplateBase< T, true >;  SmallVectorTemplateBase<TriviallyCopyable = true> - This is where we put method implementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:1345,depend,depend,1345,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,1,['depend'],['depend']
Integrability,"e;  map raised ;  ; void MapWindow () override;  map window ;  ; void Move (Int_t x, Int_t y) override;  Move frame. ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void ProcessedConfigure (Event_t *event);  ; virtual void ProcessedEvent (Event_t *event);  ; virtual Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t);  ; virtual void ReallyDelete ();  ; void RemoveInput (UInt_t emask);  Remove events specified in emask from the events the frame should handle. ;  ; void ReparentWindow (const TGWindow *p, Int_t x=0, Int_t y=0) override;  Reparent window, make p the new parent and position the window at position (x,y) in new parent. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a frame widget as a C++ statement(s) on output stream out. ;  ; void SaveUserColor (std::ostream &out, Option_t *);  Save a user color in a C++ macro file - used in SavePrimitive(). ;  ; virtual void SendMessage (const TGWindow *w, Longptr_t msg, Longptr_t parm1, Longptr_t parm2);  Send message (i.e. ;  ; void SetBackgroundColor (Pixel_t back) override;  Set background color (override from TGWindow base class). ;  ; virtual void SetCleanup (Int_t=kLocalCleanup);  ; void SetDNDSource (Bool_t onoff);  ; void SetDNDTarget (Bool_t onoff);  ; virtual void SetDragType (Int_t type);  SetDragType. ;  ; void SetDrawOption (Option_t *="""") override;  Set drawing option for object. ;  ; virtual void SetDropType (Int_t type);  SetDropType. ;  ; void SetEditable (Bool_t) override;  ; virtual void SetForegroundColor (Pixel_t);  ; void SetFrameElement (TGFrameElement *fe);  ; virtual void SetHeight (UInt_t h);  ; virtual void SetLayoutBroken (Bool_t=kTRUE);  ; virtual void SetMaxHeight (UInt_t h);  ; virtual void SetMaxWidth (UInt_t w);  ; virtual void SetMinHeight (UInt_t h);  ; virtual void SetMinWidth (UInt_t w);  ; virtual void SetSize (const TGDimension &s);  ; virtual void SetWidth (UInt_t w);  ; virtual void SetX (Int_t x);  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:7112,message,message,7112,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['message'],['message']
Integrability,"e;; 7434}; 7435 ; 7436////////////////////////////////////////////////////////////////////////////////; 7437/// Return the wrapper around Merge.; 7438 ; 7439ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7440{; 7441 return fResetAfterMerge;; 7442}; 7443 ; 7444////////////////////////////////////////////////////////////////////////////////; 7445/// Return the wrapper around new ThisClass().; 7446 ; 7447ROOT::NewFunc_t TClass::GetNew() const; 7448{; 7449 return fNew;; 7450}; 7451 ; 7452////////////////////////////////////////////////////////////////////////////////; 7453/// Return the wrapper around new ThisClass[].; 7454 ; 7455ROOT::NewArrFunc_t TClass::GetNewArray() const; 7456{; 7457 return fNewArray;; 7458}; 7459 ; 7460////////////////////////////////////////////////////////////////////////////////; 7461/// Return the wrapper around delete ThiObject.; 7462 ; 7463ROOT::DelFunc_t TClass::GetDelete() const; 7464{; 7465 return fDelete;; 7466}; 7467 ; 7468////////////////////////////////////////////////////////////////////////////////; 7469/// Return the wrapper around delete [] ThiObject.; 7470 ; 7471ROOT::DelArrFunc_t TClass::GetDeleteArray() const; 7472{; 7473 return fDeleteArray;; 7474}; 7475 ; 7476////////////////////////////////////////////////////////////////////////////////; 7477/// Return the wrapper around the destructor; 7478 ; 7479ROOT::DesFunc_t TClass::GetDestructor() const; 7480{; 7481 return fDestructor;; 7482}; 7483 ; 7484////////////////////////////////////////////////////////////////////////////////; 7485/// Return the wrapper around the directory auto add function.; 7486 ; 7487ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd() const; 7488{; 7489 return fDirAutoAdd;; 7490}; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; createvirtual RooAbsTestStatistic * create(const char *name, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:286423,wrap,wrapper,286423,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,e;; 7501}; 7502 ; 7503////////////////////////////////////////////////////////////////////////////////; 7504/// Return the wrapper around Merge.; 7505 ; 7506ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7507{; 7508 return fResetAfterMerge;; 7509}; 7510 ; 7511////////////////////////////////////////////////////////////////////////////////; 7512/// Return the wrapper around new ThisClass().; 7513 ; 7514ROOT::NewFunc_t TClass::GetNew() const; 7515{; 7516 return fNew;; 7517}; 7518 ; 7519////////////////////////////////////////////////////////////////////////////////; 7520/// Return the wrapper around new ThisClass[].; 7521 ; 7522ROOT::NewArrFunc_t TClass::GetNewArray() const; 7523{; 7524 return fNewArray;; 7525}; 7526 ; 7527////////////////////////////////////////////////////////////////////////////////; 7528/// Return the wrapper around delete ThiObject.; 7529 ; 7530ROOT::DelFunc_t TClass::GetDelete() const; 7531{; 7532 return fDelete;; 7533}; 7534 ; 7535////////////////////////////////////////////////////////////////////////////////; 7536/// Return the wrapper around delete [] ThiObject.; 7537 ; 7538ROOT::DelArrFunc_t TClass::GetDeleteArray() const; 7539{; 7540 return fDeleteArray;; 7541}; 7542 ; 7543////////////////////////////////////////////////////////////////////////////////; 7544/// Return the wrapper around the destructor; 7545 ; 7546ROOT::DesFunc_t TClass::GetDestructor() const; 7547{; 7548 return fDestructor;; 7549}; 7550 ; 7551////////////////////////////////////////////////////////////////////////////////; 7552/// Return the wrapper around the directory auto add function.; 7553 ; 7554ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd() const; 7555{; 7556 return fDirAutoAdd;; 7557}; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; sizesize_t size(const MatrixT &matrix)retrieve the size of a sq,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:289174,wrap,wrapper,289174,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['wrap'],['wrapper']
Integrability,"e<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37884,depend,dependent,37884,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['depend'],['dependent']
Integrability,"e=0.);  Set processing info. ;  ; void SetRecvTime (Float_t recvtime);  ; void SetTermTime (Float_t termtime);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TQueryResult; bool fArchived;  whether the query has been archived ;  ; Long64_t fBytes;  number of bytes processed ;  ; bool fDraw;  true if draw action query ;  ; TDatime fEnd;  time when processing ended ;  ; Long64_t fEntries;  number of entries processed ;  ; bool fFinalized;  whether Terminate has been run ;  ; Long64_t fFirst;  first entry processed ;  ; Float_t fInitTime;  Initialization time (seconds) (millisec precision) ;  ; TList * fInputList;  input list; contains also data sets, entry list, ... ;  ; TString fLibList;  blank-separated list of libs loaded at fStart ;  ; TMacro * fLogFile;  file with log messages from the query ;  ; Float_t fMergeTime;  Merging time (seconds) (millisec precision) ;  ; Int_t fNumMergers;  Number of submergers. ;  ; Int_t fNumWrks;  Number of workers at start. ;  ; TString fOptions;  processing options + aclic mode (< opt >#< aclic_mode >) ;  ; TList * fOutputList;  output list ;  ; TString fParList;  colon-separated list of PAR loaded at fStart ;  ; Float_t fPrepTime;  Prepare time (seconds) (millisec precision) ;  ; Float_t fProcTime;  Processing time (seconds) (millisec precision) ;  ; Float_t fRecvTime;  Transfer-to-client time (seconds) (millisec precision) ;  ; TString fResultFile;  URL of the file where results have been archived. ;  ; TMacro * fSelecHdr;  selector header file ;  ; TMacro * fSelecImp;  selector implementation file ;  ; Int_t fSeqNum;  query unique sequential number ;  ; TDatime fStart;  time when processing started ;  ; EQueryStatus fStatus;  query status ;  ; Float_t fTermTime;  Terminate time (seconds) (millisec precision) ;  ; Float_t fUsedCP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofQueryResult.html:15236,message,messages,15236,doc/master/classTProofQueryResult.html,https://root.cern,https://root.cern/doc/master/classTProofQueryResult.html,1,['message'],['messages']
Integrability,"e=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Double_t fAbsTol;  absolute tolerance deviation ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fMaxIter;  maximum number of iterations ;  ; MethodBase * fMethod;  ; Double_t fRootMax;  maximum root value ;  ; Double_t fRootMin;  minimum root value ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:9349,message,message,9349,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['message'],['message']
Integrability,"e> Template of Lazy Symmeytric class; TMatrixTSymLazy<float> Template of Lazy Symmeytric class; TMehrotraSolver Mehrotra Qp Solver class; TMemStat a user interface class of MemStat; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a class member function (method); TMethodArg Dictionary for a method argument; TMethodBrowsable Helper object to browse methods; TMethodCall Method calling interface; TMinuit The MINUIT minimisation package; TMinuitMinimizer Implementation of Minimizer interface using TMinuit ; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:107769,message,message,107769,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,"['interface', 'message']","['interface', 'message']"
Integrability,"e> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. RooAbsReal* makeFunctionInstance(const char* className, const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0); Write, compile and load code and instantiate object for a; RooAbsReal implementation with class name 'name', taking all; elements of 'vars' as constructor arguments. The initial value; expression is taken to be 'expression' which can be any one-line; C++ expression in terms of variables that occur in 'vars'. The returned object is an instance of the object you just defined; connected to the variables listed in 'vars'. The name of the; object is 'name', its class name Roo<name>Class. This function is an effective compiled replacement of RooFormulaVar. You can add optional expressions for analytical integrals to be; advertised by your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. RooAbsPdf* makePdfInstance(const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0); Write, compile and load code and instantiate object for a; RooAbsPdf implementation with class name 'name', taking all; elements of 'vars' as constructor arguments. The initial value; expression is taken to be 'expression' which can be any one-line; C++ expression in terms of variables that occur in 'vars'. The returned object is an instance of the object you just defined; connected to the variables listed in 'vars'. The name of the; object is 'name', its class name Roo<name>Class. This function is an effective compiled replacement of RooGenericPdf. You can add optional expressions for analytical integrals to be; advertised by your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooClassFactory.html:11450,integrat,integrated,11450,root/html526/RooClassFactory.html,https://root.cern,https://root.cern/root/html526/RooClassFactory.html,11,['integrat'],['integrated']
Integrability,"e>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. {}. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. double DoEvalPar(const double* x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoParameterDerivative(const double* x, const double* p, unsigned int ipar) const; eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__WrappedMultiTF1.html:2705,interface,interface,2705,root/html530/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__WrappedMultiTF1.html,3,['interface'],['interface']
Integrability,"eAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:3213,depend,dependentOverlaps,3213,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['depend'],['dependentOverlaps']
Integrability,"eBase::fProxyDetail::TBranchProxy * fProxyProxy for this branch, owned by TTreeReader.Definition TTreeReaderValue.h:132; ROOT::Internal::TTreeReaderValueBase::fStaticClassOffsetsstd::vector< Long64_t > fStaticClassOffsetsDefinition TTreeReaderValue.h:134; ROOT::Internal::TTreeReaderValueBase::SearchBranchWithCompositeNameTBranch * SearchBranchWithCompositeName(TLeaf *&myleaf, TDictionary *&branchActualType, std::string &err)Search a branch the name of which contains a ""."".Definition TTreeReaderValue.cxx:303; ROOT::Internal::TTreeReaderValueBase::GetBranchDataTypestatic const char * GetBranchDataType(TBranch *branch, TDictionary *&dict, TDictionary const *curDict)Retrieve the type of data stored by branch; put its dictionary into dict, return its type name.Definition TTreeReaderValue.cxx:693; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TStringBasic string class.Definition TString.h:139; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderValue::operator->T * operator->()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:201; TTreeReaderValue::TTreeReaderValueTTreeReaderValue()=delete; TTreeReaderValue::GetT * Get()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:189; TTreeReaderValue::TTreeReaderValueTTreeReaderValue(TTreeReader &tr, const char *branchname)Definition TTreeReaderValue.h:180; TTreeReaderValue::operator*T & operator*()Return a reference to the value of the current entry.Definition TTreeReaderValue.h:206; TTreeReaderValue::NonConstT_ttypename std::remove_const< T >::type N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:19028,interface,interface,19028,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,1,['interface'],['interface']
Integrability,"eBase;; 354 friend class ROOT::Internal::TTreeReaderArrayBase;; 355 ; 356 ClassDefOverride(TTreeReader, 0); // A simple interface to read trees; 357};; 358 ; 359#endif // defined TTreeReader; Long64_tlong long Long64_tDefinition RtypesCore.h:69; BIT#define BIT(n)Definition Rtypes.h:90; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TNotifyLink.h; TTreeReaderUtils.h; TTree.h; ROOT::Internal::TFriendProxyDefinition TFriendProxy.h:22; ROOT::Internal::TNamedBranchProxyDefinition TTreeReaderUtils.h:43; ROOT::Internal::TTreeReaderArrayBaseBase class of TTreeReaderArray.Definition TTreeReaderArray.h:29; ROOT::Internal::TTreeReaderValueBaseBase class of TTreeReaderValue.Definition TTreeReaderValue.h:45; TBranchProxyDirectorThis class is used to 'drive' and hold a serie of TBranchProxy objects which represent and give acces...; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFriendProxyConcrete implementation of the proxy around a Friend Tree.; TNotifyLinkA node in a doubly linked list of subscribers to TChain notifications.Definition TNotifyLink.h:127; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TTreeReader::Iterator_tIterate through the entries of a TTree.Definition TTreeReader.h:58; TTreeReader::Iterator_t::const_pointerconst Long64_t * const_pointerDefinition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:15672,interface,interface,15672,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['interface'],['interface']
Integrability,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:5155,interface,interface,5155,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['interface'],['interface']
Integrability,"eByKeys ();  ; virtual void DetermineBySparseHist ();  ; virtual void DetermineInterval ();  ; virtual void DetermineShortestInterval ();  ; virtual void DetermineTailFractionInterval ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealVar ** fAxes = nullptr;  array of pointers to RooRealVars representing the axes of the histogram fAxes[0] represents x-axis, [1] y, [2] z, etc ;  ; MarkovChain * fChain = nullptr;  the markov chain ;  ; double fConfidenceLevel = 0.0;  Requested confidence level (eg. 0.95 for 95% CL) ;  ; RooRealVar * fCutoffVar = nullptr;  cutoff variable to use for integrating keys pdf ;  ; RooDataHist * fDataHist = nullptr;  the binned Markov Chain data ;  ; double fDelta = DEFAULT_DELTA;  topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; Int_t fDimension = 1;  number of variables ;  ; double fEpsilon = DEFAULT_EPSILON;  acceptable error for Keys interval determination ;  ; double fFull = 0.0;  Value of intergral of fProduct. ;  ; Heaviside * fHeaviside = nullptr;  the Heaviside function ;  ; TH1 * fHist = nullptr;  the binned Markov Chain data ;  ; double fHistConfLevel = 0.0;  the actual conf level determined by hist ;  ; double fHistCutoff = -1;  cutoff bin size to be in interval ;  ; enum IntervalType fIntervalType = kShortest;  ; bool fIsHistStrict = true;  whether the specified confidence level is a floor for the actual confidence level (strict), or a ceiling (not strict) for determination by histogram ;  ; double fKeysConfLevel = 0.0;  the actual conf level determined by keys ;  ; double fKeysCutoff = -1;  cutoff keys pdf value to be in interval ;  ; RooDataHist * fKeysD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:21462,integrat,integrating,21462,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['integrat'],['integrating']
Integrability,"eCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:43847,integrat,integration,43847,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,2,['integrat'],['integration']
Integrability,"eCheckObservables ; (; const RooArgSet * ; nset); const. Recursively call checkObservables on all nodes in the expression tree. ; Definition at line 826 of file RooAbsArg.cxx. ◆ recursiveRedirectServers(). bool RooAbsArg::recursiveRedirectServers ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll = false, . bool ; nameChange = false, . bool ; recurseInNewSet = true . ). Recursively replace all servers with the new servers in newSet. ; This substitutes objects that we receive values from (also indirectly through other objects) with new objects that have the same name.; Copied from redirectServers:; This substitutes objects that we receive values from with new objects that have the same name. See alsorecursiveRedirectServers() Use recursive version if servers that are only indirectly serving this object should be replaced as well. . redirectServers() If only the direct servers of an object need to be replaced.; Note that changing the types of objects is generally allowed, but can be wrong if the interface of an object changes. For example, one can reparametrise a model by substituting a variable with a function: ; \[; f(x\, |\, a) = a \cdot x \rightarrow f(x\, |\, b) = (2.1 \cdot b) \cdot x; \]. If an object, however, expects a PDF, and this is substituted with a function that isn't normalised, wrong results might be obtained or it might even crash the program. The types of the objects being substituted are not checked.; Parameters. [in]newSetOrigSet of new servers that should be used instead of the current servers. ; [in]mustReplaceAllA warning is printed and error status is returned if not all servers could be substituted successfully. ; [in]nameChangeIf false, an object named ""x"" is only replaced with an object also named ""x"" in newSetOrig. If the object in newSet is called differently, set nameChange to true and use setAttribute() on the x object: objectToReplaceX.setAttribute(""ORIGNAME:x""); Now, the renamed object will be selected based on the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:87502,interface,interface,87502,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['interface'],['interface']
Integrability,"eCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:23260,wrap,wrapper,23260,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['wrap'],['wrapper']
Integrability,"eCreateMinimizer ; (; ). Recreate a minimizer instance using the function and data set objective function in minimizers function to re-create FCN from stored data object and fit options. ; Definition at line 688 of file TBackCompFitter.cxx. ◆ ReleaseParameter(). void TBackCompFitter::ReleaseParameter ; (; Int_t ; ipar). overridevirtual . Release a fit parameter. ; Implements TVirtualFitter.; Definition at line 645 of file TBackCompFitter.cxx. ◆ Scan(). bool TBackCompFitter::Scan ; (; unsigned int ; ipar, . TGraph * ; gr, . double ; xmin = 0, . double ; xmax = 0 . ). Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ; Definition at line 797 of file TBackCompFitter.cxx. ◆ SetFCN(). void TBackCompFitter::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). overridevirtual . Override setFCN to use the Adapter to Minuit2 FCN interface To set the address of the minimization function. ; Reimplemented from TVirtualFitter.; Definition at line 732 of file TBackCompFitter.cxx. ◆ SetFitMethod(). void TBackCompFitter::SetFitMethod ; (; const char * ; name). overridevirtual . Set fit method (chi2 or likelihood). ; According to the method the appropriate FCN function will be created ; Implements TVirtualFitter.; Definition at line 654 of file TBackCompFitter.cxx. ◆ SetMethodCall(). virtual void TBackCompFitter::SetMethodCall ; (; TMethodCall * ; m). inlinevirtual . For using interpreted function passed by the user. ; Definition at line 88 of file TBackCompFitter.h. ◆ SetObjFunction(). void TBackCompFitter::SetObjFunction ; (; ROOT::Math::IMultiGenFunction * ; f). virtual . Set the objective function for fitting Needed if fitting directly using TBackCompFitter class The class clones a copy of the function and manages it. ; Definition at line 746 of file TBackCompFitter.cxx. ◆ SetParameter(). Int_t TBackCompFitter::SetPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:34822,interface,interface,34822,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['interface'],['interface']
Integrability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tinitialize(); voidTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooIntegrator1D**_arrayArray of segment integrators; RooNumIntConfig_config; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_nsegNumber of segments ; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range; Bool_t_useIntegrandLimits; Bool_t_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmax; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSegmentedIntegrator1D.html:6253,integrat,integrators,6253,root/html528/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooSegmentedIntegrator1D.html,18,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tinitialize(); voidTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooIntegrator1D**_arrayArray of segment integrators; RooNumIntConfig_config; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_nsegNumber of segments ; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range; Bool_t_useIntegrandLimits; Bool_t_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmax; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Destructor. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator1D.html:6267,integrat,integrators,6267,root/html526/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator1D.html,3,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"eData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void FromPad(TVirtualPad* pad, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Create an image from the given pad, afterwards this image can be; saved in any of the supported image formats. void Draw(Option_t* option = """"); Draw image.; Support the following drawing options:; ""T[x,y[,tint]]"" - tile image (use specified offset and tint),; e.g. ""T100,100,#556655""; with this option the zooming is not possible; and disabled; ""N"" - display in new canvas (of original image size); ""X"" - image is drawn expanded to pad size; ""Z"" - image is vectorized and image palette is drawn. The default is to displa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TASImage.html:23955,depend,depending,23955,root/html528/TASImage.html,https://root.cern,https://root.cern/root/html528/TASImage.html,10,['depend'],['depending']
Integrability,"eDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; Double_tTGeoTube::fDzhalf length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; Double_tTGeoTube::fRmaxouter radius; Double_tTGeoTube::fRmininner radius; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; Double_tfStInStereo angle for inner surface; Double_tfStOutStereo angle for inner surface; TStringTNamed::fTitleobject title. private:. Double_tfTinTangent of stereo angle for inner surface; Double_tfTinsqSquared tangent of stereo angle for inner surface; Double_tfToutTangent of stereo angle for outer surface; Double_tfToutsqSquared tangent of stereo angle for outer surface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHype(); Default constructor. TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying hyperboloid parameters. TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying parameters and name. TGeoHype(Double_t* params); Default constructor specifying a list of parameters; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. ~TGeoHype(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); Compute bounding box of the hyperboloid. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHype.html:16690,rout,rout,16690,root/html602/TGeoHype.html,https://root.cern,https://root.cern/root/html602/TGeoHype.html,4,['rout'],['rout']
Integrability,"eDelete; };. protected:. TMVA::MsgLogger*fLogger! message logger. private:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::TDensityCalcfDensityCalcmethod of density calculation; const TMVA::PDEFoam*fPDEFoamPDEFoam to refer to. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDistr(); {}. ~PDEFoamDistr(). PDEFoamDistr(const TMVA::PDEFoamDistr& ); Copy constructor. void Initialize(); Initialisation of binary search tree.; Set dimension and create new BinarySearchTree. void FillBinarySearchTree(const TMVA::Event* ev, TMVA::EFoamType ft, Bool_t NoNegWeights = kFALSE); This method creates an TMVA::Event and inserts it into the; binary search tree. If 'NoNegWeights' is true, an event with negative weight will; not be filled into the foam. (Default value: false). Double_t Density(Double_t* Xarg, Double_t& event_density); This function is needed during the foam buildup.; It return a certain density depending on the selected classification; or regression options:. In case of separated foams (classification) or multi target regression:; - returns event density within volume (specified by VolFrac); In case of unified foams: (classification); - returns discriminator (N_sig)/(N_sig + N_bg) divided by volume; (specified by VolFrac); In case of mono target regression:; - returns average target value within volume divided by volume; (specified by VolFrac). void FillHist(TMVA::PDEFoamCell* cell, vector<TH1F*>& , vector<TH1F*>& , vector<TH1F*>& , vector<TH1F*>& ); fill the given histograms with signal and background events,; which are located in the given cell. void SetPDEFoam(const TMVA::PDEFoam* foam); Getter and setter for the fPDEFoam pointer. { fPDEFoam = foam; }. const PDEFoam* GetPDEFoam() const; { return fPDEFoam; }. void SetDensityCalc(TMVA::TDensityCalc dc); Getters and setters for foam filling method. { fDensityCalc = dc; }. Bool_t FillDiscriminator(); { return fDensityCalc == kDISCRIMINATOR; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoamDistr.html:6534,depend,depending,6534,root/html528/TMVA__PDEFoamDistr.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoamDistr.html,1,['depend'],['depending']
Integrability,"eDerived(). Bool_t TMessageHandler::HandleDerived ; (; ); const. inline . Definition at line 55 of file TMessageHandler.h. ◆ HandleMessage(). void TMessageHandler::HandleMessage ; (; Long_t ; id, . const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file TMessageHandler.cxx. ◆ Removed(). virtual void TMessageHandler::Removed ; (; ). inlinevirtual . Definition at line 65 of file TMessageHandler.h. ◆ Streamer(). void TMessageHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMessageHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TMessageHandler.h. Member Data Documentation. ◆ fClass. const TClass* TMessageHandler::fClass. protected . Definition at line 37 of file TMessageHandler.h. ◆ fCnts. Int_t* TMessageHandler::fCnts. protected . Definition at line 41 of file TMessageHandler.h. ◆ fDerived. Bool_t TMessageHandler::fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:20955,message,message,20955,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,1,['message'],['message']
Integrability,"eDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfInput p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; const TNamed*_rangeNameName of subset range; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendPdf(); Default cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:39850,integrat,integrator,39850,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,2,['integrat'],['integrator']
Integrability,"eElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:90274,interface,interfaces,90274,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['interface'],['interfaces']
Integrability,eElement*TGContainer::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; TStringTGContainer::fLastNamethe name of object of last search; Bool_tTGContainer::fLastSubstringsubstring search option of last search; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TGListBox*fListBoxlist box which contains this container; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGContainer::fMsgWindowwindow handling container messages; Bool_tfMultiSelecttrue if multi selection is switched on; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; Bool_tTGContainer::fOnMouseOverkTRUE when mouse pointer is over entry; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TTimer*TGContainer::fScrollTimerautoscroll timer; Bool_tTGContainer::fScrollingkTRUE - when scrolling is ON; Int_tTGContainer::fSelectednumber of selected items; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTGContainer::fTotaltotal items; TGViewPort*TGContainer::fViewPortcontainer viewport; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGContainer::fX0; Int_tTGContainer::fXDND; Int_tTGContainer::fXf; Int_tTGContainer::fXp; Int_tTGFrame::fYframe y position; Int_tTGContainer::fY0corner of rubber band box; Int_tTGContaine,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBContainer.html:22508,message,messages,22508,root/html528/TGLBContainer.html,https://root.cern,https://root.cern/root/html528/TGLBContainer.html,6,['message'],['messages']
Integrability,eElement*TGContainer::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; TStringTGContainer::fLastNamethe name of object of last search; Bool_tTGContainer::fLastSubstringsubstring search option of last search; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TGListBox*fListBoxlist box which contains this container; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGContainer::fMsgWindowwindow handling container messages; Bool_tfMultiSelecttrue if multi selection is switched on; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; Bool_tTGContainer::fOnMouseOverkTRUE when mouse pointer is over entry; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TTimer*TGContainer::fScrollTimerautoscroll timer; Bool_tTGContainer::fScrollingkTRUE - when scrolling is ON; Int_tTGContainer::fSelectednumber of selected items; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTGContainer::fTotaltotal items; TGViewPort*TGContainer::fViewPortcontainer viewport; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGContainer::fX0corner of rubber band box; Int_tTGContainer::fXDND; Int_tTGContainer::fXfother corner of rubber band box; Int_tTGContainer::fXpprevious pointer position; Int_tTGFrame::fY,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBContainer.html:23392,message,messages,23392,root/html602/TGLBContainer.html,https://root.cern,https://root.cern/root/html602/TGLBContainer.html,4,['message'],['messages']
Integrability,"eEvent ; (; RooArgSet & ; theEvent, . Int_t ; remaining . ). overrideprotectedvirtual . Generate event appropriate for current index state. ; The index state is taken either from the prototype or is generated from the fraction threshold table. ; Implements RooAbsGenContext.; Definition at line 208 of file RooSimGenContext.cxx. ◆ initGenerator(). void RooSimGenContext::initGenerator ; (; const RooArgSet & ; theEvent). overrideprotectedvirtual . Perform one-time initialization of generator context. ; Reimplemented from RooAbsGenContext.; Definition at line 152 of file RooSimGenContext.cxx. ◆ IsA(). TClass * RooSimGenContext::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsGenContext.; Definition at line 63 of file RooSimGenContext.h. ◆ printMultiline(). void RooSimGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooAbsGenContext.; Definition at line 291 of file RooSimGenContext.cxx. ◆ setProtoDataOrder(). void RooSimGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Set the traversal order of the prototype data to that in the given lookup table. ; This information is passed to all component generator contexts ; Reimplemented from RooAbsGenContext.; Definition at line 278 of file RooSimGenContext.cxx. ◆ Streamer(). void RooSimGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooSimGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file RooSimGenContext.h. ◆ updateFractions(). void RooSimGenContext::updateFractions ; (; ). protected . No action needed if we have a proto index. ; Definition at line 249 of file RooSimGenContext.cxx. Member Data Documentation. ◆ _allVarsPdf. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimGenContext.html:21126,interface,interface,21126,doc/master/classRooSimGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimGenContext.html,1,['interface'],['interface']
Integrability,"eFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Types; enum  IntOperMode { Hybrid; , Analytic; , PassThrough; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; RooArgSet const * actualFuncNormSet () const;  ; void autoSelectDirtyMode ();  Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ;  ; double evaluate () const override;  Perform the integration and return the result. ;  ; bool initNumIntegrator () const;  (Re)Initialize numerical integration engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:50295,integrat,integration,50295,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Integrability,"eFileTypes& type, UInt_t& astype, Bool_t toas = kTRUE); Map file type to/from AfterImage types.; Protected method. void MapQuality(TAttImage::EImageQuality& quality, UInt_t& asquality, Bool_t toas = kTRUE); Map quality to/from AfterImage quality.; Protected method. void SetImage(const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void FromPad(TVirtualPad* pad, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Create an image from the given pad, afterwards this image can be; saved in any of the supported image formats. void Draw(Option_t* option = """"); Draw image.; Support the following drawing options:; ""T[x,y[,tint]]"" - tile image (us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:23578,depend,depends,23578,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,1,['depend'],['depends']
Integrability,"eForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t p[][3], Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t p[][3]) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t p[][3]) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBoxSetGL.html:6181,Interface,Interface,6181,root/html534/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html534/TEveBoxSetGL.html,1,['Interface'],['Interface']
Integrability,"eFrame::IsEditable() const; Bool_tIsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; Bool_tIsExclusive() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; Bool_tIsRadioButtonExclusive() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPressed(Int_t id)SIGNAL ; virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGButtonGroup.html:13182,Message,Message,13182,root/html602/TGButtonGroup.html,https://root.cern,https://root.cern/root/html602/TGButtonGroup.html,2,['Message'],['Message']
Integrability,"eFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2457,interface,interface,2457,root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,2,['interface'],['interface']
Integrability,"eFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2009-12-10 16:15; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2455,interface,interface,2455,root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"eFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2010-09-23 19:55; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2455,interface,interface,2455,root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"eFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 31763 2009-12-10 10:40:21Z moneta $ » Last generated: 2011-07-04 15:19; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2457,interface,interface,2457,root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"eFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitMethodFunction.h 40577 2011-08-12 10:43:12Z moneta $ » Last generated: 2011-11-03 20:04; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2457,interface,interface,2457,root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,2,['interface'],['interface']
Integrability,"eInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:43807,Interface,Interface,43807,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"eLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF upper estimate (upper confidence interval limit). TF1* GetLowerFunction(Double_t confidenceLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF lower estimate (lower confidence interval limit). TF1* GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF estimate bias. void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(const Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TKDE.html:15840,Integrat,Integrated,15840,root/html602/TKDE.html,https://root.cern,https://root.cern/root/html602/TKDE.html,1,['Integrat'],['Integrated']
Integrability,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionMethodBrowsable.html:9699,depend,depending,9699,root/html526/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionMethodBrowsable.html,2,['depend'],['depending']
Integrability,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-12-01 01:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCollectionMethodBrowsable.html:9685,depend,depending,9685,root/html528/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html528/TCollectionMethodBrowsable.html,2,['depend'],['depending']
Integrability,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCollectionMethodBrowsable.html:9754,depend,depending,9754,root/html530/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html530/TCollectionMethodBrowsable.html,2,['depend'],['depending']
Integrability,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollectionMethodBrowsable.html:9754,depend,depending,9754,root/html532/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html,6,"['Wrap', 'depend']","['Wrapper', 'depending']"
Integrability,"eListsOnCommittedvoid UpdateListsOnCommitted(const cling::Transaction &T)Definition TCling.cxx:6765; TCling::TypeInfo_RefTypeint TypeInfo_RefType(TypeInfo_t *) const finalDefinition TCling.cxx:9404; TCling::CreateListOfBaseClassesvoid CreateListOfBaseClasses(TClass *cl) const finalCreate list of pointers to base class(es) for TClass cl.Definition TCling.cxx:4371; TCling::GetPromptchar * GetPrompt() finalDefinition TCling.h:217; TCling::ClassInfo_FactoryClassInfo_t * ClassInfo_Factory(Bool_t all=kTRUE) const finalDefinition TCling.cxx:8215; TCling::MethodInfo_Nameconst char * MethodInfo_Name(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9138; TCling::BaseClassInfo_FactoryBaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t *info) const finalDefinition TCling.cxx:8472; TCling::LoadTextBool_t LoadText(const char *text) const finalLoad the declarations from text into the interpreter.Definition TCling.cxx:7515; TCling::GetSharedLibDepsconst char * GetSharedLibDeps(const char *lib, bool tryDyld=false) finalGet the list a libraries on which the specified lib depends.Definition TCling.cxx:7289; TCling::MethodInfo_MethodCallReturnTypeEReturnType MethodInfo_MethodCallReturnType(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9188; TCling::GetObjectAddressTObject * GetObjectAddress(const char *Name, void *&LookupCtx)If the interpreter encounters Name, check whether that is an object ROOT could retrieve.Definition TCling.cxx:7714; TCling::ProcessLineAsynchLongptr_t ProcessLineAsynch(const char *line, EErrorCode *error=nullptr)Let cling process a command line asynch.Definition TCling.cxx:3560; TCling::MethodInfo_IsValidbool MethodInfo_IsValid(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9059; TCling::TClingTCling(); TCling::FuncTempInfo_FactoryFuncTempInfo_t * FuncTempInfo_Factory(DeclId_t declid) const finalConstruct a FuncTempInfo_t.Definition TCling.cxx:8815; TCling::TypeInfo_FactoryTypeInfo_t * TypeInfo_Factory() const finalDefinition TCling.cxx:9348; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:47900,depend,depends,47900,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['depend'],['depends']
Integrability,"eManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxydm; RooRealProxydm0; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDstD0BG.html:38909,integrat,integrator,38909,root/html528/RooDstD0BG.html,https://root.cern,https://root.cern/root/html528/RooDstD0BG.html,1,['integrat'],['integrator']
Integrability,"eManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooPoisson.html:38980,integrat,integrator,38980,root/html528/RooPoisson.html,https://root.cern,https://root.cern/root/html528/RooPoisson.html,1,['integrat'],['integrator']
Integrability,"eMinimizer() could eventually be used. TFitResult * GetTFitResult() const; return a new copy of the TFitResult object which needs to be deleted later by the user. bool Scan(unsigned int ipar, TGraph* gr, double xmin = 0, double xmax = 0); scan parameter ipar between value of xmin and xmax; a graph must be given which will be on return filled with the scan resul; If the graph size is zero, a default size n = 40 will be used; *. bool Contour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.683); create a 2D contour around the minimum for the parameter ipar and jpar; if a minimum does not exist or is invalid it will return false; on exit a TGraph is filled with the contour points; the number of contur points is determined by the size of the TGraph.; if the size is zero a default number of points = 20 is used; pass optionally the confidence level, default is 0.683; it is assumed that ErrorDef() defines the right error definition; (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level. TBackCompFitter(). void SetMethodCall(TMethodCall* m); for using interpreted function passed by the user. { fMethodCall = m; }. ROOT::Fit::FitConfig & GetFitConfig(); !!!! new method (of this interface); get reference to Fit configuration (NOTE: it will be invalid when class is deleted). { return fFitter->Config(); }. const ROOT::Fit::FitResult & GetFitResult() const; get reference to Fit Result object (NOTE: it will be invalid when class is deleted). { return fFitter->Result(); }. const ROOT::Fit::FitData & GetFitData() const; get reference to Fit Data object (NOTE: it will be invalid when class is deleted). { return *fFitData; }. » Author: L. Moneta 08/2008 » Copyright (c) 2008 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBackCompFitter.html:19154,interface,interface,19154,root/html534/TBackCompFitter.html,https://root.cern,https://root.cern/root/html534/TBackCompFitter.html,2,['interface'],['interface']
Integrability,"eMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; ClassImp for building the THtml documentation of the class.; To build the THtml documentation.; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1546 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT.html:20042,depend,dependents,20042,doc/v632/namespaceROOT.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT.html,1,['depend'],['dependents']
Integrability,"eName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:2528,integrat,integration,2528,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['integrat'],['integration']
Integrability,"eNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:44692,integrat,integrator,44692,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,2,['integrat'],['integrator']
Integrability,"eNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooListProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUniform.html:39267,integrat,integrator,39267,root/html530/RooUniform.html,https://root.cern,https://root.cern/root/html530/RooUniform.html,1,['integrat'],['integrator']
Integrability,"eOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodDT.h>. Inheritance diagram for TMVA::MethodDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodDT() [1/2]. TMVA::MethodDT::MethodDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). the standard constructor for just an ordinar ""decision trees"" ; Definition at line 127 of file MethodDT.cxx. ◆ MethodDT() [2/2].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:32618,message,message,32618,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['message'],['message']
Integrability,"eOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooVoigtian.html:39903,integrat,integrator,39903,root/html530/RooVoigtian.html,https://root.cern,https://root.cern/root/html530/RooVoigtian.html,1,['integrat'],['integrator']
Integrability,"eOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfItr!; RooListProxy_pdfList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooMomentMorph::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; bool_useHorizMorph; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:44813,integrat,integrator,44813,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,4,['integrat'],['integrator']
Integrability,"ePR; 80 - SteepestDescent; 81 ; 82 - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support; 83 ; 84 - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support; 85 ; 86 - Genetic (class ROOT::Math::GeneticMinimizer); 87 ; 88 - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; 89 - BFGS (default); 90 - L-BFGS-S; 91 - Nelder-Mead; 92 - CG; 93 - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf); 94 ; 95 ; 96 The Minimizer class provides the interface to perform the minimization including; 97 ; 98 ; 99 In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; 100 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface); 102 the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization.; 103 These are the `ROOT::Math::Functor` class and the `ROOT::Math::GradFunctor` class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are; 104 specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition; 105 the `ROOT::Math::FitMethodFunction` interface.; 106 - The interface for setting the initial values for the function variables (which are the parameters in; 107 of the model function in case of solving for fitting) and specifying their limits.; 108 - The interface to set and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:3533,interface,interface,3533,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['interface'],['interface']
Integrability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnUserParameters.html:4234,interface,interface,4234,root/html602/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnUserParameters.html,2,['interface'],['interface']
Integrability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html:4234,interface,interface,4234,root/html534/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html,2,['interface'],['interface']
Integrability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnUserParameters.html:4234,interface,interface,4234,root/html604/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnUserParameters.html,2,['interface'],['interface']
Integrability,"ePath = 0); static TClass*Class(); static voidCloseEmbeddedPS(); virtual TClass*IsA() const; TGLOutput&operator=(const TGLOutput&); virtual voidShowMembers(TMemberInspector& insp); static voidStartEmbeddedPS(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. static Bool_tCapturePostscript(TGLViewer& viewer, TGLOutput::EFormat format, const char* filePath). Data Members; public:. enum EFormat { kEPS_SIMPLE; kEPS_BSP; kPDF_SIMPLE; kPDF_BSP; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Capture(TGLViewer& viewer, TGLOutput::EFormat format, const char* filePath = 0); Capture viewer to file. Arguments are:; 'viewer' - viewer object to capture from; 'format' - output format - only postscript types presently.; One of kEPS_SIMPLE, kEPS_BSP, kPDF_SIMPLE or kPDF_BSP; See TGLOutput::CapturePostscript() for meanings; 'filePath' - file output name. If null defaults to './viewer.eps' or './viewer.pdf'; depending on format requested. Note : Output files can be large and take considerable time (up to mins); to generate. Bool_t CapturePostscript(TGLViewer& viewer, TGLOutput::EFormat format, const char* filePath); Capture viewer to postscript file. Arguments are:; 'viewer' - viewer object to capture from; 'format' - output format; kEPS_SIMPLE - lower quality EPS; kEPS_BSP - higher quality EPS; kPDF_SIMPLE - lower quality PDF; kPDF_BSP - higher quality PDF; 'filePath' - file output name. If null defaults to './viewer.eps' or './viewer.pdf'; depending on format requested. void StartEmbeddedPS(); this function used by gl-in-pad. void CloseEmbeddedPS(); this function used by gl-in-pad; Restore the gVirtualPS output stream. void Capture(TGLViewer& viewer); this function used by gl-viewer, embedded into pad. virtual ~TGLOutput(); { }. » Author: Richard Maunder, Olivier Couet 02/07/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLOutput.h 20882 2007-11-19 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLOutput.html:1540,depend,depending,1540,root/html528/TGLOutput.html,https://root.cern,https://root.cern/root/html528/TGLOutput.html,4,['depend'],['depending']
Integrability,"ePlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voiddeleteSharedProperties(); Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:9954,depend,dependentOverlaps,9954,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,60,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"ePreLinks(); delete all pre-links. void DeleteLinksArray(TObjArray*& links); delete an array of TSynapses. void SetError(Double_t error); set error, this should only be done for an output neuron. void UpdateSynapsesBatch(); update and adjust the pre-synapses for each neuron (input neuron has no pre-synapse); this method should only be called in batch mode. void UpdateSynapsesSequential(); update the pre-synapses for each neuron (input neuron has no pre-synapse); this method should only be called in sequential mode. void AdjustSynapseWeights(); adjust the pre-synapses' weights for each neuron (input neuron has no pre-synapse); this method should only be called in batch mode. void InitSynapseDeltas(); initialize the error fields of all pre-neurons; this method should only be called in batch mode. void PrintLinks(TObjArray* links) const; print an array of TSynapses, for debugging. void PrintActivationEqn(); print activation equation, for debugging. void PrintMessage(TMVA::EMsgType , TString message); print message, for debugging. TNeuron(). Double_t GetValue() const; inlined functions. { return fValue; }. Double_t GetActivationValue() const; { return fActivationValue; }. Double_t GetDelta() const; { return fDelta; }. Double_t GetDEDw() const; { return fDEDw; }. Int_t NumPreLinks() const; { return NumLinks(fLinksIn); }. Int_t NumPostLinks() const; { return NumLinks(fLinksOut); }. TSynapse* PreLinkAt(Int_t index) const; { return (TSynapse*)fLinksIn->At(index); }. TSynapse* PostLinkAt(Int_t index) const; { return (TSynapse*)fLinksOut->At(index); }. void SetInputNeuron(); { NullifyLinks(fLinksIn); }. void SetOutputNeuron(); { NullifyLinks(fLinksOut); }. void SetBiasNeuron(); { NullifyLinks(fLinksIn); }. void SetDEDw(Double_t DEDw); { fDEDw = DEDw; }. Bool_t IsInputNeuron() const; { return fLinksIn == NULL; }. Bool_t IsOutputNeuron() const; { return fLinksOut == NULL; }. void PrintPreLinks() const; { PrintLinks(fLinksIn); return; }. void PrintPostLinks() const; { PrintLinks(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__TNeuron.html:8679,message,message,8679,root/html530/TMVA__TNeuron.html,https://root.cern,https://root.cern/root/html530/TMVA__TNeuron.html,10,['message'],['message']
Integrability,"eProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooDataHist&dataHist(); const RooDataHist&dataHist() const; virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistPdf.html:8434,depend,dependentOverlaps,8434,root/html526/RooHistPdf.html,https://root.cern,https://root.cern/root/html526/RooHistPdf.html,6,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"eReaderValueBase::kSetupMissingCompiledCollectionProxy; static ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::kSetupMissingCounterBranch; static ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::kSetupNoCheck; static ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::kSetupNotSetup; static ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::kSetupTreeDestructed; static ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::kSetupVoidPtr. protected:. TStringROOT::TTreeReaderValueBase::fBranchNamename of the branch to read data from.; TDictionary*ROOT::TTreeReaderValueBase::fDicttype that the branch should contain; ROOT::TVirtualCollectionReader*fImplCommon interface to collections; TLeaf*ROOT::TTreeReaderValueBase::fLeaf; TStringROOT::TTreeReaderValueBase::fLeafName; ROOT::TBranchProxy*ROOT::TTreeReaderValueBase::fProxyproxy for this branch, owned by TTreeReader; ROOT::TTreeReaderValueBase::EReadStatusROOT::TTreeReaderValueBase::fReadStatusread status of this data access; ROOT::TTreeReaderValueBase::ESetupStatusROOT::TTreeReaderValueBase::fSetupStatussetup status of this data access; vector<Long64_t>ROOT::TTreeReaderValueBase::fStaticClassOffsets; Long64_tROOT::TTreeReaderValueBase::fTreeLastOffset; TTreeReader*ROOT::TTreeReaderValueBase::fTreeReadertree reader we belong to. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CreateProxy(); Create the proxy object for our branch. const char* GetBranchContentDataType(TBranch* branch, TString& contentTypeName, TDictionary*& dict) const; Access a branch's collection content (not the collection itself); through a proxy.; Retrieve the type of data contained in the collection stored by branch;; put its dictionary into dict, If there is no dictionary, put its type; name into contentTypeName.; The contentTypeName is set to NULL if the branch does not; contain a collection; in that case, the type of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__TTreeReaderArrayBase.html:4416,interface,interface,4416,root/html602/ROOT__TTreeReaderArrayBase.html,https://root.cern,https://root.cern/root/html602/ROOT__TTreeReaderArrayBase.html,4,['interface'],['interface']
Integrability,"eResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapRed; , ;   kMapRedWithArg. };  A collection of the types of tasks that TProcessExecutor can execute. More...;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:8388,message,message,8388,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,2,['message'],['message']
Integrability,"eReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::RemoveAtTObject * RemoveAt(Int_t idx) overrideRemove object at index idx.Definition TObjArray.cxx:694; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::operator=TObject & operator=(const TObject &rhs)TObject assignment operator.Definition TObject.h:296; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:77698,message,message,77698,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['message'],['message']
Integrability,"eRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_int_int_.html:40111,integrat,integrator,40111,root/html532/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_int_int_.html,1,['integrat'],['integrator']
Integrability,"eRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/PiecewiseInterpolation.html:35608,integrat,integrator,35608,root/html534/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html534/PiecewiseInterpolation.html,2,['integrat'],['integrator']
Integrability,"eServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; RooStats::HistFactory::LinInterpVarLinInterpVar(); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title); RooStats::HistFactory::LinInterpVarLinInterpVar(const RooStats::HistFactory::LinInterpVar&, const char*); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title, const RooArgList& _paramList, double nominal, vector<double> low, vector<double> high); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__LinInterpVar.html:17651,message,message,17651,root/html534/RooStats__HistFactory__LinInterpVar.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__LinInterpVar.html,2,['message'],['message']
Integrability,"eSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<RooAbsCacheElement>&operator=(const RooCacheManager<RooAbsCacheElement>&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector&); virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<RooAbsCacheElement*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html:3152,Integrat,Integration,3152,root/html534/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html,1,['Integrat'],['Integration']
Integrability,"eSize()returns the maximum source sizeDefinition MsgLogger.cxx:165; TMVA::MsgLogger::InhibitOutputstatic void InhibitOutput()Definition MsgLogger.cxx:67; TMVA::MsgLogger::fObjSourceconst TObject * fObjSourcethe source TObject (used for name)Definition MsgLogger.h:108; TMVA::MsgLogger::fgSuffixstatic const std::string fgSuffixsuffix following source nameDefinition MsgLogger.h:111; TMVA::MsgLogger::EnableOutputstatic void EnableOutput()Definition MsgLogger.cxx:68; TMVA::MsgLogger::fMinTypeEMsgType fMinTypeminimum type for outputDefinition MsgLogger.h:119; TMVA::MsgLogger::fgTypeMapstatic std::atomic< const std::map< EMsgType, std::string > * > fgTypeMapmatches output types with stringsDefinition MsgLogger.h:117; TMVA::MsgLogger::GetSourcestd::string GetSource() constDefinition MsgLogger.h:71; TMVA::MsgLogger::GetFormattedSourcestd::string GetFormattedSource() constmake sure the source name is no longer than fgMaxSourceSize:Definition MsgLogger.cxx:143; TMVA::MsgLogger::InitMapsvoid InitMaps()Create the message type and color maps.Definition MsgLogger.cxx:270; TMVA::MsgLogger::fActiveTypeEMsgType fActiveTypeactive typeDefinition MsgLogger.h:112; TMVA::MsgLogger::WriteMsgvoid WriteMsg(EMsgType type, const std::string &line) constputting the output string, the message type, and the color switcher together into a single stringDefinition MsgLogger.cxx:220; TMVA::MsgLogger::Endmsgstatic MsgLogger & Endmsg(MsgLogger &logger)end lineDefinition MsgLogger.cxx:261; TMVA::MsgLogger::fgInhibitOutputstatic std::atomic< Bool_t > fgInhibitOutputflag to suppress all outputDefinition MsgLogger.h:115; TMVA::MsgLogger::Sendvoid Send()activates the logger writerDefinition MsgLogger.cxx:185; TMVA::MsgLogger::GetMinTypeEMsgType GetMinType() constDefinition MsgLogger.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TObjectMother of all ROOT objects.Definition TObject.h:41; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMVAcreate variable transformationsDefinition G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MsgLogger_8h_source.html:8758,message,message,8758,doc/master/MsgLogger_8h_source.html,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html,1,['message'],['message']
Integrability,"eTObjectprotected; kOpt enum valueTSystem; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; Link(const char *from, const char *to)TSystemvirtual; ListLibraries(const char *regexp="""")TSystemvirtual; ListSymbols(const char *module, const char *re="""")TSystemvirtual; Load(const char *module, const char *entry="""", Bool_t system=kFALSE)TSystemvirtual; LoadAllLibraries()TSystemvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeDirectory(const char *name)TSystemvirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; mkdir(const char *name, Bool_t recursive=kFALSE)TSystemvirtual; NextTimeOut(Bool_t mode)TSystemvirtual; Notify()TObjectvirtual; NotifyApplicationCreated()TSystemvirtual; Now()TSystemvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; OpenConnection(const char *server, int port, int tcpwindowsize=-1, const char *protocol=""tcp"")TSystemvirtual; OpenDirectory(const char *name)TSystemvirtual; Openlog(const char *name, Int_t options, ELogFacility facility)TSystemvirtual; OpenPipe(const char *command, const char *mode)TSystemvirtual; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TSystem &)=deleteTSystemprivate; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *option="""")TObjectvirtual; Pop()TObjectvirtual; PrependPathName(const char *dir, TString &name)TSystemvirtual; Print(Option_t *option="""") const overrideTNamedvirtual; ProcessEvents()TSystemvirtual; pwd()TSysteminline; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem-members.html:11565,protocol,protocol,11565,doc/master/classTSystem-members.html,https://root.cern,https://root.cern/doc/master/classTSystem-members.html,1,['protocol'],['protocol']
Integrability,"eTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TXSocket::EUrgentMsgTypekStopProcess; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:11707,protocol,protocol,11707,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,4,['protocol'],['protocol']
Integrability,"eTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive(TSocket* s) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMonitor&operator=(const TMonitor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReady(TSocket* sock)SIGNAL ; virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TSocket* sock); virtual voidRemoveAll()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMonitor.html:6056,Message,Message,6056,root/html602/TMonitor.html,https://root.cern,https://root.cern/root/html602/TMonitor.html,2,['Message'],['Message']
Integrability,"eTypes& type, UInt_t& astype, Bool_t toas = kTRUE); Map file type to/from AfterImage types.; Protected method. void MapQuality(TAttImage::EImageQuality& quality, UInt_t& asquality, Bool_t toas = kTRUE); Map quality to/from AfterImage quality.; Protected method. void SetImage(const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void FromPad(TVirtualPad* pad, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Create an image from the given pad, afterwards this image can be; saved in any of the supported image formats. void Draw(Option_t* option = """"); Draw image.; Support the following drawing options:; ""T[x,y[,tint]]"" - tile image",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TASImage.html:23600,depend,depends,23600,root/html528/TASImage.html,https://root.cern,https://root.cern/root/html528/TASImage.html,10,['depend'],['depends']
Integrability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:39846,integrat,integrated,39846,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['integrat'],['integrated']
Integrability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxy,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:40228,integrat,integrated,40228,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,2,['integrat'],['integrated']
Integrability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_p,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:41100,integrat,integrated,41100,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,2,['integrat'],['integrated']
Integrability,"eWrapper::CheckEvent ; (; const TMVA::Event & ; e, . Bool_t ; useYesNoLeaf = false . ). return the decision tree output for an event ; Definition at line 226 of file CCTreeWrapper.cxx. ◆ GetRoot(). CCTreeNode * TMVA::CCTreeWrapper::GetRoot ; (; ). inline . Definition at line 148 of file CCTreeWrapper.h. ◆ InitTree(). void TMVA::CCTreeWrapper::InitTree ; (; CCTreeNode * ; t). initialize the node t and all its descendants ; Definition at line 123 of file CCTreeWrapper.cxx. ◆ PruneNode(). void TMVA::CCTreeWrapper::PruneNode ; (; CCTreeNode * ; t). remove the branch rooted at node t ; Definition at line 160 of file CCTreeWrapper.cxx. ◆ TestTreeQuality() [1/2]. Double_t TMVA::CCTreeWrapper::TestTreeQuality ; (; const DataSet * ; validationSample). return the misclassification rate of a pruned tree for a validation event sample using the DataSet ; Definition at line 203 of file CCTreeWrapper.cxx. ◆ TestTreeQuality() [2/2]. Double_t TMVA::CCTreeWrapper::TestTreeQuality ; (; const EventList * ; validationSample). return the misclassification rate of a pruned tree for a validation event sample using an EventList ; Definition at line 183 of file CCTreeWrapper.cxx. Member Data Documentation. ◆ fDTParent. DecisionTree* TMVA::CCTreeWrapper::fDTParent. private . ! pointer to underlying DecisionTree ; Definition at line 151 of file CCTreeWrapper.h. ◆ fQualityIndex. SeparationBase* TMVA::CCTreeWrapper::fQualityIndex. private . ! pointer to the used quality index calculator ; Definition at line 150 of file CCTreeWrapper.h. ◆ fRoot. CCTreeNode* TMVA::CCTreeWrapper::fRoot. private . ! the root node of the (wrapped) decision Tree ; Definition at line 152 of file CCTreeWrapper.h. Libraries for TMVA::CCTreeWrapper:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CCTreeWrapper.h; tmva/tmva/src/CCTreeWrapper.cxx. TMVACCTreeWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html:3671,wrap,wrapped,3671,doc/master/classTMVA_1_1CCTreeWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html,1,['wrap'],['wrapped']
Integrability,"e_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electron or muon trigger; .Filter(""trigE || trigM""); // Select events with exactly four good leptons conserving charge and lepton numbers; // Note that all collections are RVecs and good_lep is the mask for the good leptons.; // The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; // irrespective of the charge.; .Define(""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3""); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); // Apply additional cuts depending on lepton flavour; .Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], ""; ""lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""); // Create new columns with the kinematics of good leptons; .Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""lep_phi[good_lep]""); .Define(""goodlep_E"", ""lep_E[good_lep]""); .Define(""goodlep_type"", ""lep_type[good_lep]""); // Select leptons with high transverse momentum; .Filter(""goodlep_pt[0] > 25000 && goodlep_pt[1] > 15000 && goodlep_pt[2] > 10000""); // Compute invariant mass; .Define(""m4l"", ""ComputeInvariantMass(goodlep_pt, goodlep_eta, goodlep_phi, goodlep_E)""); // Reweighting of the samples is different for ""data"" and ""MC""; .DefinePerSample(""reweighting"", [](unsigned int slot, const RSampleInfo &id) { return id.Contains(""mc""); });; ; // Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:5777,depend,depending,5777,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['depend'],['depending']
Integrability,"e_t * fRngState; ///< mix-max generator state; 169 //mixmax::mixmax_engine<N> * fRng; ///< mixmax internal engine class; 170 MixMaxEngineImpl<N> * fRng; ///< mixmax internal engine class; 171 ; 172 };; 173 ; 174 typedef MixMaxEngine<240,0> MixMaxEngine240;; 175 typedef MixMaxEngine<256,2> MixMaxEngine256;; 176 typedef MixMaxEngine<17,0> MixMaxEngine17;; 177 ; 178 extern template class MixMaxEngine<240,0>;; 179 extern template class MixMaxEngine<256,0>;; 180 extern template class MixMaxEngine<256,2>;; 181 extern template class MixMaxEngine<256,4>;; 182 extern template class MixMaxEngine<17,0>;; 183 extern template class MixMaxEngine<17,1>;; 184 extern template class MixMaxEngine<17,2>;; 185 ; 186 } // end namespace Math; 187 ; 188} // end namespace ROOT; 189 ; 190 ; 191#include ""Math/MixMaxEngine.icc""; 192 ; 193#endif /* ROOT_Math_MixMaxEngine */; MixMaxEngine.icc; TRandomEngine.h; ROOT::Math::MixMaxEngineImplDefinition MixMaxEngineImpl.h:52; ROOT::Math::MixMaxEngineMixMaxEngine is a wrapper class for the MIXMAX Random number generator.Definition MixMaxEngine.h:102; ROOT::Math::MixMaxEngine::StateInt_tuint64_t StateInt_tDefinition MixMaxEngine.h:110; ROOT::Math::MixMaxEngine::IntRndmResult_t IntRndm()generate a 64 bit integer numberDefinition MixMaxEngine.icc:103; ROOT::Math::MixMaxEngine::GetStatevoid GetState(std::vector< StateInt_t > &state) constget the state of the generatorDefinition MixMaxEngine.icc:141; ROOT::Math::MixMaxEngine::~MixMaxEngine~MixMaxEngine() overrideDefinition MixMaxEngine.icc:42; ROOT::Math::MixMaxEngine::SetSeedvoid SetSeed(Result_t seed)set the generator seedDefinition MixMaxEngine.icc:53; ROOT::Math::MixMaxEngine::BaseTypeTRandomEngine BaseTypeDefinition MixMaxEngine.h:106; ROOT::Math::MixMaxEngine::Rndmdouble Rndm() overrideDefinition MixMaxEngine.h:135; ROOT::Math::MixMaxEngine::Counterint Counter() constGet the counter (between 0 and Size-1)Definition MixMaxEngine.icc:152; ROOT::Math::MixMaxEngine::operator()double operator()()generate a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MixMaxEngine_8h_source.html:7247,wrap,wrapper,7247,doc/master/MixMaxEngine_8h_source.html,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html,1,['wrap'],['wrapper']
Integrability,"e_t >::StepMomentum ; (; DeepNet_t & ; master, . std::vector< DeepNet_t > & ; nets, . std::vector< TTensorBatch< Architecture_t > > & ; batches, . Scalar_t ; momentum . ). Same as the Step(...) method for multiple batches but uses momentum. ; Definition at line 256 of file DLMinimizers.h. ◆ StepNesterov(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::StepNesterov ; (; DeepNet_t & ; master, . std::vector< DeepNet_t > & ; nets, . std::vector< TTensorBatch< Architecture_t > > & ; batches, . Scalar_t ; momentum . ). Same as the Step(...) method for multiple batches but uses Nesterov momentum. ; Definition at line 266 of file DLMinimizers.h. ◆ StepReducedWeights(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::StepReducedWeights ; (; DeepNet_t & ; deepNet, . std::vector< Matrix_t > & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Does not evaluate the loss and therefore not trigger a possible synchronization with the device. ; Trains the weights of each layer, but only the bias terms of the first layer for compatibility with the previous implementation. ; Definition at line 193 of file DLMinimizers.h. ◆ StepReducedWeightsLoss(). template<typename Architecture_t > . auto TMVA::DNN::TDLGradientDescent< Architecture_t >::StepReducedWeightsLoss ; (; DeepNet_t & ; deepNet, . std::vector< Matrix_t > & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Similar to StepReducedWeights(...) but also evaluates the loss. ; May trigger synchronization with the device. ; Definition at line 224 of file DLMinimizers.h. Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 72 of file DLMinimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Archi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:10563,synchroniz,synchronization,10563,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['synchroniz'],['synchronization']
Integrability,"e_t Ceil(Double_t x); { return ceil(x); }. Int_t CeilNint(Double_t x); { return TMath::Nint(ceil(x)); }. Double_t Floor(Double_t x); { return floor(x); }. Int_t FloorNint(Double_t x); { return TMath::Nint(floor(x)); }. Int_t Nint(T x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t Exp(Double_t x); { return exp(x); }. Double_t Ldexp(Double_t x, Int_t exp); { return ldexp(x, exp); }. LongDouble_t Power(LongDouble_t x, LongDouble_t y); { return std::pow(x,y); }. LongDouble_t Power(LongDouble_t x, Long64_t y); { return std::pow(x,(LongDouble_t)y); }. LongDouble_t Power(Long64_t x, Long64_t y); { return std::pow(x,y); }. Double_t Power(Double_t x, Double_t y); { return pow(x, y); }. Double_t Power(Double_t x, Int_t y). Double_t Log(Double_t x); { return log(x); }. Double_t Log10(Double_t x); { return log10(x); }. Int_t Finite(Double_t x); { return isfinite(x); }. Int_t IsNaN(Double_t x); from math.h. { return ::isnan(x); }. Double_t QuietNaN(); --------wrapper to numeric_limits. Double_t SignalingNaN(). Double_t Infinity(); returns an infinity as defined by the IEEE standard. template <typename T> inline T NormCross(const T v1[3],const T v2[3],T out[3]); Calculate the Normalized Cross Product of two vectors. T MinElement(Long64_t n, const T *a); Return minimum of array a of length n. T MaxElement(Long64_t n, const T *a); Return maximum of array a of length n. Long64_t LocMin(Long64_t n, const T *a); Return index of array with the minimum element.; If more than one element is minimum returns first found. Iterator LocMin(Iterator first, Iterator last); Return index of array with the minimum element.; If more than one element is minimum returns first found. Long64_t LocMax(Long64_t n, const T *a); Return index of array with the maximum element.; If more than one element is maximum returns first found. Iterator LocMax(Iterator first, Iterator last); Return index of array with the maximum element.; If more than one element is maximum re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:39526,wrap,wrapper,39526,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,2,['wrap'],['wrapper']
Integrability,"e_t epsilon=0, Int_t maxiter=0) const;  Find the minimum of a function of whatever dimension. ;  ; virtual void GetRange (Double_t *xmin, Double_t *xmax) const;  Return range of a generic N-D function. ;  ; void IntegrateForNormalization ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< Double_t > fAlpha;  ! Array alpha. for each bin in x the deconvolution r of fIntegral ;  ; std::vector< Double_t > fBeta;  ! Array beta. is approximated by x = alpha +beta*r *gamma*r**2 ;  ; Double_t fChisquare {};  Function fit chisquare. ;  ; std::unique_ptr< TF1AbsComposition > fComposition;  Pointer to composition (NSUM or CONV) ;  ; std::unique_ptr< TFormula > fFormula;  Pointer to TFormula in case when user define formula. ;  ; std::unique_ptr< TF1FunctorPointer > fFunctor;  ! Functor object to wrap any C++ callable object ;  ; std::vector< Double_t > fGamma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:46223,wrap,wrap,46223,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['wrap'],['wrap']
Integrability,"e_t getVal(const RooArgSet* nset = 0) const; Return value of variable. void setVal(Double_t value); Set value of variable to 'value'. If 'value' is outside; range of object, clip value into range. void setVal(Double_t value, const char* rangeName); Set value of variable to 'value'. If 'value' is outside; range named 'rangeName' of object, clip value into that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:40671,message,message,40671,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,2,['message'],['message']
Integrability,"e_t getVal(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(const RooArgSet* nset) const. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const. void disableCache(Bool_t flag); Switch to disable caching mechanism. » Last changed: Mon Dec 7 13:45:34 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:35099,integrat,integration,35099,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,1,['integrat'],['integration']
Integrability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Thu Sep 23 19:59:23 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCurve.html:23606,interface,interface,23606,root/html528/RooCurve.html,https://root.cern,https://root.cern/root/html528/RooCurve.html,1,['interface'],['interface']
Integrability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Tue Mar 10 17:16:07 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCurve.html:24081,interface,interface,24081,root/html534/RooCurve.html,https://root.cern,https://root.cern/root/html534/RooCurve.html,2,['interface'],['interface']
Integrability,"e_t y); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual Int_tMakeCuts(char* cutsOpt); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option); virtual voidPaintStat(Int_t dostat, TF1* fit); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidProcessMessage(const char* message, const TObject* obj); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetHistogram(TH1* hist); static voidTObject::SetObjectStat(Bool_t stat); static voidTVirtualHistPainter::SetPainter(const char* painter); virtual voidSetShowProjection(const char* option, Int_t nbins); virtual voidSetStack(TList* stack); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLHistPainter.html:9188,message,message,9188,root/html530/TGLHistPainter.html,https://root.cern,https://root.cern/root/html530/TGLHistPainter.html,3,['message'],['message']
Integrability,"e_t y); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual Int_tMakeCuts(char* cutsOpt); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option); virtual voidPaintStat(Int_t dostat, TF1* fit); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidProcessMessage(const char* message, const TObject* obj); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetHistogram(TH1* hist); static voidTObject::SetObjectStat(Bool_t stat); static voidTVirtualHistPainter::SetPainter(const char* painter); virtual voidSetShowProjection(const char* option, Int_t nbins); virtual voidSetStack(TList* stack); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLHistPainter.html:9188,message,message,9188,root/html534/TGLHistPainter.html,https://root.cern,https://root.cern/root/html534/TGLHistPainter.html,2,['message'],['message']
Integrability,"e_t z, Bool_t inner) const; Compute r^2 = x^2 + y^2 at a given z coordinate, for either inner or outer hyperbolas. Double_t ZHypeSq(Double_t r, Bool_t inner) const; Compute z^2 at a given r^2, for either inner or outer hyperbolas. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. Double_t SafetyToHype(const Double_t* point, Bool_t inner, Bool_t in) const; Compute an underestimate of the closest distance from a point to inner or; outer infinite hyperbolas. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Set dimensions of the hyperboloid. void SetDimensions(Double_t* param); Set dimensions of the hyperboloid starting from an array.; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. void SetPoints(Double_t* points) const; create tube mesh points. void SetPoints(Float_t* points) const; create tube mesh points. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. Int_t GetNmeshVertices() const; Return number of vertices of the mesh representation. void Sizeof3D() const; fill size of this 3-D object; TVirtualGeoPainter *painter = gGeoManager->GetGeomPainter();; if (!painter) return;; Int_t n = gGeoManager->GetNsegments();; Int_t numPoints = n*4;; Int_t numSegs = n*8;; Int_t numPolys = n*4;; painter->AddSize3D(numPoints, numSegs, numPolys);. const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:18391,rout,rout,18391,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,6,['rout'],['rout']
Integrability,"e_t& x, Double_t& y) const; Get x and y values for point number i.; The function returns -1 in case of an invalid request or the point number otherwise. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. void InitGaus(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken.; : The graph segments should not intersect.; Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:34355,depend,depends,34355,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,4,['depend'],['depends']
Integrability,"e_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:45663,integrat,integrator,45663,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,2,['integrat'],['integrator']
Integrability,"e_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGSelectBox.html:24525,Message,Message,24525,root/html604/TGSelectBox.html,https://root.cern,https://root.cern/root/html604/TGSelectBox.html,1,['Message'],['Message']
Integrability,"e_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-30 14:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSelectBox.html:24525,Message,Message,24525,root/html602/TGSelectBox.html,https://root.cern,https://root.cern/root/html602/TGSelectBox.html,1,['Message'],['Message']
Integrability,"e_tTGeoTube::fRmaxouter radius; Double_tTGeoTube::fRmininner radius; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; Double_tfStInStereo angle for inner surface; Double_tfStOutStereo angle for inner surface; TStringTNamed::fTitleobject title. private:. Double_tfTinTangent of stereo angle for inner surface; Double_tfTinsqSquared tangent of stereo angle for inner surface; Double_tfToutTangent of stereo angle for outer surface; Double_tfToutsqSquared tangent of stereo angle for outer surface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHype(); Default constructor. TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying hyperboloid parameters. TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying parameters and name. TGeoHype(Double_t* params); Default constructor specifying a list of parameters; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. ~TGeoHype(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); Compute bounding box of the hyperboloid. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the hyperboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the hyperboloid. Int_t DistToHype(Double_t* point, Double_t* dir, Double_t* s, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHype.html:14091,rout,rout,14091,root/html528/TGeoHype.html,https://root.cern,https://root.cern/root/html528/TGeoHype.html,4,['rout'],['rout']
Integrability,"e_tTGeoTube::fRmaxouter radius; Double_tTGeoTube::fRmininner radius; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; Double_tfStInStereo angle for inner surface; Double_tfStOutStereo angle for inner surface; TStringTNamed::fTitleobject title. private:. Double_tfTinTangent of stereo angle for inner surface; Double_tfTinsqSquared tangent of stereo angle for inner surface; Double_tfToutTangent of stereo angle for outer surface; Double_tfToutsqSquared tangent of stereo angle for outer surface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHype(); Default constructor. TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying hyperboloid parameters. TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying parameters and name. TGeoHype(Double_t* params); Default constructor specifying a list of parameters; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. ~TGeoHype(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); Compute bounding box of the hyperboloid. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the hyperboloid. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the hyperboloid. Int_t DistToHype(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:15304,rout,rout,15304,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,6,['rout'],['rout']
Integrability,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31075,depend,depend,31075,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['depend'],['depend']
Integrability,"e`) or not (`false`). It should perform ""read-only"" operations on the; 541columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 542when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 543names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 544certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 545loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 546 ; 547RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 548in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 549entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 550each entry: after the first access it simply serves a cached result.; 551 ; 552\anchor named-filters-and-cutflow-reports; 553#### Named filters and cutflow reports; 554An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 555work as usual, but also keep track of how many entries they accept and reject.; 556 ; 557Statistics are retrieved through a call to the Report() method:; 558 ; 559- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 560named filters declared up to that point; 561- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 562relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 563 ; 564Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:32715,depend,depend,32715,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['depend'],['depend']
Integrability,"ea will automatically fit available window size; 1977 ; 1978void TCanvas::SetCanvasSize(UInt_t ww, UInt_t wh); 1979{; 1980 if (fCanvasImp) {; 1981 fCw = ww;; 1982 fCh = wh;; 1983 fCanvasImp->SetCanvasSize(ww, wh);; 1984 TContext ctxt(this, kTRUE);; 1985 ResizePad();; 1986 }; 1987}; 1988 ; 1989////////////////////////////////////////////////////////////////////////////////; 1990/// Set cursor.; 1991 ; 1992void TCanvas::SetCursor(ECursor cursor); 1993{; 1994 if (!IsBatch() && !IsWeb()); 1995 gVirtualX->SetCursor(fCanvasID, cursor);; 1996}; 1997 ; 1998////////////////////////////////////////////////////////////////////////////////; 1999/// Set Double Buffer On/Off.; 2000 ; 2001void TCanvas::SetDoubleBuffer(Int_t mode); 2002{; 2003 if (IsBatch() || IsWeb()); 2004 return;; 2005 fDoubleBuffer = mode;; 2006 gVirtualX->SetDoubleBuffer(fCanvasID, mode);; 2007 ; 2008 // depending of the buffer mode set the drawing window to either; 2009 // the canvas pixmap or to the canvas on-screen window; 2010 if (fDoubleBuffer) {; 2011 if (fPixmapID != -1) fPainter->SelectDrawable(fPixmapID);; 2012 } else; 2013 if (fCanvasID != -1) fPainter->SelectDrawable(fCanvasID);; 2014}; 2015 ; 2016////////////////////////////////////////////////////////////////////////////////; 2017/// Fix canvas aspect ratio to current value if fixed is true.; 2018 ; 2019void TCanvas::SetFixedAspectRatio(Bool_t fixed); 2020{; 2021 if (fixed) {; 2022 if (!fFixedAspectRatio) {; 2023 if (fCh != 0); 2024 fAspectRatio = Double_t(fCw) / fCh;; 2025 else {; 2026 Error(""SetAspectRatio"", ""cannot fix aspect ratio, height of canvas is 0"");; 2027 return;; 2028 }; 2029 fFixedAspectRatio = kTRUE;; 2030 }; 2031 } else {; 2032 fFixedAspectRatio = kFALSE;; 2033 fAspectRatio = 0;; 2034 }; 2035}; 2036 ; 2037////////////////////////////////////////////////////////////////////////////////; 2038/// If isfolder=kTRUE, the canvas can be browsed like a folder; 2039/// by default a canvas is not browsable.; 2040 ; 2041void TCanvas::SetFolder(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:63643,depend,depending,63643,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['depend'],['depending']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classDummyObject.html:7326,message,message,7326,doc/master/classDummyObject.html,https://root.cern,https://root.cern/doc/master/classDummyObject.html,3,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:8106,message,message,8106,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Arrays used to store the packed inputs; TObjArray fSignal;  Packed input signal. ;  ; TObjArray fBackground;  Packed input background. ;  ; TObjArray fCandidates;  Packed input candidates (data) ;  ; TObjArray fErrorOnSignal;  Packed error sources for signal. ;  ; TObjArray fErrorOnBackground;  Packed error source",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:8617,message,message,8617,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Bool_t fBreakLine;  ; TGLongPosition fEndPos;  ; TGText * fText;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:7705,message,message,7705,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; PyObject * fCallable;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:11049,message,message,11049,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClass * fClass {nullptr};  pointer to the foreign object ;  ; void * fObj {nullptr};  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectorObject.html:7585,message,message,7585,doc/master/classTInspectorObject.html,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClonesArray * fHitsA;  ; TClonesArray * fHitsB;  ; TClonesArray * fJets;  ; Int_t fNhitA;  ; Int_t fNhitB;  ; Int_t fNjet;  ; Int_t fNtrack;  ; TClonesArray * fTracks;  ; TVector3 fVertex;  . Static Private Attributes; static TClonesArray * fgHitsA = nullptr;  ; static TClonesArray * fgHitsB = nullptr;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:8070,message,message,8070,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TDSetElement * fElement;  ; Bool_t fIsDone;  ; Long64_t fNextEntry;  ; TFileNode * fNode;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:7623,message,message,7623,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,2,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TIter * fIter;  ; TString fName;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:7401,message,message,7401,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; Long64_t fEvents;  ; Int_t fExtSlaveCnt;  ; TList * fFiles;  ; TSortedList * fFilesToProcess;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Long64_t fProcessed;  ; Int_t fRunSlaveCnt;  ; Int_t fStrategy;  ; TObject * fUnAllocFileNext;  . Additional Inherited Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html:8249,message,message,8249,doc/master/classTPacketizerAdaptive_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; TList * fFiles;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Int_t fSlaveCnt;  ; TObject * fUnAllocFileNext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x040000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:7743,message,message,7743,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TString fAction;  associated action ;  ; TString fIcon;  associated icon (32x32) ;  ; TString fPattern;  filename pattern ;  ; TRegexp * fReg;  pattern regular expression ;  ; TString fSIcon;  associated small icon (16x16) ;  ; TString fType;  mime type ;  . Friends; class TGMimeTypes;  . Additional Inherited Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:7455,message,message,7455,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; char fChar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:7493,message,message,7493,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TAttImage * fAttImage;  ; TImagePalette ** fPalette;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:7395,message,message,7395,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:7412,message,message,7412,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixDSparse fA;  ; TMatrixDSparse fC;  ; TMatrixDSparse fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataSparse.html:10287,message,message,10287,doc/master/classTQpDataSparse.html,https://root.cern,https://root.cern/doc/master/classTQpDataSparse.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixD fA;  ; TMatrixD fC;  ; TMatrixDSym fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:10158,message,message,10158,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TSlave * fSlave;  ; TProofProgressStatus * fStatus;  ; TString fWrkFQDN;  . Friends; class TPacketizer;  ; class TPacketizerAdaptive;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:7666,message,message,7666,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TString fName;  ! name of the table column ;  ; Bool_t fNumeric {kFALSE};  ! for numeric quotes (double quotes) are not required ;  ; TString fType;  ! type of the table column ;  ; TString fValue;  ! value of the table column ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnData.html:7791,message,message,7791,doc/master/classTSQLColumnData.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnData.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TTVLVEntry * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:7733,message,message,7733,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TVectorD fCloIndex;  ; TVectorD fCupIndex;  ; TVectorD fDd;  ; TVectorD fDq;  ; TQpProbBase * fFactory;  ; Int_t fMclo;  ; Int_t fMcup;  ; Int_t fMy;  ; Int_t fMz;  ; TVectorD fNomegaInv;  ; Int_t fNx;  ; Int_t fNxlo;  ; Int_t fNxup;  ; TVectorD fRhs;  ; TVectorD fXloIndex;  ; TVectorD fXupIndex;  . Additional I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpLinSolverBase.html:8968,message,message,8968,doc/master/classTQpLinSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpLinSolverBase.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13552,message,message,13552,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; TString DefineSQLName (const char *fullname);  produce suitable name for column, taking into account length limitation ;  ; Bool_t HasSQLName (const char *sqlname);  checks if columns list already has that sql name ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:8033,message,message,8033,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void AddToSscp (TMatrixD &sscp, TVectorD &vec);  update the sscp matrix with vector vec ;  ; void Classic ();  called when h=n. ;  ; void ClearSscp (TMatrixD &sscp);  clear the sscp matrix, used for covariance and mean calculation ;  ; void Correl ();  transforms covariance matrix into correlation matrix ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:13999,message,message,13999,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Bool_t fAccObjects {kFALSE};  indicate that object writing started, should be closed in postprocess ;  ; Bool_t fBase64 {kFALSE};  if true, accumulate whole objects in values ;  ; Version_t fClVersion {0};  custom structure for stl container reading ;  ; TStreamerElement * fElem {nullptr};  ; std::unique_ptr< TArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:8201,message,message,8201,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Double_t fEvtRate;  ; Double_t fMBRate;  ; Double_t fProcTime;  ; Double_t fXx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html:7429,message,message,7429,doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Float_t fX;  ; Float_t fY;  ; Float_t fZ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classHit.html:7334,message,message,7334,doc/master/classHit.html,https://root.cern,https://root.cern/doc/master/classHit.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_16_t fCount;  ; int fElId;  ; Html_u8_t fFlags;  ; int fOffs;  ; TGHtmlElement * fPNext;  ; TGHtmlElement * fPPrev;  ; SHtmlStyle_t fStyle;  ; Html_u8_t fType;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlElement.html:7661,message,message,7661,doc/master/classTGHtmlElement.html,https://root.cern,https://root.cern/doc/master/classTGHtmlElement.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_32_t fH;  ; TGHtml * fHtml;  ; TImage * fImage;  ; TGHtmlImageMarkup * fPList;  ; TGHtmlImage * fPNext;  ; TTimer * fTimer;  ; Html_32_t fW;  ; char * fZHeight;  ; char * fZUrl;  ; char * fZWidth;  . Private Member Functions;  TGHtmlImage (const TGHtmlImage &)=delete;  ; TGHtmlImage & operator= (const TGHtmlIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlImage.html:7478,message,message,7478,doc/master/classTGHtmlImage.html,https://root.cern,https://root.cern/doc/master/classTGHtmlImage.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fCode;  ; TFormLeafInfoMultiVarDim * fMultiDim;  ; Int_t fOper;  ; Int_t fSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDimensionInfo.html:7574,message,message,7574,doc/master/classTDimensionInfo.html,https://root.cern,https://root.cern/doc/master/classTDimensionInfo.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:8402,message,message,8402,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; T * _payload;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:7563,message,message,7563,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TClass * fClass;  ! This is the class of the data pointed to ;  ; TString fClassName;  ; TFormLeafInfo * fCounter;  ; TStreamerElement * fElement;  ! Descriptor of the data pointed to. ;  ; TString fElementName;  ; TFormLeafInfo * fNext;  follow this to grab the inside information ;  ; Longptr_t fOffset;  ! Offset ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:13417,message,message,13417,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fContainer;  ; TGTabElement * fElement;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedTabInfo.html:7377,message,message,7377,doc/master/classTGedTabInfo.html,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fFrame;  ; TString fName;  . Private Member Functions;  TGedSubFrame (const TGedSubFrame &)=delete;  ; TGedSubFrame & operator= (const TGedSubFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html:7420,message,message,7420,doc/master/classTGedFrame_1_1TGedSubFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGListTreeItem * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html:7401,message,message,7401,doc/master/classTRootBrowserHistoryCursor.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32CallBackObject.html:7434,message,message,7434,doc/master/classTGWin32CallBackObject.html,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray * fCmds;  ; TClass * fCurrentObjClass;  ; Long64_t fCurrentObjId;  ; TSQLFile * fFile;  ; Long64_t fFirstObjId;  ; Long64_t fKeyId;  ; Int_t fLastLongStrId;  ; Long64_t fLastObjId;  ; TObjArray fLongStrValues;  ; TMap fPool;  ; TSQLStatement * fRegStmt;  ; TObjArray fRegValues;  . Additional Inherited Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:7864,message,message,7864,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray fBlobCmds;  ; TSQLStatement * fBlobStmt;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; TObjArray fNormCmds;  ; TSQLStatement * fNormStmt;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:7473,message,message,7473,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TRefArray fHits;  ; Int_t fNhit;  ; Float_t fPx;  ; Float_t fPy;  ; Float_t fPz;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:7396,message,message,7396,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TSqlCmdsBuffer * fCmdBuf;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; Int_t fMaxStrSize;  ; Long64_t fObjId;  ; Int_t fRawId;  ; TString fValueMask;  ; const char * fValueQuote;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRawBuffer.html:7562,message,message,7562,doc/master/classTSqlRawBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8188,message,message,8188,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fBa;  ; TVectorD fCloBound;  ; TVectorD fCloIndex;  ; TVectorD fCupBound;  ; TVectorD fCupIndex;  ; TVectorD fG;  ; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  ; TVectorD fXloBound;  ; TVectorD fXloIndex;  ; TVectorD fXupBound;  ; TVectorD fXupIndex;  . Static Protected Member Functions; static void RandomlyCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataBase.html:9400,message,message,9400,doc/master/classTQpDataBase.html,https://root.cern,https://root.cern/doc/master/classTQpDataBase.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fGamma;  ; TVectorD fLambda;  ; Int_t fNComplementaryVariables;  ; TVectorD fPhi;  ; TVectorD fPi;  ; TVectorD fS;  ; TVectorD fT;  ; TVectorD fU;  ; TVectorD fV;  ; TVectorD fW;  ; TVectorD fX;  ; TVectorD fY;  ; TVectorD fZ;  . Static Protected Member Functions; static Double_t FindBlocking (TVectorD &w,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:10798,message,message,10798,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fRA;  ; TVectorD fRC;  ; TVectorD fRgamma;  ; TVectorD fRlambda;  ; TVectorD fRphi;  ; TVectorD fRpi;  ; TVectorD fRQ;  ; TVectorD fRt;  ; TVectorD fRu;  ; TVectorD fRv;  ; TVectorD fRw;  ; TVectorD fRz;  . Static Protected Member Functions; static void GondzioProjection (TVectorD &v, Double_t rmin, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:9344,message,message,9344,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; UInt_t fKeyCode;  ; TGWindow * fWindow;  . Private Member Functions;  TGMapKey (const TGMapKey &);  ; TGMapKey & operator= (const TGMapKey &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsisten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html:7408,message,message,7408,doc/master/classTGMainFrame_1_1TGMapKey.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char * fZAuthority;  ; char * fZFragment;  ; char * fZPath;  ; char * fZQuery;  ; char * fZScheme;  . Private Member Functions;  TGHtmlUri (const TGHtmlUri &)=delete;  ; TGHtmlUri & operator= (const TGHtmlUri &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:7940,message,message,7940,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char fChar;  . Private Attributes; TGLongPosition fEndPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsTextCom.html:7554,message,message,7554,doc/master/classTInsTextCom.html,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; const TGPicture * fLarge;  ; TString fName;  ; const TGPicture * fSmall;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:7416,message,message,7416,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; int fBottom;  ; int fHeadRoom;  ; TGHtml * fHtml;  ; int fLeft;  ; SHtmlMargin_t * fLeftMargin;  ; int fMaxX;  ; int fMaxY;  ; int fPageWidth;  ; TGHtmlElement * fPEnd;  ; TGHtmlElement * fPStart;  ; int fRight;  ; SHtmlMargin_t * fRightMargin;  ; int fTop;  . Protected Member Functions; void ClearMarginStack (SHtm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:7676,message,message,7676,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static RooNumGenFactory & instance ();  Static method returning reference to singleton instance of factory. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:8650,message,message,8650,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:8570,message,message,8570,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,2,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddStrBrackets (TString &s, const char *quote);  adds quotes around string value and replaces some special symbols ;  ; static TString DefineElementColumnName (TStreamerElement *elem, TSQLFile *f, Int_t indx=0);  returns name of the column in class table for that element ;  ; static Int_t D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:13082,message,message,13082,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void Cleanup (TGCompositeFrame *frame);  Static method to cleanup hierarchically all daughters of a composite frame. ;  ; static TGeoTabManager * GetMakeTabManager (TGedEditor *ged);  Static method to return the tab manager currently appended to the pad or create one if not existing. ;  ; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:8934,message,message,8934,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8123,message,message,8123,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void StartGDMLWriting (TGeoManager *geomanager, const char *filename, TString option);  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:15491,message,message,15491,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['message'],['message']
Integrability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Protected Attributes; ClassInfo_t * fClass;  ; Int_t fExecuti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:8900,message,message,8900,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['message'],['message']
Integrability,"ead is an independent flow of control that operates within the same address space as other independent flows of controls within a process. In most UNIX systems, thread and process characteristics are grouped into a single entity called a process. Sometimes, threads are called ""lightweight processes’’.; Note: This introduction is adapted from the AIX 4.3 Programmer’s Manual.; 23.1 Threads and Processes; In traditional single-threaded process systems, a process has a set of properties. In multi-threaded systems, these properties are divided between processes and threads.; 23.1.1 Process Properties; A process in a multi-threaded system is the changeable entity. It must be considered as an execution frame. It has all traditional process attributes, such as:. Process ID, process group ID, user ID, and group ID; Environment; Working directory. A process also provides a common address space and common system resources:. File descriptors; Signal actions; Shared libraries; Inter-process communication tools (such as message queues, pipes, semaphores, or shared memory). 23.1.2 Thread Properties; A thread is the schedulable entity. It has only those properties that are required to ensure its independent flow of control. These include the following properties:. Stack; Scheduling properties (such as policy or priority); Set of pending and blocked signals; Some thread-specific data (TSD). An example of thread-specific data is the error indicator, errno. In multi-threaded systems, errno is no longer a global variable, but usually a subroutine returning a thread-specific errno value. Some other systems may provide other implementations of errno. With respect to ROOT, a thread specific data is for example the gPad pointer, which is treated in a different way, whether it is accessed from any thread or the main thread.; Threads within a process must not be considered as a group of processes (even though in Linux each thread receives an own process id, so that it can be scheduled by the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1101993,message,message,1101993,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['message'],['message']
Integrability,"ead objects from disk, cache the name/object pair for a given LookupCtx. ; Definition at line 7714 of file TCling.cxx. ◆ GetPrompt(). char * TCling::GetPrompt ; (; ). inlinefinalvirtual . Implements TInterpreter.; Definition at line 217 of file TCling.h. ◆ GetRootMapFiles(). TObjArray * TCling::GetRootMapFiles ; (; ); const. inlinefinalvirtual . Implements TInterpreter.; Definition at line 223 of file TCling.h. ◆ GetSecurityError(). int TCling::GetSecurityError ; (; ); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7487 of file TCling.cxx. ◆ GetSharedLibDeps(). const char * TCling::GetSharedLibDeps ; (; const char * ; lib, . bool ; useDyld = false . ). finalvirtual . Get the list a libraries on which the specified lib depends. ; The returned string contains as first element the lib itself. Returns 0 in case the lib does not exist or does not have any dependencies. If useDyld is true, we iterate through all available libraries and try to construct the dependency chain by resolving each symbol. ; Implements TInterpreter.; Definition at line 7289 of file TCling.cxx. ◆ GetSharedLibs(). const char * TCling::GetSharedLibs ; (; ). finalvirtual . Return the list of shared libraries loaded into the process. ; Implements TInterpreter.; Definition at line 6989 of file TCling.cxx. ◆ GetSTLIncludePath(). const char * TCling::GetSTLIncludePath ; (; ); const. finalvirtual . Return the directory containing CINT's stl cintdlls. ; Reimplemented from TInterpreter.; Definition at line 7401 of file TCling.cxx. ◆ GetTopLevelMacroName(). const char * TCling::GetTopLevelMacroName ; (; ); const. finalvirtual . Return the file name of the current un-included interpreted file. ; See the documentation for GetCurrentMacroName(). ; Reimplemented from TInterpreter.; Definition at line 5416 of file TCling.cxx. ◆ GetUsingNamespaces(). std::vector< std::string > TCling::GetUsingNamespaces ; (; ClassInfo_t * ; cl); const. finalvirtual . Get th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:105324,depend,dependency,105324,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['depend'],['dependency']
Integrability,"ead; 92 - CG; 93 - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf); 94 ; 95 ; 96 The Minimizer class provides the interface to perform the minimization including; 97 ; 98 ; 99 In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; 100 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface); 102 the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization.; 103 These are the `ROOT::Math::Functor` class and the `ROOT::Math::GradFunctor` class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are; 104 specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition; 105 the `ROOT::Math::FitMethodFunction` interface.; 106 - The interface for setting the initial values for the function variables (which are the parameters in; 107 of the model function in case of solving for fitting) and specifying their limits.; 108 - The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class `ROOT::Math::MinimizerOptions`.; 109 When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the `MinimizerOptions` class.; 110 For the list of the available option parameter one must look at the documentation of the corresponding derived class.; 111 - The interface to retrieve the result of minimization ( mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:3976,wrap,wrapping,3976,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['wrap'],['wrapping']
Integrability,"eading the buffer; vector<TStreamerInfo*>TBufferFile::fInfoStackStack of pointers to the TStreamerInfos; TExMap*TBufferFile::fMapMap containing object,offset pairs for reading/writing; Int_tTBufferFile::fMapCountNumber of objects or classes in map; Int_tTBufferFile::fMapSizeDefault size of map; Bool_tTBuffer::fModeRead or write mode; TObject*TBuffer::fParentPointer to parent object owning this buffer; UShort_tTBufferFile::fPidOffsetOffset to be added to the pid index in this key/buffer.; ReAllocCharFun_tTBuffer::fReAllocFunc! Realloc function to be used when extending the buffer.; Int_tTBuffer::fVersionBuffer format version; static Int_tTBufferFile::fgMapSizeDefault map size for all TBuffer objects. private:. TBitsfBitsPIDsArray of bits to mark the TProcessIDs uids written to the message; char*fBufCompCompressed buffer; char*fBufCompCurCurrent position in compressed buffer; TClass*fClassIf message is kMESS_OBJECT pointer to object's class; char*fCompPosPosition of fBufCur when message was compressed; Int_tfCompressCompression level and algorithm; Bool_tfEvolutionTrue if support for schema evolution required; TList*fInfosList of TStreamerInfo used in WriteObject; UInt_tfWhatMessage type; static Bool_tfgEvolutionTrue if global support for schema evolution required. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessage(UInt_t what = kMESS_ANY, Int_t bufsiz = TBuffer::kInitialSize); Create a TMessage object for storing objects. The ""what"" integer; describes the type of message. Predifined ROOT system message types; can be found in MessageTypes.h. Make sure your own message types are; unique from the ROOT defined message types (i.e. 0 - 10000 are; reserved by ROOT). In case you OR ""what"" with kMESS_ACK, the message; will wait for an acknowledgement from the remote side. This makes; the sending process synchronous. In case you OR ""what"" with kMESS_ZIP,; the message will be compressed in TSocket using the zip algorithm; (only if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMessage.html:21829,message,message,21829,root/html534/TMessage.html,https://root.cern,https://root.cern/root/html534/TMessage.html,6,['message'],['message']
Integrability,"eal part of eigenvalues for TMatrixDEigen. eig.GetEigenValuesIm (); TVectorD; imaginary part of eigenvalues for; TMatrixDEigen. Below, usage of the eigenvalue class is shown in an example where it is checked that the square of the singular values of a matrix \(c\) are identical to the eigenvalues of \(c^{T}\). \(c\):; const TMatrixD m = THilbertMatrixD(10,10);; TDecompSVD svd(m);; TVectorD sig = svd.GetSig(); sig.Sqr();; // Symmetric matrix EigenVector algorithm; TMatrixDSym mtm(TMatrixDBase::kAtA,m);; const TMatrixDSymEigen eigen(mtm);; const TVectorD eigenVal = eigen.GetEigenValues();; const Bool_t ok = VerifyVectorIdentity(sig,eigenVal,1,1.-e-14);; 14.8 Speed Comparisons; Speed of four matrix operations have been compared between four matrix libraries, GSL CLHEP, ROOT v3.10 and ROOT v4.0. Next figure shows the CPU time for these four operations as a function of the matrix size:. A*B The execution time is measured for the sum of A * Bsym, Bsym* A and A * B. Notice the matrix_size3 dependence of execution time. CLHEP results are hampered by a poor implementation of symmetric matrix multiplications. For instance, for general matrices of size 100x100, the time is 0.015 sec. while A * Bsym takes 0.028 sec and Bsym* A takes 0.059 sec. Both GSL and ROOT v4.0 can be setup to use the hardware-optimized multiplication routines of the BLAS libraries. It was tested on a G4 PowerPC. The improvement becomes clearly visible around sizes of (50x50) were the execution speed improvement of the Altivec processor becomes more significant than the overhead of filling its pipe. \(A^{-1}\) Here, the time is measured for an in-place matrix inversion. Except for ROOT v3.10, the algorithms are all based on an LUfactorization followed by forward/back-substitution. ROOT v3.10 is using the slower Gaussian elimination method. The numerical accuracy of the CLHEP routine is poor:. up to 6x6 the numerical imprecise Cramer multiplication is hard-coded. For instance, calculating U=H*H-1, where H i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:801868,depend,dependence,801868,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['depend'],['dependence']
Integrability,"eal with '*'. */; 18571 break;; 18572 case 2:; 18573 /* relative uri */; 18574 conn->request_info.local_uri_raw =; 18575 conn->request_info.request_uri;; 18576 break;; 18577 case 3:; 18578 case 4:; 18579 /* absolute uri (with/without port) */; 18580 hostend = get_rel_url_at_current_server(; 18581 conn->request_info.request_uri, conn);; 18582 if (hostend) {; 18583 conn->request_info.local_uri_raw = hostend;; 18584 } else {; 18585 conn->request_info.local_uri_raw = NULL;; 18586 }; 18587 break;; 18588 default:; 18589 mg_snprintf(conn,; 18590 NULL, /* No truncation check for ebuf */; 18591 ebuf,; 18592 sizeof(ebuf),; 18593 ""Invalid URI"");; 18594 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18595 conn->request_info.local_uri_raw = NULL;; 18596 break;; 18597 }; 18598 conn->request_info.local_uri =; 18599 (char *)conn->request_info.local_uri_raw;; 18600 }; 18601 ; 18602 if (ebuf[0] != '\0') {; 18603 conn->protocol_type = -1;; 18604 ; 18605 } else {; 18606 /* HTTP/1 allows protocol upgrade */; 18607 conn->protocol_type = should_switch_to_protocol(conn);; 18608 ; 18609 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18610 /* This will occur, if a HTTP/1.1 request should be upgraded; 18611 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18612 * Since most (all?) major browsers only support HTTP/2 using; 18613 * ALPN, this is hard to test and very low priority.; 18614 * Deactivate it (at least for now).; 18615 */; 18616 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18617 }; 18618 }; 18619 ; 18620 DEBUG_TRACE(""http: %s, error: %s"",; 18621 (ri->http_version ? ri->http_version : ""none""),; 18622 (ebuf[0] ? ebuf : ""none""));; 18623 ; 18624 if (ebuf[0] == '\0') {; 18625 if (conn->request_info.local_uri) {; 18626 ; 18627 /* handle request to local server */; 18628 handle_request_stat_log(conn);; 18629 ; 18630 } else {; 18631 /* TODO: handle non-local request (PROXY) */; 18632 conn->must_close = 1;; 18633 }; 18634 } else {; 18635 conn->must_close = 1;; 18636 }; 18637 ; 18638 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:552062,protocol,protocol,552062,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['protocol'],['protocol']
Integrability,"eal with '*'. */; 18572 break;; 18573 case 2:; 18574 /* relative uri */; 18575 conn->request_info.local_uri_raw =; 18576 conn->request_info.request_uri;; 18577 break;; 18578 case 3:; 18579 case 4:; 18580 /* absolute uri (with/without port) */; 18581 hostend = get_rel_url_at_current_server(; 18582 conn->request_info.request_uri, conn);; 18583 if (hostend) {; 18584 conn->request_info.local_uri_raw = hostend;; 18585 } else {; 18586 conn->request_info.local_uri_raw = NULL;; 18587 }; 18588 break;; 18589 default:; 18590 mg_snprintf(conn,; 18591 NULL, /* No truncation check for ebuf */; 18592 ebuf,; 18593 sizeof(ebuf),; 18594 ""Invalid URI"");; 18595 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18596 conn->request_info.local_uri_raw = NULL;; 18597 break;; 18598 }; 18599 conn->request_info.local_uri =; 18600 (char *)conn->request_info.local_uri_raw;; 18601 }; 18602 ; 18603 if (ebuf[0] != '\0') {; 18604 conn->protocol_type = -1;; 18605 ; 18606 } else {; 18607 /* HTTP/1 allows protocol upgrade */; 18608 conn->protocol_type = should_switch_to_protocol(conn);; 18609 ; 18610 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18611 /* This will occur, if a HTTP/1.1 request should be upgraded; 18612 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18613 * Since most (all?) major browsers only support HTTP/2 using; 18614 * ALPN, this is hard to test and very low priority.; 18615 * Deactivate it (at least for now).; 18616 */; 18617 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18618 }; 18619 }; 18620 ; 18621 DEBUG_TRACE(""http: %s, error: %s"",; 18622 (ri->http_version ? ri->http_version : ""none""),; 18623 (ebuf[0] ? ebuf : ""none""));; 18624 ; 18625 if (ebuf[0] == '\0') {; 18626 if (conn->request_info.local_uri) {; 18627 ; 18628 /* handle request to local server */; 18629 handle_request_stat_log(conn);; 18630 ; 18631 } else {; 18632 /* TODO: handle non-local request (PROXY) */; 18633 conn->must_close = 1;; 18634 }; 18635 } else {; 18636 conn->must_close = 1;; 18637 }; 18638 ; 18639 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:552095,protocol,protocol,552095,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['protocol'],['protocol']
Integrability,"eal2);  ;  RooProduct (const RooProduct &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooProduct () override;  Destructor. ;  ; void addTerm (RooAbsArg *term);  Add a term to this product. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate partial integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; CacheMode canNodeBeCached () const override;  ; const RooArgList & categoricalComponents () const;  ; TObject * clone (const char *newname) const override;  ; RooArgList components ();  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force internal handling of integration of given observable if any of the product terms depend on it. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Declare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the product operator construction. ;  ; const RooArgList & realComponents () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooProduct with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void transla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:1875,integrat,integrations,1875,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['integrat'],['integrations']
Integrability,eal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kReal32Trunc ; kReal32Quant ; kMax . Definition at line 72 of file RNTupleUtil.hxx. ◆ EExtraTypeInfoIds. enum class ROOT::Experimental::EExtraTypeInfoIds. strong . Used in RExtraTypeInfoDescriptor. . EnumeratorkInvalid ; kStreamerInfo . Definition at line 467 of file RNTupleDescriptor.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fiel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:42131,message,messages,42131,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['message'],['messages']
Integrability,"eal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; RooRealProxy_value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUnblindOffset.html:33158,integrat,integrator,33158,root/html530/RooUnblindOffset.html,https://root.cern,https://root.cern/root/html530/RooUnblindOffset.html,2,['integrat'],['integrator']
Integrability,"eal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3Binding_double_double_int_int_.html:33086,integrat,integrator,33086,root/html530/RooCFunction3Binding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3Binding_double_double_int_int_.html,1,['integrat'],['integrator']
Integrability,"eal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBMixDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& mixState, RooAbsCategory& tagFlav, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& mistag, RooAbsReal& delMistag, const RooResolutionModel& model, RooBMixDecay::DecayType type = DoubleSided); Constructor. RooBMixDecay(const RooBMixDecay& other, const char* name = 0); Copy constructor. ~RooBMixDecay(); Destructor. Double_t coefficient(Int_t basisIndex) const; Comp with tFit MC: must be (1 - tagFlav*...). Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; cout << ""RooBMixDecay::getCoefAI "" ; allVars.Print(""1"") ;. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const. void initGenerator(Int_t code). void generateEvent(Int_t code); Generate mix-state dependent. inline RooBMixDecay(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooBMixDecay(*this,newname) ; }. » Last changed: Tue Jun 2 15:27:58 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBMixDecay.html:48211,depend,dependent,48211,root/html604/RooBMixDecay.html,https://root.cern,https://root.cern/root/html604/RooBMixDecay.html,2,['depend'],['dependent']
Integrability,"eal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsPdf(); Default constructor. RooAbsPdf(const char* name, const char* title = 0); Constructor with name and title only. RooAbsPdf(const char* name, const char* title, Double_t minVal, Double_t maxVal); Constructor with name, title, and plot range. RooAbsPdf(const RooAbsPdf& other, const char* name = 0); Copy constructor. ~RooAbsPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:48298,integrat,integrating,48298,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,4,['integrat'],['integrating']
Integrability,"ealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. RooCategory& asCAT(const char* ); CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. RooArgSet asSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. RooArgList asLIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgList of objects found in workspace. RooAbsData& asDATA(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. RooDataHist& asDHIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. RooDataSet& asDSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. TObject& asOBJ(const char* ). const char* asSTRING(const char* ); CINT constructor interface, return constructor string argument #idx as const char*. Int_t asINT(const char* ); CINT constructor interface, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:20330,interface,interface,20330,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,11,['interface'],['interface']
Integrability,"ealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_startFromMinAlways start minimization for global minimum?; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:36156,integrat,integrator,36156,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,2,['integrat'],['integrator']
Integrability,"ealProxy_pdf1First input p.d.f; RooRealProxy_pdf2Second input p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Double_t_shift1; Double_t_shift2; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_xConvolution observable; RooRealProxy_xprimeInput function representing value of convolution observable; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:46534,integrat,integrator,46534,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['integrat'],['integrator']
Integrability,"ealVar(); Destructor. Double_t getVal(const RooArgSet* nset = 0) const; Return value of variable. void setVal(Double_t value); Set value of variable to 'value'. If 'value' is outside; range of object, clip value into range. void setVal(Double_t value, const char* rangeName); Set value of variable to 'value'. If 'value' is outside; range named 'rangeName' of object, clip value into that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:40163,message,message,40163,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,1,['message'],['message']
Integrability,"ealVector;  CRooVoigtianRooVoigtian is an efficient implementation of the convolution of a Breit-Wigner with a Gaussian, making use of the complex error function ;  ►CRooWorkspaceThe RooWorkspace is a persistable container for RooFit projects ;  ►CCodeRepo;  CClassFiles;  CClassRelInfo;  CExtraHeader;  CWSDir;  CRooXYChi2Var;  Crsa_KEY;  Crsa_KEY_export;  Crsa_NUMBER;  CSegment_t;  CSetWindowAttributes_t;  CSHtmlExtensions_t;  CSHtmlIndex_t;  CSHtmlMargin_t;  CSHtmlStyle_t;  CSHtmlStyleStack_t;  CSHtmlTokenMap_t;  CSQLite3_Stmt_t;  CSysInfo_t;  CtableDescriptor_st;  CTAdvancedGraphicsDialog;  CTAFS;  CTAlien;  CTAlienCollection;  CTAlienDirectory;  CTAlienDirectoryEntry;  CTAlienFile;  CTAliEnFind;  CTAlienJDL;  CTAlienJob;  CTAlienJobStatus;  CTAlienJobStatusList;  CTAlienMasterJob;  CTAlienMasterJobStatus;  CTAlienPackage;  CTAlienResult;  CTAlienSystem;  CTAnyPtrModels a shared pointer or a unique pointer ;  CTApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers ;  CTApplicationImpABC describing GUI independent application implementation protocol ;  ►CTApplicationRemote;  CTARFileStat;  CTApplicationServer;  CTArcCreate an Arc ;  CTArcBallImplements the arc-ball rotation manipulator ;  CTArchiveFileClass describing an archive file containing multiple sub-files, like a ZIP or TAR archive ;  CTArchiveMember;  CTARInterruptHandler;  CTArrayAbstract array base class ;  CTArrayCArray of chars or bytes (8 bits per element) ;  CTArrayDArray of doubles (64 bits per element) ;  CTArrayFArray of floats (32 bits per element) ;  CTArrayIArray of integers (32 bits per element) ;  CTArrayLArray of longs (32 or 64 bits per element) ;  CTArrayL64Array of long64s (64 bits per element) ;  CTArraySArray of shorts (16 bits per element) ;  CTArrowDraw all kinds of Arrows ;  CTArrowEditor;  CTASImageImage class ;  CTASImagePlugin;  CTASLogHandler;  CTASLogHandlerGuard;  ►CTASPaletteEditorThis is a GUI window ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:125974,interface,interfaces,125974,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['interface'],['interfaces']
Integrability,"eam & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Calculate and return 'raw' unnormalized value of p.d.f. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:59841,rout,routine,59841,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['rout'],['routine']
Integrability,"eam *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; CacheElem * getCache (const RooArgSet *nset) const;  ; int idxmax (const double &m) const;  ; int idxmin (const double &m) const;  ; Int_t ij (const Int_t &i, const Int_t &j) const;  ; void initialize ();  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:62021,rout,routine,62021,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['rout'],['routine']
Integrability,"eam an object of class TQObject. Bool_t AreAllSignalsBlocked(); Returns true if all signals are blocked. Bool_t BlockAllSignals(Bool_t b); Block or unblock all signals. Returns the previous block status. void LoadRQ_OBJECT(); Load RQ_OBJECT.h which contains the #define RQ_OBJECT needed to; let interpreted classes connect to signals of compiled classes. void * GetSender(); { return this; }. const char * GetSenderClassName() const; { return """"; }. TQObject(const TQObject& tqo). TQObject& operator=(const TQObject& tqo). TList * GetListOfSignals() const; { return fListOfSignals; }. TList * GetListOfConnections() const; { return fListOfConnections; }. Bool_t AreSignalsBlocked() const; { return fSignalsBlocked; }. Bool_t BlockSignals(Bool_t b); { Bool_t ret = fSignalsBlocked; fSignalsBlocked = b; return ret; }. void Emit(const char* signal). void Emit(const char* signal, Long_t* paramArr). void Emit(const char* signal, const char* params). void Emit(const char* signal, Double_t param). void Emit(const char* signal, Long_t param). void Emit(const char* signal, Long64_t param). void Emit(const char* signal, Bool_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Char_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, UChar_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Short_t param); { Emit(signal, (Long_t)param); }. void Connected(const char* ); { }. void Disconnected(const char* ); { }. void Destroyed(); { Emit(""Destroyed()""); }. void ChangedBy(const char* method); { Emit(""ChangedBy(char*)"", method); }. void Message(const char* msg); { Emit(""Message(char*)"", msg); }. » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-04 16:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQObject.html:14519,Message,Message,14519,root/html534/TQObject.html,https://root.cern,https://root.cern/root/html534/TQObject.html,2,['Message'],['Message']
Integrability,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47725,message,message,47725,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['message'],"['message', 'messages']"
Integrability,"eam. Multiple message streams can write to same c++ stream. The return value is the unique ID code of the defined stream. void deleteStream(Int_t id); Delete stream with given unique ID code. void setStreamStatus(Int_t id, Bool_t active); (De)Activate stream with given unique ID. Bool_t getStreamStatus(Int_t id) const; Get activation status of stream with given unique ID. RooMsgService& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:10786,message,message,10786,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,20,['message'],['message']
Integrability,"eamerInfo * GetConversionStreamerInfo( const TClass* cl, Int_t version ); Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const char* classname, UInt_t checksum ); Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo( const TClass* cl, UInt_t checksum ); Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:41699,wrap,wrapper,41699,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['wrap'],['wrapper']
Integrability,"eamerInfo in the given slot.Definition TClass.cxx:7320; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5658; TClass::AddInstancevoid AddInstance(Bool_t heap=kFALSE)Definition TClass.h:381; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3741; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4709; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:4978; TClass::SetMergevoid SetMerge(ROOT::MergeFunc_t mergeFunc)Install a new wrapper around 'Merge'.Definition TClass.cxx:6969; TClass::fConversionStreamerInfoConvSIMap_t fConversionStreamerInfoDefinition TClass.h:199; TClass::fDirAutoAddROOT::DirAutoAdd_t fDirAutoAddDefinition TClass.h:240; TClass::HasDataMemberInfoBool_t HasDataMemberInfo() constDefinition TClass.h:407; TClass::fRefProxyTVirtualRefProxy * fRefProxycached streamer info used in the last read.Definition TClass.h:280; TClass::GetMenuListTList * GetMenuList() constReturn the list of menu items associated with the class.Definition TClass.cxx:4341; TClass::fMergeROOT::MergeFunc_t fMergesaved info to call a IsA member functionDefinition TClass.h:233; TClass::GetMethodTMethod * GetMethod(const char *method, const char *params, Bool_t objectIsConst=kFALSE)Find the best method (if there is one) matching the parameters.Definition TClass.cxx:4411; TClass::Loadstatic TClass * Load(TBuffer &b)Load class description from I/O buffer and return class object.Definition TClass.cxx:57",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:45735,wrap,wrapper,45735,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"eamerInfo in the given slot.Definition TClass.cxx:7387; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5725; TClass::AddInstancevoid AddInstance(Bool_t heap=kFALSE)Definition TClass.h:381; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3808; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::SetMergevoid SetMerge(ROOT::MergeFunc_t mergeFunc)Install a new wrapper around 'Merge'.Definition TClass.cxx:7036; TClass::fConversionStreamerInfoConvSIMap_t fConversionStreamerInfoDefinition TClass.h:199; TClass::fDirAutoAddROOT::DirAutoAdd_t fDirAutoAddDefinition TClass.h:240; TClass::HasDataMemberInfoBool_t HasDataMemberInfo() constDefinition TClass.h:407; TClass::fRefProxyTVirtualRefProxy * fRefProxycached streamer info used in the last read.Definition TClass.h:280; TClass::GetMenuListTList * GetMenuList() constReturn the list of menu items associated with the class.Definition TClass.cxx:4408; TClass::fMergeROOT::MergeFunc_t fMergesaved info to call a IsA member functionDefinition TClass.h:233; TClass::GetMethodTMethod * GetMethod(const char *method, const char *params, Bool_t objectIsConst=kFALSE)Find the best method (if there is one) matching the parameters.Definition TClass.cxx:4478; TClass::Loadstatic TClass * Load(TBuffer &b)Load class description from I/O buffer and return class object.Definition TClass.cxx:57",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:45563,wrap,wrapper,45563,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"eamerInfo::GetReadMemberWiseActionsTStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Bool_t forCollection)Definition TStreamerInfo.h:167; TStringBasic string class.Definition TString.h:139; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::kTrailing@ kTrailingDefinition TString.h:276; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; TVirtualArray::fSizeUInt_t fSizeDefinition TVirtualArray.h:33; TVirtualArray::fClassTClassRef fClassDefinition TVirtualArray.h:31; TVirtualCollectionProxy::TPushPopRAII helper class that ensures that PushProxy() / PopProxy() are called when entering / leaving a C++...Definition TVirtualCollectionProxy.h:75; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionProxy::GetPropertiesvirtual Int_t GetProperties() constReturn miscallenous properties of the proxy (see TVirtualCollectionProxy::EProperty)Definition TVirtualCollectionProxy.h:108; TVirtualCollectionProxy::GetIncrementvirtual ULong_t GetIncrement() const =0Return the offset between two consecutive in-memory values (which depends on the sizeof() and alignme...; TVirtualCollectionProxy::GetReadMemberWiseActionsvirtual TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version)=0; TVirtualCollectionProxy::CreateIterators_tvoid(* CreateIterators_t)(void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy)*begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize...Definition TVirtualCollectionProxy.h:215; TVirtualCollectionProxy::GetTypevirtual EDataType GetType() const =0If th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:243379,interface,interface,243379,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['interface'],['interface']
Integrability,"eamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TF12(); TF12(const TF12& f12); TF12(const char* name, TF2* f2, Double_t xy, Option_t* option = ""x""); virtual voidTF1::Update(); virtual voidTObject::UseCurrentStyle(); virtual Double_tTF1::Variance(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual TH1*TF1::DoCreateHistogram(Double_t xmin, Double_t xmax, Bool_t recreate = kFALSE); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTF1::DoInitialize(); virtual Double_tTF1::GetMinMaxNDim(Double_t* x, Bool_t findmax, Double_t epsilon = 0, Int_t maxiter = 0) const; virtual voidTF1::GetRange(Double_t* xmin, Double_t* xmax) const; voidTF1::IntegrateForNormalization(); voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TF1::(anonymous)TF1::kNotDraw; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF12.html:15796,Integrat,IntegrateForNormalization,15796,root/html604/TF12.html,https://root.cern,https://root.cern/root/html604/TF12.html,1,['Integrat'],['IntegrateForNormalization']
Integrability,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:6165,message,message,6165,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,2,['message'],['message']
Integrability,"ean (background); 663 Double_t fRmsS; ///< RMS (signal); 664 Double_t fRmsB; ///< RMS (background); 665 Double_t fXmin; ///< minimum (signal and background); 666 Double_t fXmax; ///< maximum (signal and background); 667 ; 668 // variable preprocessing; 669 TString fVarTransformString; ///< labels variable transform method; 670 ; 671 TransformationHandler* fTransformationPointer; ///< pointer to the rest of transformations; 672 TransformationHandler fTransformation; ///< the list of transformations; 673 ; 674 ; 675 // help and verbosity; 676 Bool_t fVerbose; ///< verbose flag; 677 TString fVerbosityLevelString; ///< verbosity level (user input string); 678 EMsgType fVerbosityLevel; ///< verbosity level; 679 Bool_t fHelp; ///< help flag; 680 Bool_t fHasMVAPdfs; ///< MVA Pdfs are created for this classifier; 681 ; 682 Bool_t fIgnoreNegWeightsInTraining; ///< If true, events with negative weights are not used in training; 683 ; 684 protected:; 685 ; 686 Bool_t IgnoreEventsWithNegWeightsInTraining() const { return fIgnoreNegWeightsInTraining; }; 687 ; 688 // for signal/background; 689 UInt_t fSignalClass; // index of the Signal-class; 690 UInt_t fBackgroundClass; // index of the Background-class; 691 ; 692 private:; 693 ; 694 // timing variables; 695 Double_t fTrainTime; // for timing measurements; 696 Double_t fTestTime; // for timing measurements; 697 ; 698 // orientation of cut: depends on signal and background mean values; 699 ECutOrientation fCutOrientation; // +1 if Sig>Bkg, -1 otherwise; 700 ; 701 // for root finder; 702 TSpline1* fSplRefS; // helper splines for RootFinder (signal); 703 TSpline1* fSplRefB; // helper splines for RootFinder (background); 704 ; 705 TSpline1* fSplTrainRefS; // helper splines for RootFinder (signal); 706 TSpline1* fSplTrainRefB; // helper splines for RootFinder (background); 707 ; 708 mutable std::vector<const std::vector<TMVA::Event*>*> fEventCollections; // if the method needs the complete event-collection, the transformed event coll.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:30298,depend,depends,30298,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['depend'],['depends']
Integrability,"ean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:42052,integrat,integration,42052,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,2,['integrat'],['integration']
Integrability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPolyVar.html:33533,integrat,integration,33533,root/html534/RooPolyVar.html,https://root.cern,https://root.cern/root/html534/RooPolyVar.html,2,['integrat'],['integration']
Integrability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:39546,integrat,integration,39546,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,4,['integrat'],"['integrated', 'integration']"
Integrability,"eans of the Plugin Manager. plugin manager; In the Figure 1-2, the libraries represented by green boxes outside of the core are loaded via the plugin manager plugin manager or equivalent techniques, while the white ones are not. Of course, if one wants to access a plugin library directly, it has to be explicitly linked. An example of a plugin library is libMinuit. To create and fill histograms you need to link libHist.so. If the code has a call to fit the histogram, the “fitter” will dynamically load libMinuit if it is not yet loaded.; 1.6.2.3 Plugins: Runtime Library Dependencies for Linking; plugin manager The Plugin Manager TPluginManager allows postponing library dependencies to runtime: a plugin library will only be loaded when it is needed. Non-plugins will need to be linked, and are thus loaded at start-up. Plugins are defined by a base class (e.g. TFile) that will be implemented in a plugin, a tag used to identify the plugin (e.g. ^rfio: as part of the protocol string), the plugin class of which an object will be created (e.g. TRFIOFile), the library to be loaded (in short libRFIO.so to RFIO), and the constructor to be called (e.g. “TRFIOFile()”). This can be specified in the .rootrc which already contains many plugin definitions, or by calls to gROOT->GetPluginManager()->AddHandler().; 1.6.2.4 Library AutoLoading; When using a class in Cling, e.g. in an interpreted source file, ROOT will automatically load the library that defines this class. On start-up, ROOT parses all files ending on .rootmap rootmap that are in one of the $LD_LIBRARY_PATH (or $DYLD_LIBRARY_PATH for MacOS, or $PATH for Windows). They contain class names and the library names that the class depends on. After reading them, ROOT knows which classes are available, and which libraries to load for them.; When TSystem::Load(""ALib"") is called, ROOT uses this information to determine which libraries libALib.so depends on. It will load these libraries first. Otherwise, loading the requested librar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:23734,protocol,protocol,23734,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['protocol'],['protocol']
Integrability,"eant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3442 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:145887,depend,depends,145887,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['depend'],['depends']
Integrability,"eant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3360 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:144050,depend,depends,144050,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['depend'],['depends']
Integrability,"eanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMonitor*fAllMonitormonitor activity on all valid slave sockets; TList*fAvailablePackageslist of available packages; TList*fBadSlavesdead slaves (subset of all slaves); Long64_tfBytesReadynumber of bytes staged; Int_tfCollectTimeoutTimeout for (some) collect actions; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; TStringfDataPoolUrldefault data pool entry point URL; Bool_tfDataReadytrue if data is ready to be analyzed; Bool_tfDynamicStartupare the workers started dynamically?; TList*fEnabledPackageslist of enabled packages; TStringfImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*fManagermanager to which this session belongs (if any); Bool_tfMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Int_tfProtocolremote PROOF server protocol version number; TProof::EQueryModefQueryModedefault query mode; TList*fRunningDSetsTemporary datasets used for async running; TProofMgr::EServTypefServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*fSlaveslist of all slave servers as in config file; TStringTNamed::fTitleobject title; Long64_tfTotalBytesnumber of bytes to be analyzed; TUrlfUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*fgSemaphoresemaphore to control no of parallel startup threads. private:. TMonitor*fActiveMonitormonitor activity on all active slave sockets; TList*fActiveSlaveslist of active slaves (subset of all slaves); TMonitor*fAllUniqueMonitormonitor activity on all unique slave sockets, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:27034,protocol,protocol,27034,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['protocol'],['protocol']
Integrability,"eap and one on the stack. The heap object will live until the delete operator is applied to it.; There is no FORTRAN parallel to a heap object; variables either come or go as control passes in and out of a function or subroutine, or, like a COMMON block variables, live for the lifetime of the program. However, most people in HEP who use FORTRAN will have experience of a memory manager and the act of creating a bank is a good equivalent of a heap object. For those who know systems like ZEBRA, it will come as a relief to learn that objects do not move, C++ does not garbage collect, so there is never a danger that a pointer to an object becomes invalid for that reason. However, having created an object, it is the user’s responsibility to ensure that it is deleted when no longer needed, or to pass that responsibility onto to some other object. Failing to do that will result in a memory leak, one of the most common and most hard-to-find C++ bugs.; To send a message to an object via a pointer to it, you need to use the “->” operator e.g.:; root[] my_objptr->Solve();; Although we chose to call our pointer my_objptr, to emphasize that it is a pointer, heap objects are so common in an object-oriented program that pointer names rarely reflect the fact - you have to be careful that you know if you are dealing with an object or its pointer! Fortunately, the compiler won’t tolerate an attempt to do something like:; root[] my_objptr.Solve();; As we have seen, heap objects have to be accessed via pointers, whereas stack objects can be accessed directly. They can also be accessed via pointers:; root[] Quad stack_quad(1.,2.,-3.);; root[] Quad *stack_ptr = &stack_quad;; root[] stack_ptr->Solve();; Here we have a Quad pointer that has been initialized with the address of a stack object. Be very careful if you take the address of stack objects. As we shall see soon, they are deleted automatically, which could leave you with an illegal pointer. Using it will corrupt and may as well cras",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:251911,message,message,251911,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['message'],['message']
Integrability,"eap and rm -rf is easy. Note that you must copy the entire repository, since all the important information is in the .git directory tree at the top level. Stashing; This is a good way quickly to get a clean tree if you want to merge or rebase (see below) to import changes from a branch without having to commit your current work. Save uncommitted changes to the current working area to the stash (not a commit operation):; git stash. Apply previously-saved stash:; git stash pop. (pops off the changes and applies them to the current working area) or; git stash apply. which applies the changes but retains them on the stack.; Examine the current state of the stash:; git stash list. Clear the entire stash:; git stash clear. Rebasing; Rebasing is changing history, if you think that git stores history. As mentioned above, it doesn't: it saves objects with parent, child and other (eg date, author, etc) information. In a truly distributed environment, the actual history will be different for every repository depending exactly how and when changes were fetched, merged or pushed.; Rebasing is a good way to do a couple of things:. ""Squash"" related commits in your local repository prior to a push (eg, ""Implement feature X,"" ""Tests for feature X"" and, ""Fix bugs found while testing feature X"").; Simplify merging branches and keeping up-to-date with remote changes during long periods between pushes. Important tip: do not attempt to rebase anything that has already been pushed to a remote repository. Your next push will almost certainly fail (and quite right too). Squashing related commits:. Squash some of the last few commits in your current branch:; git rebase -i HEAD~5. Your configured editor (VISUAL or EDITOR) will be started and contain a list of your last five commits (most recent at the bottom) along with instructions on what to do. Commits can have their log messages reworded; commits can be removed entirely, combined with other commits or re-ordered. If you specified any rewor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:11351,depend,depending,11351,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['depend'],['depending']
Integrability,"eap()) { // test uses fBits so don't move next line; 150 obj.fBits = fBits;; 151 obj.fBits |= kIsOnHeap;; 152 } else {; 153 obj.fBits = fBits;; 154 obj.fBits &= ~kIsOnHeap;; 155 }; 156 obj.fBits &= ~kIsReferenced;; 157 obj.fBits &= ~kCanDelete;; 158}; 159 ; 160////////////////////////////////////////////////////////////////////////////////; 161/// TObject destructor. Removes object from all canvases and object browsers; 162/// if observer bit is on and remove from the global object table.; 163 ; 164TObject::~TObject(); 165{; 166 // if (!TestBit(kNotDeleted)); 167 // Fatal(""~TObject"", ""object deleted twice"");; 168 ; 169 ROOT::CallRecursiveRemoveIfNeeded(*this);; 170 ; 171 fBits &= ~kNotDeleted;; 172 ; 173 if (fgObjectStat && gObjectTable) gObjectTable->RemoveQuietly(this);; 174}; 175 ; 176////////////////////////////////////////////////////////////////////////////////; 177/// Private helper function which will dispatch to; 178/// TObjectTable::AddObj.; 179/// Included here to avoid circular dependency between header files.; 180 ; 181void TObject::AddToTObjectTable(TObject *op); 182{; 183 TObjectTable::AddObj(op);; 184}; 185 ; 186////////////////////////////////////////////////////////////////////////////////; 187/// Append graphics object to current pad. In case no current pad is set; 188/// yet, create a default canvas with the name ""c1"".; 189 ; 190void TObject::AppendPad(Option_t *option); 191{; 192 if (!gPad); 193 gROOT->MakeDefCanvas();; 194 ; 195 if (!gPad->IsEditable()); 196 return;; 197 ; 198 gPad->Add(this, option);; 199}; 200 ; 201////////////////////////////////////////////////////////////////////////////////; 202/// Browse object. May be overridden for another default action; 203 ; 204void TObject::Browse(TBrowser *b); 205{; 206 //Inspect();; 207 TClass::AutoBrowse(this,b);; 208}; 209 ; 210////////////////////////////////////////////////////////////////////////////////; 211/// Returns name of class to which the object belongs.; 212 ; 213const char *TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:6459,depend,dependency,6459,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['depend'],['dependency']
Integrability,"eap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. char_label[256]State name; static Int_tRooPrintable::_nameLength; Int_t_valueIndex value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetName(const Text_t* name); Constructor with name argument. void printName(ostream& os) const; Print the name of the state. void printTitle(ostream& os) const; Print the title of the state. void printClassName(ostream& os) const; Print the class name of the state. void printValue(ostream& os) const; Print the value (index integer) of the state. inline RooCatType(); Default constructor. inline RooCatType(const char* name, Int_t value); Constructor with state name and index value. inline RooCatType(const RooCatType& other); Copy constructor. virtual ~RooCatType(); Destructor. TObject* Clone(const char* ) const; { return new RooCatType(*this); }. const Text_t* GetName() const; Return state name. RooCatType& operator=(const RooCatType& other); Assignment operator from other RooCatType. void assignFast(const RooCatType& other); Fast assignment operator from other RooCatType. Bool_t operator==(const RooCatType& other); Equality operator with other RooCatType. Bool_t operator==(Int_t index); Return true if index value matches integer. Bool_t operator==(const char* label); Return true if state name matchins string. Int_t getVal() const; Return index value. void setVal(Int_t newValue); Set index value. void Print(Option_t* options = 0) const; Printing interface. » Last changed: Tue Mar 10 17:15:53 2015 » Last generated: 2015-03-10 17:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCatType.html:8171,interface,interface,8171,root/html534/RooCatType.html,https://root.cern,https://root.cern/root/html534/RooCatType.html,2,['interface'],['interface']
Integrability,"eap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfAnchoranchor in object (after #); TStringfFileremote object; TStringfFileOA!file with option and anchor; TStringfHostremote host; TStringfHostFQ!fully qualified host name; TStringfOptionsoptions/search (after ?); TMap*fOptionsMap!map containing options key/value pairs; TStringfPasswdpassword; Int_tfPortport through which to contact remote server; TStringfProtocolprotocol: http, ftp, news, root, proof, ...; TStringfUrlfull URL; TStringfUseruser name; static THashList*fgHostFQDNslist of resolved host FQDNs; static TObjArray*fgSpecialProtocolslist of special protocols; static TUrl::EStatusBitskUrlHasDefaultPort; static TUrl::EStatusBitskUrlWithDefaultPort. Class Charts. Inheritance Chart:. TObject. ←; TUrl. Function documentation; TUrl(const char* url, Bool_t defaultIsFile = kFALSE); Parse url character string and split in its different subcomponents.; Use IsValid() to check if URL is legal. url: [proto://][user[:passwd]@]host[:port]/file.ext[?options][#anchor]. Known protocols: http, root, proof, ftp, news and any special protocols; defined in the rootrc Url.Special key.; The default protocol is ""http"", unless defaultIsFile is true in which; case the url is assumed to be of type ""file"".; If a passwd contains a @ it must be escaped by a \\, e.g.; ""pip@"" becomes ""pip\\@"". Default ports: http=80, root=1094, proof=1093, ftp=20, news=119.; Port #1093 has been assigned by IANA (www.iana.org) to proofd.; Port #1094 has been assigned by IANA (www.iana.org) to rootd. ~TUrl(); Cleanup. void SetUrl(const char* url, Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUrl.html:7360,protocol,protocols,7360,root/html602/TUrl.html,https://root.cern,https://root.cern/root/html602/TUrl.html,4,['protocol'],['protocols']
Integrability,"ear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  MethodRSVM;  ; class  MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  MethodRXGB;  ; class  MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  MinuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA.html:7426,interface,interface,7426,doc/master/namespaceTMVA.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html,2,['interface'],['interface']
Integrability,"ear equation A*x=b. The same factorizations are used as in the matrix inversion. However, only 1 forward/back-substitution has to be used instead of msize as in the inversion of (msize x msize) matrix. As a consequence the same differences are observed but less amplified. CLHEP shows the same numerical issues as in step the matrix inversion. Since ROOT3.10 has no dedicated equation solver, the solution is calculated through x=A-1*b. This will be slower and numerically not as stable.; \((A^{T}*A)^{-1}*A^{T}\) timing results for calculation of the pseudo inverse of matrix a. The sequence of operations measures the impact of several calls to constructors and destructors in the C++ packages versus a C library like GSL. Speed comparison between the different matrix packages. 15 Adding a Class; 15.1 The Role of TObject; The light-weight TObject class provides the default behavior and protocol for the objects in the ROOT system. Specifically, it is the primary interface to classes providing object I/O, error handling, inspection, introspection, and drawing. The interface to this service is via abstract classes.; 15.1.1 Introspection, Reflection and Run Time Type Identification; Introspection, which is also referred to as reflection, or run time type identification (RTTI) is the ability of a class to reflect upon itself or to ""look inside itself. ROOT implements reflection with the TClass class. It provides all the information about a class, a full description of data members and methods, including the comment field and the method parameter types. A class with the ClassDef macro has the ability to obtain a TClass with the IsA method.; TClass *cl = obj->IsA();; It returns a TClass. In addition, an object can directly get the class name and the base classes by:; const char* name = obj->ClassName();; If the class is a descendent of TObject, you can check if an object inherits from a specific class, you can use the InheritsFrom method. This method returns kTrue if the object inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:804700,interface,interface,804700,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"ear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; RooStats::HistFactory::LinInterpVarLinInterpVar(); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title); RooStats::HistFactory::LinInterpVarLinInterpVar(const RooStats::HistFactory::LinInterpVar&, const char*); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title, const RooArgList& _paramList, double nominal, vector<double> low, vector<double> high); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__LinInterpVar.html:17802,message,message,17802,root/html534/RooStats__HistFactory__LinInterpVar.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__LinInterpVar.html,2,['message'],['message']
Integrability,"ear(); }; 205 void SetCurrentCollection();; 206 void SetName(const char *name) { fName = name; }; 207 virtual void SetOwner(Bool_t enable = kTRUE);; 208 virtual bool UseRWLock(Bool_t enable = true);; 209 Int_t Write(const char *name = nullptr, Int_t option = 0, Int_t bufsize = 0) override;; 210 Int_t Write(const char *name = nullptr, Int_t option = 0, Int_t bufsize = 0) const override;; 211 ; 212 R__ALWAYS_INLINE Bool_t IsUsingRWLock() const { return TestBit(TCollection::kUseRWLock); }; 213 ; 214 static TCollection *GetCurrentCollection();; 215 static void StartGarbageCollection();; 216 static void GarbageCollect(TObject *obj);; 217 static void EmptyGarbageCollection();; 218 ; 219 TIter begin() const;; 220 TIter end() const;; 221 ; 222 ClassDefOverride(TCollection,3) //Collection abstract base class; 223};; 224 ; 225 ; 226//////////////////////////////////////////////////////////////////////////; 227// //; 228// TIter //; 229// //; 230// Iterator wrapper. Type of iterator used depends on type of //; 231// collection. //; 232// //; 233//////////////////////////////////////////////////////////////////////////; 234 ; 235class TIter {; 236 ; 237private:; 238 TIterator *fIterator{nullptr}; //collection iterator; 239 ; 240protected:; 241 TIter() : fIterator(nullptr) { }; 242 ; 243public:; 244 TIter(const TCollection *col, Bool_t dir = kIterForward); 245 : fIterator(col ? col->MakeIterator(dir) : nullptr) { }; 246 TIter(TIterator *it) : fIterator(it) { }; 247 TIter(const TIter &iter);; 248 TIter &operator=(const TIter &rhs);; 249 virtual ~TIter() { SafeDelete(fIterator); }; 250 TObject *operator()() { return Next(); }; 251 TObject *Next() { return fIterator ? fIterator->Next() : nullptr; }; 252 const TCollection *GetCollection() const { return fIterator ? fIterator->GetCollection() : nullptr; }; 253 Option_t *GetOption() const { return fIterator ? fIterator->GetOption() : """"; }; 254 void Reset() { if (fIterator) fIterator->Reset(); }; 255 TIter &operator++() { Next(); retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:9004,depend,depends,9004,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['depend'],['depends']
Integrability,"ear; 942/// in the input plotVars list. If scaleForDensity is true the; 943/// histogram is filled with a the functions density rather than; 944/// the functions value (i.e. the value at the bin center is multiplied; 945/// with bin volume); 946 ; 947TH1 *RooAbsReal::fillHistogram(TH1 *hist, const RooArgList &plotVars,; 948 double scaleFactor, const RooArgSet *projectedVars, bool scaleForDensity,; 949 const RooArgSet* condObs, bool setError) const; 950{; 951 // Do we have a valid histogram to use?; 952 if(nullptr == hist) {; 953 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: no valid histogram to fill"" << std::endl;; 954 return nullptr;; 955 }; 956 ; 957 // Check that the number of plotVars matches the input histogram's dimension; 958 Int_t hdim= hist->GetDimension();; 959 if(hdim != int(plotVars.size())) {; 960 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: plotVars has the wrong dimension"" << std::endl;; 961 return nullptr;; 962 }; 963 ; 964 ; 965 // Check that the plot variables are all actually RooRealVars and print a warning if we do not; 966 // explicitly depend on one of them. Fill a set (not list!) of cloned plot variables.; 967 RooArgSet plotClones;; 968 for(std::size_t index= 0; index < plotVars.size(); index++) {; 969 const RooAbsArg *var= plotVars.at(index);; 970 const RooRealVar *realVar= dynamic_cast<const RooRealVar*>(var);; 971 if(nullptr == realVar) {; 972 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: cannot plot variable \"""" << var->GetName(); 973 << ""\"" of type "" << var->ClassName() << std::endl;; 974 return nullptr;; 975 }; 976 if(!this->dependsOn(*realVar)) {; 977 coutE(InputArguments) << ClassName() << ""::"" << GetName(); 978 << "":fillHistogram: WARNING: variable is not an explicit dependent: "" << realVar->GetName() << std::endl;; 979 }; 980 plotClones.addClone(*realVar,true); // do not complain about duplicates; 981 }; 982 ; 983 // Reconnect all plotClo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:39342,depend,depend,39342,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['depend']
Integrability,"earAll( void ); delete and clear all class members. void Train( void ); FDA training. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; display fit parameters; check maximum length of variable name. Double_t EstimatorFunction(vector<Double_t>& ); compute estimator for given parameter set (to be minimised); const Double_t sumOfWeights[] = { fSumOfWeightsSig, fSumOfWeightsBkg, fSumOfWeights };. Double_t InterpretFormula(const TMVA::Event* , vector<double,allocator<double> >::iterator begin, vector<double,allocator<double> >::iterator end); formula interpretation. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(). void CalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); calculate the values for multiclass. void ReadWeightsFromStream(istream& i); read back the training results from a file (stream). void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write FDA-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". const Ranking* CreateRanking(); ranking of input variables. { return 0; }. void CheckSetup(); no check of options at this place. {}. » Author: Andreas Hoecker, Peter Speckmayer » Copyright (c) 2005-2010: *; » Last changed: root/tmva $Id: MethodFDA.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodFDA.html:20375,message,message,20375,root/html530/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodFDA.html,1,['message'],['message']
Integrability,"earCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNLLVar, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 463 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 317 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 434 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 414 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 411 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 413 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 412 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:153000,wrap,wrapper,153000,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['wrap'],['wrapper']
Integrability,"earch. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TMultiDimFit. class TMultiDimFit: public TNamed. /*; >; ; Multidimensional Fits in ROOT. Overview; . A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable.; ; An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of of positional measurements at; intervals along the particle trajectory.; ; The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations.; ; This explicit function of the observations can be obtained by a; least squares fitting procedure applied to a representive; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables.; ; This class TMultiDimFit implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package; [2]. Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit.; ; In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:1126,depend,dependence,1126,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['depend'],['dependence']
Integrability,"earching...; No Matches. List of all members |; Public Attributes |; List of all members ; Configuration Struct Reference. . Definition at line 3 of file RooAbsTestStatistic.h. Public Attributes; std::string addCoefRangeName;  ; bool binnedL = false;  ; bool cloneInputData = true;  ; double integrateOverBinsPrecision = -1.;  ; RooFit::MPSplit interleave = RooFit::BulkPartition;  ; int nCPU = 1;  ; std::string rangeName;  Stores the configuration parameters for RooAbsTestStatistic. ;  ; bool splitCutRange = false;  ; bool takeGlobalObservablesFromData = false;  ; bool verbose = true;  . #include <RooAbsTestStatistic.h>; Member Data Documentation. ◆ addCoefRangeName. std::string Configuration::addCoefRangeName. Definition at line 6 of file RooAbsTestStatistic.h. ◆ binnedL. bool Configuration::binnedL = false. Definition at line 13 of file RooAbsTestStatistic.h. ◆ cloneInputData. bool Configuration::cloneInputData = true. Definition at line 11 of file RooAbsTestStatistic.h. ◆ integrateOverBinsPrecision. double Configuration::integrateOverBinsPrecision = -1. Definition at line 12 of file RooAbsTestStatistic.h. ◆ interleave. RooFit::MPSplit Configuration::interleave = RooFit::BulkPartition. Definition at line 8 of file RooAbsTestStatistic.h. ◆ nCPU. int Configuration::nCPU = 1. Definition at line 7 of file RooAbsTestStatistic.h. ◆ rangeName. std::string Configuration::rangeName. Stores the configuration parameters for RooAbsTestStatistic. ; Definition at line 5 of file RooAbsTestStatistic.h. ◆ splitCutRange. bool Configuration::splitCutRange = false. Definition at line 10 of file RooAbsTestStatistic.h. ◆ takeGlobalObservablesFromData. bool Configuration::takeGlobalObservablesFromData = false. Definition at line 14 of file RooAbsTestStatistic.h. ◆ verbose. bool Configuration::verbose = true. Definition at line 9 of file RooAbsTestStatistic.h. Collaboration diagram for Configuration:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structConfiguration.html:1083,integrat,integrateOverBinsPrecision,1083,doc/v632/structConfiguration.html,https://root.cern,https://root.cern/doc/v632/structConfiguration.html,1,['integrat'],['integrateOverBinsPrecision']
Integrability,"earching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr > Class Template ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<typename FuncObj, typename MemFuncPtr>; class ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. ; Definition at line 95 of file WrappedFunction.h. Public Member Functions;  WrappedMemFunction (FuncObj &obj, MemFuncPtr memFn);  construct from the pointer to the object and the member function ;  ; WrappedMemFunction * Clone () const override;  clone (required by the interface) ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; MemFuncPtr fMemFunc;  ; FuncObj * fObj;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ WrappedMemFunction(). template<typename FuncObj , typename MemFuncPtr > . RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html:1129,interface,interface,1129,doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,1,['interface'],['interface']
Integrability,"earching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:1032,integrat,integration,1032,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['integrat'],['integration']
Integrability,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1268,message,message,1268,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,1,['message'],['message']
Integrability,"earest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection into a TProfile2D histogram NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along X. ;  ; virtual TH1D * ProjectionY (const char *name=""_py"", Int_t ixmin=0, Int_t ixmax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along Y. ;  ; virtual TH1D * ProjectionZ (const char *name=""_pz"", Int_t ixmin=0, Int_t ixmax=-1, Int_t iymin=0, Int_t iymax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along Z. ;  ; void PutStats (Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:10260,depend,depending,10260,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,7,['depend'],['depending']
Integrability,"early combining; : the rules. A fitting procedure is applied to find the optimum; : set of coefficients. The goal is to find a model with few rules; : but with a strong discriminating power.; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : There are two important considerations to make when optimising:; : ; : 1. Topology of the decision tree forest; : 2. Fitting of the coefficients; : ; : The maximum complexity of the rules is defined by the size of; : the trees. Large trees will yield many complex rules and capture; : higher order correlations. On the other hand, small trees will; : lead to a smaller ensemble with simple rules, only capable of; : modeling simple structures.; : Several parameters exists for controlling the complexity of the; : rule ensemble.; : ; : The fitting procedure searches for a minimum using a gradient; : directed path. Apart from step size and number of steps, the; : evolution of the path is defined by a cut-off parameter, tau.; : This parameter is unknown and depends on the training data.; : A large value will tend to give large weights to a few rules.; : Similarly, a small value will lead to a large set of rules; : with similar weights.; : ; : A final point is the model used; rules and/or linear terms.; : For a given training sample, the result may improve by adding; : linear terms. If best performance is obtained using only linear; : terms, it is very likely that the Fisher discriminant would be; : a better choice. Ideally the fitting procedure should be able to; : make this choice by giving appropriate weights for either terms.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : I. TUNING OF RULE ENSEMBLE:; : ; : ␛[1mForestType ␛[0m: Recommended is to use the default ""AdaBoost"".; : ␛[1mnTrees ␛[0m: More trees leads to more rules but also slow; : performance. With too few trees the risk is; : that the rule ensemble becomes too simple.; : ␛[1mfEventsMin ␛[0m; : ␛[1mfEventsMax ␛[0m: With a lower min, more large trees w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:53520,depend,depends,53520,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['depend'],['depends']
Integrability,"eate 'Minimization' tab. void ConnectSlots(); Connect GUI signals to fit panel slots. void DisconnectSlots(); Disconnect GUI signals from fit panel slots. void SetCanvas(TCanvas* c); Connect to another canvas. void Hide(); Hide the fit panel and set it to non-active state. void Show(TVirtualPad* pad, TObject* obj); Show the fit panel (possible only via context menu). void CloseWindow(); Close fit panel window. void Terminate(); Called to delete the fit panel. void UpdateGUI(); Set the fit panel GUI according to the selected object. void SetFitObject(TVirtualPad* pad, TObject* obj, Int_t event); Slot called when the user clicks on an object inside a canvas.; Updates pointers to the parent pad and the selected object; for fitting (if suitable). void DoNoSelection(); Slot called when users close a TCanvas or when the user select; no object. void RecursiveRemove(TObject* obj); When obj is deleted, clear fFitObject if fFitObject = obj. void FillFunctionList(Int_t selected = -1); Fills the list of functions depending on the type of fit; selected. void FillMinMethodList(Int_t selected = -1); Fills the list of methods depending on the minimization library; selected. void FillDataSetList(); Create a combo box with all the possible objects to be fitted. TGComboBox* BuildMethodList(TGFrame* parent, Int_t id); Create method list in a combo box. void DoAdvancedOptions(); Slot connected to advanced option button (opens a dialog). void DoEmptyBinsAllWeights1(); Slot connected to 'include emtry bins and forse all weights to 1' setting. void DoUseFuncRange(). void DoAllWeights1(); Slot connected to 'set all weights to 1' setting. void DoClose(); Close the fit panel. void DoUpdate(); Easy here!. void DoFit(); Perform a fit with current parameters' settings. Int_t CheckFunctionString(const char* str); Check entered function string. void DoAddition(Bool_t on); Slot connected to addition of predefined functions. It will; insert the next selected function with a plus sign so that it; doe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:32854,depend,depending,32854,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,10,['depend'],['depending']
Integrability,"eate a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t SetOption (ESockOptions opt, Int_t val) override;  Set socket options. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:1883,message,message,1883,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"eateCategoryDSI(). TMVA::DataSetInfo & TMVA::MethodCategory::CreateCategoryDSI ; (; const TCut & ; theCut, . const TString & ; theVariables, . const TString & ; theTitle . ). protected . create a DataSetInfo object for a sub-classifier ; Definition at line 200 of file MethodCategory.cxx. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodCategory::CreateRanking ; (; ). virtual . no ranking ; Implements TMVA::MethodCompositeBase.; Definition at line 562 of file MethodCategory.cxx. ◆ DeclareOptions(). void TMVA::MethodCategory::DeclareOptions ; (; ). privatevirtual . options for this method ; Implements TMVA::MethodCompositeBase.; Definition at line 131 of file MethodCategory.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 143 of file MethodCategory.h. ◆ GetHelpMessage(). void TMVA::MethodCategory::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 547 of file MethodCategory.cxx. ◆ GetMulticlassValues(). const std::vector< Float_t > & TMVA::MethodCategory::GetMulticlassValues ; (; ). virtual . returns the mva values of the multi-class right sub-classifier ; Reimplemented from TMVA::MethodBase.; Definition at line 710 of file MethodCategory.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCategory::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns the mva value of the right sub-classifier ; Implements TMVA::MethodBase.; Definition at line 600 of file MethodCategory.cxx. ◆ GetMvaValues(). std::vector< Double_t > TMVA::MethodCategory::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . returns the mva values of the right sub-classifier ; Reimplemented from TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:33619,message,message,33619,doc/master/classTMVA_1_1MethodCategory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html,1,['message'],['message']
Integrability,"eateRotation(); Create a new rotation. void DoCreateVolume(); Create a new volume. void DoCreateAssembly(); Create a new volume assembly. void DoCreateCombi(); Create a new translation + rotation. void DoSetTopVolume(); Set top volume for the geometry. void DoEditShape(); Slot for editing selected shape. void DoEditVolume(); Slot for editing selected volume. void DoEditMedium(); Slot for editing selected medium. void DoEditMaterial(); Slot for editing selected material. void DoEditMatrix(); Slot for editing selected matrix. void DoSelectMatrix(); Slot for selecting an existing matrix. void DoSelectShape(); Slot for selecting an existing shape. void DoSelectShape2(); Slot for selecting a shape for making a volume. void DoSelectMaterial(); Slot for selecting an existing material. void DoSelectMaterial2(); Slot for selecting an existing material and making a medium. void DoSelectMedium(); Slot for selecting an existing medium. void DoSelectMedium2(); Slot for selecting an existing medium for making a volume. void DoSelectVolume(); Slot for selecting an existing volume. void DoSelectTopVolume(); Slot for seting top geometry volume. void DoCloseGeometry(); Slot for closing the geometry. void ShowSelectShape(Bool_t show = kTRUE); Show/hide interface for shape selection. void ShowSelectVolume(Bool_t show = kTRUE); Show/hide interface for volume selection. void ShowSelectMaterial(Bool_t show = kTRUE); Show/hide interface for material selection. void ShowSelectMedium(Bool_t show = kTRUE); Show/hide interface for medium selection. void ShowSelectMatrix(Bool_t show = kTRUE); Show/hide interface for matrix selection. void LoadLib(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoManagerEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-11-08 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManagerEditor.html:29169,interface,interface,29169,root/html528/TGeoManagerEditor.html,https://root.cern,https://root.cern/root/html528/TGeoManagerEditor.html,5,['interface'],['interface']
Integrability,"eateRotation(); Create a new rotation. void DoCreateVolume(); Create a new volume. void DoCreateAssembly(); Create a new volume assembly. void DoCreateCombi(); Create a new translation + rotation. void DoSetTopVolume(); Set top volume for the geometry. void DoEditShape(); Slot for editing selected shape. void DoEditVolume(); Slot for editing selected volume. void DoEditMedium(); Slot for editing selected medium. void DoEditMaterial(); Slot for editing selected material. void DoEditMatrix(); Slot for editing selected matrix. void DoSelectMatrix(); Slot for selecting an existing matrix. void DoSelectShape(); Slot for selecting an existing shape. void DoSelectShape2(); Slot for selecting a shape for making a volume. void DoSelectMaterial(); Slot for selecting an existing material. void DoSelectMaterial2(); Slot for selecting an existing material and making a medium. void DoSelectMedium(); Slot for selecting an existing medium. void DoSelectMedium2(); Slot for selecting an existing medium for making a volume. void DoSelectVolume(); Slot for selecting an existing volume. void DoSelectTopVolume(); Slot for seting top geometry volume. void DoCloseGeometry(); Slot for closing the geometry. void ShowSelectShape(Bool_t show = kTRUE); Show/hide interface for shape selection. void ShowSelectVolume(Bool_t show = kTRUE); Show/hide interface for volume selection. void ShowSelectMaterial(Bool_t show = kTRUE); Show/hide interface for material selection. void ShowSelectMedium(Bool_t show = kTRUE); Show/hide interface for medium selection. void ShowSelectMatrix(Bool_t show = kTRUE); Show/hide interface for matrix selection. void LoadLib(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoManagerEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoManagerEditor.html:29269,interface,interface,29269,root/html530/TGeoManagerEditor.html,https://root.cern,https://root.cern/root/html530/TGeoManagerEditor.html,5,['interface'],['interface']
Integrability,"eateRotation(); Create a new rotation. void DoCreateVolume(); Create a new volume. void DoCreateAssembly(); Create a new volume assembly. void DoCreateCombi(); Create a new translation + rotation. void DoSetTopVolume(); Set top volume for the geometry. void DoEditShape(); Slot for editing selected shape. void DoEditVolume(); Slot for editing selected volume. void DoEditMedium(); Slot for editing selected medium. void DoEditMaterial(); Slot for editing selected material. void DoEditMatrix(); Slot for editing selected matrix. void DoSelectMatrix(); Slot for selecting an existing matrix. void DoSelectShape(); Slot for selecting an existing shape. void DoSelectShape2(); Slot for selecting a shape for making a volume. void DoSelectMaterial(); Slot for selecting an existing material. void DoSelectMaterial2(); Slot for selecting an existing material and making a medium. void DoSelectMedium(); Slot for selecting an existing medium. void DoSelectMedium2(); Slot for selecting an existing medium for making a volume. void DoSelectVolume(); Slot for selecting an existing volume. void DoSelectTopVolume(); Slot for seting top geometry volume. void DoCloseGeometry(); Slot for closing the geometry. void ShowSelectShape(Bool_t show = kTRUE); Show/hide interface for shape selection. void ShowSelectVolume(Bool_t show = kTRUE); Show/hide interface for volume selection. void ShowSelectMaterial(Bool_t show = kTRUE); Show/hide interface for material selection. void ShowSelectMedium(Bool_t show = kTRUE); Show/hide interface for medium selection. void ShowSelectMatrix(Bool_t show = kTRUE); Show/hide interface for matrix selection. void LoadLib(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoManagerEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManagerEditor.html:29269,interface,interface,29269,root/html532/TGeoManagerEditor.html,https://root.cern,https://root.cern/root/html532/TGeoManagerEditor.html,10,['interface'],['interface']
Integrability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numeric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCPEigenDecay.html:44026,integrat,integration,44026,root/html602/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html602/RooNonCPEigenDecay.html,4,['integrat'],['integration']
Integrability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPGenDecay.html:43054,integrat,integration,43054,root/html602/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPGenDecay.html,4,['integrat'],['integration']
Integrability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooRealProxy_effRatio; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPEffDecay.html:43189,integrat,integration,43189,root/html602/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPEffDecay.html,4,['integrat'],['integration']
Integrability,"eated in the ROOT linked lists. Objects may be files and windows or any other object directly attached to the ROOT linked list. ; Reimplemented from TDirectory.; Definition at line 2250 of file TROOT.cxx. ◆ Macro(). Longptr_t TROOT::Macro ; (; const char * ; filename, . Int_t * ; error = nullptr, . Bool_t ; padUpdate = kTRUE . ). Execute a macro in the interpreter. ; Equivalent to the command line command "".x filename"". If the filename has ""+"" or ""++"" appended the macro will be compiled by ACLiC. The filename must have the format: [path/]macro.C[+|++[g|O]][(args)]. The possible error codes are defined by TInterpreter::EErrorCode. If padUpdate is true (default) update the current pad. Returns the macro return value. ; Definition at line 2316 of file TROOT.cxx. ◆ MakeDefCanvas(). TCanvas * TROOT::MakeDefCanvas ; (; ); const. Return a default canvas. ; Definition at line 1554 of file TROOT.cxx. ◆ Message(). void TROOT::Message ; (; Int_t ; id, . const TObject * ; obj . ). Process message id called by obj. ; Definition at line 2350 of file TROOT.cxx. ◆ MustClean(). Bool_t TROOT::MustClean ; (; ); const. inline . Definition at line 296 of file TROOT.h. ◆ operator new() [1/2]. void * TROOT::operator new ; (; size_t ; l). inlineprotected . Definition at line 178 of file TROOT.h. ◆ operator new() [2/2]. void * TROOT::operator new ; (; size_t ; l, . void * ; ptr . ). inlineprotected . Definition at line 179 of file TROOT.h. ◆ operator=(). TROOT & TROOT::operator= ; (; const TROOT & ; ). privatedelete . ◆ ProcessLine(). Longptr_t TROOT::ProcessLine ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command via TApplication::ProcessLine(). ; On Win32 the line will be processed asynchronously by sending it to the CINT interpreter thread. For explicit synchronous processing use ProcessLineSync(). On non-Win32 platforms there is no difference between ProcessLine() and ProcessLineSync(). The possible error codes are defined by TInterpreter::EErrorCode. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:69105,message,message,69105,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['message'],['message']
Integrability,"eature can substantially speed up fits and improve convergence with slow; multi-dimensional integrals whose value varies slowly with the parameters so that the; an interpolated histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:48168,message,messages,48168,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['message'],['messages']
Integrability,"eature can substantially speed up fits and improve convergence with slow; multi-dimensional integrals whose value varies slowly with the parameters so that the; an interpolated histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); Construct representation of -log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:45955,message,messages,45955,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['message'],['messages']
Integrability,"eature can substantially speed up fits and improve convergence with slow; multi-dimensional integrals whose value varies slowly with the parameters so that the; an interpolated histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:46577,message,messages,46577,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['message'],['messages']
Integrability,"ebuiltModuleFileName(M->Name);; 1073 if (FullFileName); 1074 *FullFileName = ModuleFileName;; 1075 ; 1076 return !ModuleFileName.empty();; 1077}; 1078 ; 1079static bool HaveFullGlobalModuleIndex = false;; 1080static GlobalModuleIndex *loadGlobalModuleIndex(cling::Interpreter &interp); 1081{; 1082 CompilerInstance &CI = *interp.getCI();; 1083 Preprocessor &PP = CI.getPreprocessor();; 1084 auto ModuleManager = CI.getASTReader();; 1085 assert(ModuleManager);; 1086 // StringRef ModuleIndexPath = HSI.getModuleCachePath();; 1087 // HeaderSearch& HSI = PP.getHeaderSearchInfo();; 1088 // HSI.setModuleCachePath(TROOT::GetSharedLibDir().Data());; 1089 std::string ModuleIndexPath = TROOT::GetSharedLibDir().Data();; 1090 if (ModuleIndexPath.empty()); 1091 return nullptr;; 1092 // Get an existing global index. This loads it if not already loaded.; 1093 ModuleManager->resetForReload();; 1094 ModuleManager->loadGlobalIndex();; 1095 GlobalModuleIndex *GlobalIndex = ModuleManager->getGlobalIndex();; 1096 ; 1097 // For finding modules needing to be imported for fixit messages,; 1098 // we need to make the global index cover all modules, so we do that here.; 1099 if (!GlobalIndex && !HaveFullGlobalModuleIndex) {; 1100 ModuleMap &MMap = PP.getHeaderSearchInfo().getModuleMap();; 1101 bool RecreateIndex = false;; 1102 for (ModuleMap::module_iterator I = MMap.module_begin(), E = MMap.module_end(); I != E; ++I) {; 1103 Module *TheModule = I->second;; 1104 // We want the index only of the prebuilt modules.; 1105 if (!HasASTFileOnDisk(TheModule, PP)); 1106 continue;; 1107 LoadModule(TheModule->Name, interp);; 1108 RecreateIndex = true;; 1109 }; 1110 if (RecreateIndex) {; 1111 cling::Interpreter::PushTransactionRAII deserRAII(&interp);; 1112 clang::GlobalModuleIndex::UserDefinedInterestingIDs IDs;; 1113 ; 1114 struct DefinitionFinder : public RecursiveASTVisitor<DefinitionFinder> {; 1115 DefinitionFinder(clang::GlobalModuleIndex::UserDefinedInterestingIDs& IDs,; 1116 clang::TranslationUnitDecl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:39454,message,messages,39454,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['message'],['messages']
Integrability,"ecalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Fill cache with sampling of p.d.f as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Thu Sep 23 19:58:18 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsSelfCachedPdf.html:42448,depend,depends,42448,root/html528/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsSelfCachedPdf.html,1,['depend'],['depends']
Integrability,"ecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:30400,depend,depends,30400,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,6,['depend'],['depends']
Integrability,"eckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:28923,message,message,28923,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,4,['message'],['message']
Integrability,"ecks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:30868,depend,dependsOn,30868,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,2,['depend'],"['depend', 'dependsOn']"
Integrability,"eclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t GetBoxVolume ();  Returns the volume of range searching box fBox. ;  ; MsgLogger & Log () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; BinarySearchTree * fBst;  Binary tree to find events within a volume. ;  ; MsgLogger * fLogger;  ! message logger ;  . Private Attributes; std::vector< Double_t > fBox;  range-searching box ;  ; Bool_t fBoxHasChanged;  range searching box has changed ;  ; Double_t fBoxVolume;  volume of range searching box ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/PDEFoamDen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:10644,message,message,10644,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['message'],['message']
Integrability,"eclaration ; Definition at line 176 of file TDecompSparse.h. ◆ Decompose(). Bool_t TDecompSparse::Decompose ; (; ). overridevirtual . Decomposition engine . ; If the decomposition succeeds, bit kDecomposed is set . ; Implements TDecompBase.; Definition at line 234 of file TDecompSparse.cxx. ◆ Det(). void TDecompSparse::Det ; (; Double_t & ; d1, . Double_t & ; d2 . ). inlineoverridevirtual . Matrix determinant det = d1*TMath::Power(2.,d2) ; Reimplemented from TDecompBase.; Definition at line 169 of file TDecompSparse.h. ◆ ErrorFlag(). Int_t TDecompSparse::ErrorFlag ; (; ). inlineprotected . Definition at line 124 of file TDecompSparse.h. ◆ Factor(). void TDecompSparse::Factor ; (; const Int_t ; n, . const Int_t ; nz, . TArrayI & ; Airn, . TArrayI & ; Aicn, . TArrayD & ; Aa, . TArrayI & ; Aiw, . TArrayI & ; Aikeep, . const Int_t ; nsteps, . Int_t & ; maxfrt, . TArrayI & ; Aiw1, . Int_t * ; icntl, . Double_t * ; cntl, . Int_t * ; info . ). staticprotected . Factorization routine, the workhorse for the decomposition step. ; Definition at line 581 of file TDecompSparse.cxx. ◆ Factor_sub1(). void TDecompSparse::Factor_sub1 ; (; const Int_t ; n, . const Int_t ; nz, . Int_t & ; nz1, . Double_t * ; a, . const Int_t ; la, . Int_t * ; irn, . Int_t * ; icn, . Int_t * ; iw, . const Int_t ; liw, . Int_t * ; perm, . Int_t * ; iw2, . Int_t * ; icntl, . Int_t * ; info . ). staticprotected . Help routine for factorization. ; Definition at line 1741 of file TDecompSparse.cxx. ◆ Factor_sub2(). void TDecompSparse::Factor_sub2 ; (; const Int_t ; n, . const Int_t ; nz, . Double_t * ; a, . const Int_t ; la, . Int_t * ; iw, . const Int_t ; liw, . Int_t * ; perm, . Int_t * ; nstk, . const Int_t ; nsteps, . Int_t & ; maxfrt, . Int_t * ; nelim, . Int_t * ; iw2, . Int_t * ; icntl, . Double_t * ; cntl, . Int_t * ; info . ). staticprotected . Help routine for factorization. ; Definition at line 1883 of file TDecompSparse.cxx. ◆ Factor_sub3(). void TDecompSparse::Factor_sub3 ; (; Double_t * ; a, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:20941,rout,routine,20941,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['rout'],['routine']
Integrability,"ecls.; 4778 cling::Interpreter::PushTransactionRAII RAII(GetInterpreterImpl());; 4779 ; 4780 if (cl) {; 4781 d = cl->GetDataMember(name);; 4782 // We check if the decl of the data member has an annotation which indicates; 4783 // an ioname.; 4784 // In case this is true, if the name requested is not the ioname, we; 4785 // return 0, as if the member did not exist. In some sense we override; 4786 // the information in the TClassInfo instance, isolating the typesystem in; 4787 // TClass from the one in the AST.; 4788 if (const ValueDecl* decl = (const ValueDecl*) d){; 4789 std::string ioName;; 4790 bool hasIoName = ROOT::TMetaUtils::ExtractAttrPropertyFromName(*decl,""ioname"",ioName);; 4791 if (hasIoName && ioName != name) return nullptr;; 4792 }; 4793 return d;; 4794 }; 4795 // We are looking up for something on the TU scope.; 4796 // FIXME: We do not want to go through TClingClassInfo(fInterpreter) because of redundant deserializations. That; 4797 // interface will actually construct iterators and walk over the decls on the global scope. In would return the first; 4798 // occurrence of a decl with the looked up name. However, that's not what C++ lookup would do: if we want to switch; 4799 // to a more complete C++ lookup interface we need sift through the found names and pick up the declarations which; 4800 // are only fulfilling ROOT's understanding for a Data Member.; 4801 // FIXME: We should probably deprecate the TClingClassInfo(fInterpreter) interface and replace it withe something; 4802 // similar as below.; 4803 using namespace clang;; 4804 Sema& SemaR = fInterpreter->getSema();; 4805 DeclarationName DName = &SemaR.Context.Idents.get(name);; 4806 ; 4807 LookupResult R(SemaR, DName, SourceLocation(), Sema::LookupOrdinaryName,; 4808 Sema::ForExternalRedeclaration);; 4809 ; 4810 cling::utils::Lookup::Named(&SemaR, R);; 4811 ; 4812 LookupResult::Filter F = R.makeFilter();; 4813 // Filter the data-member looking decls.; 4814 while (F.hasNext()) {; 4815 NamedDecl *D ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:186763,interface,interface,186763,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interface']
Integrability,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html:3177,adapter,adapter,3177,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,1,['adapter'],['adapter']
Integrability,"ecomposition engine .; If the decomposition succeeds, bit kDecomposed is set . Bool_t Solve(TVectorD& b); Solve Ax=b . Solution returned in b. void InitParam(); initializing control parameters. void InitPivot(const Int_t n, const Int_t nz, TArrayI& Airn, TArrayI& Aicn, TArrayI& Aiw, TArrayI& Aikeep, TArrayI& Aiw1, Int_t& nsteps, const Int_t iflag, Int_t* icntl, Double_t* cntl, Int_t* info, Double_t& ops); Setup Pivoting variables. void Factor(const Int_t n, const Int_t nz, TArrayI& Airn, TArrayI& Aicn, TArrayD& Aa, TArrayI& Aiw, TArrayI& Aikeep, const Int_t nsteps, Int_t& maxfrt, TArrayI& Aiw1, Int_t* icntl, Double_t* cntl, Int_t* info); Factorization routine, the workhorse for the decompostion step. void Solve(const Int_t n, TArrayD& Aa, TArrayI& Aiw, TArrayD& Aw, const Int_t maxfrt, TVectorD& b, TArrayI& Aiw1, const Int_t nsteps, Int_t* icntl, Int_t* info); Main routine for solving Ax=b. void InitPivot_sub1(const Int_t n, const Int_t nz, Int_t* irn, Int_t* icn, Int_t* iw, Int_t* ipe, Int_t* iq, Int_t* flag, Int_t& iwfr, Int_t* icntl, Int_t* info); Help routine for pivoting setup. void InitPivot_sub2(const Int_t n, Int_t* ipe, Int_t* iw, const Int_t lw, Int_t& iwfr, Int_t* nv, Int_t* nxt, Int_t* lst, Int_t* ipd, Int_t* flag, const Int_t iovflo, Int_t& ncmpa, const Double_t fratio); Help routine for pivoting setup. void InitPivot_sub2a(const Int_t n, Int_t* ipe, Int_t* iw, const Int_t lw, Int_t& iwfr, Int_t& ncmpa); Help routine for pivoting setup. void InitPivot_sub3(const Int_t n, const Int_t nz, Int_t* irn, Int_t* icn, Int_t* perm, Int_t* iw, Int_t* ipe, Int_t* iq, Int_t* flag, Int_t& iwfr, Int_t* icntl, Int_t* info); Help routine for pivoting setup. void InitPivot_sub4(const Int_t n, Int_t* ipe, Int_t* iw, const Int_t lw, Int_t& iwfr, Int_t* ips, Int_t* ipv, Int_t* nv, Int_t* flag, Int_t& ncmpa); Help routine for pivoting setup. void InitPivot_sub5(const Int_t n, Int_t* ipe, Int_t* nv, Int_t* ips, Int_t* ne, Int_t* na, Int_t* nd, Int_t& nsteps, const Int_t nemin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompSparse.html:13183,rout,routine,13183,root/html528/TDecompSparse.html,https://root.cern,https://root.cern/root/html528/TDecompSparse.html,10,['rout'],['routine']
Integrability,"econd canvas shows a projection type given as option. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:16506,rout,routine,16506,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['rout'],['routine']
Integrability,"econstruction"");; TTask *phosrec = new TTask(""phosRec"",""Phos Reconstruction"");; TTask *richrec = new TTask(""richRec"",""Rich Reconstruction"");; TTask *trdrec = new TTask(""trdRec"",""TRD Reconstruction"");; TTask *globrec = new TTask(""globRec"",""Global Track Reconstruction"");; TTask *pstats = new TTask(""printStats"",""Print Run Statistics"");; TTask *run = new TTask(""run"",""Process one run"");; TTask *event = new TTask(""event"",""Process one event"");; aliroot->Add(geominit);; aliroot->Add(matinit);; aliroot->Add(physinit);; aliroot->Add(run);; run->Add(event);; event->Add(tracker);; event->Add(muonrec);; event->Add(phosrec);; event->Add(richrec);; event->Add(trdrec);; event->Add(globrec);; tracker->Add(tpcrec);; tracker->Add(itsrec);; run->Add(pstats);; ; gROOT->GetListOfBrowsables()->Add(aliroot,""aliroot"");; new TBrowser;; }; gROOT#define gROOTDefinition TROOT.h:406; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TTask<div class=""legacybox""><h2>Legacy Code</h2> TTask is a legacy interface: there will be no bug fixes n...Definition TTask.h:35; TTask::TTaskTTask()Default constructor invoked when reading a TTask object from a file.Definition TTask.cxx:98; TTask::Addvirtual void Add(TTask *task)Add TTask to this.Definition TTask.cxx:176; . Definition at line 35 of file TTask.h. Public Member Functions;  TTask ();  Default constructor invoked when reading a TTask object from a file. ;  ;  TTask (const char *name, const char *title);  Standard constructor. ;  ;  TTask (const TTask &task);  Copy constructor. ;  ; virtual ~TTask ();  Delete a task and its subtasks. ;  ; virtual void Abort ();  Abort current tree of tasks. ;  ; virtual void Add (TTask *task);  Add TTask to this. ;  ; void Browse (TBrowser *b) override;  Browse the list of tasks. ;  ; virtual void CleanTasks ();  Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ;  ; void C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:3434,interface,interface,3434,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['interface'],['interface']
Integrability,"ecoverFromInvalidParameters() {; ; // Create a fit model:; // The polynomial is notoriously unstable, because it can quickly go negative.; // Since PDFs need to be positive, one often ends up with an unstable fit model.; RooRealVar x(""x"", ""x"", -15, 15);; RooRealVar a1(""a1"", ""a1"", -0.5, -10., 20.);; RooRealVar a2(""a2"", ""a2"", 0.2, -10., 20.);; RooRealVar a3(""a3"", ""a3"", 0.01);; RooPolynomial pdf(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, RooArgSet(a1, a2, a3));; ; // Create toy data with all-positive coefficients:; std::unique_ptr<RooDataSet> data(pdf.generate(x, 10000));; ; // For plotting.; // We create pointers to the plotted objects. We want these objects to leak out of the function,; // so we can still see them after it returns.; TCanvas* c = new TCanvas();; RooPlot* frame = x.frame();; data->plotOn(frame, RooFit::Name(""data""));; ; // Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; // Therefore, we disable plotting messages in RooFit's message streams:; RooMsgService::instance().getStream(0).removeTopic(RooFit::Plotting);; RooMsgService::instance().getStream(1).removeTopic(RooFit::Plotting);; ; ; // RooFit before ROOT 6.24; // --------------------------------; // Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; // the starting values of the parameters without finding any improvement.; ; // Set up the parameters such that the PDF would come out negative. The PDF is now undefined.; a1.setVal(10.);; a2.setVal(-1.);; ; // Perform a fit:; std::unique_ptr<RooFitResult> fitWithoutRecovery{pdf.fitTo(*data, RooFit::Save(),; RooFit::RecoverFromUndefinedRegions(0.), // This is how RooFit behaved prior to ROOT 6.24; RooFit::PrintEvalErrors(-1), // We are expecting a lot of evaluation errors. -1 switches off printing.; RooFit::PrintLevel(-1))};; ; pdf.plotOn(frame, RooFit::LineColor(kRed), RooFit::Name(""noRecovery""));; ; ; ; // RooFit since ROOT 6.24; // -------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:2998,message,messages,2998,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,2,['message'],"['message', 'messages']"
Integrability,"ect (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:14452,message,message,14452,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,12,['message'],['message']
Integrability,"ect * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t GetAutoExec(); just a wrapper. Size_t GetXsizeUser(); just a wrapper. Size_t GetYsizeUser(); just a wrapper. Size_t GetXsizeReal(); just a wrapper. Size_t GetYsizeReal(); just a wrapper. Int_t GetCanvasID(); just a wrapper. Int_t GetWindowTopX(); just a wrapper. Int_t GetWindowTopY(); just a wrapper. UInt_t GetWindowWidth(); just a wrapper. UInt_t GetWindowHeight(); just a wrapper. UInt_t GetWw(); just a wrapper. UInt_t GetWh(); just a wrapper. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); just a wrapper. void HandleInput(EEventType button, Int_t x, Int_t y); just a wrapper. Bool_t HasMenuBar(); just a wrapper. void Iconify(); just a wrapper. Bool_t IsBatch(); just a wrapper. Bool_t IsRetained(); just a wrapper. void ls(Option_t* option = """"); just a wrapper. void MoveOpaque(Int_t set = 1); just a wrapper. Bool_t OpaqueMoving(); just a wrapper. Bool_t OpaqueResizing(); just a wrapper. void Paint(Option_t* option = """"); just a wrapper. TPad * Pick(Int_t px, Int_t py, TObjLink*& pickobj); just a wrapper. TPad * Pick(Int_t px, Int_t py, TObject* prevSelObj); just a wrapper. void Resize(Option_t* option = """"); just a wrapper. void ResizeOpaque(Int_t set = 1); just a wrapper. void SaveSource(const char* filename = """", Option_t* option = """"); just a wrapper. void SetCursor(ECursor cursor); just a wrapper. void SetDoubleBuffer(Int_t mode = 1); just a wrapper. void SetWindowPosition(Int_t x, Int_t y); just a wrapper. void SetWindowSize(UInt_t ww, UInt_t wh); just a wrapper. void SetCanvasSize(UInt_t ww, UInt_t wh); just a wrapper. void SetHighLightColor(Color_t col); just a wrapper. void SetSelected(TObject* obj); just a wrapper. void SetSelectedPad(TPad* pad); just a wrapper. void Show(); just a wrapper. void Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); just a wr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:6738,wrap,wrapper,6738,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,5,['wrap'],['wrapper']
Integrability,"ect *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classh1analysis.html:5920,message,message,5920,doc/master/classh1analysis.html,https://root.cern,https://root.cern/doc/master/classh1analysis.html,27,['message'],['message']
Integrability,"ect *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:9794,message,message,9794,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,7,['message'],['message']
Integrability,"ect and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; f1TF1 * f1Definition legend1.C:11; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ; Entries passing the selection: 4; DateJune 2020 ; AuthorsDanilo Piparo, Enrico Guiraud (CERN) ; Definition in file df025_RNode.C. tutorialsdataframedf025_RNode.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df025__RNode_8C.html:1795,interface,interface,1795,doc/master/df025__RNode_8C.html,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html,2,['interface'],['interface']
Integrability,"ect bound to this RooAbsReal with given definition of observables; and parameters. RooDerivative* derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooDerivative* derivative(RooRealVar& obs, const RooArgSet& normSet, Int_t order, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooAbsMoment* moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); Return function representing moment of function of given order. If central is; true, the central moment is given <(x-<x>)^2>. RooAbsMoment* moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. If central is; true, the central moment is given <(x-<x>)^2>. If intNormObs is true, the moment of the function integrated over; all normalization observables is returned. Double_t findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval). Return value of x (in range xmin,xmax) at which function equals yval.; (Calculation is performed with Brent root finding algorithm). RooGenFunction* iGenFunction(RooRealVar& x, const RooArgSet& nset = RooArgSet()). RooMultiGenFunction* iGenFunction(const RooArgSet& observables, const RooArgSet& nset = RooArgSet()). RooFitResult* chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Perform a chi^2 fit to given histogram By default the fit is executed through the MINUIT; commands MIGRAD, HESSE in succession. The following named arguments ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:73508,integrat,integrated,73508,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,6,['integrat'],['integrated']
Integrability,"ect boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodLikelihood.html:23568,message,message,23568,root/html604/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html,2,['message'],['message']
Integrability,"ect boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodLikelihood.html:23560,message,message,23560,root/html602/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodLikelihood.html,2,['message'],['message']
Integrability,"ect event; 160 std::thread::id fCallbacksThrdId; ///<! thread id where callbacks should be invoked; 161 bool fCallbacksThrdIdSet{false}; ///<! flag indicating that thread id is assigned; 162 bool fHasWindowThrd{false}; ///<! indicate if special window thread was started; 163 std::thread fWindowThrd; ///<! special thread for that window; 164 std::queue<QueueEntry> fInputQueue; ///<! input queue for all callbacks; 165 std::mutex fInputQueueMutex; ///<! mutex to protect input queue; 166 unsigned fWidth{0}, fHeight{0}; ///<! initial window width and height when displayed, zeros are ignored; 167 int fX{-1}, fY{-1}; ///<! initial window position, -1 ignored; 168 float fOperationTmout{50.}; ///<! timeout in seconds to perform synchronous operation, default 50s; 169 std::string fClientVersion; ///<! configured client version, used as prefix in scripts URL; 170 std::string fProtocolFileName; ///<! local file where communication protocol will be written; 171 int fProtocolCnt{-1}; ///<! counter for protocol recording; 172 unsigned fProtocolConnId{0}; ///<! connection id, which is used for writing protocol; 173 std::string fProtocolPrefix; ///<! prefix for created files names; 174 std::string fProtocol; ///<! protocol; 175 std::string fUserArgs; ///<! arbitrary JSON code, which is accessible via conn.getUserArgs() method; 176 std::shared_ptr<void> fClearOnClose; ///<! entry which is cleared when last connection is closed; 177 ; 178 std::shared_ptr<RWebWindowWSHandler> CreateWSHandler(std::shared_ptr<RWebWindowsManager> mgr, unsigned id, double tmout);; 179 ; 180 bool ProcessWS(THttpCallArg &arg);; 181 ; 182 void CompleteWSSend(unsigned wsid);; 183 ; 184 ConnectionsList_t GetWindowConnections(unsigned connid = 0, bool only_active = false) const;; 185 ; 186 /// Find connection with specified websocket id; 187 std::shared_ptr<WebConn> FindConnection(unsigned wsid);; 188 ; 189 std::shared_ptr<WebConn> RemoveConnection(unsigned wsid);; 190 ; 191 bool _CanTrustIn(std::shared_ptr<WebC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:8646,protocol,protocol,8646,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,4,['protocol'],['protocol']
Integrability,"ect event; 163 std::thread::id fCallbacksThrdId; ///<! thread id where callbacks should be invoked; 164 bool fCallbacksThrdIdSet{false}; ///<! flag indicating that thread id is assigned; 165 bool fHasWindowThrd{false}; ///<! indicate if special window thread was started; 166 std::thread fWindowThrd; ///<! special thread for that window; 167 std::queue<QueueEntry> fInputQueue; ///<! input queue for all callbacks; 168 std::mutex fInputQueueMutex; ///<! mutex to protect input queue; 169 unsigned fWidth{0}, fHeight{0}; ///<! initial window width and height when displayed, zeros are ignored; 170 int fX{-1}, fY{-1}; ///<! initial window position, -1 ignored; 171 float fOperationTmout{50.}; ///<! timeout in seconds to perform synchronous operation, default 50s; 172 std::string fClientVersion; ///<! configured client version, used as prefix in scripts URL; 173 std::string fProtocolFileName; ///<! local file where communication protocol will be written; 174 int fProtocolCnt{-1}; ///<! counter for protocol recording; 175 unsigned fProtocolConnId{0}; ///<! connection id, which is used for writing protocol; 176 std::string fProtocolPrefix; ///<! prefix for created files names; 177 std::string fProtocol; ///<! protocol; 178 std::string fUserArgs; ///<! arbitrary JSON code, which is accessible via conn.getUserArgs() method; 179 std::shared_ptr<void> fClearOnClose; ///<! entry which is cleared when last connection is closed; 180 ; 181 std::shared_ptr<RWebWindowWSHandler> CreateWSHandler(std::shared_ptr<RWebWindowsManager> mgr, unsigned id, double tmout);; 182 ; 183 bool ProcessWS(THttpCallArg &arg);; 184 ; 185 void CompleteWSSend(unsigned wsid);; 186 ; 187 ConnectionsList_t GetWindowConnections(unsigned connid = 0, bool only_active = false) const;; 188 ; 189 /// Find connection with specified websocket id; 190 std::shared_ptr<WebConn> FindConnection(unsigned wsid);; 191 ; 192 std::shared_ptr<WebConn> RemoveConnection(unsigned wsid);; 193 ; 194 bool _CanTrustIn(std::shared_ptr<WebC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:8797,protocol,protocol,8797,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,4,['protocol'],['protocol']
Integrability,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:16613,integrat,integrator,16613,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['integrat'],['integrator']
Integrability,"ect stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Create (const char *url, TSocket *sock=nullptr);  Create a TNetSystem object. ;  ; void InitRemoteEntity (const char *url);  Parse and save coordinates of the remote entity (user, host, port, ...) ;  ;  Protected Member Functions inherited from TSystem; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ; virtual const char * GetLinkedLibraries ();  Get list of shared libraries loaded at the start of the executable. ;  ; virtual void SigAlarmInterruptsSyscalls (Bool_t);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fIsLocal;  ; TString fLocalPrefix;  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TString fBuildCompilerVersionStr;  ; TString fBuildDir;  ; TString fBuildNode;  ; TSeqCollection * fCompiled {nullptr};  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:30576,message,message,30576,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,1,['message'],['message']
Integrability,"ect stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitStreaming (Bool_t isTransient);  Error message in case of checksum/version mismatch. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t & fBaseCheckSum;  ; TClass * fBaseClass;  checksum of the base class (used during memberwise streaming) ;  ; Int_t fBaseVersion;  ; ClassConvStreamerFunc_t fConvStreamerFunc;  Pointer to a wrapper around a custom streamer member function. ;  ; TString fErrorMsg;  Pointer to the current StreamerInfo for the baset class. ;  ; TClass * fNewBaseClass;  pointer to base class ;  ; ClassStreamerFunc_t fStreamerFunc;  pointer to new base class if renamed ;  ; TVirtualStreamerInfo * fStreamerInfo;  Pointer to a wrapper around a custom convertion streamer member function. ;  ;  Protected Attributes inherited from TStreamerElement; Int_t fArrayDim;  ; Int_t fArrayLength;  ; TClass * fClassObject;  ; Double_t fFactor;  Maximum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Int_t fMaxIndex [5];  ; TClass * fNewClass;  pointer to class of object ;  ; Int_t fNewType;  base offset for TObject if the element inherits from it ;  ; Int_t fOffset;  ; Int_t fSize;  ; TMemberStreamer * fStreamer;  new element class when reading ;  ; Int_t fTObjectOffset;  element offset in class ;  ; Int_t fType;  ; TString fTypeName;  new element type when reading ;  ; Double_t fXmax;  Minimum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Double_t fXmin;  pointer to element Streamer ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TStreamerBase (const TStreamerB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:15269,wrap,wrapper,15269,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['wrap'],['wrapper']
Integrability,"ect! Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddModel.html:42660,integrat,integrator,42660,root/html530/RooAddModel.html,https://root.cern,https://root.cern/root/html530/RooAddModel.html,1,['integrat'],['integrator']
Integrability,"ect(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless gCling; is NULL, i.e. during startup, where the information is buffered in; the static GetModuleHeaderInfoBuffer(). void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directly. void Reset(Option_t* option = """"); Delete all global interpreter objects created since the last call to Reset. If option=""a"" is set reset to startup context (i.e. unload also; all loaded files, classes, structs, typedefs, etc.). This function is typically used at the beginning (or end) of an unnamed macro; to clean the environment. IMPORTANT WARNING:; Do not use this call from within any function (neither compiled nor; interpreted. This should only be used from a unnamed macro; (which starts with a { (curly braces) ). For example, using TROOT::Reset; from within an interpreted function will lead to the unloading of the; dictionary and source file, including the one defining the function being; executed. void SaveContext(); Save the current interpreter context. void SetCutClassName(const char* name = ""TCutG""); Set the default graphical cut class name for the graphics editor; By default the graphics editor creates an instance of a class TCutG.; This functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:35379,rout,routine,35379,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,4,['rout'],['routine']
Integrability,"ect* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsString.html:3391,depend,dependsOnValue,3391,root/html532/RooAbsString.html,https://root.cern,https://root.cern/root/html532/RooAbsString.html,1,['depend'],['dependsOnValue']
Integrability,"ect*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:3399,depend,dependsOn,3399,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['depend'],['dependsOn']
Integrability,"ect. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:19822,depend,dependents,19822,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['depend'],['dependents']
Integrability,"ect.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::CapacitySsiz_t Capacity() constDefinition TString.h:364; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:160638,message,message,160638,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['message'],['message']
Integrability,"ect.h:368; gROOTMutexR__EXTERN TVirtualMutex * gROOTMutexDefinition TROOT.h:63; protoconst char * protoDefinition civetweb.c:17535; ROOT::Internal::TParBranchProcessingRAIIDefinition TROOT.h:75; ROOT::Internal::TParBranchProcessingRAII::TParBranchProcessingRAIITParBranchProcessingRAII()Definition TROOT.h:77; ROOT::Internal::TParBranchProcessingRAII::~TParBranchProcessingRAII~TParBranchProcessingRAII()Definition TROOT.h:78; TApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop...Definition TApplication.h:39; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClingThis class defines an interface to the cling C++ interpreter.Definition TCling.h:102; TCollectionCollection abstract base class.Definition TCollection.h:65; TColorThe color creation and management class.Definition TColor.h:21; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TDirectoryFile::GetFileTFile * GetFile() const overrideDefinition TDirectoryFile.h:92; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; TFunctionGlobal functions class (global functions are obtained from CINT).Definition TFunction.h:30; TGlobalMappedFunctionD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:22232,interface,interface,22232,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['interface'],['interface']
Integrability,"ect.h:368; gROOTMutexR__EXTERN TVirtualMutex * gROOTMutexDefinition TROOT.h:63; protoconst char * protoDefinition civetweb.c:17536; ROOT::Internal::TParBranchProcessingRAIIDefinition TROOT.h:75; ROOT::Internal::TParBranchProcessingRAII::TParBranchProcessingRAIITParBranchProcessingRAII()Definition TROOT.h:77; ROOT::Internal::TParBranchProcessingRAII::~TParBranchProcessingRAII~TParBranchProcessingRAII()Definition TROOT.h:78; TApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop...Definition TApplication.h:39; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClingThis class defines an interface to the cling C++ interpreter.Definition TCling.h:102; TCollectionCollection abstract base class.Definition TCollection.h:65; TColorThe color creation and management class.Definition TColor.h:21; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TDirectoryFile::GetFileTFile * GetFile() const overrideDefinition TDirectoryFile.h:92; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; TFunctionGlobal functions class (global functions are obtained from CINT).Definition TFunction.h:30; TGlobalMappedFunctionD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:22233,interface,interface,22233,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['interface'],['interface']
Integrability,ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenCo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8616,integrat,integration,8616,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,4,['integrat'],['integration']
Integrability,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html:10353,integrat,integration,10353,root/html602/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html,4,['integrat'],['integration']
Integrability,"ect::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_t_debugCode; RooWorkspace*_debugWorkspace; ostream*_devnull; Int_t_errorCount; map<string,ostream*>_files; RooFit::MsgLevel_globMinLevel; static RooMsgService*_instance; RooFit::MsgLevel_lastMsgLevel; Bool_t_showPid; Bool_t_silentMode; vector<RooMsgService::StreamConfig>_streams; stack<vector<RooMsgService::StreamConfig> >_streamsSaved. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function called by atexit() handler installed by RooSentinel; to delete all global object upon program termination. RooMsgService(); Constructor. Defines names of message levels; and mapping of topic codes to topic names; Install default message streams. ~RooMsgService(); Destructor. Bool_t anyDebug(); Returns true if any debug level stream is active. RooWorkspace* debugWorkspace(). Int_t addStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); Add a message logging stream for message with given RooFit::MsgLevel or higher (i.e. more severe); This method accepts the following arguments to configure the stream. Output Style options. Prefix(Bool_t flag=kTRUE) -- Prefix all messages in this stream with Topic/Originator information. Filtering options. Topic(const char*) -- Restrict stream to messages on given topic; ObjectName(const char*) -- Restrict stream to messages from object with given name; ClassName(const char*) -- Restrict stream to messages from objects with given class name; Bas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService.html:8862,message,message,8862,root/html602/RooMsgService.html,https://root.cern,https://root.cern/root/html602/RooMsgService.html,8,['message'],['message']
Integrability,"ect::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TObjArray*fParticles->static container of the primary particles; Float_tfPtCut!Pt cut. Do not show primaries below; Bool_tfShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGenerator(const char* name, const char* title = ""Generator class""); Event generator default constructor. ~TGenerator(); Event generator default destructor. void GenerateEvent(); must be implemented in concrete class (see eg TPythia6). TObjArray* ImportParticles(Option_t* option = """"). It reads the /HEPEVT/ common block which has been filled by the; GenerateEvent method. If the event generator does not use the; HEPEVT common block, This routine has to be overloaded by the; subclasses. The default action is to store only the stable particles (ISTHEP =; 1) This can be demanded explicitly by setting the option = ""Final""; If the option = ""All"", all the particles are stored. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"). It reads the /HEPEVT/ common block which has been filled by the; GenerateEvent method. If the event generator does not use the; HEPEVT common block, This routine has to be overloaded by the; subclasses. The function loops on the generated particles and store them in; the TClonesArray pointed by the argument particles. The default; action is to store only the stable particles (ISTHEP = 1) This can; be demanded explicitly by setting the option = ""Final"" If the; option = ""All"", all the particles are stored. void Browse(TBrowser* b); browse generator. Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*Compute distance from point px,py to objects in event; *-* =============",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenerator.html:10705,rout,routine,10705,root/html602/TGenerator.html,https://root.cern,https://root.cern/root/html602/TGenerator.html,4,['rout'],['routine']
Integrability,"ect::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tRooAbsHiddenReal::isHidden() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooUnblindCPAsymVar.html:17106,message,message,17106,root/html532/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html532/RooUnblindCPAsymVar.html,8,['message'],['message']
Integrability,"ect::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::FirstSsiz_t First(char c) constFind first occurrence of a character c.Definition TString.cxx:538; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; bool; double; int; uns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:184675,message,message,184675,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['message'],['message']
Integrability,"ect::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html:5715,message,message,5715,root/html530/TMVA__PDEFoamKernelGauss.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html,5,['message'],['message']
Integrability,"ect::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTProofPlayer::fMaxDrawQueriesMax number of Draw queries kept; Bool_tfMergeFilesis True when merging output files centrally is needed; Bool_tfMergeTH1OneByOneIf kTRUE forces TH1 merge one-by-one [kTRUE]; THashList*TProofPlayer::fOutputlist with output objects; TFile*TProofPlayer::fOutputFileTFile object attached to fOutputFilePath; TStringTProofPlayer::fOutputFilePathPath to file with (partial) results of the query; TList*fOutputListsresults returned by slaves; TVirtualPacketizer*fPacketizertransform TDSet into packets for slaves; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TH1*fProcPackets!Histogram with packets being processed (owned by TPerfStats); TStopwatch*TProofPlayer::fProcTimePacket proc time; TTimer*TProofPlayer::fProcTimeTimerNotifies reaching of allowed max proc time; TMessage*fProcessMessageProcess message to replay when adding new workers dynamically; Long64_tTProofPlayer::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TProof*fProoflink to associated PROOF session; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringfSelectorFileNameCurrent Selector's name, set by Process(); Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerRemote.html:16769,message,message,16769,root/html602/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html602/TProofPlayerRemote.html,2,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableIdentityTransform( DataSetInfo& dsi ); constructor. void Initialize(); nothing to initialize. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); the identity does not need to be prepared, only calculate the normalization. void AttachXMLTo(void* parent); identity transformation to write to XML; Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl;. void ReadFromXML(void* trfnode); reding the identity transformation from XML. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const; identity transform returns sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableIdentityTransform.html:9600,message,message,9600,root/html602/TMVA__VariableIdentityTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableIdentityTransform.html,4,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableRearrangeTransform( DataSetInfo& dsi ); constructor. ~VariableRearrangeTransform(). void Initialize(); initialization of the rearrangement transformation; (nothing to do). Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); prepare transformation --> (nothing to do). const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const. const TMVA::Event* InverseTransform(const TMVA::Event*const , Int_t cls) const. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. void AttachXMLTo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableRearrangeTransform.html:9552,message,message,9552,root/html602/TMVA__VariableRearrangeTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableRearrangeTransform.html,4,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. TMVA::VariableNormalizeTransform::VectorOfFloatVectorsfMax! Max of source range; TMVA::VariableNormalizeTransform::VectorOfFloatVectorsfMin! Min of source range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableNormalizeTransform( DataSetInfo& dsi ); constructor. ~VariableNormalizeTransform(). void Initialize(); initialization of the normalization transformation. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); prepare transformation. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const. const TMVA::Event* InverseTransform(const TMVA::Event*const , Int_t cls) const; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableNormalizeTransform.html:9702,message,message,9702,root/html602/TMVA__VariableNormalizeTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableNormalizeTransform.html,4,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fDecorrMatrices! Decorrelation matrix [class0/class1/.../all classes]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableDecorrTransform( DataSetInfo& dsi ); constructor. ~VariableDecorrTransform(); destructor. void Initialize(); initialisation. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); calculate the decorrelation matrix and the normalization. std::vector<TString>* GetTransformationStrings(Int_t cls) const; creates string with variable transformations applied. const TMVA::Event* Transform(const TMVA::Event*const , Int_t cls) const; apply the decorrelation transfor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html:9690,message,message,9690,root/html602/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html,4,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<TMatrixD*>fEigenVectorseigenvectors; vector<TVectorD*>fMeanValuesmean values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariablePCATransform( DataSetInfo& dsi ); constructor. ~VariablePCATransform(); destructor. void Initialize(); initialization of the transformation.; Has to be called in the preparation and not in the constructor,; since the number of classes it not known at construction, but; only after the creation of the DataSet which might be later. Bool_t PrepareTransformation(const vector<TMVA::Event*>& ); calculate the principal components using the ROOT class TPrincipal; and the nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariablePCATransform.html:9751,message,message,9751,root/html602/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariablePCATransform.html,4,['message'],['message']
Integrability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<vector<TH1F*> >fCumulativeDist! The Cummulative distributions; vector<vector<TMVA::PDF*> >fCumulativePDFThe cumulative PDF; UInt_tfElementsperbinav number of events stored per bin in cum dist; Bool_tfFlatNotGauss; Int_tfPdfMaxSmooth; Int_tfPdfMinSmooth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableGaussTransform(TMVA::DataSetInfo& dsi, TString strcor = """"); constructor; can only be applied one after the other when they are created. But in order to; determine the Gauss transformation. ~VariableGaussTransform( void ); destructor. void Initialize(). Bool_t PrepareTransformation(const vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableGaussTransform.html:9760,message,message,9760,root/html602/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableGaussTransform.html,4,['message'],['message']
Integrability,"ect::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooNumIntFactory*_instance; map<string,pair<RooAbsIntegrator*,string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Jun 2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumIntFactory.html:7397,integrat,integrator,7397,root/html604/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html604/RooNumIntFactory.html,2,['integrat'],['integrator']
Integrability,"ect::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooNumIntFactory*_instance; map<string,pair<RooAbsIntegrator*,string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Jun 30",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntFactory.html:7397,integrat,integrator,7397,root/html602/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html602/RooNumIntFactory.html,2,['integrat'],['integrator']
Integrability,"ect; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE). virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMessageHandler.html:11507,message,messages,11507,root/html604/TMessageHandler.html,https://root.cern,https://root.cern/root/html604/TMessageHandler.html,2,['message'],['messages']
Integrability,"ect; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE). virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessageHandler.html:11507,message,messages,11507,root/html602/TMessageHandler.html,https://root.cern,https://root.cern/root/html602/TMessageHandler.html,2,['message'],['messages']
Integrability,"ect; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMessageHandler.h 22415 2008-03-01 11:00:27Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessageHandler.html:10885,message,messages,10885,root/html528/TMessageHandler.html,https://root.cern,https://root.cern/root/html528/TMessageHandler.html,1,['message'],['messages']
Integrability,"ect; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMessageHandler.h 22415 2008-03-01 11:00:27Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMessageHandler.html:10954,message,messages,10954,root/html530/TMessageHandler.html,https://root.cern,https://root.cern/root/html530/TMessageHandler.html,1,['message'],['messages']
Integrability,"ect; Int_tfMessIdmessage id (often matching specific enum in fClass); Int_t*fMessIdsmessage ids; const TObject*fMessObjobject generating message; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfSizenumber of different messages handled; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); Create a new message handler for class cl and add it to the list; of message handlers. TMessageHandler(const char* cl, Bool_t derived = kTRUE); Create a new message handler for class named cl and add it to the list; of message handlers. void Add(); Add this message handler to the list of messages handlers. Int_t GetMessageCount(Int_t messId) const; Return counter for message with ID=messid. Int_t GetTotalMessageCount() const; Return total number of messages. void HandleMessage(Int_t id, const TObject* obj); Store message origin, keep statistics and call Notify(). Bool_t Notify(); This method must be overridden to handle object notifcation. void Print(Option_t* option = """") const; Print statistics for this message handler. void Remove(); Remove this message handler from the list of messages handlers. void * GetSender(); { return this; }. virtual ~TMessageHandler(). Int_t GetSize() const; { return fSize; }. Bool_t HandleDerived() const; { return fDerived; }. void Added(); { Emit(""Added()""); }. void Removed(); { Emit(""Removed()""); }. void Notified(); { Emit(""Notified()""); }. » Author: Rene Brun 11/11/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMessageHandler.h 22415 2008-03-01 11:00:27Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMessageHandler.html:10954,message,messages,10954,root/html532/TMessageHandler.html,https://root.cern,https://root.cern/root/html532/TMessageHandler.html,2,['message'],['messages']
Integrability,"ect; kIsReferenced enum valueTObject; kMustCleanup enum valueTObject; kName enum valueRooPrintable; kNoContextMenu enum valueTObject; kNotDeleted enum valueTObject; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kSingleLine enum valueRooPrintable; kStandard enum valueRooPrintable; kTitle enum valueRooPrintable; kTreeStructure enum valueRooPrintable; kValue enum valueRooPrintable; kVerbose enum valueRooPrintable; kWriteDelete enum valueTObject; kZombie enum valueTObject; leafNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constRooAbsArg; localNoDirtyInhibit() constRooAbsArginline; logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constRooAbsPdfprivate; logEvalError(const char *message, const char *serverValueString=nullptr) constRooAbsReal; logEvalError(const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr)RooAbsRealstatic; ls(Option_t *option="""") const overrideTNamedvirtual; makeLegacyIterator(const RefCountList_t &list) constRooAbsArgprivate; makeProjectionSet(const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) constRooAbsRealprotected; MakeZombie()TObjectinlineprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c, const RooArgProxy &d) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) constRooAbsRealprot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:25143,message,message,25143,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,1,['message'],['message']
Integrability,"ect; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. » Last changed: Mon D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenProdProj.html:33404,integrat,integrated,33404,root/html526/RooGenProdProj.html,https://root.cern,https://root.cern/root/html526/RooGenProdProj.html,1,['integrat'],['integrated']
Integrability,"ect; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _negateCoefficient = false;  ; RooRealProxy c;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:68357,integrat,integration,68357,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['integrat'],['integration']
Integrability,"ect;  The TRemoteObject class provides protocol for browsing ROOT objects from a remote ROOT session. More...;  ; class  TROOT;  ROOT top level object description. More...;  ; class  TStopwatch;  Stopwatch class. More...;  ; class  TStorage;  Storage manager. More...;  ; class  TString;  Basic string class. More...;  ; class  TStyle;  TStyle objects may be created to define special styles. More...;  ; class  TSysEvtHandler;  Abstract base class for handling system events. More...;  ; class  TSystem;  Abstract base class defining a generic interface to the underlying Operating System. More...;  ; class  TSystemDirectory;  Describes an Operating System directory for the browser. More...;  ; class  TSystemFile;  A TSystemFile describes an operating system file. More...;  ; class  TTask;   Legacy Code TTask is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TTask might still be a valid solution. More...;  ; class  TTime;  Basic time type with millisecond precision. More...;  ; class  TTimer;  Handles synchronous and a-synchronous timer events. More...;  ; class  TTimeStamp;  The TTimeStamp encapsulates seconds and ns since EPOCH. More...;  ; class  TUri;  This class represents a RFC 3986 compatible URI. More...;  ; class  TUrl;  This class represents a WWW compatible URL. More...;  ; class  TUUID;  This class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). More...;  ; class  TVersionCheck;  Used to check if the shared library or plugin is compatible with the current version of ROOT. More...;  ; class  TVirtualFFT;  TVirtualFFT is an interface class for Fast Fourier Transforms. More...;  ; class  TVirtualMapFile;  Abstract base class for TMapFile. More...;  ; class  TVirtualMonitoring;  Provides the interface for externel Monitoring. More...;  ; class  TVirtualMutex;  This class implements ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:7886,depend,depending,7886,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['depend'],['depending']
Integrability,"ectCache& instance(); Return reference to singleton instance. void cleanup(); Static function called by RooSentinel atexit() handler to cleanup at end of program. Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* parIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExpensiveObjectCache.html:7502,depend,dependent,7502,root/html526/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html526/RooExpensiveObjectCache.html,1,['depend'],['dependent']
Integrability,"ectPtr TEveElement with external TObject as a holder of visualization data.; TEveEventManager Base class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:57028,wrap,wrapper,57028,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['wrap'],['wrapper']
Integrability,"ectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; double _epsAbs;  Absolute precision. ;  ; double _epsRel;  Relative precision. ;  ; RooCategory _method1D;  Selects integration method for 1D integrals. ;  ; RooCategory _method1DOpen;  Selects integration method for open ended 1D integrals. ;  ; RooCategory _method2D;  Selects integration method for 2D integrals. ;  ; RooCategory _method2DOpen;  Selects integration method for open ended 2D integrals. ;  ; RooCategory _methodND;  Selects integration method for ND integrals. ;  ; RooCategory _methodNDOpen;  Selects integration method for open ended ND integrals. ;  ; bool _printEvalCounter;  Flag to control printing of function evaluation counter. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:13230,integrat,integration,13230,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"ected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:61663,rout,routine,61663,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['rout'],['routine']
Integrability,"ected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:40788,integrat,integration,40788,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,4,['integrat'],"['integrated', 'integration']"
Integrability,"ected from ;  CTGLClipSetEditorGUI editor for TGLClipSet ;  CTGLClipSetSubEditorGUI sub-editor for TGLClipSet ;  CTGLColorClass encapsulating color information in preferred GL format - an array of four unsigned bytes ;  CTGLColorSetClass encapsulating a set of colors used throughout standard rendering ;  CTGLContextThis class encapsulates window-system specific information about a GL-context and alows their proper management in ROOT ;  CTGLContextIdentityIdentifier of a shared GL-context ;  CTGLContextPrivate;  CTGLCylinderImplements a native ROOT-GL cylinder that can be rendered at different levels of detail ;  CTGLDisableGuard;  CTGLEmbeddedViewerMinimal GL-viewer that can be embedded in a standard ROOT frames ;  CTGLEnableGuard;  CTGLEventHandlerBase-class and default implementation of event-handler for TGLViewer ;  CTGLFaceSetImplements a native ROOT-GL representation of an arbitrary set of polygons ;  CTGLFaderHelper;  CTGLFBOFrame-buffer object ;  CTGLFloatHolder;  CTGLFontA wrapper class for FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:175015,wrap,wrapper,175015,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['wrap'],['wrapper']
Integrability,"ected from ;  CTGLClipSetEditorGUI editor for TGLClipSet ;  CTGLClipSetSubEditorGUI sub-editor for TGLClipSet ;  CTGLColorClass encapsulating color information in preferred GL format - an array of four unsigned bytes ;  CTGLColorSetClass encapsulating a set of colors used throughout standard rendering ;  CTGLContextThis class encapsulates window-system specific information about a GL-context and alows their proper management in ROOT ;  CTGLContextIdentityIdentifier of a shared GL-context ;  CTGLContextPrivate;  CTGLCylinderImplements a native ROOT-GL cylinder that can be rendered at different levels of detail ;  CTGLDisableGuard;  CTGLEmbeddedViewerMinimal GL-viewer that can be embedded in a standard ROOT frames ;  CTGLEnableGuard;  CTGLEventHandlerBase-class and default implementation of event-handler for TGLViewer ;  CTGLFaceSetImplements a native ROOT-GL representation of an arbitrary set of polygons ;  CTGLFaderHelper;  CTGLFBOFrame-buffer object ;  CTGLFloatHolder;  CTGLFontA wrapper class for FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:150608,wrap,wrapper,150608,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,6,['wrap'],['wrapper']
Integrability,"ected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:22203,integrat,integrator,22203,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,2,['integrat'],"['integration', 'integrator']"
Integrability,"ected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:17491,integrat,integrator,17491,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,2,['integrat'],"['integration', 'integrator']"
Integrability,"ected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly support in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In particular it will draw the; result of a function with the same name as the file. The function; will be executed in a context where the name of the branches can; be used as a C++ variable. For example draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. The main features of this facility are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). See TTree::MakeProxy for more details. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Making a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F histogram by specifying option=prof o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:78163,interface,interface,78163,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,3,['interface'],['interface']
Integrability,"ected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly support in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In particular it will draw the; result of a function with the same name as the file. The function; will be executed in a context where the name of the branches can; be used as a C++ variable. For example draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. The main features of this facility are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). See TTree::MakeProxy for more details. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Making a 5D plot using GL. If option GL5D is specified together with 5 variables, a 5D plot is drawn; using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as exa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:75874,interface,interface,75874,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['interface'],['interface']
Integrability,"ected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const RooAbsFunc*_functionPointer to function binding of integrand; Bool_t_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_validIs integrator in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsIntegrator(); Default constructor. RooAbsIntegrator(const RooAbsFunc& function, Bool_t printEvalCounter = kFALSE); Copy constructor. Double_t calculate(const Double_t* yvec = 0); Calculate integral value with given array of parameter values. Bool_t setLimits(Double_t xmin, Double_t xmax); Interface to set limits on integration. Bool_t setUseIntegrandLimits(Bool_t flag); Interface function that allows to defer limit definition to integrand definition. RooAbsIntegrator(). virtual ~RooAbsIntegrator(); Destructor. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const. Bool_t isValid() const; Is integrator in valid state. Double_t integrand(const Double_t[] x) const; Return value of integrand at given observable values. const RooAbsFunc * integrand() const; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsIntegrator.html:6810,integrat,integration,6810,root/html602/RooAbsIntegrator.html,https://root.cern,https://root.cern/root/html602/RooAbsIntegrator.html,8,['integrat'],"['integration', 'integrator']"
Integrability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2010-09-23 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitParametersDialog.html:24805,depend,dependent,24805,root/html528/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFitParametersDialog.html,1,['depend'],['dependent']
Integrability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFitParametersDialog.html:24958,depend,dependent,24958,root/html530/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html530/TFitParametersDialog.html,1,['depend'],['dependent']
Integrability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitParametersDialog.html:24958,depend,dependent,24958,root/html532/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html532/TFitParametersDialog.html,2,['depend'],['dependent']
Integrability,"ectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 1079 of file RooNDKeysPdf.cxx. ◆ gauss(). double RooNDKeysPdf::gauss ; (; std::vector< double > & ; x, . std::vector< std::vector< double > > & ; weights . ); const. protected . loop over all closest point to x, as determined by loopRange() ; Definition at line 917 of file RooNDKeysPdf.cxx. ◆ getAnalyticalIntegral(). Int_t RooNDKeysPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 1105 of file RooNDKeysPdf.cxx. ◆ getWeights(). TMatrixD RooNDKeysPdf::getWeights ; (; const int & ; k); const. Return evaluated weights. ; Definition at line 1291 of file RooNDKeysPdf.cxx. ◆ initialize(). void RooNDKeysPdf::initialize ; (; RooDataSet const & ; data). protected . initialization ; Definition at line 406 of file RooNDKeysPdf.cxx. ◆ IsA(). TClass * RooNDKeysPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 198 of file RooNDKeysPdf.h. ◆ loadDataSet(). void RooNDKeysPdf::loadDataSet ; (; bool ; firstCall, . RooDataSet const & ; data . ). protected . copy the dataset and calculate some useful variables ; Definition at line 476 of file RooNDKeysPdf.cxx. ◆ loadWeightSet(). void RooNDKeysPdf::loadWeightSet ; (; RooDataSet const & ; data). protected . Definition at line 696 of file RooNDKeysPdf.cxx. ◆ loopRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:87351,integrat,integration,87351,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['integrat'],['integration']
Integrability,ection * GetListOfTypes(Bool_t load=kFALSE)Return a dynamic list giving access to all TDataTypes (typedefs) currently defined.Definition TROOT.cxx:1865; TROOT::fgDirLevelstatic Int_t fgDirLevelIndentation level for ls()Definition TROOT.h:102; TROOT::IsRootFileBool_t IsRootFile(const char *filename) constReturn true if the file is local and is (likely) to be a ROOT file.Definition TROOT.cxx:2230; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2891; TROOT::GetDocDirstatic const TString & GetDocDir()Get the documentation directory in the installation. Static utility function.Definition TROOT.cxx:3078; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3052; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2962; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the l,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:160419,inject,inject,160419,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,2,"['inject', 'interface']","['inject', 'interface']"
Integrability,ection * GetListOfTypes(Bool_t load=kFALSE)Return a dynamic list giving access to all TDataTypes (typedefs) currently defined.Definition TROOT.cxx:1865; TROOT::fgDirLevelstatic Int_t fgDirLevelIndentation level for ls()Definition TROOT.h:102; TROOT::IsRootFileBool_t IsRootFile(const char *filename) constReturn true if the file is local and is (likely) to be a ROOT file.Definition TROOT.cxx:2230; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TROOT::GetDocDirstatic const TString & GetDocDir()Get the documentation directory in the installation. Static utility function.Definition TROOT.cxx:3082; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2966; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the l,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:160595,inject,inject,160595,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,"['inject', 'interface']","['inject', 'interface']"
Integrability,"ection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; void SetPad(TVirtualPad* p) { fPad = p; /* also need to drop contents */ }. { return fPad; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScenePad.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScenePad.html:16915,interface,interface,16915,root/html530/TGLScenePad.html,https://root.cern,https://root.cern/root/html530/TGLScenePad.html,1,['interface'],['interface']
Integrability,"ection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; void SetPad(TVirtualPad* p) { fPad = p; /* also need to drop contents */ }. { return fPad; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScenePad.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLScenePad.html:16915,interface,interface,16915,root/html532/TGLScenePad.html,https://root.cern,https://root.cern/root/html532/TGLScenePad.html,2,['interface'],['interface']
Integrability,"ection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNDArray Base for n-dimensional array; TNDArrayRef<Long64_t> subdimension of a TNDArray; TNDArrayRef<ULong64_t> subdimension of a TNDArray; TNDArrayRef<char> subdimension of a TNDArray; TNDArrayRef<double> subdimension of a TNDArray; TNDArrayRef<float> subdimension of a TNDArray; TNDArrayRef<int> subdimension of a TNDArray; TNDArrayRef<long> subdimension of a TNDArray; TNDArrayRef<short> subdimension of a TNDArray; TNDArrayRef<unsigned int> subdimension of a TNDArray; TNDArrayRef<unsigned long> subdimension of a TNDArray; TNDArrayRef<unsigned short> subdimension of a TNDArray; TNDArrayT<Long64_t> N-dimensional array; TNDArrayT<ULong64_t> N-dimensional array; TNDArrayT<char> N-dimensional array; TNDArrayT<double> N-dimensional array; TNDArrayT<float> N-dimensional array; TNDArrayT<int> N-dimensional array; TNDArrayT<long> N-dimensional array; TNDArrayT<short> N-dimensional array; TNDArrayT<unsigned int> N-dimensional array; TNDArrayT<unsigned long> N-dimensional array; TNDArrayT<unsigned short> N-dimensional array; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNetXNGFile ROOT class definition; TNetXNGFileStager ! Interface to a 'XRD' staging; TNetXNGSystem ROOT class definition; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:116664,Interface,Interface,116664,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Interface'],['Interface']
Integrability,"ection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:7959,depend,dependentOverlaps,7959,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,6,['depend'],"['dependentOverlaps', 'dependsOn', 'dependsOnValue']"
Integrability,"ection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TStringfSvnBranchSubversion branch; TStringfSvnDateDate and time when make was run; Int_tfSvnRevisionSubversion revision number of built; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. TObject * FindObject(const TObject* obj) const; Find an object in one Root folder. TObject * FindObject(const char* name) const; Returns address of a ROOT object if it exi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:19356,synchroniz,synchronize,19356,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['synchroniz'],['synchronize']
Integrability,"ection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TStringfSvnBranchSubversion branch; TStringfSvnDateDate and time when make was run; Int_tfSvnRevisionSubversion revision number of built; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the files and sockets are closed before any library is unloaded!. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:19608,synchroniz,synchronize,19608,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,1,['synchroniz'],['synchronize']
Integrability,"ection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TStringfSvnBranchSubversion branch; TStringfSvnDateDate and time when make was run; Int_tfSvnRevisionSubversion revision number of built; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TROOT.html:19659,synchroniz,synchronize,19659,root/html532/TROOT.html,https://root.cern,https://root.cern/root/html532/TROOT.html,2,['synchroniz'],['synchronize']
Integrability,"ective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a M warning message, may make both the function minimum and parameter errors unreliable. See section [answer:right-errors], Getting the right parameter errors with limits. The best way to be absolutely sure of the errors, is to use “independent” calculations and compare them, or compare the calculated errors with a picture of the function if possible. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:75168,message,message,75168,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['message'],['message']
Integrability,"ector &, const void *obj, const TClass *cl, Bool_t isTransient) finalVisit all members over members, recursing over base classes.Definition TCling.cxx:2684; TCling::SetClassSharedLibsInt_t SetClassSharedLibs(const char *cls, const char *libs) finalRegister the AutoLoading information for a class.Definition TCling.cxx:6078; TCling::MethodInfo_FactoryCopyMethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9043; TCling::fParsedPayloadsAddressesstd::set< const char * > fParsedPayloadsAddressesDefinition TCling.h:123; TCling::CallFunc_IFacePtrCallFuncIFacePtr_t CallFunc_IFacePtr(CallFunc_t *func) const finalDefinition TCling.cxx:7958; TCling::MethodArgInfo_FactoryMethodArgInfo_t * MethodArgInfo_Factory() const finalDefinition TCling.cxx:9248; TCling::UpdateClassInfostatic void UpdateClassInfo(char *name, Long_t tagnum)No op: see TClingCallbacks.Definition TCling.cxx:6739; TCling::GetFunctionDeclId_t GetFunction(ClassInfo_t *cl, const char *funcname) finalReturn pointer to cling interface function for a method of a class with a certain name.Definition TCling.cxx:5029; TCling::ClassInfo_Deletevoid ClassInfo_Delete(ClassInfo_t *info) const finalDefinition TCling.cxx:8184; TCling::fInterpreterstd::unique_ptr< cling::Interpreter > fInterpreterDefinition TCling.h:130; TCling::ClassInfo_GetUnderlyingTypeEDataType ClassInfo_GetUnderlyingType(ClassInfo_t *info) const finalDefinition TCling.cxx:8311; TCling::FuncTempInfo_Deletevoid FuncTempInfo_Delete(FuncTempInfo_t *) const finalDelete the FuncTempInfo_t.Definition TCling.cxx:8806; TCling::GetFunctionTemplateDeclId_t GetFunctionTemplate(ClassInfo_t *cl, const char *funcname) finalReturn pointer to cling interface function for a method of a class with a certain name.Definition TCling.cxx:5177; TCling::DeleteVariableInt_t DeleteVariable(const char *name) finalUndeclare obj called name.Definition TCling.cxx:3798; TCling::GetClassSharedLibsconst char * GetClassSharedLibs(const char *cls, bool sk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:455932,interface,interface,455932,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interface']
Integrability,"ector containing the lower (upper) triangular part. ;  ;  SMatrix (const T &rhs);  Construct from a scalar value (only for size 1 matrices) ;  ; template<class M > ; SMatrix< T, D1, D2, R > & operator= (const M &rhs);  Assign from another compatible matrix. ;  ; SMatrix< T, D1, D2, R > & operator= (const SMatrix< T, D1, D2, R > &rhs);  ; template<class A , class R2 > ; SMatrix< T, D1, D2, R > & operator= (const Expr< A, T, D1, D2, R2 > &rhs);  Assign from a matrix expression. ;  ; SMatrix< T, D1, D2, R > & operator= (SMatrixIdentity);  Assign from an identity matrix. ;  ; SMatrix< T, D1, D2, R > & operator= (const T &rhs);  Assign from a scalar value (only for size 1 matrices) ;  ; — Access functions —; T apply (unsigned int i) const;  access the parse tree with the index starting from zero and following the C convention for the order in accessing the matrix elements. ;  ; const T * Array () const;  return read-only pointer to internal array ;  ; T * Array ();  return pointer to internal array ;  ; — STL-like interface —; The iterators access the matrix element in the order how they are stored in memory.; The C (row-major) convention is used, and in the case of symmetric matrices the iterator spans only the lower diagonal block. For example for a symmetric 3x3 matrices the order of the 6 elements \({a_0,...a_5}\) is: ; \[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \]. iterator begin ();  STL iterator interface. ;  ; iterator end ();  STL iterator interface. ;  ; const_iterator begin () const;  STL const_iterator interface. ;  ; const_iterator end () const;  STL const_iterator interface. ;  ; template<class InputIterator > ; void SetElements (InputIterator begin, InputIterator end, bool triang=false, bool lower=true);  Set matrix elements with STL iterator interface. ;  ; template<class InputIterator > ; void SetElements (InputIterator begin, unsigned int size, bool triang=false, bool lower=true);  Cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:3598,interface,interface,3598,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['interface'],['interface']
Integrability,"ector to v1+v2. Int_t TVectorT<Element> Memcpy_m(double* newp, const double* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TVectorT<Element> Allocate(Int_t nrows, Int_t row_lwb = 0, Int_t init = 0); Allocate new vector. Arguments are number of rows and row; lowerbound (0 default). TVectorT<Element> &TVectorT<Element> ResizeTo(Int_t lwb, Int_t upb); Resize the vector to [lwb:upb] .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TVectorT<Element> &TVectorT<Element> Use(Int_t lwb, Int_t upb, double* data); Use the array data to fill the vector lwb..upb]. TVectorT<Element> &TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<double>& target, Option_t* option = ""S"") const; Get subvector [row_lwb..row_upb]; The indexing range of the; returned vector depends on the argument option:. option == ""S"" : return [0..row_upb-row_lwb+1] (default); else : return [row_lwb..row_upb]. TVectorT<Element> &TVectorT<Element> SetSub(Int_t row_lwb, const TVectorT<double>& source); Insert vector source starting at [row_lwb], thereby overwriting the part; [row_lwb..row_lwb+nrows_source];. TVectorT<Element> &TVectorT<Element> Zero(); Set vector elements to zero. TVectorT<Element> &TVectorT<Element> Abs(); Take an absolute value of a vector, i.e. apply Abs() to each element. TVectorT<Element> &TVectorT<Element> Sqr(); Square each element of the vector. TVectorT<Element> &TVectorT<Element> Sqrt(); Take square root of all elements. TVectorT<Element> &TVectorT<Element> Invert(); v[i] = 1/v[i]. TVectorT<Element> &TVectorT<Element> SelectNonZeros(const TVectorT<double>& select); Keep only element as selected through array select non-zero. Element TVectorT<Element> Norm1() const; Compute the 1-norm of the vector SUM{ |v[i]| }. Element TVectorT<Elemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_double_.html:11398,depend,depends,11398,root/html534/TVectorT_double_.html,https://root.cern,https://root.cern/root/html534/TVectorT_double_.html,6,['depend'],['depends']
Integrability,"ector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; is created (the separation type depends on fDTSeparation). - cls - marked event class (optional, default value = 0). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:23674,depend,depending,23674,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,9,['depend'],['depending']
Integrability,"ector::TParentBuf*fParentcurrent inspection ""path"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemberInspector(); Construct a member inspector. ~TMemberInspector(); Destruct a member inspector. const char* GetParent() const; Get the parent string. Ssiz_t GetParentLen() const; Get the length of the parent string. void AddToParent(const char* name); Append ""name"" to the parent string. void RemoveFromParent(Ssiz_t startingAt); Remove trailing characters starting at ""startingAt"". void Inspect(TClass* cl, const char* parent, const char* name, const void* addr); Obsolete signature. void GenericShowMembers(const char* topClassName, const void* obj, Bool_t transientMember); Call ShowMember() on obj.; This could be faster if we implemented this either as a templated; function or by rootcint-generated code using the typeid (i.e. the; difference is a lookup in a TList instead of in a map).; To avoid a spurrious error message in case the data member is; transient and does not have a dictionary we check first. void InspectMember(const TObject& obj, const char* name, Bool_t isTransient); Routine driving the visiting of the class information/data members. void InspectMember(const char* topclassname, const void* pobj, const char* name, Bool_t transient); Routine driving the visiting of the class information/data members. void InspectMember(TClass* cl, const void* pobj, const char* name, Bool_t isTransient); Routine driving the visiting of the class information/data members. kUnset, // No Inspect(). TMemberInspector(const TMemberInspector& ). TMemberInspector & operator=(const TMemberInspector& ). EObjectPointerState GetObjectValidity() const; { return fObjectPointerState; }. void SetObjectValidity(TMemberInspector::EObjectPointerState val); { fObjectPointerState = val; }. obj. IsA(). » Author: Fons Rademakers 15/07/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemberInspector.html:3035,message,message,3035,root/html602/TMemberInspector.html,https://root.cern,https://root.cern/root/html602/TMemberInspector.html,4,['message'],['message']
Integrability,"ector<double> >(const RooCacheManager<vector<double> >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double>*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. T* getObjByIndex(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_vector_double___.html:3543,integrat,integration,3543,root/html602/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_vector_double___.html,4,['integrat'],['integration']
Integrability,"ector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ModularFunctionMinimizer&operator=(const ROOT::Minuit2::ModularFunctionMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html:4305,interface,interface,4305,root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ModularFunctionMinimizer.html,4,['interface'],['interface']
Integrability,"ector<double>), in which case the TGraph; 2205 /// is filled with each one of the elements of the container.; 2206 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2207 /// If the Graph has to be drawn, it is suggested to the user to sort it on the x before printing.; 2208 /// A name and a title to the TGraph is given based on the input column names.; 2209 ///; 2210 /// This action is *lazy*: upon invocation of this method the calculation is; 2211 /// booked but not executed. Also see RResultPtr.; 2212 ///; 2213 /// ### Example usage:; 2214 /// ~~~{.cpp}; 2215 /// // Deduce column types (this invocation needs jitting internally); 2216 /// auto myGraph1 = myDf.Graph(""xValues"", ""yValues"");; 2217 /// // Explicit column types; 2218 /// auto myGraph2 = myDf.Graph<int, float>(""xValues"", ""yValues"");; 2219 /// ~~~; 2220 ///; 2221 /// \note Differently from other ROOT interfaces, the returned TGraph is not associated to gDirectory; 2222 /// and the caller is responsible for its lifetime (in particular, a typical source of confusion is that; 2223 /// if result histograms go out of scope before the end of the program, ROOT might display a blank canvas).; 2224 template <typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType>; 2225 RResultPtr<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:124252,interface,interfaces,124252,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['interface'],['interfaces']
Integrability,"ector<int>({x++, x++, x++, x++});; }) // A column with four-elements collection; .Define(""w"", [&w]() { return w *= 1.8; }) // A column with doubles; .Define(""z"", [&z]() {; z *= 1.1;; return std::vector<std::vector<double>>({{z, ++z}, {z, ++z}, {z, ++z}});; }); // A column of matrices; ; // Preparing the RResultPtr<RDisplay> object with all columns and default number of entries; auto d1 = d.Display("""");; // Preparing the RResultPtr<RDisplay> object with two columns and default number of entries; auto d2 = d.Display({""x"", ""y""});; ; // Printing the short representations, the event loop will run; std::cout << ""The following is the representation of all columns with the default nr of entries"" << std::endl;; d1->Print();; std::cout << ""\n\nThe following is the representation of two columns with the default nr of entries"" << std::endl;; d2->Print();; }; d#define d(i)Definition RSha256.hxx:102; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; df024_DisplayDefinition df024_Display.py:1; ; The following is the representation of all columns with the default nr of entries; +-----+-----------+----+-------------+--------------------------+; | Row | w | x | y | z | ; +-----+-----------+----+-------------+--------------------------+; | 0 | 1.800000 | 1 | 100 | { 1.1000000, 2.1000000 } | ; | | | 2 | | { 2.1000000, 3.1000000 } | ; | | | 3 | | { 3.1000000, 4.1000000 } | ; | | | 4 | | | ; +-----+-----------+----+-------------+--------------------------+; | 1 | 3.240000 | 5 | 10000 | { 4.5100000, 5.5100000 } | ; | | | 6 | | { 5.5100000, 6.5100000 } | ; | | | 7 | | { 6.5100000, 7.5100000 } | ; | | | 8 | | | ; +-----+-----------+----+-------------+--------------------------+; | 2 | 5.832000 | 9 | 1000000 | { 8.2610000, 9.2610000 } | ; | | | 10 | | { 9.2610000, 10.261000 } ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df024__Display_8C.html:1566,interface,interface,1566,doc/master/df024__Display_8C.html,https://root.cern,https://root.cern/doc/master/df024__Display_8C.html,1,['interface'],['interface']
Integrability,"ector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. RooCategory& asCAT(const char* ); CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. RooArgSet asSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. RooArgList asLIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgList of objects found in workspace. RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFactoryWSTool.html:19855,interface,interface,19855,root/html528/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html528/RooFactoryWSTool.html,6,['interface'],['interface']
Integrability,"ectorNext(void *, const void *)Should not be used.Definition TGenCollectionProxy.cxx:1530; R__CreateValuestatic TGenCollectionProxy::Value * R__CreateValue(const std::string &name, Bool_t silent, size_t hint_pair_offset=0, size_t hint_pair_size=0)Utility routine to issue a Fatal error is the Value object is not valid.Definition TGenCollectionProxy.cxx:830; TGenCollectionProxy__StagingDeleteSingleIteratorsvoid TGenCollectionProxy__StagingDeleteSingleIterators(void *)Nothing to do.Definition TGenCollectionProxy.cxx:1589; TGenCollectionProxy__SlowCreateIteratorsvoid TGenCollectionProxy__SlowCreateIterators(void *, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy)Definition TGenCollectionProxy.cxx:1462; TGenCollectionProxy__SlowNextvoid * TGenCollectionProxy__SlowNext(void *iter, const void *end)Definition TGenCollectionProxy.cxx:1470; TGenCollectionProxy__VectorCreateIteratorsvoid TGenCollectionProxy__VectorCreateIterators(void *obj, void **begin_arena, void **end_arena, TVirtualCollectionProxy *)We can safely assume that the std::vector layout does not really depend on the content!Definition TGenCollectionProxy.cxx:1509; TGenCollectionProxy__StagingCopyIteratorvoid * TGenCollectionProxy__StagingCopyIterator(void *dest, const void *source)Definition TGenCollectionProxy.cxx:1580; TGenCollectionProxy__StagingNextvoid * TGenCollectionProxy__StagingNext(void *, const void *)Should not be used.Definition TGenCollectionProxy.cxx:1572; TGenCollectionProxy__VectorDeleteSingleIteratorsvoid TGenCollectionProxy__VectorDeleteSingleIterators(void *)Nothing to do.Definition TGenCollectionProxy.cxx:1547; TGenCollectionProxy__SlowCopyIteratorvoid * TGenCollectionProxy__SlowCopyIterator(void *dest, const void *source)Definition TGenCollectionProxy.cxx:1484; TGenCollectionProxy__StagingCreateIteratorsvoid TGenCollectionProxy__StagingCreateIterators(void *obj, void **begin_arena, void **end_arena, TVirtualCollectionProxy *)Definition TGenCollectionProxy.cxx:1562; TGenC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:67266,depend,depend,67266,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['depend'],['depend']
Integrability,"ectory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:45429,message,messages,45429,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,42,['message'],['messages']
Integrability,ectory.cxx;  TAlienFile.cxx;  TAlienJDL.cxx;  TAlienJob.cxx;  TAlienJobStatus.cxx;  TAlienJobStatusList.cxx;  TAlienMasterJob.cxx;  TAlienMasterJobStatus.cxx;  TAlienPackage.cxx;  TAlienResult.cxx;  TAlienSystem.cxx;  ► auth;  ► inc;  AFSAuth.h;  AFSAuthTypes.h;  AuthConst.h;  LinkDefAFS.h;  LinkDefRoot.h;  TAFS.h;  TAuthenticate.h;  THostAuth.h;  TRootAuth.h;  TRootSecContext.h;  ► res;  rsaaux.h;  rsadef.h;  rsafun.h;  rsalib.h;  ► src;  AFSAuth.cxx;  DaemonUtils.cxx;  DaemonUtils.h;  rsaaux.cxx;  rsafun.cxx;  rsalib.cxx;  TAFS.cxx;  TAuthenticate.cxx;  THostAuth.cxx;  TRootAuth.cxx;  TRootSecContext.cxx;  ► bonjour;  ► inc;  TBonjourBrowser.h;  TBonjourRecord.h;  TBonjourRegistrar.h;  TBonjourResolver.h;  ► src;  TBonjourBrowser.cxx;  TBonjourRecord.cxx;  TBonjourRegistrar.cxx;  TBonjourResolver.cxx;  ► davix;  ► inc;  TDavixFile.h;  TDavixSystem.h;  ► src;  TDavixFile.cxx;  TDavixFileInternal.h;  TDavixSystem.cxx;  ► glite;  ► inc;  TGLite.hInterface of the class which defines interface to gLite GRID services ;  TGLiteJob.hGLite implementation of TGridJob ;  TGLiteJobStatus.hGLite implementation of TGridJobStatus ;  TGLiteResult.h;  ► src;  TGLite.cxxImplementation of the class which defines interface to gLite GRID services ;  TGLiteJob.cxxGLite implementation of TGridJob ;  TGLiteJobStatus.cxx;  TGLiteResult.cxx;  ► http;  ► civetweb;  civetweb.c;  civetweb.h;  file_ops.inl;  handle_form.inl;  md5.inl;  sha1.inl;  ► inc;  THttpCallArg.h;  THttpEngine.h;  THttpServer.h;  THttpWSHandler.h;  TRootSniffer.h;  TRootSnifferStore.h;  ► src;  TCivetweb.cxx;  TCivetweb.h;  TFastCgi.cxx;  TFastCgi.h;  THttpCallArg.cxx;  THttpEngine.cxx;  THttpLongPollEngine.cxx;  THttpLongPollEngine.h;  THttpServer.cxx;  THttpWSEngine.cxx;  THttpWSEngine.h;  THttpWSHandler.cxx;  TRootSniffer.cxx;  TRootSnifferStore.cxx;  ► krb5auth;  ► inc;  Krb5Auth.h;  TKSocket.h;  ► src;  Krb5Auth.cxx;  TKSocket.cxx;  ► ldap;  ► inc;  CintLDAP.h;  TLDAPAttribute.h;  TLDAPEntry.h;  TLDAPResult.h;  TLDA,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:59423,interface,interface,59423,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['interface'],['interface']
Integrability,ectory.cxx;  TAlienFile.cxx;  TAlienJDL.cxx;  TAlienJob.cxx;  TAlienJobStatus.cxx;  TAlienJobStatusList.cxx;  TAlienMasterJob.cxx;  TAlienMasterJobStatus.cxx;  TAlienPackage.cxx;  TAlienResult.cxx;  TAlienSystem.cxx;  ► auth;  ► inc;  AFSAuth.h;  AFSAuthTypes.h;  AuthConst.h;  LinkDefAFS.h;  LinkDefRoot.h;  TAFS.h;  TAuthenticate.h;  THostAuth.h;  TRootAuth.h;  TRootSecContext.h;  ► res;  rsaaux.h;  rsadef.h;  rsafun.h;  rsalib.h;  ► src;  AFSAuth.cxx;  DaemonUtils.cxx;  DaemonUtils.h;  rsaaux.cxx;  rsafun.cxx;  rsalib.cxx;  TAFS.cxx;  TAuthenticate.cxx;  THostAuth.cxx;  TRootAuth.cxx;  TRootSecContext.cxx;  ► bonjour;  ► inc;  TBonjourBrowser.h;  TBonjourRecord.h;  TBonjourRegistrar.h;  TBonjourResolver.h;  ► src;  TBonjourBrowser.cxx;  TBonjourRecord.cxx;  TBonjourRegistrar.cxx;  TBonjourResolver.cxx;  ► davix;  ► inc;  TDavixFile.h;  TDavixSystem.h;  ► src;  TDavixFile.cxx;  TDavixFileInternal.h;  TDavixSystem.cxx;  ► glite;  ► inc;  TGLite.hInterface of the class which defines interface to gLite GRID services ;  TGLiteJob.hGLite implementation of TGridJob ;  TGLiteJobStatus.hGLite implementation of TGridJobStatus ;  TGLiteResult.h;  ► src;  TGLite.cxxImplementation of the class which defines interface to gLite GRID services ;  TGLiteJob.cxxGLite implementation of TGridJob ;  TGLiteJobStatus.cxx;  TGLiteResult.cxx;  ► http;  ► civetweb;  civetweb.c;  civetweb.h;  handle_form.inl;  md5.inl;  ► inc;  TCivetweb.h;  TFastCgi.h;  THttpCallArg.h;  THttpEngine.h;  THttpServer.h;  THttpWSEngine.h;  THttpWSHandler.h;  TRootSniffer.h;  TRootSnifferStore.h;  ► src;  TCivetweb.cxx;  TFastCgi.cxx;  THttpCallArg.cxx;  THttpEngine.cxx;  THttpServer.cxx;  THttpWSEngine.cxx;  THttpWSHandler.cxx;  TRootSniffer.cxx;  TRootSnifferStore.cxx;  ► krb5auth;  ► inc;  Krb5Auth.h;  TKSocket.h;  ► src;  Krb5Auth.cxx;  TKSocket.cxx;  ► ldap;  ► inc;  CintLDAP.h;  TLDAPAttribute.h;  TLDAPEntry.h;  TLDAPResult.h;  TLDAPServer.h;  ► src;  TLDAPAttribute.cxx;  TLDAPEntry.cxx;  TLDAPResult.cxx;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:58987,interface,interface,58987,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['interface'],['interface']
Integrability,ectory.cxx;  TAlienFile.cxx;  TAlienJDL.cxx;  TAlienJob.cxx;  TAlienJobStatus.cxx;  TAlienJobStatusList.cxx;  TAlienMasterJob.cxx;  TAlienMasterJobStatus.cxx;  TAlienPackage.cxx;  TAlienResult.cxx;  TAlienSystem.cxx;  ► auth;  ► inc;  AFSAuth.h;  AFSAuthTypes.h;  AuthConst.h;  LinkDefAFS.h;  LinkDefRoot.h;  TAFS.h;  TAuthenticate.h;  THostAuth.h;  TRootAuth.h;  TRootSecContext.h;  ► res;  rsaaux.h;  rsadef.h;  rsafun.h;  rsalib.h;  ► src;  AFSAuth.cxx;  DaemonUtils.cxx;  DaemonUtils.h;  rsaaux.cxx;  rsafun.cxx;  rsalib.cxx;  TAFS.cxx;  TAuthenticate.cxx;  THostAuth.cxx;  TRootAuth.cxx;  TRootSecContext.cxx;  ► bonjour;  ► inc;  TBonjourBrowser.h;  TBonjourRecord.h;  TBonjourRegistrar.h;  TBonjourResolver.h;  ► src;  TBonjourBrowser.cxx;  TBonjourRecord.cxx;  TBonjourRegistrar.cxx;  TBonjourResolver.cxx;  ► davix;  ► inc;  TDavixFile.h;  TDavixSystem.h;  ► src;  TDavixFile.cxx;  TDavixFileInternal.h;  TDavixSystem.cxx;  ► glite;  ► inc;  TGLite.hInterface of the class which defines interface to gLite GRID services ;  TGLiteJob.hGLite implementation of TGridJob ;  TGLiteJobStatus.hGLite implementation of TGridJobStatus ;  TGLiteResult.h;  ► src;  TGLite.cxxImplementation of the class which defines interface to gLite GRID services ;  TGLiteJob.cxxGLite implementation of TGridJob ;  TGLiteJobStatus.cxx;  TGLiteResult.cxx;  ► http;  ► civetweb;  civetweb.c;  civetweb.h;  handle_form.inl;  md5.inl;  ► inc;  TCivetweb.h;  TFastCgi.h;  THttpCallArg.h;  THttpEngine.h;  THttpServer.h;  TRootSniffer.h;  TRootSnifferStore.h;  ► src;  TCivetweb.cxx;  TFastCgi.cxx;  THttpCallArg.cxx;  THttpEngine.cxx;  THttpServer.cxx;  TRootSniffer.cxx;  TRootSnifferStore.cxx;  ► krb5auth;  ► inc;  Krb5Auth.h;  TKSocket.h;  ► src;  Krb5Auth.cxx;  TKSocket.cxx;  ► ldap;  ► inc;  CintLDAP.h;  TLDAPAttribute.h;  TLDAPEntry.h;  TLDAPResult.h;  TLDAPServer.h;  ► src;  TLDAPAttribute.cxx;  TLDAPEntry.cxx;  TLDAPResult.cxx;  TLDAPServer.cxx;  ► monalisa;  ► inc;  TMonaLisaWriter.h;  ► src;  TMonaLisaWr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:60192,interface,interface,60192,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['interface'],['interface']
Integrability,"ectory::TContext ctxt(this);; 1556 ; 1557 SaveSelf();; 1558 ; 1559 // recursively save all sub-directories; 1560 if (fList && fList->FirstLink()) {; 1561 auto lnk = fList->FirstLink()->shared_from_this();; 1562 while (lnk) {; 1563 TObject *idcur = lnk->GetObject();; 1564 if (idcur && idcur->InheritsFrom(TDirectoryFile::Class())) {; 1565 TDirectoryFile *dir = (TDirectoryFile *)idcur;; 1566 dir->Save();; 1567 }; 1568 lnk = lnk->NextSP();; 1569 }; 1570 }; 1571}; 1572 ; 1573////////////////////////////////////////////////////////////////////////////////; 1574/// Save object in filename.; 1575///; 1576/// If filename is `nullptr` or """", a file with ""<objectname>.root"" is created.; 1577/// The name of the key is the object name.; 1578/// By default new file will be created. Using option ""a"", one can append object; 1579/// to the existing ROOT file.; 1580/// If the operation is successful, it returns the number of bytes written to the file; 1581/// otherwise it returns 0.; 1582/// By default a message is printed. Use option ""q"" to not print the message.; 1583/// If filename contains "".json"" extension, JSON representation of the object; 1584/// will be created and saved in the text file. Such file can be used in; 1585/// JavaScript ROOT (https://root.cern/js/) to display object in web browser; 1586/// When creating JSON file, option string may contain compression level from 0 to 3 (default 0); 1587 ; 1588Int_t TDirectoryFile::SaveObjectAs(const TObject *obj, const char *filename, Option_t *option) const; 1589{; 1590 // option can contain single letter args: ""a"" for append, ""q"" for quiet in any combinations; 1591 ; 1592 if (!obj) return 0;; 1593 TString fname, opt = option;; 1594 if (filename && *filename); 1595 fname = filename;; 1596 else; 1597 fname.Form(""%s.root"", obj->GetName());; 1598 opt.ToLower();; 1599 ; 1600 Int_t nbytes = 0;; 1601 if (fname.Index("".json"") > 0) {; 1602 nbytes = TBufferJSON::ExportToFile(fname, obj, option);; 1603 } else {; 1604 TContext ctxt; // Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:53774,message,message,53774,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['message'],['message']
Integrability,ectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for elements drawn in the editor. More...;  ; class  TAttFill;  Fill Area Attributes class. More...;  ; class  TAttLine;  Line Attributes class. More...;  ; class  TAttMarker;  Marker Attributes class. More...;  ; class  TAttPad;  Manages default Pad attributes. More...;  ; class  TAttText;  Text Attributes class. More...;  ; class  TBase64;  This code implements the Base64 encoding and decoding. More...;  ; class  TBenchmark;  This class is a ROOT utility to help benchmarking applications. More...;  ; class  TBrowser;  Using a TBrowser one can browse all ROOT objects. More...;  ; class  TBrowserImp;  ABC describing GUI independent browser implemen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:1740,protocol,protocol,1740,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['protocol'],['protocol']
Integrability,"ects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:20069,message,message,20069,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['message'],['message']
Integrability,"ects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::SliceRooCmdArg Slice(const RooArgSet &sliceSet)Definition RooGlobalFunc.cxx:134; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf310_sliceplotDefinition rf310_sliceplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav,mixState); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf310_sliceplot.C. tutorialsroofitrf310_sliceplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8C.html:5735,integrat,integrates,5735,doc/master/rf310__sliceplot_8C.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8C.html,3,['integrat'],['integrates']
Integrability,"ecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:9188,message,message,9188,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,30,['message'],['message']
Integrability,"ecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:6749,message,message,6749,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['message'],['message']
Integrability,"ecute(c,""0"",); // Set Value 0 !!!; c#define c(i)Definition RSha256.hxx:101; Long_tlong Long_tDefinition RtypesCore.h:54; TCanvasThe Canvas class.Definition TCanvas.h:23; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetDataMemberTDataMember * GetDataMember(const char *datamember) constReturn pointer to datamember object with name ""datamember"".Definition TClass.cxx:3506; TClass::IsATClass * IsA() const overrideDefinition TClass.h:618; TDataMemberAll ROOT classes may have RTTI (run time type identification) support added.Definition TDataMember.h:31; TDataMember::SetterMethodTMethodCall * SetterMethod(TClass *cl)Return a TMethodCall method responsible for setting the value of data member.Definition TDataMember.cxx:878; TDataMember::GetterMethodTMethodCall * GetterMethod(TClass *cl=nullptr)Return a TMethodCall method responsible for getting the value of data member.Definition TDataMember.cxx:834; TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; TMethodCall::Executevoid Execute(const char *, const char *, int *=nullptr) overrideExecute method on this object with the given parameter string, e.g.Definition TMethodCall.h:64; lTLine lDefinition textangle.C:4; This trick is widely used in ROOT TContextMenu and dialogs for obtaining current values and put them as initial values in dialog fields.; If you don't want to follow the convention of naming used by ROOT you still could benefit from Getter/Setter method support: the solution is to instruct ROOT what the names of these routines are. The way to do it is putting this information in a comment string to a data field in your class declaration:; class MyClass{; Int_t mydata; // *OPTIONS={GetMethod=""Get"";SetMethod=""Set""}; ...; Int_t Get() const { return mydata;};; void Set(Int_t i) {mydata=i;};; }; Int_tint Int_tDefinition RtypesCore.h:45; int; However, this getting/setting functions are not the only feature of this class. The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataMember.html:3610,interface,interface,3610,doc/master/classTDataMember.html,https://root.cern,https://root.cern/doc/master/classTDataMember.html,1,['interface'],['interface']
Integrability,"ed ; [in]destreturns the destination region . Reimplemented from TVirtualX.; Definition at line 4300 of file TGCocoa.mm. ◆ UnionRegion(). void TGCocoa::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the union of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX.; Definition at line 4323 of file TGCocoa.mm. ◆ UnmapWindow(). void TGCocoa::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX.; Definition at line 1184 of file TGCocoa.mm. ◆ Update(). void TGCocoa::Update ; (; Int_t ; mode). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 578 of file TGCocoa.mm. ◆ UpdateWindow(). void TGCocoa::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX.; Definition at line 794 of file TGCocoa.mm. ◆ Warp(). void TGCocoa::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 4134 of file TGCocoa.mm. ◆ WMDeleteNotify(). void TGCocoa::WMDelete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:126440,synchroniz,synchronizes,126440,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['synchroniz'],['synchronizes']
Integrability,"ed Members; Includes; Libraries. Function documentation; BinaryTree(const TMVA::BinaryTree& ); constructor for a yet ""empty"" tree. Needs to be filled afterwards. ~BinaryTree( void ); destructor (deletes the nodes and ""events"" if owned by the tree. void DeleteNode(TMVA::Node* ); protected, recursive, function used by the class destructor and when Pruning. TMVA::Node* GetLeftDaughter(TMVA::Node* n); get left daughter node current node ""n"". TMVA::Node* GetRightDaughter(TMVA::Node* n); get right daughter node current node ""n"". UInt_t CountNodes(TMVA::Node* n = __null); return the number of nodes in the tree. (make a new count --> takes time). void Print(ostream& os) const; recursively print the tree. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262656); read attributes from XML. void Read(istream& istr, UInt_t tmva_Version_Code = 262656); Read the binary tree from an input stream.; The input stream format depends on the tree type,; it is defined be the node of the tree. void SetTotalTreeDepth( Node *n); descend a tree to find all its leaf nodes, fill max depth reached in the; tree at the same time. TMVA::MsgLogger& Log() const. BinaryTree(const TMVA::BinaryTree& ); or a tree with Root node ""n"", any daughters of this node are automatically in the tree. Node* CreateNode(UInt_t size = 0) const. BinaryTree* CreateTree() const; virtual BinaryTree* CreateFromXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE) = 0;. const char* ClassName() const. void SetRoot(TMVA::Node* r); set the root node of the tree. { fRoot = r; }. Node* GetRoot() const; Retrieves the address of the root node. { return fRoot; }. UInt_t GetNNodes() const; get number of Nodes in the Tree as counted while booking the nodes;. { return fNNodes; }. UInt_t GetTotalTreeDepth() const; { return fDepth; }. void SetTotalTreeDepth(Int_t depth); { fDepth = depth; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__BinaryTree.html:2812,depend,depends,2812,root/html602/TMVA__BinaryTree.html,https://root.cern,https://root.cern/root/html602/TMVA__BinaryTree.html,2,['depend'],['depends']
Integrability,"ed Members; Includes; Libraries. Function documentation; BinaryTree(const TMVA::BinaryTree& ); constructor for a yet ""empty"" tree. Needs to be filled afterwards. ~BinaryTree( void ); destructor (deletes the nodes and ""events"" if owned by the tree. void DeleteNode(TMVA::Node* ); protected, recursive, function used by the class destructor and when Pruning. TMVA::Node* GetLeftDaughter(TMVA::Node* n); get left daughter node current node ""n"". TMVA::Node* GetRightDaughter(TMVA::Node* n); get right daughter node current node ""n"". UInt_t CountNodes(TMVA::Node* n = __null); return the number of nodes in the tree. (make a new count --> takes time). void Print(ostream& os) const; recursively print the tree. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. void Read(istream& istr, UInt_t tmva_Version_Code = 262657); Read the binary tree from an input stream.; The input stream format depends on the tree type,; it is defined be the node of the tree. void SetTotalTreeDepth( Node *n); descend a tree to find all its leaf nodes, fill max depth reached in the; tree at the same time. TMVA::MsgLogger& Log() const. BinaryTree(const TMVA::BinaryTree& ); or a tree with Root node ""n"", any daughters of this node are automatically in the tree. Node* CreateNode(UInt_t size = 0) const. BinaryTree* CreateTree() const; virtual BinaryTree* CreateFromXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE) = 0;. const char* ClassName() const. void SetRoot(TMVA::Node* r); set the root node of the tree. { fRoot = r; }. Node* GetRoot() const; Retrieves the address of the root node. { return fRoot; }. UInt_t GetNNodes() const; get number of Nodes in the Tree as counted while booking the nodes;. { return fNNodes; }. UInt_t GetTotalTreeDepth() const; { return fDepth; }. void SetTotalTreeDepth(Int_t depth); { fDepth = depth; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__BinaryTree.html:2820,depend,depends,2820,root/html604/TMVA__BinaryTree.html,https://root.cern,https://root.cern/root/html604/TMVA__BinaryTree.html,2,['depend'],['depends']
Integrability,"ed Members; Includes; Libraries. Function documentation; void nameFieldLength(Int_t newLen); Set length of field reserved from printing name of RooAbsArgs in; multi-line collection printing to given amount. void printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; Print description of object on ostream, printing contents set by contents integer,; which is interpreted as an OR of 'enum ContentsOptions' values and in the style; given by 'enum StyleOption'. Each message is prefixed by string 'indent' when printed. void printValue(ostream& os) const; Interface to print value of object. void printExtras(ostream& os) const; Interface to print extras of object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for detailed printing of object. void printTree(ostream& os, TString indent = """") const; Interface for tree structure printing of object. void printArgs(ostream& os) const; Interface for printing of object arguments. Arguments; are loosely defined as external server objects; in this context. void printName(ostream& os) const; Print name of object. void printTitle(ostream& os) const; Print title of object. void printClassName(ostream& os) const; Print class name of object. void printAddress(ostream& os) const; Print class name of object. Int_t defaultPrintContents(Option_t* opt) const; Default choice of contents to be printed (name and value). ostream & defaultPrintStream(ostream* os = 0); Return a reference to the current default stream to use in; Print(). Use the optional parameter to specify a new default; stream (a reference to the old one is still returned). This; method allows subclasses to provide an inline implementation of; Print() without pulling in iostream.h. inline RooPrintable(); { }. virtual ~RooPrintable(); { }. StyleOption defaultPrintStyle(Option_t* opt) const. » Last changed: Thu Nov 3 20:08:58 2011 » Last generated: 2011-11-03 20:08; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPrintable.html:3522,Interface,Interface,3522,root/html532/RooPrintable.html,https://root.cern,https://root.cern/root/html532/RooPrintable.html,1,['Interface'],['Interface']
Integrability,"ed Members; Includes; Libraries. Function documentation; void nameFieldLength(Int_t newLen); Set length of field reserved from printing name of RooAbsArgs in; multi-line collection printing to given amount. void printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; Print description of object on ostream, printing contents set by contents integer,; which is interpreted as an OR of 'enum ContentsOptions' values and in the style; given by 'enum StyleOption'. Each message is prefixed by string 'indent' when printed. void printValue(ostream& os) const; Interface to print value of object. void printExtras(ostream& os) const; Interface to print extras of object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for detailed printing of object. void printTree(ostream& os, TString indent = """") const; Interface for tree structure printing of object. void printArgs(ostream& os) const; Interface for printing of object arguments. Arguments; are loosely defined as external server objects; in this context. void printName(ostream& os) const; Print name of object. void printTitle(ostream& os) const; Print title of object. void printClassName(ostream& os) const; Print class name of object. void printAddress(ostream& os) const; Print class name of object. Int_t defaultPrintContents(Option_t* opt) const; Default choice of contents to be printed (name and value). ostream & defaultPrintStream(ostream* os = 0); Return a reference to the current default stream to use in; Print(). Use the optional parameter to specify a new default; stream (a reference to the old one is still returned). This; method allows subclasses to provide an inline implementation of; Print() without pulling in iostream.h. inline RooPrintable(); { }. virtual ~RooPrintable(); { }. StyleOption defaultPrintStyle(Option_t* opt) const. » Last changed: Tue Jun 2 15:33:01 2015 » Last generated: 2015-06-02 15:33; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooPrintable.html:3943,Interface,Interface,3943,root/html604/RooPrintable.html,https://root.cern,https://root.cern/root/html604/RooPrintable.html,1,['Interface'],['Interface']
Integrability,"ed Members; Includes; Libraries. Function documentation; void nameFieldLength(Int_t newLen); Set length of field reserved from printing name of RooAbsArgs in; multi-line collection printing to given amount. void printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; Print description of object on ostream, printing contents set by contents integer,; which is interpreted as an OR of 'enum ContentsOptions' values and in the style; given by 'enum StyleOption'. Each message is prefixed by string 'indent' when printed. void printValue(ostream& os) const; Interface to print value of object. void printExtras(ostream& os) const; Interface to print extras of object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for detailed printing of object. void printTree(ostream& os, TString indent = """") const; Interface for tree structure printing of object. void printArgs(ostream& os) const; Interface for printing of object arguments. Arguments; are loosely defined as external server objects; in this context. void printName(ostream& os) const; Print name of object. void printTitle(ostream& os) const; Print title of object. void printClassName(ostream& os) const; Print class name of object. void printAddress(ostream& os) const; Print class name of object. Int_t defaultPrintContents(Option_t* opt) const; Default choice of contents to be printed (name and value). ostream & defaultPrintStream(ostream* os = 0); Return a reference to the current default stream to use in; Print(). Use the optional parameter to specify a new default; stream (a reference to the old one is still returned). This; method allows subclasses to provide an inline implementation of; Print() without pulling in iostream.h. inline RooPrintable(); { }. virtual ~RooPrintable(); { }. StyleOption defaultPrintStyle(Option_t* opt) const. » Last changed: Tue Jun 30 14:34:56 2015 » Last generated: 2015-06-30 14:34; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPrintable.html:3943,Interface,Interface,3943,root/html602/RooPrintable.html,https://root.cern,https://root.cern/root/html602/RooPrintable.html,1,['Interface'],['Interface']
Integrability,"ed Members; Includes; Libraries. Function documentation; void nameFieldLength(Int_t newLen); Set length of field reserved from printing name of RooAbsArgs in; multi-line collection printing to given amount. void printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; Print description of object on ostream, printing contents set by contents integer,; which is interpreted as an OR of 'enum ContentsOptions' values and in the style; given by 'enum StyleOption'. Each message is prefixed by string 'indent' when printed. void printValue(ostream& os) const; Interface to print value of object. void printExtras(ostream& os) const; Interface to print extras of object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for detailed printing of object. void printTree(ostream& os, TString indent = """") const; Interface for tree structure printing of object. void printArgs(ostream& os) const; Interface for printing of object arguments. Arguments; are loosely defined as external server objects; in this context. void printName(ostream& os) const; Print name of object. void printTitle(ostream& os) const; Print title of object. void printClassName(ostream& os) const; Print class name of object. void printAddress(ostream& os) const; Print class name of object. Int_t defaultPrintContents(Option_t* opt) const; Default choice of contents to be printed (name and value). ostream & defaultPrintStream(ostream* os = 0); Return a reference to the current default stream to use in; Print(). Use the optional parameter to specify a new default; stream (a reference to the old one is still returned). This; method allows subclasses to provide an inline implementation of; Print() without pulling in iostream.h. inline RooPrintable(); { }. virtual ~RooPrintable(); { }. StyleOption defaultPrintStyle(Option_t* opt) const. » Last changed: Tue Mar 10 17:18:28 2015 » Last generated: 2015-03-10 17:18; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPrintable.html:3541,Interface,Interface,3541,root/html534/RooPrintable.html,https://root.cern,https://root.cern/root/html534/RooPrintable.html,1,['Interface'],['Interface']
Integrability,ed PDF. ; Definition at line 81 of file RooNumConvolution.h. ◆ _cloneVar. RooAbsReal* RooNumConvolution::_cloneVar. mutableprotected . Pointer to cloned convolution variable. ; Definition at line 80 of file RooNumConvolution.h. ◆ _convIntConfig. RooNumIntConfig RooNumConvolution::_convIntConfig. protected . Configuration of numeric convolution integral ;. ; Definition at line 69 of file RooNumConvolution.h. ◆ _doProf. bool RooNumConvolution::_doProf. protected . Switch to activate profiling option. ; Definition at line 94 of file RooNumConvolution.h. ◆ _init. bool RooNumConvolution::_init. mutableprotected . Definition at line 63 of file RooNumConvolution.h. ◆ _integrand. RooConvIntegrandBinding* RooNumConvolution::_integrand. mutableprotected . ! Binding of Convolution Integrand function ; Definition at line 70 of file RooNumConvolution.h. ◆ _integrator. std::unique_ptr<RooAbsIntegrator> RooNumConvolution::_integrator. mutableprotected . ! Numeric integrator of convolution integrand ; Definition at line 71 of file RooNumConvolution.h. ◆ _origModel. RooRealProxy RooNumConvolution::_origModel. protected . Original resolution model. ; Definition at line 75 of file RooNumConvolution.h. ◆ _origPdf. RooRealProxy RooNumConvolution::_origPdf. protected . Original input PDF. ; Definition at line 74 of file RooNumConvolution.h. ◆ _origVar. RooRealProxy RooNumConvolution::_origVar. protected . Original convolution variable. ; Definition at line 73 of file RooNumConvolution.h. ◆ _ownedClonedModelSet. RooArgSet RooNumConvolution::_ownedClonedModelSet. mutableprotected . Owning set of cloned model components. ; Definition at line 78 of file RooNumConvolution.h. ◆ _ownedClonedPdfSet. RooArgSet RooNumConvolution::_ownedClonedPdfSet. mutableprotected . Owning set of cloned PDF components. ; Definition at line 77 of file RooNumConvolution.h. ◆ _useWindow. bool RooNumConvolution::_useWindow. protected . Switch to activate window convolution. ; Definition at line 89 of file RooNumConvo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:72863,integrat,integrator,72863,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['integrat'],['integrator']
Integrability,"ed as second argument, the graph is saved to that file, otherwise it is returned as a string.; ; import ROOT; ; rd1 = ROOT.RDataFrame(2); ; rd2 = rd1.Define(""Root_def1"", ""1"") \; .Filter(""Root_def1 < 2"", ""Main_Filter"") \; .Define(""Root_def2"", ""1""); ; branch1 = rd2.Define(""Branch_1_def"", ""1""); branch2 = rd2.Define(""Branch_2_def"", ""1""); ; branch1_1 = branch1.Filter(""Branch_1_def < 2"", ""Filter_1"") \; .Define(""Branch_1_1_def"", ""1"") \; .Filter(""1 == Branch_1_1_def % 2"", ""Filter_1_1"") \; .Mean(""Branch_1_1_def"");; ; branch1_2 = branch1.Define(""Branch_1_2_def"", ""1"") \; .Filter(""Branch_1_2_def < 2"", ""Filter_1_2"") \; .Count(); ; branch2_1 = branch2.Filter(""Branch_2_def < 2"", ""Filter_2"") \; .Define(""Branch_2_1_def"", ""1"") \; .Define(""Branch_2_2_def"", ""1"") \; .Filter(""1 == Branch_2_1_def % 2"", ""Filter_2_1"") \; .Max(""Branch_2_1_def""); ; branch2_2 = branch2.Count(); ; print(ROOT.RDF.SaveGraph(branch1_1)); ROOT.RDF.SaveGraph(rd1, ""exampleGraph.dot""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; digraph {; 8 [label=""Mean"", style=""filled"", fillcolor=""#e47c7e"", shape=""box""];; 6 [label=""Filter_1_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 7 [label=""Define\nBranch_1_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 3 [label=""Filter_1"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 4 [label=""Define\nBranch_1_def"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 5 [label=""Define\nRoot_def2"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 1 [label=""Main_Filter"", style=""filled"", fillcolor=""#0f9d58"", shape=""hexagon""];; 2 [label=""Define\nRoot_def1"", style=""filled"", fillcolor=""#4285f4"", shape=""ellipse""];; 0 [label=""Empty source\nEntries: 2"", style=""filled"", fillcolor=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df034__SaveGraph_8py.html:1832,interface,interface,1832,doc/master/df034__SaveGraph_8py.html,https://root.cern,https://root.cern/doc/master/df034__SaveGraph_8py.html,1,['interface'],['interface']
Integrability,"ed by constructing an average over all observable values in given set.; Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ProjWData(const RooArgSet& s, -- As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; const RooAbsData& d); ProjectionRange(const char* rn) -- Override default range of projection integrals to a different range speficied by given range name.; This technique allows you to project a finite width slice in a real-valued observable; NormRange(const char* name) -- Calculate curve normalization w.r.t. only in specified ranges. NB: A Range() by default implies a NormRange(); on the same range, but this option allows to override the default, or specify a normalization ranges; when the full curve is to be drawn. Misc content control. Normalization(Double_t scale, -- Adjust normalization by given scale factor. Interpretation of number depends on code: Relative:; ScaleType code) relative adjustment factor, NumEvent: scale to match given number of events.; Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later; Asymmetry(const RooCategory& c) -- Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1.; ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions; AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plotting control. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is blue; LineWidth(Int_t width) -- Select line with in pixels, default i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:68080,depend,depends,68080,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,10,['depend'],['depends']
Integrability,"ed by the user as belonging to one of the following types:. Freely variable: allowed to take on any value.; Variable with double sided limits: allowed to vary only between two limits specified by the user.; Variable with single sided limits: allowed to vary only between one upper or one lower limit specified by the user and unlimited to the other side.; Fixed: originally defined as variable, but now taking on only the value the parameter had at the moment it was fixed, or a value later assigned by the user.; Constant: taking on only one value as specified by the user. When using the minimal required interface, all variable parameters are free and unbound.; The user, in his \(\mbox{FCN}\), must of course be able to “see” all types of defined parameters, and he therefore has access to what we call the external parameter list, that is, the parameters as he defined them. On the other hand, the internal M minimizing routines only want to “see” variable parameters without limits, and so they have access only to the internal parameter list which is created from the external list by the following transformation:. Squeeze out all parameters that are not variable.; Transform all variable parameters with limits, so that the transformed parameter can vary without limits. (See the next section for details concerning this transformation.) Because this transformation is non-linear, it is recommended to avoid putting limits on parameters where they are not needed. As an example, suppose that the user has defined the following parameters:. Parameter 0, constant.; Parameter 1, freely variable.; Parameter 2, variable with limits.; Parameter 3, constant.; Parameter 4, freely variable. Then the internal parameter list would be as follows:. Internal parameter 0 = external parameter 1.; Internal parameter 1 = external parameter 2, transformed appropriately.; Internal parameter 2 = external parameter 4. In the above example, M considers that the number of external parameters is 5, and the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:11509,rout,routines,11509,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['rout'],['routines']
Integrability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:12699,integrat,integration,12699,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,2,['integrat'],['integration']
Integrability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:23973,integrat,integration,23973,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,3,['integrat'],['integration']
Integrability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:12480,integrat,integration,12480,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['integrat'],['integration']
Integrability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:23553,integrat,integration,23553,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,28,['integrat'],['integration']
Integrability,"ed by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; RooMCStudy * _mcs;  Pointer to RooMCStudy object module is attached to. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:13174,message,message,13174,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['message'],['message']
Integrability,"ed by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooChi2MCSModule.h>. Inheritance diagram for RooChi2MCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooChi2MCSModule() [1/2]. RooChi2MCSModule::RooChi2MCSModule ; (; ). Definition at line 43 of file RooChi2MCSModule.cxx. ◆ RooChi2MCSModule() [2/2]. RooChi2MCSModule::RooChi2MCSModule ; (; const RooChi2MCSModule & ; other). Copy constructor. ; Definition at line 48 of file RooChi2MCSModule.cxx. ◆ ~RooChi2MCSModule(). RooChi2MCSModule::~RooChi2MCSModule ; (; ). override . Destructor. ; Definition at line 53 of file RooChi2MCSModule.cxx. Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2MCSModule.html:14486,message,message,14486,doc/master/classRooChi2MCSModule.html,https://root.cern,https://root.cern/doc/master/classRooChi2MCSModule.html,1,['message'],['message']
Integrability,"ed by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooDLLSignificanceMCSModule.h>. Inheritance diagram for RooDLLSignificanceMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooDLLSignificanceMCSModule() [1/3]. RooDLLSignificanceMCSModule::RooDLLSignificanceMCSModule ; (; const RooRealVar & ; param, . double ; nullHypoValue = 0.0 . ). Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ; Definition at line 53 of file RooDLLSignificanceMCSModule.cxx. ◆ RooDLLSignificanceMCSModule() [2/3]. RooDLLSignificanceMCSModule",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:15652,message,message,15652,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['message'],['message']
Integrability,"ed by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooRandomizeParamMCSModule.h>. Inheritance diagram for RooRandomizeParamMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRandomizeParamMCSModule() [1/2]. RooRandomizeParamMCSModule::RooRandomizeParamMCSModule ; (; ). Constructor. ; Definition at line 55 of file RooRandomizeParamMCSModule.cxx. ◆ RooRandomizeParamMCSModule() [2/2]. RooRandomizeParamMCSModule::RooRandomizeParamMCSModule ; (; const RooRandomizeParamMCSModule & ; other). Copy constructor. ; Definition at line 65 of file RooRandomizeParamMCSModule.cxx. ◆ ~RooRandomizeParamMCSMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:15709,message,message,15709,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['message'],['message']
Integrability,"ed by user. ;  ; RooArgSet * fitParams ();  Return current value of parameters of fit model. ;  ; RooAbsGenContext * genContext ();  ; RooArgSet * genInitParams ();  Return initial value of generator model parameters. ;  ; RooAbsPdf * genModel ();  Return generator pdf. ;  ; RooArgSet * genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/UpperLimitMCSModule.h>. Inheritance diagram for RooStats::UpperLimitMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UpperLimitMCSModule() [1/2]. UpperLimitMCSModule::UpperLimitMCSModule ; (; const RooArgSet * ; poi, . double ; CL = 0.95 . ). Definition at line 38 of file UpperLimitMCSModule.cxx. ◆ UpperLimitMCSModule() [2/2]. UpperLimitMCSModule::UpperLimitMCSModule ; (; const UpperLimitMCSModule & ; other). Copy constructor. ; Definition at line 54 of file UpperLimitMCSModule.cxx. ◆ ~UpperLimitMCSModule(). UpperLimitMCSModule::~Up",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:14362,message,message,14362,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['message'],['message']
Integrability,"ed by x,y,namez by a weight w. If the weight is not equal to 1, the storage of the sum of squares of; weights is automatically triggered and the sum of the squares of weights is incremented; by w^2 in the corresponding cell.; The function returns the corresponding global bin number which has its content; incremented by w. void FillRandom(const char* fname, Int_t ntimes = 5000); Fill histogram following distribution in function fname. The distribution contained in the function fname (TF1) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. void FillRandom(TH1* h, Int_t ntimes = 5000); Fill histogram following distribution in histogram h. The distribution contained in the histogram h (TH3) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. Int_t FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find first bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. Int_t FindLastBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find last bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. void FitSlicesZ(TF1* f1 = 0, Int_t binminx = 1, Int_t binmaxx = 0, Int_t binminy = 1, Int_t binmaxy = 0, Int_t cut = 0, Option_t* option = ""QNR""); Project slices along Z in case of a 3-D histogram, then fit each slice; with function f1 and make a 2-d histogram for each fit parameter; Only cells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:34449,integrat,integrated,34449,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,4,['integrat'],['integrated']
Integrability,"ed by; 4261/// ~~~ {.cpp}; 4262/// tree->Draw(""arr1-Alt$(arr2,0)"");; 4263/// ~~~; 4264/// The ternary operator is not directly supported in TTree::Draw however, to plot the; 4265/// equivalent of `var2<20 ? -99 : var1`, you can use:; 4266/// ~~~ {.cpp}; 4267/// tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");; 4268/// ~~~; 4269///; 4270/// ### Drawing a user function accessing the TTree data directly; 4271///; 4272/// If the formula contains a file name, TTree::MakeProxy will be used; 4273/// to load and execute this file. In particular it will draw the; 4274/// result of a function with the same name as the file. The function; 4275/// will be executed in a context where the name of the branches can; 4276/// be used as a C++ variable.; 4277///; 4278/// For example draw px using the file hsimple.root (generated by the; 4279/// hsimple.C tutorial), we need a file named hsimple.cxx:; 4280/// ~~~ {.cpp}; 4281/// double hsimple() {; 4282/// return px;; 4283/// }; 4284/// ~~~; 4285/// MakeProxy can then be used indirectly via the TTree::Draw interface; 4286/// as follow:; 4287/// ~~~ {.cpp}; 4288/// new TFile(""hsimple.root""); 4289/// ntuple->Draw(""hsimple.cxx"");; 4290/// ~~~; 4291/// A more complete example is available in the tutorials directory:; 4292/// `h1analysisProxy.cxx`, `h1analysProxy.h` and `h1analysisProxyCut.C`; 4293/// which reimplement the selector found in `h1analysis.C`; 4294///; 4295/// The main features of this facility are:; 4296///; 4297/// * on-demand loading of branches; 4298/// * ability to use the 'branchname' as if it was a data member; 4299/// * protection against array out-of-bound; 4300/// * ability to use the branch data as object (when the user code is available); 4301///; 4302/// See TTree::MakeProxy for more details.; 4303///; 4304/// ### Making a Profile histogram; 4305///; 4306/// In case of a 2-Dim expression, one can generate a TProfile histogram; 4307/// instead of a TH2F histogram by specifying option=prof or option=profs; 4308/// or opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:172462,interface,interface,172462,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['interface'],['interface']
Integrability,"ed byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_weightSqApply weights squared?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNLLVar.html:36708,integrat,integrator,36708,root/html530/RooNLLVar.html,https://root.cern,https://root.cern/root/html530/RooNLLVar.html,3,['integrat'],['integrator']
Integrability,"ed classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void copyList(TList& dest, const TList& source); WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:28565,depend,dependent,28565,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['depend'],['dependent']
Integrability,"ed classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBayesClassifier(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodBayesClassifier(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Variable can handle classification with 2 classes. void Init( void ); default initialisation. void DeclareOptions(); define the options (their key words) that can be set in the option string. void ProcessOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". ~MethodBayesClassifier( void ); destructor. void Train( void ); some training. void AddWeightsXMLTo(void* parent) const. void ReadWeightsFromStream(istream& istr); read back the training results from a file (stream). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void ReadWeightsFromXML(void* ); {}. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Abhishek Narain » Copyright (c) 2005-2006: *; » Last changed: root/tmva $Id: MethodBayesClassifier.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBayesClassifier.html:17285,message,message,17285,root/html530/TMVA__MethodBayesClassifier.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBayesClassifier.html,1,['message'],['message']
Integrability,"ed data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; kTRUEconstexpr Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:52400,rout,routine,52400,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['rout'],['routine']
Integrability,"ed from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using ; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in the nuisances and in the poi. All the numerical ; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Function Members (Methods); public:. virtual~BayesianCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooStats::BayesianCalculatorBayesianCalculator(); RooStats::BayesianCalculatorBayesianCalculator(const RooStats::BayesianCalculator&); RooStats::BayesianCalculatorBayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:1785,integrat,integration,1785,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['integrat'],['integration']
Integrability,"ed from the fit are corrected following a procedure described in paragraph 8.5.2 of the book, F. James, Statistical Methods in Experimental Physics, 2nd Edition.; 5.5.4 Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This parameter has four digits: mode = pcev (default = 0111). p = 1 print probability; c = 1 print Chi-square/number of degrees of freedom; e = 1 print errors (if e=1, v must be 1); v = 1 print name/values of parameters. For example, to print the fit probability, parameter names/values, and errors, use:; gStyle->SetOptFit(1011);; 5.6 The Fit Panel. The Fit Panel. To display the Fit Panel right click on a histogram to pop up the context menu, and then select the menu entry Fit Panel.; The new Fit Panel GUI is available in ROOT v5.14. Its goal is to replace the old Fit Panel and to provide more user friendly way for performing, exploring and comparing fits.; By design, this user interface is planned to contain two tabs: “General” and “Minimization”. Currently, the “General” tab provides user interface elements for setting the fit function, fit method and different fit, draw, print options. The “Minimization tab” provides the option to set the Minimizer to use in the fit and its specific options.; The new fit panel is a modeless dialog, i.e. when opened, it does not prevent users from interacting with other windows. Its first prototype is a singleton application. When the Fit Panel is activated, users can select an object for fitting in the usual way, i.e. by left-mouse click on it. If the selected object is suitable for fitting, the fit panel is connected with this object and users can perform fits by setting different parameters and options.; 5.6.1 Function Choice and Settings; ‘Predefined’ combo box - contains a list of predefined functions in ROOT. You have a choice of several polynomials, a Gaussian, a Landau, and an Exponential function. The default one is Gaussian.; ‘Operation’",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:182387,interface,interface,182387,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:59570,interface,interface,59570,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['interface'],['interface']
Integrability,"ed gif from jpeg images with names; imageNN.jpg, where 1<= NN <= 10; {; TImage *img = 0;; gSystem->Unlink(""anim.gif""); // delete existing file. for (int i = 1; i <= 10; i++) {; delete img; // delete previous image. // Read image data. Image can be in any format, e.g. png, gif, etc.; img = TImage::Open(Form(""image%d.jpg"", i));. if (i < 10) {; img->WriteImage(""anim.gif+"");; } else { // the last image written. ""++"" stands for infinit animation.; img->WriteImage(""anim.gif++"");; }; }; }. TImage::EImageFileTypes GetFileType(const char* ext); Return file type depending on specified extension.; Protected method. void MapFileTypes(TImage::EImageFileTypes& type, UInt_t& astype, Bool_t toas = kTRUE); Map file type to/from AfterImage types.; Protected method. void MapQuality(TAttImage::EImageQuality& quality, UInt_t& asquality, Bool_t toas = kTRUE); Map quality to/from AfterImage quality.; Protected method. void SetImage(const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD &imageData, UInt_t width, TImagePalette *palette); Delete the old image and creates a new image depending on the va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:23002,depend,depending,23002,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,1,['depend'],['depending']
Integrability,"ed gif from jpeg images with names; imageNN.jpg, where 1<= NN <= 10; {; TImage *img = 0;; gSystem->Unlink(""anim.gif""); // delete existing file. for (int i = 1; i <= 10; i++) {; delete img; // delete previous image. // Read image data. Image can be in any format, e.g. png, gif, etc.; img = TImage::Open(Form(""image%d.jpg"", i));. if (i < 10) {; img->WriteImage(""anim.gif+"");; } else { // the last image written. ""++"" stands for infinit animation.; img->WriteImage(""anim.gif++"");; }; }; }. TImage::EImageFileTypes GetFileType(const char* ext); Return file type depending on specified extension.; Protected method. void MapFileTypes(TImage::EImageFileTypes& type, UInt_t& astype, Bool_t toas = kTRUE); Map file type to/from AfterImage types.; Protected method. void MapQuality(TAttImage::EImageQuality& quality, UInt_t& asquality, Bool_t toas = kTRUE); Map quality to/from AfterImage quality.; Protected method. void SetImage(const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); Deletes the old image and creates a new image depending on the values; of imageData. The size of the image is width X height.; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending on the values; of imageData. The size of the image is width X (imageData.fN / width).; The color of each pixel depends on the imageData of the corresponding; pixel. The palette is used to convert an image value into its color.; If palette is not defined (palette = 0) a default palette is used.; Any previously defined zooming is reset. void SetImage(const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); Delete the old image and creates a new image depending o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TASImage.html:23020,depend,depending,23020,root/html528/TASImage.html,https://root.cern,https://root.cern/root/html528/TASImage.html,6,['depend'],['depending']
Integrability,"ed in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedPatternSelector(const TGWindow* p); Create pattern popup window. ~TGedPatternSelector(); Delete pattern popup window. void SetActive(Int_t newat); Set selected the current style. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message generated by pattern popup window. Int_t GetActive() const; { return fActive; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGedPatternSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedPatternSelector.html:19550,message,message,19550,root/html528/TGedPatternSelector.html,https://root.cern,https://root.cern/root/html528/TGedPatternSelector.html,1,['message'],['message']
Integrability,"ed in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedPatternSelector(const TGWindow* p); Create pattern popup window. ~TGedPatternSelector(); Delete pattern popup window. void SetActive(Int_t newat); Set selected the current style. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message generated by pattern popup window. Int_t GetActive() const; { return fActive; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGedPatternSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGedPatternSelector.html:19650,message,message,19650,root/html530/TGedPatternSelector.html,https://root.cern,https://root.cern/root/html530/TGedPatternSelector.html,1,['message'],['message']
Integrability,"ed in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedPatternSelector(const TGWindow* p); Create pattern popup window. ~TGedPatternSelector(); Delete pattern popup window. void SetActive(Int_t newat); Set selected the current style. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message generated by pattern popup window. Int_t GetActive() const; { return fActive; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGedPatternSelect.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGedPatternSelector.html:19650,message,message,19650,root/html532/TGedPatternSelector.html,https://root.cern,https://root.cern/root/html532/TGedPatternSelector.html,2,['message'],['message']
Integrability,"ed in TSocket using the zip algorithm; (only if message is > 256 bytes). TMessage(void* buf, Int_t bufsize); Create a TMessage object for reading objects. The objects will be; read from buf. Use the What() method to get the message type. ~TMessage(); Clean up compression buffer. void EnableSchemaEvolutionForAll(Bool_t enable = kTRUE); Static function enabling or disabling the automatic schema evolution.; By default schema evolution support is off. Bool_t UsesSchemaEvolutionForAll(); Static function returning status of global schema evolution. void ForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); Force writing the TStreamerInfo to the message. void Forward(); Change a buffer that was received into one that can be send, i.e.; forward a just received message. void TagStreamerInfo(TVirtualStreamerInfo* info); Remember that the StreamerInfo is being used in writing. void Reset(); Reset the message buffer so we can use (i.e. fill) it again. void SetLength() const; Set the message length at the beginning of the message buffer.; This method is only called by TSocket::Send(). void SetWhat(UInt_t what); Using this method one can change the message type a-posteriory.; In case you OR ""what"" with kMESS_ACK, the message will wait for; an acknowledgement from the remote side. This makes the sending; process synchronous. void SetCompressionAlgorithm(Int_t algorithm = 0). void SetCompressionLevel(Int_t level = 1). void SetCompressionSettings(Int_t settings = 1). Int_t Compress(); Compress the message. The message will only be compressed if the; compression level > 0 and the if the message is > 256 bytes.; Returns -1 in case of error (when compression fails or; when the message increases in size in some pathological cases),; otherwise returns 0. Int_t Uncompress(); Uncompress the message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMessage.html:23321,message,message,23321,root/html530/TMessage.html,https://root.cern,https://root.cern/root/html530/TMessage.html,18,['message'],['message']
Integrability,"ed in TSocket using the zip algorithm; (only if message is > 256 bytes). TMessage(void* buf, Int_t bufsize); Create a TMessage object for reading objects. The objects will be; read from buf. Use the What() method to get the message type. ~TMessage(); Clean up compression buffer. void EnableSchemaEvolutionForAll(Bool_t enable = kTRUE); Static function enabling or disabling the automatic schema evolution.; By default schema evolution support is off. Bool_t UsesSchemaEvolutionForAll(); Static function returning status of global schema evolution. void ForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); Force writing the TStreamerInfo to the message. void Forward(); Change a buffer that was received into one that can be send, i.e.; forward a just received message. void TagStreamerInfo(TVirtualStreamerInfo* info); Remember that the StreamerInfo is being used in writing. void Reset(); Reset the message buffer so we can use (i.e. fill) it again. void SetLength() const; Set the message length at the beginning of the message buffer.; This method is only called by TSocket::Send(). void SetWhat(UInt_t what); Using this method one can change the message type a-posteriory.; In case you OR ""what"" with kMESS_ACK, the message will wait for; an acknowledgement from the remote side. This makes the sending; process synchronous. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Int_t Compress(); Compress the message. The message will only be compressed if the; compression level > 0 and the if the message is > 256 bytes.; Returns -1 in case of error (when compression fails or; when the message increases in size in some pathological cases),; otherwise returns 0. Int_t Uncompress(); Uncompress the message. The message ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessage.html:22210,message,message,22210,root/html528/TMessage.html,https://root.cern,https://root.cern/root/html528/TMessage.html,2,['message'],['message']
Integrability,"ed in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooRealProxyRooAbsMoment::_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooRealProxy_ifInt(F(x))dx ;; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; RooRealProxy_ixfInt(X*F(X))dx ;; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFirstMoment.html:33567,integrat,integration,33567,root/html534/RooFirstMoment.html,https://root.cern,https://root.cern/root/html534/RooFirstMoment.html,4,['integrat'],['integration']
Integrability,"ed in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTruthModel.html:41836,integrat,integration,41836,root/html534/RooTruthModel.html,https://root.cern,https://root.cern/root/html534/RooTruthModel.html,2,['integrat'],['integration']
Integrability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:6825,integrat,integration,6825,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,8,['integrat'],['integration']
Integrability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6797,integrat,integration,6797,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integration']
Integrability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html:4832,integrat,integration,4832,root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html:4834,integrat,integration,4834,root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Integrability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html:4834,integrat,integration,4834,root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,3,"['Integrat', 'integrat']","['IntegratorMultiDimOptions', 'integration']"
Integrability,"ed intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions ; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html:2704,interface,interface,2704,root/html534/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html,2,['interface'],['interface']
Integrability,"ed int ; ivar, . unsigned int ; jvar . ); const. inlineoverridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 68 of file RMinimizer.h. ◆ Errors(). const double * ROOT::Math::RMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 63 of file RMinimizer.h. ◆ GetCovMatrix(). bool ROOT::Math::RMinimizer::GetCovMatrix ; (; double * ; covMat); const. inlineoverridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 79 of file RMinimizer.h. ◆ HessMatrix(). double ROOT::Math::RMinimizer::HessMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. Returns the ith jth component of the Hessian matrix. . ◆ Minimize(). bool ROOT::Math::RMinimizer::Minimize ; (; ). overridevirtual . Function to find the minimum. ; function for finding the minimum ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 47 of file RMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::RMinimizer::NCalls ; (; ); const. overridevirtual . Returns the number of function calls. ; returns number of function calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 44 of file RMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::RMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 61 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:13527,interface,interface,13527,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['interface'],['interface']
Integrability,"ed is Rtypes.h. See TMultiDimFit::MakeRealCode for a list of options. void MakeCoefficientErrors(); PRIVATE METHOD:; Compute the errors on the coefficients. For this to be done, the; curvature matrix of the non-orthogonal functions, is computed. void MakeCoefficients(); PRIVATE METHOD:; Invert the model matrix B, and compute final coefficients. For a; more thorough discussion of what this means, please refer to the; class description. First we invert the lower triangle matrix fOrthCurvatureMatrix; and store the inverted matrix in the upper triangle. void MakeCorrelation(); PRIVATE METHOD:; Compute the correlation matrix. Double_t MakeGramSchmidt(Int_t function); PRIVATE METHOD:; Make Gram-Schmidt orthogonalisation. The class description gives; a thorough account of this algorithm, as well as; references. Please refer to the; class description. void MakeHistograms(Option_t* option = ""A""); Make histograms of the result of the analysis. This message; should be sent after having read all data points, but before; finding the parameterization. Options:; A All the below; X Original independent variables; D Original dependent variables; N Normalised independent variables; S Shifted dependent variables; R1 Residuals versus normalised independent variables; R2 Residuals versus dependent variable; R3 Residuals computed on training sample; R4 Residuals computed on test sample. For a description of these quantities, refer to; class description. void MakeMethod(const Char_t* className = ""MDF"", Option_t* option = """"); Generate the file <classname>MDF.cxx which contains the; implementation of the method:. Double_t <classname>::MDF(Double_t *x). which does the same as TMultiDimFit::Eval. Please refer to this; method. Further, the public static members:. Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:29677,message,message,29677,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,10,['message'],['message']
Integrability,"ed list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout sec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:41907,message,message,41907,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,10,['message'],['message']
Integrability,"ed ntrack, nseg, and nvtex.; ""ntrack/I:nseg:nvtex""; There is one more rule: when no type is given for the very first leaf, it becomes a float (F). This leaf list has three floats called temp, mass, and px.; ""temp:mass:px""; The symbols used for the type are:. C: a character string terminated by the 0 character; B: an 8 bit signed integer; b: an 8 bit unsigned integer; S: a 16 bit signed integer; s: a 16 bit unsigned integer; I: a 32 bit signed integer; i: a 32 bit unsigned integer; L: a 64 bit signed integer; l: a 64 bit unsigned integer; G: a long signed integer, stored as 64 bit; g: a long unsigned integer, stored as 64 bit; F: a 32 bit floating point; D: a 64 bit floating point; O: [the letter ‘o’, not a zero] a boolean (Bool_t). The type is used for a byte count to decide how much space to allocate. The variable written is simply the block of bytes starting at the starting address given in the second parameter. It may or may not match the leaf list depending on whether or not the programmer is being careful when choosing the leaf address, name, and type.; By default, a variable will be copied with the number of bytes specified in the type descriptor symbol. However, if the type consists of two characters, the number specifies the number of bytes to be used when copying the variable to the output buffer. The line below describes ntrack to be written as a 16-bit integer (rather than a 32-bit integer).; ""ntrack/I2""; With this Branch method, you can also add a leaf that holds an entire array of variables. To add an array of floats use the f[n] notation when describing the leaf.; Float_t f[10];; tree->Branch(""fBranch"",f,""f[10]/F"");; You can also add an array of variable length:; {; TFile *f = new TFile(""peter.root"",""recreate"");; Int_t nPhot;; Float_t E[500];; TTree* nEmcPhotons = new TTree(""nEmcPhotons"",""EMC Photons"");; nEmcPhotons->Branch(""nPhot"",&nPhot,""nPhot/I"");; nEmcPhotons->Branch(""E"",E,""E[nPhot]/F"");; }; See “Example 2: A Tree with a C Structure” below ($ROOTSY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:540035,depend,depending,540035,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['depend'],['depending']
Integrability,"ed object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoomended to re-generate the toy for each poi scanned point of the posterior function. ROOFIT:; use roofit default integration methods which will produce a nested integral (not reccomended for more; than 1 nuisance parameters). if type = 0 use default specified via class Integrato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:13040,integrat,integration,13040,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['integrat'],['integration']
Integrability,"ed objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPRegexpDefinition TPRegexp.h:36; TPluginHandlerDefinition TPluginManager.h:103; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::ShutDownstatic void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:100425,message,message,100425,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['message'],['message']
Integrability,"ed on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Chebyshev.html:3437,integrat,integration,3437,root/html528/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Chebyshev.html,1,['integrat'],['integration']
Integrability,"ed only); frame2 = dt.frame(Title=""Decay distribution of mixed events""); data.plotOn(frame2, Cut=""mixState==mixState::mixed""); ; # Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav); bmix_gm1.plotOn(frame2, Slice=(mixState, ""mixed"")); ; # Create frame, data (unmixed only); frame3 = dt.frame(Title=""Decay distribution of unmixed events""); data.plotOn(frame3, Cut=""mixState==mixState::unmixed""); ; # Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav); bmix_gm1.plotOn(frame3, Slice=(mixState, ""unmixed"")); ; c = ROOT.TCanvas(""rf310_sliceplot"", ""rf310_sliceplot"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame3.Draw(); ; c.SaveAs(""rf310_sliceplot.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf310_sliceplot.py. tutorialsroofitrf310_sliceplot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8py.html:3236,integrat,integrates,3236,doc/master/rf310__sliceplot_8py.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8py.html,3,['integrat'],['integrates']
Integrability,"ed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without their contributions:; Andrei Gheata; Andrei works since 2001 in the offline group of the ALICE experiment. He is an experimental nuclear physicist who worked before ALICE on data analysis for heavy-ion experiments in emulsions. In 2000 he started collaborating with the ROOT project and implemented the TreeViewer interface. Andrei is the main developer of the ROOT geometry package. He integrated the geometry in the Virtual Monte Carlo framework by developing interfaces for the GEANT3, GEANT4 and FLUKA particle transport engines.; Anna Kreshuk; Anna was a project associate and contributed to different parts of ROOT, most notably to the fitting machinery, the interface to FFTW, numerous math-related functions, TEntryList container and PROOF GUI.; David Gonzalez Maline; David has been working on improving the performance and correctness of various mathematical algorithms as well as on integrating AI methods for data analysis inside the framework. He has also worked on extending and improving the FitPanel interface.; Diego Marcos Segura; Diego worked as technical student on CINT dictionary optimizations.; Eddy Offermann; Eddy joined the ROOT team during a sabbatical to work on making the ROOT matrix package the fastest and most versatile in the industry.; Ilka Antcheva; Ilka has been working from 2002 to 2008 in the ROOT team. She was responsible for the GUI system and designed many high level user interfaces and widgets, like found in many modern graphics applications: ROOT graphics editor (GED) and various object editors, Fit Panel, Style manager, a tool for automatic C++ code generation of any widget and the capabilit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:2666,interface,interface,2666,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['interface'],['interface']
Integrability,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:24614,integrat,integrated,24614,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['integrat'],['integrated']
Integrability,ed shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_paramsEffective parameters of this p.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:44415,integrat,integrated,44415,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,4,['integrat'],['integrated']
Integrability,"ed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t verbose = kFALSE); Read contents of the argset from specified file.; See readFromStream() for details. void writeToStream(ostream& os, Bool_t compact, const char* section = 0) const; Write the contents of the argset in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:20384,message,messages,20384,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['message'],['messages']
Integrability,"ed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t verbose = kFALSE); Read contents of the argset from specified file.; See readFromStream() for details. void writeToStream(ostream& os, Bool_t compact, const char* section = 0) const; Write the contents of the argset in ASCII form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19876,message,messages,19876,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['message'],['messages']
Integrability,"ed value and it's dirty flag will be cleared. void recalculateCache(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void setArgStatus(const RooArgSet& set, Bool_t active); Disabling of branches is (intentionally) not implemented in vector; data stores (as the doesn't result in a net saving of time). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). void Streamer(TBuffer& b); Stream an object of class RooVectorDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooVectorDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooVectorDataStore(*this,vars,newname) ; }. Bool_t isWeighted() const; { return (_wgtVar!=0||_extWgtArray!=0) ; }. Double_t sumEntries() const; { return _sumWeight ; }. const RooAbsArg* cacheOwner(); Constant term optimizer interface. { return _cacheOwner ; }. const RooVectorDataStore* cache() const; { return _cache ; }. void setExternalWeightArray(Double_t* arrayWgt, Double_t* arrayWgtErrLo, Double_t* arrayWgtErrHi, Double_t* arraySumW2). void setDirtyProp(Bool_t flag). const RooArgSet& row(); virtual void checkInit() const;. { return _varsww ; }. RealVector& operator=(const RooVectorDataStore& ). std::vector<RealVector*>& realStoreList(); { return _realStoreList ; }. std::vector<RealFullVector*>& realfStoreList(); { return _realfStoreList ; }. std::vector<CatVector*>& catStoreList(); { return _catStoreList ; }. CatVector* addCategory(RooAbsCategory* cat). RealVector* addReal(RooAbsReal* real). Bool_t isFullReal(RooAbsReal* real). Bool_t hasError(RooAbsReal* real). Bool_t hasAsymError(RooAbsReal* real). RealFullVector* addRealFull(RooAbsReal* real). » Last changed: Fri Dec 2 14:27:16 2011 » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVectorDataStore.html:16633,interface,interface,16633,root/html532/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html532/RooVectorDataStore.html,2,['interface'],['interface']
Integrability,ed with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twistor; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing of window IDs mapping. Needed for replaying events.; TRecorder Class provides direct recorder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:118575,interface,interface,118575,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['interface'],['interface']
Integrability,"ed with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits or plotting etc. NoteThe binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to integrate over in this kind of dataset).; In this case, IntegrateBins(>0.) needs to be used, and the desired binning needs to be assigned to the observable of the dataset: RooRealVar x(""x"", ""x"", 0., 5.);; x.setBins(10);; ; // <create dataset and model>; ; model.fitTo(data, IntegrateBins(>0.));; RooRealVarVariable t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:3219,integrat,integrator,3219,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integrator']
Integrability,"ed() const; Bool_tTObject::IsOnHeap() const; Bool_tTGTextView::IsReadOnly() const; virtual Bool_tTGTextView::IsSaved(); virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGTextView::Layout(); virtual voidLineDown(); virtual voidLineUp(); virtual Bool_tTGTextView::LoadBuffer(const char* txtbuf); virtual Bool_tTGTextView::LoadFile(const char* fname, long startpos = 0, long length = -1); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); virtual voidTGTextView::Marked(Bool_t mark)SIGNAL ; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual voidNextChar(); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOpened()SIGNAL ; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Bool_tPaste(); virtual voidTObject::Pop(); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTextEdit.html:12442,Message,Message,12442,root/html532/TGTextEdit.html,https://root.cern,https://root.cern/root/html532/TGTextEdit.html,2,['Message'],['Message']
Integrability,"ed() const; virtual Bool_tRooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidLoadDataSet(RooDataSet& data); voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooKeysPdf.html:20444,message,message,20444,root/html532/RooKeysPdf.html,https://root.cern,https://root.cern/root/html532/RooKeysPdf.html,2,['message'],['message']
Integrability,"ed), histograms will be paint; stacked on top of each other. TH1 * GetHistogram() const; Returns a pointer to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in THStack::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THStack.html:10532,depend,depends,10532,root/html530/THStack.html,https://root.cern,https://root.cern/root/html530/THStack.html,3,['depend'],['depends']
Integrability,"ed), histograms will be paint; stacked on top of each other. TH1 * GetHistogram() const; Returns a pointer to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in THStack::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. See THistPainter::Paint for a list of valid options. void Print(Option_t* chopt = """") const; Print the list of histograms. void RecursiveRemove(TObject* obj); Recursively ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THStack.html:10370,depend,depends,10370,root/html528/THStack.html,https://root.cern,https://root.cern/root/html528/THStack.html,1,['depend'],['depends']
Integrability,"ed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooFit::BidirMMapPipe*_pipe! connection to child; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; RooAbsReal::ErrorLoggingMode_remoteEvalErrorLoggingState; Bool_t_retrieveDispatched!; RooArgList_saveVarsCopy of variables; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; static RooMPSentinel_sentinel; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooRealMPFE::State_state; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; RooRealMPFE*_updateMaster! Update master; Double_tRooAbsReal::_valueCache for current value of object; vector<Bool_t>_valueChanged! Flags if variable needs update on server-side; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooListProxy_varsVariables; Bool_t_verboseClient; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_verboseServer; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:38490,integrat,integrator,38490,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,4,['integrat'],['integrator']
Integrability,"ed, a binned maximum likelihood is performed.; 953 * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; 954 *; 955 * @param data Reference to a RooAbsData object representing the dataset.; 956 * @param cmdArgs Variadic template arguments representing optional command arguments.; 957 * You can pass either an arbitrary number of RooCmdArg instances; 958 * or a single RooLinkedList that points to the RooCmdArg objects.; 959 * @return An owning pointer to the created RooAbsReal NLL object.; 960 * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; 961 *; 962 * @tparam CmdArgs_t Template types for optional command arguments.; 963 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 964 *; 965 * \note This front-end function should not be re-implemented in derived PDF types.; 966 * If you mean to customize the likelihood fitting routine,; 967 * you need to override the virtual RooAbsPdf::fitToImpl() method.; 968 *; 969 * The following named arguments are supported:; 970 *; 971 * <table>; 972 * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); 973 * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; 974 * \see RooAbsPdf::createNLL(); 975 *; 976 * <tr><th><th> Options to control flow of fit procedure; 977 * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; 978 * but others can be specified (through RooMinimizer interface).; 979 * <table>; 980 * <tr><th> Type <th> Algorithm; 981 * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); 982 * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; 983 * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; 984 * <tr><td> GSLS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:44666,rout,routine,44666,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['rout'],['routine']
Integrability,"ed, this call acts; transparently by returning an handle with the arguments for the; standard synchronous open run by TFile::Open(TFileOpenHandle *).; The retuned handle will be adopted by TFile after opening completion; in TFile::Open(TFileOpenHandle *); if opening is not finalized the; handle must be deleted by the caller. TFile * Open(TFileOpenHandle* handle); Waits for the completion of an asynchronous open request.; Returns the associated TFile, transferring ownership of the; handle to the TFile instance. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open(). Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close(). Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read(). Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write(). Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system lseek. All arguments like in POSIX lseek(); except that the offset and return value are of a type which are; able to handle 64 bit file systems. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Return file stat information. The interface and return value is; identical to TSystem::GetPathInfo(). The function returns 0 in; case of success and 1 if the file could not be stat'ed. Int_t SysSync(Int_t fd); Interface to system fsync. All arguments like in POSIX fsync(). Long64_t GetBytesWritten() const; Return the total number of bytes written so far to the file. Long64_t GetFileBytesRead(); Static function returning the total number of bytes read from all files. Long64_t GetFileBytesWritten(); Static function returning the total number of bytes written to all files.; Does not take into account what might still be in the write caches. Int_t GetFileReadCalls(); Static function returning the total number of read calls from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFile.html:50886,Interface,Interface,50886,root/html532/TFile.html,https://root.cern,https://root.cern/root/html532/TFile.html,4,['Interface'],['Interface']
Integrability,"ed.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, const char* reason = 0); Add a bad slave server to the bad slave list and remove it from; the active list and from the two monitor objects. Assume that the work; done by this worker was",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:43461,message,message,43461,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['message'],['message']
Integrability,"ed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; TPrincipalPrincipal Components Analysis (PCA)Definition TPrincipal.h:21; TSQLResultDefinition TSQLResult.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeFormulaUsed to pass a selection expression to the Tree drawing routine.Definition TTreeFormula.h:58; TTreeFriendLeafIterIterator on all the leaves in a TTree and its friend.Definition TTree.h:716; TTreeFriendLeafIter::operator!=bool operator!=(const TIterator &) const overrideCompare two iterator objects.Definition TTree.h:738; TTreeFriendLeafIter::GetCollectionconst TCollection * GetCollection() const overrideDefinition TTree.h:734; TTreeFriendLeafIter::fTreeTTree * fTreetree being iteratedDefinition TTree.h:719; TTreeFriendLeafIter::operator*TObject * operator*() const overrideReturn current object or nullptr.Definition TTree.h:746; TTreeFriendLeafIter::Resetvoid Reset() overrideDefinition TTree.h:737; TTreeFriendLeafIter::operator=TIterator & operator=(const TIterator &rhs) overrideOverridden assignment operator. Does NOT copy the 'cursor' location!Definition TTree.cxx:9792; TTreeFriendLeafIter::~TTreeFriendLeafIter~TTreeFriendLeafIter() overrideDefinition TTree.h:730; TTreeFriendLeafIter::TTreeFriendLeafIterTTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:49227,rout,routine,49227,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['rout'],['routine']
Integrability,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35389,integrat,integration,35389,root/html602/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html,4,['integrat'],['integration']
Integrability,"ed:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10425,message,message,10425,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,4,['message'],['message']
Integrability,"ed:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10513,message,message,10513,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,2,['message'],['message']
Integrability,"ed:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddition.html:35143,integrat,integration,35143,root/html602/RooAddition.html,https://root.cern,https://root.cern/root/html602/RooAddition.html,4,['integrat'],['integration']
Integrability,"ed; This style sheet definition cannot be later access with TXMLFile methods. Bool_t AddXmlLine(const char* line); Add just one line on the top of xml document; For instance, line can contain special xml processing instructions; Line should has correct xml syntax that later it can be decoded by xml parser; To be parsed later by TXMLFile again, this line should contain either; xml comments or xml processing instruction. Long64_t DirCreateEntry(TDirectory* ); Create key for directory entry in the key. TKeyXML* FindDirKey(TDirectory* dir); Serach for key which correspond to direcory dir. TDirectory* FindKeyDir(TDirectory* mother, Long64_t keyid); Find a directory in motherdir with a seek equal to keyid. Int_t DirReadKeys(TDirectory* ); Read keys for directory; Make sence only once, while next time no new subnodes will be created. void DirWriteKeys(TDirectory* ); Update key attributes. void DirWriteHeader(TDirectory* ); Write the directory header. Int_t SysOpen(const char* , Int_t , UInt_t ); Interface to basic system I/O routines. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. TXMLFile(). void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. Int_t GetIOVersion() const; { return fIOVersion; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLFile.html:34844,rout,routines,34844,root/html602/TXMLFile.html,https://root.cern,https://root.cern/root/html602/TXMLFile.html,6,"['Interface', 'rout']","['Interface', 'routines']"
Integrability,"ed; This style sheet definition cannot be later access with TXMLFile methods. Bool_t AddXmlLine(const char* line); Add just one line on the top of xml document; For instance, line can contain special xml processing instructions; Line should has correct xml syntax that later it can be decoded by xml parser; To be parsed later by TXMLFile again, this line should contain either; xml comments or xml processing instruction. Long64_t DirCreateEntry(TDirectory* ); Create key for directory entry in the key. TKeyXML* FindDirKey(TDirectory* dir); Serach for key which correspond to direcory dir. TDirectory* FindKeyDir(TDirectory* mother, Long64_t keyid); Find a directory in motherdir with a seek equal to keyid. Int_t DirReadKeys(TDirectory* ); Read keys for directory; Make sence only once, while next time no new subnodes will be created. void DirWriteKeys(TDirectory* ); Update key attributes. void DirWriteHeader(TDirectory* ); Write the directory header. Int_t SysOpen(const char* , Int_t , UInt_t ); Interface to basic system I/O routines. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. Int_t GetIOVersion() const; { return fIOVersion; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:32736,rout,routines,32736,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,8,"['Interface', 'rout']","['Interface', 'routines']"
Integrability,"ed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); Return Integral of function between a and b. based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A, B: End-points of integration interval. Note that B may be less; than A.; - params: Array of function parameters. If 0, use current parameters.; - epsilon: Accuracy parameter (see Accuracy). Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the argument EPS may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:49635,integrat,integration,49635,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,6,['integrat'],['integration']
Integrability,"ed; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooMultiGenFunction*_func! ROOT::Math multi-parameter function binding ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; TString_intNameIntegrand name; ROOT::Math::AdaptiveIntegratorMultiDim*_integrator; Int_t_nErrorNumber of error occurrences; Int_t_nWarnMax number of warnings to be issued ;; Int_t_nmaxMax number of divisions; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveIntegratorND.html:7101,depend,dependencies,7101,root/html526/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveIntegratorND.html,6,['depend'],['dependencies']
Integrability,"edPdf.; Definition at line 46 of file RooProjectedPdf.h. ◆ extendMode(). ExtendMode RooProjectedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Reimplemented in xRooProjectedPdf.; Definition at line 47 of file RooProjectedPdf.h. ◆ forceAnalyticalInt(). bool RooProjectedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Force RooRealIntegral to relegate integration of all observables to internal logic. ; Reimplemented from RooAbsReal.; Definition at line 157 of file RooProjectedPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooProjectedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Mark all requested variables as internally integrated. ; Reimplemented from RooAbsReal.; Definition at line 167 of file RooProjectedPdf.cxx. ◆ getProjection(). const RooAbsReal * RooProjectedPdf::getProjection ; (; const RooArgSet * ; iset, . const RooArgSet * ; nset, . const char * ; rangeName, . int & ; code . ); const. protected . Retrieve object representing projection integral of input p.d.f over observables iset, while normalizing over observables nset. ; The code argument returned by reference is the unique code defining this particular projection configuration ; Definition at line 109 of file RooProjectedPdf.cxx. ◆ initGenerator(). void RooProjectedPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented from RooAbsPdf.; Definition at line 34 of file RooProjectedPdf.h. ◆ IsA(). TClass * RooProjectedPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemente",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:78804,integrat,integrated,78804,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integrated']
Integrability,"edRows(),; ntuple->GetV2(), ntuple->GetV1());; Root > gr->Draw(""ap""); //draw graph in current pad; creates a TGraph object with a number of points corresponding to the; number of entries selected by the expression ""pz>4"", the x points of the graph; being the px values of the Tree and the y points the py values. Important note: By default TTree::Draw creates the arrays obtained; with GetW, GetV1, GetV2, GetV3, GetV4, GetVal with a length corresponding; to the parameter fEstimate. The content will be the last; GetSelectedRows() % GetEstimate(); values calculated.; By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000. You can use the option ""goff"" to turn off the graphics output; of TTree::Draw in the above example. Automatic interface to TTree::Draw via the TTreeViewer. A complete graphical interface to this function is implemented; in the class TTreeViewer.; To start the TTreeViewer, three possibilities:; - select TTree context menu item ""StartViewer""; - type the command ""TTreeViewer TV(treeName)""; - execute statement ""tree->StartViewer();"". void DropBaskets(); Remove some baskets from memory. void DropBuffers(Int_t nbytes); Drop branch buffers to accomodate nbytes below MaxVirtualsize. Int_t Fill(); Fill all branches. This function loops on all the branches of this tree. For; each branch, it copies to the branch buffer (basket) the current; values of the leaves data types. If a leaf is a simple data type,; a simple conversion to a machine independent format has to be done. This machine independent version of the data is copied into a; basket (each branch has its own basket). When a basket is full; (32k worth of data by default), it is then optionally compressed; and written to disk (this operation is also called comitting or; 'flushing' the basket). The committed baskets are then; immediately",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:84738,interface,interface,84738,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,3,['interface'],['interface']
Integrability,"edTF1( TF1 & f ). constructor from a TF1 function pointer. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. WrappedTF1(const WrappedTF1 & rhs). Copy constructor. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: WrappedTF1.h 31207 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__WrappedTF1.html:3713,interface,interface,3713,root/html526/ROOT__Math__WrappedTF1.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__WrappedTF1.html,1,['interface'],['interface']
Integrability,"edVars << std::endl ;; 2296 }; 2297 ; 2298 ; 2299 // Customize two copies of projection with fixed negative and positive asymmetry; 2300 std::unique_ptr<RooAbsCategoryLValue> asymPos{static_cast<RooAbsCategoryLValue*>(asymCat.Clone(""asym_pos""))};; 2301 std::unique_ptr<RooAbsCategoryLValue> asymNeg{static_cast<RooAbsCategoryLValue*>(asymCat.Clone(""asym_neg""))};; 2302 asymPos->setIndex(1) ;; 2303 asymNeg->setIndex(-1) ;; 2304 RooCustomizer custPos{*this,""pos""};; 2305 RooCustomizer custNeg{*this,""neg""};; 2306 //custPos->setOwning(true) ;; 2307 //custNeg->setOwning(true) ;; 2308 custPos.replaceArg(asymCat,*asymPos) ;; 2309 custNeg.replaceArg(asymCat,*asymNeg) ;; 2310 std::unique_ptr<RooAbsReal> funcPos{static_cast<RooAbsReal*>(custPos.build())};; 2311 std::unique_ptr<RooAbsReal> funcNeg{static_cast<RooAbsReal*>(custNeg.build())};; 2312 ; 2313 // Create projection integral; 2314 RooArgSet *posProjCompList;; 2315 RooArgSet *negProjCompList;; 2316 ; 2317 // Add projDataVars to normalized dependents of projection; 2318 // This is needed only for asymmetries (why?); 2319 RooArgSet depPos(*plotVar,*asymPos) ;; 2320 RooArgSet depNeg(*plotVar,*asymNeg) ;; 2321 depPos.add(projDataVars) ;; 2322 depNeg.add(projDataVars) ;; 2323 ; 2324 const RooAbsReal *posProj = funcPos->createPlotProjection(depPos, &projectedVars, posProjCompList, o.projectionRangeName) ;; 2325 const RooAbsReal *negProj = funcNeg->createPlotProjection(depNeg, &projectedVars, negProjCompList, o.projectionRangeName) ;; 2326 if (!posProj || !negProj) {; 2327 coutE(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName() << "") Unable to create projections, abort"" << std::endl ;; 2328 return frame ;; 2329 }; 2330 ; 2331 // Create a RooFormulaVar representing the asymmetry; 2332 TString asymName(GetName()) ;; 2333 asymName.Append(""_Asym["") ;; 2334 asymName.Append(asymCat.GetName()) ;; 2335 asymName.Append(""]"") ;; 2336 TString asymTitle(asymCat.GetName()) ;; 2337 asymTitle.Append("" Asymmetry of "") ;; 2338 asymTitle.Append(Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:101699,depend,dependents,101699,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['dependents']
Integrability,"edViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:72602,rout,routines,72602,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['rout'],['routines']
Integrability,"edded HTML browser; libGX11 is the low level graphics interface to the X11 system; *libGX11TTF is an add-on library to libGX11 providing TrueType fonts; libHbook is for interface ROOT - HBOOK; libHist is the histogram classes (with accompanying painter library); libHtml is the HTML documentation generation system; libMatrix is the matrix and vector manipulation; libMathCore contains the core mathematics and physics vector classes; libMathMore contains additional functions, interfacing the GSL math library; libMinuit is the MINUIT fitter; libNet contains functionality related to network transfer; libNew is the special global new/delete, provides extra memory checking and interface for shared memory (optional); libPhysics contains the legacy physics classes (TLorentzVector, etc.); libPostscript is the PostScript interface; libProof is the parallel ROOT Facility classes; libPython provides the interface to Python; *libRFIO is the interface to CERN RFIO remote I/O system.; *libRGL is the interface to OpenGL.; libReflex is the runtime type database library used by Cling; libRint is the interactive interface to ROOT (provides command prompt); libRIO provides the functionality to write and read objects to and from ROOT files; libRooFit is the RooFit fitting framework; libRuby is the interface to Ruby; libSpectrum provides functionality for spectral analysis; *libThread is the interface to TThread classes; libTMVA contains the multivariate analysis toolkit; libTree is the TTree object container system; libTreePlayer is the TTree drawing classes; libTreeViewer is the graphical TTree query interface. 1.6.2.1 Library Dependencies. ROOT libraries dependencies. The libraries are designed and organized to minimize dependencies, such that you can load just enough code for the task at hand rather than having to load all libraries or one monolithic chunk. The core library (libCore.so) contains the essentials; it is a part of all ROOT applications. In the Figure 1-2 you see that libCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:19809,interface,interface,19809,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"eded in this case For the options see documentation for following methods FitFCN(IMultiGenFunction & fcn,..) ; Definition at line 656 of file Fitter.h. ◆ SetFitType(). void ROOT::Fit::Fitter::SetFitType ; (; int ; type). inline . Set the type of fit when using an external FCN possible types are : 1 (least-square), 2 (unbinned-likelihood), 3 (binned-likelihood) Note that in case of binned likelihood fit the chi2 will be computed as 2 * MinFCN() Note this function should be called before fitting to have effect on th FitResult. ; Definition at line 481 of file Fitter.h. ◆ SetFunction() [1/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModel1DFunction & ; func, . bool ; useGradient = true . ). Set the fitted function from 1D gradient parametric function interface. ; Definition at line 124 of file Fitter.cxx. ◆ SetFunction() [2/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IGradModelFunction & ; func, . bool ; useGradient = true . ). Set the fitted function (model function) from a parametric gradient function interface. ; Definition at line 110 of file Fitter.cxx. ◆ SetFunction() [3/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModel1DFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a vectorized parametric function interface. ; Set the fitted function from a parametric 1D function interface ; Definition at line 86 of file Fitter.cxx. ◆ SetFunction() [4/4]. void ROOT::Fit::Fitter::SetFunction ; (; const IModelFunction & ; func, . bool ; useGradient = false . ). Set the fitted function (model function) from a parametric function interface. ; Definition at line 59 of file Fitter.cxx. ◆ SetNumberOfFitPoints(). void ROOT::Fit::Fitter::SetNumberOfFitPoints ; (; unsigned int ; npoints). inline . Set number of fit points when using an external FCN function This function can be called after Fit to set the correct number of Ndf in FitResult. ; Definition at line 472 of file Fitter.h. Member Data Documentation. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:35709,interface,interface,35709,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"edef ROOT::Math::IGradientFunctionOneDim IGrad;  ;  Public Types inherited from ROOT::Math::IParametricGradFunctionOneDim; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  . Public Member Functions;  WrappedTF1 (const WrappedTF1 &rhs);  Copy constructor. ;  ;  WrappedTF1 (TF1 &f);  constructor from a TF1 function pointer. ;  ;  ~WrappedTF1 () override;  Destructor (no operations). ;  ; WrappedTF1 & operator= (const WrappedTF1 &rhs);  Assignment operator. ;  ; interface inherited from IFunction; ROOT::Math::IGenFunction * Clone () const override;  Clone the wrapper but not the original function. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricGradFunctionOneDim;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:1806,interface,interface,1806,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"edef ROOT::Math::IParametricGradFunctionMultiDimTempl<T> BaseParamFunc;; 53 typedef typename ROOT::Math::IParametricFunctionMultiDimTempl<T>::BaseFunc BaseFunc;; 54 ; 55 /**; 56 constructor from a function pointer to a TF1; 57 If dim = 0 dimension is taken from TF1::GetNdim().; 58 In case of multi-dimensional function created using directly TF1 object the dimension; 59 returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim; 60 */; 61 WrappedMultiTF1Templ(TF1 &f, unsigned int dim = 0);; 62 ; 63 /**; 64 Destructor (no operations). Function pointer is not owned; 65 */; 66 ~WrappedMultiTF1Templ() override; 67 {; 68 if (fOwnFunc && fFunc) delete fFunc;; 69 }; 70 ; 71 /**; 72 Copy constructor; 73 */; 74 WrappedMultiTF1Templ(const WrappedMultiTF1Templ<T> &rhs);; 75 ; 76 /**; 77 Assignment operator; 78 */; 79 WrappedMultiTF1Templ &operator = (const WrappedMultiTF1Templ<T> &rhs);; 80 ; 81 /** @name interface inherited from IParamFunction */; 82 ; 83 /**; 84 Clone the wrapper but not the original function; 85 */; 86 IMultiGenFunctionTempl<T> *Clone() const override; 87 {; 88 return new WrappedMultiTF1Templ<T>(*this);; 89 }; 90 ; 91 /**; 92 Retrieve the dimension of the function; 93 */; 94 unsigned int NDim() const override; 95 {; 96 return fDim;; 97 }; 98 ; 99 /// get the parameter values (return values from TF1); 100 const double *Parameters() const override; 101 {; 102 //return (fParams.size() > 0) ? &fParams.front() : 0;; 103 return fFunc->GetParameters();; 104 }; 105 ; 106 /// set parameter values (only the cached one in this class,leave unchanges those of TF1); 107 void SetParameters(const double *p) override; 108 {; 109 //std::copy(p,p+fParams.size(),fParams.begin());; 110 fFunc->SetParameters(p);; 111 }; 112 ; 113 /// return number of parameters; 114 unsigned int NPar() const override; 115 {; 116 // return fParams.size();; 117 return fFunc->GetNpar();; 118 }; 119 ; 120 /// return parameter name (from TF1); 121 std::string ParameterName(u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html:2660,interface,interface,2660,doc/master/WrappedMultiTF1_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"edflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextEditDialogs.h 40451 2011-08-04 09:58:12Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGPrintDialog.html:23554,message,messages,23554,root/html532/TGPrintDialog.html,https://root.cern,https://root.cern/root/html532/TGPrintDialog.html,2,['message'],['messages']
Integrability,"edflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddNewIsoBtnButton to add new iso.; TGNumberEntry*fAlpha; TGTextButton*fApplyAlpha; TGTextButton*fApplyPlanes; TGTextButton*fCancelGridBtn""Cancel"" button.; TGL5DDataSet*fDataSetData adapter for TTree.; TGL5DDataSetEditor::TGL5DEditorPrivate*fHidden; TGCheckButton*fHighlightCheckHighlight selected surface.; TGListBox*fIsoListList box to select surface.; TGCheckButton*fLogScale; TGNumberEntry*fNCellsXEntryNumber of cells along X.; TGNumberEntry*fNCellsYEntryNumber of cells along Y.; TGNumberEntry*fNCellsZEntryNumber of cells along Z.; TGNumberEntry*fNewIsoEntrySet the iso-level for new surface.; TGNumberEntry*fNumberOfPlanes; TGTextButton*fOkGridBtn""Apply"" button.; TGL5DPainter*fPainterPainter.; Int_tfSelectedSurface; TGCheckButton*fShowBoxCut; TGCheckButton*fShowCloudShow/hide points for surface.; TGDoubleHSlider*fSlideRange; TGHSlider*fSurfAlphaSliderSlider to control transparency.; TGColorSelect*fSurfColorSelectOpen color dialog.; TGTextButton*fSurfRemoveBtnRemove selected surface.; TGNumberEntryField*fV4MaxEntryRead only widget.; TGNumberEntryField*fV4MinEntryRead only widget.; TGCheckButton*fVisibleCheckShow/hide surface.; TGDoubleHSlider*fXRangeSliderSlid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGL5DDataSetEditor.html:20735,adapter,adapter,20735,root/html528/TGL5DDataSetEditor.html,https://root.cern,https://root.cern/root/html528/TGL5DDataSetEditor.html,6,['adapter'],['adapter']
Integrability,"edition of the Users Guide with a better style, improved index and several new chapters (since 2002).; Bertrand Bellenot has been developing and maintaining the Win32GDK version of ROOT. Bertrand has also many other contributions like the nice RootShower example (since 2001).; Valeriy Onoutchin has been working on several ROOT packages, in particular the graphics sub-system for Windows and the GUI Builder (since 2000).; Gerri Ganis has been working on the authentication procedures to be used by the root daemons and the PROOF system (since 2002).; Maarten Ballintijn (MIT) is one of the main developers of the PROOF sub-system (since 1995).; Valeri Fine (now at BNL) ported ROOT to Windows and contributed largely to the 3-D graphics. He is currently working on the Qt layer of ROOT (since 1995).; Victor Perevoztchikov (BNL) worked on key elements of the I/O system, in particular the improved support for STL collections (1997-2001).; Nenad Buncic developed the HTML documentation generation system and integrated the X3D viewer inside ROOT (1995-1997).; Suzanne Panacek was the author of the first version of this User’s Guide and very active in preparing tutorials and giving lectures about ROOT (1999-2002).; Axel Naumann has been developing further the HTML Reference Guide and helps in porting ROOT under Windows (cygwin/gcc implementation) (since 2000).; Anna Kreshuk has developed the Linear Fitter and Robust Fitter classes as well as many functions in TMath, TF1, TGraph (since 2005).; Richard Maunder has contributed to the GL viewer classes (since 2004).; Timur Pocheptsov has contributed to the GL viewer classes and GL in pad classes (since 2004).; Sergei Linev has developed the XML driver and the TSQLFile classes (since 2003).; Stefan Roiser has been contributing to the reflex and cintex packages (since 2005).; Lorenzo Moneta has been contributing the MathCore, MathMore, Smatrix & Minuit2 packages (since 2005).; Wim Lavrijsen is the author of the PyRoot package (since 2004",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:4587,integrat,integrated,4587,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['integrat'],['integrated']
Integrability,"eds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:11135,message,messages,11135,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,15,['message'],['messages']
Integrability,"ee *MyTree;f.GetObject(""T"",MyTree);; To show the different Draw options, we create a canvas with four sub-pads. We will use one sub-pad for each Draw command.; root[] TCanvas *myCanvas = new TCanvas(); root[] myCanvas->Divide(2,2); We activate the first pad with the TCanvas::cd statement:; root[] myCanvas->cd(1); We then draw the variable Cost:; root[] MyTree->Draw(""C; As you can see, the last call TTree::Draw has only one parameter. It is a string containing the leaf name. A histogram is automatically created as a result of a TTree::Draw. The style of the histogram is inherited from the TTree attributes and the current style (gStyle) is ignored. The TTree gets its attributes from the current TStyle at the time it was created. You can call the method TTree::UseCurrentStyle to change to the current style rather than the TTree style. (See gStyle; see also “Graphics and the Graphical User Interface” ); In the next segment, we activate the second pad and draw a scatter plot variables:; root[] myCanvas->cd(2); root[] MyTree->Draw(""Cost:Age""); This signature still only has one parameter, but it now has two dimensions separated by a colon (""x:y""). The item to be plotted can be an expression not just a simple variable. In general, this parameter is a string that contains up to three expressions, one for each dimension, separated by a colon (“e1:e2:e3”). A list of examples follows this introduction.; 12.20.1 Using Selection with TTree:Draw; Change the active pad to 3, and add a selection to the list of parameters of the draw command.; root[] myCanvas->cd(3); root[] MyTree->Draw(""Cost:Age"",""Nation == ""FR""""); This will draw the Costvs. Age for the entries where the nation is equal to “FR”. You can use any C++ operator, and some functions defined in TFormula, in the selection parameter. The value of the selection is used as a weight when filling the histogram. If the expression includes only Boolean operations as in the example above, the result is 0 or 1. If the result is 0, th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:586615,Interface,Interface,586615,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Interface'],['Interface']
Integrability,"ee Using regular expressions in Perl in; perlretut for further explanation of the g and c modifiers.; For more detail see: http://perldoc.perl.org/perlre.html#Modifiers. TString GetModifiers() const; Return PCRE modifier options as string.; For meaning of mods see ParseMods(). void Compile(); Compile the fPattern. void Optimize(); Send the pattern through the optimizer. Int_t ReplaceSubs(const TString& s, TString& final, const TString& replacePattern, Int_t* ovec, Int_t nmatch) const; Returns the number of expanded '$' constructs. Int_t MatchInternal(const TString& s, Int_t start, Int_t nMaxMatch, TArrayI* pos = 0) const; Perform the actual matching - protected method. Int_t Match(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10, TArrayI* pos = 0); The number of matches is returned, this equals the full match +; sub-pattern matches.; nMaxMatch is the maximum allowed number of matches.; pos contains the string indices of the matches. Its usage is; shown in the routine MatchS.; For meaning of mods see ParseMods(). TObjArray * MatchS(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Returns a TObjArray of matched substrings as TObjString's.; The TObjArray is owner of the objects and must be deleted by the user.; The first entry is the full matched pattern, followed by the subpatterns.; If a pattern was not matched, it will return an empty substring:. TObjArray *subStrL = TPRegexp(""(a|(z))(bc)"").MatchS(""abc"");; for (Int_t i = 0; i < subStrL->GetLast()+1; i++) {; const TString subStr = ((TObjString *)subStrL->At(i))->GetString();; std::cout << ""\"""" << subStr << ""\"" "";; }; std::cout << subStr << std::endl;. produces: ""abc"" ""a"" """" ""bc""; For meaning of mods see ParseMods(). Int_t SubstituteInternal(TString& s, const TString& replace, Int_t start, Int_t nMaxMatch0, Bool_t doDollarSubst) const; Perform pattern substitution with optional back-ref replacement; - protected method. Int_t Substitute(TString& s, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPRegexp.html:4645,rout,routine,4645,root/html602/TPRegexp.html,https://root.cern,https://root.cern/root/html602/TPRegexp.html,4,['rout'],['routine']
Integrability,"ee class ;  CTBtreeIterIterator of btree ;  CTBufferBuffer base class used for serializing objects ;  CTBuffer3DGeneric 3D primitive description class ;  CTBuffer3DCutTubeCut tube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres ;  CTBuffer3DTubeComplete tube description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTubeSegTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferJSONClass for serializing object into JavaScript Object Notation (JSON) format ;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements or read data from SQL tables ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containing TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:130437,interface,interface,130437,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['interface'],['interface']
Integrability,"eeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranContDist (for one-dimension) or TUnuranMultiContDist (multi-dimension) ;  CTUnuranContDistTUnuranContDist class describing one dimensional continuous distribution ;  CTUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution ;  CTUnuranEmpDistTUnuranEmpDist class for describing empiral distributions ;  CTUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions ;  CTUnuranSamplerTUnuranSampler class class implementing the ROOT::Math::DistSampler interface using the UNU.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:161913,interface,interface,161913,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['interface'],['interface']
Integrability,"eeded in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a wrapper around TFile::Cp.; *** Please use TProofMgr::UploadFiles. Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:87427,message,messages,87427,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['message'],['messages']
Integrability,"eeded in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* dataset, TList* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:76642,message,messages,76642,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['message'],['messages']
Integrability,"eeds to use the ROOT::Fit::ParameterSetting class. This example code will set the lower/upper bounds for the first parameter and a lower bound for the second parameter; fitter.SetFunction( fitFunction, false);; fitter.Config().ParSettings(0).SetLimits(0,1.E6);; fitter.Config().ParSettings(2).SetLowerLimit(0);; Note that a ROOT::Fit::ParameterSettings objects exists for each fit parameter and it created by the ROOT::Fit::FitConfig class, after the model function has been set in the Fitter. Only when the function is set, the number of parameter is known and automatically the FitConfig creates the corresponding ParameterSetting objects.; When fitting, different minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (library libMinuit). Old version of Minuit, based on the TMinuit class. The list of possible algorithms are:.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:201558,interface,interface,201558,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"een space needed to display a multi-line,; justified string of text. Records all the measurements that were done; to determine to size and positioning of the individual lines of text;; this information can be used by the TGTextLayout::DrawText() procedure; to display the text quickly (without remeasuring it). This procedure is useful for simple widgets that want to display; single-font, multi-line text and want TGFont to handle the details. The return value is a TGTextLayout token that holds the measurement; information for the given string. The token is only valid for the given; string. If the string is freed, the token is no longer valid and must; also be deleted. The dimensions of the screen area needed to display the text are stored; in *width and *height. string -- String whose dimensions are to be computed.; numChars -- Number of characters to consider from string, or < 0 for; strlen().; wrapLength -- Longest permissible line length, in pixels. <= 0 means no; automatic wrapping: just let lines get as long as needed.; justify -- How to justify lines.; flags -- Flag bits OR-ed together. kTextIgnoreTabs means that tab; characters should not be expanded. kTextIgnoreNewlines; means that newline characters should not cause a line break.; width -- Filled with width of string.; height -- Filled with height of string. LayoutChunk_t * NewChunk(TGTextLayout* layout, int* maxPtr, const char* start, int numChars, int curX, int newX, int y) const; Helper function for ComputeTextLayout(). Encapsulates a measured set of; characters in a chunk that can be quickly drawn. Returns a pointer to the new chunk in the text layout. The text layout is; reallocated to hold more chunks as necessary. Currently, ComputeTextLayout() stores contiguous ranges of ""normal""; characters in a chunk, along with individual tab and newline chars in; their own chunks. All characters in the text layout are accounted for. void DrawCharsExp(Drawable_t dst, GContext_t gc, const char* source, Int_t numChars",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFont.html:12492,wrap,wrapping,12492,root/html528/TGFont.html,https://root.cern,https://root.cern/root/html528/TGFont.html,10,['wrap'],['wrapping']
Integrability,"eep track of list names as assigned by addResult. ;  . #include <RooFit/Detail/CodeSquashContext.h>; Constructor & Destructor Documentation. ◆ CodeSquashContext(). RooFit::Detail::CodeSquashContext::CodeSquashContext ; (; std::map< RooFit::Detail::DataKey, std::size_t > const & ; outputSizes, . std::vector< double > & ; xlarr, . Experimental::RooFuncWrapper & ; wrapper . ). Definition at line 27 of file CodeSquashContext.cxx. Member Function Documentation. ◆ addResult() [1/3]. void RooFit::Detail::CodeSquashContext::addResult ; (; const char * ; key, . std::string const & ; value . ). Adds (or overwrites) the string representing the result of a node. ; Parameters. keyThe name of the node to add the result for. ; valueThe new name to assign/overwrite. . Definition at line 36 of file CodeSquashContext.cxx. ◆ addResult() [2/3]. void RooFit::Detail::CodeSquashContext::addResult ; (; RooAbsArg const * ; in, . std::string const & ; valueToSave . ). A function to save an expression that includes/depends on the result of the input node. ; Parameters. inThe node on which the valueToSave depends on/belongs to. ; valueToSaveThe actual string value to save as a temporary. . Definition at line 199 of file CodeSquashContext.cxx. ◆ addResult() [3/3]. void RooFit::Detail::CodeSquashContext::addResult ; (; TNamed const * ; key, . std::string const & ; value . ). private . Definition at line 43 of file CodeSquashContext.cxx. ◆ addToCodeBody() [1/2]. void RooFit::Detail::CodeSquashContext::addToCodeBody ; (; RooAbsArg const * ; klass, . std::string const & ; in . ). Adds the input string to the squashed code body. ; If a class implements a translate function that wants to emit something to the squashed code body, it must call this function with the code it wants to emit. In case of loops, automatically determines if code needs to be stored inside or outside loop scope. Parameters. klassThe class requesting this addition, usually 'this'. ; inString to add to the squashed code. . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:6186,depend,depends,6186,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['depend'],['depends']
Integrability,"eeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interface for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:5741,interface,interface,5741,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['interface'],['interface']
Integrability,"ef mode of html table. ; Definition at line 384 of file TGHtml.cxx. ◆ SizeAndLink(). void TGHtml::SizeAndLink ; (; TGFrame * ; frame, . TGHtmlInput * ; pElem . ). protected . 'frame' is the child widget that is used to implement an input element. ; Query the widget for its size and put that information in the pElem structure that represents the input. ; Definition at line 192 of file TGHtmlForm.cxx. ◆ Sizer(). void TGHtml::Sizer ; (; ). protected . Compute the size of all elements in the widget. ; Assume that a style has already been assigned to all elements.; Some of the elements might have already been sized. Refer to the fLastSized and only compute sizes for elements that follow this one. If fLastSized is 0, then size everything.; This routine only computes the sizes of individual elements. The size of aggregate elements (like tables) are computed separately.; The HTML_Visible flag is also set on every element that results in ink on the page.; This routine may invoke a callback procedure which could delete the HTML widget. ; Definition at line 1076 of file TGHtmlSizer.cxx. ◆ StringHW(). void TGHtml::StringHW ; (; const char * ; str, . int * ; h, . int * ; w . ). protected . Return the height and width of string. ; Definition at line 77 of file TGHtmlTable.cxx. ◆ SubmitClicked(). void TGHtml::SubmitClicked ; (; const char * ; val). virtual . Emit SubmitClicked() signal. ; Definition at line 1339 of file TGHtml.cxx. ◆ TableBgndImage(). void TGHtml::TableBgndImage ; (; TGHtmlElement * ; p). protected . Set background picture of a html table. ; Definition at line 1022 of file TGHtmlSizer.cxx. ◆ TableDimensions(). TGHtmlElement * TGHtml::TableDimensions ; (; TGHtmlTable * ; pStart, . int ; lineWidth . ). pStart points to a <table>. ; Compute the number of columns, the minimum and maximum size for each column and the overall minimum and maximum size for this table and store these value in the pStart structure. Return a pointer to the </table> element, or to NULL if the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:86520,rout,routine,86520,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"ef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:58886,interface,interface,58886,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['interface'],['interface']
Integrability,efCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*_dataPointer to original input dataset; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_evalCarry! carry of Kahan sum in evaluatePartition; Int_t_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**_mpfeArray! Array of paral,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:35461,integrat,integration,35461,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,2,['integrat'],['integration']
Integrability,efCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:42990,integrat,integration,42990,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['integrat'],['integration']
Integrability,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1757,Integrat,IntegratorOneDim,1757,root/html602/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html,22,['Integrat'],"['IntegrationOneDim', 'IntegratorOneDim', 'IntegratorOneDimIntegratorOneDim', 'IntegratorOneDimOptions', 'IntegratorOneDimOptionsOptions']"
Integrability,"efault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockableFrame.html:21136,message,messages,21136,root/html528/TGDockableFrame.html,https://root.cern,https://root.cern/root/html528/TGDockableFrame.html,6,['message'],['messages']
Integrability,"efault is NOT extended.Definition Fitter.h:221; ROOT::Fit::Fitter::DoLinearFitbool DoLinearFit()linear least square fitDefinition Fitter.cxx:513; ROOT::Fit::Fitter::DoInitMinimizerbool DoInitMinimizer()Definition Fitter.cxx:692; ROOT::Fit::Fitter::GetNCallsFromFCNint GetNCallsFromFCN()Definition Fitter.cxx:870; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::BasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) ...Definition FitMethodFunction.h:38; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IParametricFunctionMultiDimTempl< double >; ROOT::Math::IParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is ...Definition IParamFunction.h:161; ROOT::Math::IParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition ...Definition IParamFunction.h:227; ROOT::Math::IParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to...Definition IParamFunction.h:330; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::WrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-...Definition WrappedFunction.h:143; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlobalFunc.cxx:751; MathNamespace for new Math classes and functions.; ROOT::Math::FitMethodFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:41960,interface,interface,41960,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['interface'],['interface']
Integrability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCloner.h 39059 2011-04-30 20:28:06Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCloner.html:2107,message,message,2107,root/html530/TTreeCloner.html,https://root.cern,https://root.cern/root/html530/TTreeCloner.html,1,['message'],['message']
Integrability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCloner.h 39059 2011-04-30 20:28:06Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCloner.html:2107,message,message,2107,root/html532/TTreeCloner.html,https://root.cern,https://root.cern/root/html532/TTreeCloner.html,2,['message'],['message']
Integrability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(const TTreeCloner& ). TTreeCloner & operator=(const TTreeCloner& ). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:05; This page has been a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCloner.html:2202,message,message,2202,root/html534/TTreeCloner.html,https://root.cern,https://root.cern/root/html534/TTreeCloner.html,2,['message'],['message']
Integrability,"eference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer allocated. To perform a deep copy use; 88 * the static Copy method of the TCuda architecture class.; 89 *; 90 * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; 91 * transferred to the device. This stream can be accessed through the; 92 * GetComputeStream member function and used to synchronize computations.; 93 *; 94 * The TCudaMatrix class also holds static references to CUDA resources.; 95 * Those are the cublas handle, a buffer of curand states for the generation; 96 * of random numbers as well as a vector containing ones, which is used for; 97 * summing column matrices using matrix-vector multiplication. The class also; 98 * has a static buffer for returning results from the device.; 99 *; 100 */; 101template<typename AFloat>; 102class TCudaMatrix; 103{; 104public:; 105 ; 106private:; 107 ; 108 static size_t fInstances; ///< Current number of matrix instances.; 109 static cublasHandle_t fCublasHandle;; 110 static AFloat * fDeviceReturn; ///< Buffer for kernel return values.; 111 static AFloat * fOnes; ///< Vector used for summations of columns.; 112 static size_t fNOnes; ///< Current length of the one vector.; 113 static curandState_t * fCurandStates;; 114 static size_t fNCurandStates;; 115 ; 116 ; 117 size_t fNRows;; 118 size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:3676,synchroniz,synchronize,3676,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['synchroniz'],['synchronize']
Integrability,"eferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/metacling/src/TCling.h>. Inheritance diagram for TCling:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ SpecialObjectLookupCtx_t. typedef void* TCling::SpecialObjectLookupCtx_t. private . Definition at line 151 of file TCling.h. ◆ SpecialObjectMap_t. typedef std::unordered_map<std::string, TObject*> TCling::SpecialObjectMap_t. private . Definition at line 152 of file TCling.h. Constructor & Destructor Documentation. ◆ ~TCling(). TCling::~TCling ; (; ). virtual . Destroy the interpreter interface. ; Definition at line 1618 of file TCling.cxx. ◆ TCling() [1/3]. TCling::TCling ; (; const char * ; name, . const char * ; title, . const char *const ; argv[], . void * ; interpLibHandle . ). Initialize the cling interpreter interface. ; Parameters. namename for TInterpreter ; titletitle for TInterpreter ; argv- array of arguments passed to the cling::Interpreter constructor e.g. -DFOO=bar. The last element of the array must be nullptr. . Definition at line 1337 of file TCling.cxx. ◆ TCling() [2/3]. TCling::TCling ; (; ). private . ◆ TCling() [3/3]. TCling::TCling ; (; const TCling & ; ). privatedelete . Member Function Documentation. ◆ AddAvailableIndentifiers(). void TCling::AddAvailableIndentifiers ; (; TSeqCollection & ; Idents). finalvirtual . Implements TInterpreter.; Definition at line 2358 of file TCling.cxx. ◆ AddFriendToClass(). void TCling::AddFriendToClass ; (; clang::FunctionDecl * ; function, . clang::CXXRecordDecl * ; klass . ); const. private . Inject f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:52881,interface,interface,52881,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['interface'],['interface']
Integrability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooAdaptiveGaussKronrodIntegrator1D::DomainType_domainType; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_maxSegMaximum number of segments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:8293,integrat,integrator,8293,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,2,['integrat'],['integrator']
Integrability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooAdaptiveGaussKronrodIntegrator1D::DomainType_domainType; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_maxSegMaximum number of segments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:8348,integrat,integrator,8348,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,4,['integrat'],['integrator']
Integrability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heavyside*fHeavysidethe Heavyside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; Double_tfIntervalSumsum of heights of bins in the interval; Bool_tfIsHistStrictwhether the specified confidence level is a floor; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting from the first; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heavyside) product; THnSparse*fSparseHistthe binned Markov Chain data; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCInterval(const char* name). MCMCInterval(const char* name, const RooArgSet& parameters, RooStats::MarkovChain& chain). ~MCMCInterval(); destructor. Bool_t IsInInterval(const RooArgSet& point) const. void SetConfidenceLevel(Double_t cl). void SetAxes(R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCInterval.html:10360,integrat,integrating,10360,root/html526/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCInterval.html,1,['integrat'],['integrating']
Integrability,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:80976,integrat,integration,80976,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,12,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Loop over components for plot sampling hints and merge them if there are multiple. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooAddPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. const RooArgSet& getCoefNormalization() const; { return _refCoefNorm ; }. const char* getCoefRange() const; { return _refCoefRangeName?RooNameReg::str(_refCoefRangeName):"""" ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Jun 2 15:27:44 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAddPdf.html:53281,integrat,integration,53281,root/html604/RooAddPdf.html,https://root.cern,https://root.cern/root/html604/RooAddPdf.html,2,['integrat'],['integration']
Integrability,"efficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage() const; provide help message. EKernel GetKernel( void ); helper functions to convert enum types to UInt_t and back. { return fKernel; }. UInt_t KernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; { return UInt_t(ker); }. EKernel UIntToKernel(UInt_t iker). UInt_t TargetSelectionToUInt(TMVA::ETargetSelection ts) const; { return UInt_t(ts); }. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id: MethodPDEFoam.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodPDEFoam.html:25177,message,message,25177,root/html532/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodPDEFoam.html,2,['message'],['message']
Integrability,"efficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage() const; provide help message. EKernel GetKernel( void ); helper functions to convert enum types to UInt_t and back. { return fKernel; }. UInt_t KernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; { return UInt_t(ker); }. EKernel UIntToKernel(UInt_t iker). UInt_t TargetSelectionToUInt(TMVA::ETargetSelection ts) const; { return UInt_t(ts); }. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id: MethodPDEFoam.h 40027 2011-06-27 17:12:07Z stelzer $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:25177,message,message,25177,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,1,['message'],['message']
Integrability,"efficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:45920,integrat,integration,45920,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,18,['integrat'],['integration']
Integrability,"efficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:45163,integrat,integration,45163,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['integrat'],['integration']
Integrability,"efined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:75402,depend,depending,75402,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['depend'],['depending']
Integrability,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:70628,integrat,integration,70628,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['integrat'],['integration']
Integrability,"efining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply their own gradient calculator (e.g. analytical derivatives), they need to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; Starting values of parameters and uncertainties can be provided to M by the user via std::vector\(<\)double\(>\) vector containers. Any interaction with the parameters before minimization (fix, release, limits, etc.) is not possible then.; Optionally if the user wants to provide starting values for the covariance, they have to provide the values in a std::vector\(<\)double\(>\) vector container stored in upper triangular packed storage format (see [api:covariance]).; 4.2.2 MnUserParameters; A more functional interface to the user parameters is provided through M via the class MnUserParameters. The user can add parameters giving them a name and starting values. More information can be found in [api:parameters].; 4.2.3 MnUserCovariance; The user can (optionally) provide a covariance matrix as input using the class MnUserCovariance. More information can be found in [api:covariance].; 4.2.4 MnUserParameterState; The MnUserParameterState contains the parameters (MnUserParameters) and covariance (MnUserCovariance). The MnUserParameterState h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:31710,interface,interface,31710,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['interface'],['interface']
Integrability,"efinition RooAbsReal.cxx:455; RooAbsReal::plotAsymOnvirtual RooPlot * plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) constDefinition RooAbsReal.cxx:2199; RooAbsReal::operator==bool operator==(double value) constEquality operator comparing to a double.Definition RooAbsReal.cxx:250; RooAbsReal::evalErrorLoggingModestatic ErrorLoggingMode evalErrorLoggingMode()Return current evaluation error logging mode.Definition RooAbsReal.cxx:4302; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::isValidRealvirtual bool isValidReal(double, bool printError=false) constInterface function to check if given value is a valid value for this object. Returns true unless over...Definition RooAbsReal.h:447; RooAbsReal::setIntegratorConfigvoid setIntegratorConfig()Remove the specialized numeric integration configuration associated with this object.Definition RooAbsReal.cxx:3346; RooAbsReal::printValuevoid printValue(std::ostream &os) const overridePrint object value.Definition RooAbsReal.cxx:445; RooAbsReal::isIdenticalbool isIdentical(const RooAbsArg &other, bool assumeSameType=false) const overrideDefinition RooAbsReal.cxx:270; RooAbsReal::createProfilevirtual RooFit::OwningPtr< RooAbsReal > createProfile(const RooArgSet &paramsOfInterest)Create a RooProfileLL object that eliminates all nuisance parameters in the present function.Definition RooAbsReal.cxx:471; RooAbsReal::_hideOffsetstatic bool _hideOffsetOffset hiding flag.Definition RooAbsReal.h:546; RooAbsReal::attachToVStorevoid attachToVStore(RooVectorDataStore &vstore) overrideDefinition RooAbsReal.cxx:3012; RooAbsReal::copyCachevoid copyCache(const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) overrideCopy the cached value of another RooAbsArg to our cache.Definition RooAbsReal.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:224123,integrat,integration,224123,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integration']
Integrability,"efinition TBuffer.h:54; TBuffer::SetReadModevoid SetReadMode()Set buffer in read mode.Definition TBuffer.cxx:302; TBuffer::WriteClassBuffervirtual Int_t WriteClassBuffer(const TClass *cl, void *pointer)=0; TBuffer::fVersionInt_t fVersionDefinition TBuffer.h:49; TBuffer::LengthInt_t Length() constDefinition TBuffer.h:100; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TProcessID::GetPIDstatic TProcessID * GetPID()static: returns pointer to current TProcessIDDefinition TProcessID.cxx:343; TStorage::ReAllocCharstatic char * ReAllocChar(char *vp, size_t size, size_t oldsize)Reallocate (i.e.Definition TStorage.cxx:228; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; lTLine lDefinition textangle.C:4. corebasesrcTBuffer.cxx. ROOT master - Reference G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:21337,message,message,21337,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['message'],['message']
Integrability,"efinition TClass.cxx:2319; TClass::fStreamerTClassStreamer * fStreamerDefinition TClass.h:226; TClass::SetDirectoryAutoAddvoid SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc)Install a new wrapper around the directory auto add function.Definition TClass.cxx:7028; TClass::NewArrayvoid * NewArray(Long_t nElements, ENewType defConstructor=kClassNew) constReturn a pointer to a newly allocated array of objects of this class.Definition TClass.cxx:5193; TClass::fNoInfoOrEmuOrFwdDeclNameRegistrystatic TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistryDefinition TClass.h:328; TClass::fFuncTemplateTListOfFunctionTemplates * fFuncTemplateDefinition TClass.h:206; TClass::fStreamerFuncClassStreamerFunc_t fStreamerFuncDefinition TClass.h:241; TClass::AdoptReferenceProxyvoid AdoptReferenceProxy(TVirtualRefProxy *proxy)Adopt the Reference proxy pointer to indicate that this class represents a reference.Definition TClass.cxx:6685; TClass::GetClassMethodTMethod * GetClassMethod(Longptr_t faddr)Look for a method in this class that has the interface function address faddr.Definition TClass.cxx:4483; TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5684; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2010; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2886; TClass::Drawvoid Draw(Option_t *option="""") overrideDraw detailed class inheritance structure.Definition TClass.cxx:2487; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6703; TClass::ResetInstanceCountvoid ResetInstance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:309846,interface,interface,309846,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['interface'],['interface']
Integrability,"efinition TClass.cxx:2386; TClass::fStreamerTClassStreamer * fStreamerDefinition TClass.h:226; TClass::SetDirectoryAutoAddvoid SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc)Install a new wrapper around the directory auto add function.Definition TClass.cxx:7095; TClass::NewArrayvoid * NewArray(Long_t nElements, ENewType defConstructor=kClassNew) constReturn a pointer to a newly allocated array of objects of this class.Definition TClass.cxx:5260; TClass::fNoInfoOrEmuOrFwdDeclNameRegistrystatic TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistryDefinition TClass.h:328; TClass::fFuncTemplateTListOfFunctionTemplates * fFuncTemplateDefinition TClass.h:206; TClass::fStreamerFuncClassStreamerFunc_t fStreamerFuncDefinition TClass.h:241; TClass::AdoptReferenceProxyvoid AdoptReferenceProxy(TVirtualRefProxy *proxy)Adopt the Reference proxy pointer to indicate that this class represents a reference.Definition TClass.cxx:6752; TClass::GetClassMethodTMethod * GetClassMethod(Longptr_t faddr)Look for a method in this class that has the interface function address faddr.Definition TClass.cxx:4550; TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5751; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2077; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2953; TClass::Drawvoid Draw(Option_t *option="""") overrideDraw detailed class inheritance structure.Definition TClass.cxx:2554; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6770; TClass::ResetInstanceCountvoid ResetInstance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:312484,interface,interface,312484,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['interface'],['interface']
Integrability,"efinition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:54598,message,message,54598,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,1,['message'],['message']
Integrability,"efinition TInterpreter.h:425; TInterpreter::ClassInfo_IsValidvirtual Bool_t ClassInfo_IsValid(ClassInfo_t *) constDefinition TInterpreter.h:421; TInterpreter::ClassInfo_Deletevirtual void ClassInfo_Delete(ClassInfo_t *) constDefinition TInterpreter.h:401; TInterpreter::ClassInfo_IsBasevirtual Bool_t ClassInfo_IsBase(ClassInfo_t *, const char *) constDefinition TInterpreter.h:416; TInterpreter::ClassInfo_FullNamevirtual const char * ClassInfo_FullName(ClassInfo_t *) constDefinition TInterpreter.h:433; TInterpreter::AutoLoadvirtual Int_t AutoLoad(const char *classname, Bool_t knowDictNotLoaded=kFALSE)=0; TInterpreter::ClassInfo_Factoryvirtual ClassInfo_t * ClassInfo_Factory(Bool_t=kTRUE) const =0; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open f...Definition TSelectorList.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TSelector::IsStandardDrawstatic bool IsStandardDraw(const char *selec)Find out if this is a standard selection used for Draw actions (either TSelectorDraw,...Definition TSelector.cxx:237; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::ProcessFillvirtual void ProcessFill(Long64_t)This method is called for all selected entries.Definition TSelector.cxx:330; TSelector::EAbortEAbortDefinition TSelector.h:34; TSelector::kAbortFile@ kAbortFileDefinition TSelector.h:34; TSelector::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:18717,message,message,18717,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['message'],['message']
Integrability,"efinition TMultiGraph.cxx:1107; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPickerStackGuardDefinition TVirtualPad.h:297; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPluginHandler::LoadPluginInt_t LoadPlugin()Load the plugin library for this handler.Definition TPluginManager.cxx:293; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:67863,message,message,67863,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['message'],['message']
Integrability,"efinition TObject.cxx:213; TObject::UseCurrentStylevirtual void UseCurrentStyle()Set current style settings in this object This function is called when either TCanvas::UseCurrentStyl...Definition TObject.cxx:807; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Resizevoid Resize(Ssiz_t n)Resize the string. Truncate or add blanks as necessary.Definition TString.cxx:1152; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:71381,message,message,71381,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['message'],['message']
Integrability,"efinition at line 3362 of file TGWin32.cxx. ◆ UpdateMarkerStyle(). void TGWin32::UpdateMarkerStyle ; (; ). protected . Definition at line 3418 of file TGWin32.cxx. ◆ UpdateWindow(). void TGWin32::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; mode : (1) update (0) sync; Synchronise client and server once (not permanent). Copy the pixmap gCws->drawing on the window gCws->window if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 4225 of file TGWin32.cxx. ◆ Warp(). void TGWin32::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; ix : New X coordinate of pointer iy : New Y coordinate of pointer Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 4241 of file TGWin32.cxx. ◆ WMDeleteNotify(). void TGWin32::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tell WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 6408 of file TGWin32.cxx. ◆ WriteGIF(). Int_t TGWin32::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Reimplemented from TVirtualX.; Definition at line 4388 of file TGWin32.cxx. ◆ WritePixmap(). void TGWin32::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Write the pixmap wid in the bitmap file pxname. ; wid : Pixmap address w,h : Width and height of the pixmap. lenname : pixmap name length pxname : pixmap name ; Reimplemented from TVirtualX.; Definition at line 4265 of file TGWin32.cxx. ◆ XorRegion(). void TGWin32::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculate the difference between the union and intersection of two regions. ; Reimplemented from TVirtualX.; Definition at line 7186 of file TGWin32.cxx. Member Data Documentation. ◆ fAlign. FT_Vector TGWin32",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:121381,message,message,121381,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['message'],['message']
Integrability,"efinition at line 48 of file TGLabel.h. ◆ fgDefaultGC. const TGGC * TGLabel::fgDefaultGC = nullptr. staticprotected . Definition at line 49 of file TGLabel.h. ◆ fHasOwnFont. Bool_t TGLabel::fHasOwnFont. protected . kTRUE - font defined locally, kFALSE - globally ; Definition at line 42 of file TGLabel.h. ◆ fMBottom. Int_t TGLabel::fMBottom. protected . margin bottom ; Definition at line 33 of file TGLabel.h. ◆ fMLeft. Int_t TGLabel::fMLeft. protected . margin left ; Definition at line 30 of file TGLabel.h. ◆ fMRight. Int_t TGLabel::fMRight. protected . margin right ; Definition at line 31 of file TGLabel.h. ◆ fMTop. Int_t TGLabel::fMTop. protected . margin top ; Definition at line 32 of file TGLabel.h. ◆ fNormGC. GContext_t TGLabel::fNormGC. protected . graphics context used for drawing label ; Definition at line 39 of file TGLabel.h. ◆ fText. TGString* TGLabel::fText. protected . label text ; Definition at line 27 of file TGLabel.h. ◆ fTextChanged. Bool_t TGLabel::fTextChanged. protected . has text changed ; Definition at line 38 of file TGLabel.h. ◆ fTFlags. Int_t TGLabel::fTFlags. protected . text flags (see TGFont.h ETextLayoutFlags) ; Definition at line 37 of file TGLabel.h. ◆ fTHeight. UInt_t TGLabel::fTHeight. protected . text height ; Definition at line 29 of file TGLabel.h. ◆ fTLayout. TGTextLayout* TGLabel::fTLayout. protected . text layout ; Definition at line 41 of file TGLabel.h. ◆ fTMode. Int_t TGLabel::fTMode. protected . text alignment ; Definition at line 34 of file TGLabel.h. ◆ fTWidth. UInt_t TGLabel::fTWidth. protected . text width ; Definition at line 28 of file TGLabel.h. ◆ fWrapLength. Int_t TGLabel::fWrapLength. protected . wrap length ; Definition at line 36 of file TGLabel.h. Libraries for TGLabel:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLabel.h; gui/gui/src/TGLabel.cxx. TGLabel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLabel.html:41006,wrap,wrap,41006,doc/master/classTGLabel.html,https://root.cern,https://root.cern/doc/master/classTGLabel.html,1,['wrap'],['wrap']
Integrability,"efinition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:172984,depend,depends,172984,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['depend'],['depends']
Integrability,"efinition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:22510,interface,interface,22510,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['interface'],['interface']
Integrability,"efinition rootcling_impl.cxx:2583; GetFullArrayLengthsize_t GetFullArrayLength(const clang::ConstantArrayType *arrayType)Definition rootcling_impl.cxx:417; gOptSplitstatic llvm::cl::opt< bool > gOptSplit(""split"", llvm::cl::desc(""Split the dictionary into two parts: one containing the IO (ClassDef)\; information and another the interactivity support.""), llvm::cl::cat(gRootclingOptions)); ProcessAndAppendIfNotTherebool ProcessAndAppendIfNotThere(const std::string &el, std::list< std::string > &el_list, std::unordered_set< std::string > &el_set)Separate multiline strings.Definition rootcling_impl.cxx:2415; gOptNoGlobalUsingStdstatic llvm::cl::opt< bool > gOptNoGlobalUsingStd(""noGlobalUsingStd"", llvm::cl::desc(""Do not declare {using namespace std} in dictionary global scope.""), llvm::cl::cat(gRootclingOptions)); gDriverConfigconst ROOT::Internal::RootCling::DriverConfig * gDriverConfigDefinition rootcling_impl.cxx:129; gOptModuleDependenciesstatic llvm::cl::list< std::string > gOptModuleDependencies(""m"", llvm::cl::desc(""The list of dependent modules of the dictionary.""), llvm::cl::cat(gRootclingOptions)); gBareClingSubcommandstatic llvm::cl::SubCommand gBareClingSubcommand(""bare-cling"", ""Call directly cling and exit.""); gOptInterpreterOnlystatic llvm::cl::opt< bool > gOptInterpreterOnly(""interpreteronly"", llvm::cl::desc(""Generate minimal dictionary for interactivity (without IO information).""), llvm::cl::cat(gRootclingOptions)); WriteArrayDimensionsvoid WriteArrayDimensions(const clang::QualType &type, std::ostream &dictStream)Write ""[0]"" for all but the 1st dimension.Definition rootcling_impl.cxx:1165; gOptReflexstatic llvm::cl::opt< bool > gOptReflex(""reflex"", llvm::cl::desc(""Behave internally like genreflex.""), llvm::cl::cat(gRootclingOptions)); GetMostExternalEnclosingClassNamevoid GetMostExternalEnclosingClassName(const clang::DeclContext &theContext, std::string &ctxtName, const cling::Interpreter &interpreter, bool treatParent=true)Extract the proper autoload key",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:290323,depend,dependent,290323,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['depend'],['dependent']
Integrability,"egTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferIODirect subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes ;  CTBufferJSONClass for serializing object to and from JavaScript Object Notation (JSON) format ;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements or read data from SQL tables ;  CTBufferTextBase class for text-based streamers like TBufferJSON or TBufferXML Special actions list will use methods, introduced in this class ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containing TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:134289,interface,interfaced,134289,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['interface'],['interfaced']
Integrability,"egTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferIODirect subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes ;  CTBufferJSONClass for serializing object to and from JavaScript Object Notation (JSON) format ;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements or read data from SQL tables ;  CTBufferTextBase class for text-based streamers like TBufferJSON or TBufferXML Special actions list will use methods, introduced in this class ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containing TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and thei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:138002,interface,interfaced,138002,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interfaced']
Integrability,"egin(TTree*);; SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; Notify -> bool h1analysisProxy_Notify();; Process -> bool h1analysisProxy_Process(Long64_t);; SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; Terminate -> void h1analysisProxy_Terminate();. If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist it is included before the declaration of the proxy class. This can be used in particular to insure that the include files needed by the macro file are properly loaded.; The default histogram is accessible via the variable named 'htemp'.; If the library of the classes describing the data in the branch is loaded, the skeleton will add the needed include statements and give the ability to access the object stored in the branches.; To draw px using the file `hsimple.root (generated by the hsimple.C tutorial), we need a file named hsimple.cxx:; double hsimple() {; return px;; }; hsimpleDefinition hsimple.py:1; MakeProxy can then be used indirectly via the TTree::Draw interface as follow: new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");; Drawth1 Draw(); A more complete example is available in the tutorials directory: h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C which reimplement the selector found in h1analysis.C ; Implements TVirtualTreePlayer.; Definition at line 1925 of file TTreePlayer.cxx. ◆ MakeReader(). Int_t TTreePlayer::MakeReader ; (; const char * ; classname, . Option_t * ; option . ). overridevirtual . Generate skeleton selector class for this tree. ; The following files are produced: classname.h and classname.C. If classname is 0, the selector will be called ""nameoftree"". The option can be used to specify the branches that will have a data member.; If option is empty, readers will be generated for each leaf.; If option is ""@"", readers will be generated for the topmost branches.; Individual branches can also be picked by their name:; ""X"" generates readers for leaves of X.; ""@X"" generates a reader for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:36152,interface,interface,36152,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['interface'],['interface']
Integrability,"egin;; 17632 char *portend;; 17633 ; 17634 auth_domain_check_enabled =; 17635 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK], ""yes"");; 17636 ; 17637 /* DNS is case insensitive, so use case insensitive string compare here; 17638 */; 17639 for (i = 0; abs_uri_protocols[i].proto != NULL; i++) {; 17640 if (mg_strncasecmp(uri,; 17641 abs_uri_protocols[i].proto,; 17642 abs_uri_protocols[i].proto_len); 17643 == 0) {; 17644 ; 17645 hostbegin = uri + abs_uri_protocols[i].proto_len;; 17646 hostend = strchr(hostbegin, '/');; 17647 if (!hostend) {; 17648 return 0;; 17649 }; 17650 portbegin = strchr(hostbegin, ':');; 17651 if ((!portbegin) || (portbegin > hostend)) {; 17652 port = abs_uri_protocols[i].default_port;; 17653 request_domain_len = (size_t)(hostend - hostbegin);; 17654 } else {; 17655 port = strtoul(portbegin + 1, &portend, 10);; 17656 if ((portend != hostend) || (port <= 0); 17657 || !is_valid_port(port)) {; 17658 return 0;; 17659 }; 17660 request_domain_len = (size_t)(portbegin - hostbegin);; 17661 }; 17662 /* protocol found, port set */; 17663 break;; 17664 }; 17665 }; 17666 ; 17667 if (!port) {; 17668 /* port remains 0 if the protocol is not found */; 17669 return 0;; 17670 }; 17671 ; 17672 /* Check if the request is directed to a different server. */; 17673 /* First check if the port is the same. */; 17674 if (ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa)) != port) {; 17675 /* Request is directed to a different port */; 17676 return 0;; 17677 }; 17678 ; 17679 /* Finally check if the server corresponds to the authentication; 17680 * domain of the server (the server domain).; 17681 * Allow full matches (like http://mydomain.com/path/file.ext), and; 17682 * allow subdomain matches (like http://www.mydomain.com/path/file.ext),; 17683 * but do not allow substrings (like; 17684 * http://notmydomain.com/path/file.ext; 17685 * or http://mydomain.com.fake/path/file.ext).; 17686 */; 17687 if (auth_domain_check_enabled) {; 17688 server_domain = conn->dom_ctx->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:524715,protocol,protocol,524715,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['protocol'],['protocol']
Integrability,"egin;; 17633 char *portend;; 17634 ; 17635 auth_domain_check_enabled =; 17636 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_AUTH_DOMAIN_CHECK], ""yes"");; 17637 ; 17638 /* DNS is case insensitive, so use case insensitive string compare here; 17639 */; 17640 for (i = 0; abs_uri_protocols[i].proto != NULL; i++) {; 17641 if (mg_strncasecmp(uri,; 17642 abs_uri_protocols[i].proto,; 17643 abs_uri_protocols[i].proto_len); 17644 == 0) {; 17645 ; 17646 hostbegin = uri + abs_uri_protocols[i].proto_len;; 17647 hostend = strchr(hostbegin, '/');; 17648 if (!hostend) {; 17649 return 0;; 17650 }; 17651 portbegin = strchr(hostbegin, ':');; 17652 if ((!portbegin) || (portbegin > hostend)) {; 17653 port = abs_uri_protocols[i].default_port;; 17654 request_domain_len = (size_t)(hostend - hostbegin);; 17655 } else {; 17656 port = strtoul(portbegin + 1, &portend, 10);; 17657 if ((portend != hostend) || (port <= 0); 17658 || !is_valid_port(port)) {; 17659 return 0;; 17660 }; 17661 request_domain_len = (size_t)(portbegin - hostbegin);; 17662 }; 17663 /* protocol found, port set */; 17664 break;; 17665 }; 17666 }; 17667 ; 17668 if (!port) {; 17669 /* port remains 0 if the protocol is not found */; 17670 return 0;; 17671 }; 17672 ; 17673 /* Check if the request is directed to a different server. */; 17674 /* First check if the port is the same. */; 17675 if (ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa)) != port) {; 17676 /* Request is directed to a different port */; 17677 return 0;; 17678 }; 17679 ; 17680 /* Finally check if the server corresponds to the authentication; 17681 * domain of the server (the server domain).; 17682 * Allow full matches (like http://mydomain.com/path/file.ext), and; 17683 * allow subdomain matches (like http://www.mydomain.com/path/file.ext),; 17684 * but do not allow substrings (like; 17685 * http://notmydomain.com/path/file.ext; 17686 * or http://mydomain.com.fake/path/file.ext).; 17687 */; 17688 if (auth_domain_check_enabled) {; 17689 server_domain = conn->dom_ctx->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:524748,protocol,protocol,524748,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['protocol'],['protocol']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:48:03 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator2D.html:9603,integrat,integration,9603,root/html526/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator2D.html,1,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Jul 4 15:23:09 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator2D.html:9658,integrat,integration,9658,root/html530/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator2D.html,1,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Thu Nov 3 20:08:26 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegrator2D.html:9658,integrat,integration,9658,root/html532/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html532/RooIntegrator2D.html,2,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Thu Sep 23 19:59:59 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator2D.html:9589,integrat,integration,9589,root/html528/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator2D.html,1,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:31:39 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooIntegrator2D.html:10221,integrat,integration,10221,root/html604/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html604/RooIntegrator2D.html,2,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:33:36 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegrator2D.html:10221,integrat,integration,10221,root/html602/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html602/RooIntegrator2D.html,2,['integrat'],['integration']
Integrability,"egister RooIntegrator2D, is parameters and capabilities with RooNumIntFactory. RooIntegrator2D(); Default constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:17:26 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegrator2D.html:9677,integrat,integration,9677,root/html534/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html534/RooIntegrator2D.html,2,['integrat'],['integration']
Integrability,"egments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:8758,integrat,integration,8758,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,2,['integrat'],['integration']
Integrability,"egral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13052,integrat,integration,13052,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Integrability,"egral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:9779,integrat,integration,9779,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,11,['integrat'],['integration']
Integrability,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tagFlav; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBMixDecay.html:40641,integrat,integrator,40641,root/html526/RooBMixDecay.html,https://root.cern,https://root.cern/root/html526/RooBMixDecay.html,1,['integrat'],['integrator']
Integrability,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo2DKeysPdf.html:44958,integrat,integrator,44958,root/html602/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html,40,['integrat'],['integrator']
Integrability,"egral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:2167,integrat,integration,2167,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,4,['integrat'],['integration']
Integrability,"egral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:2167,integrat,integration,2167,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['integrat'],['integration']
Integrability,"egral(const RooArgSet& iset, const RooArgSet& nset, const RooNumIntConfig& cfg, const char* rangeName = 0) const; virtual RooAbsReal*createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; RooAbsReal*createIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()) const; RooAbsReal*createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); const RooAbsReal*createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tdefaultErrorLevel() const; static RooNumIntConfig*defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:6797,depend,dependentVars,6797,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['depend'],['dependentVars']
Integrability,"egral::intRange ; (; ); const. inline . Definition at line 52 of file RooRealIntegral.h. ◆ intVars(). RooArgSet RooRealIntegral::intVars ; (; ); const. inline . Definition at line 51 of file RooRealIntegral.h. ◆ IsA(). TClass * RooRealIntegral::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 150 of file RooRealIntegral.h. ◆ isValid(). bool RooRealIntegral::isValid ; (; ); const. inlineoverridevirtual . Check if current value is valid. ; Reimplemented from RooAbsReal.; Definition at line 42 of file RooRealIntegral.h. ◆ isValidReal(). bool RooRealIntegral::isValidReal ; (; double ; value, . bool ; printError = false . ); const. overrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsReal.; Definition at line 1016 of file RooRealIntegral.cxx. ◆ jacobianProduct(). double RooRealIntegral::jacobianProduct ; (; ); const. protectedvirtual . Return product of jacobian terms originating from analytical integration. ; Definition at line 919 of file RooRealIntegral.cxx. ◆ numIntCatVars(). const RooArgSet & RooRealIntegral::numIntCatVars ; (; ); const. inline . Definition at line 47 of file RooRealIntegral.h. ◆ numIntRealVars(). const RooArgSet & RooRealIntegral::numIntRealVars ; (; ); const. inline . Definition at line 48 of file RooRealIntegral.h. ◆ parameters(). const RooArgSet & RooRealIntegral::parameters ; (; ); const. protected . Definition at line 999 of file RooRealIntegral.cxx. ◆ plotSamplingHint(). std::list< double > * RooRealIntegral::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. inlineoverridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:71455,integrat,integration,71455,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Integrability,"egral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfInput p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; const TNamed*_rangeNameName of subset range; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendPdf(); Default constructor. RooExtendPdf(const char* name, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExtendPdf.html:39033,integrat,integrator,39033,root/html526/RooExtendPdf.html,https://root.cern,https://root.cern/root/html526/RooExtendPdf.html,1,['integrat'],['integrator']
Integrability,"egralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:9978,integrat,integration,9978,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,20,['integrat'],['integration']
Integrability,egration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 63 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetMaxPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMaxPts ; (; unsigned int ; n). inline . set max points ; Definition at line 167 of file AdaptiveIntegratorMultiDim.h. ◆ SetMinPts(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetMinPts ; (; unsigned int ; n). inline . set min points ; Definition at line 164 of file AdaptiveIntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 401 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetRelTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetRelTolerance ; (; double ; relTol). overridevirtual . set relative tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:10521,integrat,integration,10521,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"egration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setIntegratorConfig(const RooNumIntConfig& config); Set the given integrator configuration as default numeric integration; configuration for this object. void setIntegratorConfig(); Remove the specialized numeric integration configuration associated; with this object. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function to force use of a given set of observables; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function to force use of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void setCacheCheck(Bool_t flag); Activate cache validation mode. Int_t getMaxVal(const RooArgSet& vars) const; Advertise capability to determine maximum value of function for given set of; observables. If no direct generator method is provided, this information; will assist the accept/reject generator to operate more efficiently as; it can skip the initial trial sampling phase to empirically find the function; maximum. Double_t maxVal(Int_t code) const; Return maximum value for set of observables identified by code assigned; in getMaxVal. void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:60619,depend,depends,60619,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['depend'],['depends']
Integrability,"egration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(a,b). double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:7910,integrat,integration,7910,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Integrability,"egration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_setset of terms to be summed; TIterator*_setIter! Iterator over set; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddition.html:32789,integrat,integrator,32789,root/html530/RooAddition.html,https://root.cern,https://root.cern/root/html530/RooAddition.html,1,['integrat'],['integrator']
Integrability,"egrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNovosibirsk(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _peak, RooAbsReal& _width, RooAbsReal& _tail); The two addresses refer to our first dependent variable and; parameter, respectively, as declared in the rdl file. RooNovosibirsk(const RooNovosibirsk& other, const char* name = 0). Double_t evaluate() const; If tail=eta=0 the Belle distribution becomes gaussian. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. RooNovosibirsk(); Your constructor needs a name and title and then a list of the; dependent variables and parameters used by this PDF. Use an; underscore in the variable names to distinguish them from your; own local versions. {}. TObject* clone(const char* newname) const; { return new RooNovosibirsk(*this,newname);	}. virtual ~RooNovosibirsk(); An empty constructor is usually ok. { }. » Last changed: Tue Jun 2 15:32:36 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNovosibirsk.html:45064,depend,dependent,45064,root/html604/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html604/RooNovosibirsk.html,2,['depend'],['dependent']
Integrability,"egrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNovosibirsk(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _peak, RooAbsReal& _width, RooAbsReal& _tail); The two addresses refer to our first dependent variable and; parameter, respectively, as declared in the rdl file. RooNovosibirsk(const RooNovosibirsk& other, const char* name = 0). Double_t evaluate() const; If tail=eta=0 the Belle distribution becomes gaussian. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. RooNovosibirsk(); Your constructor needs a name and title and then a list of the; dependent variables and parameters used by this PDF. Use an; underscore in the variable names to distinguish them from your; own local versions. {}. TObject* clone(const char* newname) const; { return new RooNovosibirsk(*this,newname);	}. virtual ~RooNovosibirsk(); An empty constructor is usually ok. { }. » Last changed: Tue Jun 30 14:34:31 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNovosibirsk.html:45064,depend,dependent,45064,root/html602/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html602/RooNovosibirsk.html,2,['depend'],['dependent']
Integrability,"egrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::IntegrationOneDim::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:5121,integrat,integration,5121,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,6,['integrat'],['integration']
Integrability,"egrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:6182,integrat,integration,6182,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,4,['integrat'],['integration']
Integrability,"egrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Mon Dec 7 13:45:53 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveIntegratorND.html:7886,integrat,integration,7886,root/html526/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Integrability,"egrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Mon Jul 4 15:21:34 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveIntegratorND.html:7941,integrat,integration,7941,root/html530/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Integrability,"egrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Sat Oct 9 06:58:01 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAdaptiveIntegratorND.html:7872,integrat,integration,7872,root/html528/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html528/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Integrability,"egrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Thu Nov 3 20:06:53 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAdaptiveIntegratorND.html:7941,integrat,integration,7941,root/html532/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html532/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Integrability,"egrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Tue Jun 2 15:27:39 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAdaptiveIntegratorND.html:8440,integrat,integration,8440,root/html604/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html604/RooAdaptiveIntegratorND.html,2,['integrat'],['integration']
Integrability,"egratorConfig(); Returns the default numeric integration configuration for all RooAbsReals. RooNumIntConfig* specialIntegratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumIntConfig* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setIntegratorConfig(const RooNumIntConfig& config); Set the given integrator configuration as default numeric integration; configuration for this object. void setIntegratorConfig(); Remove the specialized numeric integration configuration associated; with this object. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function to force use of a given set of observables; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function to force use of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:59637,integrat,integration,59637,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['integrat'],['integration']
Integrability,"egratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFormulaVar(const char* name, const char* title, const char* formula, const RooArgList& dependents); Constructor with formula expression and list of input variables. RooFormulaVar(const char* name, const char* title, const RooArgList& dependents); Constructor with formula expression, title and list of input variables. RooFormulaVar(const RooFormulaVar& other, const char* name = 0); Copy constructor. ~RooFormulaVar(); Destructor. RooFormula& formula() const; Return reference to internal RooFormula object. Double_t evaluate() const; Calculate current value of object from internal formula. Bool_t isValidReal(Double_t value, Bool_t printError) const; Check if given value is valid. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Propagate server change information to embedded RooFormula object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. void printMetaArgs(ostream& os) const; Add formula expression as meta argument in printing interface. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFormulaVar.html:34834,depend,dependents,34834,root/html532/RooFormulaVar.html,https://root.cern,https://root.cern/root/html532/RooFormulaVar.html,4,['depend'],['dependents']
Integrability,"egratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFormulaVar(const char* name, const char* title, const char* formula, const RooArgList& dependents); Constructor with formula expression and list of input variables. RooFormulaVar(const char* name, const char* title, const RooArgList& dependents); Constructor with formula expression, title and list of input variables. RooFormulaVar(const RooFormulaVar& other, const char* name = 0); Copy constructor. ~RooFormulaVar(); Destructor. RooFormula& formula() const; Return reference to internal RooFormula object. Double_t getVal(const RooArgSet* set = 0) const; Overload RooAbsReal::getVal() to intercept nset pointer. Double_t evaluate() const; Calculate current value of object from internal formula. Bool_t isValidReal(Double_t value, Bool_t printError) const; Check if given value is valid. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Propagate server change information to embedded RooFormula object. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. void printMetaArgs(ostream& os) const; Add formula expression as meta argument in printing interfa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFormulaVar.html:33629,depend,dependents,33629,root/html526/RooFormulaVar.html,https://root.cern,https://root.cern/root/html526/RooFormulaVar.html,3,['depend'],['dependents']
Integrability,egratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  ROOT::Math::VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  ROOT::Math::VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator cla,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:1678,integrat,integration,1678,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,1,['integrat'],['integration']
Integrability,"egratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionMultiDim>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html:2454,Integrat,IntegratorMultiDim,2454,root/html532/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html,8,['Integrat'],"['IntegrationMultiDim', 'Integrator', 'IntegratorMultiDim']"
Integrability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:16651,message,message,16651,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,4,['message'],['message']
Integrability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:3639,message,message,3639,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['message'],['message']
Integrability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:7766,message,message,7766,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['message'],['message']
Integrability,"eight"");; See the first Profile1D() overload for more details. ; Definition at line 2370 of file RInterface.hxx. ◆ Profile1D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType> . RResultPtr<::TProfile > ROOT::RDF::RInterface< Proxied, DataSource >::Profile1D ; (; const TProfile1DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """" . ). inline . Fill and return a one-dimensional profile (lazy action). ; Template Parameters. V1The type of the column the values of which are used to fill the profile. Inferred if not present. ; V2The type of the column the values of which are used to fill the profile. Inferred if not present. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. . Returnsthe monodimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; // Explicit column types; auto myProf2 = myDf.Graph<int, float>({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; NoteDifferently from other ROOT interfaces, the returned profile is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2325 of file RInterface.hxx. ◆ Profile2D() [1/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 , typename V2 , typename V3 , typename W > . RResultPtr<::TProfile2D > ROOT::RDF::RInterface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:107908,wrap,wrapped,107908,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['wrap'],['wrapped']
Integrability,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:2128,depend,depending,2128,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['depend'],['depending']
Integrability,"eightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodHMatrix.html:19955,message,message,19955,root/html604/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html,2,['message'],['message']
Integrability,"eightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodHMatrix.html:19947,message,message,19947,root/html602/TMVA__MethodHMatrix.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodHMatrix.html,2,['message'],['message']
Integrability,"eimplemented from TMVA::MethodBase.; Definition at line 1134 of file MethodPDEFoam.cxx. ◆ SetXminXmax(). void TMVA::MethodPDEFoam::SetXminXmax ; (; TMVA::PDEFoam * ; pdefoam). protected . Set Xmin, Xmax for every dimension in the given pdefoam object. ; Definition at line 892 of file MethodPDEFoam.cxx. ◆ Sqr(). template<typename T > . T TMVA::MethodPDEFoam::Sqr ; (; T ; x); const. inlineprivate . Definition at line 175 of file MethodPDEFoam.h. ◆ Streamer(). virtual void TMVA::MethodPDEFoam::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodPDEFoam::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 212 of file MethodPDEFoam.h. ◆ TargetSelectionToUInt(). UInt_t TMVA::MethodPDEFoam::TargetSelectionToUInt ; (; ETargetSelection ; ts); const. inline . Definition at line 132 of file MethodPDEFoam.h. ◆ Train(). void TMVA::MethodPDEFoam::Train ; (; void ; ). virtual . Train PDE-Foam depending on the set options. ; Implements TMVA::MethodBase.; Definition at line 430 of file MethodPDEFoam.cxx. ◆ TrainMonoTargetRegression(). void TMVA::MethodPDEFoam::TrainMonoTargetRegression ; (; void ; ). Training one (mono target regression) foam, whose cells contain the average 0th target. ; The dimension of the foam = number of non-targets (= number of variables). ; Definition at line 595 of file MethodPDEFoam.cxx. ◆ TrainMultiClassification(). void TMVA::MethodPDEFoam::TrainMultiClassification ; (; ). Create one unified foam (see TrainUnifiedClassification()) for each class, where the cells of foam i (fFoam[i]) contain the average fraction of events of class i, i.e. ; D = number events of class i / total number of events ; Definition at line 556 of file MethodPDEFoam.cxx. ◆ TrainMultiTargetRegression(). void TMVA::MethodPDEFoam::TrainMultiTargetRegression ; (; void ; ). Training one (multi target regression) foam, whose cells contain the average event density. ; The dimension of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:44406,depend,depending,44406,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['depend'],['depending']
Integrability,"eimplemented from TMemFile. ◆ StreamerNVirtual(). void TParallelMergingFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TParallelMergingFile.h. ◆ UploadAndReset(). Bool_t TParallelMergingFile::UploadAndReset ; (; ). Upload the current file data to the merging server. ; Reset the file and return true in case of success. ; Definition at line 76 of file TParallelMergingFile.cxx. ◆ Write() [1/2]. Int_t TParallelMergingFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ); const. overridevirtual . One can not save a const TDirectory object. ; Reimplemented from TFile.; Definition at line 177 of file TParallelMergingFile.cxx. ◆ Write() [2/2]. Int_t TParallelMergingFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ). overridevirtual . Write memory objects to this file and upload them to the parallel merge server. ; Then reset all the resetable object (those with a ResetAfterMerge routine, like TTree).; Loop on all objects in memory (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TFile.; Definition at line 165 of file TParallelMergingFile.cxx. ◆ WriteStreamerInfo(). void TParallelMergingFile::WriteStreamerInfo ; (; ). overridevirtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class TStreamerInfo. ; Reimplemented from TFile.; Definition at line 188 of file TParallelMergingFile.cxx. Member Data Documentation. ◆ fClassSent. TArrayC* TParallelMergingFile::fClassSent. private . Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelMergingFile.html:47528,rout,routine,47528,doc/master/classTParallelMergingFile.html,https://root.cern,https://root.cern/doc/master/classTParallelMergingFile.html,1,['rout'],['routine']
Integrability,"eimplemented in RooCategory, RooConstVar, RooRealVar, and RooAbsOptTestStatistic.; Definition at line 99 of file RooAbsArg.h. ◆ isFundamental(). virtual bool RooAbsArg::isFundamental ; (; ); const. inlinevirtual . Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ; Note that this test is subtlely different from the dynamic isDerived() test, e.g. a constant is not derived but is also not fundamental. ; Reimplemented in RooCategory, RooErrorVar, RooRealVar, and RooStringVar.; Definition at line 223 of file RooAbsArg.h. ◆ isIdentical(). virtual bool RooAbsArg::isIdentical ; (; const RooAbsArg & ; other, . bool ; assumeSameType = false . ); const. pure virtual . Implemented in RooAbsCategory, RooAbsReal, and RooStringVar. ◆ isLValue(). virtual bool RooAbsArg::isLValue ; (; ); const. inlinevirtual . Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ; Reimplemented in RooAbsCategoryLValue, and RooAbsRealLValue.; Definition at line 235 of file RooAbsArg.h. ◆ isReducerNode(). virtual bool RooAbsArg::isReducerNode ; (; ); const. inlinevirtual . Reimplemented in RooPolynomial.; Definition at line 549 of file RooAbsArg.h. ◆ isShapeDirty(). bool RooAbsArg::isShapeDirty ; (; ); const. inline . Definition at line 388 of file RooAbsArg.h. ◆ isShapeServer() [1/2]. bool RooAbsArg::isShapeServer ; (; const char * ; name); const. inline . Check if this is serving shape to an object with name name. ; Definition at line 209 of file RooAbsArg.h. ◆ isShapeServer() [2/2]. bool RooAbsArg::isShapeServer ; (; const RooAbsArg & ; arg); const. inline . Check if this is serving shape to arg. ; Definition at line 205 of file RooAbsArg.h. ◆ IsSortable(). bool RooAbsArg::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 341 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:73383,integrat,integrated,73383,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['integrat'],['integrated']
Integrability,"eimplemented in RooRealVar.; Definition at line 1579 of file RooAbsArg.cxx. ◆ dependsOn() [1/3]. bool RooAbsArg::dependsOn ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. inline . Test whether we depend on (ie, are served by) the specified object. ; Note that RooAbsArg objects are considered equivalent if they have the same name. ; Definition at line 123 of file RooAbsArg.h. ◆ dependsOn() [2/3]. bool RooAbsArg::dependsOn ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) any object in the specified collection. ; Uses the dependsOn(RooAbsArg&) member function. ; Definition at line 850 of file RooAbsArg.cxx. ◆ dependsOn() [3/3]. bool RooAbsArg::dependsOn ; (; TNamed const * ; namePtr, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) an object with a specific name. ; Definition at line 866 of file RooAbsArg.cxx. ◆ dependsOnValue() [1/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values served from the object passed as server. ; Parameters. serverTest if server serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 116 of file RooAbsArg.h. ◆ dependsOnValue() [2/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values from an element in the serverList. ; Parameters. serverListTest if one of the elements in this list serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 108 of file RooAbsArg.h. ◆ expensiveObjectCache().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:58053,depend,depend,58053,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['depend']
Integrability,"eimplemented in TGLineStyleComboBox, TGLineWidthComboBox, TGFontTypeComboBox, and TGFSComboBox.; Definition at line 131 of file TGComboBox.h. ◆ IsEnabled(). virtual Bool_t TGComboBox::IsEnabled ; (; ); const. inlinevirtual . Definition at line 119 of file TGComboBox.h. ◆ IsTextInputEnabled(). virtual Bool_t TGComboBox::IsTextInputEnabled ; (; ); const. inlinevirtual . Definition at line 103 of file TGComboBox.h. ◆ Layout(). void TGComboBox::Layout ; (; ). overridevirtual . layout combobox ; Reimplemented from TGFrame.; Definition at line 541 of file TGComboBox.cxx. ◆ NewEntry(). virtual void TGComboBox::NewEntry ; (; const char * ; s = ""Entry""). inlinevirtual . Definition at line 98 of file TGComboBox.h. ◆ operator=(). TGComboBox & TGComboBox::operator= ; (; const TGComboBox & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGComboBox::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process messages generated by the listbox and forward messages to the combobox message handling window. ; Parm2 contains the id of the selected listbox entry. ; Reimplemented from TGFrame.; Definition at line 588 of file TGComboBox.cxx. ◆ RemoveAll(). void TGComboBox::RemoveAll ; (; ). overridevirtual . Remove all entries from combo box. ; Reimplemented from TGCompositeFrame.; Definition at line 690 of file TGComboBox.cxx. ◆ RemoveEntries(). virtual void TGComboBox::RemoveEntries ; (; Int_t ; from_ID, . Int_t ; to_ID . ). inlinevirtual . Definition at line 105 of file TGComboBox.h. ◆ RemoveEntry(). void TGComboBox::RemoveEntry ; (; Int_t ; id = -1). virtual . Remove entry. If id == -1, the currently selected entry is removed. ; Definition at line 522 of file TGComboBox.cxx. ◆ ReturnPressed(). void TGComboBox::ReturnPressed ; (; ). virtual . Add new entry to combo box when return key pressed inside text entry ReturnPressed signal is emitted. ; Definition at line 663 of file TGComboBox.cxx. ◆ SavePrimitive(). void TGComboBox::SavePrimiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:42747,message,messages,42747,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,3,['message'],"['message', 'messages']"
Integrability,"eive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:19352,message,message,19352,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['message'],['message']
Integrability,"eived arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. RooCategory& asCAT(const char* ); CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. RooArgSet asSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:21168,interface,interface,21168,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,4,['interface'],['interface']
Integrability,"eiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual TClass*IsA() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidSetSender(void* sender); voidSetSenderClassName(const char* sclass = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQObjSender.html:4036,Message,Message,4036,root/html532/TQObjSender.html,https://root.cern,https://root.cern/root/html532/TQObjSender.html,1,['Message'],['Message']
Integrability,"ek. Minuit2 (library libMinuit2). New C++ version of Minuit. The list of possible algorithm is :. Migrad (default); Simplex; Minimize; Scan; Fumili . This is the same algorithm of TFumili, but implemented in the Minuit2 library. Fumili. Implement a dedicated minimization algorithm for least-square and likelihood fits. It has requirements on the type of method function to be used. No specific algorithm exists; GSLMultiMin (library libMathMore). Minimizer based on the Multidimensional Minimization routines of the Gnu Scientific Library (GSL). The list of available algorithms is. BFGS2 (default) : second version of the vector Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm;; BFGS : old version of the vector Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm;; ConjugateFR : Fletcher-Reeves conjugate gradient algorithm;; ConjugatePR : Polak-Ribiere conjugate gradient algorithm;; SteepestDescent: steepest descent algorithm;. GSLMultiFit (library libMathMore). Minimizer based on the Non-Linear Least-Square routines of GSL. This minimizer can be used only for least-square fits.; GSLSimAn (library libMathMore). Minimizer based on simulated annealing.; Genetic (library libGenetic). Genetic minimizer based on an algorithm implemented in the TMVA package. Each minimizer can be configured using the ROOT::Math::MinimizerOptions class. The list of possible option that can be set are:. Minimizer type (MinimizerOptions::SetMinimizerType(const char *)) .; Minimizer algorithm (MinimizerOptions::SetMinimizerAlgorithm(const char *)).; Print Level (MinimizerOptions::SetPrintLevel(int )) to set the verbose printing level (default is 0).; Tolerance (MinimizerOptions::SetTolerance(double )) tolerance used to control the iterations.; Maximum number of function calls (MinimizerOptions::SetMaxFunctionCalls(int )).; Maximum number of iterations (MinimizerOptions::SetMaxIterations(int )). Note that this is not used by Minuit; FCN Upper value for Error Definition (MinimizerOptions::SetErrorDef(d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:203664,rout,routines,203664,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['rout'],['routines']
Integrability,"el &model, const ColumnNames_t &columnList); 2146 {; 2147 std::shared_ptr<::THnD> h(nullptr);; 2148 {; 2149 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2150 h = model.GetHistogram();; 2151 ; 2152 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2153 h->Sumw2();; 2154 } else if (int(columnList.size()) != h->GetNdimensions()) {; 2155 throw std::runtime_error(""Wrong number of columns for the specified number of histogram axes."");; 2156 }; 2157 }; 2158 return CreateAction<RDFInternal::ActionTags::HistoND, FirstColumn, OtherColumns...>(columnList, h, h,; 2159 fProxiedPtr);; 2160 }; 2161 ; 2162 ////////////////////////////////////////////////////////////////////////////; 2163 /// \brief Fill and return an N-dimensional histogram (*lazy action*).; 2164 /// \param[in] model The returned histogram will be constructed using this as a model.; 2165 /// \param[in] columnList A list containing the names of the columns that will be passed when calling `Fill`; 2166 /// (N columns for unweighted filling, or N+1 columns for weighted filling); 2167 /// \return the N-dimensional histogram wrapped in a RResultPtr.; 2168 ///; 2169 /// This action is *lazy*: upon invocation of this method the calculation is; 2170 /// booked but not executed. Also see RResultPtr.; 2171 ///; 2172 /// ### Example usage:; 2173 /// ~~~{.cpp}; 2174 /// auto myFilledObj = myDf.HistoND({""name"",""title"", 4,; 2175 /// {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; 2176 /// {""col0"", ""col1"", ""col2"", ""col3""});; 2177 /// ~~~; 2178 ///; 2179 RResultPtr<::THnD> HistoND(const THnDModel &model, const ColumnNames_t &columnList); 2180 {; 2181 std::shared_ptr<::THnD> h(nullptr);; 2182 {; 2183 ROOT::Internal::RDF::RIgnoreErrorLevelRAII iel(kError);; 2184 h = model.GetHistogram();; 2185 ; 2186 if (int(columnList.size()) == (h->GetNdimensions() + 1)) {; 2187 h->Sumw2();; 2188 } else if (int(columnList.size()) != h->GetNdimensions()) {; 2189 throw std::runtime_error(""Wrong number of columns for the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:121686,wrap,wrapped,121686,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['wrap'],['wrapped']
Integrability,"el (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3I3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3S3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to compute nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnChainA class to chain together multiple histograms ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CTPathDefinition;  CTHttpCallArg;  CTHttpEngine;  ►CTHttpLongPollEngine;  CQueueItem;  CTHttpServer;  CTHttpWSEngine;  CTHttpWSHandler;  CTHYPEAn hyperboloid (not implemented) ;  CTIdleTOTimer;  CTIdleTOTimerGuard;  CTImageAn abstract interface to image processing library ;  CTImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:184782,interface,interface,184782,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['interface'],['interface']
Integrability,"el for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooListProxy_p; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Bool_t_relParam; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooListProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooParamHistFunc(const char* name, const char* title, RooDataHist& dh, Bool_t paramRelative = kTRUE); Populate x with observabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooParamHistFunc.html:35219,integrat,integrator,35219,root/html534/RooParamHistFunc.html,https://root.cern,https://root.cern/root/html534/RooParamHistFunc.html,2,['integrat'],['integrator']
Integrability,"el in the image with the specified pixel value.; The image must contain the x and y coordinates. id - specifies the image; x, y - coordinates; pixel - the new pixel value. void PutImage(Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h); Combines an image with a rectangle of the specified drawable. The; section of the image defined by the x, y, width, and height arguments; is drawn on the specified part of the drawable. id - the drawable; gc - the GC; img - the image you want combined with the rectangle; dx - the offset in X from the left edge of the image; dy - the offset in Y from the top edge of the image; x, y - coordinates, which are relative to the origin of the; drawable and are the coordinates of the subimage; w, h - the width and height of the subimage, which define the; rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode,; clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground and background.; (see also the GCValues_t structure). void DeleteImage(Drawable_t img); Deallocates the memory associated with the image img. Window_t GetCurrentWindow() const; pointer to the current internal window used in canvas graphics. unsigned char * GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Returns an array of pixels created from a part of drawable (defined by x, y, w, h); in format:; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; By default all pixels from the whole drawable are returned. Note that return array is 32-bit aligned. Pixmap_t CreatePixmapFromData(unsigned char* bits, UInt_t width, UInt_t height); create pixmap from RGB data. RGB data is in format :; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; Note that data must be 32-bit aligned. void ShapeCombineMask(Window_t id, Int_t x, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:64116,depend,dependent,64116,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,10,['depend'],['dependent']
Integrability,"el, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const ROOT::Math::IBaseFunctionMultiDim * func = nullptr;  ; RooListProxy vars;  ; double * x = nullptr;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:68835,integrat,integration,68835,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['integrat'],['integration']
Integrability,"el. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:3261,interface,interface,3261,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['interface'],['interface']
Integrability,"el. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:2977,interface,interface,2977,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,3,['interface'],['interface']
Integrability,"el; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGSearchDialog*fgSearchDialogglobal singleton; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create a search dialog box. Used to get from the user the required; search instructions. Ret_code is kTRUE when sstruct has been set,; kFALSE otherwise (like when dialog was canceled). ~TGSearchDialog(); Clean up search dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void TextEntered(const char* text); emit signal when search text entered. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process search dialog widget messages. TGSearchDialog *& SearchDialog(); Return global search dialog. void SetClose(Bool_t on); { fType->fClose = on; }. Bool_t IsClose() const; { return fType->fClose; }. TGSearchType * GetType() const; { return fType; }. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSearchDialog.html:23695,message,messages,23695,root/html534/TGSearchDialog.html,https://root.cern,https://root.cern/root/html534/TGSearchDialog.html,2,['message'],['messages']
Integrability,"el; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedPatternSelect(const TGWindow* p, Style_t pattern, Int_t id); Create and pop up pattern select window. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process message according to the user input. void DoRedraw(); Draw selected pattern as current one. void SetPattern(Style_t pattern, Bool_t emit = kTRUE); Set pattern. void SavePrimitive(ostream& out, Option_t* = """"); Save the pattern select widget as a C++ statement(s) on output stream out. Style_t GetPattern() const; { return fPattern; }. virtual ~TGedPatternSelect(); {}. TGDimension GetDefaultSize() const; { return TGDimension(55, 21); }. void PatternSelected(Style_t pattern = 0); { Emit(""PatternSelected(Style_t)"", pattern ? pattern : GetPattern()); }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedPatternSelect.html:23591,message,message,23591,root/html534/TGedPatternSelect.html,https://root.cern,https://root.cern/root/html534/TGedPatternSelect.html,2,['message'],['message']
Integrability,elFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadIn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:79787,wrap,wrapper,79787,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['wrap'],['wrapper']
Integrability,elFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7530 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7538 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7546 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3489 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3498 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7554 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3674 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 3022 of file TClass.cxx. ◆ GetLastReadIn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:79788,wrap,wrapper,79788,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['wrap'],['wrapper']
Integrability,"elPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooListProxy_olist; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooListProxy_plist; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooTFnBinding(const char* name, const char* title, TF1* func, const RooArgList& list). RooTFnBinding(const char* name, const char* title,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTFnBinding.html:36408,integrat,integrator,36408,root/html602/RooTFnBinding.html,https://root.cern,https://root.cern/root/html602/RooTFnBinding.html,4,['integrat'],['integrator']
Integrability,"el_tTGFrame::fgWhitePixel. private:. TRootDialog*fDialogdialog prompting for command line arguments; TList*fTrashlist of objects to be deleted before refilling menu. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); Create context menu. ~TRootContextMenu(); Delete a context menu. void DisplayPopup(Int_t x, Int_t y); Display context popup menu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootContextMenu.html:23071,depend,depending,23071,root/html528/TRootContextMenu.html,https://root.cern,https://root.cern/root/html528/TRootContextMenu.html,6,['depend'],['depending']
Integrability,"elative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:6883,Integrat,IntegratorOneDim,6883,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,3,['Integrat'],['IntegratorOneDim']
Integrability,"elected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly2,sinhGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on t integrates over variables (cosa); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(coshGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:NumericIntegration -- RooRealIntegral::init(sinhGBasis_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) directly selected PDF components: (ampl1); [#1] INFO:Plotting -- RooAbsPdf::plotOn(pdf) indirectly selected PDF components: (poly1,coshGBasis); [#1] INFO:Plotting -- RooAbsReal::plotOn(pdf) plot on cosa integrates over variables (t); [#1] INFO:NumericIntegration -- RooRealIntegral::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf704__amplitudefit_8C.html:9429,integrat,integrator,9429,doc/master/rf704__amplitudefit_8C.html,https://root.cern,https://root.cern/doc/master/rf704__amplitudefit_8C.html,2,['integrat'],['integrator']
Integrability,"electionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] ERROR:Eval -- RooAbsReal::logEvalError(pol3) evaluation error, ; origin : RooPolynomial::pol3[ x=x coefList=(a1,a2,a3) ]; message : p.d.f normalization integral is zero or negative: -2220.000000; server values: x=x=0, coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:6229,message,message,6229,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['message'],['message']
Integrability,"element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer ; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:135146,interface,interface,135146,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,4,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"elete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNumIntFactory (const RooNumIntFactory &other)=delete;  ; std::unique_ptr< RooAbsIntegrator > createIntegrator (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; std::string getIntegratorName (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  ; TClass * IsA () const override;  ; bool registerPlugin (std::string const &name, Creator const &creator, const RooArgSet &defConfig, bool canIntegrate1D, bool canIntegrate2D, bool canIntegrateND, bool canIntegrateOpenEnded, const char *depName="""");  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntFactory.html:2445,integrat,integrator,2445,doc/master/classRooNumIntFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumIntFactory.html,4,"['depend', 'integrat']","['depends', 'integrator', 'integrators']"
Integrability,"elete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_t_floatValue! Transient cache for floating point values from tree branches ; Bool_t_forceNumIntForce numerical integration if flag set; static Bool_t_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intValue! Transient cache for integer values from tree branches ; TString_labelPlot label for objects value; RooArgSet*_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_t_plotBinsNumber of plot bins; Double_t_plotMaxMaximum of plot range; Double_t_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_t_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_t_treeVar!do not persist; UInt_t_uintValue! Transient cache for unsigned integer values from tree branches ; TString_unitUnit for objects value; Double_t_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:30310,integrat,integrator,30310,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['integrat'],['integrator']
Integrability,"elete; static TObject::(anonymous)TObject::kZombie. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Double_tfDeltatopCutoff (a) considered == bottomCutoff (b) iff; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heaviside*fHeavisidethe Heaviside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; enum IntervalTypefIntervalType; Bool_tfIsHistStrictwhether the specified confidence level is a; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heaviside) product; THnSparse*fSparseHistthe binned Markov Chain data; Double_tfTFConfLevelthe actual conf level of tail-fraction interval; Double_tfTFLowerlower limit of the tail-fraction interval; Double_tfTFUpperupper limit of the tail-fraction interval; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist); Double_tfVecWeightsum of weights of all entries in fVector; vector<Int_t>fVectorvector containing the Markov chain data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MCMCInterval.html:11800,integrat,integrating,11800,root/html602/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__MCMCInterval.html,4,['integrat'],['integrating']
Integrability,"elete; };. protected:. Bool_tfArchivedwhether the query has been archived; Long64_tfBytesnumber of bytes processed; Bool_tfDrawtrue if draw action query; TDatimefEndtime when processing ended; Long64_tfEntriesnumber of entries processed; Bool_tfFinalizedwhether Terminate has been run; Long64_tfFirstfirst entry processed; Float_tfInitTimeInitialization time (seconds) (millisec precision); TList*fInputListinput list; contains also data sets, entry list, ...; TStringfLibListblank-separated list of libs loaded at fStart; TMacro*fLogFilefile with log messages from the query; Float_tfMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tfNumMergersNumber of submergers; Int_tfNumWrksNumber of workers at start; TStringfOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*fOutputListoutput list; TStringfParListcolon-separated list of PAR loaded at fStart; Float_tfPrepTimePrepare time (seconds) (millisec precision); Float_tfProcTimeProcessing time (seconds) (millisec precision); Float_tfRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringfResultFileURL of the file where results have been archived; TMacro*fSelecHdrselector header file; TMacro*fSelecImpselector implementation file; Int_tfSeqNumquery unique sequential number; TDatimefStarttime when processing started; TQueryResult::EQueryStatusfStatusquery status; Float_tfTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tfUsedCPUreal CPU time used (seconds). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, const char* selec); Main constructor. ~TQueryResult(); Destructor. TQueryResult * CloneInfo(); Return an instance of TQueryResult containing only the local; info fields, i.e. no outputlist, liblist, dset, selectors, etc..; Used for fast retrieve of information about existin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQueryResult.html:7712,message,messages,7712,root/html534/TQueryResult.html,https://root.cern,https://root.cern/root/html534/TQueryResult.html,2,['message'],['messages']
Integrability,"eleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calcul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:86630,interface,interface,86630,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['interface'],['interface']
Integrability,"elf. See Using regular expressions in Perl in; perlretut for further explanation of the g and c modifiers.; For more detail see: http://perldoc.perl.org/perlre.html#Modifiers. TString GetModifiers() const; Return PCRE modifier options as string.; For meaning of mods see ParseMods(). void Compile(); Compile the fPattern. void Optimize(); Send the pattern through the optimizer. Int_t ReplaceSubs(const TString& s, TString& final, const TString& replacePattern, Int_t* ovec, Int_t nmatch) const; Returns the number of expanded '$' constructs. Int_t MatchInternal(const TString& s, Int_t start, Int_t nMaxMatch, TArrayI* pos = 0); Perform the actual matching - protected method. Int_t Match(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10, TArrayI* pos = 0); The number of matches is returned, this equals the full match +; sub-pattern matches.; nMaxMatch is the maximum allowed number of matches.; pos contains the string indices of the matches. Its usage is; shown in the routine MatchS.; For meaning of mods see ParseMods(). TObjArray * MatchS(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Returns a TObjArray of matched substrings as TObjString's.; The TObjArray is owner of the objects and must be deleted by the user.; The first entry is the full matched pattern, followed by the subpatterns.; If a pattern was not matched, it will return an empty substring:. TObjArray *subStrL = TPRegexp(""(a|(z))(bc)"").MatchS(""abc"");; for (Int_t i = 0; i < subStrL->GetLast()+1; i++) {; const TString subStr = ((TObjString *)subStrL->At(i))->GetString();; cout << ""\"""" << subStr << ""\"" "";; }; cout << subStr << endl;. produces: ""abc"" ""a"" """" ""bc""; For meaning of mods see ParseMods(). Int_t SubstituteInternal(TString& s, const TString& replace, Int_t start, Int_t nMaxMatch0, Bool_t doDollarSubst); Perform pattern substitution with optional back-ref replacement; - protected method. Int_t Substitute(TString& s, const TString& replace, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPRegexp.html:4524,rout,routine,4524,root/html534/TPRegexp.html,https://root.cern,https://root.cern/root/html534/TPRegexp.html,2,['rout'],['routine']
Integrability,"elf. See Using regular expressions in Perl in; perlretut for further explanation of the g and c modifiers.; For more detail see: http://perldoc.perl.org/perlre.html#Modifiers. TString GetModifiers() const; Return PCRE modifier options as string.; For meaning of mods see ParseMods(). void Compile(); Compile the fPattern. void Optimize(); Send the pattern through the optimizer. Int_t ReplaceSubs(const TString& s, TString& final, const TString& replacePattern, Int_t* ovec, Int_t nmatch) const; Returns the number of expanded '$' constructs. Int_t MatchInternal(const TString& s, Int_t start, Int_t nMaxMatch, TArrayI* pos = 0); Perform the actual matching - protected method. Int_t Match(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10, TArrayI* pos = 0); The number of matches is returned, this equals the full match +; sub-pattern matches.; nMaxMatch is the maximum allowed number of matches.; pos contains the string indices of the matches. Its usage is; shown in the routine MatchS.; For meaning of mods see ParseMods(). TObjArray * MatchS(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10); Returns a TObjArray of matched substrings as TObjString's.; The TObjArray is owner of the objects. The first entry is the full; matched pattern, followed by the subpatterns.; If a pattern was not matched, it will return an empty substring:. TObjArray *subStrL = TPRegexp(""(a|(z))(bc)"").MatchS(""abc"");; for (Int_t i = 0; i < subStrL->GetLast()+1; i++) {; const TString subStr = ((TObjString *)subStrL->At(i))->GetString();; cout << ""\"""" << subStr << ""\"" "";; }; cout << subStr << endl;. produces: ""abc"" ""a"" """" ""bc""; For meaning of mods see ParseMods(). Int_t SubstituteInternal(TString& s, const TString& replace, Int_t start, Int_t nMaxMatch0, Bool_t doDollarSubst); Perform pattern substitution with optional back-ref replacement; - protected method. Int_t Substitute(TString& s, const TString& replace, const TString& mods = """", Int_t s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPRegexp.html:4357,rout,routine,4357,root/html528/TPRegexp.html,https://root.cern,https://root.cern/root/html528/TPRegexp.html,4,['rout'],['routine']
Integrability,"elihood ratio function used to make contours (managed internally); map<std::string,double>fLowerLimitsmap with cached lower bound values; auto_ptr<ROOT::Math::IMultiGenFunction>fMinFunc! transient pointer to the minimization function ; auto_ptr<ROOT::Math::Minimizer>fMinimizer! transient pointer to minimizer class used to find limits and contour; RooArgSetfParametersparameters of interest for this interval; map<std::string,double>fUpperLimitsmap with cached upper bound values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LikelihoodInterval(const char* name = 0); Default constructor with name and title. LikelihoodInterval(const char* name, RooAbsReal* , const RooArgSet* , RooArgSet* = 0); Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and; optionally a snaphot of best parameter of interest for interval. ~LikelihoodInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. RooArgSet* GetParameters() const; returns list of parameters. Bool_t CheckParameters(const RooArgSet& ) const; check that the parameters are correct. Double_t LowerLimit(const RooRealVar& param, bool& status); Compute lower limit, check first if limit has been computed; status is a boolean flag which will b set to false in case of error; and is true if calculation is succesfull; in case of error return also a lower limit value of zero. Double_t UpperLimit(const RooRealVar& param, bool& status); Compute upper limit, check first if limit has been computed; status is a boolean flag which will b set to false in case of error; and is true if calculation is succesfull; in case of error return also a lower limit value of zero. void ResetLimits(); reset map with cached limits - called every time the test size or CL has been changed. bool CreateMinimizer(); internal function t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__LikelihoodInterval.html:8879,interface,interface,8879,root/html528/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__LikelihoodInterval.html,4,['interface'],['interface']
Integrability,"elihood ratio function used to make contours (managed internally); map<std::string,double>fLowerLimitsmap with cached lower bound values; auto_ptr<ROOT::Math::IMultiGenFunction>fMinFunc! transient pointer to the minimization function ; auto_ptr<ROOT::Math::Minimizer>fMinimizer! transient pointer to minimizer class used to find limits and contour; RooArgSetfParametersparameters of interest for this interval; map<std::string,double>fUpperLimitsmap with cached upper bound values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LikelihoodInterval(const char* name = 0); Default constructor with name and title. LikelihoodInterval(const char* name, RooAbsReal* , const RooArgSet* , RooArgSet* = 0); Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and; optionally a snaphot of best parameter of interest for interval. ~LikelihoodInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const; This is the main method to satisfy the RooStats::ConfInterval interface.; It returns true if the parameter point is in the interval. RooArgSet* GetParameters() const; returns list of parameters. Bool_t CheckParameters(const RooArgSet& ) const; check that the parameters are correct. Double_t LowerLimit(const RooRealVar& param, bool& status); Compute lower limit, check first if limit has been computed; status is a boolean flag which will b set to false in case of error; and is true if calculation is successful; in case of error return also a lower limit value of zero. Double_t UpperLimit(const RooRealVar& param, bool& status); Compute upper limit, check first if limit has been computed; status is a boolean flag which will b set to false in case of error; and is true if calculation is successful; in case of error return also a lower limit value of zero. void ResetLimits(); reset map with cached limits - called every time the test size or CL has been changed. bool CreateMinimizer(); internal function t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__LikelihoodInterval.html:8977,interface,interface,8977,root/html534/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__LikelihoodInterval.html,2,['interface'],['interface']
Integrability,"els.; This is what is returned by gVirtualX->GetOpenGLScalingFactor() but is; cached here to avoid a virtual function call as it is used quite often in; TGLPhysical shape when drawing the selection highlight. Float_t GetPointLineScalingFactor(); Return extra scaling factor for points and lines.; By default this is set to the same value as ScreenScalingFactor to keep; the same appearance. To override use rootrc entry, e.g.:; OpenGL.PointLineScalingFactor: 1.0. Int_t GetPickingRadius(); Returns picking radius. Float_t GetPointSizeScale(); Get global point-size scale. void SetPointSizeScale(Float_t scale); Set global point-size scale. Float_t GetLineWidthScale(); Returns global line-width scale. void SetLineWidthScale(Float_t scale); Set global line-width scale. void PointSize(Float_t point_size); Set the point-size, taking the global scaling into account.; Wrapper for glPointSize. void LineWidth(Float_t line_width); Set the line-width, taking the global scaling into account.; Wrapper for glLineWidth. Float_t PointSize(); Get the point-size, taking the global scaling into account. Float_t LineWidth(); Get the line-width, taking the global scaling into account. void BeginExtendPickRegion(Float_t scale); Extend pick region for large point-sizes or line-widths. void EndExtendPickRegion(); End extension of the pick region. void RenderPolyMarkers(const TAttMarker& marker, Char_t transp, Float_t* p, Int_t n, Int_t pick_radius = 0, Bool_t selection = kFALSE, Bool_t sec_selection = kFALSE); Render polymarkers at points specified by p-array.; Supports point and cross-like styles. void RenderPolyMarkers(const TAttMarker& marker, const vector<Double_t>& points, Double_t dX, Double_t dY, Double_t dZ); Render polymarkers at points specified by p-array.; Supports point and cross-like styles.; Color is set externally. Lighting is disabled externally. void RenderPoints(const TAttMarker& marker, Float_t* p, Int_t n, Int_t pick_radius = 0, Bool_t selection = kFALSE, Bool_t sec_selection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLUtil.html:8765,Wrap,Wrapper,8765,root/html534/TGLUtil.html,https://root.cern,https://root.cern/root/html534/TGLUtil.html,3,['Wrap'],['Wrapper']
Integrability,"else {; 2339 // recalculate the statistics; 2340 h2->ResetStats();; 2341 }; 2342 ; 2343 if (resetEntries) {; 2344 // use the effective entries for the entries; 2345 // since this is the only way to estimate them; 2346 Double_t entries = h2->GetEffectiveEntries();; 2347 if (!computeErrors) entries = TMath::Floor( entries + 0.5); // to avoid numerical rounding; 2348 h2->SetEntries( entries );; 2349 }; 2350 else {; 2351 h2->SetEntries( fEntries );; 2352 }; 2353 ; 2354 ; 2355 return h2;; 2356}; 2357 ; 2358 ; 2359////////////////////////////////////////////////////////////////////////////////; 2360/// Project a 3-d histogram into 1 or 2-d histograms depending on the; 2361/// option parameter, which may contain a combination of the characters x,y,z,e; 2362/// - option = ""x"" return the x projection into a TH1D histogram; 2363/// - option = ""y"" return the y projection into a TH1D histogram; 2364/// - option = ""z"" return the z projection into a TH1D histogram; 2365/// - option = ""xy"" return the x versus y projection into a TH2D histogram; 2366/// - option = ""yx"" return the y versus x projection into a TH2D histogram; 2367/// - option = ""xz"" return the x versus z projection into a TH2D histogram; 2368/// - option = ""zx"" return the z versus x projection into a TH2D histogram; 2369/// - option = ""yz"" return the y versus z projection into a TH2D histogram; 2370/// - option = ""zy"" return the z versus y projection into a TH2D histogram; 2371///; 2372/// NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontal; 2373///; 2374/// option = ""o"" original axis range of the target axes will be; 2375/// kept, but only bins inside the selected range will be filled.; 2376///; 2377/// If option contains the string ""e"", errors are computed; 2378///; 2379/// The projection is made for the selected bins only.; 2380/// To select a bin range along an axis, use TAxis::SetRange, eg; 2381/// h3.GetYaxis()->SetRange(23,56);; 2382///; 2383/// NOTE 1: The generated histogram is named th3name + opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:92866,depend,depending,92866,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['depend'],['depending']
Integrability,"else; return p[0] * x[0] + x[1] * cos(x[1]) + p[1];; }; };; 13.7.4 Wrapper Functions; To facilitate the user to insert their own type of function in the needed function interface, helper classes, wrapping the user interface in the ROOT::Math function interfaces are provided. this will avoid the user to re-implement dedicated function classes, following the code example shown in the previous paragraphs.; There is one possible wrapper for every interface explained in the previous section. The following table indicates the wrapper for the most basic ones:. Interface; Function Wrapper. ROOT::Math::IBaseFunctionOneDim; ROOT::Math::Functor1D. ROOT::Math::IGradientFunctionOneDim; ROOT::Math::GradFunctor1D. ROOT::Math::IBaseFunctionMultiDim; ROOT::Math::Functor. ROOT::Math::IGradientFunctionMultiDim; ROOT::Math::GradFunctor. Thee functor wrapper are defined in the header file Math/Functor.h.; 13.7.4.1 Wrapping One Dimensional Functions; The ROOT::Math::Functor1D is used to wrap one-dimensional functions It can wrap all the following types: * A free C function of type double ()(double ). * Any C++ callable object implementation double operator()( double ). * A class member function with the correct signature like double Foo::Eval(double ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval).; Example:; #include ""Math/Functor.h"". class MyFunction1D {. public:. double operator()(double x) const {; return x*x;; }. double Eval(double x) const { return x+x; }; };. double freeFunction1D(double x ) {; return 2*x;; }. int main(); {; // wrapping a free function; ROOT::Math::Functor1D f1(&freeFunction1D);. MyFunction1D myf1;. // wrapping a function object implementing operator(); ROOT::Math::Functor1D f2(myf1);. // wrapping a class member function; ROOT::Math::Functor1D f3(&myf1,&MyFunction1D::Eval);. cout << f1(2) << endl;; cout << f2(2) << endl;; cout << f3(2) << endl;. return 0;; }; 13.7.4.2 Wrapping One Dimensional Gradient Functions; The ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:694589,wrap,wrap,694589,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,5,"['Wrap', 'wrap']","['Wrapping', 'wrap']"
Integrability,"elvirtual void SaveLevel(EEnvLevel level)Write the resource file for a certain level.Definition TEnv.cxx:664; TEnv::~TEnvvirtual ~TEnv()Delete the resource table.Definition TEnv.cxx:430; TEnv::TEnvTEnv(const TEnv &)=delete; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition THashList.cxx:207; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TIterDefinition TCollection.h:235; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TReadEnvParserDefinition TEnv.cxx:228; TReadEnvParser::KeyValuevoid KeyValue(const TString &name, const TString &value, const TString &type) overrideDefinition TEnv.cxx:235; TReadEnvParser::TReadEnvParserTReadEnvParser(TEnv *e, FILE *f, EEnvLevel l)Definition TEnv.cxx:234; TReadEnvParser::fLevelEEnvLevel fLevelDefinition TEnv.cxx:231; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:30149,message,message,30149,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['message'],['message']
Integrability,"ely it has a problem: it also has the bin bias that this tutorial; demonstrates, to if we would use it, the biases would cancel out.; """"""; data_h = ROOT.RooDataHist(""dataH"", ""dataH"", {x}); x_binning = x.getBinning(); ; for i_bin in range(x.numBins()):; x.setRange(""bin"", x_binning.binLow(i_bin), x_binning.binHigh(i_bin)); integ = pdf.createIntegral(x, NormSet=x, Range=""bin""); ROOT.SetOwnership(integ, True); integ.getVal(); data_h.set(i_bin, n_events * integ.getVal(), -1); ; return data_h; ; ; def enableBinIntegrator(func, num_bins):; """"""; Force numeric integration and do this numeric integration with the; RooBinIntegrator, which sums the function values at the bin centers.; """"""; custom_config = ROOT.RooNumIntConfig(func.getIntegratorConfig()); custom_config.method1D().setLabel(""RooBinIntegrator""); custom_config.getConfigSection(""RooBinIntegrator"").setRealValue(""numBins"", num_bins); func.setIntegratorConfig(custom_config); func.forceNumInt(True); ; ; def disableBinIntegrator(func):; """"""; Reset the integrator config to disable the RooBinIntegrator.; """"""; func.setIntegratorConfig(); func.forceNumInt(False); ; ; # Silence info output for this tutorial; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Minimization); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Fitting); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Generation); ; # Exponential example; # -------------------; ; # Set up the observable; x = ROOT.RooRealVar(""x"", ""x"", 0.1, 5.1); x.setBins(10); # fewer bins so we have larger binning effects for this demo; ; # Let's first look at the example of an exponential function; c = ROOT.RooRealVar(""c"", ""c"", -1.8, -5, 5); expo = ROOT.RooExponential(""expo"", ""expo"", x, c); ; # Generate an Asimov dataset such that the only difference between the fit; # result and the true parameters comes from binning effects.; expo_data = generateBinnedAsimov(expo, x, 10000); ; # If you do the fit the usual was in RooFit, you will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:1994,integrat,integrator,1994,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,1,['integrat'],['integrator']
Integrability,"em::fBeepDurationUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC; TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheSystem.html:16770,message,message,16770,root/html526/TDCacheSystem.html,https://root.cern,https://root.cern/root/html526/TDCacheSystem.html,1,['message'],['message']
Integrability,"em::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetSystem.html:17813,message,message,17813,root/html528/TXNetSystem.html,https://root.cern,https://root.cern/root/html528/TXNetSystem.html,4,['message'],['message']
Integrability,"emap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableWrappers(bool value = true); Enable call wrappers (also known as stubs) if value is true;; disable if value is false. void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:19898,wrap,wrappers,19898,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['wrap'],['wrappers']
Integrability,"ember Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkDfltBlockSize ; kDfltWindowSize ; kBinary ; kAscii . Definition at line 68 of file TFTP.h. Constructor & Destructor Documentation. ◆ TFTP() [1/3]. TFTP::TFTP ; (; ). inlineprivate . Definition at line 53 of file TFTP.h. ◆ TFTP() [2/3]. TFTP::TFTP ; (; const TFTP & ; ). privatedelete . ◆ TFTP() [3/3]. TFTP::TFTP ; (; const char * ; url, . Int_t ; par = 1, . Int_t ; wsize = kDfltWindowSize, . TSocket * ; sock = nullptr . ). Open connection to host specified by the url using par parallel sockets. ; The url has the form: [root[s,k]://]host[:port]. If port is not specified the default rootd port (1094) will be used. Using wsize one can specify the tcp window size. Normally this is not needed when using parallel sockets. An existing connection (TSocket *sock) can also be used to establish the FTP session. ; Definition at line 74 of file TFTP.cxx. ◆ ~TFTP(). TFTP::~TFTP ; (; ). virtual . TFTP dtor. Send close message and close socket. ; Definition at line 149 of file TFTP.cxx. Member Function Documentation. ◆ AccessPathName(). Bool_t TFTP::AccessPathName ; (; const char * ; path, . EAccessMode ; mode = kFileExists, . Bool_t ; print = kFALSE . ). Returns kFALSE if one can access a file using the specified access mode. ; Mode is the same as for the Unix access(2) function. Attention, bizarre convention of return value!! ; Definition at line 1111 of file TFTP.cxx. ◆ Ascii(). void TFTP::Ascii ; (; ). inline . Definition at line 107 of file TFTP.h. ◆ ascii(). void TFTP::ascii ; (; ). inline . Definition at line 123 of file TFTP.h. ◆ bin(). void TFTP::bin ; (; ). inline . Definition at line 122 of file TFTP.h. ◆ Binary(). void TFTP::Binary ; (; ). inline . Definition at line 106 of file TFTP.h. ◆ bye(). void TFTP::bye ; (; ). inline . Definition at line 121 of file TFTP.h. ◆ cd(). void TFTP::cd ; (; const char * ; dir); const. inline . Definition at line 113 of file TFTP.h. ◆ ChangeDirectory(). Int_t TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:14448,message,message,14448,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['message'],['message']
Integrability,"ember Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:46179,message,message,46179,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,6,['message'],"['message', 'messages']"
Integrability,"emberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory(ClassInfo_t* ) const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. Bool_t MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. std::string MethodInfo_TypeNormalizedName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:41941,Interface,Interface,41941,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"embers ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:1405,interface,interface,1405,doc/master/classTMVA_1_1GeneticFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html,1,['interface'],['interface']
Integrability,"embers ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:1384,depend,dependent,1384,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['depend'],['dependent']
Integrability,"embers;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; typedef IBaseFunctionMultiDimTempl< double > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/WrappedParamFunction.h>. Inheritance diagram for ROOT::Math::WrappedParamFunctionGen< FuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ WrappedParamFunctionGen() [1/3]. template<typename FuncPtr = FreeMultiFunctionPtr> . ROOT::Math::WrappedParamFunctionGen< FuncPtr >::WrappedParamFunctionGen ; (; const FuncPtr & ; func, . unsigned int ; dim, . unsigned int ; npar, . const double * ; par, . const unsigned int * ; idx . ). inline . Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became parameters in the new API. ; Definition at line 152 of file WrappedParamFunction.h. ◆ WrappedParamFunctionGen() [2/3]. template<typename FuncPtr = FreeMultiFunctionPtr> . ROOT::Math::WrappedParamFunctionGen< FuncPtr >::WrappedParamFunctionGen ; (; FuncPtr & ; func, . unsigned int ; dim, . unsigned int ; npar, . const double * ; par, . const unsigned int * ; idx . ). inline . Constructor as before but taking now a non - const pointer to a callable object. ; This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects ; Definition at line 166 of file WrappedParamFunction.h. ◆ WrappedParamFunctionGen() [3/3]. template<typename FuncPtr = FreeMultiFunctionPtr> . ROOT::Math::WrappedParamFunctionGen< FuncPtr >::WrappedParamFunctionGen ; (; const WrappedParamFunctionGen< FuncPtr > & ; ). privatedelete . Member Function D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html:4380,wrap,wrapped,4380,doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,1,['wrap'],['wrapped']
Integrability,"ement of two-dimensional histograms. The inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter plot, but if Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for bin j. ; \[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \]. The bin content is always the mean of the Y values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(j) is zero (eg, case of 1 entry only in one bin) the bin error e(j) is computed from the average of the s(j) for all bins if the static function TProfile::Approximate() has been called. This simple/crude approximation was suggested in order to keep the bin during a fit operation. But note that this approximation is not the default behaviour. See also TProfile::BuildOptions for more on error options. Creating and drawing a profil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:1655,depend,depending,1655,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['depend'],['depending']
Integrability,"ement::kSTLdeque; static TStreamerElement::ESTLtypeTStreamerElement::kSTLlist; static TStreamerElement::ESTLtypeTStreamerElement::kSTLmap; static TStreamerElement::ESTLtypeTStreamerElement::kSTLmultimap; static TStreamerElement::ESTLtypeTStreamerElement::kSTLmultiset; static TStreamerElement::ESTLtypeTStreamerElement::kSTLset; static TStreamerElement::ESTLtypeTStreamerElement::kSTLstring; static TStreamerElement::ESTLtypeTStreamerElement::kSTLvector; static TObject::(anonymous)TObject::kSingleKey; static TStreamerElement::(anonymous)TStreamerElement::kWholeObject; static TStreamerElement::(anonymous)TStreamerElement::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; UInt_t&fBaseCheckSum!checksum of the base class (used during memberwise streaming); TClass*fBaseClass!pointer to base class; Int_tfBaseVersionversion number of the base class (used during memberwise streaming); TClass*TStreamerElement::fClassObject!pointer to class of object; ClassConvStreamerFunc_tfConvStreamerFunc!Pointer to a wrapper around a custom convertion streamer member function.; TStringfErrorMsg!Error message in case of checksum/version mismatch.; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom strea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerBase.html:9922,wrap,wrapper,9922,root/html602/TStreamerBase.html,https://root.cern,https://root.cern/root/html602/TStreamerBase.html,2,['wrap'],['wrapper']
Integrability,"emented from TInterpreter.; Definition at line 8666 of file TCling.cxx. ◆ DataMemberInfo_TypeSize(). int TCling::DataMemberInfo_TypeSize ; (; DataMemberInfo_t * ; dminfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8674 of file TCling.cxx. ◆ DataMemberInfo_TypeTrueName(). const char * TCling::DataMemberInfo_TypeTrueName ; (; DataMemberInfo_t * ; dminfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8690 of file TCling.cxx. ◆ DataMemberInfo_ValidArrayIndex(). const char * TCling::DataMemberInfo_ValidArrayIndex ; (; DataMemberInfo_t * ; dminfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8714 of file TCling.cxx. ◆ Declare(). bool TCling::Declare ; (; const char * ; code). finalvirtual . Declare code to the interpreter, without any of the interpreter actions that could trigger a re-interpretation of the code. ; I.e. make cling behave like a compiler: no dynamic lookup, no input wrapping for subsequent execution, no automatic provision of declarations but just a plain #include. Returns true on success, false on failure. ; Implements TInterpreter.; Definition at line 3098 of file TCling.cxx. ◆ DeepAutoLoadImpl(). Int_t TCling::DeepAutoLoadImpl ; (; const char * ; cls, . std::unordered_set< std::string > & ; visited, . bool ; nameIsNormalized . ). staticprivate . Definition at line 6204 of file TCling.cxx. ◆ DeleteGlobal(). Int_t TCling::DeleteGlobal ; (; void * ; obj). finalvirtual . Delete obj from Cling symbol table so it cannot be accessed anymore. ; Returns 1 in case of success and 0 in case object was not in table. ; Implements TInterpreter.; Definition at line 3783 of file TCling.cxx. ◆ DeleteVariable(). Int_t TCling::DeleteVariable ; (; const char * ; name). finalvirtual . Undeclare obj called name. ; Returns 1 in case of success, 0 for failure. ; Implements TInterpreter.; Definition at line 3798 of file TCling.cxx. ◆ DiagnoseIfInterpreterException(). bool TCling::Diagnos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:81635,wrap,wrapping,81635,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['wrap'],['wrapping']
Integrability,"emented from TObject.; Definition at line 250 of file TRootBrowserLite.cxx. ◆ Hash(). ULong_t TIconBoxThumb::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TIconBoxThumb::HashULong_t Hash() const overrideReturn hash value for this object.Definition TRootBrowserLite.cxx:249; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 249 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fLarge. const TGPicture* TIconBoxThumb::fLarge. Definition at line 242 of file TRootBrowserLite.cxx. ◆ fName. TString TIconBoxThumb::fName. Definition at line 240 of file TRootBrowserLite.cxx. ◆ fSmall. const TGPicture* TIconBoxThumb::fSmall. Definition at line 241 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TIconBoxThumb. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:11536,message,message,11536,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['message'],['message']
Integrability,"emented from TSystem.; Definition at line 5010 of file TWinNTSystem.cxx. ◆ SetDynamicPath(). void TWinNTSystem::SetDynamicPath ; (; const char * ; path). overridevirtual . Set the dynamic path to a new value. ; If the value of 'path' is zero, the dynamic path is reset to its default value. ; Reimplemented from TSystem.; Definition at line 4100 of file TWinNTSystem.cxx. ◆ Setenv(). void TWinNTSystem::Setenv ; (; const char * ; name, . const char * ; value . ). overridevirtual . Set environment variable. ; Reimplemented from TSystem.; Definition at line 3847 of file TWinNTSystem.cxx. ◆ SetFPEMask(). Int_t TWinNTSystem::SetFPEMask ; (; Int_t ; mask = kDefaultMask). overridevirtual . Set which conditions trigger a floating point exception. ; Return the previous set of conditions. ; Reimplemented from TSystem.; Definition at line 1591 of file TWinNTSystem.cxx. ◆ SetGUIThreadMsgHandler(). void TWinNTSystem::SetGUIThreadMsgHandler ; (; ThreadMsgFunc_t ; func). Set the (static part of) the event handler func for GUI messages. ; Definition at line 1314 of file TWinNTSystem.cxx. ◆ SetNonBlock(). int TWinNTSystem::SetNonBlock ; (; int ; fd). Make descriptor fd non-blocking. ; Definition at line 2921 of file TWinNTSystem.cxx. ◆ SetProgname(). void TWinNTSystem::SetProgname ; (; const char * ; name). overridevirtual . Set the application name (from command line, argv[0]) and copy it in gProgName. ; Copy the application pathname in gProgPath. ; Reimplemented from TSystem.; Definition at line 1192 of file TWinNTSystem.cxx. ◆ SetSockOpt(). int TWinNTSystem::SetSockOpt ; (; int ; sock, . int ; opt, . int ; val . ). overridevirtual . Set socket option. ; Reimplemented from TSystem.; Definition at line 5043 of file TWinNTSystem.cxx. ◆ Sleep(). void TWinNTSystem::Sleep ; (; UInt_t ; milliSec). overridevirtual . Sleep milliSec milli seconds. ; The Sleep function suspends the execution of the CURRENT THREAD for a specified interval. ; Reimplemented from TSystem.; Definition at line 4583 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:70546,message,messages,70546,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['message'],['messages']
Integrability,"emented from TVirtualX.; Definition at line 4311 of file TGCocoa.mm. ◆ PutImage(). void TGCocoa::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 2622 of file TGCocoa.mm. ◆ PutPixel(). void TGCocoa::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX.; Definition at line 2600 of file TGCocoa.mm. ◆ QueryColor(). void TGCocoa::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX.; Definition at line 2927 of file TGCocoa.mm. ◆ QueryPointer() [1/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:104293,depend,dependent,104293,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['depend'],['dependent']
Integrability,"emented in RooIntegralMorph.; Definition at line 34 of file RooAbsCachedPdf.h. ◆ setInterpolationOrder(). void RooAbsCachedPdf::setInterpolationOrder ; (; int ; order). Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist shapes. ; Definition at line 269 of file RooAbsCachedPdf.cxx. ◆ Streamer(). void RooAbsCachedPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooIntegralMorph, RooCachedPdf, and RooFFTConvPdf. ◆ StreamerNVirtual(). void RooAbsCachedPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 137 of file RooAbsCachedPdf.h. Friends And Related Symbol Documentation. ◆ PdfCacheElem. friend class PdfCacheElem. friend . Definition at line 96 of file RooAbsCachedPdf.h. Member Data Documentation. ◆ _anaIntMap. std::map<Int_t,AnaIntConfig> RooAbsCachedPdf::_anaIntMap. mutableprotected . ! Map for analytical integration codes ; Definition at line 129 of file RooAbsCachedPdf.h. ◆ _anaReg. RooAICRegistry RooAbsCachedPdf::_anaReg. mutableprotected . ! Registry for analytical integration codes ; Definition at line 121 of file RooAbsCachedPdf.h. ◆ _cacheMgr. RooObjCacheManager RooAbsCachedPdf::_cacheMgr. mutableprotected . Definition at line 111 of file RooAbsCachedPdf.h. ◆ _disableCache. bool RooAbsCachedPdf::_disableCache = false. private . Flag to run object in passthrough (= non-caching mode) ; Definition at line 135 of file RooAbsCachedPdf.h. ◆ _ipOrder. Int_t RooAbsCachedPdf::_ipOrder. protected . The cache manager. ; Definition at line 112 of file RooAbsCachedPdf.h. Libraries for RooAbsCachedPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCachedPdf.h; roofit/roofitcore/src/RooAbsCachedPdf.cxx. RooAbsCachedPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:85588,integrat,integration,85588,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,2,['integrat'],['integration']
Integrability,"ements TInterpreter.; Definition at line 211 of file TCling.h. ◆ GetFunction(). TInterpreter::DeclId_t TCling::GetFunction ; (; ClassInfo_t * ; cl, . const char * ; funcname . ). finalvirtual . Return pointer to cling interface function for a method of a class with a certain name. ; Implements TInterpreter.; Definition at line 5029 of file TCling.cxx. ◆ GetFunctionName(). void TCling::GetFunctionName ; (; const clang::Decl * ; decl, . std::string & ; name . ); const. virtual . Definition at line 8761 of file TCling.cxx. ◆ GetFunctionOverloads(). void TCling::GetFunctionOverloads ; (; ClassInfo_t * ; cl, . const char * ; funcname, . std::vector< DeclId_t > & ; res . ); const. finalvirtual . Insert overloads of name in cl to res. ; Implements TInterpreter.; Definition at line 5048 of file TCling.cxx. ◆ GetFunctionTemplate(). TInterpreter::DeclId_t TCling::GetFunctionTemplate ; (; ClassInfo_t * ; cl, . const char * ; funcname . ). finalvirtual . Return pointer to cling interface function for a method of a class with a certain name. ; Implements TInterpreter.; Definition at line 5177 of file TCling.cxx. ◆ GetFunctionWithPrototype(). TInterpreter::DeclId_t TCling::GetFunctionWithPrototype ; (; ClassInfo_t * ; opaque_cl, . const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). finalvirtual . Return pointer to cling interface function for a method of a class with a certain prototype, i.e. ; ""char*,int,float"". If the class is 0 the global function list will be searched. ; Implements TInterpreter.; Definition at line 5155 of file TCling.cxx. ◆ GetFunctionWithValues(). TInterpreter::DeclId_t TCling::GetFunctionWithValues ; (; ClassInfo_t * ; opaque_cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). finalvirtual . Return pointer to cling DeclId for a method of a class with a certain prototype, i.e. ; ""char*,int,float"". If the class is 0 the globa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:99063,interface,interface,99063,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['interface'],['interface']
Integrability,"ements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::IntegrationMultiDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::IntegrationMultiDim::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::MiserParameters& p); virtual voidSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::IntegrationMultiDim::Type type); voidSetTypeName(const char* typeName); doubleSigma(); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const. protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMCIntegrator.html:1136,Integrat,IntegrationMultiDim,1136,root/html532/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMCIntegrator.html,12,['Integrat'],"['IntegrationMultiDim', 'IntegratorMultiDimOptions', 'IntegratorMultiDimOptionsOptions']"
Integrability,"emoveRootProxy ; (; ). Remove root window proxy. ; Definition at line 1064 of file TGDNDManager.cxx. ◆ SendDNDDrop(). void TGDNDManager::SendDNDDrop ; (; Window_t ; target). protected . Send DND drop message to target window. ; Definition at line 588 of file TGDNDManager.cxx. ◆ SendDNDEnter(). void TGDNDManager::SendDNDEnter ; (; Window_t ; target). protected . Send DND enter message to target window. ; Definition at line 481 of file TGDNDManager.cxx. ◆ SendDNDFinished(). void TGDNDManager::SendDNDFinished ; (; Window_t ; src). protected . Send DND finished message to source window. ; Definition at line 609 of file TGDNDManager.cxx. ◆ SendDNDLeave(). void TGDNDManager::SendDNDLeave ; (; Window_t ; target). protected . Send DND leave message to target window. ; Definition at line 521 of file TGDNDManager.cxx. ◆ SendDNDPosition(). void TGDNDManager::SendDNDPosition ; (; Window_t ; target, . int ; x, . int ; y, . Atom_t ; action, . Time_t ; timestamp . ). protected . Send DND position message to target window. ; Definition at line 543 of file TGDNDManager.cxx. ◆ SendDNDStatus(). void TGDNDManager::SendDNDStatus ; (; Window_t ; target, . Atom_t ; action . ). protected . Send DND status message to source window. ; Definition at line 566 of file TGDNDManager.cxx. ◆ SetDragPixmap(). void TGDNDManager::SetDragPixmap ; (; Pixmap_t ; pic, . Pixmap_t ; mask, . Int_t ; hot_x, . Int_t ; hot_y . ). Set drag window pixmaps and hotpoint. ; Definition at line 893 of file TGDNDManager.cxx. ◆ SetMainFrame(). void TGDNDManager::SetMainFrame ; (; TGFrame * ; main). inline . Definition at line 162 of file TGDNDManager.h. ◆ SetRootProxy(). Bool_t TGDNDManager::SetRootProxy ; (; ). Set root window proxy. ; Definition at line 1041 of file TGDNDManager.cxx. ◆ StartDrag(). Bool_t TGDNDManager::StartDrag ; (; TGFrame * ; src, . Int_t ; x_root, . Int_t ; y_root, . Window_t ; grabWin = kNone . ). Start dragging. ; Definition at line 905 of file TGDNDManager.cxx. ◆ Streamer(). void TGDNDManager::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:23867,message,message,23867,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,1,['message'],['message']
Integrability,"empl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  MinimTransformFunction (const IMultiGradFunction *f, const std::vector< ROOT::Math::EMinimVariableType > &types, const std::vector< double > &values, const std::map< unsigned int, std::pair< double, double > > &bounds);  Constructor from a IMultiGradFunction interface that is externally managed vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ) variable values (used for the fixed ones) and a map with the bounds (for the bounded variables) ;  ;  ~MinimTransformFunction () override;  Destructor (no operation) ;  ; IMultiGenFunction * Clone () const override;  clone: not supported (since unique_ptr used in the fVariables) ;  ; void GradientTransformation (const double *x, const double *gExt, double *gInt) const;  transform gradient vector (external -> internal) at internal point x ;  ; void InvStepTransformation (const double *x, const double *sext, double *sint) const;  inverse transformation for steps (external -> internal) at external point x ;  ; void InvTransformation (const double *xext, double *xint) const;  inverse transformation (external -> internal) ;  ; void MatrixTransformation (const double *x, const double *covInt, double *covExt) const;  transform covariance matrix (internal -> external) at internal point x use row storages for matrices m(i,j) = rep[ i * dim + j] ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; unsigned int NTot () const;  ; const IMultiGradFunction * OriginalFunction () const;  ; const double * Transformation (const double *x) const;  transform from internal to external result is cached also inside the class ;  ; void Transformation (const double *xint, do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html:1440,interface,interface,1440,doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,1,['interface'],['interface']
Integrability,"emplate<class AParamType > . static const char * TParameter< AParamType >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 119 of file TParameter.h. ◆ GetName(). template<class AParamType > . const char * TParameter< AParamType >::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 66 of file TParameter.h. ◆ GetVal(). template<class AParamType > . const AParamType & TParameter< AParamType >::GetVal ; (; ); const. inline . Definition at line 67 of file TParameter.h. ◆ Hash(). template<class AParamType > . ULong_t TParameter< AParamType >::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TParameter::HashULong_t Hash() const overrideReturn hash value for this object.Definition TParameter.h:92; TROOT::RecursiveRemovevoid RecursiveRemove(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:13727,rout,routine,13727,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,1,['rout'],['routine']
Integrability,"emplate<class F , class T , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector. ; Implementation of the Map method.; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 184 of file TExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 162 of file TExecutor.hxx. ◆ MapReduce() [1/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:14462,wrap,wrapping,14462,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html,2,['wrap'],['wrapping']
Integrability,"emplateInNamespace(). static clang::ClassTemplateDecl * FindTemplateInNamespace ; (; clang::Decl * ; decl). static . Find a template decl within N nested namespaces, 0<=N<inf Assumes 1 and only 1 template present and 1 and only 1 entity contained by the namespace. ; Example: ns1::ns2::..::nsN::myTemplate Returns nullptr in case of error ; Definition at line 680 of file TCling.cxx. ◆ GetClassSharedLibsForModule(). static std::string GetClassSharedLibsForModule ; (; const char * ; cls, . cling::LookupHelper & ; LH, . bool ; skipCore . ). static . Definition at line 6996 of file TCling.cxx. ◆ GetSharedLibImmediateDepsSlow(). static std::string GetSharedLibImmediateDepsSlow ; (; std::string ; lib, . cling::Interpreter * ; interp, . bool ; skipLoadedLibs = true . ). static . This interface returns a list of dependent libraries in the form: lib libA.so libB.so libC.so. ; The first library is the library we are searching dependencies for. Note: In order to speed up the search, we display the dependencies of the libraries which are not yet loaded. For instance, if libB.so was already loaded the list would contain: lib libA.so libC.so. ; Definition at line 7161 of file TCling.cxx. ◆ HandleInterpreterException(). static int HandleInterpreterException ; (; cling::MetaProcessor * ; metaProcessor, . const char * ; input_line, . cling::Interpreter::CompilationResult & ; compRes, . cling::Value * ; result . ). static . Let cling process a command line. ; If the command is executed and the error is 0, then the return value is the int value corresponding to the result of the executed command (float and double return values will be truncated). ; Definition at line 2423 of file TCling.cxx. ◆ HasASTFileOnDisk(). static bool HasASTFileOnDisk ; (; clang::Module * ; M, . const clang::Preprocessor & ; PP, . std::string * ; FullFileName = nullptr . ). static . Checks if there is an ASTFile on disk for the given module M. ; Definition at line 1065 of file TCling.cxx. ◆ hasParsedRootmapForLib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx.html:13221,depend,dependencies,13221,doc/master/TCling_8cxx.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx.html,1,['depend'],['dependencies']
Integrability,"en ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. This method returns the bias vector times scaling factor, f*x0; The use of binMap is explained with the documentation of the GetOutput() method ; Definition at line 2935 of file TUnfold.cxx. ◆ GetBinFromRow(). Int_t TUnfold::GetBinFromRow ; (; int ; ix); const. inlineprotected . converts matrix row to truth histogram bin number ; Definition at line 236 of file TUnfold.h. ◆ GetChi2A(). Double_t TUnfold::GetChi2A ; (; void ; ); const. inline . get χ2A contribution determined in recent unfolding ; Definition at line 329 of file TUnfold.h. ◆ GetChi2L(). Double_t TUnfold::GetChi2L ; (; void ; ); const. get χ2L contribution determined in recent unfolding ; Definition at line 3231 of file TUnfold.cxx. ◆ GetDF(). double TUnfold::GetDF ; (; void ; ); const. return the effecive number of degrees of freedom See e.g. ; arXiv:1612.09415 and the references therein; Here, DF is calculated using the dependence of the unfolding result x on the data y; This calculation is done assuming a CONSTANT data variance. I.e. the uncertainties reported to TUnfold in ""SetInput()"" ought to be independent of the measurements. This is NOT true for standard Poisson-distributed data. In practice the impact is expected to be small ; Definition at line 3749 of file TUnfold.cxx. ◆ GetDXDAM(). const TMatrixDSparse * TUnfold::GetDXDAM ; (; int ; i); const. inlineprotected . matrix contributions of the derivative dx/dA ; Definition at line 252 of file TUnfold.h. ◆ GetDXDAZ(). const TMatrixDSparse * TUnfold::GetDXDAZ ; (; int ; i); const. inlineprotected . vector contributions of the derivative dx/dA ; Definition at line 254 of file TUnfold.h. ◆ GetDXDtauSquared(). const TMatrixDSparse * TUnfold::GetDXDtauSquared ; (; void ; ); const. inlineprotected . vector of derivative dx/dtauSquared, using internal bin counting ; Definition at line 265 of file TUnfold.h. ◆ GetDXDY() [1/2]. void TUnfold::GetDXDY ; (; TH2 * ; dxdy); const. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:33236,depend,dependence,33236,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['depend'],['dependence']
Integrability,"en < vec->len) ? vec->ptr[len] : '\0';; 14885 so->is_ssl = (ch == 's');; 14886 so->ssl_redir = (ch == 'r');; 14887 if ((ch == '\0') || (ch == 's') || (ch == 'r')) {; 14888 return 1;; 14889 }; 14890 }; 14891 ; 14892 /* Reset ip_version to 0 if there is an error */; 14893 *ip_version = 0;; 14894 return 0;; 14895}; 14896 ; 14897 ; 14898/* Is there any SSL port in use? */; 14899static int; 14900is_ssl_port_used(const char *ports); 14901{; 14902 if (ports) {; 14903 /* There are several different allowed syntax variants:; 14904 * - ""80"" for a single port using every network interface; 14905 * - ""localhost:80"" for a single port using only localhost; 14906 * - ""80,localhost:8080"" for two ports, one bound to localhost; 14907 * - ""80,127.0.0.1:8084,[::1]:8086"" for three ports, one bound; 14908 * to IPv4 localhost, one to IPv6 localhost; 14909 * - ""+80"" use port 80 for IPv4 and IPv6; 14910 * - ""+80r,+443s"" port 80 (HTTP) is a redirect to port 443 (HTTPS),; 14911 * for both: IPv4 and IPv4; 14912 * - ""+443s,localhost:8080"" port 443 (HTTPS) for every interface,; 14913 * additionally port 8080 bound to localhost connections; 14914 *; 14915 * If we just look for 's' anywhere in the string, ""localhost:80""; 14916 * will be detected as SSL (false positive).; 14917 * Looking for 's' after a digit may cause false positives in; 14918 * ""my24service:8080"".; 14919 * Looking from 's' backward if there are only ':' and numbers; 14920 * before will not work for ""24service:8080"" (non SSL, port 8080); 14921 * or ""24s"" (SSL, port 24).; 14922 *; 14923 * Remark: Initially hostnames were not allowed to start with a; 14924 * digit (according to RFC 952), this was allowed later (RFC 1123,; 14925 * Section 2.1).; 14926 *; 14927 * To get this correct, the entire string must be parsed as a whole,; 14928 * reading it as a list element for element and parsing with an; 14929 * algorithm equivalent to parse_port_string.; 14930 *; 14931 * In fact, we use local interface names here, not arbitrary; 14932 * hos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:441285,interface,interface,441285,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['interface'],['interface']
Integrability,"en < vec->len) ? vec->ptr[len] : '\0';; 14886 so->is_ssl = (ch == 's');; 14887 so->ssl_redir = (ch == 'r');; 14888 if ((ch == '\0') || (ch == 's') || (ch == 'r')) {; 14889 return 1;; 14890 }; 14891 }; 14892 ; 14893 /* Reset ip_version to 0 if there is an error */; 14894 *ip_version = 0;; 14895 return 0;; 14896}; 14897 ; 14898 ; 14899/* Is there any SSL port in use? */; 14900static int; 14901is_ssl_port_used(const char *ports); 14902{; 14903 if (ports) {; 14904 /* There are several different allowed syntax variants:; 14905 * - ""80"" for a single port using every network interface; 14906 * - ""localhost:80"" for a single port using only localhost; 14907 * - ""80,localhost:8080"" for two ports, one bound to localhost; 14908 * - ""80,127.0.0.1:8084,[::1]:8086"" for three ports, one bound; 14909 * to IPv4 localhost, one to IPv6 localhost; 14910 * - ""+80"" use port 80 for IPv4 and IPv6; 14911 * - ""+80r,+443s"" port 80 (HTTP) is a redirect to port 443 (HTTPS),; 14912 * for both: IPv4 and IPv4; 14913 * - ""+443s,localhost:8080"" port 443 (HTTPS) for every interface,; 14914 * additionally port 8080 bound to localhost connections; 14915 *; 14916 * If we just look for 's' anywhere in the string, ""localhost:80""; 14917 * will be detected as SSL (false positive).; 14918 * Looking for 's' after a digit may cause false positives in; 14919 * ""my24service:8080"".; 14920 * Looking from 's' backward if there are only ':' and numbers; 14921 * before will not work for ""24service:8080"" (non SSL, port 8080); 14922 * or ""24s"" (SSL, port 24).; 14923 *; 14924 * Remark: Initially hostnames were not allowed to start with a; 14925 * digit (according to RFC 952), this was allowed later (RFC 1123,; 14926 * Section 2.1).; 14927 *; 14928 * To get this correct, the entire string must be parsed as a whole,; 14929 * reading it as a list element for element and parsing with an; 14930 * algorithm equivalent to parse_port_string.; 14931 *; 14932 * In fact, we use local interface names here, not arbitrary; 14933 * hos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:441318,interface,interface,441318,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['interface'],['interface']
Integrability,"en archived; Long64_tTQueryResult::fBytesnumber of bytes processed; Bool_tTQueryResult::fDrawtrue if draw action query; TDatimeTQueryResult::fEndtime when processing ended; Long64_tTQueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning(Int_t startlog, const char* par, Int_t nwrks); Call when running starts. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofQueryResult.html:8190,message,messages,8190,root/html528/TProofQueryResult.html,https://root.cern,https://root.cern/root/html528/TProofQueryResult.html,8,['message'],['messages']
Integrability,"en column is missing, provide a default value. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp="""", size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< std::decay_t< T > > Fill (T &&model, const ColumnNames_t &columnList);  Return an object of type T on which T::Fill will be called o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:96159,depend,dependent,96159,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['depend'],['dependent']
Integrability,"en for this formula. Class Charts. Inheritance Chart:. TObject. ←; TTreeFormulaManager. Function documentation; TTreeFormulaManager(); -*Tree FormulaManger default constructor; *-* ======================================. ~TTreeFormulaManager(); -*Tree FormulaManager default destructor; *-* ======================================. void Remove(TTreeFormula* ); Remove a formula from this manager. void Add(TTreeFormula* ); Add a new formula to the list of formulas managed; The manager of the formula will be changed and the old one will be deleted; if it is empty. void AddVarDims(Int_t virt_dim); Add a variable dimension. void CancelDimension(Int_t virt_dim); Cancel a dimension. This is usually called when an out-of-bounds index; is used. void EnableMultiVarDims(); Set the manager as handling a formula with multiple variable dimensions. Int_t GetNdata(Bool_t forceLoadDim = kFALSE); -*-*Return number of available instances in the formulas; *-* ====================================================. Bool_t Sync(); Synchronize all the formulae. void UpdateFormulaLeaves(); this function could be called TTreePlayer::UpdateFormulaLeaves, itself; called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. void UpdateUsedSize(Int_t& virt_dim, Int_t vsize); Reload the array sizes. TTreeFormulaManager(const TTreeFormulaManager& ); Not implemented yet. TTreeFormulaManager& operator=(const TTreeFormulaManager& ). Int_t GetMultiplicity() const; {return fMultiplicity;}. Bool_t Notify(); { UpdateFormulaLeaves(); return kTRUE; }. » Author: Philippe Canal 20/03/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeFormulaManager.html:7901,Synchroniz,Synchronize,7901,root/html604/TTreeFormulaManager.html,https://root.cern,https://root.cern/root/html604/TTreeFormulaManager.html,1,['Synchroniz'],['Synchronize']
Integrability,"en for this formula. Class Charts. Inheritance Chart:. TObject. ←; TTreeFormulaManager. Function documentation; TTreeFormulaManager(); -*Tree FormulaManger default constructor; *-* ======================================. ~TTreeFormulaManager(); -*Tree FormulaManager default destructor; *-* ======================================. void Remove(TTreeFormula* ); Remove a formula from this manager. void Add(TTreeFormula* ); Add a new formula to the list of formulas managed; The manager of the formula will be changed and the old one will be deleted; if it is empty. void AddVarDims(Int_t virt_dim); Add a variable dimension. void CancelDimension(Int_t virt_dim); Cancel a dimension. This is usually called when an out-of-bounds index; is used. void EnableMultiVarDims(); Set the manager as handling a formula with multiple variable dimensions. Int_t GetNdata(Bool_t forceLoadDim = kFALSE); -*-*Return number of available instances in the formulas; *-* ====================================================. Bool_t Sync(); Synchronize all the formulae. void UpdateFormulaLeaves(); this function could be called TTreePlayer::UpdateFormulaLeaves, itself; called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. void UpdateUsedSize(Int_t& virt_dim, Int_t vsize); Reload the array sizes. TTreeFormulaManager(const TTreeFormulaManager& ); Not implemented yet. TTreeFormulaManager& operator=(const TTreeFormulaManager& ). Int_t GetMultiplicity() const; {return fMultiplicity;}. Bool_t Notify(); { UpdateFormulaLeaves(); return kTRUE; }. » Author: Philippe Canal 20/03/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; » Last changed: root/treeplayer:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormulaManager.html:7901,Synchroniz,Synchronize,7901,root/html602/TTreeFormulaManager.html,https://root.cern,https://root.cern/root/html602/TTreeFormulaManager.html,1,['Synchroniz'],['Synchronize']
Integrability,"en from the dedicated list and / or the specified file. ; If the fInputData is empty the specified file is sent over. If there is no specified file, a file named ""inputdata.root"" is created locally with the content of fInputData and sent over to the master. If both fInputData and the specified file are not empty, a copy of the file is made locally and augmented with the content of fInputData. ; Reimplemented in TProofLite.; Definition at line 9612 of file TProof.cxx. ◆ SendLogToWindow(). void TProof::SendLogToWindow ; (; Bool_t ; mode). inline . Definition at line 1017 of file TProof.h. ◆ SendObject(). Int_t TProof::SendObject ; (; const TObject * ; obj, . ESlaves ; list = kActive . ). private . Send object to master or slave servers. ; Returns number of slaves object was sent to, -1 in case of error. ; Definition at line 7054 of file TProof.cxx. ◆ SendPrint(). Int_t TProof::SendPrint ; (; Option_t * ; option = """"). private . Send print command to master server. ; Returns number of slaves message was sent to. Returns -1 in case of error. ; Definition at line 7068 of file TProof.cxx. ◆ SetActive(). void TProof::SetActive ; (; Bool_t ; = kTRUE). inline . Definition at line 988 of file TProof.h. ◆ SetAlias(). void TProof::SetAlias ; (; const char * ; alias = """"). virtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:141268,message,message,141268,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,"en list is empty. TObjLink * LinkAt(Int_t idx) const; Return the TObjLink object at index idx. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Return a list iterator. TObjLink * NewLink(TObject* obj, TObjLink* prev = NULL); Return a new TObjLink. TObjLink * NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); Return a new TObjOptLink (a TObjLink that also stores the option). void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections). TObject * Remove(TObject* obj); Remove object from the list. TObject * Remove(TObjLink* lnk); Remove object link (and therefore the object it contains); from the list. void RemoveLast(); Remove the last object of the list. void Sort(Bool_t order = kSortAscending); Sort linked list. Real sorting is done in private function DoSort().; The list can only be sorted when is contains objects of a sortable; class. Bool_t LnkCompare(TObjLink* l1, TObjLink* l2); Compares the objects stored in the TObjLink objects.; Depending on the flag IsAscending() the function returns; true if the object in l1 <= l2 (ascending) or l2 <= l1 (descending). TObjLink ** DoSort(TObjLink** head, Int_t n); Sort linked list. void Streamer(TBuffer& ); Stream all objects in the collection to or from the I/O buffer. TList(const TList& ). TList& operator=(const TList& ). TList(); { }. TList(TObject* ); { }. void Add(TObject* obj); { AddLast(obj); }. void Add(TObject* obj, Option_t* opt); { AddLast(obj, opt); }. TObjLink * FirstLink() const; { return fFirst; }. TObjLink * LastLink() const; { return fLast; }. Bool_t IsAscending(); { return fAscending; }. » Author: Fons Rademakers 10/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-20 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TList.html:16294,Depend,Depending,16294,root/html534/TList.html,https://root.cern,https://root.cern/root/html534/TList.html,1,['Depend'],['Depending']
Integrability,"en merged use something like:; if (newchain->GetEntries()!=oldchain->GetEntries()) {; ... not all the file have been copied ...; }. void ParseTreeFilename(const char* name, TString& filename, TString& treename, TString& query, TString& suffix, Bool_t wildcards) const; -- Get the tree url or filename and other information from the name. A treename and a url's query section is split off from name. The; splitting depends on whether the resulting filename is to be; subsequently treated for wildcards or not, since the question mark is; both the url query identifier and a wildcard. Wildcard matching is not; done in this method itself. /a/path/file.root[/treename]; xxx://a/path/file.root[/treename][?query]; xxx://a/path/file.root[?query[#treename]]. Inputs:; name - is the original name; wildcards - indicates if the resulting filename will be treated for; wildcards. For backwards compatibility, with most protocols; this flag suppresses the search for the url fragment; identifier and limits the query identifier search to cases; where the tree name is given as a trailing slash-separated; string at the end of the file name.; Outpus:; filename - the url or filename to be opened or matched; treename - the treename, which may be found as a trailing part of the; name or in a url fragment section. If not found this will; be empty.; query - is the url query section, including the leading question; mark. If not found or the query section is only followed by; a fragment this will be empty.; suffix - the portion of name which was removed to form filename. void Print(Option_t* option = """") const; -- Print the header information of each tree in the chain.; See TTree::Print for a list of options. Long64_t Process(const char* filename, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process all entries in this chain, calling functions in filename.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success.; See TTree::Process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:48311,protocol,protocols,48311,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,6,['protocol'],['protocols']
Integrability,"en or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:16591,message,message,16591,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,18,['message'],['message']
Integrability,"en result. ;  ; SnapshotPtr_t VariationsFor (SnapshotPtr_t resPtr);  . Typedef Documentation. ◆ SnapshotPtr_t. using ROOT::RDF::Experimental::SnapshotPtr_t = typedef ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void> >. Definition at line 269 of file RDFHelpers.hxx. Function Documentation. ◆ AddProgressBar() [1/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDataFrame ; df). Add ProgressBar to an RDataFrame. ; Parameters. [in]dfRDataFrame for which ProgressBar is called. This function adds a ProgressBar to display the event statistics in the terminal every m events and every n seconds, including elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). ProgressBar should be added after the dataframe object (df) is created first: ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; For more details see ROOT::RDF::Experimental::ProgressHelper Class. ; Definition at line 382 of file RDFHelpers.cxx. ◆ AddProgressBar() [2/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDF::RNode ; df). Add ProgressBar to a ROOT::RDF::RNode. ; Parameters. [in]dfRDataFrame node at which ProgressBar is called. The ProgressBar can be added not only at the RDataFrame head node, but also at any any computational node, such as Filter or Define. . Example usage:; ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57. Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:2549,interface,interface,2549,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,1,['interface'],['interface']
Integrability,"en the specified TH1 objects; which may have fixed or variable bin widths, but which must both have; the same binning. The asymmetry is calculated as (1-2)/(1+2). Error bars are; calculated using Binomial statistics. Prints a warning and rounds; any bins with non-integer contents. Use the optional parameter to; specify the confidence level in units of sigma to use for; calculating error bars. The nominal bin width specifies the; default used by addAsymmetryBin(), and is used to set the relative; normalization of bins with different widths. If not set, the; nominal bin width is calculated as range/nbins. RooHist(const RooHist& hist1, const RooHist& hist2, Double_t wgt1 = 1.0, Double_t wgt2 = 1.0, RooAbsData::ErrorType etype = RooAbsData::Poisson, Double_t xErrorFrac = 1.0); Create histogram as sum of two existing histograms. If Poisson errors are selected the histograms are; added and Poisson confidence intervals are calculated for the summed content. If wgt1 and wgt2 are not; 1 in this mode, a warning message is printed. If SumW2 errors are selectd the histograms are added; and the histograms errors are added in quadrature, taking the weights into account. void initialize(); Perform common initialization for all constructors. Double_t getFitRangeNEvt() const; Return the number of events of the dataset associated with this RooHist.; This is the number of events in the RooHist itself, unless a different; value was specified through setRawEntries(). Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Calculate integral of histogram in given range. Double_t getFitRangeBinW() const; Return (average) bin width of this RooHist. Int_t roundBin(Double_t y); Return the nearest positive integer to the input value; and print a warning if an adjustment is required. void addBin(Axis_t binCenter, Double_t n, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the specified integer bin contents; and using an error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHist.html:21681,message,message,21681,root/html526/RooHist.html,https://root.cern,https://root.cern/root/html526/RooHist.html,7,['message'],['message']
Integrability,"en they will be integrated according either to the prior or; their constraint term included in the model. BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); Constructor from a data set and a ModelConfig; model pdf, poi and nuisances will be taken from the ModelConfig. ~BayesianCalculator(); destructor. void ClearAll() const; clear all cached pdf objects. void SetModel(const RooStats::ModelConfig& model); set the model to use; The model pdf, prior pdf, parameter of interest and nuisances; will be taken according to the model. RooAbsReal* GetPosteriorFunction() const; Build and return the posterior function (not normalized) as a RooAbsReal; the posterior is obtained from the product of the likelihood function and the; prior pdf which is then intergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object; or in the model itself. If no prior nuisance is specified, but prior parameters are then; the integration is performed assuming a flat prior for the nuisance parameters.; NOTE: the return object is managed by the class, users do not need to delete it. RooAbsPdf* GetPosteriorPdf() const; Build and return the posterior pdf (i.e posterior function normalized to all range of poi); Note that an extra integration in the POI is required for the normalization; NOTE: user must delete the returned object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:11650,integrat,integration,11650,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['integrat'],['integration']
Integrability,"enContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Thu Sep 23 19:59:31 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:42092,integrat,integration,42092,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,2,['integrat'],['integration']
Integrability,"enContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Tue Jun 30 14:32:41 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEffProd.html:47067,integrat,integration,47067,root/html602/RooEffProd.html,https://root.cern,https://root.cern/root/html602/RooEffProd.html,4,['integrat'],['integration']
Integrability,"enContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Tue Mar 10 17:16:28 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEffProd.html:45411,integrat,integration,45411,root/html534/RooEffProd.html,https://root.cern,https://root.cern/root/html534/RooEffProd.html,4,['integrat'],['integration']
Integrability,"enContext.; Definition at line 307 of file RooProdGenContext.cxx. ◆ Class(). static TClass * RooProdGenContext::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProdGenContext::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProdGenContext::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file RooProdGenContext.h. ◆ DeclFileName(). static const char * RooProdGenContext::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file RooProdGenContext.h. ◆ generateEvent(). void RooProdGenContext::generateEvent ; (; RooArgSet & ; theEvent, . Int_t ; remaining . ). overrideprotectedvirtual . Generate a single event of the product by generating the components of the products sequentially. ; The subcontext have been order such that all conditional dependencies are correctly taken into account when processed in sequential order ; Implements RooAbsGenContext.; Definition at line 335 of file RooProdGenContext.cxx. ◆ initGenerator(). void RooProdGenContext::initGenerator ; (; const RooArgSet & ; theEvent). overrideprotectedvirtual . One-time initialization of generator context, forward to component generators. ; Reimplemented from RooAbsGenContext.; Definition at line 319 of file RooProdGenContext.cxx. ◆ IsA(). TClass * RooProdGenContext::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsGenContext.; Definition at line 64 of file RooProdGenContext.h. ◆ printMultiline(). void RooProdGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooAbsGenContext.; Definition at line 375 of file RooProdGenContext.cxx. ◆ setProtoDataOrder(). void RooProdGenContext::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:19406,depend,dependencies,19406,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['depend'],['dependencies']
Integrability,"enContext::_theEventPointer to observable event being generated; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"); Constructor of specialized generator context for RooSimultaneous p.d.f.s. This; context creates a dedicated context for each component p.d.f.s and delegates; generation of events to the appropriate component generator context. ~RooSimSplitGenContext(); Destructor. Delete all owned subgenerator contexts. void attach(const RooArgSet& params); Attach the index category clone to the given event buffer. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of generator context. RooDataSet* generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE). void setExpectedData(Bool_t ); Forward to components. RooDataSet* createDataSet(const char* name, const char* title, const RooArgSet& obs); this method is empty because it is not used by this context. void generateEvent(RooArgSet& theEvent, Int_t remaining); this method is empty because it is not used in this type of context. void setProtoDataOrder(Int_t* lut); this method is empty because proto datasets are not supported by this context. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Detailed printing interface. RooSimSplitGenContext(const RooSimultaneous& model, const RooArgSet& vars, Bool_t _verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """"). » Last changed: Fri Dec 2 14:27:04 2011 » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimSplitGenContext.html:10414,interface,interface,10414,root/html532/RooSimSplitGenContext.html,https://root.cern,https://root.cern/root/html532/RooSimSplitGenContext.html,2,['interface'],['interface']
Integrability,"enFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:8874,interface,interface,8874,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,20,"['integrat', 'interface']","['integration', 'interface']"
Integrability,"enFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegratorOneDim * GetIntegrator()return a pointer to integrator objectDefinition Integrator.h:446; ROOT::Math::IntegratorOneDim::operator=IntegratorOneDim & operator=(const IntegratorOneDim &)Definition Integrator.h:182; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:380; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function pre...Definition Integrator.h:372; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:24751,integrat,integrator,24751,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,2,"['integrat', 'interface']","['integrator', 'interface']"
Integrability,"enFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2690,integrat,integration,2690,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,4,['integrat'],['integration']
Integrability,"enFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:6482,Integrat,Integrator,6482,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,3,['Integrat'],['Integrator']
Integrability,"enFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6452,Integrat,Integrator,6452,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,1,['Integrat'],['Integrator']
Integrability,"enFunction>fObjFunction! pointer to used objective function; shared_ptr<ROOT::Fit::FitResult>fResult! pointer to the object containing the result of the fit; boolfUseGradientflag to indicate if using gradient or not. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool SetFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Fitter(). Default constructor. Fitter(const std::shared_ptr<FitResult> & result). Constructor from a result. ~Fitter(). Destructor. Fitter(const Fitter &). Copy constructor (disabled, class is not copyable). bool Fit(const ROOT::Fit::UnBinData& data, bool extended = false). fit a data set using any generic model function; If data set is binned a least square fit is performed; If data set is unbinned a maximum likelihood fit (not extended) is done; Pre-requisite on the function:; it must implement the 1D or multidimensional parametric function interface. SetFunction(func). return Fit(data). bool Fit(const BinData & data). Fit a binned data set using a least square fit (default method). SetData(const ROOT::Fit::FitData& data). return DoLeastSquareFit(). bool LeastSquareFit(const ROOT::Fit::BinData& data). Fit a binned data set using a least square fit. return DoUnbinnedLikelihoodFit(bool extended = false). bool LikelihoodFit(const BinData & data, bool extended = true). Binned Likelihood fit. Default is extended. return DoBinnedLikelihoodFit(bool extended = true). bool LikelihoodFit(const std::shared_ptr<BinData> & data, bool extended = true). bool LikelihoodFit(const UnBinData & data, bool extended = false). Unbinned Likelihood fit. Default is not extended. bool LikelihoodFit(const std::shared_ptr<UnBinData> & data, bool extended = false). SetFunction(func). bool LinearFit(const BinData & data). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__Fitter.html:6224,interface,interface,6224,root/html604/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__Fitter.html,2,['interface'],['interface']
Integrability,"ena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:36364,Interface,Interface,36364,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"ename Data_t , typename AArchitecture > . TBatch< AArchitecture > TMVA::DNN::TDataLoader< Data_t, AArchitecture >::GetBatch. Return the next batch from the training set. ; The TDataLoader object keeps an internal counter that cycles over the batches in the training set. ; Definition at line 228 of file DataLoader.h. ◆ operator=() [1/2]. template<typename Data_t , typename AArchitecture > . TDataLoader & TMVA::DNN::TDataLoader< Data_t, AArchitecture >::operator= ; (; const TDataLoader< Data_t, AArchitecture > & ; ). default . ◆ operator=() [2/2]. template<typename Data_t , typename AArchitecture > . TDataLoader & TMVA::DNN::TDataLoader< Data_t, AArchitecture >::operator= ; (; TDataLoader< Data_t, AArchitecture > && ; ). default . ◆ Shuffle(). template<typename Data_t , typename AArchitecture > . void TMVA::DNN::TDataLoader< Data_t, AArchitecture >::Shuffle. Shuffle the order of the samples in the batch. ; The shuffling is indirect, i.e. only the indices are shuffled. No input data is moved by this routine. ; Definition at line 269 of file DataLoader.h. Member Data Documentation. ◆ fBatchIndex. template<typename Data_t , typename AArchitecture > . size_t TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fBatchIndex. private . Definition at line 143 of file DataLoader.h. ◆ fBatchSize. template<typename Data_t , typename AArchitecture > . size_t TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fBatchSize. private . Definition at line 140 of file DataLoader.h. ◆ fData. template<typename Data_t , typename AArchitecture > . const Data_t& TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fData. private . Definition at line 137 of file DataLoader.h. ◆ fDeviceBuffers. template<typename Data_t , typename AArchitecture > . std::vector<DeviceBuffer_t> TMVA::DNN::TDataLoader< Data_t, AArchitecture >::fDeviceBuffers. private . Definition at line 146 of file DataLoader.h. ◆ fHostBuffers. template<typename Data_t , typename AArchitecture > . std::vector<HostBuffer_t> TMVA::DNN::TDataL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader.html:19186,rout,routine,19186,doc/master/classTMVA_1_1DNN_1_1TDataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader.html,1,['rout'],['routine']
Integrability,"ename);  ; static bool R__InitStreamerInfoFactory ();  Helper to initialize TVirtualStreamerInfo's factor early. ;  ; static void RegisterCxxModules (cling::Interpreter &clingInterp);  ; static void RegisterPreIncludedHeaders (cling::Interpreter &clingInterp);  ; static bool requiresRootMap (const char *rootmapfile);  ; static Bool_t s_IsLibraryLoaded (const char *libname, cling::Interpreter *fInterpreter);  ; int TCling__AutoLoadCallback (const char *className);  ; int TCling__AutoParseCallback (const char *className);  ; int TCling__CompileMacro (const char *fileName, const char *options);  ; clang::NamespaceDecl * TCling__DEBUG__DCtoNamespace (clang::DeclContext *DC);  ; clang::RecordDecl * TCling__DEBUG__DCtoRecordDecl (clang::DeclContext *DC);  ; void TCling__DEBUG__decl_dump (void *D);  ; void TCling__DEBUG__dump (clang::Decl *D);  ; void TCling__DEBUG__dump (clang::DeclContext *DC);  ; void TCling__DEBUG__dump (clang::FunctionDecl *FD);  ; clang::DeclContext * TCling__DEBUG__getDeclContext (clang::Decl *D);  ; void TCling__DEBUG__printName (clang::Decl *D);  ; const char * TCling__GetClassSharedLibs (const char *className, bool skipCore);  ; void TCling__GetNormalizedContext (const ROOT::TMetaUtils::TNormalizedCtxt *&normCtxt);  ; TObject * TCling__GetObjectAddress (const char *Name, void *&LookupCtx);  ; const Decl * TCling__GetObjectDecl (TObject *obj);  ; void TCling__InvalidateGlobal (const clang::Decl *D);  ; int TCling__IsAutoLoadNamespaceCandidate (const clang::NamespaceDecl *nsDecl);  ; void TCling__LibraryLoadedRTTI (const void *dyLibHandle, const char *canonicalName);  ; bool TCling__LibraryLoadingFailed (const std::string &errmessage, const std::string &libStem, bool permanent, bool resolved);  Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name, which is extracted by error messages we get from callback from cling. ;  ; void TCling__LibraryUnloadedRTTI (const void *dyLibHandle, const char *canonicalName);  ; int TCling__Load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx.html:8429,message,messages,8429,doc/master/TCling_8cxx.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx.html,1,['message'],['messages']
Integrability,"encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TString name, T obj);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; void SetStatus (Bool_t status);  TRObject is a current valid object? ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<class T > ; TRObject & Wrap (T obj);  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:3299,wrap,wrapped,3299,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,2,['wrap'],"['wrap', 'wrapped']"
Integrability,"ence found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. RooCategory& asCAT(const char* ); CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. RooArgSet asSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. RooArgList asLIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgList of objects found in workspace. RooAbsData& asDATA(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. RooDataHist& asDHIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. RooDataSet& asDSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. TObject& asOBJ(const char* ). const char* asSTRING(const char* ); CINT constructor interface, return constructor string argument #idx as const char*. Int_t asINT(const char* ); CINT constructor interface, return constructor string argument #idx as Int_t. Double_t asDOUBLE(const char* ); CINT constructor interface, return constructor string argument #idx as Double_t. void registerSpecial(const char* typeName, RooFactoryWSTool::IFace* iface); Register foreign special objects in factory. RooFactoryWSTool(RooWorkspace& ws); Constructors, assignment etc. RooWorkspace& ws(); { return *_ws ; }. RooAbsArg& as_ARG(UInt_t idx); --- Internal stuff that must be public so that CINT can access it ---; CINT constructor interface. { checkIndex(idx) ; return _of->_of->asARG(_of->_args[idx]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:20911,interface,interface,20911,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,2,['interface'],['interface']
Integrability,"ence found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. RooCategory& asCAT(const char* ); CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. RooArgSet asSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgSet of objects found in workspace. RooArgList asLIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooArgList of objects found in workspace. RooAbsData& asDATA(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. RooDataHist& asDHIST(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. RooDataSet& asDSET(const char* ); CINT constructor interface, return constructor string argument #idx as RooDataSet object found in workspace. TObject& asOBJ(const char* ). const char* asSTRING(const char* ); CINT constructor interface, return constructor string argument #idx as const char*. Int_t asINT(const char* ); CINT constructor interface, return constructor string argument #idx as Int_t. Double_t asDOUBLE(const char* ); CINT constructor interface, return constructor string argument #idx as Double_t. void registerSpecial(const char* typeName, RooFactoryWSTool::IFace* iface); Register foreign special objects in factory. RooFactoryWSTool* of(). RooFactoryWSTool(RooWorkspace& ws); Constructors, assignment etc. RooWorkspace& ws(); { return *_ws ; }. RooAbsArg& as_ARG(UInt_t idx); --- Internal stuff that must be public so that CINT can access it ---; CINT constructor interface. { checkIndex(idx) ; return of()->o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFactoryWSTool.html:21545,interface,interface,21545,root/html530/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html530/RooFactoryWSTool.html,9,['interface'],['interface']
Integrability,"ence. #include <array>; #include <cctype>; #include <climits>; #include <cmath>; #include <cstdio>; #include <cstdlib>; #include <cstring>; #include <iostream>; #include <sstream>; #include <fstream>; #include ""TROOT.h""; #include ""TBuffer.h""; #include ""TEnv.h""; #include ""TClass.h""; #include ""TMath.h""; #include ""THashList.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TH3.h""; #include ""TF2.h""; #include ""TF3.h""; #include ""TPluginManager.h""; #include ""TVirtualPad.h""; #include ""TRandom.h""; #include ""TVirtualFitter.h""; #include ""THLimitsFinder.h""; #include ""TProfile.h""; #include ""TStyle.h""; #include ""TVectorF.h""; #include ""TVectorD.h""; #include ""TBrowser.h""; #include ""TError.h""; #include ""TVirtualHistPainter.h""; #include ""TVirtualFFT.h""; #include ""TVirtualPaveStats.h""; #include ""HFitInterface.h""; #include ""Fit/DataRange.h""; #include ""Fit/BinData.h""; #include ""Math/GoFTest.h""; #include ""Math/MinimizerOptions.h""; #include ""Math/QuantFuncMathCore.h""; #include ""TH1Merger.h"". Include dependency graph for TH1.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; static Bool_t AlmostEqual (Double_t a, Double_t b, Double_t epsilon=0.00000001);  Test if two double are almost equal. ;  ; static Bool_t AlmostInteger (Double_t a, Double_t epsilon=0.00000001);  Test if a double is almost an integer. ;  ; void H1InitExpo ();  Compute Initial values of parameters for an exponential. ;  ; void H1InitGaus ();  Compute Initial values of parameters for a gaussian. ;  ; void H1InitPolynom ();  Compute Initial values of parameters for a polynom. ;  ; void H1LeastSquareFit (Int_t n, Int_t m, Double_t *a);  Least squares lpolynomial fitting without weights. ;  ; void H1LeastSquareLinearFit (Int_t ndata, Double_t &a0, Double_t &a1, Int_t &ifail);  Least sq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx.html:1176,depend,dependency,1176,doc/master/TH1_8cxx.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx.html,1,['depend'],['dependency']
Integrability,"enceThe Geometry Package » Geometry builder. ; Editor for TGeoManager class. ; Provides also builder functionality for the main TGeo objects: TGeoVolume, TGeoShape - derived classes, TGeoMaterial, TGeoMatrix - derived transformations and TGeoMedium. The GUI represents the main entry point for editing geometry classes. It can be started either by:. TGeoManager::Edit(). The method must be used when starting from a new geometry.; Left-click on the 40x40 pixels top-right corner of a pad containing a drawn volume. The region is always accesible when drawing geometry elements and allows also restoring the manager editor in the ""Style"" tab of the GED editor anytime. The TGeoManager editor is vertically split by a TGShutter widget into the following categories:. General. This allows changing the name/title of the geometry, setting the top volume, closing the geometry and saving the geometry in a file. The name of the geometry file is formed by geometry_name.C/.root depending if the geometry need to be saved as a C macro or a .root file.; Shapes. The category provide buttons for creation of all supported shapes. The new shape name is chosen by the interface, but can be changed from the shape editor GUI. Existing shapes can be browsed and edited from the same category.; Volumes. The category allows the creation of a new volume having a given name, shape and medium. For creating a volume assembly only the name is relevant. Existing volumes can be browsed or edited from this category.; Materials. Allows creation of new materials/mixtures or editing existing ones.; Media. The same for creation/editing of tracking media (materials having a set of properties related to tracking); Matrices. Allows creation of translations, rotations or combined transformations. Existing matrices can also be browser/edited. . Definition at line 36 of file TGeoManagerEditor.h. Public Member Functions;  TGeoManagerEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManagerEditor.html:1285,depend,depending,1285,doc/master/classTGeoManagerEditor.html,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html,1,['depend'],['depending']
Integrability,"enceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override;  Unregisters a column. ;  ; REntryRange GetEntryRange () const;  ; NTupleSize_t GetNElements (ColumnHandle_t columnHandle);  ; NTupleSize_t GetNEntries ();  ; const RNTupleReadOptions & GetReadOptions () const;  ; const RSharedDescriptorGuard GetSharedDescriptorGuard () const;  Takes the read lock for the descriptor. ;  ; EP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1384,wrap,wrapper,1384,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['wrap'],['wrapper']
Integrability,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TObjOptLink * findLink(const char* name, const char* caller = 0) const; Find the link corresponding to the named object in this list.; Return 0 if the object is not found or does not have an Option_t; string associated with its link. Also print a warning message; if caller is non-zero. Bool_t moveBefore(const char* before, const char* target, const char* caller = 0); Move the target object immediately before the specified object,; preserving any Option_t associated with the target link. Bool_t moveAfter(const char* after, const char* target, const char* caller = 0); Move the target object immediately after the specified object,; preserving any Option_t associated with the target link. inline RooList(); { }. virtual ~RooList(); {}. » Last changed: Tue Jun 30 14:33:49 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooList.html:11181,message,message,11181,root/html602/RooList.html,https://root.cern,https://root.cern/root/html602/RooList.html,2,['message'],['message']
Integrability,ency of the filters applied ;  df004_cutFlowReport.py This tutorial shows how to get information about the efficiency of the filters applied ;  df005_fillAnyObject.C This tutorial shows how to fill any object the class of which exposes a Fill method ;  df006_ranges.C This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df006_ranges.py This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df007_snapshot.C This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df007_snapshot.py This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df008_createDataSetFromScratch.C This tutorial shows how to create a dataset from scratch with RDataFrame ;  df008_createDataSetFromScratch.py This tutorial shows how to create a dataset from scratch with RDataFrame ;  df009_FromScratchVSTTree.C This tutorial illustrates how simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces ;  df010_trivialDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df010_trivialDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df012_DefinesAndFiltersAsStrings.C ;  df012_DefinesAndFiltersAsStrings.py ;  df013_InspectAnalysis.C Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot ;  df014_CSVDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df014_CSVDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df015_LazyDataSource.C Thi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:99622,interface,interfaces,99622,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['interface'],['interfaces']
Integrability,"end only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:17265,message,message,17265,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,18,['message'],['message']
Integrability,endent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [1] int_dx landau(x) = 0.0989653362054419; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [2] int_dx landau(x) = 0.098957102921895; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [3] int_dx landau(x) = 0.098957102921895; --- RooAbsArg ---; Value State: clean; Shape State: clean; Attributes: [SnapSh,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:10918,integrat,integrated,10918,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,2,['integrat'],"['integrated', 'integrator']"
Integrability,"ender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void ConnectSignals2Slots ();  Connect signals to slots. ;  ; void ShowSelectMaterial (Bool_t show=kTRUE);  Show/hide interface for material selection. ;  ; void ShowSelectMatrix (Bool_t show=kTRUE);  Show/hide interface for matrix selection. ;  ; void ShowSelectMedium (Bool_t show=kTRUE);  Show/hide interface for medium selection. ;  ; void ShowSelectShape (Bool_t show=kTRUE);  Show/hide interface for shape selection. ;  ; void ShowSelectVolume (Bool_t show=kTRUE);  Show/hide interface for volume selection. ;  ;  Protected Member Functions inherited from TGedFrame; virtual void MakeTitle (const char *title);  Create attribute frame title. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManagerEditor.html:30698,interface,interface,30698,doc/master/classTGeoManagerEditor.html,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html,1,['interface'],['interface']
Integrability,"endl;; ; // Apply model as part of an RDataFrame workflow; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/SMHiggsToZZTo4L.root"");; auto df2 = df.Filter(""nMuon >= 2""); .Filter(""nElectron >= 2""); .Define(""Muon_pt_1"", ""Muon_pt[0]""); .Define(""Muon_pt_2"", ""Muon_pt[1]""); .Define(""Electron_pt_1"", ""Electron_pt[0]""); .Define(""Electron_pt_2"", ""Electron_pt[1]""); .Define(""y"",; Compute<4, float>(bdt),; {""Muon_pt_1"", ""Muon_pt_2"", ""Electron_pt_1"", ""Electron_pt_2""});; ; std::cout << ""Mean response on the signal sample: "" << *df2.Mean(""y"") << std::endl;; }; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TMVA::Experimental::RBDTDefinition RBDT.hxx:37; TMVA::Experimental::RTensorRTensor is a container with contiguous memory and shape information.Definition RTensor.hxx:162; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; xDouble_t x[n]Definition legend1.C:17; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; ; DateDecember 2018 ; AuthorStefan Wunsch ; Definition in file tmva103_Application.C. tutorialstmvatmva103_Application.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva103__Application_8C.html:2370,interface,interface,2370,doc/master/tmva103__Application_8C.html,https://root.cern,https://root.cern/doc/master/tmva103__Application_8C.html,1,['interface'],['interface']
Integrability,"ene if we opened it. This must be done after modified; 3634 // flag is cleared, as some viewers will invoke another paint by marking pad modified again; 3635 if (began3DScene) {; 3636 fViewer3D->EndScene();; 3637 }; 3638}; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Paint the pad border.; 3642/// Draw first a box as a normal filled box; 3643 ; 3644void TPad::PaintBorder(Color_t color, Bool_t tops); 3645{; 3646 if (color >= 0) {; 3647 TAttLine::Modify(); //Change line attributes only if necessary; 3648 TAttFill::Modify(); //Change fill area attributes only if necessary; 3649 ; 3650 //With Cocoa we have a transparency. But we also have; 3651 //pixmaps, and if you just paint a new content over the old one; 3652 //with alpha < 1., you'll be able to see the old content.; 3653 if (!gROOT->IsBatch() && gVirtualX->InheritsFrom(""TGCocoa"") && GetPainter()); 3654 GetPainter()->ClearDrawable();; 3655 ; 3656 PaintBox(fX1,fY1,fX2,fY2);; 3657 }; 3658 if (color < 0) color = -color;; 3659 // then paint 3d frame (depending on bordermode); 3660 if (IsTransparent()) return;; 3661 // Paint a 3D frame around the pad.; 3662 ; 3663 if (fBorderMode == 0) return;; 3664 Int_t bordersize = fBorderSize;; 3665 if (bordersize <= 0) bordersize = 2;; 3666 ; 3667 const Double_t realBsX = bordersize / (GetAbsWNDC() * GetWw()) * (fX2 - fX1);; 3668 const Double_t realBsY = bordersize / (GetAbsHNDC() * GetWh()) * (fY2 - fY1);; 3669 ; 3670 Short_t px1,py1,px2,py2;; 3671 Double_t xl, xt, yl, yt;; 3672 ; 3673 // GetColorDark() and GetColorBright() use GetFillColor(); 3674 Color_t oldcolor = GetFillColor();; 3675 SetFillColor(color);; 3676 TAttFill::Modify();; 3677 Color_t light = 0, dark = 0;; 3678 if (color != 0) {; 3679 light = TColor::GetColorBright(color);; 3680 dark = TColor::GetColorDark(color);; 3681 }; 3682 ; 3683 // Compute real left bottom & top right of the box in pixels; 3684 px1 = XtoPixel(fX1); py1 = YtoPixel(fY1);; 3685 px2 = XtoPixel(f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:115256,depend,depending,115256,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['depend'],['depending']
Integrability,"eneral Matrix Flat Representation class; TMatrixTFlat_const<float> Template of General Matrix Flat Representation class; TMatrixTLazy<double> Template of Lazy Matrix class; TMatrixTLazy<float> Template of Lazy Matrix class; TMatrixTRow<double> Template of General Matrix Row Access class; TMatrixTRow<float> Template of General Matrix Row Access class; TMatrixTRow_const<double> Template of General Matrix Row Access class; TMatrixTRow_const<float> Template of General Matrix Row Access class; TMatrixTSparse<double> Template of Sparse Matrix class; TMatrixTSparse<float> Template of Sparse Matrix class; TMatrixTSparseDiag<double> Template of Sparse Matrix Diagonal Access class; TMatrixTSparseDiag<float> Template of Sparse Matrix Diagonal Access class; TMatrixTSparseDiag_const<double> Template of Sparse Matrix Diagonal Access class; TMatrixTSparseDiag_const<float> Template of Sparse Matrix Diagonal Access class; TMatrixTSparseRow<double> Template of Sparse Matrix Row Access class; TMatrixTSparseRow<float> Template of Sparse Matrix Row Access class; TMatrixTSparseRow_const<double> Template of Sparse Matrix Row Access class; TMatrixTSparseRow_const<float> Template of Sparse Matrix Row Access class; TMatrixTSub<double> Template of Sub Matrix Access class; TMatrixTSub<float> Template of Sub Matrix Access class; TMatrixTSub_const<double> Template of Sub Matrix Access class; TMatrixTSub_const<float> Template of Sub Matrix Access class; TMatrixTSym<double> Template of Symmetric Matrix class; TMatrixTSym<float> Template of Symmetric Matrix class; TMatrixTSymCramerInv ; TMatrixTSymLazy<double> Template of Lazy Symmeytric class; TMatrixTSymLazy<float> Template of Lazy Symmeytric class; TMehrotraSolver Mehrotra Qp Solver class; TMemFile A ROOT file that reads/writes via HDFS; TMemStat a user interface class of MemStat; TMemStatShow class to visualize the results of TMemStat ; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:110890,interface,interface,110890,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,3,['interface'],['interface']
Integrability,"enerate an event from the p.d.f and then perform an accept/reject sampling based on the efficiency function ; Implements RooAbsGenContext.; Definition at line 72 of file RooEffGenContext.cxx. ◆ initGenerator(). void RooEffGenContext::initGenerator ; (; const RooArgSet & ; theEvent). overrideprotectedvirtual . One-time initialization of generator. ; Reimplemented from RooAbsGenContext.; Definition at line 53 of file RooEffGenContext.cxx. ◆ initializeEff(). void RooEffGenContext::initializeEff ; (; RooAbsReal const & ; eff). inlineprivate . Definition at line 36 of file RooEffGenContext.h. ◆ IsA(). TClass * RooEffGenContext::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsGenContext.; Definition at line 47 of file RooEffGenContext.h. ◆ printMultiline(). void RooEffGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooAbsGenContext.; Definition at line 91 of file RooEffGenContext.cxx. ◆ Streamer(). void RooEffGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooEffGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file RooEffGenContext.h. Member Data Documentation. ◆ _cloneSet. RooArgSet RooEffGenContext::_cloneSet. private . Internal clone of p.d.f. ; Definition at line 41 of file RooEffGenContext.h. ◆ _eff. RooAbsReal* RooEffGenContext::_eff. private . Pointer to efficiency function. ; Definition at line 42 of file RooEffGenContext.h. ◆ _generator. std::unique_ptr<RooAbsGenContext> RooEffGenContext::_generator. private . Generator context for p.d.f. ; Definition at line 43 of file RooEffGenContext.h. ◆ _maxEff. double RooEffGenContext::_maxEff. private . Maximum of efficiency in vars. ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffGenContext.html:19672,interface,interface,19672,doc/master/classRooEffGenContext.html,https://root.cern,https://root.cern/doc/master/classRooEffGenContext.html,1,['interface'],['interface']
Integrability,"enerated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:1470,message,message,1470,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,2,['message'],"['message', 'messages']"
Integrability,"eneric real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1659 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:138227,depend,depend,138227,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['depend'],['depend']
Integrability,"ength for specified connection.Definition RWebWindow.cxx:1509; ROOT::RWebWindow::RemoveConnectionstd::shared_ptr< WebConn > RemoveConnection(unsigned wsid)Remove connection with given websocket id.Definition RWebWindow.cxx:279; ROOT::RWebWindow::CreateWSHandlerstd::shared_ptr< RWebWindowWSHandler > CreateWSHandler(std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout)Assigns manager reference, window id and creates websocket handler, used for communication with the c...Definition RWebWindow.cxx:152; ROOT::RWebWindow::fProtocolstd::string fProtocol! protocolDefinition RWebWindow.hxx:174; ROOT::RWebWindow::CanSendbool CanSend(unsigned connid, bool direct=true) constReturns true if sending via specified connection can be performed.Definition RWebWindow.cxx:1484; ROOT::RWebWindow::GetUserArgsstd::string GetUserArgs() constReturns configured user arguments for web window See SetUserArgs method for more details.Definition RWebWindow.cxx:1320; ROOT::RWebWindow::RecordDatavoid RecordData(const std::string &fname=""protocol.json"", const std::string &fprefix="""")Configures recording of communication data in protocol file Provided filename will be used to store J...Definition RWebWindow.cxx:1355; ROOT::RWebWindow::fUseProcessEventsbool fUseProcessEvents! all window functionality will run through process eventsDefinition RWebWindow.hxx:143; ROOT::RWebWindow::GetDisplayConnectionunsigned GetDisplayConnection() constReturns first connection id where window is displayed It could be that connection(s) not yet fully es...Definition RWebWindow.cxx:244; ROOT::RWebWindow::fMaxQueueLengthunsigned fMaxQueueLength! maximal number of queue entriesDefinition RWebWindow.hxx:156; ROOT::RWebWindow::fXint fXDefinition RWebWindow.hxx:167; ROOT::RWebWindow::GetConnLimitunsigned GetConnLimit() constreturns configured connections limit (0 - default)Definition RWebWindow.cxx:703; ROOT::RWebWindow::GetRelativeAddrstd::string GetRelativeAddr(const std::shared_ptr< RWebWindow > &win) constR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:36783,protocol,protocol,36783,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['protocol'],['protocol']
Integrability,"ength for specified connection.Definition RWebWindow.cxx:1551; ROOT::RWebWindow::RemoveConnectionstd::shared_ptr< WebConn > RemoveConnection(unsigned wsid)Remove connection with given websocket id.Definition RWebWindow.cxx:279; ROOT::RWebWindow::CreateWSHandlerstd::shared_ptr< RWebWindowWSHandler > CreateWSHandler(std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout)Assigns manager reference, window id and creates websocket handler, used for communication with the c...Definition RWebWindow.cxx:152; ROOT::RWebWindow::fProtocolstd::string fProtocol! protocolDefinition RWebWindow.hxx:177; ROOT::RWebWindow::CanSendbool CanSend(unsigned connid, bool direct=true) constReturns true if sending via specified connection can be performed.Definition RWebWindow.cxx:1526; ROOT::RWebWindow::GetUserArgsstd::string GetUserArgs() constReturns configured user arguments for web window See SetUserArgs method for more details.Definition RWebWindow.cxx:1362; ROOT::RWebWindow::RecordDatavoid RecordData(const std::string &fname=""protocol.json"", const std::string &fprefix="""")Configures recording of communication data in protocol file Provided filename will be used to store J...Definition RWebWindow.cxx:1397; ROOT::RWebWindow::fUseProcessEventsbool fUseProcessEvents! all window functionality will run through process eventsDefinition RWebWindow.hxx:146; ROOT::RWebWindow::GetDisplayConnectionunsigned GetDisplayConnection() constReturns first connection id where window is displayed It could be that connection(s) not yet fully es...Definition RWebWindow.cxx:244; ROOT::RWebWindow::fMaxQueueLengthunsigned fMaxQueueLength! maximal number of queue entriesDefinition RWebWindow.hxx:159; ROOT::RWebWindow::fXint fXDefinition RWebWindow.hxx:170; ROOT::RWebWindow::GetConnLimitunsigned GetConnLimit() constreturns configured connections limit (0 - default)Definition RWebWindow.cxx:704; ROOT::RWebWindow::SetStartDialogFuncstatic void SetStartDialogFunc(std::function< bool(const std::shared_ptr<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:37172,protocol,protocol,37172,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['protocol'],['protocol']
Integrability,"enl' specifies an entry- or event-list to be used as event selection. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Definition at line 6182 of file TProof.cxx. ◆ DrawSelect() [2/2]. Long64_t TProof::DrawSelect ; (; TDSet * ; dset, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Execute the specified drawing action on a data set (TDSet). ; Event- or Entry-lists should be set in the data set object using TDSet::SetEntryList. Returns -1 in case of error or number of selected events otherwise. ; Reimplemented in TProofLite.; Definition at line 6146 of file TProof.cxx. ◆ Echo() [1/2]. Int_t TProof::Echo ; (; const char * ; str). virtual . Sends a string to master and workers and expect them to echo it back to the client via a message. ; It is a special case of the generic Echo() that works with TObjects. Returns -1 on error, the number of workers that received the message on success. ; Definition at line 7042 of file TProof.cxx. ◆ Echo() [2/2]. Int_t TProof::Echo ; (; const TObject * ; obj). virtual . Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ; Returns -1 on error, the number of workers that received the objects on success. ; Definition at line 7028 of file TProof.cxx. ◆ EnablePackage() [1/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. If specified, enables packages only on the specified workers. Returns 0 in case of success and -1 in case of error. Provided for backward compatibility. ; Definition at line 8175 of file TProof.cxx. ◆ Ena",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:85370,message,message,85370,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,"ension of the functionality provided by the MathCore. The current set includes classes and functions for:. Special functions, with all the major functions (Bessel functions, Legendre polynomial, etc..); Statistical functions, Mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse (quantiles).; Numerical algorithms:; Numerical Integration; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MathMore.html:1315,wrap,wrapping,1315,doc/master/group__MathMore.html,https://root.cern,https://root.cern/doc/master/group__MathMore.html,2,['wrap'],['wrapping']
Integrability,"ension; TObjArrayfMCsarray of pointers to template histograms; Int_tfNDFNumber of degrees of freedom in the fit; Int_tfNparnumber of fit parameters; Int_tfNpfitsNumber of points used in the fit; TH1*fPlotpointer to histogram containing summed template predictions; TObjArrayfWeightsarray of pointers to corresponding weight factors (may be null). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFractionFitter(); TFractionFitter default constructor. TFractionFitter(TH1* data, TObjArray* MCs, Option_t* option = """"); TFractionFitter constructor. Does a complete initialisation (including; consistency checks, default fit range as the whole histogram but without; under- and overflows, and declaration of the fit parameters). Note that; the histograms are not copied, only references are used.; Arguments:; data: histogram to be fitted; MCs: array of TH1* corresponding template distributions; Option: can be used to control the print level of the minimization algorithm; option = ""Q"" : quite - no message is printed; option = ""V"" : verbose - max print out; option = """" : default: print initial fraction values and result. ~TFractionFitter(); TFractionFitter default destructor. void SetData(TH1* data); Change the histogram to be fitted to. Notes:; - Parameter constraints and settings are retained from a possible previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetMC(Int_t parm, TH1* MC); Change the histogram for template number <parm>. Notes:; - Parameter constraints and settings are retained from a possible previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetWeight(Int_t parm, TH1* weight); Set bin by bin weights for template number <parm> (the parameter numbering; follows that of the input template vector).; Weights can be ""unset"" by passing a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:13108,message,message,13108,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,9,['message'],['message']
Integrability,ensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class for Target density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::QuickMVAProbEstimator Interface to different separation critiera used in training algorithms; TMVA::ROCCalc ; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter using a Simulated Annealing Algorithm; TMVA::TActivation Interface for TNeuron activation function classes; TMVA::TActivationChooser Class for choosing activation functions; TMVA::TActivationIdentity Identity activation function for TNeuron; TMVA::TActivationRadial Radial basis activation function for TNeuron; TMVA::TActivationSigmoid Sigmoid activation function for TNeuron; TMVA::TActivationTanh Tanh sigmoid activation function for TNeuron; TMVA::TNeuron Neuro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:108748,Interface,Interface,108748,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['Interface'],['Interface']
Integrability,"ent 'AlwaysDirty' mode for this node; RooRealProxy_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooSetProxy_nsetNormalization set (optional); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Int_t_orderMoment order; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_t_takeRootReturn n-order root of moment; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_xObservable; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsMoment(); Default constructor. RooAbsMoment(const char* name, const char* title,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMoment.html:36718,integrat,integrator,36718,root/html602/RooAbsMoment.html,https://root.cern,https://root.cern/root/html602/RooAbsMoment.html,4,['integrat'],['integrator']
Integrability,"ent 'obs' and should be copied in their preferred; order into argument 'orderdObs', This default implementation indicates no preference; and copies the original order of 'obs' into 'orderedObs'. RooAbsReal* createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Create a running integral over this function, i.e. given a f(x), create an object; representing 'int[x_lo,x] f(x_prime) dx_prime'. RooAbsReal* createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. int[x_lo,x] f(x_prime) dx_prime. The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The default strategy to calculate the running integrals is. - If the integrand (this object) supports analytical integration, construct an integral object; that calculate the running integrals value by calculating the analytical integral each; time the running integral object is evaluated. - If the integrand (this object) requires numeric integration to construct the running integral; create an object of class RooNumRunningInt which first samples the entire function and integrates; the sampled function numerically. This method has superior performance as there is no need to; perform a full (numeric) integration for each evaluation of the running integral object, but; only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:66277,integrat,integration,66277,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,9,['integrat'],['integration']
Integrability,"ent basket number when reading; Long64_tTBranch::fReadEntry! Current entry number when reading; TBranch::ReadLeaves_tTBranch::fReadLeaves! Pointer to the ReadLeaves implementation to use.; Bool_tTBranch::fSkipZip! After being read, the buffer will not be unziped.; Int_tTBranch::fSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THbookBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). THbookBranch(TBranch* branch, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). ~THbookBranch(). void Browse(TBrowser* b); Browser interface. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); get one entry from hbook ntuple. void SetAddress(void* addobj); Set address of this branch; See important remark in the header of THbookTree. THbookBranch(); {;}. THbookBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). const char * GetBlockName() const; {return fBlockName.Data();}. void SetBlockName(const char* name); {fBlockName=name;}. void SetEntries(Long64_t n); {fEntries=n;}. » Author: Rene Brun 18/02/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/hbook:$Id$ » Last generated: 2015-06-02 16:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THbookBranch.html:14246,interface,interface,14246,root/html604/THbookBranch.html,https://root.cern,https://root.cern/root/html604/THbookBranch.html,2,['interface'],['interface']
Integrability,"ent basket number when reading; Long64_tTBranch::fReadEntry! Current entry number when reading; TBranch::ReadLeaves_tTBranch::fReadLeaves! Pointer to the ReadLeaves implementation to use.; Bool_tTBranch::fSkipZip! After being read, the buffer will not be unziped.; Int_tTBranch::fSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THbookBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). THbookBranch(TBranch* branch, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). ~THbookBranch(). void Browse(TBrowser* b); Browser interface. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); get one entry from hbook ntuple. void SetAddress(void* addobj); Set address of this branch; See important remark in the header of THbookTree. THbookBranch(); {;}. THbookBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1). const char * GetBlockName() const; {return fBlockName.Data();}. void SetBlockName(const char* name); {fBlockName=name;}. void SetEntries(Long64_t n); {fEntries=n;}. » Author: Rene Brun 18/02/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/hbook:$Id$ » Last generated: 2015-06-30 15:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookBranch.html:14246,interface,interface,14246,root/html602/THbookBranch.html,https://root.cern,https://root.cern/root/html602/THbookBranch.html,2,['interface'],['interface']
Integrability,"ent boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html:43784,integrat,integration,43784,root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,4,['integrat'],['integration']
Integrability,"ent by derived classes if needed to be modified ;  ; const std::vector< double > & X () const;  ; double X (unsigned int i) const;  . Protected Member Functions;  GSLSimAnFunc ();  derived classes might need to re-define completely the class ;  . Private Attributes; const ROOT::Math::IMultiGenFunction * fFunc;  ; std::vector< double > fScale;  ; std::vector< double > fX;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnFunc() [1/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x . ). construct from an interface of a multi-dimensional function ; Definition at line 34 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [2/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x, . const double * ; scale . ). construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ; Definition at line 43 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [3/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; ). inlineprotected . derived classes might need to re-define completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:3512,interface,interface,3512,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,1,['interface'],['interface']
Integrability,"ent calls.; . Function Members (Methods); public:. virtual~RooAbsCache(); static TClass*Class(); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual TClass*IsA() const; RooAbsCache&operator=(const RooAbsCache&); virtual voidoperModeHook(); virtual voidoptimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); RooAbsCache(RooAbsArg* owner = 0); RooAbsCache(const RooAbsCache&, RooAbsArg* owner = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. RooAbsArg*_ownerPointer to owning RooAbsArg. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsCache(RooAbsArg* owner = 0); Constructor. Takes owner as argument and register cache with owner. RooAbsCache(const RooAbsCache& , RooAbsArg* owner = 0); Copy constructor. Takes owner as argument and registers cache with owne. ~RooAbsCache(); Destructor. Unregisters cache with owner. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Interface for processing of cache mode optimization calls. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface for server redirect calls. void operModeHook(); Interface for operation mode changes. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); Interface for constant term node finding calls. void printCompactTreeHook(ostream& , const char* ); Interface for printing of cache guts in tree mode printing. void wireCache(); {}. » Last changed: Tue Jun 2 15:26:52 2015 » Last generated: 2015-06-02 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsCache.html:1896,Interface,Interface,1896,root/html604/RooAbsCache.html,https://root.cern,https://root.cern/root/html604/RooAbsCache.html,5,['Interface'],['Interface']
Integrability,"ent depth to which geometry is drawn.Definition TGeoManager.cxx:2157; TGeoManager::LockGeometrystatic void LockGeometry()Lock current geometry so that no other geometry can be imported.Definition TGeoManager.cxx:4040; TGeoManager::GetCurrentPointconst Double_t * GetCurrentPoint() constDefinition TGeoManager.h:501; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoManager::fNPNEIdInt_t fNPNEIdDefinition TGeoManager.h:141; TGeoManager::CheckShapevoid CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option)Test for shape navigation methods.Definition TGeoManager.cxx:3783; TGeoManager::GetUserPaintVolumeTGeoVolume * GetUserPaintVolume() constDefinition TGeoManager.h:216; TGeoManager::IsActivityEnabledBool_t IsActivityEnabled() constDefinition TGeoManager.h:409; TGeoManager::fgMaxLevelstatic Int_t fgMaxLevelVerbosity level for Info messages (no IO).Definition TGeoManager.h:52; TGeoManager::fNpdgInt_t fNpdgcurrent trackDefinition TGeoManager.h:77; TGeoManager::PrintOverlapsvoid PrintOverlaps() constPrints the current list of overlaps.Definition TGeoManager.cxx:3881; TGeoManager::GetNormalconst Double_t * GetNormal() constDefinition TGeoManager.h:506; TGeoManager::MakeTrd1TGeoVolume * MakeTrd1(const char *name, TGeoMedium *medium, Double_t dx1, Double_t dx2, Double_t dy, Double_t dz)Make in one step a volume pointing to a TGeoTrd1 shape with given medium.Definition TGeoManager.cxx:3293; TGeoManager::MakeSphereTGeoVolume * MakeSphere(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t themin=0, Double_t themax=180, Double_t phimin=0, Double_t phimax=360)Make in one step a volume pointing to a sphere shape with given medium.Definition TGeoManager.cxx:3186; TGeoManager::ResetUserDatavoid ResetUserData()Sets all pointers TGeoVolume::fField to NULL.Definition TGeoMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:69328,message,messages,69328,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['message'],['messages']
Integrability,"ent even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCSensitiveDetectorInterface to a user defined sensitive detector ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:218543,interface,interface,218543,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,2,['interface'],['interface']
Integrability,"ent even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:196311,interface,interface,196311,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['interface'],['interface']
Integrability,"ent file. ; Note: The ""file"" parameter is not the file where the new tree will be inserted. The new tree is inserted into gDirectory, which is usually the most recently opened file, or the directory most recently cd()'d to.; If option = ""C"" is given, the compression level for all branches in the new Tree is set to the file compression level. By default, the compression level of all branches is the original compression level in the old trees.; If basketsize > 1000, the basket size for all branches of the new tree will be set to basketsize.; Example using the file generated in $ROOTSYS/test/Event merge two copies of Event.root gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:555; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; If the chain is expecting the input tree inside a directory, this directory is NOT created by this routine.; So if you do: TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");; The resulting file will not have subdirectories. In order to preserve the directory structure do the following instead: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There is currently 3 supported sorting order: SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry; When using SortBasketsByOffset the baskets are written in the output file in the same order as in the original file (i.e. the basket are sorted on their offset in the original file; Usually this also means that the baskets are sorted on the index/number of the las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:85342,rout,routine,85342,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['rout'],['routine']
Integrability,"ent file. ; Note: The ""file"" parameter is not the file where the new tree will be inserted. The new tree is inserted into gDirectory, which is usually the most recently opened file, or the directory most recently cd()'d to.; If option = ""C"" is given, the compression level for all branches in the new Tree is set to the file compression level. By default, the compression level of all branches is the original compression level in the old trees.; If basketsize > 1000, the basket size for all branches of the new tree will be set to basketsize.; Example using the file generated in $ROOTSYS/test/Event merge two copies of Event.root gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; If the chain is expecting the input tree inside a directory, this directory is NOT created by this routine.; So if you do: TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");; The resulting file will not have subdirectories. In order to preserve the directory structure do the following instead: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There is currently 3 supported sorting order: SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry; When using SortBasketsByOffset the baskets are written in the output file in the same order as in the original file (i.e. the basket are sorted on their offset in the original file; Usually this also means that the baskets are sorted on the index/number of the las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:85896,rout,routine,85896,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['rout'],['routine']
Integrability,"ent frames. ; Definition at line 709 of file TGTable.cxx. ◆ ScrollCHeaders(). void TGTable::ScrollCHeaders ; (; Int_t ; xpos). virtual . Scroll the column headers horizontally. ; Definition at line 1430 of file TGTable.cxx. ◆ ScrollRHeaders(). void TGTable::ScrollRHeaders ; (; Int_t ; ypos). virtual . Scroll the row headers vertically. ; Definition at line 1443 of file TGTable.cxx. ◆ SetDefaultColors(). void TGTable::SetDefaultColors ; (; ). virtual . Set the background color for all rows and headers to their defaults. ; Definition at line 1310 of file TGTable.cxx. ◆ SetEvenRowBackground(). void TGTable::SetEvenRowBackground ; (; Pixel_t ; pixel). virtual . Set the background color for all even numbered rows. ; Definition at line 1251 of file TGTable.cxx. ◆ SetHeaderBackground(). void TGTable::SetHeaderBackground ; (; Pixel_t ; pixel). virtual . Set the background color for the headers. ; Definition at line 1278 of file TGTable.cxx. ◆ SetInterface(). void TGTable::SetInterface ; (; TVirtualTableInterface * ; interface, . UInt_t ; nrows = 50, . UInt_t ; ncolumns = 20 . ). protectedvirtual . Set the interface that the TGTable uses to interface. ; Definition at line 670 of file TGTable.cxx. ◆ SetOddRowBackground(). void TGTable::SetOddRowBackground ; (; Pixel_t ; pixel). virtual . Set the background color for all odd numbered rows. ; Definition at line 1223 of file TGTable.cxx. ◆ Show(). void TGTable::Show ; (; ). virtual . Show the contents of the TGTable in stdout. ; Definition at line 932 of file TGTable.cxx. ◆ Shrink(). void TGTable::Shrink ; (; UInt_t ; nrows, . UInt_t ; ncolumns . ). protectedvirtual . Shrink the TGTable by nrows and ncolumns. ; Definition at line 537 of file TGTable.cxx. ◆ ShrinkColumns(). void TGTable::ShrinkColumns ; (; UInt_t ; ncolumns). protectedvirtual . Shrink the columns of the TGTable by ncolumns. ; Definition at line 546 of file TGTable.cxx. ◆ ShrinkRows(). void TGTable::ShrinkRows ; (; UInt_t ; nrows). protectedvirtual . Shrink the ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:54440,interface,interface,54440,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['interface'],['interface']
Integrability,"ent is the type of polynomials to use in; parameterisation, one of:; TMultiDimFit::kMonomials; TMultiDimFit::kChebyshev; TMultiDimFit::kLegendre. Options:; K Compute (k)correlation matrix; V Be verbose. Default is no options. ~TMultiDimFit(); Destructor. void AddRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the training sample to be used for the; parameterization.; The mean of the variables and quantity is calculated on the fly,; as outlined in TPrincipal::AddRow.; This sample should be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void AddTestRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the test sample to be used for the; test of the parameterization.; This sample needn't be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void Browse(TBrowser* b); Browse the TMultiDimFit object in the TBrowser. void Clear(Option_t* option = """"); Clear internal structures and variables. Double_t Eval(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalError(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization error at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalControl(const Int_t* po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:26115,depend,dependent,26115,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,20,['depend'],['dependent']
Integrability,"ent new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:18987,message,message,18987,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,1,['message'],['message']
Integrability,"ent of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the pointer to; the leaf named nelem, otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non-negative integer, then; return countval = nelem and a null pointer.; If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]; where nelem and nelem2 are non-negative integers) then; return countval = product of all dimension sizes and a null pointer.; If leaf name has the form var[... (and does not match the previous 2; cases) return countval = -1 and null pointer;; Otherwise return countval = 1 and a null pointer. Int_t GetLen() const; -- Return the number of effective elements of this leaf. Int_t ResetAddress(void* add, Bool_t destructor = kFALSE); -- Helper routine for TLeafX::SetAddress. The return value is non-zero if we owned the old; value buffer and must delete it now. The size; of the value buffer is recalculated and stored,; and a decision is made whether or not we own the; new value buffer. void SetLeafCount(TLeaf* leaf); -- Set the leaf count of this leaf. void Streamer(TBuffer& ); -- Stream a class object. Double_t GetValue(Int_t i = 0) const; { return 0.0; }. void PrintValue(Int_t i = 0) const; {}. void SetAddress(void* add = 0); {}. void Export(TClonesArray* , Int_t ); {}. TBranch * GetBranch() const; { return fBranch; }. TLeaf * GetLeafCount() const; { return fLeafCount; }. Int_t GetLenStatic() const; { return fLen; }. Int_t GetLenType() const; { return fLenType; }. Int_t GetMaximum() const; { return 0; }. Int_t GetMinimum() const; { return 0; }. Int_t GetNdata() const; { return fNdata; }. Int_t GetOffset() const; { return fOffset; }. void * GetValuePointer() const; { return 0; }. const char * GetTypeName()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeaf.html:8763,rout,routine,8763,root/html534/TLeaf.html,https://root.cern,https://root.cern/root/html534/TLeaf.html,6,['rout'],['routine']
Integrability,"ent of this leaf. void FillBasket(TBuffer& b); -- Pack leaf elements in Basket output buffer. TLeaf* GetLeafCounter(Int_t& countval) const; -- Return a pointer to the counter of this leaf. If leaf name has the form var[nelem], where nelem is alphanumeric, then; if nelem is a leaf name, return countval = 1 and the pointer to; the leaf named nelem, otherwise return 0.; If leaf name has the form var[nelem], where nelem is a non-negative integer, then; return countval = nelem and a null pointer.; If leaf name has the form of a multi-dimensional array (e.g. var[nelem][nelem2]; where nelem and nelem2 are non-negative integers) then; return countval = product of all dimension sizes and a null pointer.; If leaf name has the form var[... (and does not match the previous 2; cases) return countval = -1 and null pointer;; Otherwise return countval = 1 and a null pointer. Int_t GetLen() const; -- Return the number of effective elements of this leaf. Int_t ResetAddress(void* add, Bool_t destructor = kFALSE); -- Helper routine for TLeafX::SetAddress. The return value is non-zero if we owned the old; value buffer and must delete it now. The size; of the value buffer is recalculated and stored,; and a decision is made whether or not we own the; new value buffer. void SetLeafCount(TLeaf* leaf); -- Set the leaf count of this leaf. void Streamer(TBuffer& b); -- Stream a class object. Double_t GetValue(Int_t i = 0) const; { return 0.0; }. void PrintValue(Int_t i = 0) const; {}. void SetAddress(void* add = 0); {}. void Export(TClonesArray* , Int_t ); {}. TBranch * GetBranch() const; { return fBranch; }. TLeaf * GetLeafCount() const; { return fLeafCount; }. Int_t GetLenStatic() const; { return fLen; }. Int_t GetLenType() const; { return fLenType; }. Int_t GetMaximum() const; { return 0; }. Int_t GetMinimum() const; { return 0; }. Int_t GetNdata() const; { return fNdata; }. Int_t GetOffset() const; { return fOffset; }. void * GetValuePointer() const; { return 0; }. const char * GetTypeName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLeaf.html:8620,rout,routine,8620,root/html532/TLeaf.html,https://root.cern,https://root.cern/root/html532/TLeaf.html,2,['rout'],['routine']
Integrability,"ent the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:8734,integrat,integration,8734,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,2,['integrat'],['integration']
Integrability,"ent window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return lenght of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:52539,depend,depends,52539,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,4,['depend'],['depends']
Integrability,"ent window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:56193,depend,depends,56193,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,2,['depend'],['depends']
Integrability,"ent window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetGCFont(GContext_t gc); Return the font associated with the graphics context gc. FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:55580,depend,depends,55580,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,4,['depend'],['depends']
Integrability,"ent(const char* idxlabel, RooAbsData& data). void Streamer(TBuffer& b); Stream an object of class RooAbsData. void checkInit() const. void Draw(Option_t* option = """"); Forward draw command to data store. Bool_t hasFilledCache() const. const TTree* tree() const. RooAbsData* emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0) const. RooAbsDataStore* store(); { return _dstore ; }. const RooAbsDataStore* store() const; { return _dstore ; }. void add(const RooArgSet& row, Double_t weight = 1, Double_t weightError = 0); Add one ore more rows of data. const RooArgSet* get() const; Load a given row of data. Double_t weight() const. Bool_t valid() const; { return kTRUE ; }. Double_t sumEntries() const. Double_t sumEntries(const char* cutSpec, const char* cutRange = 0) const. Bool_t isWeighted() const; Do events in dataset have weights?. Bool_t isNonPoissonWeighted() const; Do events in dataset have non-integer weights?. void Print(Option_t* options = 0) const; Printing interface (human readable). Double_t mean(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return moment(var,1,0,cutSpec,cutRange) ; }. Double_t sigma(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return sqrt(moment(var,2,cutSpec,cutRange)) ; }. Double_t skewness(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,3,cutSpec,cutRange) ; }. Double_t kurtosis(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; { return standMoment(var,4,cutSpec,cutRange) ; }. Double_t covariance(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kFALSE) ; }. Double_t correlation(RooRealVar& x, RooRealVar& y, const char* cutSpec = 0, const char* cutRange = 0) const; { return corrcov(x,y,cutSpec,cutRange,kTRUE) ; }. TMatrixDSym* covarianceMatrix(const char* cutSpec = 0, const char* cutRange = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:36983,interface,interface,36983,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,1,['interface'],['interface']
Integrability,"ent); TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerAdaptive(); Destructor. void InitStats(); (re)initialise the statistics; called at the begining or after a worker dies. void RemoveUnAllocNode(TPacketizerAdaptive::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizerAdaptive::TFileStat* file); Remove file from the list of actives. void RemoveActiveNode(TPacketizerAdaptive::TFileNode* ); Remove node from the list of actives. void Reset(); Reset the internal data structure for packet distribution. void ValidateFiles(TDSet* dset, TList* slaves, Long64_t maxent = -1, Bool_t byfile = kFALSE); Check existence of file/dir/tree an get number of entries.; Assumes the files have been setup. Int_t CalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); The result depends on the fStrategy. Int_t AddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); To be used by GetNextPacket but also in reaction to kPROOF_STOPPROCESS; message (when the worker was asked to stop processing during a packet).; returns the #entries intended in the last packet - #processed entries. TDSetElement * GetNextPacket(TSlave* sl, TMessage* r); Get next packet;; A meaningfull difference to TPacketizer is the fact that this; packetizer, for each worker, tries to predict whether the worker; will finish processing it's local files before the end of the query.; If yes, it allocates, to those workers, files from non-slave filenodes; or from slaves that are overloaded. The check is done every time a new; file needs to be assigned. Int_t GetActiveWorkers(); Return the number of workers still processing. Float_t GetCurrentRate(Bool_t& all); Get Estimation of the current rate; just summing the current rate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPacketizerAdaptive.html:12610,depend,depends,12610,root/html530/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html530/TPacketizerAdaptive.html,9,['depend'],['depends']
Integrability,"ent)Helper function used by TClass::GetClass().Definition TClass.cxx:5749; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3770; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kClassNew@ kClassNewDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::kDummyNew@ kDummyNewDefinition TClass.h:107; TClass::Movevoid Move(void *arenaFrom, void *arenaTo) constRegister the fact that an object was moved from the memory location 'arenaFrom' to the memory locatio...Definition TClass.cxx:4327; TClass::GetDeclIdMapstatic DeclIdMap_t * GetDeclIdMap()Definition TClass.cxx:480; TClass::GetDeclFileLineShort_t GetDeclFileLine() constDefinition TClass.h:429; TClass::SetStreamerFuncvoid SetStreamerFunc(ClassStreamerFunc_t strm)Set a wrapper/accessor function around this class custom streamer.Definition TClass.cxx:6922; TClass::GetImplFileNameconst char * GetImplFileName() constDefinition TClass.h:456; TClass::GetListOfRealDataTList * GetListOfRealData() constDefinition TClass.h:453; TClass::SizeInt_t Size() constReturn size of object of this class.Definition TClass.cxx:5704; TClass::SetCurrentStreamerInfovoid SetCurrentStreamerInfo(TVirtualStreamerInfo *info)Set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5696; TClass::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Return a pointer to the dictionary loading function generated by rootcint.Definition TClass.cxx:3422; TClass::fOffsetStreamerLongptr_t fOffsetStreamerProperties that can only be evaluated at run-time.Definition TClass.h:275; TClass::fSizeofInt_t fSizeofDefinition TClass.h:243; TClass::GetNewArrayROOT::NewArrFunc_t GetNewArray() constReturn the wrapper around new ThisClass[].Definition TClass.cxx:7455; TClass::RepoCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:59690,wrap,wrapper,59690,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"ent)Helper function used by TClass::GetClass().Definition TClass.cxx:5816; TClass::fSharedLibsTString fSharedLibsDefinition TClass.h:227; TClass::GetTypeInfoconst std::type_info * GetTypeInfo() constDefinition TClass.h:496; TClass::GetListOfDataMembersTList * GetListOfDataMembers(Bool_t load=kTRUE)Return list containing the TDataMembers of a class.Definition TClass.cxx:3837; TClass::ENewTypeENewTypeDefinition TClass.h:107; TClass::kClassNew@ kClassNewDefinition TClass.h:107; TClass::kRealNew@ kRealNewDefinition TClass.h:107; TClass::kDummyNew@ kDummyNewDefinition TClass.h:107; TClass::Movevoid Move(void *arenaFrom, void *arenaTo) constRegister the fact that an object was moved from the memory location 'arenaFrom' to the memory locatio...Definition TClass.cxx:4394; TClass::GetDeclIdMapstatic DeclIdMap_t * GetDeclIdMap()Definition TClass.cxx:480; TClass::GetDeclFileLineShort_t GetDeclFileLine() constDefinition TClass.h:429; TClass::SetStreamerFuncvoid SetStreamerFunc(ClassStreamerFunc_t strm)Set a wrapper/accessor function around this class custom streamer.Definition TClass.cxx:6989; TClass::GetImplFileNameconst char * GetImplFileName() constDefinition TClass.h:456; TClass::GetListOfRealDataTList * GetListOfRealData() constDefinition TClass.h:453; TClass::SizeInt_t Size() constReturn size of object of this class.Definition TClass.cxx:5771; TClass::SetCurrentStreamerInfovoid SetCurrentStreamerInfo(TVirtualStreamerInfo *info)Set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5763; TClass::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Return a pointer to the dictionary loading function generated by rootcint.Definition TClass.cxx:3489; TClass::fOffsetStreamerLongptr_t fOffsetStreamerProperties that can only be evaluated at run-time.Definition TClass.h:275; TClass::fSizeofInt_t fSizeofDefinition TClass.h:243; TClass::GetNewArrayROOT::NewArrFunc_t GetNewArray() constReturn the wrapper around new ThisClass[].Definition TClass.cxx:7522; TClass::RepoCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:59518,wrap,wrapper,59518,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,ent* TMVA::VariableTransformBase::fBackTransformedEvent. mutableprotected . holds the current back-transformed event ; Definition at line 140 of file VariableTransformBase.h. ◆ fCreated. Bool_t TMVA::VariableTransformBase::fCreated. private . has been created ; Definition at line 154 of file VariableTransformBase.h. ◆ fDsi. DataSetInfo& TMVA::VariableTransformBase::fDsi. protected . Definition at line 130 of file VariableTransformBase.h. ◆ fDsiOutput. DataSetInfo* TMVA::VariableTransformBase::fDsiOutput. protected . Definition at line 131 of file VariableTransformBase.h. ◆ fEnabled. Bool_t TMVA::VariableTransformBase::fEnabled. private . has been enabled ; Definition at line 153 of file VariableTransformBase.h. ◆ fGet. VectorOfCharAndInt TMVA::VariableTransformBase::fGet. protected . get variables/targets/spectators ; Definition at line 143 of file VariableTransformBase.h. ◆ fLogger. MsgLogger* TMVA::VariableTransformBase::fLogger. mutableprotected . ! message logger ; Definition at line 174 of file VariableTransformBase.h. ◆ fNormalise. Bool_t TMVA::VariableTransformBase::fNormalise. private . normalise input variables ; Definition at line 155 of file VariableTransformBase.h. ◆ fNSpectators. UInt_t TMVA::VariableTransformBase::fNSpectators. mutableprivate . number of spectators to be transformed ; Definition at line 165 of file VariableTransformBase.h. ◆ fNTargets. UInt_t TMVA::VariableTransformBase::fNTargets. mutableprivate . number of targets to be transformed ; Definition at line 164 of file VariableTransformBase.h. ◆ fNVariables. UInt_t TMVA::VariableTransformBase::fNVariables. mutableprivate . number of variables to be transformed ; Definition at line 163 of file VariableTransformBase.h. ◆ fNVars. UInt_t TMVA::VariableTransformBase::fNVars. private . number of variables ; Definition at line 156 of file VariableTransformBase.h. ◆ fPut. VectorOfCharAndInt TMVA::VariableTransformBase::fPut. protected . put variables/targets/spectators ; Definition at line 144 of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:29737,message,message,29737,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['message'],['message']
Integrability,"ent. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:3006,interface,interface,3006,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['interface'],['interface']
Integrability,"ent. Some methods, like Fumili, Fumili2 and GSLMultiFit are specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition the ROOT::Math::FitMethodFunction interface.; The interface for setting the initial values for the function variables (which are the parameters in of the model function in case of solving for fitting) and specifying their limits.; The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class ROOT::Math::MinimizerOptions. When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the MinimizerOptions class. For the list of the available option parameter one must look at the documentation of the corresponding derived class.; The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2). An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory. ; Definition at line 119 of file Minimizer.h. Public Member Functions;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:3722,interface,interface,3722,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['interface'],['interface']
Integrability,"ent.cxx. ◆ FreeGC() [1/2]. void TGClient::FreeGC ; (; const TGGC * ; gc). Free a graphics context. ; Definition at line 328 of file TGClient.cxx. ◆ FreeGC() [2/2]. void TGClient::FreeGC ; (; GContext_t ; gc). Free a graphics context. ; Definition at line 336 of file TGClient.cxx. ◆ FreePicture(). void TGClient::FreePicture ; (; const TGPicture * ; pic). Free picture resource. ; Definition at line 308 of file TGClient.cxx. ◆ GetColorByName(). Bool_t TGClient::GetColorByName ; (; const char * ; name, . Pixel_t & ; pixel . ); const. Get a color by name. ; If color is found return kTRUE and pixel is set to the color's pixel value, kFALSE otherwise. ; Definition at line 395 of file TGClient.cxx. ◆ GetDefaultColormap(). Colormap_t TGClient::GetDefaultColormap ; (; ); const. inline . Definition at line 145 of file TGClient.h. ◆ GetDefaultRoot(). const TGWindow * TGClient::GetDefaultRoot ; (; ); const. Returns the root (i.e. ; desktop) window. Should only be used as parent for frames that will never be embedded, like popups, message boxes, etc. (like TGToolTips, TGMessageBox, etc.). ; Definition at line 234 of file TGClient.cxx. ◆ GetDisplayHeight(). UInt_t TGClient::GetDisplayHeight ; (; ); const. Get display height. ; Definition at line 275 of file TGClient.cxx. ◆ GetDisplayWidth(). UInt_t TGClient::GetDisplayWidth ; (; ); const. Get display width. ; Definition at line 262 of file TGClient.cxx. ◆ GetFont() [1/2]. TGFont * TGClient::GetFont ; (; const char * ; font, . Bool_t ; fixedDefault = kTRUE . ). Get a font from the font pool. ; Fonts must be freed via TGClient::FreeFont(). Returns 0 in case of error or if font does not exist. If fixedDefault is false the ""fixed"" font will not be substituted as fallback when the asked for font does not exist. ; Definition at line 348 of file TGClient.cxx. ◆ GetFont() [2/2]. TGFont * TGClient::GetFont ; (; const TGFont * ; font). Get again specified font. Will increase its usage count. ; Definition at line 356 of file TGClient.cxx. ◆ G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGClient.html:24601,message,message,24601,doc/master/classTGClient.html,https://root.cern,https://root.cern/doc/master/classTGClient.html,1,['message'],['message']
Integrability,"entCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:2574,wrap,wrapped,2574,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,1,['wrap'],['wrapped']
Integrability,"entDefinition TGeoNode.cxx:294; TGeoNode::GetVolumeTGeoVolume * GetVolume() constDefinition TGeoNode.h:99; TGeoNode::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoNode.h:91; TGeoNode::IsVisibleBool_t IsVisible() constDefinition TGeoNode.h:109; TGeoOverlapBase class describing geometry overlaps.Definition TGeoOverlap.h:37; TGeoOverlap::GetSecondVolumeTGeoVolume * GetSecondVolume() constDefinition TGeoOverlap.h:66; TGeoOverlap::GetPolyMarkerTPolyMarker3D * GetPolyMarker() constDefinition TGeoOverlap.h:64; TGeoOverlap::GetFirstMatrixTGeoHMatrix * GetFirstMatrix() constDefinition TGeoOverlap.h:67; TGeoOverlap::IsExtrusionBool_t IsExtrusion() constDefinition TGeoOverlap.h:70; TGeoOverlap::GetOverlapDouble_t GetOverlap() constDefinition TGeoOverlap.h:69; TGeoOverlap::GetSecondMatrixTGeoHMatrix * GetSecondMatrix() constDefinition TGeoOverlap.h:68; TGeoOverlap::GetFirstVolumeTGeoVolume * GetFirstVolume() constDefinition TGeoOverlap.h:65; TGeoPainterClass implementing all draw interfaces for a generic 3D viewer using TBuffer3D mechanism.Definition TGeoPainter.h:39; TGeoPainter::AddTrackTVirtualGeoTrack * AddTrack(Int_t id, Int_t pdgcode, TObject *part) overrideCreate a primary TGeoTrack.Definition TGeoPainter.cxx:130; TGeoPainter::PaintOverlapvoid PaintOverlap(void *ovlp, Option_t *option="""") overridePaint an overlap.Definition TGeoPainter.cxx:1321; TGeoPainter::fBombZDouble_t fBombZDefinition TGeoPainter.h:43; TGeoPainter::EstimateCameraMovevoid EstimateCameraMove(Double_t tmin, Double_t tmax, Double_t *start, Double_t *end) overrideEstimate camera movement between tmin and tmax for best track display.Definition TGeoPainter.cxx:1039; TGeoPainter::fVisVolumesTObjArray * fVisVolumesDefinition TGeoPainter.h:69; TGeoPainter::fPluginTGeoIteratorPlugin * fPluginDefinition TGeoPainter.h:68; TGeoPainter::fMatDouble_t fMat[9]Definition TGeoPainter.h:46; TGeoPainter::SamplePointsTGeoNode * SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path) overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:93399,interface,interfaces,93399,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['interface'],['interfaces']
Integrability,"entFunctionMultiDim>&); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::BinData&fData; const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(fData,fFunc,fWeight); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: PoissonLikelihoodFCN.h 39382 2011-05-26 08:31:43Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4446,interface,interface,4446,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['interface'],['interface']
Integrability,"entListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; RooSetProxy_facListSet of observables on which function does not depends, which are integrated nevertheless; TIterator*_facListIter! Iterator over factorizing observables; RooArgSet_facListOwnedOwned components in _facList; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooArgSet*_funcNormSetOptional normalization set passed to function; RooRealProxy_functionFunction being integration; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooNumIntConfig*_iconfig; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooSetProxy_intListSet of continuous observables over which is integrated numerically; RooRealIntegral::IntOperMode_intOperModeintegration operation mode; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; RooSetProxy_jacListSet of lvalue observables over which is analytically integration that have a non-unit Jacobian; TIterator*_jacListIter! Iterator over lvalue observables with Jacobian; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_mode; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:34586,integrat,integrated,34586,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,4,['integrat'],"['integrated', 'integration']"
Integrability,"ental::RNTupleWriter::Append ; (; std::unique_ptr< RNTupleModel > ; model, . std::string_view ; ntupleName, . TFile & ; file, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Throws an exception if the model is null. ; Definition at line 95 of file RNTupleWriter.cxx. ◆ CommitCluster(). void ROOT::Experimental::RNTupleWriter::CommitCluster ; (; bool ; commitClusterGroup = false). inline . Ensure that the data from the so far seen Fill calls has been written to storage. ; Definition at line 119 of file RNTupleWriter.hxx. ◆ CommitClusterGroup(). void ROOT::Experimental::RNTupleWriter::CommitClusterGroup ; (; ). private . Definition at line 102 of file RNTupleWriter.cxx. ◆ Create(). std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Create ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink, . const RNTupleWriteOptions & ; options . ). staticprivate . Create a writer, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:5955,wrap,wrapping,5955,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,1,['wrap'],['wrapping']
Integrability,"ented from TH1.; Reimplemented in TProfile3D.; Definition at line 267 of file TH1.h. ◆ GetBinContent() [4/4]. Double_t TH3::GetBinContent ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlineoverridevirtual . Reimplemented from TH1.; Reimplemented in TProfile3D.; Definition at line 101 of file TH3.h. ◆ GetBinErrorLow() [1/2]. Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented from TH1.; Definition at line 271 of file TH1.cxx. ◆ GetBinErrorLow() [2/2]. virtual Double_t TH3::GetBinErrorLow ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ). inlinevirtual . Definition at line 104 of file TH3.h. ◆ GetBinErrorUp() [1/2]. Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented from TH1.; Definition at line 272 of file TH1.cxx. ◆ GetBinErrorUp() [2/2]. virtual Double_t TH3::GetBinErrorUp ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ). inlinevirtual . Definition at line 105 of file TH3.h. ◆ GetBinWithContent3(). Double_t TH3::GetBinWithContent3 ; (; Double_t ; c, . Int_t & ; binx, . Int_t & ; biny, . Int_t & ; binz, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Int_t ; firsty = 0, . Int_t ; lasty = 0, . Int_t ; firstz = 0, . Int_t ; lastz = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ; In case several cells in the specified range satisfy diff <=maxdiff the cell with the smallest difference is returned in binx,biny,binz. In all cases the fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:81272,depend,depend,81272,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['depend'],['depend']
Integrability,"ented from TSystem.; Definition at line 1184 of file TUnixSystem.cxx. ◆ StackTrace(). void TUnixSystem::StackTrace ; (; ). overridevirtual . Print a stack trace. ; Reimplemented from TSystem.; Definition at line 2281 of file TUnixSystem.cxx. ◆ Streamer(). void TUnixSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TUnixSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 219 of file TUnixSystem.h. ◆ Symlink(). int TUnixSystem::Symlink ; (; const char * ; from, . const char * ; to . ). overridevirtual . Create a symlink from file1 to file2. ; Returns 0 when successful, -1 in case of failure. ; Reimplemented from TSystem.; Definition at line 1695 of file TUnixSystem.cxx. ◆ Syslog(). void TUnixSystem::Syslog ; (; ELogLevel ; level, . const char * ; mess . ). overridevirtual . Send mess to syslog daemon. ; Level is the logging level and mess the message that will be written on the log. ; Reimplemented from TSystem.; Definition at line 2654 of file TUnixSystem.cxx. ◆ TempDirectory(). const char * TUnixSystem::TempDirectory ; (; ); const. overridevirtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented from TSystem.; Definition at line 1503 of file TUnixSystem.cxx. ◆ TempFileName(). FILE * TUnixSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). overridevirtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented from TSyst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:70155,message,message,70155,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['message'],['message']
Integrability,"ented technology M should profit from an increased flexibility and functionality and make it also extendable (recursivness, new algorithms, new functionality).; What M does not:. histogramming; data handling; graphics. M is kept as a low-level package with optimal performance.; The main usages of M are. from a user’s program (such as int main()…); from a graphical data analysis tool such as HippoDraw@bib-HippoDraw. The most important goals of M in are. its numerical accuracy (equivalent to its Fortran version); its computational performance (equivalent to its Fortran version). For the design of the application programming interface (API) of M a two-way strategy was imposed:. a minimal required interface with minimum interaction with M objects and with appropriate usage of the standard library (STL): the user’s implementation of the FCNBase class, initial parameter values and uncertainties are provided by the to M user via std::vectors.; a rich interface which provides the user with more functionality such as interaction with parameters. The core of the minimization functionality and related tools (the kernel of M ) should be clearly separated from the user, who is interfacing via defined user interfaces (the API).; 2.3 Internal and external parameters; Each of the parameters to the \(\mbox{FCN}\) is defined by the user as belonging to one of the following types:. Freely variable: allowed to take on any value.; Variable with double sided limits: allowed to vary only between two limits specified by the user.; Variable with single sided limits: allowed to vary only between one upper or one lower limit specified by the user and unlimited to the other side.; Fixed: originally defined as variable, but now taking on only the value the parameter had at the moment it was fixed, or a value later assigned by the user.; Constant: taking on only one value as specified by the user. When using the minimal required interface, all variable parameters are free and unbound.; The user, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:10216,interface,interface,10216,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['interface'],['interface']
Integrability,"ential) underlying class ; EDataTypefTypetype id; static TDataType*fgBuiltins[22]Array of builtins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataType(TypedefInfo_t* info = 0); Default TDataType ctor. TDataTypes are constructed in TROOT via; a call to TCint::UpdateListOfTypes(). TDataType(const char* typenam); Constructor for basic data types, like ""char"", ""unsigned char"", etc. TDataType(const TDataType& ); copy constructor. TDataType& operator=(const TDataType& ); assignement operator. ~TDataType(); TDataType dtor deletes adopted CINT TypedefInfo object. const char * GetTypeName(EDataType type); Return the name of the type. const char * GetTypeName() const; Get basic type of typedef, e,g.: ""class TDirectory*"" -> ""TDirectory"".; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of typedef, e,g.: ""class TDirectory*"". EDataType GetType(const type_info& typeinfo); Set type id depending on name. const char * AsString(void* buf) const; Return string containing value in buffer formatted according to; the basic data type. The result needs to be used or copied immediately. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void SetType(const char* name); Set type id depending on name. Int_t Size() const; Get size of basic typedef'ed type. void CheckInfo(); Refresh the underlying information. void AddBuiltins(TCollection* types); Create the TDataType objects for builtins. TDataType* GetDataType(EDataType type); Given a EDataType type, get the TDataType* that represents it. Int_t GetType() const; { return (Int_t)fType; }. » Author: Rene Brun 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataType.html:8012,depend,depending,8012,root/html534/TDataType.html,https://root.cern,https://root.cern/root/html534/TDataType.html,2,['depend'],['depending']
Integrability,"enting 'int[x_lo,x] f(x_prime) dx_prime'. RooAbsReal* createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. int[x_lo,x] f(x_prime) dx_prime. The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The default strategy to calculate the running integrals is. - If the integrand (this object) supports analytical integration, construct an integral object; that calculate the running integrals value by calculating the analytical integral each; time the running integral object is evaluated. - If the integrand (this object) requires numeric integration to construct the running integral; create an object of class RooNumRunningInt which first samples the entire function and integrates; the sampled function numerically. This method has superior performance as there is no need to; perform a full (numeric) integration for each evaluation of the running integral object, but; only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; granularity for the scanning technique can be controlled with the ScanParameters technique; which allows to specify the number of samples to be taken, and to which or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:66628,integrat,integration,66628,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,9,['integrat'],['integration']
Integrability,entityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  CBasicRNNLayerGeneric implementation ;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  CGraphCr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:94749,interface,interface,94749,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['interface'],['interface']
Integrability,"entries without mixing them with other add or insert functions. The id will be used in the event processing routine when the item is selected. ; Definition at line 1258 of file TGListBox.cxx. ◆ AddEntrySort() [2/3]. void TGListBox::AddEntrySort ; (; TGLBEntry * ; lbe, . TGLayoutHints * ; lhints . ). virtual . Add specified TGLBEntry and TGLayoutHints to listbox sorted by increasing id. ; This sorting works properly only if EntrySort functions are used to add entries without mixing them with other add or insert functions. The entry and layout will be adopted and later deleted by the listbox. ; Definition at line 1269 of file TGListBox.cxx. ◆ AddEntrySort() [3/3]. void TGListBox::AddEntrySort ; (; TGString * ; s, . Int_t ; id . ). virtual . Add entry with specified string and id to listbox sorted by increasing id. ; This sorting works properly only if EntrySort functions are used to add entries without mixing them with other add or insert functions. The id will be used in the event processing routine when the item is selected. The string will be adopted by the listbox. ; Definition at line 1241 of file TGListBox.cxx. ◆ ChangeBackground(). void TGListBox::ChangeBackground ; (; Pixel_t ; back). overridevirtual . Change background to all entries. ; Reimplemented from TGFrame.; Definition at line 1534 of file TGListBox.cxx. ◆ Class(). static TClass * TGListBox::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGListBox::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGListBox::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 302 of file TGListBox.h. ◆ DeclFileName(). static const char * TGListBox::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 302 of file TGListBox.h. ◆ DoubleClicked() [1/3]. virtual void TGListBox::DoubleClicked ; (; const char * ; txt). inli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListBox.html:38766,rout,routine,38766,doc/master/classTGListBox.html,https://root.cern,https://root.cern/doc/master/classTGListBox.html,1,['rout'],['routine']
Integrability,"entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = [](int b2, double b1) { return b2 % 2 && b1 < 4.; };; ; // ### `Count` action; // The `Count` allows to retrieve the number of the entries that passed the; // filters. Here, we show how the automatic selection of the column kicks; // in in case the user specifies none.; auto entries1 = d.Filter(cutb1) // <- no column name specified here!; .Filter(cutb1b2, {""b2"", ""b1""}); .Count();; ; std::cout << *entries1 << "" entries passed all filters"" << std::endl;; ; // Filters can be expressed as strings. The content must be C++ code. The; // name of the variables must be the name of the branches. The code is; // just-in-time compiled.; auto entries2 = d.Filter(""b1 < 5."").Count();; std::cout << *entries2 << "" entries passed the string filter"" << std::endl;; ; // ### `Min`",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:1781,wrap,wrapped,1781,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['wrap'],['wrapped']
Integrability,"entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGSFile Read a ROOT file from the Google Storage cloud; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:85379,interface,interface,85379,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['interface'],['interface']
Integrability,"ents in the geometry, therefore their editor is more complex. It provides the following functionalities:. General. This category allows changing the name of the volume and selecting other shape or medium among existing ones.; Daughters. The category allows removing existing daughter nodes or adding new ones. The button ""Position"" allows editing the positioning matrix of a given node. Setting volume properties and modifying volume hierarchy. Visualization. This category allows changing the visibility of the edited volume or for its daughters, as well as other visualization settings. The radio button ""All"" allows viewing all volumes down to the selected depth. ""Leaves"" will draw only the deepest nodes that have the selected depth or lower level ones that have no daughters inside. ""Only"" will allow drawing only the edited volume. The check button ""Raytrace"" will just draw the current selection in solid mode using the ray-tracing algorithm provided by TGeo. Volume visualisation settings and division interface for volumes. Division. Allows dividing the edited volume according a given pattern. The division axes that are allowed are presented in a radio-button group. The number entries labeled ""From"", ""Step"" and ""Nslices"" correspond to the divisioning parameters on the selected axis. The range of the division is between start and start+ndiv*step values and its validity is checked upon changing one of the values. NOTE: When changing a value in a number entry by typing a number, press ENTER at the end to validate. This applies for taking into account and validation of any number change in the geometry editors. How to Create a Valid Geometry with Geometry Editors. Create a new geometry manager and start the editor as described at the beginning.; Create at least one material from the ""Materials"" shutter item category. Generally, for creating objects, the interface is always in the TGeoManagerEditor in different categories - one should just provide a name and requested paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:143395,interface,interface,143395,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['interface'],['interface']
Integrability,"ents is being executed . kMapWithArg a Map method with arguments is being executed . kMapRed a MapReduce method with no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:13425,message,messages,13425,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,2,['message'],['messages']
Integrability,"ents of all elements and recursively any dependents of those dependents (if deepCopy flag is set). This is useful to save the values of variables or parameters. It doesn't require deep copying if the parameters are direct members of the collection.; If deepCopy is specified, the client-server links between the cloned list elements and the cloned external dependents are reconnected to each other, making the snapshot a completely self-contained entity. ; Definition at line 219 of file RooAbsCollection.cxx. ◆ snapshot() [2/2]. bool RooAbsCollection::snapshot ; (; RooAbsCollection & ; output, . bool ; deepCopy = true . ); const. Take a snap shot of current collection contents: A collection that owns its elements is returned containing clones of. . Elements in this collection; External dependents of those elements and recursively any dependents of those dependents (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned list elements and the cloned external dependents are reconnected to each other, making the snapshot a completely self-contained entity. ; Definition at line 253 of file RooAbsCollection.cxx. ◆ sort(). void RooAbsCollection::sort ; (; bool ; reverse = false). Sort collection using std::sort and name comparison. ; Definition at line 1526 of file RooAbsCollection.cxx. ◆ sortTopologically(). void RooAbsCollection::sortTopologically ; (; ). Sort collection topologically: the servers of any RooAbsArg will be before that RooAbsArg in the collection. ; Definition at line 1550 of file RooAbsCollection.cxx. ◆ Streamer(). void RooAbsCollection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgList, RooArgSet, RooCollectionProxy< RooArgList >, and RooCollectionProxy< RooArgSet >. ◆ StreamerNVirtual(). void RooAbsCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 455 of file RooAbsCollecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:60922,depend,dependents,60922,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['depend'],['dependents']
Integrability,"ents of all elements and recursively any dependents of those dependents (if deepCopy flag is set). This is useful to save the values of variables or parameters. It doesn't require deep copying if the parameters are direct members of the collection.; If deepCopy is specified, the client-server links between the cloned list elements and the cloned external dependents are reconnected to each other, making the snapshot a completely self-contained entity. ; Definition at line 226 of file RooAbsCollection.cxx. ◆ snapshot() [2/2]. bool RooAbsCollection::snapshot ; (; RooAbsCollection & ; output, . bool ; deepCopy = true . ); const. Take a snap shot of current collection contents: A collection that owns its elements is returned containing clones of. . Elements in this collection; External dependents of those elements and recursively any dependents of those dependents (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned list elements and the cloned external dependents are reconnected to each other, making the snapshot a completely self-contained entity. ; Definition at line 260 of file RooAbsCollection.cxx. ◆ sort(). void RooAbsCollection::sort ; (; bool ; reverse = false). Sort collection using std::sort and name comparison. ; Definition at line 1536 of file RooAbsCollection.cxx. ◆ sortTopologically(). void RooAbsCollection::sortTopologically ; (; ). Sort collection topologically: the servers of any RooAbsArg will be before that RooAbsArg in the collection. ; Definition at line 1560 of file RooAbsCollection.cxx. ◆ Streamer(). void RooAbsCollection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgList, RooArgSet, RooCollectionProxy< RooArgList >, and RooCollectionProxy< RooArgSet >. ◆ StreamerNVirtual(). void RooAbsCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 432 of file RooAbsCollecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:59139,depend,dependents,59139,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['depend'],['dependents']
Integrability,"ents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; double getValV (const RooArgSet *) const override;  Return current value, normalized by integrating over the observables in nset. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:55679,rout,routine,55679,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['rout'],['routine']
Integrability,"ents! Set of owned component; TIterator*_pdfObsIter! ; RooSetProxy_pdfObsListList of observables mapped onto histogram observables; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Double_t_totVolume! Total volume of space (product of ranges of observables); Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_unitNormAssume contents is unit normalized (for use as pdf cache); Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:41641,integrat,integrator,41641,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,2,['integrat'],['integrator']
Integrability,"ents(). RooArgSet * RooAbsMCStudyModule::allDependents ; (; ). inlineprotected . Return all observables. ; Definition at line 124 of file RooAbsMCStudyModule.h. ◆ binGenData(). bool RooAbsMCStudyModule::binGenData ; (; ). inlineprotected . If true binning of data between generating and fitting is requested. ; Definition at line 161 of file RooAbsMCStudyModule.h. ◆ Class(). static TClass * RooAbsMCStudyModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsMCStudyModule::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsMCStudyModule::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file RooAbsMCStudyModule.h. ◆ DeclFileName(). static const char * RooAbsMCStudyModule::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 184 of file RooAbsMCStudyModule.h. ◆ dependents(). RooArgSet * RooAbsMCStudyModule::dependents ; (; ). inlineprotected . Return fit model observables. ; Definition at line 119 of file RooAbsMCStudyModule.h. ◆ doInitializeInstance(). bool RooAbsMCStudyModule::doInitializeInstance ; (; RooMCStudy & ; study). Initializer method called upon attachment to given RooMCStudy object. ; Store reference to RooMCStudy object that this module relates to and call internal module initialization function. ; Definition at line 61 of file RooAbsMCStudyModule.cxx. ◆ extendedGen(). bool RooAbsMCStudyModule::extendedGen ; (; ). inlineprotected . If true extended mode generation is requested. ; Definition at line 156 of file RooAbsMCStudyModule.h. ◆ finalizeRun(). virtual RooDataSet * RooAbsMCStudyModule::finalizeRun ; (; ). inlinevirtual . Method called at the end of each RooMCStudy run. ; If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. ; Rei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:16009,depend,dependents,16009,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,ents(); voidVoxelize(Option_t* option = 0). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; static Bool_tfgLock! Lock preventing a second geometry to be loaded; static Int_tfgMaxDaughters! Maximum number of daughters; static Int_tfgMaxLevel! Maximum level in geometry; static Int_tfgMaxXtruVert! Maximum number of Xtru vertices; static Int_tfgVerboseLevel! Verbosity level for Info messages (no IO). private:. Bool_tfActivity! switch ON/OFF volume activity (default OFF - all volumes active)); TObjArray*fArrayPNE! array of phisical node entries; UChar_t*fBits! bits used for voxelization; TGeoShape*fClippingShape! clipping shape for raytracing; Bool_tfClosed! flag that geometry is closed; TGeoNavigator*fCurrentNavigator! current navigator; TVirtualGeoTrack*fCurrentTrack! current track; TGeoVolume*fCurrentVolume! current volume; Bool_tfDrawExtra! flag that the list of physical nodes has to be drawn; TGeoElementTable*fElementTable! table of elements; Int_tfExplodedViewexploded view mode; TGeoHMatrix*fGLMatrixmatrix to be used for view transformations; TObjArray*fGShapes! list of runtime shapes; TObjArray*fGVolumes! list of runtime volumes; THashList*fHashGVolumes! hash list of group volumes provid,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoManager.html:33719,message,messages,33719,root/html602/TGeoManager.html,https://root.cern,https://root.cern/root/html602/TGeoManager.html,4,['message'],['messages']
Integrability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:12396,message,message,12396,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['message'],['message']
Integrability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:9847,message,message,9847,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,['message'],['message']
Integrability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:9124,message,message,9124,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,45,['message'],['message']
Integrability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:9075,message,message,9075,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['message'],['message']
Integrability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:11337,message,message,11337,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,2,['message'],['message']
Integrability,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:48953,message,message,48953,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['message'],"['message', 'messages']"
Integrability,"ents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:16753,integrat,integrator,16753,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['integrat'],['integrator']
Integrability,"ents: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1935 of file TVirtualX.cxx. ◆ DrawString(). void TVirtualX::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). virtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1808 of file TVirtualX.cxx. ◆ DrawText() [1/2]. void TVirtualX::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). virtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the background is not drawn (kClear); mode = 1 the background is drawn (kOpaque) . Reimplemented in TGQuartz, TGWin32, TGWin32VirtualXProxy, TGX11, and TGX11TTF.; Definition at line 345 of file TVirtualX.cxx. ◆ DrawText() [2/2]. void TVirtualX::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). virtual . Draws a text string using current font. ; Parameters. [in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:75793,depend,dependent,75793,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['depend'],['dependent']
Integrability,"entsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_t_byteValue! Transient cache for byte values from tree branches ; static Bool_t_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_t_floatValue! Transient cache for floating point values from tree branches ; Bool_t_forceNumIntForce numerical integration if flag set; static Bool_t_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intValue! Transient cache for integer values from tree branches ; TString_labelPlot label for objects value; RooArgSet*_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_t_p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:30462,integrat,integration,30462,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['integrat'],['integration']
Integrability,"enu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; THashListfInfoMsgslist of info messages; TIterfIter!iterator in messages; TListfMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. void AddInfo(const char* mesg); Add an info message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. void Streamer(TBuffer& ); Stream an object of class TStatus. virtual ~TStatus(); { }. Bool_t IsOk() const; { return TestBit(kNotOk) ? kFALSE : kTRUE; }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStatus.html:6833,message,messages,6833,root/html534/TStatus.html,https://root.cern,https://root.cern/root/html534/TStatus.html,4,['message'],"['message', 'messages']"
Integrability,"enu@ kNoContextMenuif object does not want context menuDefinition TObject.h:69; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kHasUUID@ kHasUUIDif object has a TUUID (its fUniqueID=UUIDNumber)Definition TObject.h:66; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kIsReferenced@ kIsReferencedif object is referenced by a TRef or TRefArrayDefinition TObject.h:65; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:654; TObject::AddToTObjectTablestatic void AddToTObjectTable(TObject *)Private helper function which will dispatch to TObjectTable::AddObj.Definition TObject.cxx:181; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TObject::Obsoletevoid Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constUse this method to declare a method obsolete.Definition TObject.cxx:1055; TStorage::UpdateIsOnHeapstatic void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits)Definition TStorage.h:123; TStorage::ObjectAllocArraystatic void * ObjectAllocArray(size_t size)Used to allocate array of TObject on the heap (via TObject::operator new[]()).Definition TStorage.cxx:303; TStorage::ObjectAllocstatic void * ObjectAlloc(size_t size)Used to allocate a TObject on the heap (via TObject::operator new()).Definition TStorage.cxx:291; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; bool; int; unsigned int; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::Internal::DeleteChangesMemorybool DeleteCha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:32064,message,message,32064,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['message'],['message']
Integrability,"enuBar. class TGMenuBar: public TGHorizontalFrame. TGMenuBar, TGPopupMenu, TGMenuTitle and TGMenuEntry. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item will generate the event:; kC_COMMAND, kCM_MENU, menu id, user data. Function Members (Methods); public:. TGMenuBar(const TGWindow* p = 0, UInt_t w = 60, UInt_t h = 20, UInt_t options = kHorizontalFrame|kRaisedFrame); virtual~TGMenuBar(); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMenuBar.html:1312,interface,interfaces,1312,root/html528/TGMenuBar.html,https://root.cern,https://root.cern/root/html528/TGMenuBar.html,6,['interface'],['interfaces']
Integrability,"enuBar. class TGMenuBar: public TGHorizontalFrame. TGMenuBar, TGPopupMenu, TGMenuTitle and TGMenuEntry. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item will generate the event:; kC_COMMAND, kCM_MENU, menu id, user data. Function Members (Methods); public:. virtual~TGMenuBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMenuBar.html:1312,interface,interfaces,1312,root/html602/TGMenuBar.html,https://root.cern,https://root.cern/root/html602/TGMenuBar.html,4,['interface'],['interfaces']
Integrability,"enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t Run(TThread* th); Create a pthread. Int_t Join(TThread* th, void** ret); Join suspends the execution of the calling thread until the; thread identified by th terminates, either by calling pthread_exit; or by being cancelled. Int_t Exit(void* ret); Terminates the execution of the calling thread. Int_t Kill(TThread* th); Cancellation is the mechanism by which a thread can terminate the; execution of another thread. Int_t SetCancelOff(); Turn off the cancellation state of the calling thread. Int_t SetCancelOn(); Turn on the cancellation state of the calling thread. Int_t SetCancelAsynchronous(); Set the cancellation response type of the calling thread to; asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Set the cancellation response type of the calling thread to; deferred, i.e. cancel only at next cancellation point. Int_t CancelPoint(); Introduce an explicit cancellation point. Int_t CleanUpPush(void** main, void* free, void* arg); Add thread cleanup function. Int_t CleanUpPop(void** main, Int_t exe); Pop thread cleanup function from stack. Int_t CleanUp(void** main); Default thread cleanup routine. Long_t SelfId(); Return the thread identifier for the calling thread. TPosixThread(); { }. ~TPosixThread(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TPosixThread.h 35197 2010-09-08 12:34:39Z rdm $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPosixThread.html:6805,rout,routine,6805,root/html528/TPosixThread.html,https://root.cern,https://root.cern/root/html528/TPosixThread.html,1,['rout'],['routine']
Integrability,"enum and is added to the; 1724 // list of enums and its constants to the list of globals; 1725 if (!listOfEnums->THashList::FindObject(enumName)) {; 1726 ((TEnum *)selEnum)->SetClass(nullptr);; 1727 listOfEnums->Add(selEnum);; 1728 }; 1729 for (auto enumConstant : *static_cast<TEnum *>(selEnum)->GetConstants()) {; 1730 if (!listOfGlobals->FindObject(enumConstant)) {; 1731 listOfGlobals->Add(enumConstant);; 1732 }; 1733 }; 1734 } else {; 1735 // This enum is in a namespace. A TClass entry is bootstrapped if; 1736 // none exists yet and the enum is added to it; 1737 TClass *nsTClassEntry = TClass::GetClass(enumScope);; 1738 if (!nsTClassEntry) {; 1739 nsTClassEntry = new TClass(enumScope, 0, TClass::kNamespaceForMeta, true);; 1740 }; 1741 auto listOfEnums = nsTClassEntry->fEnums.load();; 1742 if (!listOfEnums) {; 1743 if ((kIsClass | kIsStruct | kIsUnion) & nsTClassEntry->Property()) {; 1744 // For this case, the list will be immutable once constructed; 1745 // (i.e. in this case, by the end of this routine).; 1746 listOfEnums = nsTClassEntry->fEnums = new TListOfEnums(nsTClassEntry);; 1747 } else {; 1748 // namespaces can have enums added to them; 1749 listOfEnums = nsTClassEntry->fEnums = new TListOfEnumsWithLock(nsTClassEntry);; 1750 }; 1751 }; 1752 if (listOfEnums && !listOfEnums->THashList::FindObject(enumName)) {; 1753 ((TEnum *)selEnum)->SetClass(nsTClassEntry);; 1754 listOfEnums->Add(selEnum);; 1755 }; 1756 }; 1757 }; 1758 enums->Clear();; 1759 delete enums;; 1760 }; 1761 ; 1762 pcmFile.GetObject(""__ProtoClasses"", protoClasses);; 1763 ; 1764 if (protoClasses) {; 1765 for (auto obj : *protoClasses) {; 1766 TProtoClass *proto = (TProtoClass *)obj;; 1767 TClassTable::Add(proto);; 1768 }; 1769 // Now that all TClass-es know how to set them up we can update; 1770 // existing TClasses, which might cause the creation of e.g. TBaseClass; 1771 // objects which in turn requires the creation of TClasses, that could; 1772 // come from the PCH, but maybe later in the loop. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:65622,rout,routine,65622,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['rout'],['routine']
Integrability,"enum valueTObject; kInconsistent enum valueTObject; kInline enum valueRooPrintable; kInvalidObject enum valueTObject; kIsOnHeap enum valueTObject; kIsReferenced enum valueTObject; kMustCleanup enum valueTObject; kName enum valueRooPrintable; kNoContextMenu enum valueTObject; kNotDeleted enum valueTObject; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kSingleKey enum valueTObject; kSingleLine enum valueRooPrintable; kStandard enum valueRooPrintable; kTitle enum valueRooPrintable; kTreeStructure enum valueRooPrintable; kValue enum valueRooPrintable; kVerbose enum valueRooPrintable; kWriteDelete enum valueTObject; kZombie enum valueTObject; leafNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constRooAbsArg; localNoDirtyInhibit() constRooAbsArginline; logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constRooAbsPdfprivate; logEvalError(const char *message, const char *serverValueString=nullptr) constRooAbsReal; logEvalError(const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr)RooAbsRealstatic; ls(Option_t *option="""") const overrideTNamedvirtual; makeLegacyIterator(const RefCountList_t &list) constRooAbsArgprivate; makeProjectionSet(const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) constRooAbsRealprotected; MakeZombie()TObjectinlineprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) constRooAbsRealprotected; matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:25001,message,message,25001,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,1,['message'],['message']
Integrability,"eoPconA polycone ;  CTGeoPconEditorEditor for a TGeoPcon ;  CTGeoPconSectionUtility frame used by TGeoPcon editor ;  ►CTGeoPgonA polygone ;  CThreadData_t;  CTGeoPgonEditorEditor for a TGeoPgon ;  CTGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes ;  CTGeoPNEntryThe knowledge of the path to the objects that need to be misaligned is essential since there is no other way of identifying them ;  CTGeoPolygonAn arbitrary polygon defined by vertices ;  CTGeoRCExtensionReference counted extension which has a pointer to and owns a user defined TObject ;  CTGeoRCPtrA reference counting-managed pointer for classes derived from TGeoExtension which can be used as C pointer ;  CTGeoRegionRegions are groups of volumes having a common set of user tracking cuts ;  CTGeoRegionCut;  CTGeoRotationClass describing rotations ;  CTGeoRotationEditorEditor for a TGeoRotation ;  CTGeoScaleClass describing scale transformations ;  CTGeoScaledShapeA shape scaled by a TGeoScale transformation ;  CTGeoShapeBase abstract class for all shapes ;  CTGeoShapeAssemblyThe shape encapsulating an assembly (union) of volumes ;  CTGeoShapeDialog;  CTGeoSphereSpherical shell class ;  CTGeoSphereEditorEditor for a TGeoSphere ;  CTGeoStateInfoStatefull info for the current geometry level ;  CTGeoSubtraction;  CTGeoTabManagerManager for all editor tabs ;  CTGeoToOCCThis class contains implementation of converting ROOT's geometry shapes to OpenCascade shapes ;  CTGeoTorusTorus segment class ;  CTGeoTorusEditorEditor for a TGeoTorus ;  CTGeoToStepThis class is an interface to convert ROOT's geometry file to STEP file ;  CTGeoTrackClass for user-defined tracks attached to a geometry ;  CTGeoTransientPanel;  CTGeoTranslationClass describing translations ;  CTGeoTranslationEditorEditor for a TGeoTranslation ;  CTGeoTrapTRAP is a general trapezoid, i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:162909,interface,interface,162909,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['interface'],['interface']
Integrability,"eoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGeoHype.h>. Inheritance diagram for TGeoHype:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoHype() [1/5]. TGeoHype::TGeoHype ; (; const TGeoHype & ; ). privatedelete . ◆ TGeoHype() [2/5]. TGeoHype::TGeoHype ; (; ). ◆ TGeoHype() [3/5]. TGeoHype::TGeoHype ; (; Double_t ; rin, . Double_t ; stin, . Double_t ; rout, . Double_t ; stout, . Double_t ; dz . ). ◆ TGeoHype() [4/5]. TGeoHype::TGeoHype ; (; const char * ; name, . Double_t ; rin, . Double_t ; stin, . Double_t ; rout, . Double_t ; stout, . Double_t ; dz . ). ◆ TGeoHype() [5/5]. TGeoHype::TGeoHype ; (; Double_t * ; params). ◆ ~TGeoHype(). TGeoHype::~TGeoHype ; (; ). override . Member Function Documentation. ◆ Capacity(). Double_t TGeoHype::Capacity ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Class(). static TClass * TGeoHype::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoHype::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoHype::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 92 of file TGeoHype.h. ◆ ComputeBBox(). void TGeoHype::ComputeBBox ; (; ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal(). void TGeoHype::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal_v(). void TGeoHype::ComputeNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHype.html:27335,rout,rout,27335,doc/master/classTGeoHype.html,https://root.cern,https://root.cern/doc/master/classTGeoHype.html,1,['rout'],['rout']
Integrability,"eobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGenerator(const char* name, const char* title = ""Generator class""); Event generator default constructor. ~TGenerator(); Event generator default destructor. void GenerateEvent(); must be implemented in concrete class (see eg TPythia6). TObjArray* ImportParticles(Option_t* option = """"). It reads the /HEPEVT/ common block which has been filled by the; GenerateEvent method. If the event generator does not use the; HEPEVT common block, This routine has to be overloaded by the; subclasses. The default action is to store only the stable particles (ISTHEP =; 1) This can be demanded explicitly by setting the option = ""Final""; If the option = ""All"", all the particles are stored. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"). It reads the /HEPEVT/ common block which has been filled by the; GenerateEvent method. If the event generator does not use the; HEPEVT common block, This routine has to be overloaded by the; subclasses. The function loops on the generated particles and store them in; the TClonesArray pointed by the argument particles. The default; action is to store only the stable particles (ISTHEP = 1) This can; be demanded explicitly by setting the option = ""Final"" If the; option = ""All"", all the particles are stored. void Browse(TBrowser* b); browse generator. Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*Compute distance from point px,py to objects in event; *-* =====================================================; -. void Draw(Option_t* option = """"). Insert one event in the pad list. void ExecuteEvent(Int_t event, Int_t px, Int_t py); -*-*-*-*-*-*-*Execute action corresponding to one event; *-* =========================================. Int_t GetNumberOfParticles() const; Return the number of particles in the stack. TParticle * GetParticle(Int_t i) const; Returns pointer to primary number i;. void Paint(Option_t* option = """"). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenerator.html:10624,rout,routine,10624,root/html528/TGenerator.html,https://root.cern,https://root.cern/root/html528/TGenerator.html,10,['rout'],['routine']
Integrability,"eous ();  ;  RooSimultaneous (const char *name, const char *title, const RooArgList &pdfList, RooAbsCategoryLValue &indexCat);  Constructor from index category and full list of PDFs. ;  ;  RooSimultaneous (const char *name, const char *title, RooAbsCategoryLValue &indexCat);  Constructor with index category. ;  ;  RooSimultaneous (const char *name, const char *title, RooFit::Detail::FlatMap< std::string, RooAbsPdf * > const &pdfMap, RooAbsCategoryLValue &inIndexCat);  For internal use in RooFit. ;  ;  RooSimultaneous (const char *name, const char *title, std::map< std::string, RooAbsPdf * > pdfMap, RooAbsCategoryLValue &inIndexCat);  ;  RooSimultaneous (const RooSimultaneous &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooSimultaneous () override;  Destructor. ;  ; bool addPdf (const RooAbsPdf &pdf, const char *catLabel);  Associate given PDF with index category state label 'catLabel'. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integration defined by given code. ;  ; RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const override;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Return the current value: the value of the PDF associated with the current index category state. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return the number of expected events: If the index is in nset, then return the sum of the expected events of all components, otherwise return the number of expected events of the PDF associated with the current index category state. ;  ; ExtendMode extendMode () const override;  Examine the pdf compone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:3528,integrat,integration,3528,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['integrat'],['integration']
Integrability,"eoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TSSLSocket.h. ◆ Recv() [2/4]. Int_t TSSLSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TSSLSocket.h. ◆ Recv() [3/4]. Int_t TSSLSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 74 of file TSSLSocket.h. ◆ Recv() [4/4]. Int_t TSSLSocket::Recv ; (; TMessage *& ; mess). overridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented from TSocket.; Definition at line 189 of file TSSLSocket.cxx. ◆ RecvRaw(). Int_t TSSLSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Receive a raw buffer of specified length bytes. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:22340,message,message,22340,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['message'],['message']
Integrability,"ep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsAnaConvPdf; double evaluate () const override;  Calculate the current unnormalized value of the PDF. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset, const TNamed *rangeName) const;  Returns the normalization integral value of the coefficient with number coefIdx over normalization set nset in range rangeName. ;  ; void makeCoefVarList (RooArgList &) const;  Build complete list of coefficient variables. ;  ; RooArgSet * parseIntegrationRequest (const RooArgSet &intSet, Int_t &coefCode, RooArgSet *analVars=nullptr) const;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:68747,rout,routine,68747,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,6,['rout'],['routine']
Integrability,"epStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/metacling/src/TCling.h>. Inheritance diagram for TCling:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ SpecialObjectLookupCtx_t. typedef void* TCling::SpecialObjectLookupCtx_t. private . Definition at line 151 of file TCling.h. ◆ SpecialObjectMap_t. typedef std::unordered_map<std::string, TObject*> TCling::SpecialObjectMap_t. private . Definition at line 152 of file TCling.h. Constructor & Destructor Documentation. ◆ ~TCling(). TCling::~TCling ; (; ). virtual . Destroy the interpreter interface. ; Definition at line 1618 of file TCling.cxx. ◆ TCling() [1/3]. TCling::TCling ; (; const char * ; name, . const char * ; title, . const char *const ; argv[], . void * ; interpLibHandle . ). Initialize the cling interpreter interface. ; Parameters. namename for TInterpreter ; titletitle for TInterpreter ; argv- array of arguments passed to the cling::Interpreter constructor e.g. -DFOO=bar. The last element of the array must be nullptr. . Definition at line 1337 of file TCling.cxx. ◆ TCling() [2/3]. TCling::TCling ; (; ). private . ◆ TCling() [3/3]. TCling::TCling ; (; const TCling & ; ). privatedelete . Member Function Documentation. ◆ AddAvailableIndentifiers(). void TCling::AddAvailableIndentifiers ; (; TSeqCollection & ; Idents). finalvirtual . Implements TInterpreter.; Definition at line 2358 of file TCling.cxx. ◆ AddFriendToClass(). void TCling::AddFriendToClass ; (; clang::FunctionDecl * ; function, . clang::CXXRecordDecl * ; klass . ); const. private . Inject function as a friend into klass. ; With function being f in void f() {new N::PrivKlass(); } this enables I/O of non-public classes. ; Definition at line 7767 of file TCling.cxx. ◆ AddIncludePath(). void TCling::AddIncludePath ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:53116,interface,interface,53116,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['interface'],['interface']
Integrability,"epend on the value of any arg in dataList. . Definition at line 751 of file RooAbsArg.cxx. ◆ getObservables() [2/5]. RooFit::OwningPtr< RooArgSet > RooAbsArg::getObservables ; (; const RooAbsData & ; data); const. Return the observables of this pdf given the observables defined by data. ; Definition at line 704 of file RooAbsArg.cxx. ◆ getObservables() [3/5]. RooFit::OwningPtr< RooArgSet > RooAbsArg::getObservables ; (; const RooAbsData * ; set); const. Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ; The caller of this function is responsible for deleting the returned argset. The complement of this function is getParameters(). ; Definition at line 717 of file RooAbsArg.cxx. ◆ getObservables() [4/5]. RooFit::OwningPtr< RooArgSet > RooAbsArg::getObservables ; (; const RooArgSet & ; set, . bool ; valueOnly = true . ); const. Given a set of possible observables, return the observables that this PDF depends on. ; Definition at line 698 of file RooAbsArg.cxx. ◆ getObservables() [5/5]. RooFit::OwningPtr< RooArgSet > RooAbsArg::getObservables ; (; const RooArgSet * ; dataList, . bool ; valueOnly = true . ); const. Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ; The caller of this function is responsible for deleting the returned argset. The complement of this function is getParameters(). ; Definition at line 732 of file RooAbsArg.cxx. ◆ getObservablesHook(). virtual void RooAbsArg::getObservablesHook ; (; const RooArgSet * ; , . RooArgSet * ;  . ); const. inlineprotectedvirtual . Definition at line 569 of file RooAbsArg.h. ◆ getParameters() [1/5]. RooFit::OwningPtr< RooArgSet > RooAbsArg::getParameters ; (; const RooAbsData & ; data, . bool ; stripDisconnected = true . ); const. Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:63429,depend,depends,63429,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['depends']
Integrability,"ependsOn(RooAbsArg&) member function. ; Definition at line 850 of file RooAbsArg.cxx. ◆ dependsOn() [3/3]. bool RooAbsArg::dependsOn ; (; TNamed const * ; namePtr, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) an object with a specific name. ; Definition at line 866 of file RooAbsArg.cxx. ◆ dependsOnValue() [1/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values served from the object passed as server. ; Parameters. serverTest if server serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 116 of file RooAbsArg.h. ◆ dependsOnValue() [2/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values from an element in the serverList. ; Parameters. serverListTest if one of the elements in this list serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 108 of file RooAbsArg.h. ◆ expensiveObjectCache(). RooExpensiveObjectCache & RooAbsArg::expensiveObjectCache ; (; ); const. Definition at line 2324 of file RooAbsArg.cxx. ◆ fillTreeBranch(). virtual void RooAbsArg::fillTreeBranch ; (; TTree & ; t). protectedpure virtual . Implemented in RooAbsCategory, RooAbsReal, RooRealVar, and RooStringVar. ◆ findConstantNodes() [1/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; observables, . RooArgSet & ; cacheList . ). Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ; Definition at line 1859 of file RooAbsArg.cxx. ◆ findConstantNodes() [2/2]. bool RooAbsArg::findConstantNodes ; (; const RooArgSet & ; obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:58779,depend,depends,58779,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['depends']
Integrability,"epping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25161,message,messages,25161,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,4,['message'],['messages']
Integrability,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()). void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. TGNumberEntry& operator=(const TGNumberEntry&). TGNumberEntryLayout& o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntryField.html:32563,message,message,32563,root/html602/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html602/TGNumberEntryField.html,4,['message'],['message']
Integrability,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-04 16:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGNumberEntryField.html:30478,message,message,30478,root/html534/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html534/TGNumberEntryField.html,2,['message'],['message']
Integrability,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGNumberEntry.h 25233 2008-08-25 16:48:47Z bellenot $ » Last generated: 2010-09-23 20:07; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryField.html:30359,message,message,30359,root/html528/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryField.html,1,['message'],['message']
Integrability,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGNumberEntry.h 25233 2008-08-25 16:48:47Z bellenot $ » Last generated: 2011-07-04 15:30; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGNumberEntryField.html:30459,message,message,30459,root/html530/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html530/TGNumberEntryField.html,1,['message'],['message']
Integrability,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGNumberEntry.h 25233 2008-08-25 16:48:47Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGNumberEntryField.html:30459,message,message,30459,root/html532/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html532/TGNumberEntryField.html,2,['message'],['message']
Integrability,"eprocessFunction. class RooStats::HistFactory::PreprocessFunction. Function Members (Methods); public:. ~PreprocessFunction(); stringGetCommand(); stringGetCommand(string Name, string Expression, string Dependents); stringGetDependents(); stringGetExpression(); stringGetName(); RooStats::HistFactory::PreprocessFunction&operator=(const RooStats::HistFactory::PreprocessFunction&); RooStats::HistFactory::PreprocessFunctionPreprocessFunction(); RooStats::HistFactory::PreprocessFunctionPreprocessFunction(const RooStats::HistFactory::PreprocessFunction&); RooStats::HistFactory::PreprocessFunctionPreprocessFunction(string Name, string Expression, string Dependents); voidPrint(ostream& = std::cout); voidPrintXML(ostream&); voidSetCommand(const string& Command); voidSetDependents(const string& Dependents); voidSetExpression(const string& Expression); voidSetName(const string& Name). Data Members; protected:. stringfCommand; stringfDependents; stringfExpression; stringfName. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PreprocessFunction(). PreprocessFunction(string Name, string Expression, string Dependents). std::string GetCommand(string Name, string Expression, string Dependents). void Print(ostream& = std::cout). void PrintXML(ostream& ). void SetName(const string& Name); { fName = Name; }. std::string GetName(); { return fName; }. void SetExpression(const string& Expression); { fExpression = Expression; }. std::string GetExpression(); { return fExpression; }. void SetDependents(const string& Dependents); { fDependents = Dependents; }. std::string GetDependents(); { return fDependents; }. void SetCommand(const string& Command); { fCommand = Command; }. std::string GetCommand(); { return fCommand; }. » Last changed: Tue Sep 8 17:03:24 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__PreprocessFunction.html:1437,Depend,Dependents,1437,root/html534/RooStats__HistFactory__PreprocessFunction.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__PreprocessFunction.html,4,['Depend'],['Dependents']
Integrability,"eprotectedvirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 146 of file RooLegendre.cxx. ◆ evaluate(). double RooLegendre::evaluate ; (; ); const. overrideprotectedvirtual . Note: P_0^0 = 1, so P_l^m = P_l^m P_0^0. ; Implements RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 96 of file RooLegendre.cxx. ◆ getAnalyticalIntegral(). Int_t RooLegendre::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 165 of file RooLegendre.cxx. ◆ getMaxVal(). Int_t RooLegendre::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 205 of file RooLegendre.cxx. ◆ IsA(). TClass * RooLegendre::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 46 of file RooLegendre.h. ◆ maxVal(). double RooLegendre::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:63284,integrat,integration,63284,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,1,['integrat'],['integration']
Integrability,"eqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; Int_tfSvnRevisionSubversion revision number of built (dec value of Git short SHA1); TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:19955,synchroniz,synchronize,19955,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,2,['synchroniz'],['synchronize']
Integrability,"equested by the user.; 4.1.2 FCNBase::up(); [howto:errordef] Returns the value of \(\mbox{up}\) (default value \(= 1.\)), defining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply their own gradient calculator (e.g. analytical derivatives), they need to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; Starting values of parameters and uncertainties can be provided to M by the user via std::vector\(<\)double\(>\) vector containers. Any interaction with the parameters before minimization (fix, release, limits, etc.) is not possible then.; Optionally if the user wants to provide starting values for the covariance, they have to provide the values in a std::vector\(<\)double\(>\) vector container stored in upper triangular packed storage format (see [api:covariance]).; 4.2.2 MnUserParameters; A more functional interface to the user parameters is provided through M via the class MnUserParameters. The user can add parameters giving them a name and starting values. More information can be found in [api:parameters].; 4.2.3 MnUserCovariance; The user can (optionally) provide a covariance matrix as input using the class MnUserCovariance. More information can be found in [api:covariance].; 4.2.4 MnUserParameterState; The M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:31622,interface,interfaces,31622,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,4,"['depend', 'interface']","['depending', 'interfaces']"
Integrability,equested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooRealProxy_effRatio; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPEffDecay.html:42412,integrat,integration,42412,root/html534/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPEffDecay.html,2,['integrat'],['integration']
Integrability,"equires TBB. table; *; Build libTable contrib library. tcmalloc; OFF; Using the tcmalloc allocator. testing; OFF; Enable test suit of ROOT with CTest. thread; ON; Using thread library (cannot be disabled). tmva; ON; Build TMVA multi variate analysis library. unuran; *; UNURAN - package for generating non-uniform random numbers. vc; *; Vc adds a few new types for portable and intuitive SIMD programming. vdt; ON; VDT adds a set of fast and vectorisable mathematical functions. winrtdebug; OFF; Link against the Windows debug runtime library. xft; ON; Xft support (X11 antialiased fonts). xml; ON; XML parser interface. xrootd; ON; Build xrootd file server and its client (if supported). x11; *; X11 support. The default value for these options are platform dependent. CMake Generators; CMake can generate, in addition to standard makefiles, specific proejcts for various integrated development environments (IDEs) such as Xcode, Eclipse, Visual Studio, etc.. The available generators depend on the platform for which cmake have been build. To see the list of available generators do cmake --help .; Ninja; Generate a Ninja project with cmake -G Ninja /path/to/source/dir. Building ROOT with Ninja is faster.; Xcode; Generate the Xcode project with cmake -G Xcode /path/to/source/dir. Open the generated file with the Xcode application.; Visual Studio; Generate the Microsoft Visual Studio soultion with cmake -G ""Visual Studio 10"" /path/to/source/dir. Open the generated solution with C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\devenv.exe ROOT.sln`; Variables; This is list of useful ROOT and general CMake variables that can control the build process:; CMake Standard variables; Here are some of the CMake variables that are used often, along with a brief explanation and ROOT-specific notes. For full documentation, check the CMake docs or execute cmake --help-variable VARIABLE_NAME. Variable; Type; Explanation. CMAKE_BUILD_TYPE; STRING; Sets the build type for make based generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:13446,depend,depend,13446,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['depend'],['depend']
Integrability,"er & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetGenerator(ROOT::Math::GSLRngWrapper* r). 	 to be added later as options for basic MC methods; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetIntegrationRule(Integration::GKRule );. 	 set random number generator. void SetType(ROOT::Math::IntegrationMultiDim::Type type). 	 set integration method. void SetMode(ROOT::Math::MCIntegration::Mode mode). 	 set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). 	 set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). 	 set default parameters for MISER method. double Sigma(). 	 set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. 	 returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). 	 returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:5828,integrat,integration,5828,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Integrability,"er . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or your activity monitor on MacOS you will see that one core is really really busy with root. But only one core - and you have two or four or if you're lucky even more. What about getting much more data crunched in the same time, or reducing the arrival time of your analysis results by factors?; TSelector; ROOT offers Proof lite - multiple ROOT processes ""hacking away"" on the same analysis. For that to work your analysis must be written using the TSelector interface: it must publicly derive from it and implement SlaveBegin() where you create the histograms, Process(Long64_t entry) to process the data, and Terminate() to do fits etc. You can find an example for using a TTreeReader within a TSelector here; try to adapt to to our tree and our efficiency determination.; TChain; Proof lite will run the TSelector on several input files in parallel - actually, it chunks the input (even of one file) and sends these chunks to worker processes. You can combine TTrees from multiple files (if they have the same name and structure) using a TChain:; TChain* chain = new TChain(""MyTree"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_1.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_2.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_3.root"");; chain->Process(""MySelector.C+""); // if you have put your selector from above into MySelector.C. The last line will run the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:2456,interface,interface,2456,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,1,['interface'],['interface']
Integrability,er ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooProdGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file RooProdGenContext.h. ◆ updateCCDTable(). void RooProdGenContext::updateCCDTable ; (; ). protected . Member Data Documentation. ◆ _ccdCloneSet. RooArgSet* RooProdGenContext::_ccdCloneSet. protected . Definition at line 52 of file RooProdGenContext.h. ◆ _ccdRefresh. bool RooProdGenContext::_ccdRefresh. protected . Definition at line 58 of file RooProdGenContext.h. ◆ _ccdSuper. RooSuperCategory* RooProdGenContext::_ccdSuper. protected . SuperCategory of Common category dependents. ; Definition at line 53 of file RooProdGenContext.h. ◆ _ccdTable. double* RooProdGenContext::_ccdTable. protected . Definition at line 59 of file RooProdGenContext.h. ◆ _commonCats. RooArgSet RooProdGenContext::_commonCats. protected . Common category dependents. ; Definition at line 51 of file RooProdGenContext.h. ◆ _gcList. std::list<std::unique_ptr<RooAbsGenContext> > RooProdGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooProdGenContext.h. ◆ _ownedMultiProds. RooArgSet RooProdGenContext::_ownedMultiProds. protected . Owned auxiliary multi-term product PDFs. ; Definition at line 62 of file RooProdGenContext.h. ◆ _pdf. const RooProdPdf* RooProdGenContext::_pdf. protected . Original PDF. ; Definition at line 60 of file RooProdGenContext.h. ◆ _pdfCcdInt. RooRealIntegral* RooProdGenContext::_pdfCcdInt. protected . Definition at line 56 of file RooProdGenContext.h. ◆ _pdfClone. RooAbsPdf* RooProdGenContext::_pdfClone. protected . Definition at line 55 of file RooProdGenContext.h. ◆ _pdfCloneSet. RooArgSet* RooProdGenContext::_pdfCloneSet. protected . Definition at line 54 of file RooProdGenContext.h. ◆ _uniObs. RooArgSet RooProdGenContext::_uniObs. protected . Observable to b,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:21705,depend,dependents,21705,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['depend'],['dependents']
Integrability,"er Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGGC * fLineGC;  line graphics context ;  ; UInt_t fLineLength;  line length ;  ; Style_t fLineStyle;  line style ;  ; UInt_t fLineWidth;  line width ;  ;  Protected Attributes inherited from TGTextLBEntry; FontStruct_t fFontStruct;  font used to draw string ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; TGString * fText;  entry text string ;  ; Bool_t fTextChanged;  true if text has been changed ;  ; UInt_t fTHeight;  text height ;  ; UInt_t fTWidth;  text width ;  ;  Protected Attributes inherited from TGLBEntry; Bool_t fActive;  true if entry is active ;  ; Pixel_t fBkcolor;  entry background color ;  ; Int_t fEntryId;  message id of listbox entry ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineLBEntry.html:25876,message,message,25876,doc/master/classTGLineLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGLineLBEntry.html,1,['message'],['message']
Integrability,"er a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:77261,wrap,wrapper,77261,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,9,['wrap'],['wrapper']
Integrability,"er all observables listed in 'nset'. const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName = 0) const; Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; rangeName, optionally taking the integrand normalized over observables nset. Bool_t syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Verify that the normalization integral cached with this PDF; is valid for given set of normalization observables. If not, the cached normalization integral (if any) is deleted; and a new integral is constructed for use with 'nset'; Elements in 'nset' can be discrete and real, but must be lvalues. For functions that declare to be self-normalized by overloading the; selfNormalized() function, a unit normalization is always constructed. void setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); Activate caching of normalization integral values in a interpolated histogram; for integrals that exceed the specified minimum number of numerically integrated; dimensions, _and_ of which the integral has at most 2 parameters. The cache is scanned with a granularity defined by a binning named ""cache"" in the; scanned integral parameters and is interpolated to given order.; The cache values are kept for the livetime of the ROOT session/application; and are persisted along with the object in case the p.d.f. is persisted; in a RooWorkspace. This feature can substantially speed up fits and improve convergence with slow; multi-dimensional integrals whose value varies slowly with the parameters so that the; an interpolated histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:44504,integrat,integrated,44504,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,4,['integrat'],['integrated']
Integrability,"er an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _anaList;  Set of observables over which is integrated/summed analytically. ;  ; bool _cacheNum = false;  Cache integral if numeric. ;  ; RooSetProxy _facList;  Set of observables on which function does not depends, which are integrated nevertheless. ;  ; std::unique_ptr< RooArgSet > _funcNormSet;  Optional normalization set passed to function. ;  ; RooRealProxy _function;  Function being integrated. ;  ; RooNumIntConfig * _iconfig = nullptr;  ; RooSetProxy _intList;  Set of continuous observables over which is integrated numerically. ;  ; IntOperMode _intOperMode = Hybrid;  integration operation mode ;  ; RooSetProxy _jacList;  Set of lvalue observables over which is analytically integration that have a non-unit Jacobian. ;  ; Int_t _mode = 0;  ; std::unique_ptr< RooAbsFunc > _numIntegrand;  ! ;  ; std::unique_ptr< RooAbsIntegrator > _numIntEngine;  ! ;  ; std::unique_ptr< RooArgSet > _params;  ! cache for set of parameters ;  ; TNamed * _rangeName = nullptr;  ; bool _respectCompSelect = true;  ; bool _r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:57150,integrat,integrated,57150,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integrated']
Integrability,"er are used in the pdfs that are not constraints. ; Reimplemented from RooAbsPdf.; Definition at line 1964 of file RooProdPdf.cxx. ◆ getGenerator(). Int_t RooProdPdf::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Query internal generation capabilities of component p.d.f.s and aggregate capabilities into master configuration passed to the generator context. ; Reimplemented from RooAbsPdf.; Definition at line 1708 of file RooProdPdf.cxx. ◆ getParametersHook(). void RooProdPdf::getParametersHook ; (; const RooArgSet * ; nset, . RooArgSet * ; params, . bool ; stripDisconnected . ); const. overrideprivatevirtual . Reimplemented from RooAbsArg.; Definition at line 2047 of file RooProdPdf.cxx. ◆ getPartIntList(). Int_t RooProdPdf::getPartIntList ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset, . const char * ; isetRangeName = nullptr . ); const. private . Return list of (partial) integrals of product terms for integration of p.d.f over observables iset while normalization over observables nset. ; Also return list of normalization sets to be used to evaluate each component in the list correctly. ; Definition at line 657 of file RooProdPdf.cxx. ◆ groupProductTerms(). void RooProdPdf::groupProductTerms ; (; std::list< std::vector< RooArgSet * > > & ; groupedTerms, . RooArgSet & ; outerIntDeps, . const RooLinkedList & ; terms, . const RooLinkedList & ; norms, . const RooLinkedList & ; imps, . const RooLinkedList & ; ints, . const RooLinkedList & ; cross . ); const. private . Group product into terms that can be calculated independently. ; Definition at line 1301 of file RooProdPdf.cxx. ◆ initGenerator(). void RooProdPdf::initGenerator ; (; Int_t ; code). overridevirtual . Forward one-time initialization call to component generation initialization methods. ; Reimplemented from RooAbsPdf.; Definition at line 1746 of file RooProdPdf.cxx. ◆ initializeFromCmdArgList(). void RooPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:94829,integrat,integration,94829,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['integrat'],['integration']
Integrability,"er around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1068; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:439; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:207; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:973; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:403; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:780; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1015; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginManagerThis class implements a plugin library manager.Definition TPluginManager.h:258; TPluginManager::LoadHandlersFromEnvvoid LoadHandlersFromEnv(TEnv *env)Load plugin handlers specified in config file, like:Definition TPluginManager.cxx:391; TProcessID::Cleanupstatic void Cleanup()static function (called by TROOT destructor) to delete all TProcessIDsDefinition TProcessID.cxx:204; TProcessID::AddProcessIDstatic TProcessID * AddProcessID()Static function to add a new TProcessID to the list of PIDs.Definition TProcessID.cxx:116; TProcessUUIDThis class is a specialized TProcessID mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:142214,message,message,142214,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['message'],['message']
Integrability,"er around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1074; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginManagerThis class implements a plugin library manager.Definition TPluginManager.h:258; TPluginManager::LoadHandlersFromEnvvoid LoadHandlersFromEnv(TEnv *env)Load plugin handlers specified in config file, like:Definition TPluginManager.cxx:391; TProcessID::Cleanupstatic void Cleanup()static function (called by TROOT destructor) to delete all TProcessIDsDefinition TProcessID.cxx:204; TProcessID::AddProcessIDstatic TProcessID * AddProcessID()Static function to add a new TProcessID to the list of PIDs.Definition TProcessID.cxx:116; TProcessUUIDThis class is a specialized TProcessID mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:142390,message,message,142390,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['message'],['message']
Integrability,"er bound to xlo. ;  ; void setRange (double xlo, double xhi) override;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void updateInput (const RooAbsBinning &input, double slope=1.0, double offset=0.0);  Update the slope and offset parameters and the pointer to the input binning. ;  ;  Public Member Functions inherited from RooAbsBinning;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual bool isUniform () const;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameterized lower bound, if any. ;  ; Int_t numBins () const;  Return number of bins. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void printName (std::ostream &os) const override;  Print binning name. ;  ; void printTitle (std::ostream &os) const override;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:2737,interface,interface,2737,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,1,['interface'],['interface']
Integrability,"er can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC: evaluate posterior by generating toy MC for the nuisance parameters. It is a MC integration, where the function is sampled according to the nuisance. It is convenient to use when all the nuisance are uncorrelated and it is efficient to generate them The toy are generated by default for each poi values (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for each poi value. It can be convenient when the generation time is much larger than the evaluation time, otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; ROOFIT: use roofit default integration methods which will produce a nested integral (not recommended for more than 1 nuisance parameters) . Definition at line 1073 of file BayesianCalculator.cxx. ◆ SetLeftSideTailFraction(). void RooStats::BayesianCalculator::SetLeftSideTailFraction ; (; double ; leftSideFraction). inline . set the fraction of probability content on the left tail Central limits use 0.5 (default case) for upper limits it is 0 and 1 for lower limit For shortest intervals a negative value (i.e. ; -1) must be given ; Definition at line 114 of file BayesianCalculator.h. ◆ SetModel(). void RooStats::BayesianCalculator::SetModel ; (; const ModelConfig & ; model). overridevirtual . set the model via the ModelConfig ; set the model to use The model pdf, prior pdf, parameter of interest and nuisances will be taken according to the model ; Implements RooStats::IntervalCalculator.; Definition at line 738 of file BayesianCalculator.cxx. ◆ SetNuisanceParam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:31933,integrat,integration,31933,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Integrability,er channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3C3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3D3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3F3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3I3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3S3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to compute nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnChainA class to chain together multiple histograms ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CTPathDefinition;  CTHttpCallArg;  CTHttpEngine,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:179875,protocol,protocols,179875,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['protocol'],['protocols']
Integrability,"er fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot; ; m0.setError(0.1); argus.fitTo(data, PrintEvalErrors=0, EvalErrorWall=False); ; # Plot likelihood as function of m0; # ------------------------------------------------------------------; ; # Construct likelihood function of model and data; nll = argus.createNLL(data); ; # Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().; ; frame2 = m0.frame(Range=(5.288, 5.293), Title=""-log(L) scan vs m0, regions masked""); nll.plotOn(frame2, ShiftToZero=True, PrintEvalErrors=-1, EvalErrorValue=(nll.getVal() + 10), LineColor=""r""); frame2.SetMaximum(15); frame2.SetMinimum(0); ; c = ROOT.TCanvas(""rf606_nllerrorhandling"", ""rf606_nllerrorhandling"", 1200, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.4); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); frame2.Draw(); ; c.SaveAs(""rf606_nllerrorhandling.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:2577,message,messages,2577,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['message'],['messages']
Integrability,"er function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:67327,wrap,wrapper,67327,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,2,['wrap'],['wrapper']
Integrability,"er is responsible for deleting the returned object. ; Implemented in RooAbsCategory, RooAbsReal, and RooStringVar. ◆ dataToken(). std::size_t RooAbsArg::dataToken ; (; ); const. inline . Returns the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 678 of file RooAbsArg.h. ◆ defaultPrintContents(). Int_t RooAbsArg::defaultPrintContents ; (; Option_t * ; opt); const. overridevirtual . Define default contents to print. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 1579 of file RooAbsArg.cxx. ◆ dependsOn() [1/3]. bool RooAbsArg::dependsOn ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. inline . Test whether we depend on (ie, are served by) the specified object. ; Note that RooAbsArg objects are considered equivalent if they have the same name. ; Definition at line 123 of file RooAbsArg.h. ◆ dependsOn() [2/3]. bool RooAbsArg::dependsOn ; (; const RooAbsCollection & ; serverList, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) any object in the specified collection. ; Uses the dependsOn(RooAbsArg&) member function. ; Definition at line 850 of file RooAbsArg.cxx. ◆ dependsOn() [3/3]. bool RooAbsArg::dependsOn ; (; TNamed const * ; namePtr, . const RooAbsArg * ; ignoreArg = nullptr, . bool ; valueOnly = false . ); const. Test whether we depend on (ie, are served by) an object with a specific name. ; Definition at line 866 of file RooAbsArg.cxx. ◆ dependsOnValue() [1/2]. bool RooAbsArg::dependsOnValue ; (; const RooAbsArg & ; server, . const RooAbsArg * ; ignoreArg = nullptr . ); const. inline . Check whether this object depends on values served from the object passed as server. ; Parameters. serverTest if server serves values to this. ; ignoreArgIgnore values served by this object. . ReturnsTrue if values are served. ; Definition at line 116 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:57557,depend,dependsOn,57557,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['depend'],['dependsOn']
Integrability,"er last modifcation, before using. TGLVector3 ViewportDeltaToWorld(const TGLVertex3& worldRef, Double_t viewportXDelta, Double_t viewportYDelta, TGLMatrix* modviewMat = 0) const; Apply a 2D viewport delta (shift) to the projection of worldRef onto viewport,; returning the resultant world vector which equates to it. Useful for making; 3D world objects track mouse moves. Camera must have valid frustum cache - call Apply(). Bool_t OfInterest(const TGLBoundingBox& box, Bool_t ignoreSize) const; Calculate if the an object defined by world frame bounding box; is 'of interest' to the camera. This is defined as box:. i) intersecting completely or partially (kInside/kPartial) with; cameras interest box (fInterestBox); ii) having significant length OR volume ratio compared to this; interest box. If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; TGLCamera::UpdateInterest() for more details of camera interest; box. Note: Length/volume ratios NOT dependent on the projected size; of box at current camera configuration as we do not want; continual changes. This is used when (re) populating the scene; with objects from external client. TODO: Might be more logical to move this test out to client -; and have accessor for fInterestBox instead?. Bool_t UpdateInterest(Bool_t force); Update the internal interest box (fInterestBox) of the camera.; The interest box is an orientated bounding box, calculated as; an expanded container round the frustum. It is used to test if; if object bounding boxes are of interest (should be accepted; into viewer scene) for a camera - see TGLCamera::OfInterest(). The interest box is updated if the frustum is no longer contained; in the existing one, or a new one calculated on the current frustum; differs significantly in volume (camera has been zoomed/dollyed; sizable amount). If the interest box is updated we return kTRUE - kFALSE otherwise. void ResetInterest(); Clear out the existing interest box. Bool_t AdjustAndClampVal(Double_t& val, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:14072,depend,dependent,14072,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,10,['depend'],['dependent']
Integrability,"er of all ROOT objects.Definition TObject.h:41; TObject::TClonesArrayfriend class TClonesArrayDefinition TObject.h:240; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Classstatic TClass * Class(); TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::lsvirtual void ls(Option_t *option="""") constThe ls function lists the contents of a class on stdout.Definition TObject.cxx:579; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TObject::Obsoletevoid Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constUse this method to declare a method obsolete.Definition TObject.cxx:1055; TRealDataThe TRealData class manages the effectiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:267286,message,message,267286,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['message'],['message']
Integrability,"er of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; kXR_int32fILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; kXR_int32fSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0); Constructor; Open the connection to a remote XrdProofd instance and start a PROOF; session.; The mode 'm' indicates the role of this connection:; 'a' Administrator; used by an XPD to contact the head XPD; 'i' Internal; used by a TXProofServ to call back its creator; (see XrdProofUnixConn); 'C' PROOF manager: open connection only (do not start a session); 'M' Client creating a top master; 'A' Client attaching to top master; 'm' Top master creating a submaster; 's' Master creating a slave; The buffer 'logbuf' is a null terminated string to be sent over at; login. TXSocket(const TXSocket& ); TXSocket copy ctor. TXSocket& operator=(const TXSocket& ); TXSocket assignment operator. ~TXSocket(); Destructor. void SetLocation(const char* loc = """"); Set location string. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXSocket.html:13351,Interface,Interface,13351,root/html604/TXSocket.html,https://root.cern,https://root.cern/root/html604/TXSocket.html,1,['Interface'],['Interface']
Integrability,"er of bins in high-binned reference histogram ;  . Friends; std::ostream & operator<< (std::ostream &os, const PDF &tree);  ; std::istream & operator>> (std::istream &istr, PDF &tree);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/PDF.h>. Inheritance diagram for TMVA::PDF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterpolateMethod. enum TMVA::PDF::EInterpolateMethod. EnumeratorkSpline0 ; kSpline1 ; kSpline2 ; kSpline3 ; kSpline5 ; kKDE . Definition at line 70 of file PDF.h. Constructor & Destructor Documentation. ◆ PDF() [1/4]. TMVA::PDF::PDF ; (; const TString & ; name, . Bool_t ; norm = kTRUE . ). explicit . default constructor needed for ROOT I/O ; Definition at line 69 of file PDF.cxx. ◆ PDF() [2/4]. TMVA::PDF::PDF ; (; const TString & ; name, . const TH1 * ; theHist, . PDF::EInterpolateMethod ; method = kSpline2, . Int_t ; minnsmooth = 0, . Int_t ; maxnsmooth = 0, . Bool_t ; checkHist = kFALSE, . Bool_t ; norm = kTRUE . ). explicit . constructor of spline based PDF: ; Definition at line 107 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:18668,message,message,18668,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,1,['message'],['message']
Integrability,"er of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:4782,depend,depend,4782,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,2,['depend'],['depend']
Integrability,"er of histograms in the stack. ; Definition at line 598 of file THStack.cxx. ◆ GetStack(). TObjArray * THStack::GetStack ; (; ). Return pointer to Stack. Build it if not yet done. ; Definition at line 607 of file THStack.cxx. ◆ GetXaxis(). TAxis * THStack::GetXaxis ; (; ); const. Get the x-axis of the histogram used to draw the stack. ; IMPORTANT NOTE You must call Draw before calling this function. The returned histogram depends on the selected Draw options. ; Definition at line 620 of file THStack.cxx. ◆ GetYaxis(). TAxis * THStack::GetYaxis ; (; ); const. Get the y-axis of the histogram used to draw the stack. ; IMPORTANT NOTE You must call Draw before calling this function. The returned histogram depends on the selected Draw options. ; Definition at line 633 of file THStack.cxx. ◆ GetZaxis(). TAxis * THStack::GetZaxis ; (; ); const. Get the z-axis of the histogram used to draw the stack. ; IMPORTANT NOTE You must call Draw before calling this function. The returned histogram depends on the selected Draw options. ; Definition at line 646 of file THStack.cxx. ◆ IsA(). TClass * THStack::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 93 of file THStack.h. ◆ ls(). void THStack::ls ; (; Option_t * ; option = """"); const. overridevirtual . List histograms in the stack. ; Reimplemented from TObject.; Definition at line 658 of file THStack.cxx. ◆ Merge(). Long64_t THStack::Merge ; (; TCollection * ; li, . TFileMergeInfo * ; info . ). virtual . Merge the THStack in the TList into this stack. ; Returns the total number of histograms in the result or -1 in case of an error. ; Definition at line 671 of file THStack.cxx. ◆ Modified(). void THStack::Modified ; (; ). virtual . Note: this method invalidates the sum of histograms. ; Definition at line 694 of file THStack.cxx. ◆ operator=(). THStack & THStack::operator= ; (; const THStack & ; ). privatedelete . ◆ Paint(). void THStack::Paint ; (; O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:29678,depend,depends,29678,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,1,['depend'],['depends']
Integrability,"er of points used for the underlying histogram. The number of bins will be num_points - 1. . Definition at line 217 of file ROCCurve.cxx. ◆ GetMvas(). const std::vector< std::tuple< Float_t, Float_t, Bool_t > > TMVA::ROCCurve::GetMvas ; (; ); const. inline . Definition at line 68 of file ROCCurve.h. ◆ GetROCCurve(). TGraph * TMVA::ROCCurve::GetROCCurve ; (; const UInt_t ; num_points = 100). Returns a new TGraph containing the ROC curve. ; Sensitivity is on the x-axis, specificity on the y-axis.; Parameters. num_pointsGranularity of the resulting curve. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 274 of file ROCCurve.cxx. ◆ GetROCIntegral(). Double_t TMVA::ROCCurve::GetROCIntegral ; (; const UInt_t ; num_points = 41). Calculates the ROC integral (AUC) ; Parameters. num_pointsGranularity of the resulting curve used for integration. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 248 of file ROCCurve.cxx. ◆ Log(). TMVA::MsgLogger & TMVA::ROCCurve::Log ; (; ); const. private . Definition at line 128 of file ROCCurve.cxx. Member Data Documentation. ◆ fGraph. TGraph* TMVA::ROCCurve::fGraph. private . Definition at line 73 of file ROCCurve.h. ◆ fLogger. MsgLogger* TMVA::ROCCurve::fLogger. mutableprivate . ! message logger ; Definition at line 70 of file ROCCurve.h. ◆ fMva. std::vector<std::tuple<Float_t, Float_t, Bool_t> > TMVA::ROCCurve::fMva. private . Definition at line 75 of file ROCCurve.h. Libraries for TMVA::ROCCurve:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ROCCurve.h; tmva/tmva/src/ROCCurve.cxx. TMVAROCCurve. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html:5250,message,message,5250,doc/master/classTMVA_1_1ROCCurve.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html,1,['message'],['message']
Integrability,"er of the declaration represented by the MethodInfo. ; Implements TInterpreter.; Definition at line 7820 of file TCling.cxx. ◆ GetDeclId() [7/7]. TInterpreter::DeclId_t TCling::GetDeclId ; (; TypedefInfo_t * ; info); const. finalvirtual . Return a unique identifier of the declaration represented by the TypedefInfo. ; Implements TInterpreter.; Definition at line 7830 of file TCling.cxx. ◆ GetEnum(). TInterpreter::DeclId_t TCling::GetEnum ; (; TClass * ; cl, . const char * ; name . ); const. finalvirtual . Return pointer to cling Decl of global/static variable that is located at the address given by addr. ; Implements TInterpreter.; Definition at line 4832 of file TCling.cxx. ◆ GetExecByteCode(). Long_t TCling::GetExecByteCode ; (; ); const. finalvirtual . This routines used to return the address of the internal wrapper function (of the interpreter) that was used to call all the interpreted functions that were bytecode compiled (no longer interpreted line by line). ; In Cling, there is no such wrapper function. In practice this routines was use to decipher whether the pointer returns by InterfaceMethod could be used to uniquely represent the function. In Cling if the function is in a useable state (its compiled version is available), this is always the case. See TClass::GetMethod. ; Reimplemented from TInterpreter.; Definition at line 7479 of file TCling.cxx. ◆ GetExitCode(). Int_t TCling::GetExitCode ; (; ); const. inlinefinalvirtual . Implements TInterpreter.; Definition at line 211 of file TCling.h. ◆ GetFunction(). TInterpreter::DeclId_t TCling::GetFunction ; (; ClassInfo_t * ; cl, . const char * ; funcname . ). finalvirtual . Return pointer to cling interface function for a method of a class with a certain name. ; Implements TInterpreter.; Definition at line 5029 of file TCling.cxx. ◆ GetFunctionName(). void TCling::GetFunctionName ; (; const clang::Decl * ; decl, . std::string & ; name . ); const. virtual . Definition at line 8761 of file TCling.cxx. ◆ GetFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:97626,wrap,wrapper,97626,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['wrap'],['wrapper']
Integrability,"er out any that we; 827 // do not depend on, and make substitutions by name in our leaf list.; 828 // Check for overlaps with the projection variables.; 829 for (const auto arg : dependentVars) {; 830 if(!arg->isFundamental() && !dynamic_cast<const RooAbsLValue*>(arg)) {; 831 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: variable \"""" << arg->GetName(); 832 << ""\"" of wrong type: "" << arg->ClassName() << std::endl;; 833 return nullptr;; 834 }; 835 ; 836 RooAbsArg *found= treeNodes.find(arg->GetName());; 837 if(!found) {; 838 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: \"""" << arg->GetName(); 839 << ""\"" is not a dependent and will be ignored."" << std::endl;; 840 continue;; 841 }; 842 if(found != arg) {; 843 if (leafNodes.find(found->GetName())) {; 844 leafNodes.replace(*found,*arg);; 845 } else {; 846 leafNodes.add(*arg) ;; 847 ; 848 // Remove any dependents of found, replace by dependents of LV node; 849 RooArgSet lvDep;; 850 arg->getObservables(&leafNodes, lvDep);; 851 for (const auto lvs : lvDep) {; 852 RooAbsArg* tmp = leafNodes.find(lvs->GetName()) ;; 853 if (tmp) {; 854 leafNodes.remove(*tmp) ;; 855 leafNodes.add(*lvs) ;; 856 }; 857 }; 858 }; 859 }; 860 ; 861 // check if this arg is also in the projection set; 862 if(nullptr != projectedVars && projectedVars->find(arg->GetName())) {; 863 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: \"""" << arg->GetName(); 864 << ""\"" cannot be both a dependent and a projected variable."" << std::endl;; 865 return nullptr;; 866 }; 867 }; 868 ; 869 // Remove the projected variables from the list of leaf nodes, if necessary.; 870 if(nullptr != projectedVars) leafNodes.remove(*projectedVars,true);; 871 ; 872 // Make a deep-clone of ourself so later operations do not disturb our original state; 873 cloneSet = new RooArgSet;; 874 if (RooArgSet(*this).snapshot(*cloneSet, true)) {; 875 coutE(Plotting) << ""RooAbsPdf::createPlotProjection("" <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:33933,depend,dependents,33933,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['depend'],['dependents']
Integrability,"er specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:20617,interface,interface,20617,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['interface'],['interface']
Integrability,"er string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:40465,message,message,40465,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,10,['message'],['message']
Integrability,"er string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TPSocket.h. ◆ Recv() [3/4]. Int_t TPSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 74 of file TPSocket.h. ◆ Recv() [4/4]. Int_t TPSocket::Recv ; (; TMessage *& ; mess). overridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). In those case mess == 0. ; Reimplemented from TSocket.; Definition at line 626 of file TPSocket.cxx. ◆ RecvRaw(). Int_t TPSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Send a raw buffer of specified length. ; Returns the number of bytes sent or -1 in case of error. ; Reimplemented from TSocket.; Definition at line 679 of file TPSocket.cxx. ◆ Send() [1/4]. Int_t TPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). inlineoverridevirtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:27506,message,message,27506,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"er the bin; TH1*fDenominatorDenominator histogram; Double_tfEpsilonPrecision required for function integration (option ""I""); Bool_tfFitDoneSet to kTRUE when the fit has been done; ROOT::Fit::Fitter*fFitterpointer to the real fitter; TF1*fFunctionFunction to fit; TH1*fNumeratorNumerator histogram; Bool_tfRangeTrue if the fit range must be taken from the function range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBinomialEfficiencyFitter(); default constructor. TBinomialEfficiencyFitter(const TH1* numerator, const TH1* denominator); Constructor. Note that no objects are copied, so it is up to the user to ensure that the; histogram pointers remain valid. Both histograms need to be ""consistent"". This is not checked here, but in; TBinomialEfficiencyFitter::Fit(). ~TBinomialEfficiencyFitter(); destructor. void Set(const TH1* numerator, const TH1* denominator); Initialize with a new set of inputs. void SetPrecision(Double_t epsilon); Set the required integration precision, see TF1::Integral(). ROOT::Fit::Fitter* GetFitter(); Provide access to the underlying fitter object.; This may be useful e.g. for the retrieval of additional information (such; as the output covariance matrix of the fit). TFitResultPtr Fit(TF1* f1, Option_t* option = """"); Carry out the fit of the given function to the given histograms. If option ""I"" is used, the fit function will be averaged over the; bin (the default is to evaluate it simply at the bin center). If option ""R"" is used, the fit range will be taken from the fit; function (the default is to use the entire histogram). If option ""S"" a TFitResult object is returned and it can be used to obtain; additional fit information, like covariance or correlation matrix. Note that all parameter values, limits, and step sizes are copied; from the input fit function f1 (so they should be set before calling; this method. This is particularly relevant for the step sizes, taken; to be the ""error"" set on input, as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBinomialEfficiencyFitter.html:9720,integrat,integration,9720,root/html602/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html602/TBinomialEfficiencyFitter.html,4,['integrat'],['integration']
Integrability,"er the parser returns a tree built during the document analysis ;  CTXMLEngine;  CTXMLFile;  CTXMLNodeTXMLNode contains a pointer to xmlNode, which is a node under the DOM tree ;  CTXMLParserTXMLParser is an abstract class which interfaces with Libxml2 ;  CTXMLPlayer;  CTXMLSetup;  CTXNetFile;  CTXNetFileStager;  CTXNetSystem;  CTXNetSystemConnectGuard;  CTXProofMgr;  CTXProofServ;  CTXrdClientAdminWrapper;  CTXSemaphoreGuard;  CTXSlave;  CTXSockBuf;  CTXSocket;  CTXSocketHandler;  CTXSockPipe;  CTXTRUA poly-extrusion ;  CTXUnixSocket;  CTZIPFileDescribes a ZIP archive file containing multiple sub-files ;  CTZIPMemberA ZIP archive consists of files compressed with the popular ZLIB compression algorithm; this class records the information about a single archive member ;  CUnuRanDist;  CUnuranDistrUnuranDistr Provides free function based on TF1 to be called by unuran ;  CUnuranDistrMultiFree functions for multidimensional functions needed bby UNURAN ;  CUnuranRngUnuranRng class for interface ROOT random generators to Unuran ;  CUserGroup_t;  CVariableSelectionRule;  CVectorMemoryHelper;  CVecTrackD;  CVecTVecDouble;  CVecVecDouble;  CWindowAttributes_t;  CWrapperRooPdf;  C<X11Drawable>;  C<X11Window>;  CXColor_tDescription of a X11 color ;  CXHandleErr_t;  CXHandleIn_t;  ►CXMLReader;  CAttributes;  CXPClientArchiveRequest;  CXPClientInterruptRequest;  CXPClientLoginRequest;  CXPClientProofRequest;  CXPClientReadbufRequest;  CXPClientRequest;  CXPClientSendRcvRequest;  CXpdAdminCpCmd;  CXpdClientSessions;  CXpdEnv;  CXpdGroupEff_t;  CXpdGroupGlobal_t;  CXpdManagerCron_t;  CXpdMsg;  CXpdObject;  CXpdObjectQ;  CXpdSrvMgrCreateCnt;  CXpdSrvMgrCreateGuard;  CXrdClientCacheInterval;  ►CXrdClientConn;  CSessionIDInfo;  ►CXrdClientConnectionMgr;  CCndVarInfo;  CXrdClientID;  CXrdClientInputBuffer;  CXrdClientLogConnection;  CXrdClientMessage;  CXrdClientPhyConnection;  CXrdClientPhyConnLocker;  CXrdClientReadCache;  CXrdClientReadCacheItem;  CXrdClientSock;  CXrdClientSockCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:166797,interface,interface,166797,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['interface'],['interface']
Integrability,"er time For instance, batch browser will be ...Definition RWebWindow.cxx:658; ROOT::RWebWindow::fIdunsigned fId! unique identifierDefinition RWebWindow.hxx:141; ROOT::RWebWindow::fHasWindowThrdbool fHasWindowThrd! indicate if special window thread was startedDefinition RWebWindow.hxx:162; ROOT::RWebWindow::fMasterConnsstd::vector< MasterConn > fMasterConns! master connectionsDefinition RWebWindow.hxx:138; ROOT::RWebWindow::SetClearOnClosevoid SetClearOnClose(const std::shared_ptr< void > &handle=nullptr)Set handle which is cleared when last active connection is closed Typically can be used to destroy we...Definition RWebWindow.cxx:1764; ROOT::RWebWindow::StartThreadvoid StartThread()Start special thread which will be used by the window to handle all callbacks One has to be sure,...Definition RWebWindow.cxx:1680; ROOT::RWebWindow::fConnCntunsigned fConnCnt! counter of new connections to assign idsDefinition RWebWindow.hxx:148; ROOT::RWebWindow::fProtocolConnIdunsigned fProtocolConnId! connection id, which is used for writing protocolDefinition RWebWindow.hxx:172; ROOT::RWebWindow::GetWindowConnectionsConnectionsList_t GetWindowConnections(unsigned connid=0, bool only_active=false) constreturns connection list (or all active connections)Definition RWebWindow.cxx:1458; ROOT::RWebWindow::fSendMTbool fSendMT! true is special threads should be used for sending dataDefinition RWebWindow.hxx:145; ROOT::RWebWindow::fCallbacksThrdIdstd::thread::id fCallbacksThrdId! thread id where callbacks should be invokedDefinition RWebWindow.hxx:160; ROOT::RWebWindow::RemoveKeyvoid RemoveKey(const std::string &key)Removes all connections with the key.Definition RWebWindow.cxx:583; ROOT::RWebWindow::fInputQueuestd::queue< QueueEntry > fInputQueue! input queue for all callbacksDefinition RWebWindow.hxx:164; ROOT::RWebWindow::_CanTrustInbool _CanTrustIn(std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time)Check if provided hash, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:23853,protocol,protocolDefinition,23853,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['protocol'],['protocolDefinition']
Integrability,"er time For instance, batch browser will be ...Definition RWebWindow.cxx:659; ROOT::RWebWindow::fIdunsigned fId! unique identifierDefinition RWebWindow.hxx:144; ROOT::RWebWindow::fHasWindowThrdbool fHasWindowThrd! indicate if special window thread was startedDefinition RWebWindow.hxx:165; ROOT::RWebWindow::fMasterConnsstd::vector< MasterConn > fMasterConns! master connectionsDefinition RWebWindow.hxx:141; ROOT::RWebWindow::SetClearOnClosevoid SetClearOnClose(const std::shared_ptr< void > &handle=nullptr)Set handle which is cleared when last active connection is closed Typically can be used to destroy we...Definition RWebWindow.cxx:1806; ROOT::RWebWindow::StartThreadvoid StartThread()Start special thread which will be used by the window to handle all callbacks One has to be sure,...Definition RWebWindow.cxx:1722; ROOT::RWebWindow::fConnCntunsigned fConnCnt! counter of new connections to assign idsDefinition RWebWindow.hxx:151; ROOT::RWebWindow::fProtocolConnIdunsigned fProtocolConnId! connection id, which is used for writing protocolDefinition RWebWindow.hxx:175; ROOT::RWebWindow::GetWindowConnectionsConnectionsList_t GetWindowConnections(unsigned connid=0, bool only_active=false) constreturns connection list (or all active connections)Definition RWebWindow.cxx:1500; ROOT::RWebWindow::fSendMTbool fSendMT! true is special threads should be used for sending dataDefinition RWebWindow.hxx:148; ROOT::RWebWindow::fCallbacksThrdIdstd::thread::id fCallbacksThrdId! thread id where callbacks should be invokedDefinition RWebWindow.hxx:163; ROOT::RWebWindow::RemoveKeyvoid RemoveKey(const std::string &key)Removes all connections with the key.Definition RWebWindow.cxx:584; ROOT::RWebWindow::fInputQueuestd::queue< QueueEntry > fInputQueue! input queue for all callbacksDefinition RWebWindow.hxx:167; ROOT::RWebWindow::_CanTrustInbool _CanTrustIn(std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time)Check if provided hash, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:24242,protocol,protocolDefinition,24242,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['protocol'],['protocolDefinition']
Integrability,"er to MethodCall in case of interpreted function; TStringTNamed::fNameobject identifier; Int_tTVirtualFitter::fNpointsNumber of points to fit; TObject*TVirtualFitter::fObjectFitpointer to object being fitted; Foption_tTVirtualFitter::fOptionstruct with the fit options; Int_tTVirtualFitter::fPointSizeNumber of words per point in the cache; TStringTNamed::fTitleobject title; TObject*TVirtualFitter::fUserFuncpointer to user theoretical function (a TF1*); Int_tTVirtualFitter::fXfirstfirst bin on X axis; Int_tTVirtualFitter::fXlastlast bin on X axis; Int_tTVirtualFitter::fYfirstfirst bin on Y axis; Int_tTVirtualFitter::fYlastlast bin on Y axis; Int_tTVirtualFitter::fZfirstfirst bin on Z axis; Int_tTVirtualFitter::fZlastlast bin on Z axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitterFumili(). TFitterFumili(Int_t maxpar). virtual ~TFitterFumili(). Double_t Chisquare(Int_t npar, Double_t* params) const; inherited interface. void CreateMinimizer(TFitterMinuit::EMinimizerType ); virtual FunctionMinimum Minimize( int nfcn = 0, double edmval = 0.1) const;. void CreateChi2FCN(). void CreateChi2ExtendedFCN(). void CreateUnbinLikelihoodFCN(); {}. void CreateBinLikelihoodFCN(). » Author: L. Moneta 10/2005 » Copyright (c) 2005 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitterFumili.html:11950,interface,interface,11950,root/html534/TFitterFumili.html,https://root.cern,https://root.cern/root/html534/TFitterFumili.html,2,['interface'],['interface']
Integrability,"er to a newly allocated object of this class.; 5088/// The class must have a default constructor. For meaning of; 5089/// defConstructor, see TClass::IsCallingNew().; 5090 ; 5091void *TClass::New(void *arena, ENewType defConstructor) const; 5092{; 5093 auto obj = NewObject(arena, defConstructor);; 5094 if (obj.GetPtr() && obj.GetAllocator()) {; 5095 // Register the object for special handling in the destructor.; 5096 RegisterAddressInRepository(""TClass::New with placement"", obj.GetPtr(), this);; 5097 }; 5098 return obj.GetPtr();; 5099}; 5100 ; 5101////////////////////////////////////////////////////////////////////////////////; 5102/// Return a pointer to a newly allocated object of this class.; 5103/// The class must have a default constructor. For meaning of; 5104/// defConstructor, see TClass::IsCallingNew().; 5105 ; 5106TClass::ObjectPtr TClass::NewObject(void *arena, ENewType defConstructor) const; 5107{; 5108 ObjectPtr p;; 5109 ; 5110 if (fNew) {; 5111 // We have the new operator wrapper function,; 5112 // so there is a dictionary and it was generated; 5113 // by rootcint, so there should be a default; 5114 // constructor we can call through the wrapper.; 5115 {; 5116 TClass__GetCallingNewRAII callingNew(defConstructor);; 5117 p = fNew(arena);; 5118 }; 5119 if (!p) {; 5120 Error(""New with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5121 }; 5122 } else if (HasInterpreterInfo()) {; 5123 // We have the dictionary but do not have the; 5124 // constructor wrapper, so the dictionary was; 5125 // not generated by rootcint. Let's try to; 5126 // create the object by having the interpreter; 5127 // call the new operator, hopefully the class; 5128 // library is loaded and there will be a default; 5129 // constructor we can call.; 5130 // [This is very unlikely to work, but who knows!]; 5131 {; 5132 TClass__GetCallingNewRAII callingNew(defConstructor);; 5133 p = gCling->ClassInfo_New(GetClassInfo(),arena);; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:194881,wrap,wrapper,194881,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['wrap'],['wrapper']
Integrability,"er to a newly allocated object of this class.; 5155/// The class must have a default constructor. For meaning of; 5156/// defConstructor, see TClass::IsCallingNew().; 5157 ; 5158void *TClass::New(void *arena, ENewType defConstructor) const; 5159{; 5160 auto obj = NewObject(arena, defConstructor);; 5161 if (obj.GetPtr() && obj.GetAllocator()) {; 5162 // Register the object for special handling in the destructor.; 5163 RegisterAddressInRepository(""TClass::New with placement"", obj.GetPtr(), this);; 5164 }; 5165 return obj.GetPtr();; 5166}; 5167 ; 5168////////////////////////////////////////////////////////////////////////////////; 5169/// Return a pointer to a newly allocated object of this class.; 5170/// The class must have a default constructor. For meaning of; 5171/// defConstructor, see TClass::IsCallingNew().; 5172 ; 5173TClass::ObjectPtr TClass::NewObject(void *arena, ENewType defConstructor) const; 5174{; 5175 ObjectPtr p;; 5176 ; 5177 if (fNew) {; 5178 // We have the new operator wrapper function,; 5179 // so there is a dictionary and it was generated; 5180 // by rootcint, so there should be a default; 5181 // constructor we can call through the wrapper.; 5182 {; 5183 TClass__GetCallingNewRAII callingNew(defConstructor);; 5184 p = fNew(arena);; 5185 }; 5186 if (!p) {; 5187 Error(""New with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5188 }; 5189 } else if (HasInterpreterInfo()) {; 5190 // We have the dictionary but do not have the; 5191 // constructor wrapper, so the dictionary was; 5192 // not generated by rootcint. Let's try to; 5193 // create the object by having the interpreter; 5194 // call the new operator, hopefully the class; 5195 // library is loaded and there will be a default; 5196 // constructor we can call.; 5197 // [This is very unlikely to work, but who knows!]; 5198 {; 5199 TClass__GetCallingNewRAII callingNew(defConstructor);; 5200 p = gCling->ClassInfo_New(GetClassInfo(),arena);; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:197632,wrap,wrapper,197632,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['wrap'],['wrapper']
Integrability,"er to global variable by name. ; If load is true force reading of all currently defined globals from CINT (more expensive). ; Definition at line 1631 of file TROOT.cxx. ◆ GetGlobal() [2/2]. TGlobal * TROOT::GetGlobal ; (; const TObject * ; obj, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable with address addr. ; Definition at line 1639 of file TROOT.cxx. ◆ GetGlobalFunction(). TFunction * TROOT::GetGlobalFunction ; (; const char * ; function, . const char * ; params = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If params != 0 it will also resolve overloading other it returns the first name match. If params == 0 and load is true force reading of all currently defined global functions from Cling. The param string must be of the form: ""3189,\""aap\"",1.3"". ; Definition at line 1685 of file TROOT.cxx. ◆ GetGlobalFunctions(). TListOfFunctions * TROOT::GetGlobalFunctions ; (; ). protected . Internal routine returning, and creating if necessary, the list of global function. ; Definition at line 1663 of file TROOT.cxx. ◆ GetGlobalFunctionWithPrototype(). TFunction * TROOT::GetGlobalFunctionWithPrototype ; (; const char * ; function, . const char * ; proto = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If proto != 0 it will also resolve overloading. If load is true force reading of all currently defined global functions from CINT (more expensive). The proto string must be of the form: ""int, char*, float"". ; Definition at line 1718 of file TROOT.cxx. ◆ GetIconPath(). const TString & TROOT::GetIconPath ; (; ). static . Get the icon path in the installation. Static utility function. ; Definition at line 3168 of file TROOT.cxx. ◆ GetIncludeDir(). const TString & TROOT::GetIncludeDir ; (; ). static . Get the include directory in the installation. Static utility function. ; Definition at line 3042 of file TROOT.cxx. ◆ GetInterpreter(). TInterpreter * TROOT::GetInterpreter ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:53341,rout,routine,53341,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['rout'],['routine']
Integrability,"er to global variable by name. ; If load is true force reading of all currently defined globals from CINT (more expensive). ; Definition at line 1631 of file TROOT.cxx. ◆ GetGlobal() [2/2]. TGlobal * TROOT::GetGlobal ; (; const TObject * ; obj, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable with address addr. ; Definition at line 1639 of file TROOT.cxx. ◆ GetGlobalFunction(). TFunction * TROOT::GetGlobalFunction ; (; const char * ; function, . const char * ; params = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If params != 0 it will also resolve overloading other it returns the first name match. If params == 0 and load is true force reading of all currently defined global functions from Cling. The param string must be of the form: ""3189,\""aap\"",1.3"". ; Definition at line 1685 of file TROOT.cxx. ◆ GetGlobalFunctions(). TListOfFunctions * TROOT::GetGlobalFunctions ; (; ). protected . Internal routine returning, and creating if necessary, the list of global function. ; Definition at line 1663 of file TROOT.cxx. ◆ GetGlobalFunctionWithPrototype(). TFunction * TROOT::GetGlobalFunctionWithPrototype ; (; const char * ; function, . const char * ; proto = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If proto != 0 it will also resolve overloading. If load is true force reading of all currently defined global functions from CINT (more expensive). The proto string must be of the form: ""int, char*, float"". ; Definition at line 1718 of file TROOT.cxx. ◆ GetIconPath(). const TString & TROOT::GetIconPath ; (; ). static . Get the icon path in the installation. Static utility function. ; Definition at line 3172 of file TROOT.cxx. ◆ GetIncludeDir(). const TString & TROOT::GetIncludeDir ; (; ). static . Get the include directory in the installation. Static utility function. ; Definition at line 3046 of file TROOT.cxx. ◆ GetInterpreter(). TInterpreter * TROOT::GetInterpreter ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:53310,rout,routine,53310,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['rout'],['routine']
Integrability,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:53323,message,message,53323,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,4,"['depend', 'message']","['dependent', 'message']"
Integrability,"er& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTXMLParser::InitializeContext(); voidTObject::MakeZombie(); virtual voidTXMLParser::OnValidateError(const TString& message); virtual voidTXMLParser::OnValidateWarning(const TString& message); virtual voidTXMLParser::ReleaseUnderlying(); virtual voidTXMLParser::SetParseCode(Int_t code). private:. TSAXParser&operator=(const TSAXParser&); virtual Int_tParse(); TSAXParser(const TSAXParser&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSAXParser.html:9780,message,message,9780,root/html602/TSAXParser.html,https://root.cern,https://root.cern/root/html602/TSAXParser.html,8,['message'],['message']
Integrability,"er& b); -- Read leaves into i/o buffers for this branch.; For split-class branch, base class branch, data member branch, or top-level branch.; which do have a branch count and are not a counter. void ReadLeavesMemberCounter(TBuffer& b); -- Read leaves into i/o buffers for this branch.; For split-class branch, base class branch, data member branch, or top-level branch.; which do not have a branch count and are a counter. void ReadLeavesCustomStreamer(TBuffer& b); -- Read leaves into i/o buffers for this branch.; Non TObject, Non collection classes with a custom streamer. void ReleaseObject(); -- Delete any object we may have allocated on a previous call to SetAddress. void Reset(Option_t* option = """"); -- Reset a Branch. Existing i/o buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:26862,interface,interface,26862,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,2,['interface'],['interface']
Integrability,"er& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:44970,wrap,wrapper,44970,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,1,['wrap'],['wrapper']
Integrability,"er() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:20225,message,message,20225,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,1,['message'],['message']
Integrability,"er(const RooMinimizer&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:7878,interface,interface,7878,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,2,['interface'],['interface']
Integrability,"er) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here More...;  ; class  GSLRngRanLuxD1;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanMar;  RANMAR generator see here More...;  ; struct  GSLRngROOTWrapper;  class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:14890,wrap,wrapping,14890,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['wrap'],['wrapping']
Integrability,"er). delete . ◆ operator=() [2/2]. RooFormula & RooFormula::operator= ; (; RooFormula && ; other). delete . ◆ Print(). void RooFormula::Print ; (; Option_t * ; option = nullptr); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 65 of file RooFormula.h. ◆ printArgs(). void RooFormula::printArgs ; (; std::ostream & ; os); const. overridevirtual . Print arguments of formula, i.e. dependents that are actually used. ; Reimplemented from RooPrintable.; Definition at line 480 of file RooFormula.cxx. ◆ printClassName(). void RooFormula::printClassName ; (; std::ostream & ; os); const. overridevirtual . Print class name of formula. ; Reimplemented from RooPrintable.; Definition at line 471 of file RooFormula.cxx. ◆ printMultiline(). void RooFormula::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Printing interface. ; Reimplemented from RooPrintable.; Definition at line 430 of file RooFormula.cxx. ◆ printName(). void RooFormula::printName ; (; std::ostream & ; os); const. overridevirtual . Print name of formula. ; Reimplemented from RooPrintable.; Definition at line 453 of file RooFormula.cxx. ◆ printTitle(). void RooFormula::printTitle ; (; std::ostream & ; os); const. overridevirtual . Print title of formula. ; Reimplemented from RooPrintable.; Definition at line 462 of file RooFormula.cxx. ◆ printValue(). void RooFormula::printValue ; (; std::ostream & ; os); const. overridevirtual . Print value of formula. ; Reimplemented from RooPrintable.; Definition at line 444 of file RooFormula.cxx. ◆ processFormula(). std::string RooFormula::processFormula ; (; std::string ; formula); const. private . Process given formula by replacing all ordinal and name references by x[i], where i matches the position of the argument in _origList. ; Further, references to category states such as leptonMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:22381,interface,interface,22381,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['interface'],['interface']
Integrability,"er); Merge SamplingDistributions (does nothing if NULL is given).; If variable name was not set before, it is copied from the added; SamplingDistribution. Double_t Integral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off. Double_t IntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off.; compute also the error on the integral. Double_t CDF(Double_t x) const; returns the closed integral [-inf,x]. Double_t InverseCDF(Double_t pvalue); returns the inverse of the cumulative distribution function. Double_t InverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); returns the inverse of the cumulative distribution function, with variations depending on number of samples. Double_t InverseCDFInterpolate(Double_t pvalue); returns the inverse of the cumulative distribution function. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); Constructor for SamplingDistribution. Int_t GetSize() const; size of samples. {return fSamplingDist.size();}. const std::vector<Double_t> & GetSamplingDistribution() const; Get test statistics values. {return fSamplingDist;}. const std::vector<Double_t> & GetSampleWeights() const; Get the sampling weights. {return fSampleWeights;}. const TString GetVarName() const; {return fVarName;}. » Last changed: root/roostats:$Id: SamplingDistribution.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:9687,depend,depending,9687,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,1,['depend'],['depending']
Integrability,"er); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTEveRefCnt::IncRefCount(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidMinMaxValChanged()SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTEveRefCnt::OnZeroRefCount(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Color_t*PtrDefaultColor(); Color_t*PtrOverColor(); Color_t*PtrUnderColor(); virtual Int_tTObject::Read(const char* name); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveRGBAPalette.html:6606,Message,Message,6606,root/html532/TEveRGBAPalette.html,https://root.cern,https://root.cern/root/html532/TEveRGBAPalette.html,2,['Message'],['Message']
Integrability,"er)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:26970,interface,interface,26970,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,15,['interface'],['interface']
Integrability,"er* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; static voidTQObject::LoadRQ_OBJECT(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidNotified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidRemo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSysEvtHandler.html:5735,Message,Message,5735,root/html532/TSysEvtHandler.html,https://root.cern,https://root.cern/root/html532/TSysEvtHandler.html,2,['Message'],['Message']
Integrability,"er, const char *name=nullptr);  Copy constructor. ;  ;  Public Member Functions inherited from RooProjectedPdf;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:1947,integrat,integration,1947,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['integrat'],['integration']
Integrability,"er,; 379 TTree *tree, RDataSource *ds, const std::string &context,; 380 bool vector2RVec);; 381 ; 382std::vector<bool> FindUndefinedDSColumns(const ColumnNames_t &requestedCols, const ColumnNames_t &definedDSCols);; 383 ; 384template <typename T>; 385void AddDSColumnsHelper(const std::string &colName, RLoopManager &lm, RDataSource &ds, RColumnRegister &colRegister); 386{; 387 if (colRegister.IsDefineOrAlias(colName) || !ds.HasColumn(colName) ||; 388 lm.HasDataSourceColumnReaders(colName, typeid(T))); 389 return;; 390 ; 391 const auto nSlots = lm.GetNSlots();; 392 std::vector<std::unique_ptr<RColumnReaderBase>> colReaders;; 393 colReaders.reserve(nSlots);; 394 ; 395 const auto valuePtrs = ds.GetColumnReaders<T>(colName);; 396 if (!valuePtrs.empty()) { // we are using the old GetColumnReaders mechanism in this RDataSource; 397 for (auto *ptr : valuePtrs); 398 colReaders.emplace_back(new RDSColumnReader<T>(ptr));; 399 ; 400 } else { // using the new GetColumnReaders mechanism; 401 // TODO consider changing the interface so we return all of these for all slots in one go; 402 for (auto slot = 0u; slot < lm.GetNSlots(); ++slot); 403 colReaders.emplace_back(ds.GetColumnReaders(slot, colName, typeid(T)));; 404 }; 405 ; 406 lm.AddDataSourceColumnReaders(colName, std::move(colReaders), typeid(T));; 407}; 408 ; 409/// Take list of column names that must be defined, current map of custom columns, current list of defined column names,; 410/// and return a new map of custom columns (with the new datasource columns added to it); 411template <typename... ColumnTypes>; 412void AddDSColumns(const std::vector<std::string> &requiredCols, RLoopManager &lm, RDataSource &ds,; 413 TTraits::TypeList<ColumnTypes...>, RColumnRegister &colRegister); 414{; 415 // hack to expand a template parameter pack without c++17 fold expressions.; 416 using expander = int[];; 417 int i = 0;; 418 (void)expander{(AddDSColumnsHelper<ColumnTypes>(requiredCols[i], lm, ds, colRegister), ++i)..., 0};; 419}; 420 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:18127,interface,interface,18127,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,1,['interface'],['interface']
Integrability,"er->getDynamicLibraryManager()->isLibraryLoaded(tLibName.Data());; 3135 return false;; 3136}; 3137 ; 3138Bool_t TCling::IsLibraryLoaded(const char* libname) const; 3139{; 3140 R__LOCKGUARD(gInterpreterMutex);; 3141 return s_IsLibraryLoaded(libname, GetInterpreterImpl());; 3142}; 3143 ; 3144////////////////////////////////////////////////////////////////////////////////; 3145/// Return true if ROOT has cxxmodules pcm for a given library name.; 3146// FIXME: We need to be able to support lazy loading of pcm generated by ACLiC.; 3147Bool_t TCling::HasPCMForLibrary(const char *libname) const; 3148{; 3149 llvm::StringRef ModuleName(libname);; 3150 ModuleName = llvm::sys::path::stem(ModuleName);; 3151 ModuleName.consume_front(""lib"");; 3152 ; 3153 // FIXME: In case when the modulemap is not yet loaded we will return the; 3154 // wrong result. Consider a call to HasPCMForLibrary(../test/libEvent.so); 3155 // We will only load the modulemap for libEvent.so after we dlopen libEvent; 3156 // which may happen after calling this interface. Maybe we should also check; 3157 // if there is a Event.pcm file and a module.modulemap, load it and return; 3158 // true.; 3159 clang::ModuleMap &moduleMap = fInterpreter->getCI()->getPreprocessor().getHeaderSearchInfo().getModuleMap();; 3160 clang::Module *M = moduleMap.findModule(ModuleName);; 3161 return M && !M->IsUnimportable && M->getASTFile();; 3162}; 3163 ; 3164////////////////////////////////////////////////////////////////////////////////; 3165/// Return true if the file has already been loaded by cint.; 3166/// We will try in this order:; 3167/// actual filename; 3168/// filename as a path relative to; 3169/// the include path; 3170/// the shared library path; 3171 ; 3172Bool_t TCling::IsLoaded(const char* filename) const; 3173{; 3174 R__LOCKGUARD(gInterpreterMutex);; 3175 ; 3176 //FIXME: if we use llvm::sys::fs::make_absolute all this can go away. See; 3177 // cling::DynamicLibraryManager.; 3178 ; 3179 std::string file_name = filen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:122058,interface,interface,122058,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interface']
Integrability,"er. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:30918,depend,depending,30918,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,6,['depend'],['depending']
Integrability,"er. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h=>Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:29609,depend,depending,29609,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,4,['depend'],['depending']
Integrability,"er. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGSimpleTable Class ReferenceGUI » Low level GUI widgets. ; To provide a simple class to visualize an array of doubles, the class TGSimpleTable is provided. ; TGSimpleTable creates it's own TGSimpleTableInterface. For more information, see the documentation of TGTable; The interface is accesible through the GetInterface() method. ; Definition at line 16 of file TGSimpleTable.h. Public Member Functions;  TGSimpleTable (TGWindow *p, Int_t id, Double_t **data, UInt_t nrows, UInt_t ncolumns);  TGSimpleTable constructor. ;  ;  ~TGSimpleTable () override;  TGSimpleTable destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTable;  TGTable (const TGWindow *p=nullptr, Int_t id=0, TVirtualTableInterface *interface=nullptr, UInt_t nrows=50, UInt_t ncolumns=20);  TGTable constuctor. ;  ;  ~TGTable () override;  TGTable destructor. ;  ; virtual TGTableCell * FindCell (TGString label);  Find the TGTableCell with label. ;  ; virtual const TGTableCell * FindCell (TGString label) const;  Const version of FindCell(). ;  ; virtual TGCanvas * GetCanvas ();  ; virtual TGTableCell * GetCell (UInt_t i, UInt_t j);  Return a pointer to the TGTableCell at position i,j. ;  ; virtual const TGTableCell * GetCell (UInt_t i, UInt_t j) const;  Const version of GetCell(). ;  ; virtual const TGTableHeaderFrame * GetCHdrFrame ();  ; virtual TObjArray * GetColumn (UInt_t columns);  Return a pointer to a TObjArray that contains pointers to all the cells in column. ;  ; virtual TGTableHeader * GetColumnHeader (const UInt_t column);  Return a pointer to the header of column. ;  ; virtual const TGTableHeader * GetColumnHeader (const UInt_t column) const;  Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSimpleTable.html:1113,interface,interface,1113,doc/master/classTGSimpleTable.html,https://root.cern,https://root.cern/doc/master/classTGSimpleTable.html,1,['interface'],['interface']
Integrability,"er. void ReadFastArray(UShort_t *h, Int_t n); read array of UShort_t from buffer. void ReadFastArray(Int_t *i, Int_t n); read array of Int_t from buffer. void ReadFastArray(UInt_t *i, Int_t n); read array of UInt_t from buffer. void ReadFastArray(Long_t *l, Int_t n); read array of Long_t from buffer. void ReadFastArray(ULong_t *l, Int_t n); read array of ULong_t from buffer. void ReadFastArray(Long64_t *l, Int_t n); read array of Long64_t from buffer. void ReadFastArray(ULong64_t *l, Int_t n); read array of ULong64_t from buffer. void ReadFastArray(Float_t *f, Int_t n); read array of Float_t from buffer. void ReadFastArray(Double_t *d, Int_t n); read array of Double_t from buffer. void ReadFastArrayFloat16(Float_t* f, Int_t n, TStreamerElement* ele = 0); read array of Float16_t from buffer. void ReadFastArrayDouble32(Double_t* d, Int_t n, TStreamerElement* ele = 0); read array of Double32_t from buffer. void ReadFastArray(void* start, const TClass* cl, Int_t n = 1, TMemberStreamer* s = 0, const TClass* onFileClass = 0); redefined here to avoid warning message from gcc. void ReadFastArray(void** startp, const TClass* cl, Int_t n = 1, Bool_t isPreAlloc = kFALSE, TMemberStreamer* s = 0, const TClass* onFileClass = 0); redefined here to avoid warning message from gcc. void WriteArray(const Bool_t *b, Int_t n); Write array of Bool_t to buffer. void WriteArray(const Char_t *c, Int_t n); Write array of Char_t to buffer. void WriteArray(const UChar_t *c, Int_t n); Write array of UChar_t to buffer. void WriteArray(const Short_t *h, Int_t n); Write array of Short_t to buffer. void WriteArray(const UShort_t *h, Int_t n); Write array of UShort_t to buffer. void WriteArray(const Int_t *i, Int_t n); Write array of Int_ to buffer. void WriteArray(const UInt_t *i, Int_t n); Write array of UInt_t to buffer. void WriteArray(const Long_t *l, Int_t n); Write array of Long_t to buffer. void WriteArray(const ULong_t *l, Int_t n); Write array of ULong_t to buffer. void WriteArray(const Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:35352,message,message,35352,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,1,['message'],['message']
Integrability,"er. void ReadFastArray(UShort_t* h, Int_t n); read array of UShort_t from buffer. void ReadFastArray(Int_t* i, Int_t n); read array of Int_t from buffer. void ReadFastArray(UInt_t* i, Int_t n); read array of UInt_t from buffer. void ReadFastArray(Long_t* l, Int_t n); read array of Long_t from buffer. void ReadFastArray(ULong_t* l, Int_t n); read array of ULong_t from buffer. void ReadFastArray(Long64_t* l, Int_t n); read array of Long64_t from buffer. void ReadFastArray(ULong64_t* l, Int_t n); read array of ULong64_t from buffer. void ReadFastArray(Float_t* f, Int_t n); read array of Float_t from buffer. void ReadFastArray(Double_t* d, Int_t n); read array of Double_t from buffer. void ReadFastArrayFloat16(Float_t* f, Int_t n, TStreamerElement* ele = 0); read array of Float16_t from buffer. void ReadFastArrayDouble32(Double_t* d, Int_t n, TStreamerElement* ele = 0); read array of Double32_t from buffer. void ReadFastArray(void* start, const TClass* cl, Int_t n = 1, TMemberStreamer* s = 0, const TClass* onFileClass = 0); redefined here to avoid warning message from gcc. void ReadFastArray(void** startp, const TClass* cl, Int_t n = 1, Bool_t isPreAlloc = kFALSE, TMemberStreamer* s = 0, const TClass* onFileClass = 0); redefined here to avoid warning message from gcc. void WriteArray(const Bool_t* b, Int_t n); Write array of Bool_t to buffer. void WriteArray(const Char_t* c, Int_t n); Write array of Char_t to buffer. void WriteArray(const UChar_t* c, Int_t n); Write array of UChar_t to buffer. void WriteArray(const Short_t* h, Int_t n); Write array of Short_t to buffer. void WriteArray(const UShort_t* h, Int_t n); Write array of UShort_t to buffer. void WriteArray(const Int_t* i, Int_t n); Write array of Int_ to buffer. void WriteArray(const UInt_t* i, Int_t n); Write array of UInt_t to buffer. void WriteArray(const Long_t* l, Int_t n); Write array of Long_t to buffer. void WriteArray(const ULong_t* l, Int_t n); Write array of ULong_t to buffer. void WriteArray(const Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferXML.html:37283,message,message,37283,root/html528/TBufferXML.html,https://root.cern,https://root.cern/root/html528/TBufferXML.html,4,['message'],['message']
Integrability,"er.; An end-user can convert a TF1 object in a ROOT::Math::IParametricFunctionMultiDim, using the wrapper class ROOT::Math::WrapperMultiTF1:; TF1 * f1 = new TF1(""f1"",""gaus"");; ROOT::Math::WrappedMultiTF1 fitFunction(f1, f1->GetNdim() );; ROOT::Fit::Fitter fitter;; fitter.SetFunction( fitFunction, false);; When creating the wrapper, the parameter values stored in TF1 will be copied in the ROOT::Math::WrappedMultiTF1 object. The function object representing the model function is given to the ROOT::Fitter class using the Fitter::SetFunction method.; The user has also the possibility to provide a function object, which implements the derivatives of the function with respect to the parameters. This information might be useful for some types of fits. In this case he needs to provide the function object as a class deriving from the ROOT::Math::IParametricGradFunctionMultiDim interface. Note that the wrapper class ROOT::Math::WrappedMultiTF1 implements also the gradient interface, using internally TF1::GradientPar, which is based on numerical differentiation, apart for the case of linear functions (i.e. when TF1::IsLinear() is true). The parameter derivatives of the model function can be useful to some minimization algorithms, such as Fumili. However, in general is better to leave the minimization algorithm (e.g. Minuit) to compute the needed derivatives using its own customised numerical differentiation algorithm. In order to not provide to the fitter the parameter derivatives, we explicitly passed in Fitter::SetFunction a false value.; 5.7.3 Fit Configuration; The configuration of the fit is done via the ROOT::Fit::FitConfig class and its contained ROOT::Fit::ParameterSettings class. These are the possible allowed fit configurations:. setting the initial values of the parameters;; setting the parameter step sizes;; setting eventual parameter bounds;; setting the minimizer library and the particular algorithm to use;; setting different minimization options (print level, tol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:199084,wrap,wrapper,199084,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"er.cxx. ◆ PaintH3BoxRaster(). void THistPainter::PaintH3BoxRaster ; (; ). virtual . Control function to draw a 3D histogram with boxes. ; Definition at line 7690 of file THistPainter.cxx. ◆ PaintH3Iso(). void THistPainter::PaintH3Iso ; (; ). virtual . Control function to draw a 3D histogram with Iso Surfaces. ; Definition at line 7892 of file THistPainter.cxx. ◆ PaintHighlightBin(). void THistPainter::PaintHighlightBin ; (; Option_t * ; option = """"). virtual . Paint highlight bin as TBox object. ; Definition at line 3908 of file THistPainter.cxx. ◆ PaintHist(). void THistPainter::PaintHist ; (; Option_t * ; option). virtual . Control routine to draw 1D histograms ; Definition at line 6837 of file THistPainter.cxx. ◆ PaintInit(). Int_t THistPainter::PaintInit ; (; ). virtual . Compute histogram parameters used by the drawing routines. ; Definition at line 7082 of file THistPainter.cxx. ◆ PaintInitH(). Int_t THistPainter::PaintInitH ; (; ). virtual . Compute histogram parameters used by the drawing routines for a rotated pad. ; Definition at line 7334 of file THistPainter.cxx. ◆ PaintLego(). void THistPainter::PaintLego ; (; Option_t * ; option). virtual . Control function to draw a 2D histogram as a lego plot. ; Definition at line 8017 of file THistPainter.cxx. ◆ PaintLegoAxis(). void THistPainter::PaintLegoAxis ; (; TGaxis * ; axis, . Double_t ; ang . ). virtual . Draw the axis for legos and surface plots. ; Definition at line 8232 of file THistPainter.cxx. ◆ PaintPalette(). void THistPainter::PaintPalette ; (; ). virtual . Paint the color palette on the right side of the pad. ; Definition at line 8421 of file THistPainter.cxx. ◆ PaintScatterPlot(). void THistPainter::PaintScatterPlot ; (; Option_t * ; option). virtual . Control function to draw a 2D histogram as a scatter plot. ; Definition at line 8459 of file THistPainter.cxx. ◆ PaintSpecialObjects(). void THistPainter::PaintSpecialObjects ; (; const TObject * ; obj, . Option_t * ; option . ). static . Static func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:161261,rout,routines,161261,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['rout'],['routines']
Integrability,er.cxx. ◆ getPrintLevel(). int RooMinimizer::getPrintLevel ; (; ). Get the MINUIT internal printing level. ; Definition at line 480 of file RooMinimizer.cxx. ◆ hesse(). int RooMinimizer::hesse ; (; ). Execute HESSE. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 359 of file RooMinimizer.cxx. ◆ improve(). int RooMinimizer::improve ; (; ). Execute IMPROVE. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 464 of file RooMinimizer.cxx. ◆ initMinimizer(). void RooMinimizer::initMinimizer ; (; ). private . Definition at line 968 of file RooMinimizer.cxx. ◆ initMinimizerFcnDependentPart(). void RooMinimizer::initMinimizerFcnDependentPart ; (; double ; defaultErrorLevel). private . Initialize the part of the minimizer that is dependent on the function to be minimized. ; Definition at line 151 of file RooMinimizer.cxx. ◆ initMinimizerFirstPart(). void RooMinimizer::initMinimizerFirstPart ; (; ). private . Initialize the part of the minimizer that is independent of the function to be minimized. ; Definition at line 141 of file RooMinimizer.cxx. ◆ IsA(). TClass * RooMinimizer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 247 of file RooMinimizer.h. ◆ lastMinuitFit(). RooFit::OwningPtr< RooFitResult > RooMinimizer::lastMinuitFit ; (; ). Definition at line 738 of file RooMinimizer.cxx. ◆ logfile(). std::ofstream * RooMinimizer::logfile ; (; ). private . Definition at line 827 of file RooMinimizer.cxx. ◆ makeEvalErrorContext(). std::unique_ptr< RooAbsReal::EvalErrorContext > RooMinimizer::makeEvalErrorContext ; (; ); const. private . Definition at line 840 of file RooMinimizer.cxx. ◆ maxFCN(). double & RooMinimizer::maxFCN ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:22246,depend,dependent,22246,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['depend'],['dependent']
Integrability,"er.cxx:3580; TGeoManager::fGLMatrixTGeoHMatrix * fGLMatrixDefinition TGeoManager.h:128; TGeoManager::fCurrentTrackTVirtualGeoTrack * fCurrentTrackDefinition TGeoManager.h:76; TGeoManager::fPdgNamesTObjArray * fPdgNamesDefinition TGeoManager.h:100; TGeoManager::DrawPathvoid DrawPath(const char *path, Option_t *option="""")Draw current path.Definition TGeoManager.cxx:1923; TGeoManager::GetListOfPhysicalNodesTObjArray * GetListOfPhysicalNodes()Definition TGeoManager.h:468; TGeoManager::ThreadIdstatic Int_t ThreadId()Translates the current thread id to an ordinal number.Definition TGeoManager.cxx:999; TGeoManager::SetCurrentNavigatorBool_t SetCurrentNavigator(Int_t index)Switch to another existing navigator for the calling thread.Definition TGeoManager.cxx:849; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396; TGeoManager::MakeHypeTGeoVolume * MakeHype(const char *name, TGeoMedium *medium, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3230; TGeoManager::MakeParaboloidTGeoVolume * MakeParaboloid(const char *name, TGeoMedium *medium, Double_t rlo, Double_t rhi, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3239; TGeoManager::AddShapeInt_t AddShape(const TGeoShape *shape)Add a shape to the list. Returns index of the shape in list.Definition TGeoManager.cxx:703; TGeoManager::SetMaxVisNodesvoid SetMaxVisNodes(Int_t maxnodes=10000)set the maximum number of visible nodes.Definition TGeoManager.cxx:2380; TGeoManager::CleanGarbagevoid CleanGarbage()Clean temporary volumes and shapes from garbage collection.Definition TGeoManager.cxx:1627; TGeoManager::Voxelizevoid Voxelize(Option_t *option=nullptr)Voxelize all non-divided volumes.Definition TGeoManager.cxx:3129; TGeoManager::GetVirtualLevelInt_t GetVirtualLevel()Find level ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:218043,rout,rout,218043,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['rout'],['rout']
Integrability,"er::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTVirtualPS::fNByteNumber of bytes written in the file (PDF); TStringTNamed::fNameobject identifier; Bool_tTVirtualPS::fPrintedTrue when a page must be printed; Bool_tfRangeTrue when a range has been defined; Int_tTVirtualPS::fSizBufferBuffer size; ofstream*TVirtualPS::fStreamFile stream identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Int_tfTypeWorkstation type used to know if the SVG is open; Float_tfXsizePage size along X; Float_tfYsizePage size along Y; Double_tfYsizeSVGPage's Y size in SVG units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVG(); Default SVG constructor. TSVG(const char* filename, Int_t type = -113); Initialize the SVG interface. fname : SVG file name; wtype : SVG workstation type. Not used in the SVG driver. But as TSVG; inherits from TVirtualPS it should be kept. Anyway it is not; necessary to specify this parameter at creation time because it; has a default value (which is ignore in the SVG case). void Open(const char* filename, Int_t type = -111); Open a SVG file. ~TSVG(); Default SVG destructor. void Close(Option_t* opt = """"); Close a SVG file. void On(); Activate an already open SVG file. void Off(); Deactivate an already open SVG file. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw a Box. void DrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); Draw a Frame around a box. mode = -1 the box looks as it is behind the screen; mode = 1 the box looks as it is in front of the screen; border is the border size in already pre-computed SVG units dark is the; color for the dark part of the fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSVG.html:12670,interface,interface,12670,root/html534/TSVG.html,https://root.cern,https://root.cern/root/html534/TSVG.html,2,['interface'],['interface']
Integrability,"er::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualX(const char* name, const char* title); Ctor of ABC. TVirtualX *& Instance(); Returns gVirtualX global. void GetWindowAttributes(Window_t id, WindowAttributes_t& attr); The WindowAttributes_t structure is set to default. Bool_t ParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color); Looks up the string name of a color ""cname"" with respect to the screen; associated with the specified colormap. It returns the exact color value.; If the color name is not in the Host Portable Character Encoding,; the result is implementation dependent. cmap - the colormap; cname - the color name string; use of uppercase or lowercase; does not matter; color - returns the exact color value for later use. The ColorStruct_t structure is set to default. Let system think we; could parse color. Bool_t AllocColor(Colormap_t cmap, ColorStruct_t& color); Allocates a read-only colormap entry corresponding to the closest RGB; value supported by the hardware. If no cell could be allocated it; returns kFALSE, otherwise kTRUE. The pixel value is set to default. Let system think we could allocate; color. cmap - the colormap; color - specifies and returns the values actually used in the cmap. void QueryColor(Colormap_t cmap, ColorStruct_t& color); Returns the current RGB value for the pixel in the ""color"" structure. The color components are set to default. cmap - the colormap; color - specifies and returns the RGB values for the pixel specified; in the structure. void NextEvent(Event_t& event); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:21831,depend,dependent,21831,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['depend'],['dependent']
Integrability,"er:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""10|30"" [The Layout of the input]; : Layout: ""LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : RandomSeed: ""1234"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""0.2"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0."" [Defines",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:6815,message,message,6815,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['message'],['message']
Integrability,"er; Int_tTSQLServer::fPortport to which we are connected; TStringTSQLServer::fTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*TSQLServer::fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMySQLServer(const char* db, const char* uid, const char* pw); Open a connection to a MySQL DB server. The db arguments should be; of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; the password that should be used for the connection. In addition, several parameters can be specified in url after ""?"" symbol:; timeout=N n is connect timeout is seconds; socket=socketname socketname should be name of Unix socket, used; for connection; multi_statements tell the server that the client may send multiple; statements in a single string (separated by ;);; multi_results tell the server that the client can handle multiple; result sets from multiple-statement executions or; stored procedures; reconnect=0|1 enable or disable automatic reconnection to the server; if the connection is found to have been lost; compress use the compressed client/server protocol; cnf_file=filename Read options from the named option file instead of; from my.cnf; cnf_group=groupname Read options from the named group from my.cnf or the; file specified with cnf_file option; If several parameters are specified, they should be separated by ""&"" symbol; Example of connection argument:; TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");. ~TMySQLServer(); Close connection to MySQL DB server. void Close(Option_t* opt = """"); Close connection to MySQL DB server. TSQLResult * Query(const char* sql); Execute SQL command. Result object must be deleted by the user.; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:9572,protocol,protocol,9572,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,10,['protocol'],['protocol']
Integrability,"er@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Process a single command line, either a C++ statement or an interpreter; command starting with a ""."".; Return the return value of the command casted to a long. Long_t ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Process a file containing a C++ macro. Long_t ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Execute a file containing a C++ macro (static method). Can be used; while TApplication is not yet created. void Run(Bool_t retrn = kFALSE); Main application eventloop. Calls system dependent eventloop via gSystem. void SetIdleTimer(UInt_t idleTimeInSec, const char* command); Set the command to be executed after the system has been idle for; idleTimeInSec seconds. Normally called via TROOT::Idle(...). void RemoveIdleTimer(); Remove idle timer. Normally called via TROOT::Idle(0). void StartIdleing(); Called when system starts idleing. void StopIdleing(); Called when system stops idleing. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); What to do when tab is pressed. Re-implemented by TRint.; See TTabCom::Hook() for meaning of return values. void Terminate(Int_t status = 0); Terminate the application by call TSystem::Exit() unless application has; been told to return from Run(), by a call to SetReturnFromRun(). void LineProcessed(const char* line); Emit signal when a line has been processed. void KeyPressed(Int_t key); Emit signal when console keyboard key was pressed. void ReturnPressed(char* text); Emit signal when return key was pressed. void SetEchoMode(Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplication.html:17919,depend,dependent,17919,root/html530/TApplication.html,https://root.cern,https://root.cern/root/html530/TApplication.html,5,['depend'],['dependent']
Integrability,"er@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Process a single command line, either a C++ statement or an interpreter; command starting with a ""."".; Return the return value of the command casted to a long. Long_t ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Process a file containing a C++ macro. Long_t ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); Execute a file containing a C++ macro (static method). Can be used; while TApplication is not yet created. void Run(Bool_t retrn = kFALSE); Main application eventloop. Calls system dependent eventloop via gSystem. void SetIdleTimer(UInt_t idleTimeInSec, const char* command); Set the command to be executed after the system has been idle for; idleTimeInSec seconds. Normally called via TROOT::Idle(...). void RemoveIdleTimer(); Remove idle timer. Normally called via TROOT::Idle(0). void StartIdleing(); Called when system starts idleing. void StopIdleing(); Called when system stops idleing. void Terminate(Int_t status = 0); Terminate the application by call TSystem::Exit() unless application has; been told to return from Run(), by a call to SetReturnFromRun(). void LineProcessed(const char* line); Emit signal when a line has been processed. void KeyPressed(Int_t key); Emit signal when console keyboard key was pressed. void ReturnPressed(char* text); Emit signal when return key was pressed. void SetEchoMode(Bool_t mode); Set console echo mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. void CreateApplication(); Static function used to create a def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:17212,depend,dependent,17212,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,2,['depend'],['dependent']
Integrability,"erDefinition TObjArray.h:33; TObjArray::AddBeforevoid AddBefore(const TObject *before, TObject *obj) overrideAdd object in the slot before object before.Definition TObjArray.cxx:189; TObjArray::fLastInt_t fLastDefinition TObjArray.h:39; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::IsOnHeapR__ALWAYS_INLINE Bool_t IsOnHeap() constDefinition TObject.h:152; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Comparevirtual Int_t Compare(const TObject *obj) constCompare abstract method.Definition TObject.cxx:244; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TSeqCollection::Changedvirtual void Changed()Definition TSeqCollection.h:34; TSeqCollection::QSortstatic void QSort(TObject **a, Int_t first, Int_t last)Sort array of TObject pointers using a quicksort algorithm.Definition TSeqCollection.cxx:70; TSeqCollection::fSortedBool_t fSortedDefinition TSeqCollection.h:31; TStorage::Allocstatic void * Alloc(size_t size)Allocate a block of memory, that later can be resized using TStorage::ReAlloc().Definition TStorage.cxx:152; TStorage::Deallocstatic void Dealloc(void *ptr)De-allocate block of memory, that was allocated via TStorage::Allo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:41514,message,message,41514,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['message'],['message']
Integrability,"erMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:3048,interface,interface,3048,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['interface'],['interface']
Integrability,"erNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:24504,synchroniz,synchronize,24504,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['synchroniz'],['synchronize']
Integrability,"erNVirtual(TBuffer& b); RooStats::ToyMCSamplerToyMCSampler(); RooStats::ToyMCSamplerToyMCSampler(const RooStats::ToyMCSampler&); RooStats::ToyMCSamplerToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). protected:. RooAbsData*Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = NULL, int forceEvents = 0) const. Data Members; protected:. RooArgSet*_allVars! ; RooAbsPdf::GenSpec*_gs1! GenSpec #1 ; RooAbsPdf::GenSpec*_gs2! GenSpec #2; RooAbsPdf::GenSpec*_gs3! GenSpec #3; RooAbsPdf::GenSpec*_gs4! GenSpec #4; list<RooAbsPdf::GenSpec*>_gsList! ; list<RooArgSet*>_obsList!; list<RooAbsPdf*>_pdfList!; Double_tfAdaptiveHighLimit; Double_tfAdaptiveLowLimit; Bool_tfExpectedNuisanceParwhether to use expectation values for nuisance parameters (ie Asimov data set); Bool_tfGenerateBinned; const RooArgSet*fGlobalObservables; RooAbsPdf*fImportanceDensityin dev; const RooArgSet*fImportanceSnapshotin dev; Double_tfMaxToys; Int_tfNEventsnumber of events per toy (may be ignored depending on settings); Int_tfNToysnumber of toys to generate; RooStats::NuisanceParametersSampler*fNuisanceParametersSampler!; const RooArgSet*fNuisancePars; RooArgSet*fNullPOIparameters of interest; const RooArgSet*fObservables; RooAbsPdf*fPdfmodel; RooAbsPdf*fPriorNuisanceprior pdf for nuisance parameters; RooStats::ProofConfig*fProofConfig!; const RooDataSet*fProtoDatain dev; stringfSamplingDistNamename of the model; Double_tfSize; RooStats::TestStatistic*fTestStattest statistic that is being sampled; Double_tfToysInTails; Bool_tfUseMultiGenUse PrepareMultiGen?; static Bool_tfgAlwaysUseMultiGenUse PrepareMultiGen always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~ToyMCSampler(). Bool_t CheckConfig(void); only checks, no guessing/determination (do this in calculators,; e.g. using ModelConfig::GuessObsAndNuisance(...)). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramPoint); Use for serial and parallel runs. SamplingDistr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSampler.html:3831,depend,depending,3831,root/html530/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSampler.html,1,['depend'],['depending']
Integrability,"erName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  . Private Member Functions; double DoEvalPar (const double *x, const double *p) const override;  needed by the interface ;  . Private Attributes; IParamFunction * fFunc;  ; bool fOwn;  . #include <Math/MultiDimParamFunctionAdapter.h>. Inheritance diagram for ROOT::Math::MultiDimParamFunctionAdapter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IParamMultiFunction::BaseFunc ROOT::Math::MultiDimParamFunctionAdapter::BaseFunc. Definition at line 45 of file MultiDimParamFunctionAdapter.h. Constructor & Destructor Documentation. ◆ MultiDimParamFunctionAdapter() [1/3]. ROOT::Math::MultiDimParamFunctionAdapter::MultiDimParamFunctionAdapter ; (; const IParamFunction & ; f). inline . Constructor from a parametric one dim function interface from a const reference Own the function in this case. ; Definition at line 52 of file MultiDimParamFunctionAdapter.h. ◆ MultiDimParamFunctionAdapter() [2/3]. ROOT::Math::MultiDimParamFunctionAdapter::MultiDimParamFunctionAdapter ; (; IParamFunction & ; f). inline . Constructor from a parametric one dim function interface from a non-const reference Do not own the function in this case. ; Definition at line 62 of file MultiDimParamFunctionAdapter.h. ◆ MultiDimParamFunctionAdapter() [3/3]. ROOT::Math::MultiDimParamFunctionAdapter::MultiDimParamFunctionAdapter ; (; const MultiDimParamFunctionAdapter & ; rhs). inline . Copy constructor. ; Different behaviour according if function is owned or not ; Definition at line 71 of file MultiDimParamFunctionAdapter.h. ◆ ~MultiDimParamFunctionAdapter(). ROOT::Math::MultiDimParamFunctionAdapter::~MultiDimParamFunctionAdapter ; (; ). inlineoverride . Destructor (no operations) ; Definition at line 84 of file MultiDimParamFunctionAdapter.h. Member Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html:4192,interface,interface,4192,doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,1,['interface'],['interface']
Integrability,"erProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooDataHist _dh;  ; RooListProxy _p;  ; bool _relParam;  ; RooListProxy _x;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListSha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:55585,integrat,integration,55585,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,1,['integrat'],['integration']
Integrability,"erRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2PdfBinding_double_double_int_.html:38608,integrat,integrator,38608,root/html526/RooCFunction2PdfBinding_double_double_int_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2PdfBinding_double_double_int_.html,1,['integrat'],['integrator']
Integrability,"erRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2PdfBinding_double_int_double_.html:38608,integrat,integrator,38608,root/html526/RooCFunction2PdfBinding_double_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2PdfBinding_double_int_double_.html,1,['integrat'],['integrator']
Integrability,"eral matrix multiplication. Replace this matrix with C such that C = A * B. ; Definition at line 644 of file TMatrixT.cxx. ◆ Mult() [2/4]. template<class Element > . void TMatrixT< Element >::Mult ; (; const TMatrixT< Element > & ; a, . const TMatrixTSym< Element > & ; b . ). Matrix multiplication, with A general and B symmetric. ; Replace this matrix with C such that C = A * B. ; Definition at line 745 of file TMatrixT.cxx. ◆ Mult() [3/4]. template<class Element > . void TMatrixT< Element >::Mult ; (; const TMatrixTSym< Element > & ; a, . const TMatrixT< Element > & ; b . ). Matrix multiplication, with A symmetric and B general. ; Replace this matrix with C such that C = A * B. ; Definition at line 693 of file TMatrixT.cxx. ◆ Mult() [4/4]. template<class Element > . void TMatrixT< Element >::Mult ; (; const TMatrixTSym< Element > & ; a, . const TMatrixTSym< Element > & ; b . ). Matrix multiplication, with A symmetric and B symmetric. ; (Actually copied for the moment routine for B general) Replace this matrix with C such that C = A * B. ; Definition at line 797 of file TMatrixT.cxx. ◆ MultT() [1/4]. template<class Element > . void TMatrixT< Element >::MultT ; (; const TMatrixT< Element > & ; a, . const TMatrixT< Element > & ; b . ). General matrix multiplication. Replace this matrix with C such that C = A * B^T. ; Definition at line 947 of file TMatrixT.cxx. ◆ MultT() [2/4]. template<class Element > . void TMatrixT< Element >::MultT ; (; const TMatrixT< Element > & ; a, . const TMatrixTSym< Element > & ; b . ). inline . Definition at line 107 of file TMatrixT.h. ◆ MultT() [3/4]. template<class Element > . void TMatrixT< Element >::MultT ; (; const TMatrixTSym< Element > & ; a, . const TMatrixT< Element > & ; b . ). Matrix multiplication, with A symmetric and B general. ; Replace this matrix with C such that C = A * B^T. ; Definition at line 999 of file TMatrixT.cxx. ◆ MultT() [4/4]. template<class Element > . void TMatrixT< Element >::MultT ; (; const TMatrixTSym< E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:40533,rout,routine,40533,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['rout'],['routine']
Integrability,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:7660,integrat,integration,7660,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['integrat'],['integration']
Integrability,"eration of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanMar;  RANMAR generator see here More...;  ; class  ROOT::Math::GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  ROOT::Math::MersenneTwisterEngine;  Random number generator class based on M. More...;  ; class  ROOT::Math::MixMaxEngine< N, SkipNumber >;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  ROOT::Math::Random< Engine >;  Documentation for the Random class. More...;  ; class  ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  ROOT::Math::StdEngine< Generator >;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; class  TKDTree< Index, Value >;  Class implementing a kd-tree. More...;  ; class  TRandom;  This is the base class for the ROOT Random number generators. More...;  ; class  TRandom1;  The Ranlux Random number generator class. More...;  ; class  TRandom2;  Random number generator class based on the maximally quidistributed combined Tausworthe generator by L'Ecuyer. More...;  ; class  TRandom3;  Random number generator class based on M. More...;  . Typedefs; typedef TRandomEngine ROOT::Math::DefaultEngineType;  Documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Random.html:3326,wrap,wrapper,3326,doc/master/group__Random.html,https://root.cern,https://root.cern/doc/master/group__Random.html,1,['wrap'],['wrapper']
Integrability,"erator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:50775,wrap,wrap,50775,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['wrap'],['wrap']
Integrability,"erator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenericPdf(const char* name, const char* title, const RooArgList& dependents); Constructor with formula expression and list of input variables. RooGenericPdf(const char* name, const char* title, const char* formula, const RooArgList& dependents); Constructor with a name, title, formula expression and a list of variables. RooGenericPdf(const RooGenericPdf& other, const char* name = 0); Copy constructor. ~RooGenericPdf(); Destructor. RooFormula& formula() const. Double_t evaluate() const; Calculate current value of this object. Bool_t setFormula(const char* formula); Change formula expression to given expression. Bool_t isValidReal(Double_t value, Bool_t printError) const; Check if given value is valid. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Propagate server changes to embedded formula object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. void print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenericPdf.html:44104,depend,dependents,44104,root/html534/RooGenericPdf.html,https://root.cern,https://root.cern/root/html534/RooGenericPdf.html,2,['depend'],['dependents']
Integrability,"erator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:67472,wrap,wrapper,67472,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['wrap'],['wrapper']
Integrability,"erator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:54488,wrap,wrapper,54488,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,4,['wrap'],['wrapper']
Integrability,"erator(). RooFIter RooLinkedList::fwdIterator ; (; ); const. Create a one-time-use forward iterator for this list. ; ReturnsRooFIter that only supports next() ; Definition at line 756 of file RooLinkedList.cxx. ◆ getHashTableSize(). Int_t RooLinkedList::getHashTableSize ; (; ); const. inline . Definition at line 59 of file RooLinkedList.h. ◆ GetName(). const char * RooLinkedList::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 104 of file RooLinkedList.h. ◆ GetSize(). Int_t RooLinkedList::GetSize ; (; ); const. inline . Definition at line 69 of file RooLinkedList.h. ◆ Hash(). ULong_t RooLinkedList::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; RooLinkedList::HashULong_t Hash() const overrideReturn hash value for this object.Definition RooLinkedList.h:110; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid Recursive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:20619,rout,routine,20619,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['rout'],['routine']
Integrability,erator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_mistag; RooCategoryProxy_mixState; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBMixDecay.html:43980,integrat,integration,43980,root/html602/RooBMixDecay.html,https://root.cern,https://root.cern/root/html602/RooBMixDecay.html,4,['integrat'],['integration']
Integrability,"erator; TObjArray returns a TObjArrayIter. Now define a pointer for MyClass objects and set it to each member of the TObjArray:; MyClass *myobject;; while ((myobject = (MyClass *)myiter.Next())) {; // process myobject; }; The heart of this is the myiter.Next() expression which does the following:. The Next() method of the TIter object myiter is called; The TIter forwards the call to the TIterator embedded in the TObjArrayIter; TIterator forwards the call to the TObjArrayIter; TObjArrayIter finds the next MyClass object and returns it; TIter passes the MyClass object back to the caller. Sometimes the TIter object is called next, and then instead of writing: next.Next()which is legal, but looks rather odd, iteration is written as next(). This works because the function operator() is defined for the TIter class to be equivalent to the Next() method.; 16.6 The TList Collection; A TList is a doubly linked list. Before being inserted into the list the object pointer is wrapped in a TObjLink object that contains, besides the object pointer also a previous and next pointer.; Objects are typically added using:. Add(); AddFirst(), AddLast(); AddBefore(), AddAfter(). Main features ofTList: very low cost of adding/removing elements anywhere in the list.; Overhead per element: 1 TObjLink, i.e. two 4 (or 8) byte pointers + pointer to vtable = 12 (or 24) bytes.; Next figure shows the internal data structure of a TList. The internal data structure of a TList. 16.6.1 Iterating Over a TList; There are four ways to iterate over a TList:. Using the ForEach script:. GetListOfPrimitives()->ForEach(TObject,Draw)();. Using the TList iterator TListIter (via the wrapper class TIter):. TIter next(GetListOfTracks());; while ((TTrack *obj = (TTrack *)next())); obj->Draw();. Using the TObjLink list entries (that wrap the TObject*):. TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw();; lnk = lnk->Next();; }. Using the TList’s After() and Before() member fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:851082,wrap,wrapped,851082,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['wrap'],['wrapped']
Integrability,"erator=(const ROOT::Math::GenAlgoOptions&); virtual voidPrint(ostream& os = std::cout) const; static voidPrintAllDefault(ostream& os = std::cout); doubleROOT::Math::IOptions::RValue(const char* name) const; virtual voidSetIntValue(const char* name, int val); virtual voidSetNamedValue(const char* name, const char* val); virtual voidSetRealValue(const char* name, double val); voidROOT::Math::IOptions::SetValue(const char* name, double val); voidROOT::Math::IOptions::SetValue(const char* name, int val); voidROOT::Math::IOptions::SetValue(const char* name, const char* val). Data Members; private:. map<std::string,int>fIntOptsmap of the integer options ; map<std::string,std::string>fNamOptsmap of the named options; map<std::string,double>fRealOptsmap of the real options . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GenAlgoOptions(); {}. virtual ~GenAlgoOptions(). IOptions * Clone() const; use default copy constructor and assignment operator; generic methods for retrivieng options ; methods implementing the IOptions interface. return new GenAlgoOptions(const ROOT::Math::GenAlgoOptions& ). bool GetRealValue(const char* name, double& val) const; t.b.d need probably to implement in a .cxx file for CINT. bool GetIntValue(const char* name, int& val) const. bool GetNamedValue(const char* name, string& val) const. void SetRealValue(const char* name, double val); method wich need to be re-implemented by the derived classes. void SetIntValue(const char* name, int val). void SetNamedValue(const char* name, const char* val). void Print(ostream& os = std::cout) const; print options. IOptions * FindDefault(const char* algoname); static methods to retrieve the default options; find the option given a name; return 0 if the option is not found. IOptions & Default(const char* algoname); retrieve options given the name; if option is not found create a new GenAlgoOption for the given name. void PrintAllDefault(ostream& os = std::cout); print al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GenAlgoOptions.html:2226,interface,interface,2226,root/html534/ROOT__Math__GenAlgoOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GenAlgoOptions.html,2,['interface'],['interface']
Integrability,"erator==(const TIter &aIter) const {; 257 if (fIterator == nullptr); 258 return aIter.fIterator == nullptr || **aIter.fIterator == nullptr;; 259 if (aIter.fIterator == nullptr); 260 return fIterator == nullptr || **fIterator == nullptr;; 261 return *fIterator == *aIter.fIterator;; 262 }; 263 Bool_t operator!=(const TIter &aIter) const {; 264 return !(*this == aIter);; 265 }; 266 TIter &operator=(TIterator *iter); 267 {; 268 if (fIterator); 269 delete fIterator;; 270 fIterator = iter;; 271 return *this;; 272 }; 273 TObject *operator*() const { return fIterator ? *(*fIterator): nullptr; }; 274 TIter &Begin();; 275 static TIter End();; 276 ; 277 ClassDef(TIter,0) //Iterator wrapper; 278};; 279 ; 280template <class T>; 281class TIterCategory: public TIter, public std::iterator_traits<typename T::Iterator_t> {; 282 ; 283public:; 284 TIterCategory(const TCollection *col, Bool_t dir = kIterForward) : TIter(col, dir) { }; 285 TIterCategory(TIterator *it) : TIter(it) { }; 286 virtual ~TIterCategory() { }; 287 TIterCategory &Begin() { TIter::Begin(); return *this; }; 288 static TIterCategory End() { return TIterCategory(static_cast<TIterator*>(nullptr)); }; 289};; 290 ; 291 ; 292inline TIter TCollection::begin() const { return ++(TIter(this)); }; 293inline TIter TCollection::end() const { return TIter::End(); }; 294 ; 295namespace ROOT {; 296namespace Internal {; 297 ; 298const TCollection &EmptyCollection();; 299bool ContaineeInheritsFrom(TClass *cl, TClass *base);; 300 ; 301} // namespace Internal; 302 ; 303/// Special implementation of ROOT::RRangeCast for TCollection, including a; 304/// check that the cast target type inherits from TObject and a new constructor; 305/// that takes the TCollection by pointer.; 306/// \tparam T The new type to convert to.; 307/// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.; 308namespace Detail {; 309 ; 310template <typename T, bool isDynamic>; 311class TRangeCast : public ROOT::RRangeCast<T*, isDynam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:10718,wrap,wrapper,10718,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['wrap'],['wrapper']
Integrability,"ere fetched, merged or pushed.; Rebasing is a good way to do a couple of things:. ""Squash"" related commits in your local repository prior to a push (eg, ""Implement feature X,"" ""Tests for feature X"" and, ""Fix bugs found while testing feature X"").; Simplify merging branches and keeping up-to-date with remote changes during long periods between pushes. Important tip: do not attempt to rebase anything that has already been pushed to a remote repository. Your next push will almost certainly fail (and quite right too). Squashing related commits:. Squash some of the last few commits in your current branch:; git rebase -i HEAD~5. Your configured editor (VISUAL or EDITOR) will be started and contain a list of your last five commits (most recent at the bottom) along with instructions on what to do. Commits can have their log messages reworded; commits can be removed entirely, combined with other commits or re-ordered. If you specified any rewording or squashing, you will be taken to an edit session for the commit message(s) after saving and exiting the current edit session.; Squash, re-order or reword commits since divergence from :; git rebase -i <branch>. Keep up to date with remote branches without merging.; git pull --rebase. or; git fetch <remote>; git rebase <remote>/<branch>. Resolving conflicts; Any pull, merge, or rebase operation can result in a conflict during the application of a particular change from the remote branch. Follow the on-screen instructions to resolve problems. This will usually consist of doing a git status to list conflicts, editing the files and using git add to mark each conflict resolved. The process must either be allowed to continue by issuing a git rebase --continue or git merge --continue command, or the operation can be reverted with --abort instead of --continue. If in doubt, copy your repository.; Making a new remote branch. Create a new local branch based on an existing one:; git checkout -b <branch>. Do stuff.; Push the branch to the rem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:12410,message,message,12410,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['message'],['message']
Integrability,"ered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:89234,message,message,89234,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['message'],['message']
Integrability,"erence engine offered by TMVA.; 8##; 9## \macro_code; 10## \macro_output; 11##; 12## \date August 2019; 13## \author Stefan Wunsch; 14 ; 15# XGBoost has to be imported before ROOT to avoid crashes because of clashing; 16# std::regexp symbols that are exported by cppyy.; 17# See also: https://github.com/wlav/cppyy/issues/227; 18from xgboost import XGBClassifier; 19 ; 20import ROOT; 21import numpy as np; 22 ; 23from tmva100_DataPreparation import variables; 24 ; 25 ; 26def load_data(signal_filename, background_filename):; 27 # Read data from ROOT files; 28 data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); 29 data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); 30 ; 31 # Convert inputs to format readable by machine learning tools; 32 x_sig = np.vstack([data_sig[var] for var in variables]).T; 33 x_bkg = np.vstack([data_bkg[var] for var in variables]).T; 34 x = np.vstack([x_sig, x_bkg]); 35 ; 36 # Create labels; 37 num_sig = x_sig.shape[0]; 38 num_bkg = x_bkg.shape[0]; 39 y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); 40 ; 41 # Compute weights balancing both classes; 42 num_all = num_sig + num_bkg; 43 w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); 44 ; 45 return x, y, w; 46 ; 47if __name__ == ""__main__"":; 48 # Load data; 49 x, y, w = load_data(""train_signal.root"", ""train_background.root""); 50 ; 51 # Fit xgboost model; 52 bdt = XGBClassifier(max_depth=3, n_estimators=500); 53 bdt.fit(x, y, sample_weight=w); 54 ; 55 # Save model in TMVA format; 56 print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); 57 ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. tutorialstmvatmva101_Training.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py_source.html:2326,interface,interface,2326,doc/master/tmva101__Training_8py_source.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py_source.html,1,['interface'],['interface']
Integrability,"erence. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooLagrangianMorphFunc Class ReferenceRooFit » RooFit. ; Class RooLagrangianMorphing is a implementation of the method of Effective Lagrangian Morphing, described in ATL-PHYS-PUB-2015-047. ; Effective Lagrangian Morphing is a method to construct a continuous signal model in the coupling parameter space. Basic assumption is that shape and cross section of a physical distribution is proportional to it's squared matrix element. The signal model is constructed by a weighted sum over N input distributions. The calculation of the weights is based on Matrix Elements evaluated for the different input scenarios. The number of input files depends on the number of couplings in production and decay vertices, and also whether the decay and production vertices describe the same process or not. ; Definition at line 77 of file RooLagrangianMorphFunc.h. Classes; class  CacheElem;  ; struct  Config;  . Public Types; typedef std::map< const std::string, FlagSet > FlagMap;  ; typedef std::map< const std::string, int > FlagSet;  ; typedef std::map< const std::string, ParamSet > ParamMap;  ; typedef std::map< const std::string, double > ParamSet;  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:977,depend,depends,977,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['depend'],['depends']
Integrability,"erence. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1045,interface,interface,1045,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['interface'],['interface']
Integrability,"erenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. THashList*fFileListList of files already uploaded; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfInterruptflag interrupt state; TStringfLogFilePathFull remote path to log file; TMonitor*fMonitormonitor for the input socket; TStringfNameUnique name identifying this instance; Int_tfProtocolserver protocol version number; TObject*fReceivedObjectlast received object; TSeqCollection*fRootFileslist of (remote) root files; TSocket*fSocketsocket connection to server; TUrlfUrlserver's url; TRemoteObject*fWorkingDirworking (remote) directory; static Int_tfgPortAttemptsnumber of attempts to find a port; static Int_tfgPortLowerlower bound for ports; static Int_tfgPortUpperupper bound for ports. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0); Main constructor: start a remote session at 'url' accepting callbacks; on local port 'port'; if port is already in use scan up to 'scan - 1'; ports starting from port + 1, i.e. port + 1, ... , port + scan - 1. ~TApplicationRemote(); Destructor. Int_t Broadcast(const TMessage& mess); Broadcast a message to the remote session.; Returns 0 on success, -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Broadcast a cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:12945,protocol,protocol,12945,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,7,['protocol'],['protocol']
Integrability,"eres”. Output of nt->Draw(“x:y:z”) and nt->Draw(“u:v:w”) after applying the selection. Another technique has been implemented in order to show clusters when the picture is cluttered. A weight is assigned to each event. The weight value is computed as: \[; weight = \sum_{i=1}^{n} b_i; \]; Where:. bi is the content of bin crossed by the event on the i-th axis.; n is the number of axis. The events having the bigger weights are those belonging to clusters. It is possible to paint only the events having a weight above a given value and the clusters appear. The next example “weight cut” applied on the right plot is 50. Only the events with a weight greater than 50 are displayed. Applying a “weight cut” makes the clusters visible. In case only a few events are displayed, drawing them as smooth curves instead of straight lines helps to differentiate them. Zoom on a Parallel Coordinates plot detail: curves differentiate better events. Interactivity and therefore the Graphical User Interface are very important to manipulate the Parallel Coordinates plots. The ROOT framework allows to easily implement the direct interactions on the graphical area and the graphical editor facility provides dedicated GUI. Parallel Coordinates graphical editors. Transparency is very useful with parallel coordinates plots. It allows to show clearly the clusters. . Parallel Coordinates with transparency. 12.20.8.3 Box (Candle) Plots; ; A Box Plot (also known as a “box-and whisker” plot or “candle stick” plot) is a convenient way to describe graphically a data distribution (D) with only the five numbers. It was invented in 1977 by John Tukey. The five numbers are:. The minimum value of the distribution D (Min).; The lower quartile (Q1): 25% of the data points in D are less than Q1.; The median (M): 50% of the data points in D are less than M.; The upper quartile (Q3): 75% of the data points in D are less than Q3.; The maximum value of the distribution D (Max). A box plot describes a distribution wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:617408,Interface,Interface,617408,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Interface'],['Interface']
Integrability,"erface for Tree Index.Definition TVirtualIndex.h:30; TVirtualIndex::GetMajorNamevirtual const char * GetMajorName() const =0; TVirtualIndex::GetEntryNumberWithIndexvirtual Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor) const =0; TVirtualIndex::GetEntryNumberFriendvirtual Long64_t GetEntryNumberFriend(const TTree *)=0; TVirtualIndex::Appendvirtual void Append(const TVirtualIndex *, bool delaySort=false)=0; TVirtualIndex::GetMinorNamevirtual const char * GetMinorName() const =0; TVirtualIndex::SetTreevirtual void SetTree(TTree *T)=0; TVirtualIndex::GetNvirtual Long64_t GetN() const =0; TVirtualIndex::IsValidForvirtual bool IsValidFor(const TTree *parent)=0; TVirtualIndex::GetEntryNumberWithBestIndexvirtual Long64_t GetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const =0; TVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing.Definition TVirtualPerfStats.h:32; TVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan,...Definition TVirtualTreePlayer.h:38; TVirtualTreePlayer::Scanvirtual Long64_t Scan(const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0; TVirtualTreePlayer::UpdateFormulaLeavesvirtual void UpdateFormulaLeaves()=0; TVirtualTreePlayer::DrawSelectvirtual Long64_t DrawSelect(const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0; TVirtualTreePlayer::MakeCodevirtual Int_t MakeCode(const char *filename)=0; TVirtualTreePlayer::UnbinnedFitvirtual Int_t UnbinnedFit(const char *formula, const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0; TVirtualTreePlayer::GetEntriesvirtual Long64_t GetEntries(const char *)=0; TVirtualTreePlayer::MakeProxyvirtual Int_t MakeProxy(const char *classname, const char *macrofilename=nullptr, const char *cutfilename=nullptr, const char *option=nullptr, Int_t maxUnro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:469567,interface,interface,469567,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['interface'],['interface']
Integrability,"erface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. Bool_t ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. Bool_t ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. Bool_t ClassInfo_IsEnum(const char* name) const; Interface to CINT function. Bool_t ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:37593,Interface,Interface,37593,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. Long64_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. Bool_t CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:35255,Interface,Interface,35255,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:40833,Interface,Interface,40833,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long64_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. Bool_t CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:34233,Interface,Interface,34233,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:33390,Interface,Interface,33390,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* marginfo) const. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. Bool_t TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. Bool_t TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Next(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMeth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:44671,Interface,Interface,44671,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. Bool_t ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. Bool_t ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. Bool_t ClassInfo_IsEnum(const char* name) const; Interface to CINT function. Bool_t ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. Bool_t ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:36626,Interface,Interface,36626,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"erface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:35779,Interface,Interface,35779,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"erial will be review. However, much of this chapter covers aspects of collections specific to the ROOT system. When you have read this chapter, you will know. How to create instances of collections; The difference between lists, arrays, hash tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection to access collection elements; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables. 16.1 Understanding Collections; A collection is a group of related objects. You will find it easier to manage a large number of items as a collection. For example, a diagram editor might manage a collection of points and lines. A set of widgets for a graphical user interface can be placed in a collection. A geometrical model can be described by collections of shapes, materials and rotation matrices. Collections can themselves be placed in collections. Collections act as flexible alternatives to traditional data structures of computers science such as arrays, lists and trees.; 16.1.1 General Characteristics; The ROOT collections are polymorphic containers that hold pointers to TObjects, so:. They can only hold objects that inherit from TObject; They return pointers to TObjects, that have to be cast back to the correct subclass. Collections are dynamic; they can grow in size as required. Collections themselves are descendants of TObject so can themselves be held in collections. It is possible to nest one type of collection inside another to any level to produce structures of arbitrary complexity.; Collections do not own the objects they hold for the very good reason that the same object could be a member of more than one collection. Object ownership",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:840175,interface,interface,840175,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"erial::EGeoMaterialState state, Double_t temperature = STP_temperature, Double_t pressure = STP_pressure); Constructor with state, temperature and pressure. TGeoMaterial(const char* name, TGeoElement* elem, Double_t rho); constructor. TGeoMaterial(const TGeoMaterial& ); copy constructor. TGeoMaterial& operator=(const TGeoMaterial& ); assignment operator. ~TGeoMaterial(); Destructor. void SetUserExtension(TGeoExtension* ext); Connect user-defined extension to the material. The material ""grabs"" a copy, so; the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for user extensions and is guaranteed not; to be used by TGeo. void SetFWExtension(TGeoExtension* ext); Connect framework defined extension to the material. The material ""grabs"" a copy,; so the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for the use by TGeo and the users should; NOT connect extensions using this method. TGeoExtension * GrabUserExtension() const; Get a copy of the user extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). char * GetPointerName() const; Provide a pointer name containing uid. void SetRadLen(Double_t radlen, Double_t intlen = 0.); Set radiation/absorbtion lengths. If the values are negative, their absolute value; is taken, otherwise radlen is recomputed using G3 formula. Double_t Coulomb(Double_t z); static function; Compute Coulomb correction for pair production and Brem; REFERENCE : EGS MANUAL SLAC 210 - UC32 - JUNE 78; FORMULA 2.7.17. Bool_t IsEq(const TGeoMaterial* other) const; return tru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMaterial.html:10333,interface,interface,10333,root/html534/TGeoMaterial.html,https://root.cern,https://root.cern/root/html534/TGeoMaterial.html,6,['interface'],['interface']
Integrability,"ericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7ef8390 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[psi]_NORM_psi for nset (psi) with code 0; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7f39580 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x80caf20 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7f337a0 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(Mf_over_Mf_Int[cpsi]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_Mf_over_Mf_Int[cpsi]_MfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x7e9d680 with pdf T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf210__angularconv_8py.html:6314,integrat,integrator,6314,doc/master/rf210__angularconv_8py.html,https://root.cern,https://root.cern/doc/master/rf210__angularconv_8py.html,1,['integrat'],['integrator']
Integrability,"erical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:10603,wrap,wrapper,10603,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['wrap'],['wrapper']
Integrability,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:17956,interface,interface,17956,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['interface'],['interface']
Integrability,"eriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster ; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:19865,message,messages,19865,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,2,['message'],['messages']
Integrability,"eriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:20612,message,messages,20612,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,4,['message'],['messages']
Integrability,"eriments and users need for data taking and analysis).; Thanks for the interesting discussion! I have learned quite a bit about ROOT plans and it all seems very promising. Cheers!. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . Dependency on Python . In my experience, getting python scripts to work is a very unreliable affair. They almost always have dependencies on external packages and if you don't have EXACTLY the same version of python you only have about a 50% chance that anything you use will work. The language is simply not stable. C++ is bad enough. Scripting languages are much, much worse. The maintainers think the language is their playtoy and they take no responsibility to maintain backward compatibility from release to release. Python is just a Bad Idea(tm). Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT need to be communitized, that's the whole problem . Indeed, for decade, Cint never made it to open-source because of ROOT dependencies and backward compatiblities. Now that I am seeing this arguement is no more, and we are going to dig up some old grave.. I don't see why Cint shouldn't be taking over by open source or boost. I don't see how we are going to leverage on Clang/Cling at all... all I am seeing is regression session will be made at a far higher degree. I ""plussoie"" Renee's point, mixing technologies is a very , veRY, VERY bad idea. Mostly because Python isn't an ISO standard like many others langage. We should stick to C++ ISO and that's all we need. Adding few more features in Cint isn't a big deal. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT and Open Source . Hi Daniel,; Thank you for your comment! As a matter of fact, CINT does not depend on ROOT at all. It is open source. It was used in commercial products independently of ROOT. I also don't see where the connection between cling and a python dependence comes in?; Given the amount of work",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:19474,depend,dependencies,19474,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['depend'],['dependencies']
Integrability,"eriorstyle + styleindex. void SetLineColor(Color_t cindex); Sets color index ""cindex"" for drawing lines. void SetLineType(Int_t n, Int_t* dash); Sets the line type. n - length of the dash list; n <= 0 use solid lines; n > 0 use dashed lines described by dash(n); e.g. n = 4,dash = (6,3,1,3) gives a dashed-dotted line; with dash length 6 and a gap of 7 between dashes; dash(n) - dash segment lengths. void SetLineStyle(Style_t linestyle); Sets the line style. linestyle <= 1 solid; linestyle = 2 dashed; linestyle = 3 dotted; linestyle = 4 dashed-dotted. void SetLineWidth(Width_t width); Sets the line width. width - the line width in pixels. void SetMarkerColor(Color_t cindex); Sets color index ""cindex"" for markers. void SetMarkerSize(Float_t markersize); Sets marker size index. markersize - the marker scale factor. void SetMarkerStyle(Style_t markerstyle); Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:31722,rout,routine,31722,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,10,['rout'],['routine']
Integrability,"erited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void CreateJavascript () const;  Write the default ROOT style sheet. ;  ; void CreateListOfClasses (const char *filter);  Create the list of all known classes. ;  ; void CreateListOfTypes ();  Create index of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:34991,depend,depending,34991,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,['depend'],['depending']
Integrability,"erited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void ApproximatePosterior () const;  approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ;  ; void ClearAll () const;  clear all cached pdf objects ;  ; void ComputeIntervalFromApproxPosterior (double c1, double c2) const;  compute the interval using the approximate posterior function ;  ; void ComputeIntervalFromCdf (double c1, double c2) const;  internal function compute the interval using Cdf integration ;  ; void ComputeIntervalUsingRooFit (double c1, double c2) const;  internal function compute the interval using RooFit ;  ; void ComputeShortestInterval () const;  compute the shortest interval from the histogram representing the posterior ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TF1 * fApproxPosterior;  TF1 representing the scanned posterior function. ;  ; double fBrfPrecision;  root finder precision ;  ; RooArgSet fConditionalObs;  conditional observables ;  ; RooAbsData * fData;  data set ;  ; RooArgSet fGlobalObs;  global observables ;  ; RooAbsReal * fIntegratedLikelihood;  integrated likelihood function, i.e - unnormalized posterior function ;  ; TString fIntegrationType;  ; double fLeftSideFraction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:17262,integrat,integrating,17262,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,2,['integrat'],"['integrating', 'integration']"
Integrability,"erivative(const double* x, const double* p, unsigned int ipar) const. Data Members; private:. unsigned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions ; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. {}. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__WrappedMultiTF1.html:2531,interface,interface,2531,root/html530/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__WrappedMultiTF1.html,3,['interface'],['interface']
Integrability,"ermNSet, const RooArgSet& termISet, Bool_t& isOwned, Bool_t forceWrap = kFALSE) const; Calculate integrals of factorized product terms over observables iset while normalized; to observables in nset. const char* makeRGPPName(const char* pfx, const RooArgSet& term, const RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; Make an appropriate automatic name for a RooGenProdProj object in getPartIntList(). Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all observables for internal integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooProdPdf implements two strategies in implementing analytical integrals. First, PDF components whose entire set of dependents are requested to be integrated; can be dropped from the product, as they will integrate out to 1 by construction. Second, RooProdPdf queries each remaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() const; If this product contains exactly one extendable p.d.f return the extension abilities of; that p.d.f, otherwise return CanNotBeExtended. Double_t expectedEvents(const RooArgSet* nset) const; Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:52014,depend,dependents,52014,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,30,"['depend', 'integrat']","['dependents', 'integrate', 'integrated']"
Integrability,"ermNSet, const RooArgSet& termISet, Bool_t& isOwned, Bool_t forceWrap = kFALSE) const; Calculate integrals of factorized product terms over observables iset while normalized; to observables in nset. const char* makeRGPPName(const char* pfx, const RooArgSet& term, const RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; Make an appropriate automatic name for a RooGenProdProj object in getPartIntList(). Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all observables for internal integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooProdPdf implements two strategies in implementing analytical integrals. First, PDF components whose entire set of dependents are requested to be integrated; can be dropped from the product, as they will integrate out to 1 by construction. Second, RooProdPdf queries each remaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() const; If this product contains exactly one extendable p.d.f return the extension abilities of; that p.d.f, otherwise return CanNotBeExtended. Double_t expectedEvents(const RooArgSet* nset); Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:49965,depend,dependents,49965,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,3,"['depend', 'integrat']","['dependents', 'integrate', 'integrated']"
Integrability,"ermann and G. Derflinger (1990):; The ACR Method for generating normal random variables,; OR Spektrum 12 (1990), 181-185. Implementation taken from; UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien. UInt_t Integer(UInt_t imax); returns a random integer on [ 0, imax-1 ]. Double_t Landau(Double_t mean = 0, Double_t sigma = 1); Generate a random number following a Landau distribution; with mpv(most probable value) and sigma; Use function landau_quantile(x,sigma) which provides; the inverse of the landau cumulative distribution; landau_quantile has been converted from CERNLIB ranlan(G110). Int_t Poisson(Double_t mean); Generates a random integer N according to a Poisson law.; Prob(N) = exp(-mean)*mean^N/Factorial(N). Use a different procedure according to the mean value.; The algorithm is the same used by CLHEP; For lower value (mean < 25) use the rejection method based on; the exponential; For higher values use a rejection method comparing with a Lorentzian; distribution, as suggested by several authors; This routine since is returning 32 bits integer will not work for values larger than 2*10**9; One should then use the Trandom::PoissonD for such large values. Double_t PoissonD(Double_t mean); Generates a random number according to a Poisson law.; Prob(N) = exp(-mean)*mean^N/Factorial(N). This function is a variant of TRandom::Poisson returning a double; instead of an integer. void Rannor(Float_t& a, Float_t& b); Return 2 numbers distributed following a gaussian with mean=0 and sigma=1. void Rannor(Double_t& a, Double_t& b); Return 2 numbers distributed following a gaussian with mean=0 and sigma=1. void ReadRandom(const char* filename). Reads saved random generator status from filename. Double_t Rndm(Int_t i = 0); Machine independent random number generator.; Based on the BSD Unix (Rand) Linear congrential generator; Produces uniformly-distributed floating points between 0 and 1.; Identical sequence on all machines of >= 32 bits.; Periodicity = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:13709,rout,routine,13709,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,4,['rout'],['routine']
Integrability,"ermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:102780,interface,interface,102780,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['interface'],['interface']
Integrability,"ernSelect ; (; ). inlineoverride . Definition at line 129 of file TGedPatternSelect.h. Member Function Documentation. ◆ DoRedraw(). void TGedPatternSelect::DoRedraw ; (; ). overrideprotectedvirtual . Draw selected pattern as current one. ; Reimplemented from TGCheckButton.; Definition at line 655 of file TGedPatternSelect.cxx. ◆ GetDefaultSize(). TGDimension TGedPatternSelect::GetDefaultSize ; (; ); const. inlineoverridevirtual . default size ; Reimplemented from TGCheckButton.; Definition at line 133 of file TGedPatternSelect.h. ◆ GetPattern(). Style_t TGedPatternSelect::GetPattern ; (; ); const. inline . Definition at line 132 of file TGedPatternSelect.h. ◆ PatternSelected(). virtual void TGedPatternSelect::PatternSelected ; (; Style_t ; pattern = 0). inlinevirtual . Definition at line 134 of file TGedPatternSelect.h. ◆ ProcessMessage(). Bool_t TGedPatternSelect::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process message according to the user input. ; Reimplemented from TGFrame.; Definition at line 640 of file TGedPatternSelect.cxx. ◆ SavePrimitive(). void TGedPatternSelect::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save the pattern select widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCheckButton.; Definition at line 725 of file TGedPatternSelect.cxx. ◆ SetPattern(). void TGedPatternSelect::SetPattern ; (; Style_t ; pattern, . Bool_t ; emit = kTRUE . ). Set pattern. ; Definition at line 714 of file TGedPatternSelect.cxx. Member Data Documentation. ◆ fPattern. Style_t TGedPatternSelect::fPattern. protected . Definition at line 123 of file TGedPatternSelect.h. Libraries for TGedPatternSelect:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TGedPatternSelect.h; gui/ged/src/TGedPatternSelect.cxx. TGedPatternSelect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) usi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedPatternSelect.html:39272,message,message,39272,doc/master/classTGedPatternSelect.html,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html,1,['message'],['message']
Integrability,"ernal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; UChar_t*fTringCols[3*fNTrings]; Float_t*fTringNorms[3*fNTrings]; Int_t*fTrings[3*fNTrings]; void*TEveElement::fUserData! Externally assigned and controlled user data.; Float_t*fVerts[3*fNVerts]; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTriangleSet(Int_t nv, Int_t nt, Bool_t norms = kFALSE, Bool_t cols = kFALSE); Constructor. ~TEveTriangleSet(); Destructor. void GenerateTriangleNormals(); Generate triangle normals via cross product of triangle edges. void GenerateRandomColors(); Assign random colors to all triangles. void GenerateZNormalColors(Float_t fac = 20, Int_t min = -20, Int_t max = 20, Bool_t interp = kFALSE, Bool_t wrap = kFALSE); Generate triangle colors by the z-component of the normal.; Current palette is taken from gStyle. void ComputeBBox(); Compute bounding box.; Virtual from TAttBBox. void Paint(Option_t* option = """"); Paint this object. Only direct rendering is supported. TEveTriangleSet* ReadTrivialFile(const char* file); Read a simple ascii input file describing vertices and triangles. TEveTriangleSet(const TEveTriangleSet& ). TEveTriangleSet& operator=(const TEveTriangleSet& ). Bool_t CanEditMainTransparency() const; { return kTRUE; }. Int_t GetNVerts() const; { return fNVerts; }. Int_t GetNTrings() const; { return fNTrings; }. Float_t* Vertex(Int_t i); { return &(fVerts[3*i]); }. Int_t* Triangle(Int_t i); { return &(fTrings[3*i]); }. Float_t* TriangleNormal(Int_t i); { return &(fTringNorms[3*i]); }. UChar_t* TriangleColor(Int_t i); { return &(fTringCols[3*i]); }. void SetVertex(Int_t i, Float_t x, Float_t y, Float_t z); { Float_t* v = Vertex(i); v[0] = x; v[1] = y; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTriangleSet.html:21231,wrap,wrap,21231,root/html528/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html528/TEveTriangleSet.html,6,['wrap'],['wrap']
Integrability,"ernal values. ; calculates the transformation factor between external and internal parameter values. this factor is one for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:49561,rout,routine,49561,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['rout'],['routine']
Integrability,"ernally, randomly, and by accept/reject sampling; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Sat Sep 5 17:29:32 2015 » Last generated: 2015-09-05 17:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooGenContext.html:12005,message,messages,12005,root/html604/RooGenContext.html,https://root.cern,https://root.cern/root/html604/RooGenContext.html,4,"['interface', 'message']","['interface', 'messages']"
Integrability,"err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:136940,depend,depends,136940,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['depend'],['depends']
Integrability,"erridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ClearAll ();  ; void CreateMVAHistorgrams ();  ; MethodBase * CurrentMethod ();  ; UInt_t CurrentMethodIdx ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:27740,rout,routine,27740,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['rout'],['routine']
Integrability,"erridden to always include all components (either with RooAbsReal::globalSelectComp(bool) or a RooAbsReal::GlobalSelectComponentRAII), then any created integral will ignore component selections during its lifetime. This is especially useful when creating normalization or projection integrals. ; Definition at line 300 of file RooRealIntegral.cxx. ◆ RooRealIntegral() [3/3]. RooRealIntegral::RooRealIntegral ; (; const RooRealIntegral & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 710 of file RooRealIntegral.cxx. ◆ ~RooRealIntegral(). RooRealIntegral::~RooRealIntegral ; (; ). override . Definition at line 739 of file RooRealIntegral.cxx. Member Function Documentation. ◆ actualFuncNormSet(). RooArgSet const * RooRealIntegral::actualFuncNormSet ; (; ); const. inlineprotected . Definition at line 112 of file RooRealIntegral.h. ◆ addNumIntDep(). void RooRealIntegral::addNumIntDep ; (; RooAbsArg const & ; arg). private . Sort numeric integration variables in summation and integration lists. ; To be used during construction. ; Definition at line 1186 of file RooRealIntegral.cxx. ◆ anaIntVars(). const RooArgSet & RooRealIntegral::anaIntVars ; (; ); const. inline . Definition at line 49 of file RooRealIntegral.h. ◆ autoSelectDirtyMode(). void RooRealIntegral::autoSelectDirtyMode ; (; ). protected . Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ; Definition at line 633 of file RooRealIntegral.cxx. ◆ Class(). static TClass * RooRealIntegral::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealIntegral::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealIntegral::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 150 of file RooRealIntegral.h. ◆ clone(). TObject * RooRealIntegral::clone ; (; const char * ; newname); const. inlineoverr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:65817,integrat,integration,65817,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,2,['integrat'],['integration']
Integrability,"erride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNovosibirsk.html:39829,integrat,integrator,39829,root/html532/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html532/RooNovosibirsk.html,2,['integrat'],['integrator']
Integrability,"erride;  ;  Protected Member Functions inherited from RooAbsCachedPdf; virtual const char * binningName () const;  ; std::string cacheNameSuffix (const RooArgSet &nset) const;  Construct string with unique suffix for cache objects based on observable names that define cache configuration. ;  ; virtual PdfCacheElem * createCache (const RooArgSet *nset) const;  ; void disableCache (bool flag);  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; PdfCacheElem * getCache (const RooArgSet *nset, bool recalculate=true) const;  Retrieve cache object associated with given choice of observables. ;  ; virtual TString histNameSuffix () const;  ; virtual RooAbsArg & pdfObservable (RooAbsArg &histObservable) const;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:62558,rout,routine,62558,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['rout'],['routine']
Integrability,"errideChange the name of this TEventList.Definition TEventList.cxx:367; TIterDefinition TCollection.h:235; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347. treetreesrcTEventList.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEventList_8cxx_source.html:21785,message,message,21785,doc/master/TEventList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEventList_8cxx_source.html,1,['message'],['message']
Integrability,"errideFind the tree which contains entry, and set it as the current tree.Definition TChain.cxx:1324; TChain::GetEntriesLong64_t GetEntries() const overrideReturn the total number of entries in the chain.Definition TChain.cxx:978; TChain::GetEntryInt_t GetEntry(Long64_t entry=0, Int_t getall=0) overrideGet entry from the file to memory.Definition TChain.cxx:1002; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TEntryList::GetNvirtual Long64_t GetN() constDefinition TEntryList.h:78; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; int; When using the TEntryList interface directly, you can get the 'tree number' and entry in the current tree (i.e. value similar to the return value of LoadTree) from calling TEntryList::GetEntryAndTree: Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; TEntryList::GetEntryAndTreevirtual Long64_t GetEntryAndTree(Long64_t index, Int_t &treenum)Return the index of ""index""-th non-zero entry in the TTree or TChain and the # of the corresponding t...Definition TEntryList.cxx:835; to obtain the entry number within the chain you need to add to it the value of treeEntry+ch->GetTreeOffset()[treenum] such that the loop in the previous example can also be written as: for (Long64_t el = 0; el < listEntries; el++) {; Long64_t treeEntry = myelist->GetEntryAndTree(el,treenum);; Long64_t chainEntry = treeEntry+ch->GetTreeOffset()[treenum];; printf(""el=%lld, treeEntry=%lld, chainEntry=%lld, treenum=%d\n"", el, treeEntry, chainEntry, treenum);; ; ch->LoadTree(chainEntry); // this also returns treeEntry; needed_branch->GetEntry(treeEntry);; }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList.html:4104,interface,interface,4104,doc/master/classTEntryList.html,https://root.cern,https://root.cern/doc/master/classTEntryList.html,1,['interface'],['interface']
Integrability,"errideprotectedvirtual . Compute multiple values of Polynomial. ; Reimplemented from RooAbsReal.; Definition at line 160 of file RooPolyVar.cxx. ◆ doEvalImpl(). void RooPolyVar::doEvalImpl ; (; RooAbsArg const * ; caller, . RooFit::EvalContext & ; ctx, . RooAbsReal const & ; x, . RooArgList const & ; coefs, . int ; lowestOrder . ). staticprivate . Definition at line 126 of file RooPolyVar.cxx. ◆ evaluate(). double RooPolyVar::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return value of polynomial. ; Implements RooAbsReal.; Definition at line 104 of file RooPolyVar.cxx. ◆ fillCoeffValues(). void RooPolyVar::fillCoeffValues ; (; std::vector< double > & ; wksp, . RooListProxy const & ; coefList . ). staticprivate . Definition at line 88 of file RooPolyVar.cxx. ◆ getAnalyticalIntegral(). Int_t RooPolyVar::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertise that we can internally integrate over x. ; Reimplemented from RooAbsReal.; Definition at line 168 of file RooPolyVar.cxx. ◆ IsA(). TClass * RooPolyVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 62 of file RooPolyVar.h. ◆ Streamer(). void RooPolyVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooPolyVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooPolyVar.h. ◆ translate(). void RooPolyVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:64332,integrat,integrate,64332,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['integrat'],['integrate']
Integrability,"erridevirtual . Implements RooAbsArg.; Definition at line 34 of file RooRealMPFE.h. ◆ constOptimizeTestStatistic(). void RooRealMPFE::constOptimizeTestStatistic ; (; ConstOpCode ; opcode, . bool ; doAlsoTracking = true . ). overrideprotectedvirtual . Intercept call to optimize constant term in test statistics and forward it to object on server side. ; Reimplemented from RooAbsArg.; Definition at line 681 of file RooRealMPFE.cxx. ◆ doApplyNLLW2(). void RooRealMPFE::doApplyNLLW2 ; (; bool ; flag). protected . Definition at line 741 of file RooRealMPFE.cxx. ◆ enableOffsetting(). void RooRealMPFE::enableOffsetting ; (; bool ; flag). overridevirtual . Control verbose messaging related to inter process communication on both client and server side. ; Reimplemented from RooAbsReal.; Definition at line 754 of file RooRealMPFE.cxx. ◆ evaluate(). double RooRealMPFE::evaluate ; (; ); const. overrideprotectedvirtual . Send message to server process to retrieve output value If error were logged use logEvalError() on remote side transfer those errors to the local eval error queue. ; Implements RooAbsReal.; Definition at line 558 of file RooRealMPFE.cxx. ◆ followAsSlave(). void RooRealMPFE::followAsSlave ; (; RooRealMPFE & ; master). inline . Definition at line 47 of file RooRealMPFE.h. ◆ getCarry(). double RooRealMPFE::getCarry ; (; ); const. protectedvirtual . Definition at line 185 of file RooRealMPFE.cxx. ◆ getValV(). double RooRealMPFE::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . If value needs recalculation and calculation has not been started with a call to calculate() start it now. ; This function blocks until remote process has finished calculation and returns remote value ; Reimplemented from RooAbsReal.; Definition at line 530 of file RooRealMPFE.cxx. ◆ initialize(). void RooRealMPFE::initialize ; (; ). protected . Initialize the remote process and message passing pipes between current process and remote process. ; Definition at line 200 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:66264,message,message,66264,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,1,['message'],['message']
Integrability,"erridevirtual . Reset the message buffer so we can use (i.e. fill) it again. ; Reimplemented from TBufferIO.; Definition at line 179 of file TMessage.cxx. ◆ Reset() [2/2]. void TMessage::Reset ; (; UInt_t ; what). inline . Definition at line 74 of file TMessage.h. ◆ SetCompressionAlgorithm(). void TMessage::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). Set compression algorithm. ; Definition at line 242 of file TMessage.cxx. ◆ SetCompressionLevel(). void TMessage::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). Set compression level. ; Definition at line 264 of file TMessage.cxx. ◆ SetCompressionSettings(). void TMessage::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). Set compression settings. ; Definition at line 288 of file TMessage.cxx. ◆ SetLength(). void TMessage::SetLength ; (; ); const. protected . Set the message length at the beginning of the message buffer. ; This method is only called by TSocket::Send(). ; Definition at line 202 of file TMessage.cxx. ◆ SetWhat(). void TMessage::SetWhat ; (; UInt_t ; what). Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ; This makes the sending process synchronous. ; Definition at line 222 of file TMessage.cxx. ◆ Streamer(). void TMessage::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBufferFile. ◆ StreamerNVirtual(). void TMessage::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file TMessage.h. ◆ TagStreamerInfo(). void TMessage::TagStreamerInfo ; (; TVirtualStreamerInfo * ; info). overridevirtual . Remember that the StreamerInfo is being used in writing. ; When support for schema evolution is enabled the list of TStreamerInfo used to stream th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:45511,message,message,45511,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,2,['message'],['message']
Integrability,"erridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 162 of file RooMomentMorphFuncND.h. ◆ setBinIntegrator(). bool RooMomentMorphFuncND::setBinIntegrator ; (; RooArgSet & ; allVars). Definition at line 795 of file RooMomentMorphFuncND.cxx. ◆ setMode(). void RooMomentMorphFuncND::setMode ; (; const Setting & ; setting). inline . Definition at line 110 of file RooMomentMorphFuncND.h. ◆ setPdfMode(). void RooMomentMorphFuncND::setPdfMode ; (; bool ; flag = true). inline . Setting flag makes this RooMomentMorphFuncND instance behave like the former RooMomentMorphND class, with the the only difference being the base class. ; If you want to create a pdf object that behaves exactly like the old RooMomentMorphND, you can do it as follows:; ++; RooMomentMorphFuncND func{<c'tor args you previously passed to RooMomentMorphFunc>};; ; func.setPdfMode(); // change behavior to be exactly like the former RooMomentMorphND; ; // Pass the selfNormalized=true` flag to the wrapper because the; RooMomentMorphFuncND already normalizes itself in pdf mode.; RooWrapperPdf pdf{""pdf_name"", ""pdf_name"", func, /*selfNormalized=*&zwj;/true};; c#define c(i)Definition RSha256.hxx:101; RooMomentMorphFuncNDDefinition RooMomentMorphFuncND.h:33. Definition at line 125 of file RooMomentMorphFuncND.h. ◆ sij(). int RooMomentMorphFuncND::sij ; (; const int & ; i, . const int & ; j . ); const. inlineprotected . Definition at line 160 of file RooMomentMorphFuncND.h. ◆ Streamer(). void RooMomentMorphFuncND::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooMomentMorphFuncND::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 162 of file RooMomentMorphFuncND.h. ◆ sumFunc(). RooMomentMorphFuncND::Base_t * RooMomentMorphFuncND::sumFunc ; (; const RooArgSet * ; nset). protected . Definition at line 522 of file RooMomentM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFuncND.html:66466,wrap,wrapper,66466,doc/master/classRooMomentMorphFuncND.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFuncND.html,1,['wrap'],['wrapper']
Integrability,"error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrack.html:10079,message,message,10079,doc/master/classTGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTGeoTrack.html,1,['message'],['message']
Integrability,"error messages are printed...Definition RooAbsCollection.cxx:999; RooAbsReal::defaultIntegratorConfigstatic RooNumIntConfig * defaultIntegratorConfig()Returns the default numeric integration configuration for all RooAbsReals.Definition RooAbsReal.cxx:3272; RooCategory::setLabelbool setLabel(const char *label, bool printError=true) overrideSet value by specifying the name of the desired state.Definition RooCategory.cxx:186; RooLandauLandau distribution p.d.f.Definition RooLandau.h:24; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::addStreamInt_t addStream(RooFit::MsgLevel level, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Add a message logging stream for message with given RooFit::MsgLevel or higher.Definition RooMsgService.cxx:177; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooNumIntConfig::Printvoid Print(Option_t *options=nullptr) const overrideThis method must be overridden when a class wants to print itself.Definition RooNumIntConfig.h:70; RooNumIntConfig::setEpsRelvoid setEpsRel(double newEpsRel)Set relative convergence criteria (convergence if std::abs(Err)/abs(Int)<newEpsRel)Definition RooNumIntConfig.cxx:260; RooNumIntConfig::getConfigSectionconst RooArgSet & getConfigSection(const char *name) constRetrieve configuration information specific to integrator with given name.Definition RooNumIntConfig.cxx:214; RooNumIntConfig::method1DRooCategory & method1D()Definition RooNumIntConfig.h:34; RooNumIntConfig::setEpsAbsvoid setEpsAbs(double newEpsAbs)Set absolute convergence criteria (convergence if std::abs(Err)<newEpsAbs)Definition RooNumIntConfig.cxx:230; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; xDouble_t x[n]Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:6565,integrat,integrators,6565,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,1,['integrat'],['integrators']
Integrability,"error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; 34 Profile histograms are in many cases an; 35 elegant replacement of two-dimensional histograms. The inter-relation of two; 36 measured quantities X and Y can always be visualized by a two-dimensional; 37 histogram or scatter plot, but if Y is an unknown (but single-valued); 38 approximate function of X, this function is displayed by a profile histogram with; 39 much better precision than by a scatter plot.; 40 ; 41 The following formulae show the cumulated contents (capital letters) and the values; 42 displayed by the printing or plotting routines (small letters) of the elements for bin j.; 43 \f[; 44 \begin{align}; 45 H(j) &= \sum w \cdot Y \\; 46 E(j) &= \sum w \cdot Y^2 \\; 47 W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; 48 h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; 49 s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; 50 e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; 51 \end{align}; 52 \f]; 53 The bin content is always the mean of the Y values, but errors change depending on options:; 54 \f[; 55 \begin{align}; 56 \text{GetBinContent}(j) &= h(j) \\; 57 \text{GetBinError}(j) &=; 58 \begin{cases}; 59 e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; 60 s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; 61 \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 62 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; 63 \end{cases}; 64 \end{align}; 65 \f]; 66 In the special case where s(j) is zero (eg, case of 1 entry only in one bin); 67 the bin error e(j) is computed from the average of the s(j) for all bins if; 68 the static function TProfile::Approximate() has been called.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:2329,depend,depending,2329,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['depend'],['depending']
Integrability,"ers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". void SetHiddenLayer(TString hiddenlayer = """"); { fHiddenLayer=hiddenlayer; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodTMlpANN.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-02 00:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:18910,message,message,18910,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,1,['message'],['message']
Integrability,"ers by calling these static functions before fitting (before calling `TH1::Fit`):; 3984/// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; 3985/// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; 3986/// The current defaults are (""Minuit"",""Migrad"").; 3987/// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; 3988/// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; 3989/// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; 3990/// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; 3991///; 3992/// Other options are possible depending on the Minimizer used, see the corresponding documentation.; 3993/// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; 3994///; 3995/// ~~~ {.cpp}; 3996/// Root.Fitter: Minuit2; 3997/// ~~~; 3998///; 3999/// \anchor HFitChi2; 4000/// ### Chi-square Fits; 4001///; 4002/// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; 4003/// is used where the residual for each bin is computed using as error the observed value (the bin error) returned by `TH1::GetBinError`; 4004///; 4005/// \f[; 4006/// Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; 4007/// \f]; 4008///; 4009/// where `y(i)` is the bin content for each bin `i`, `x(i)` is the bin center and `e(i)` is the bin error (`sqrt(y(i)` for; 4010/// an un-weighted histogram). Bins with zero errors are excluded from the fit. See also l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:161745,depend,depending,161745,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['depend'],['depending']
Integrability,"ers is of course defined by the user,; who uses the values of those parameters to calculate his function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FCNBase.html:2821,interface,interface,2821,root/html534/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FCNBase.html,2,['interface'],['interface']
Integrability,"ers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); THashTableIter(const THashTableIter& iter); THashTableIter(const THashTable* ht, Bool_t dir = kIterForward). private:. Int_tNextSlot(); THashTableIter(). Data Members; private:. Int_tfCursorcurrent position in table; Bool_tfDirectioniteration direction; TListIter*fListCursorcurrent position in collision list; const THashTable*fTablehash table being iterated. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTableIter(const THashTable* ht, Bool_t dir = kIterForward); Create a hashtable iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. THashTableIter(const THashTableIter& iter); Copy ctor. TIterator & operator=(const TIterator& rhs); Overridden assignment operator. THashTableIter & operator=(const THashTableIter& rhs); Overloaded assignment operator. ~THashTableIter(); Delete hashtable iterator. TObject * Next(); Return next object in hashtable. Returns 0 when no more objects in table. Int_t NextSlot(); Returns index of next slot in table containing list to be iterated. void Reset(); Reset the hashtable iterator. Either to beginning or end, depending on; the initial iteration direction. Bool_t operator!=(const TIterator& aIter) const; This operator compares two TIterator objects. Bool_t operator!=(const THashTableIter& aIter) const; This operator compares two THashTableIter objects. TObject * operator*() const; Return pointer to current object or nullptr. THashTableIter(); { }. const TCollection * GetCollection() const; { return fTable; }. » Author: Fons Rademakers 27/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 16:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THashTableIter.html:2235,depend,depending,2235,root/html604/THashTableIter.html,https://root.cern,https://root.cern/root/html604/THashTableIter.html,2,['depend'],['depending']
Integrability,"ers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); THashTableIter(const THashTableIter& iter); THashTableIter(const THashTable* ht, Bool_t dir = kIterForward). private:. Int_tNextSlot(); THashTableIter(). Data Members; private:. Int_tfCursorcurrent position in table; Bool_tfDirectioniteration direction; TListIter*fListCursorcurrent position in collision list; const THashTable*fTablehash table being iterated. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTableIter(const THashTable* ht, Bool_t dir = kIterForward); Create a hashtable iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. THashTableIter(const THashTableIter& iter); Copy ctor. TIterator & operator=(const TIterator& rhs); Overridden assignment operator. THashTableIter & operator=(const THashTableIter& rhs); Overloaded assignment operator. ~THashTableIter(); Delete hashtable iterator. TObject * Next(); Return next object in hashtable. Returns 0 when no more objects in table. Int_t NextSlot(); Returns index of next slot in table containing list to be iterated. void Reset(); Reset the hashtable iterator. Either to beginning or end, depending on; the initial iteration direction. Bool_t operator!=(const TIterator& aIter) const; This operator compares two TIterator objects. Bool_t operator!=(const THashTableIter& aIter) const; This operator compares two THashTableIter objects. TObject * operator*() const; Return pointer to current object or nullptr. THashTableIter(); { }. const TCollection * GetCollection() const; { return fTable; }. » Author: Fons Rademakers 27/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 15:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THashTableIter.html:2235,depend,depending,2235,root/html602/THashTableIter.html,https://root.cern,https://root.cern/root/html602/THashTableIter.html,2,['depend'],['depending']
Integrability,"ers(TMemberInspector&); virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. RooAbsData*GetData() const; RooAbsPdf*GetPdf() const. Data Members; protected:. RooArgSetfAlternateParamsRooArgSet specifying alternate parameters for hypothesis test // Is it used ????; RooArgSetfConditionalObsRooArgSet specifying the conditional observables; RooAbsData*fData; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdf; Double_tfSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetTestSize(Double_t size). SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetNullModel(const RooStats::ModelConfig& ). void SetAlternateModel(const RooStats::ModelConfig& ). void SetPdf(RooAbsPdf& pdf); specific setting - keep for convenience- some of them could be removed; Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__CombinedCalculator.html:3979,interface,interface,3979,root/html534/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__CombinedCalculator.html,2,['interface'],['interface']
Integrability,"ers; 129 Int_t *fIpfix; //[fMaxpar] List of fixed parameters; 130 Int_t fNu; //; 131 Int_t fIsysrd; //standardInput unit; 132 Int_t fIsyswr; //standard output unit; 133 Int_t fIsyssa; //; 134 Int_t fNpagwd; //Page width; 135 Int_t fNpagln; //Number of lines per page; 136 Int_t fNewpag; //; 137 Int_t fIstkrd[10]; //; 138 Int_t fNstkrd; //; 139 Int_t fIstkwr[10]; //; 140 Int_t fNstkwr; //; 141 Int_t fISW[7]; //Array of switches; 142 Int_t fIdbg[11]; //Array of internal debug switches; 143 Int_t fNblock; //Number of Minuit data blocks; 144 Int_t fIcomnd; //Number of commands; 145 Int_t fNfcn; //Number of calls to FCN; 146 Int_t fNfcnmx; //Maximum number of calls to FCN; 147 Int_t fNfcnlc; //; 148 Int_t fNfcnfr; //; 149 Int_t fItaur; //; 150 Int_t fIstrat; //; 151 Int_t fNwrmes[2]; //; 152 Int_t fNfcwar[20]; //; 153 Int_t fIcirc[2]; //; 154 Int_t fStatus; //Status flag for the last called Minuit function; 155 Int_t fKe1cr; //; 156 Int_t fKe2cr; //; 157 Bool_t fLwarn; //true if warning messages are to be put out (default=true); 158 Bool_t fLrepor; //true if exceptional conditions are put out (default=false); 159 Bool_t fLimset; //true if a parameter is up against limits (for MINOS); 160 Bool_t fLnolim; //true if there are no limits on any parameters (not yet used); 161 Bool_t fLnewmn; //true if the previous process has unexpectedly improved FCN; 162 Bool_t fLphead; //true if a heading should be put out for the next parameter definition; 163 Bool_t fGraphicsMode; //true if graphics mode on (default); 164 char *fChpt; //!Character to be plotted at the X,Y contour positions; 165 TString *fCpnam; //[fMaxpar2] Array of parameters names; 166 TString fCfrom; //; 167 TString fCstatu; //; 168 TString fCtitl; //; 169 TString fCword; //; 170 TString fCundef; //; 171 TString fCvrsn; //; 172 TString fCovmes[4]; //; 173 TString fOrigin[kMAXWARN]; //; 174 TString fWarmes[kMAXWARN]; //; 175 TObject *fObjectFit; //Pointer to object being fitted; 176 TObject *fPlot; //Pointer to TGraph obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8h_source.html:7043,message,messages,7043,doc/master/TMinuit_8h_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8h_source.html,1,['message'],['messages']
Integrability,"ers; Includes; Libraries. Function documentation; TMD5(); Create TMD5 object. Set bit count to 0 and buffer to mysterious; initialization constants. TMD5(const UChar_t* digest); Create finalized TMD5 object containing passed in 16 byte digest. TMD5(const TMD5& md5); MD5 copy ctor. Special copy ctor avoids copying unnecessary; temp arrays when finalized. TMD5 & operator=(const TMD5& rhs); MD5 assignment operator. Special assignment operator avoids; copying unnecessary temp arrays when finalized. void Update(const UChar_t* buf, UInt_t len); Update TMD5 object to reflect the concatenation of another buffer full; of bytes. void Final(UChar_t* digest); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context.; Returns digest. void Final(); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context. void Print() const; Print digest in ascii hex form. const char * AsString() const; Return message digest as string. Returns """" in case Final() has; not yet been called. Copy result because it points to a statically; allocated string. void Encode(UChar_t* out, const UInt_t* in, UInt_t len); Encodes input into output. Assumes len is a multiple of 4. void Decode(UInt_t* out, const UChar_t* in, UInt_t len); Decodes input into output. Assumes len is a multiple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:3020,message,message,3020,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,4,['message'],['message']
Integrability,"ers; Includes; Libraries. Function documentation; TMD5(); Create TMD5 object. Set bit count to 0 and buffer to mysterious; initialization constants. TMD5(const UChar_t* digest); Create finalized TMD5 object containing passed in 16 byte digest. TMD5(const TMD5& md5); MD5 copy ctor. Special copy ctor avoids copying unnecessary; temp arrays when finalized. TMD5 & operator=(const TMD5& rhs); MD5 assignment operator. Special assignment operator avoids; copying unnecessary temp arrays when finalized. void Update(const UChar_t* buf, UInt_t len); Update TMD5 object to reflect the concatenation of another buffer full; of bytes. void Final(UChar_t* digest); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context.; Returns digest. void Final(); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context. void Print() const; Print digest in ascii hex form. const char * AsString() const; Return message digest as string. Returns """" in case Final() has; not yet been called. void Encode(UChar_t* out, const UInt_t* in, UInt_t len); Encodes input into output. Assumes len is a multiple of 4. void Decode(UInt_t* out, const UChar_t* in, UInt_t len); Decodes input into output. Assumes len is a multiple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:3090,message,message,3090,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,2,['message'],['message']
Integrability,"ers; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NumEventsTestStat.html:1621,interface,interface,1621,root/html534/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__NumEventsTestStat.html,2,['interface'],['interface']
Integrability,"ersal, so users were encouraged to find the one that worked best for them. Since then, algorithms have improved considerably, but M still offers several, mostly so that old users will not feel cheated, but also to help the occasional user who does manage to defeat the best algorithms. M currently offers four applications which can be used to find a smaller function value, in addition to \(\mbox{MINOS}\), which will retain a smaller function value if it stumbles on one unexpectedly. The objects which can be used to minimize are:; 6.1.1 \(\mbox{MIGRAD}\); This is the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. It will run faster if you instantiate it with a low–level MnStrategy and will be more reliable if you instantiate it with a high–level MnStrategy (although the latter option may not help much). Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate. If first derivatives are a problem, they can be calculated analytically inside \(\mbox{FCN}\) (see [howto:fcn]) or if this is not feasible, the user can try to improve the accuracy of M ’s numerical approximation by adjusting values of MnMachinePrecision and/or MnStrategy (see [api:epsmac] and [api:strategy]).; 6.1.2 \(\mbox{MINIMIZE}\); This is equivalent to \(\mbox{MIGRAD}\), except that if \(\mbox{MIGRAD}\) fails, it reverts to \(\mbox{SIMPLEX}\) and then calls \(\mbox{MIGRAD}\) again.; 6.1.3 \(\mbox{SCAN}\); This is not intended to minimize, and just scans the function, one parameter at a time. It does however retain the best value after each scan, so it does some sort of highly primitive minimization.; 6.1.4 \(\mbox{SIMPLEX}\); This genuine multidimensional minimization routine is usually much slower than \(\mbox{MIGRAD}\), but it does not use first derivatives, so it should not be so sensitive to the precision of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:66464,depend,depends,66464,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['depend'],['depends']
Integrability,"ersion ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; double _epsAbs;  Absolute precision. ;  ; double _epsRel;  Relative precision. ;  ; RooCategory _method1D;  Selects integration method for 1D integrals. ;  ; RooCategory _method1DOpen;  Selects integration method for open ended 1D integrals. ;  ; RooCategory _method2D;  Selects integration method for 2D integrals. ;  ; RooCategory _method2DOpen;  Selects integration method for open ended 2D integrals. ;  ; RooCategory _methodND;  Selects integration method for ND integrals. ;  ; RooCategory _methodNDOpen;  Selects integration method for open ended ND integrals. ;  ; bool _printEvalCounter;  Flag to control printing of function evaluation counter. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:13471,integrat,integration,13471,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integration']
Integrability,"ersion of symmetric matrices. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ DfactMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfactMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . T & ; det, . unsigned int * ; work . ). static . LU Factorization method for inversion of general square matrices (see implementation in Math/MatrixInversion.icc) ; LU factorization : code originally from CERNLIB dfact routine and ported in C++ for CLHEP. ; Definition at line 447 of file MatrixInversion.icc. ◆ DfinvMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfinvMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . unsigned int * ; ir . ). static . LU inversion of general square matrices. ; Inversion for General square matrices.; To be called after DFactMatrix (see implementation in Math/MatrixInversion.icc); Code from dfinv routine from CERNLIB Assumed first the LU decomposition via DfactMatrix function; taken from CLHEP : L. Moneta May 2006 ; Definition at line 577 of file MatrixInversion.icc. ◆ Dinv() [1/2]. template<unsigned int idim, unsigned int n = idim> . template<class T > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatRepSym< T, idim > & ; rhs). inlinestatic . symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ; Definition at line 98 of file Dinv.h. ◆ Dinv() [2/2]. template<unsigned int idim, unsigned int n = idim> . template<class MatrixRep > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ; Definition at line 75 of file Dinv.h. ◆ InvertBunchKaufman(). template<unsigned int idim, unsigned int N> . template<class T > . void ROOT::Math::Inverter< i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:2750,rout,routine,2750,doc/master/classROOT_1_1Math_1_1Inverter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html,1,['rout'],['routine']
Integrability,"ersion of this class ; Definition at line 93 of file RooFormulaVar.h. ◆ clone(). TObject * RooFormulaVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 38 of file RooFormulaVar.h. ◆ DeclFileName(). static const char * RooFormulaVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file RooFormulaVar.h. ◆ defaultErrorLevel(). double RooFormulaVar::defaultErrorLevel ; (; ); const. overridevirtual . Return the default error level for MINUIT error analysis If the formula contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ; If the addition contains one ore more RooChi2Vars and no RooNLLVars, return the defaultErrorLevel() of RooChi2Var. If the addition contains neither or both issue a warning message and return a value of 1 ; Reimplemented from RooAbsReal.; Definition at line 281 of file RooFormulaVar.cxx. ◆ dependents(). const RooArgList & RooFormulaVar::dependents ; (; ); const. inline . Definition at line 42 of file RooFormulaVar.h. ◆ doEval(). void RooFormulaVar::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 164 of file RooFormulaVar.cxx. ◆ dumpFormula(). void RooFormulaVar::dumpFormula ; (; ). Dump the formula to stdout. ; Definition at line 152 of file RooFormulaVar.cxx. ◆ evaluate(). double RooFormulaVar::evaluate ; (; ); const. overridevirtual . Calculate current value of object from internal formula. ; Implements RooAbsReal.; Definition at line 158 of file RooFormulaVar.cxx. ◆ expression(). const char * RooFormulaVar::expression ; (; ); const. inline . Definition at line 41 of file RooFormulaVar.h. ◆ getFormula(). RooFormula & RooFormulaVar::getFormula ; (; ); const. private . Return reference to internal Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:65863,depend,dependents,65863,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,1,['depend'],['dependents']
Integrability,"ersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(); Interrupt the low level socket. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXSocket.h 34428 2010-07-15 12:35:34Z ganis $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:14459,message,message,14459,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['message'],['message']
Integrability,"erspective, it would make no sense for everyone to build their own airport. You see you will be very busy building the infrastructure (or framework) before you can use the phone to communicate with your collaborators and have a drink of water at the same time. In software engineering, it is much the same way. In a framework, the basic utilities and services, such as I/O and graphics, are provided. In addition, ROOT being a HEP analysis framework, it provides a large selection of HEP specific utilities such as histograms and fitting. The drawback of a framework is that you are constrained to it, as you are constraint to use the routing algorithm provided by your telephone service. You also have to learn the framework interfaces, which in this analogy is the same as learning how to use a telephone.; If you are interested in doing physics, a good HEP framework will save you much work. Next is a list of the more commonly used components of ROOT: Command Line Interpreter, Histograms and Fitting, Writing a Graphical User Interface, 2D Graphics, Input/Output , Collection Classes, Script Processor.; There are also less commonly used components, as: 3D Graphics, Parallel Processing (PROOF), Run Time Type Identification (RTTI), Socket and Network Communication, Threads.; 1.4.1.1 Advantages of Frameworks; The benefits of frameworks can be summarized as follows:. Less code to write - the programmer should be able to use and reuse the majority of the existing code. Basic functionality, such as fitting and histogramming are implemented and ready to use and customize.; More reliable and robust code - the code inherited from a framework has already been tested and integrated with the rest of the framework.; More consistent and modular code - the code reuse provides consistency and common capabilities between programs, no matter who writes them. Frameworks make it easier to break programs into smaller pieces.; More focus on areas of expertise - users can concentrate on their particul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:12553,Interface,Interface,12553,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Interface'],['Interface']
Integrability,"ersved data. This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum, which can drastically improve numeric stability. Furthermore, \(2\cdot \text{NLL}\) defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests. . IntegrateBins(double precision) In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre. This can reduce the bias observed when fitting functions with high curvature to binned data.; precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning. Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator has to be manipulated directly.; precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; precision < 0: Deactivate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this should be set to true for parallel minimization of likelihoods! Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since some features such as offsetting might not yet work in this case. . PyROOT; The RooAbsPdf::createNLL() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 163 of file RooAbsPdf.h. ◆ createNLLImpl(). std::unique_ptr< RooAbsReal > RooAbsPdf::createNLLImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the NLL crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:95587,integrat,integration,95587,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integration']
Integrability,"ert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a enum just by name or create it if its not already in the list. TObject* FindObject(const TObject* obj) const. TEnum * GetObject(const char* ) const; Return an object from the list of enums *if and only if* is has already; been loaded in the list. This is an internal routine. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove is called from; the TObject destructor. TObject * Remove(TObject* obj); Remove object from the list. TObject * Remove(TObjLink* lnk); Remove object via its objlink from the list. TIterator* MakeIterator(Bool_t dir = kIterForward) const. TObject* At(Int_t idx) const. TObject* After(const TObject* obj) const. TObject* Before(const TObject* obj) const. TObject* First() const. TObjLink* FirstLink() const. TObject** GetObjectRef(const TObject* obj) const. TObject* Last() const. TObjLink* LastLink() const. Int_t GetLast() const. Int_t IndexOf(const TObject* obj) const. Int_t GetSize() const. TListOfE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfEnumsWithLock.html:13176,rout,routine,13176,root/html602/TListOfEnumsWithLock.html,https://root.cern,https://root.cern/root/html602/TListOfEnumsWithLock.html,4,['rout'],['routine']
Integrability,"ertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; Bool_tIsLeft() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); voidTGSplitter::Moved(Int_t delta)SIGNAL ; virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVSplitter.html:9441,Message,Message,9441,root/html602/TGVSplitter.html,https://root.cern,https://root.cern/root/html602/TGVSplitter.html,2,['Message'],['Message']
Integrability,"erted in a TList. Before being inserted into the list the object pointer is wrapped in a TObjLink object which contains, besides the object pointer also a previous and next pointer.; There are several ways to iterate over a TList; in order of preference, if not forced by other constraints:. (Preferred way) Using the C++ range-based for or begin() / end(): for(TObject *obj: *GetListOfPrimitives()); obj->Write();; TCollection::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite all objects in this collection.Definition TCollection.cxx:672; TObjectMother of all ROOT objects.Definition TObject.h:41. Using the R__FOR_EACH macro: GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TCollection::Paintvoid Paint(Option_t *option="""") overridePaint all objects in this collection.Definition TCollection.cxx:417. Using the TList iterator TListIter (via the wrapper class TIter): TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; TIterDefinition TCollection.h:235. Using the TList iterator TListIter and std::for_each algorithm: // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TIter::Endstatic TIter End()Pointing to the element after the last - to a nullptr value in our case.Definition TCollection.cxx:814. Using the TObjLink list entries (that wrap the TObject*): TObjLink *lnk = GetListOfPrimitives()->FirstLink();; while (lnk) {; lnk->GetObject()->Draw(lnk->GetOption());; lnk = lnk->Next();; }; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjLink::GetObjectTObject * GetObject() constDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList.html:1442,wrap,wrapper,1442,doc/master/classTList.html,https://root.cern,https://root.cern/doc/master/classTList.html,1,['wrap'],['wrapper']
Integrability,"erterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ;  ; SamplingDistPlot * MakeTestStatPlot (int index, int type=0, int nbins=100);  Plot the test statistic distributions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:1838,depend,depending,1838,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['depend'],['depending']
Integrability,"ertrain rises and boosting seems to be less effective; : typical values from our current experience for best performance ; : are between 0.5(%) and 10(%) ; : ; : The default minimal number is currently set to ; : max(20, (N_training_events / N_variables^2 / 10)) ; : and can be changed by the user.; : ; : The other crucial parameter, the pruning strength (""PruneStrength""),; : is also related to overtraining. It is a regularisation parameter ; : that is used when determining after the training which splits ; : are considered statistically insignificant and are removed. The; : user is advised to carefully watch the BDT screen output for; : the comparison between efficiencies obtained on the training and; : the independent test sample. They should be equal within statistical; : errors, in order to minimize statistical fluctuations in different samples.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; BDTG : #events: (reweighted) sig: 1600 bkg: 1600; : #events: (unweighted) sig: 1600 bkg: 1600; : Training 100 Decision Trees ... patience please; : Elapsed time for training with 3200 events: 1.7 sec ; BDTG : [dataset] : Evaluation of BDTG on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.0183 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_BDTG.class.C␛[0m; : data_RNN_CPU.root:/dataset/Method_BDT/BDTG; Factory : Training finished; : ; : Ranking input variables (method specific)...; : No variable ranking supplied by classifier: TMVA_LSTM; : No variable ranking supplied by classifier: TMVA_DNN; : No variable ranking supplied by classifier: PyKeras_LSTM; BDTG : Ranking result (top variable is best ranked); : --------------------------------------------; : Rank : Variable : Variable Importance; : ----------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:33143,message,message,33143,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['message'],['message']
Integrability,"erty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:36088,Interface,Interface,36088,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"ertyLong_t Property() const overrideGet property description word. For meaning of bits see EProperty.Definition TBaseClass.cxx:134; TBaseClass::GetClassPointerTClass * GetClassPointer(Bool_t load=kTRUE)Get pointer to the base class TClass.Definition TBaseClass.cxx:63; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TBuildRealDataDefinition TClass.cxx:751; TBuildRealData::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void *addr, Bool_t isTransient) overrideThis method is called from ShowMembers() via BuildRealdata().Definition TClass.cxx:771; TBuildRealData::fRealDataClassTClass * fRealDataClassDefinition TClass.cxx:755; TBuildRealData::fRealDataObjectvoid * fRealDataObjectDefinition TClass.cxx:754; TBuildRealData::TBuildRealDataTBuildRealData(void *obj, TClass *cl)Definition TClass.cxx:758; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassGenerator::GetClassvirtual TClass * GetClass(const char *classname, Bool_t load)=0; TClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe.Definition TClassMenuItem.h:31; TClassMenuItem::SetTogglevirtual void SetToggle(Bool_t toggle=kTRUE)Definition TClassMenuItem.h:75; TClassMenuItem::kIsSelf@ kIsSelfDefinition TClassMenuItem.h:37; TClassMenuItem::kPopupStandardList@ kPopupStandardListDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:304905,interface,interface,304905,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['interface'],['interface']
Integrability,"ertyLong_t Property() const overrideGet property description word. For meaning of bits see EProperty.Definition TBaseClass.cxx:134; TBaseClass::GetClassPointerTClass * GetClassPointer(Bool_t load=kTRUE)Get pointer to the base class TClass.Definition TBaseClass.cxx:63; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TBuildRealDataDefinition TClass.cxx:818; TBuildRealData::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void *addr, Bool_t isTransient) overrideThis method is called from ShowMembers() via BuildRealdata().Definition TClass.cxx:838; TBuildRealData::fRealDataClassTClass * fRealDataClassDefinition TClass.cxx:822; TBuildRealData::fRealDataObjectvoid * fRealDataObjectDefinition TClass.cxx:821; TBuildRealData::TBuildRealDataTBuildRealData(void *obj, TClass *cl)Definition TClass.cxx:825; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassGenerator::GetClassvirtual TClass * GetClass(const char *classname, Bool_t load)=0; TClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe.Definition TClassMenuItem.h:31; TClassMenuItem::SetTogglevirtual void SetToggle(Bool_t toggle=kTRUE)Definition TClassMenuItem.h:75; TClassMenuItem::kIsSelf@ kIsSelfDefinition TClassMenuItem.h:37; TClassMenuItem::kPopupStandardList@ kPopupStandardListDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:307543,interface,interface,307543,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['interface'],['interface']
Integrability,"ervable() constDefinition RooBinSamplingPdf.h:111; When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits or plotting etc. NoteThe binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to integrate over in this kind of dataset).; In this case, IntegrateBins(>0.) needs to be used, and the desired binning needs to be assigned to the observable of the dataset: RooRealVar x(""x"", ""x"", 0., 5.);; x.setBins(10);; ; // <create dataset and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:3147,wrap,wrapped,3147,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['wrap'],['wrapped']
Integrability,"ervables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:38433,integrat,integrate,38433,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,10,['integrat'],['integrate']
Integrability,ervables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: usin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:9718,integrat,integration,9718,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['integrat'],['integration']
Integrability,"ervables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setShapeDirtyvoid setShapeDirty()Notify that a shape-like property (e.g. binning) has changed.Definition RooAbsArg.h:467; RooAbsArg::setStringAttributevoid setStringAttribute(const Text_t *key, const Text_t *value)Associate string 'value' to this object under key 'key'.Definition RooAbsArg.cxx:254; RooAbsArg::isValueDirtyAndClearbool isValueDirtyAndClear() constDefinition RooAbsArg.h:408; RooAbsArg::_fastbool _fastDefinition RooAbsArg.h:689; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition RooAbsArg.cxx:698; RooAbsArg::OperModeOperModeDefinition RooAbsArg.h:362; RooAbsArg::ADirty@ ADirtyDefinition RooAbsArg.h:362; RooAbsArg::AClean@ ACleanDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::serversconst RefCountList_t & servers() constList of all servers of this object.Definition RooAbsArg.h:180; RooAbsArg::dependsOnValuebool dependsOnValue(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) constCheck whether this object depends on values from an element in the serverList.Definition RooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:204104,depend,depends,204104,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['depends']
Integrability,"erval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object impl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:8234,integrat,integration,8234,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,10,['integrat'],['integration']
Integrability,"ervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:5828,Integrat,Integration,5828,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['Integrat'],['Integration']
Integrability,"erver nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:20822,depend,dependsOn,20822,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,8,['depend'],"['depend', 'dependsOn']"
Integrability,"erver of "" << plotVar->GetName() << std::endl ;; 2927 projectedVars.remove(*tmp) ;; 2928 }; 2929 }; 2930 ; 2931 if (!silent) {; 2932 coutW(Plotting) << ""RooAbsReal::plotOn("" << GetName(); 2933 << "") WARNING: cannot project out frame variable (""; 2934 << found->GetName() << ""), ignoring"" << std::endl ;; 2935 }; 2936 }; 2937 ; 2938 // Take out all non-dependents of function; 2939 for(RooAbsArg * arg : *allVars) {; 2940 if (!dependsOnValue(*arg)) {; 2941 projectedVars.remove(*arg,true) ;; 2942 ; 2943 cxcoutD(Plotting) << ""RooAbsReal::plotOn("" << GetName(); 2944 << "") function doesn't depend on projection variable ""; 2945 << arg->GetName() << "", ignoring"" << std::endl ;; 2946 }; 2947 }; 2948}; 2949 ; 2950 ; 2951 ; 2952 ; 2953////////////////////////////////////////////////////////////////////////////////; 2954/// If true, the current pdf is a selected component (for use in plotting); 2955 ; 2956bool RooAbsReal::isSelectedComp() const; 2957{; 2958 return _selectComp || _globalSelectComp ;; 2959}; 2960 ; 2961 ; 2962 ; 2963////////////////////////////////////////////////////////////////////////////////; 2964/// Global switch controlling the activation of the selectComp() functionality; 2965 ; 2966void RooAbsReal::globalSelectComp(bool flag); 2967{; 2968 _globalSelectComp = flag ;; 2969}; 2970 ; 2971 ; 2972 ; 2973 ; 2974////////////////////////////////////////////////////////////////////////////////; 2975/// Create an interface adaptor f(vars) that binds us to the specified variables; 2976/// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; 2977/// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; 2978/// current values of x2 and x4. The caller takes ownership of the returned adaptor.; 2979 ; 2980RooFit::OwningPtr<RooAbsFunc> RooAbsReal::bindVars(const RooArgSet &vars, const RooArgSet* nset, bool clipInvalid) const; 2981{; 2982 auto binding = std::make_unique<RooRealBinding>(*this,vars,nset,clipInvalid);; 2983 if(!binding->isVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:128108,depend,depend,128108,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"erverSocket(9090,kTRUE);; TSocket *socket = ss->Accept();; socket->Send(""go"");; ss->Close();; }; On the clientside, we create a socket and ask the socket to receive input.; { // client; TSocket *socket = new TSocket(""localhost"",9090);; Char str[32];; socket->Recv(str,32);; }; 22.2 Sending Objects over the Network; We have just established a connection and you just saw how to send and receive a string with the example “go”. Now let’s send a histogram.; To send an object (in our case on the client side) it has to derive from TObject class because it uses the Streamers to fill a buffer that is then sent over the connection. On the receiving side, the Streamers are used to read the object from the message sent via the socket. For network communication, we have a specialized TBuffer, a descendant of TBuffer called TMessage. In the following example, we create a TMessage with the intention to store an object, hence the constant kMESS_OBJECT in the constructor. We create and fill the histogram and write it into the message. Then we call TSocket::Send to send the message with the histogram.; ...; // create an object to be sent; TH1F *hpx = new TH1F(""hpx"",""px distribution"",100,-4,4);; hpx->FillRandom(""gaus"",1000);. // create a TMessage to send the object; TMessage message(kMESS_OBJECT);. // write the histogram into the message buffer; message.WriteObject(hpx);. // send the message; socket->Send(message);; ...; On the receiving end (in our case the server side), we write a while loop to wait and receive a message with a histogram. Once we have a message, we call TMessage::ReadObject, which returns a pointer to TObject. We have to cast it to a TH1 pointer, and now we have a histogram. At the end of the loop, the message is deleted, and another one is created at the beginning.; while (1) {; TMessage *message;; socket->Recv(message);; TH1 *h = (TH1*)message->ReadObject(message->GetClass());; delete message;; }; 22.3 Closing the Connection; Once we are done sending objects, we cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1098780,message,message,1098780,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['message'],['message']
Integrability,"ery result; TOracleServer Connection to Oracle server; TOracleStatement SQL statement class for Oracle; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive Generate work packets for parallel processing; TPacketizerFile Generate work packets for parallel processing; TPacketizerMulti Generate work packets for parallel processing; TPacketizerUnit Generate work packets for parallel processing; TPad A Graphics pad; TPadEditor editor of TPad objects; TPadPainter Abstract interface for painting in TPad; TPainter3dAlgorithms Hidden line removal package; TPair Pair TObject*, TObject*; TPaletteAxis class used to display a color palette axis for 2-d plots; TPaletteEditor Base class for palette editor; TParameter<Long64_t> Named templated parameter type; TParameter<double> Named templated parameter type; TParameter<float> Named templated parameter type; TParameter<int> Named templated parameter type; TParameter<long> Named templated parameter type; TParticle TParticle vertex particle information; TParticleClassPDG PDG static particle definition; TParticlePDG PDG static particle definition; TPave Pave. A box with shadowing; TPaveClass A TPaveLabel specialized for TClassTree objects; TPaveLabel PaveLabel. A Pave with a label; TPaveStats A special TPaveText to draw histogram statistics.; TPaveStatsEditor GUI for editing TPaveStats; TPaveText PaveText. A Pave with several lines of text.; TPavesText Stacked Paves with text strings; TPerfEvent Class holding TProof Event Info; TPerfStats Class for colle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:110496,interface,interface,110496,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['interface'],['interface']
Integrability,"eryStatuskStopped; static TQueryResult::EQueryStatuskSubmitted; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfArchivedwhether the query has been archived; Long64_tfBytesnumber of bytes processed; Bool_tfDrawtrue if draw action query; TDatimefEndtime when processing ended; Long64_tfEntriesnumber of entries processed; Bool_tfFinalizedwhether Terminate has been run; Long64_tfFirstfirst entry processed; Float_tfInitTimeInitialization time (seconds) (millisec precision); TList*fInputListinput list; contains also data sets, entry list, ...; TStringfLibListblank-separated list of libs loaded at fStart; TMacro*fLogFilefile with log messages from the query; TStringTNamed::fNameobject identifier; Int_tfNumWrksNumber of workers at start; TStringfOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*fOutputListoutput list; TStringfParListcolon-separated list of PAR loaded at fStart; Float_tfProcTimeProcessing time (seconds) (millisec precision); TStringfResultFileURL of the file where results have been archived; TMacro*fSelecHdrselector header file; TMacro*fSelecImpselector implementation file; Int_tfSeqNumquery unique sequential number; TDatimefStarttime when processing started; TQueryResult::EQueryStatusfStatusquery status; TStringTNamed::fTitleobject title; Float_tfUsedCPUreal CPU time used (seconds). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TQueryResult. ←. TProofQueryResult. Function documentation; TQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, const char* selec); Main constructor. ~TQueryResult(); Destructor. TQueryResult * CloneInfo(); Return an instance of TQueryResult containing only the local; info fields, i.e. no outputlist, liblist, dset, selectors, etc..; Used for fast retrieve of information about existing queries; and their status. void SaveSelector(const char* selec); Save the selector header and implementation into the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQueryResult.html:8020,message,messages,8020,root/html602/TQueryResult.html,https://root.cern,https://root.cern/root/html602/TQueryResult.html,2,['message'],['messages']
Integrability,"er} exists; in the fgAuthInfo list; If opt = ""P"" use ProofAuthInfo list instead; Returns pointer to it or 0. void FileExpand(const char* fin, FILE* ftmp); Expands include directives found in fexp files; The expanded, temporary file, is pointed to by 'ftmp'; and should be already open. To be called recursively. char * GetDefaultDetails(Int_t method, Int_t opt, const char* user); Determine default authentication details for method 'sec' and user 'usr'.; Checks .rootrc family files. Returned string must be deleted by the user. void RemoveHostAuth(THostAuth* ha, Option_t* opt = """"); Remove THostAuth instance from the list. void Show(Option_t* opt = ""S""); Print info about the authentication sector.; If 'opt' contains 's' or 'S' prints information about established TSecContext,; else prints information about THostAuth (if 'opt' is 'p' or 'P', prints; Proof related information). Int_t AuthExists(TString User, Int_t method, const char* Options, Int_t* Message, Int_t* Rflag, CheckSecCtx_t funcheck); Check if we have a valid established sec context in memory; Retrieves relevant info and negotiates with server.; options = ""Opt,strlen(username),username.Data()""; message = kROOTD_USER, ... void InitRandom(); Initialize random machine using seed from /dev/urandom; (or current time if /dev/urandom not available). Int_t GenRSAKeys(); Generate a valid pair of private/public RSA keys to protect for; authentication token exchange. char * GetRandString(Int_t Opt, Int_t Len); Allocates and fills a 0 terminated buffer of length len+1 with; len random characters.; Returns pointer to the buffer (to be deleted by the caller); opt = 0 any non dangerous char; 1 letters and numbers (upper and lower case); 2 hex characters (upper and lower case). Int_t SecureSend(TSocket* Socket, Int_t enc, Int_t KeyType, const char* In); Encode null terminated str using the session private key indicated by enc; and sends it over the network; Returns number of bytes sent, or -1 in case of error.; enc = 1 for pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAuthenticate.html:19115,Message,Message,19115,root/html532/TAuthenticate.html,https://root.cern,https://root.cern/root/html532/TAuthenticate.html,4,['Message'],['Message']
Integrability,"es (std::ostream &dictStream, const std::string &includeForSource, const std::string &extraIncludes);  ; const std::string GenerateStringFromHeadersForClasses (const HeadersDeclsMap_t &headersClassesMap, const std::string &detectedUmbrella, bool payLoadOnly=false);  Generate a string for the dictionary from the headers-classes map. ;  ; int GenReflexMain (int argc, char **argv);  Translate the arguments of genreflex into rootcling ones and forward them to the RootCling function. ;  ; const char * GetExePath ();  Returns the executable path name, used e.g. by SetRootSys(). ;  ; std::pair< std::string, std::string > GetExternalNamespaceAndContainedEntities (const std::string line);  Performance is not critical here. ;  ; size_t GetFullArrayLength (const clang::ConstantArrayType *arrayType);  ; std::string GetFwdDeclnArgsToKeepString (const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt, cling::Interpreter &interp);  ; static llvm::StringRef GetModuleNameFromRdictName (llvm::StringRef rdictName);  ; void GetMostExternalEnclosingClassName (const clang::DeclContext &theContext, std::string &ctxtName, const cling::Interpreter &interpreter, bool treatParent=true);  Extract the proper autoload key for nested classes The routine does not erase the name, just updates it. ;  ; void GetMostExternalEnclosingClassNameFromDecl (const clang::Decl &theDecl, std::string &ctxtName, const cling::Interpreter &interpreter);  ; string GetNonConstMemberName (const clang::FieldDecl &m, const string &prefix="""");  Return the name of the data member so that it can be used by non-const operation (so it includes a const_cast if necessary). ;  ; clang::QualType GetPointeeTypeIfPossible (const clang::QualType &qt);  Get the pointee type if possible. ;  ; const std::string gLibraryExtension ("".so"");  ; static llvm::cl::list< std::string > gOptBareClingSink (llvm::cl::OneOrMore, llvm::cl::Sink, llvm::cl::desc(""Consumes options and sends them to cling.""), llvm::cl::cat(gRootclingOptions), llvm::cl::sub(g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:11349,rout,routine,11349,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['rout'],['routine']
Integrability,"es ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsSelfCachedReal.html:33974,integrat,integrator,33974,root/html530/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsSelfCachedReal.html,1,['integrat'],['integrator']
Integrability,"es < 0) {; 8788 return -1;; 8789 }; 8790 cacheSize = pf->GetBufferSize(); // update after potential clamp; 8791 }; 8792 } else {; 8793 // no existing cache; 8794 if (autocache) {; 8795 if (fCacheUserSet) {; 8796 // value was already set manually.; 8797 if (fCacheSize == 0) return 0;; 8798 // Expected a cache should exist; perhaps the user moved it; 8799 // Do nothing more here.; 8800 if (cacheSize) {; 8801 Error(""SetCacheSizeAux"", ""Not setting up an automatically sized TTreeCache because of missing cache previously set"");; 8802 }; 8803 return -1;; 8804 }; 8805 }; 8806 }; 8807 ; 8808 fCacheSize = cacheSize;; 8809 if (cacheSize == 0 || pf) {; 8810 return 0;; 8811 }; 8812 ; 8813#ifdef R__USE_IMT; 8814 if(TTreeCacheUnzip::IsParallelUnzip() && file->GetCompressionLevel() > 0); 8815 pf = new TTreeCacheUnzip(this, cacheSize);; 8816 else; 8817#endif; 8818 pf = new TTreeCache(this, cacheSize);; 8819 ; 8820 pf->SetAutoCreated(autocache);; 8821 ; 8822 return 0;; 8823}; 8824 ; 8825////////////////////////////////////////////////////////////////////////////////; 8826///interface to TTreeCache to set the cache entry range; 8827///; 8828/// Returns:; 8829/// - 0 entry range set; 8830/// - -1 on error; 8831 ; 8832Int_t TTree::SetCacheEntryRange(Long64_t first, Long64_t last); 8833{; 8834 if (!GetTree()) {; 8835 if (LoadTree(0)<0) {; 8836 Error(""SetCacheEntryRange"",""Could not load a tree"");; 8837 return -1;; 8838 }; 8839 }; 8840 if (GetTree()) {; 8841 if (GetTree() != this) {; 8842 return GetTree()->SetCacheEntryRange(first, last);; 8843 }; 8844 } else {; 8845 Error(""SetCacheEntryRange"", ""No tree is available. Could not set cache entry range"");; 8846 return -1;; 8847 }; 8848 ; 8849 TFile *f = GetCurrentFile();; 8850 if (!f) {; 8851 Error(""SetCacheEntryRange"", ""No file is available. Could not set cache entry range"");; 8852 return -1;; 8853 }; 8854 TTreeCache *tc = GetReadCache(f,true);; 8855 if (!tc) {; 8856 Error(""SetCacheEntryRange"", ""No cache is available. Could not set entry rang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:342721,interface,interface,342721,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['interface'],['interface']
Integrability,"es Class ReferenceRooFit » RooFit Core. ; Class RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList. ; Definition at line 22 of file RooSharedProperties.h. Classes; class  UUID;  . Public Member Functions;  RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; UUID uuid () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSharedProperties.html:1313,interface,interface,1313,doc/master/classRooSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooSharedProperties.html,1,['interface'],['interface']
Integrability,"es a category object has. In computations, values are expected to change often, while shapes remain mostly constant (unless e.g. a new range is set for an observable).; Nodes of a computation graph are connected using instances of RooAbsProxy. If Node B declares a member RooTemplateProxy<TypeOfNodeA>, Node A will be registered as a server of values to Node B, and Node B will know that it is a client of node A. Using functions like dependsOn(), or getObservables() / getParameters(), the relation of A --> B can be queried. Using graphVizTree(), one can create a visualisation of the expression tree.; An instance of RooAbsArg can have named attributes. It also has flags to indicate that either its value or its shape were changed (= it is dirty). RooAbsArg provides functionality to manage client/server relations in a computation graph (clientServerInterface), and helps propagating value/shape changes through the graph. RooAbsArg implements interfaces for inspecting client/server relationships (clientServerInterface) and setting/clearing/querying named attributes. Caching of values; The values of nodes in the computation graph are cached in RooFit. If a value is used in two nodes of a graph, it doesn't need to be recomputed. If a node acquires a new value, it notifies its consumers (""clients"") that their cached values are dirty. See the functions in optimisationInterface for details. A node uses its isValueDirty() and isShapeDirty() functions to decide if a computation is necessary. Caching can be vetoed globally by setting a bit using setDirtyInhibit(). This will make computations slower, but all the nodes of the computation graph will be evaluated irrespective of whether their state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled for single nodes. ; Definition at line 79 of file RooAbsArg.h. Classes; struct  ProxyListCache;  . Public Types; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeAc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:2201,interface,interfaces,2201,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['interface'],['interfaces']
Integrability,"es are dynamically activated once all the required components are defined.; Create a volume from the “Volumes” category. You will notice that contrary to the other editors, the volume editor is opened in a tab, not transient - this is because it is more complex.; Go back to “General” category and select the newly created volume as the top one (you can do it also from the volume category). This is just for starting. To create some hierarchy, one has to create several other volumes and the matrices to position them. Once this is done, use the volume editor interface to:. add/remove daughters, change shape, edit position of daughters; change visualization settings; divide the volume (only if there are no daughters yet). Close the geometry from the “General” category. 19 Python Interface. Python is a popular, open-source, dynamic programming language with an interactive interpreter. Its interoperability with other programming languages, both for extending Python as well as embedding it, is excellent and many existing third-party applications and libraries have therefore so-called “Python bindings.” PyROOT provides Python bindings for ROOT: it enables cross-calls from ROOT/Cling into Python and vice versa, the intermingling of the two interpreters, and the transport of user-level objects from one interpreter to the other. PyROOT enables access from ROOT to any application or library that itself has Python bindings, and it makes all ROOT functionality directly available from the python interpreter.; 19.1 PyROOT Overview; The Python scripting language is widely used for scientific programming, including high performance and distributed parallel code (see http://www.scipy.org). It is the second most popular scripting language (after Perl) and enjoys a wide-spread use as a “glue language”: practically every library and application these days comes with Python bindings (and if not, they can be easily written or generated).; PyROOT, a Python extension module, provides the bindi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1041283,interoperab,interoperability,1041283,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interoperab'],['interoperability']
Integrability,"es are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a low",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:6242,Integrat,IntegratorOneDim,6242,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,9,['Integrat'],"['IntegrationOneDim', 'IntegratorOneDim']"
Integrability,"es are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6212,Integrat,IntegratorOneDim,6212,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,3,['Integrat'],"['IntegrationOneDim', 'IntegratorOneDim']"
Integrability,"es can be accessed from your PC, from the web and from large-scale file delivery systems used e.g. in the GRID. ROOT trees spread over several files can be chained and accessed as a unique object, allowing for loops over huge amounts of data.; Mine data Powerful mathematical and statistical tools are provided to operate on your data. The full power of a C++ application and of parallel processing is available for any kind of data manipulation. Data can also be generated following any statistical distribution and modeled, making it possible to simulate complex systems.; Publish results Results can be displayed with histograms, scatter plots, fitting functions. ROOT graphics may be adjusted real-time by few mouse clicks. Publication-quality figures can be saved in PDF or other formats.; Run interactively or build your own application You can use the Cling C++ interpreter for your interactive sessions and to write macros, or you can compile your program to run at full speed. In both cases, you can also create a graphical user interface.; Use ROOT within other languages ROOT provides a set of bindings in order to seamlessly integrate with existing languages such as Python, R and Mathematica. Save dataAccess dataProcess dataShow resultsInteractive or built applicationIntegration with other languages. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:3677,interface,interface,3677,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,2,"['integrat', 'interface']","['integrate', 'interface']"
Integrability,"es can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& testArg, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* nset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, server",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:23387,depend,dependents,23387,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,1,['depend'],['dependents']
Integrability,"es corresponding to the minimum value of the function; on its range. Return the function value at the minimum; To find the minimum on a subrange, use the SetRange() function first.; Method:; First, a grid search is performed to find the initial estimate of the; minimum location. The range of the function is divided; into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""),; these values can be changed by SetNpx(), SetNpy() and SetNpz() functions.; Then, Minuit minimization is used with starting values found by the grid search. Note that this method will always do first a grid search in contrast to GetMinimum. Double_t GetMaximumXYZ(Double_t& x, Double_t& y, Double_t& z); Compute the X, Y and Z values corresponding to the maximum value of the function; on its range. Return the function value at the maximum; See TF3::GetMinimumXYZ. void GetRandom3(Double_t& xrandom, Double_t& yrandom, Double_t& zrandom); Return 3 random numbers following this function shape; *-* =====================================================; -; *-* The distribution contained in this TF3 function is integrated; *-* over the cell contents.; *-* It is normalized to 1.; *-* Getting the three random numbers implies:; *-* - Generating a random number between 0 and 1 (say r1); *-* - Look in which cell in the normalized integral r1 corresponds to; *-* - make a linear interpolation in the returned cell; -; -; *-* IMPORTANT NOTE; *-* The integral of the function is computed at fNpx * fNpy * fNpz points.; *-* If the function has sharp peaks, you should increase the number of; *-* points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated; *-* at several points. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; Return range of function*-*-*-*-; *-* ========================. Double_t GetSave(const Double_t* x); Get value corresponding to X in array of fSave values. Double_t Integral(Double_t ax, Double_t bx, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF3.html:28845,integrat,integrated,28845,root/html604/TF3.html,https://root.cern,https://root.cern/root/html604/TF3.html,2,['integrat'],['integrated']
Integrability,"es for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149644,depend,dependencies,149644,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['depend'],['dependencies']
Integrability,es inherited from RooProjectedPdf; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; RooSetProxy deps;  dependents of this p.d.f ;  ; RooSetProxy intobs;  observables that p.d.f is integrated over ;  ; RooRealProxy intpdf;  p.d.f that is integrated ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:71492,integrat,integration,71492,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['integrat'],['integration']
Integrability,"es modified; RooListProxy_varsVariables; Bool_t_verboseClient; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_verboseServer; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealMPFE(const char* name, const char* title, RooAbsReal& arg, Bool_t calcInline = kFALSE); Construct front-end object for object 'arg' whose evaluation will be calculated; asynchronously in a separate process. If calcInline is true the value of 'arg'; is calculate synchronously in the current process. RooRealMPFE(const RooRealMPFE& other, const char* name = 0); Copy constructor. Initializes in clean state so that upon eval; this instance will create its own server processes. ~RooRealMPFE(); Destructor. void initVars(); Initialize list of variables of front-end argument 'arg'. void initialize(); Initialize the remote process and message passing; pipes between current process and remote process. void serverLoop(); Server loop of remote processes. This function will return; only when an incoming TERMINATE message is received. void calculate() const; Client-side function that instructs server process to start; asynchronuous (re)calculation of function value. This function; returns immediately. The calculated value can be retrieved; using getVal(). Double_t getVal(const RooArgSet* nset = 0) const; If value needs recalculation and calculation has not beed started; with a call to calculate() start it now. This function blocks; until remote process has finished calculation and returns; remote value. Double_t evaluate() const; Send message to server process to retrieve output value; If error were logged use logEvalError() on remote side; transfer those errors to the local eval error queue. void standby(); Terminate remote server process and return front-end class; to standby mode. Calls to calculate() or evaluate() after; t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealMPFE.html:34469,message,message,34469,root/html526/RooRealMPFE.html,https://root.cern,https://root.cern/root/html526/RooRealMPFE.html,3,['message'],['message']
Integrability,"es modified; RooListProxy_varsVariables; Bool_t_verboseClient; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_verboseServer; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRealMPFE(const char* name, const char* title, RooAbsReal& arg, Bool_t calcInline = kFALSE); Construct front-end object for object 'arg' whose evaluation will be calculated; asynchronously in a separate process. If calcInline is true the value of 'arg'; is calculate synchronously in the current process. RooRealMPFE(const RooRealMPFE& other, const char* name = 0); Copy constructor. Initializes in clean state so that upon eval; this instance will create its own server processes. ~RooRealMPFE(); Destructor. void initVars(); Initialize list of variables of front-end argument 'arg'. void initialize(); Initialize the remote process and message passing; pipes between current process and remote process. void serverLoop(); Server loop of remote processes. This function will return; only when an incoming TERMINATE message is received. void calculate() const; Client-side function that instructs server process to start; asynchronuous (re)calculation of function value. This function; returns immediately. The calculated value can be retrieved; using getVal(). Double_t getValV(const RooArgSet* nset = 0) const; If value needs recalculation and calculation has not beed started; with a call to calculate() start it now. This function blocks; until remote process has finished calculation and returns; remote value. Double_t evaluate() const; Send message to server process to retrieve output value; If error were logged use logEvalError() on remote side; transfer those errors to the local eval error queue. void standby(); Terminate remote server process and return front-end class; to standby mode. Calls to calculate() or evaluate() after; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealMPFE.html:36005,message,message,36005,root/html532/RooRealMPFE.html,https://root.cern,https://root.cern/root/html532/RooRealMPFE.html,2,['message'],['message']
Integrability,"es of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegrator.html:2065,integrat,integrator,2065,root/html528/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegrator.html,1,['integrat'],['integrator']
Integrability,"es of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__VirtualIntegrator.html:2067,integrat,integrator,2067,root/html530/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__VirtualIntegrator.html,1,['integrat'],['integrator']
Integrability,"es of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__VirtualIntegrator.html:2067,integrat,integrator,2067,root/html532/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__VirtualIntegrator.html,2,['integrat'],['integrator']
Integrability,"es of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__VirtualIntegrator.html:2067,integrat,integrator,2067,root/html534/ROOT__Math__VirtualIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__VirtualIntegrator.html,2,['integrat'],['integrator']
Integrability,"es one or more fixed parameter(s) to variable status*-*-; *-* ==========================================================; *-* Restores one or more fixed parameter(s) to variable status; *-* by inserting it into the internal parameter list at the; *-* appropriate place.; -; *-* K = 0 means restore all parameters; *-* K = 1 means restore the last parameter fixed; *-* K = -I means restore external parameter I (if possible); *-* IQ = fix-location where internal parameters were stored; *-* IR = external number of parameter being restored; *-* IS = internal number of parameter being restored; *. void mngrad(); Interprets the SET GRAD command*-*-*-; *-* ===============================; *-* Called from MNSET; *-* Interprets the SET GRAD command, which informs MINUIT whether; *-* the first derivatives of FCN will be calculated by the user; *-* inside FCN. It can check the user derivative calculation; *-* by comparing it with a finite difference approximation.; *. void mnhelp(const char* command = """"); interface to Minuit help. void mnhelp(TString comd); HELP routine for MINUIT interactive commands*-; *-* ============================================; -; *-* COMD ='*' or """" prints a global help for all commands; *-* COMD =Command_name: print detailed help for one command.; *-* Note that at least 3 characters must be given for the command; *-* name.; -; *-* Author: Rene Brun; *-* comments extracted from the MINUIT documentation file.; -; *. void mnhess(); Calculates the full second-derivative matrix of FCN*-*-; *-* ===================================================; *-* by taking finite differences. When calculating diagonal; *-* elements, it may iterate so that step size is nearly that; *-* which gives function change= UP/10. The first derivatives; *-* of course come as a free side effect, but with a smaller; *-* step size in order to obtain a known accuracy.; *. void mnhes1(); Calculate first derivatives (GRD) and uncertainties (DGRD)*-*-; *-* ================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:43386,interface,interface,43386,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['interface'],['interface']
Integrability,"es read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPageRef;  Reference to a page stored in the page pool. More...;  ; class  ROOT::Experimental::Internal::RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  ROOT::Experimental::Internal::RPageSinkBuf;  Wrapper sink that coalesc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__NTuple.html:11753,interface,interface,11753,doc/master/group__NTuple.html,https://root.cern,https://root.cern/doc/master/group__NTuple.html,1,['interface'],['interface']
Integrability,"es read. ;  ; virtual Int_t GetEntryExport (Long64_t entry, Int_t getall, TClonesArray *list, Int_t n);  Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ;  ; Long64_t GetEntryNumber () const;  ; Int_t GetEntryOffsetLen () const;  ; Int_t GetEvent (Long64_t entry=0);  ; virtual Int_t GetExpectedType (TClass *&clptr, EDataType &type);  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TFile * GetFile (Int_t mode=0);  Return pointer to the file where branch buffers reside, returns 0 in case branch buffers reside in the same file as tree header. ;  ; const char * GetFileName () const;  ; Long64_t GetFirstEntry () const;  ; virtual TString GetFullName () const;  Return the 'full' name of the branch. ;  ; const char * GetIconName () const override;  Return icon name depending on type of branch. ;  ; TIOFeatures GetIOFeatures () const;  Returns the IO settings currently in use for this branch. ;  ; virtual TLeaf * GetLeaf (const char *name) const;  Return pointer to the 1st Leaf named name in thisBranch. ;  ; TObjArray * GetListOfBaskets ();  ; TObjArray * GetListOfBranches ();  ; TObjArray * GetListOfLeaves ();  ; virtual bool GetMakeClass () const;  Return whether this branch is in a mode where the object are decomposed or not (Also known as MakeClass mode). ;  ; Int_t GetMaxBaskets () const;  ; TBranch * GetMother () const;  Get our top-level parent branch in the tree. ;  ; Int_t GetNleaves () const;  ; Int_t GetOffset () const;  ; Int_t GetReadBasket () const;  ; Long64_t GetReadEntry () const;  ; virtual Int_t GetRow (Int_t row);  Return all elements of one row unpacked in internal array fValues [Actually just returns 1 (?)]. ;  ; Int_t GetSplitLevel () const;  ; TBranch * GetSubBranch (const TBranch *br) const;  Find the p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:4619,depend,depending,4619,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,2,['depend'],['depending']
Integrability,"es static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  RTreeDrawInvokeTimer;  ; class  RTreeDrawMonitoring;  ; class  RTreeViewer;  ; class  RWebBrowserHandle;  Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:5156,wrap,wrapper,5156,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,2,['wrap'],['wrapper']
Integrability,"es the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:1571,depend,depend,1571,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['depend'],['depend']
Integrability,"es the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double ); Implementing VirtualIntegrator Interface; Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; This method is not implemented. . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface; Return Integral of function between a and b. Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A, B: End-points of integration interval. Note that B may be less; than A.; - params: Array of function parameters. If 0, use current parameters.; - epsilon: Accuracy parameter (see Accuracy). Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GaussIntegrator.html:3138,integrat,integration,3138,root/html526/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GaussIntegrator.html,1,['integrat'],['integration']
Integrability,es(). std::vector< TString > * TMVA::TActivationChooser::GetAllActivationNames ; (; ); const. returns the names of all know activation functions ; Definition at line 107 of file TActivationChooser.cxx. ◆ IsA(). virtual TClass * TMVA::TActivationChooser::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 72 of file TActivationChooser.h. ◆ Log(). MsgLogger & TMVA::TActivationChooser::Log ; (; ); const. inlineprivate . Definition at line 70 of file TActivationChooser.h. ◆ Streamer(). virtual void TMVA::TActivationChooser::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::TActivationChooser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file TActivationChooser.h. Member Data Documentation. ◆ fLINEAR. TString TMVA::TActivationChooser::fLINEAR. private . activation function name ; Definition at line 63 of file TActivationChooser.h. ◆ fLogger. MsgLogger* TMVA::TActivationChooser::fLogger. mutableprivate . ! message logger ; Definition at line 69 of file TActivationChooser.h. ◆ fRADIAL. TString TMVA::TActivationChooser::fRADIAL. private . activation function name ; Definition at line 67 of file TActivationChooser.h. ◆ fRELU. TString TMVA::TActivationChooser::fRELU. private . activation function name ; Definition at line 66 of file TActivationChooser.h. ◆ fSIGMOID. TString TMVA::TActivationChooser::fSIGMOID. private . activation function name ; Definition at line 64 of file TActivationChooser.h. ◆ fTANH. TString TMVA::TActivationChooser::fTANH. private . activation function name ; Definition at line 65 of file TActivationChooser.h. Libraries for TMVA::TActivationChooser:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationChooser.h; tmva/tmva/src/TActivationChooser.cxx. TMVATActivationChooser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html:4698,message,message,4698,doc/master/classTMVA_1_1TActivationChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html,1,['message'],['message']
Integrability,"es). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: http://root.cern.ch/root/html/examples/geodemo.C.html. Primitive Shapes - the general inheritance scheme. Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; Naming shape primitive is mandatory only for the primitives used in Boolean composites (see “Composite Shapes”). For the sake of simplicity, we will describe only the constructors in the second form.; 18.3.1 Units; The length units used in the geometry are arbitrary. However, there are certain functionalities that work with the assumption that the used lengths are expressed in centimeters. This is the case for shape capacity or volume weight computation. The same is valid when using the ROOT geometry as navigator for an external transport MC package (e.g. GEANT) via the VMC interface.; Other units in use: All angles used for defining rotation matrices or some shape parameters are expressed in degrees. Material density is expressed in [g/cm3].; 18.3.2 Primitive Shapes; 18.3.2.1 Boxes - TGeoBBox Class; Normally a box has to be built only with 3 parameters: DX,DY,DZ representing the half-lengths on X, Y and Z-axes. In this case, the origin of the box will match the one of its reference frame and the box will range from: -DX to DX on X-axis, from -DY to DY on Y and from -DZ to DZ on Z. On the other hand, any other shape needs to compute and store the parameters of their minimal bounding box. The bounding boxes are essential to optimize navigation algorithms. Therefore all other primitives derive from TGeoBBox. Since the minimal bounding box is not necessary centered in the origin, any box allows an origin translation (Ox,Oy,Oz). All primitive constructors automatically compute the bounding box parameters. Users should be aware that building a translated ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:898944,interface,interface,898944,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"es).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise use the system information, if available, or just start; the minimal number, i.e. 2 . Int_t SetupWorkers(Int_t opt = 0, TList* wrks = 0); Start up PROOF workers. void NotifyStartUp(const char* action, Int_t done, Int_t tot); Notify setting-up operation message. Int_t SetProofServEnv(const char* ord); Create environment files for worker 'ord'. void ResolveKeywords(TString& s, const char* logfile); Resolve some keywords in 's'; <logfileroot>, <user>, <rootsys>. Int_t CreateSandbox(); Create the sandbox for this session. void Print(Option_t* option = """") const; Print status of PROOF-Lite cluster. TProofQueryResult * MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. Long64_t DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:26542,message,message,26542,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,4,['message'],['message']
Integrability,"es).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise use the system information, if available, or just start; the minimal number, i.e. 2 . Int_t SetupWorkers(Int_t opt = 0, TList* wrks = 0); Start up PROOF workers. void NotifyStartUp(const char* action, Int_t done, Int_t tot); Notify setting-up operation message. Int_t SetProofServEnv(const char* ord); Create environment files for worker 'ord'. void ResolveKeywords(TString& s, const char* ord, const char* logfile); Resolve some keywords in 's'; <logfilewrk>, <user>, <rootsys>, <cpupin>. Int_t CreateSandbox(); Create the sandbox for this session. void Print(Option_t* option = """") const; Print status of PROOF-Lite cluster. TProofQueryResult * MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. Long64_t DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:29566,message,message,29566,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['message'],['message']
Integrability,"es, Script Processor.; There are also less commonly used components, as: 3D Graphics, Parallel Processing (PROOF), Run Time Type Identification (RTTI), Socket and Network Communication, Threads.; 1.4.1.1 Advantages of Frameworks; The benefits of frameworks can be summarized as follows:. Less code to write - the programmer should be able to use and reuse the majority of the existing code. Basic functionality, such as fitting and histogramming are implemented and ready to use and customize.; More reliable and robust code - the code inherited from a framework has already been tested and integrated with the rest of the framework.; More consistent and modular code - the code reuse provides consistency and common capabilities between programs, no matter who writes them. Frameworks make it easier to break programs into smaller pieces.; More focus on areas of expertise - users can concentrate on their particular problem domain. They do not have to be experts at writing user interfaces, graphics, or networking to use the frameworks that provide those services. 1.4.2 Why Object-Oriented?; Object-Oriented Programming offers considerable benefits compared to Procedure-Oriented Programming:. Encapsulation enforces data abstraction and increases opportunity for reuse.; Sub classing and inheritance make it possible to extend and modify objects.; Class hierarchies and containment containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.; Complexity is reduced because there is little growth of the global state, the state is contained within each object, rather than scattered through the program in the form of global variables.; Objects may come and go, but the basic structure of the program remains relatively static, increases opportunity for reuse of design. 1.5 Installing ROOT. To install ROOT you have the choice to download the binaries or the source. The source is quicker to transfer since it is only ~22 MB, but you wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:13589,interface,interfaces,13589,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interfaces']
Integrability,"es. ; If keepTargetAxis is true, the axes will keep their original xmin / xmax, else they will be restricted to the range selected (first / last). ; Definition at line 179 of file THnBase.cxx. ◆ ComputeIntegral(). Double_t THnBase::ComputeIntegral ; (; ). Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. Returns1 if success, 0 if integral is zero ; Definition at line 1365 of file THnBase.cxx. ◆ CreateHist(). TH1 * THnBase::CreateHist ; (; const char * ; name, . const char * ; title, . const TObjArray * ; axes, . Bool_t ; keepTargetAxis . ); const. protected . Create an empty histogram with name and title with a given set of axes. ; Create a TH1D/TH2D/TH3D, depending on the number of elements in axes. ; Definition at line 252 of file THnBase.cxx. ◆ CreateHnAny() [1/2]. THnBase * THnBase::CreateHnAny ; (; const char * ; name, . const char * ; title, . const TH1 * ; h1, . Bool_t ; sparse, . Int_t ; chunkSize = 1024 * 16 . ). staticprotected . Create a THn / THnSparse object from a histogram deriving from TH1. ; Definition at line 323 of file THnBase.cxx. ◆ CreateHnAny() [2/2]. THnBase * THnBase::CreateHnAny ; (; const char * ; name, . const char * ; title, . const THnBase * ; hn, . Bool_t ; sparse, . Int_t ; chunkSize = 1024 * 16 . ). staticprotected . Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly converting THn <-> THnSparse. ; Definition at line 403 of file THnBase.cxx. ◆ CreateIter(). virtual ROOT::Internal::THnBaseBinIter * THnBase::CreateIter ; (; Bool_t ; respectAxisRange); const. pure virtual . Implemented in THn, and THnSparse. ◆ DeclFileName(). static const char * THnBase::DeclFileName ; (; ). inlinestatic . ReturnsName of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:25712,depend,depending,25712,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['depend'],['depending']
Integrability,"es. ; Using XGBoost, we illustrate how you can convert an externally trained model in a format serializable and readable with the fast tree inference engine offered by TMVA.; ; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; from xgboost import XGBClassifier; ; import ROOT; import numpy as np; ; from tmva100_DataPreparation import variables; ; ; def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); ; # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]); ; # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); ; # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); ; return x, y, w; ; if __name__ == ""__main__"":; # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""); ; # Fit xgboost model; bdt = XGBClassifier(max_depth=3, n_estimators=500); bdt.fit(x, y, sample_weight=w); ; # Save model in TMVA format; print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateAugust 2019 ; AuthorStefan Wunsch ; Definition in file tmva101_Training.py. tutorialstmvatmva101_Training.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py.html:2065,interface,interface,2065,doc/master/tmva101__Training_8py.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py.html,1,['interface'],['interface']
Integrability,"es. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:50395,depend,dependentOverlaps,50395,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,146,['depend'],['dependentOverlaps']
Integrability,"es. The full classification of a given state will provide the following information: the deepest physical node containing the position vector, the distance to the closest boundary along the direction vector, the next physical node after propagating the current point with this distance and the safety distance to the nearest boundary. This information allows the propagation of particles inside a detector geometry by taking into account both geometrical and physical constraints.; We will hereby describe the user interface of TGeo to access tracking functionality. This allows either developing a tracker for simple navigation within a given geometry, either interfacing to an external tracking engine such as GEANT. Note that the abstract interface for external trackers can be found in $ROOTSYS/vmc folder and it can be used to run GEANT3, GEANT4 and FLUKA-based simulations (*) by using directly a geometry described with ROOT.; The interface methods related to tracking are incorporated into TGeoManager class and implemented in the navigator class TGeoNavigator. In order to be able to start tracking, one has to define the initial state providing the starting point \(\vec{r_0}\) and direction \(\vec{n_0}\) . There are several ways of doing that. TGeoNavigator Class; One geometry may have several independent navigators to query to localize points or compute distances. The geometry manager holds a list of active navigators accessible via:; TObjArray *navigators = gGeoManager->GetListOfNavigators();; TGeoManager::GetListOfNavigatorsTGeoNavigatorArray * GetListOfNavigators() constGet list of navigators for the calling thread.Definition TGeoManager.cxx:836; TObjArrayAn array of TObjects.Definition TObjArray.h:31; Upon closing the geometry a default navigator is provided as first one in this list, but one may add its own via:; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; // Store the index of the user navigator; Int_t inav = gGeoManager->AddNavigator(navig);; // Make its ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:66568,interface,interface,66568,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['interface'],['interface']
Integrability,"es. The full classification of a given state will provide the following information: the deepest physical node containing the position vector, the distance to the closest boundary along the direction vector, the next physical node after propagating the current point with this distance and the safety distance to the nearest boundary. This information allows the propagation of particles inside a detector geometry by taking into account both geometrical and physical constraints.; We will hereby describe the user interface of TGeo to access tracking functionality. This allows either developing a tracker for simple navigation within a given geometry, either interfacing to an external tracking engine such as GEANT. Note that the abstract interface for external trackers can be found in $ROOTSYS/vmc folder and it can be used to run GEANT3, GEANT4 and FLUKA-based simulations (*) by using directly a geometry described with ROOT.; The interface methods related to tracking are incorporated into TGeoManager class and implemented in the navigator class TGeoNavigator. In order to be able to start tracking, one has to define the initial state providing the starting point \(\vec{r_0}\) and direction \(\vec{n_0}\) . There are several ways of doing that.; 18.5.1 TGeoNavigator Class; One geometry may have several independent navigators to query to localize points or compute distances. The geometry manager holds a list of active navigators accessible via:; TObjArray *navigators = gGeoManager->GetListOfNavigators();; Upon closing the geometry a default navigator is provided as first one in this list, but one may add its own via:; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; // Store the index of the user navigator; Int_t inav = gGeoManager->AddNavigator(navig);; // Make its own navigator the active one; gGeoManager->SetCurrentNavigator(inav);; // Switch between navigators; gGeoManager->SetCurrentNavigator(0);; A navigator holds several variables describing the current navigatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:971640,interface,interface,971640,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"es. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:29025,depend,dependent,29025,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,7,['depend'],['dependent']
Integrability,"es.; 622 // At the end of the method, if the typedef name is matched, an AnnotatedRecordDecl; 623 // with the underlying RecordDecl is fed to the machinery.; 624 ; 625 const clang::RecordDecl* recordDecl = clang::dyn_cast<clang::RecordDecl>(typeDecl);; 626 const clang::TypedefNameDecl* typedefNameDecl = clang::dyn_cast<clang::TypedefNameDecl>(typeDecl);; 627 ; 628 // If typeDecl is not a RecordDecl, try to fetch the RecordDecl behind the TypedefDecl; 629 if (!recordDecl && typedefNameDecl) {; 630 recordDecl = ROOT::TMetaUtils::GetUnderlyingRecordDecl(typedefNameDecl->getUnderlyingType());; 631 }; 632 ; 633 // If at this point recordDecl is still NULL, we have a problem; 634 if (!recordDecl) {; 635 ROOT::TMetaUtils::Warning(""RScanner::TreatRecordDeclOrTypeNameDecl"",; 636 ""Could not cast typeDecl either to RecordDecl or could not get RecordDecl underneath typedef.\n"");; 637 return true;; 638 }; 639 ; 640 // Do not select unnamed records.; 641 if (!recordDecl->getIdentifier()); 642 return true;; 643 ; 644 // Do not select dependent types.; 645 if (recordDecl->isDependentType()); 646 return true;; 647 ; 648 if (fScanType == EScanType::kOnePCM && ROOT::TMetaUtils::IsStdClass(*recordDecl)); 649 return true;; 650 ; 651 ; 652 // At this point, recordDecl must be a RecordDecl pointer.; 653 ; 654 if (fRecordDeclCallback) {; 655 // Pass on any declaration. This is usually used to record dependency.; 656 // Since rootcint see C++ compliant header files, we can assume that; 657 // if a forward declaration or declaration has been inserted, the; 658 // classes for which we are creating a dictionary will be using; 659 // them either directly or indirectly. Any false positive can be; 660 // resolved by removing the spurrious dependency in the (user) header; 661 // files.; 662 fRecordDeclCallback(recordDecl);; 663 }; 664 ; 665 // in case it is implicit or a forward declaration, we are not interested.; 666 if(recordDecl->isImplicit() || !recordDecl->isCompleteDefinition()) {; 667 retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:21510,depend,dependent,21510,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['depend'],['dependent']
Integrability,"es.resize(nColumns, std::vector<Long64_t>(fNSlots));; 549 fStringEvtValues.resize(nColumns, std::vector<std::string>(fNSlots));; 550 fBoolEvtValues.resize(nColumns, std::deque<bool>(fNSlots));; 551}; 552 ; 553std::string RCsvDS::GetLabel(); 554{; 555 return ""RCsv"";; 556}; 557 ; 558RDataFrame FromCSV(std::string_view fileName, bool readHeaders, char delimiter, Long64_t linesChunkSize,; 559 std::unordered_map<std::string, char> &&colTypes); 560{; 561 ROOT::RDataFrame rdf(; 562 std::make_unique<RCsvDS>(fileName, readHeaders, delimiter, linesChunkSize, std::move(colTypes)));; 563 return rdf;; 564}; 565 ; 566} // ns RDF; 567 ; 568} // ns ROOT; RCsvDS.hxx; RRawFile.hxx; b#define b(i)Definition RSha256.hxx:100; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; TError.h; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32Vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCsvDS_8cxx_source.html:19463,message,messages,19463,doc/master/RCsvDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCsvDS_8cxx_source.html,1,['message'],['messages']
Integrability,"es; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as follows:; <file>.root are considered ROOT files and added to the InputFiles() list; <macro>.C are considered ROOT macros and also added to the InputFiles() list; <dir> is considered the desired working directory and available; via WorkingDirectory(), if more than one dir is specified the; last one will prevail; In TRint we set the working directory to the <dir>, the ROOT files are; connected, and the macros are executed. If your main TApplication is not; TRint you have to decide yourself what to do whith these options. void HandleIdleTimer(); Handle idle timeout. When this timer expires the registered idle command; will be executed by this routine and a signal will be emitted. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Help(const char* line); Print help on interpreter. void LoadGraphicsLibs(); Load shared libs neccesary for graphics. These libraries are only; loaded when gROOT->IsBatch() is kFALSE. void MakeBatch(); Switch to batch mode. Int_t ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); Parse the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:15022,rout,routine,15022,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,1,['rout'],['routine']
Integrability,"es; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 1e-12); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html:4284,Integrat,IntegratorOneDimOptions,4284,root/html534/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html,1,['Integrat'],['IntegratorOneDimOptions']
Integrability,"es; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 1e-12); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id: GaussLegendreIntegrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GaussLegendreIntegrator.html:4212,Integrat,IntegratorOneDimOptions,4212,root/html532/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GaussLegendreIntegrator.html,1,['Integrat'],['IntegratorOneDimOptions']
Integrability,es; RooObjCacheManager_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents!,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:38397,integrat,integration,38397,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,1,['integrat'],['integration']
Integrability,es; RooObjCacheManager_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::Op,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:38827,integrat,integration,38827,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['integrat'],['integration']
Integrability,"es; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooRealProxy_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMoment.html:33296,integrat,integration,33296,root/html534/RooAbsMoment.html,https://root.cern,https://root.cern/root/html534/RooAbsMoment.html,2,['integrat'],['integration']
Integrability,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/PiecewiseInterpolation.html:35200,integrat,integration,35200,root/html602/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html,4,['integrat'],['integration']
Integrability,"es_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2708 of file TF1.cxx. ◆ IntegralError() [2/2]. Double_t TF1::IntegralError ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . const Double_t * ; params = nullptr, . const Double_t * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:94909,message,message,94909,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['message'],['message']
Integrability,"escribing this class . ◆ Class_Name(). static const char * TSSLSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSSLSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TSSLSocket.h. ◆ Close(). void TSSLSocket::Close ; (; Option_t * ; option = """"). overridevirtual . Close the SSL connection. ; Reimplemented from TSocket.; Definition at line 164 of file TSSLSocket.cxx. ◆ DeclFileName(). static const char * TSSLSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TSSLSocket.h. ◆ IsA(). TClass * TSSLSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSocket.; Definition at line 78 of file TSSLSocket.h. ◆ Recv() [1/4]. Int_t TSSLSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TSSLSocket.h. ◆ Recv() [2/4]. Int_t TSSLSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TSSLSocket.h. ◆ Recv() [3/4]. Int_t TSSLSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:21380,message,message,21380,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['message'],['message']
Integrability,"ese are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant. string processCreateArg(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:19249,interface,interface,19249,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,1,['interface'],['interface']
Integrability,"ese. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:131380,integrat,integration,131380,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['integrat'],['integration']
Integrability,"esent. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooDataSet* generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); Special generator interface for generation of 'global observables' -- for RooStats tools. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; will show a unit normalized curve in the frame variable, taken at the present value; of other observables defined for this PDF. If a PDF is plotted in a frame in which a dataset has already been plotted, it will; show a projected curve integrated over all variables that were present in the shown; dataset except for the one on the x-axis. The normalization of the curve will also; be adjusted to the event count of the plotted dataset. An informational message; will be printed for each projection step that is performed. This function takes the following named arguments. Projection control. Slice(const RooArgSet& set) -- Override default projection behaviour by omittting observables listed; in set from the projection, resulting a 'slice' plot. Slicing is usually; only sensible in discrete observables; Project(const RooArgSet& set) -- Override default projection behaviour by projecting over observables; given in set and complete ignoring the default projection behavior. Advanced use only.; ProjWData(const RooAbsData& d) -- Override default projection _technique_ (integration). For observables present in given dataset; projection of PDF is achieved by constructing an average over all observable values in given set.; Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ProjWData(const RooArgSet& s, -- As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; const RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsPdf.html:68132,message,message,68132,root/html530/RooAbsPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsPdf.html,8,['message'],['message']
Integrability,"esents the first, second, or third order derivative of any RooAbsReal as calculated (numerically)...Definition RooDerivative.h:30; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CodeSquashContextA class to maintain the context for squashing of RooFit models into code.Definition CodeSquashContext.h:42; RooFit::EvalContextDefinition EvalContext.h:84; RooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor.Definition RooFunctor.h:25; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present i...Definition RooRealBinding.h:30; RooRealSumFuncDefinition RooRealSumFunc.h:26; RooRealSumPdfImplements a PDF constructed from a sum of functions:Definition RooRealSumPdf.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStringViewThe RooStringView is a wrapper around a C-style string that can also be constructed from a std::strin...Definition RooStringView.h:27; RooVectorDataStoreUses std::vector to store data columns.Definition RooVectorDataStore.h:41; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH3F3-D histogram with a float per channel (see TH1 documentation)Definition TH3.h:317; TListA doubly linked list.Definition TList.h:38; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:56775,interface,interface,56775,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['interface'],['interface']
Integrability,"esian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPassedEvents(bin), GetTotalEvents(bin),; SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. TList* GetListOfFunctions(). Long64_t Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using the operator+=(TEfficiency&). The merged result is stored in the current object. The statistic options and; the confidence level are taken from the current object. This function should be used when all TEfficiency objects correspond to; the same ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEfficiency.html:57913,depend,depends,57913,root/html532/TEfficiency.html,https://root.cern,https://root.cern/root/html532/TEfficiency.html,2,['depend'],['depends']
Integrability,"esian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - SetPassedEvents(bin), SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. TList* GetListOfFunctions(). Long64_t Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using the operator+=(TEfficiency&). The merged result is stored in the current object. The statistic options and; the confidence level are taken from the current object. This function should be used when all TEfficiency objects correspond to; the same process. The new weight is set according to:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:60367,depend,depends,60367,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,6,['depend'],['depends']
Integrability,"esis test. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); construct from the data and a model configuration (ModelConfig class); If the model configuration contains a Prior pdf it will be included in the full model; used by the profile likelihood calculator.; The default test size used is 0.05 ( for a 95% interval). ~ProfileLikelihoodCalculator(); destructor (delete the contained result of the fit). void DoReset() const; private method to reset and clear fit results; to be called when a new model or data are set in the calculator. void DoGlobalFit() const; private method to perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. A RooArgSet contained a copied of the null parameters must be previously specified; (either in the constructor or by using SetNullParameters ). ProfileLikelihoodCalculator(); default constructor (needed for I/O). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: ProfileLikelihoodCalculator.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-14 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:11761,interface,interface,11761,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,1,['interface'],['interface']
Integrability,"espect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctions;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLibrary;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatrixMulOpClass for Matrix-Matrix multiplication ;  CMemFunHandlerFunctor Handler to Wrap pointers to member functions The member function type must be (XXX means any name is allowed) : double XXX ( double x) for 1D functions and double XXXX (const double *x) for multi-dimensional functions ;  CMemGradFunHandlerFunctor Handler to Wrap pointers to member functions for the evaluation of the function and the gradient ;  CMersenneTwisterEngineRandom number generator class based on M ;  Cmeta_col_dot;  Cmeta_col_dot< 0 >;  Cmeta_dot;  Cmeta_dot< 0 >;  Cmeta_mag;  Cmeta_mag< 0 >;  Cmeta_matrix_dot;  Cmeta_matrix_dot< 0 >;  Cmeta_row_dot;  Cmeta_row_dot< 0 >;  CMinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:35903,wrap,wrapper,35903,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,6,"['Wrap', 'interface', 'wrap']","['Wrap', 'interface', 'wrapper']"
Integrability,"esponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:19485,message,message,19485,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,32,['message'],['message']
Integrability,"ess messages (GUI events) in the html widget. ; Reimplemented from TGCompositeFrame.; Definition at line 670 of file TGHtmlForm.cxx. ◆ ProcessScript(). virtual char * TGHtml::ProcessScript ; (; TGHtmlScript * ; ). inlinevirtual . Definition at line 958 of file TGHtml.h. ◆ ProcessToken(). virtual int TGHtml::ProcessToken ; (; TGHtmlElement * ; , . const char * ; , . int ;  . ). inlinevirtual . Definition at line 928 of file TGHtml.h. ◆ PushStyleStack(). void TGHtml::PushStyleStack ; (; int ; tag, . SHtmlStyle_t ; style . ). protected . Push a new rendering style onto the stack. ; tag - Tag for this style. Normally the end-tag such as </h3> or </em>. style - The style to push ; Definition at line 66 of file TGHtmlSizer.cxx. ◆ RadioChanged(). void TGHtml::RadioChanged ; (; const char * ; name, . const char * ; val . ). virtual . Emit RadioChanged() signal. ; Definition at line 1313 of file TGHtml.cxx. ◆ Redraw(). void TGHtml::Redraw ; (; ). protected . This routine is invoked in order to redraw all or part of the HTML widget. ; This might happen because the display has changed, or in response to an expose event. In all cases, though, this routine is called by an idle handler. ; Definition at line 544 of file TGHtml.cxx. ◆ RedrawArea(). void TGHtml::RedrawArea ; (; int ; left, . int ; top, . int ; right, . int ; bottom . ). protected . If any part of the screen needs to be redrawn, then call this routine with the values of a box (in window coordinates) that needs to be redrawn. ; This routine will schedule an idle handler to do the redraw.; The box coordinates are relative to the clipping window (fCanvas). ; Definition at line 789 of file TGHtml.cxx. ◆ RedrawBlock(). void TGHtml::RedrawBlock ; (; TGHtmlBlock * ; p). protected . Redraw the TGHtmlBlock given. ; Definition at line 866 of file TGHtml.cxx. ◆ RedrawEverything(). void TGHtml::RedrawEverything ; (; ). protected . Call this routine to force the entire widget to be redrawn. ; Definition at line 877 of file TGHtml.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:82295,rout,routine,82295,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"ess(). TObject * TCling__GetObjectAddress ; (; const char * ; Name, . void *& ; LookupCtx . ). Definition at line 600 of file TCling.cxx. ◆ TCling__GetObjectDecl(). const Decl * TCling__GetObjectDecl ; (; TObject * ; obj). Definition at line 604 of file TCling.cxx. ◆ TCling__InvalidateGlobal(). void TCling__InvalidateGlobal ; (; const clang::Decl * ; D). Definition at line 574 of file TCling.cxx. ◆ TCling__IsAutoLoadNamespaceCandidate(). int TCling__IsAutoLoadNamespaceCandidate ; (; const clang::NamespaceDecl * ; nsDecl). Definition at line 639 of file TCling.cxx. ◆ TCling__LibraryLoadedRTTI(). void TCling__LibraryLoadedRTTI ; (; const void * ; dyLibHandle, . const char * ; canonicalName . ). Definition at line 583 of file TCling.cxx. ◆ TCling__LibraryLoadingFailed(). bool TCling__LibraryLoadingFailed ; (; const std::string & ; errmessage, . const std::string & ; libStem, . bool ; permanent, . bool ; resolved . ). Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name, which is extracted by error messages we get from callback from cling. ; Return true when the missing library was autoloaded. ; Definition at line 351 of file TCling.cxx. ◆ TCling__LibraryUnloadedRTTI(). void TCling__LibraryUnloadedRTTI ; (; const void * ; dyLibHandle, . const char * ; canonicalName . ). Definition at line 593 of file TCling.cxx. ◆ TCling__LoadLibrary(). int TCling__LoadLibrary ; (; const char * ; library). Load a library. ; Definition at line 333 of file TCling.cxx. ◆ TCling__LockCompilationDuringUserCodeExecution(). void * TCling__LockCompilationDuringUserCodeExecution ; (; ). Lock the interpreter. ; Definition at line 368 of file TCling.cxx. ◆ TCling__PrintStackTrace(). void TCling__PrintStackTrace ; (; ). Print a StackTrace! ; Definition at line 326 of file TCling.cxx. ◆ TCling__RegisterRdictForLoadPCM(). void TCling__RegisterRdictForLoadPCM ; (; const std::string & ; pcmFileNameFullPath, . llvm::StringRef * ; pcmContent . ). Definition at line 588 of file TClin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx.html:19439,message,messages,19439,doc/master/TCling_8cxx.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx.html,1,['message'],['messages']
Integrability,"essCreateArg(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT constructor interface, return constructor string argument #idx as RooResolutionModel reference found in workspace. RooAbsCategory& asCATFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. RooAbsCategoryLValue& asCATLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFactoryWSTool.html:19407,interface,interface,19407,root/html528/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html528/RooFactoryWSTool.html,6,['interface'],['interface']
Integrability,"essInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.2 .  CTPythia6CleanerUtility class to manage the TPythia6 instance ;  CTPythia6DecayerThis class implements the TVirtualMCDecayer interface ;  CTPythia8TPythia8 is an interface class to C++ version of Pythia 8.1 ; event generators, written by T.Sjostrand ;  CTPythia8DecayerThis class implements the TVirtualMCDecayer interface using TPythia8 ;  CTPython;  CTQApplication;  CTQCanvasImp;  CTQCanvasMenu;  CTQClass;  CTQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creating instances of command objects ;  CTQConnectionTQConnection class is an internal class, used in the object communication mechanism ;  CTQObjectThis is the ROOT implementation of the Qt object communication mechanism (see also http://www.troll.no/qt/metaobjects.html) ;  CTQObjSender;  CTQpDataBase;  CTQpDataDens;  CTQpDataSparse;  CTQpLinSolverBase;  CTQpLinSolverDens;  CTQpLinSolverSparse;  CTQpProbBase;  CTQpProbDens;  CTQpProbSparse;  CTQpResidual;  CTQpSolverBase;  CTQpVar;  CTQRootApplication;  CTQRootCanvas;  CTQRootDialog;  CTQRootGuiFactory;  CTQtRootGuiFactory;  CT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:205945,interface,interface,205945,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['interface'],['interface']
Integrability,essage logging stream for message with given RooFit::MsgLevel or higher. ; Higher means that messages with higher priority/severity are issued.; This method accepts the following arguments to configure the stream: . Output Style options . Prefix(bool flag=true) Prefix all messages in this stream with Topic/Originator information . Filtering options . Topic() Restrict stream to messages on given topic . ObjectName(const char*) Restrict stream to messages from object with given name . ClassName(const char*) Restrict stream to messages from objects with given class name . BaseClassName(const char*)Restrict stream to messages from objects with given base class name . LabelName(const chat*) Restrict stream to messages from objects setAttribute(const char*) tag with given name . Output redirection options . OutputFile(const char*) Send output to file with given name. Multiple streams can write to same file. . OutputStream(ostream&) Send output to given C++ stream. Multiple message streams can write to same c++ stream . The return value is the unique ID of the defined stream. PyROOT; The RooMsgService::addStream() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArg of the function. . Definition at line 177 of file RooMsgService.cxx. ◆ anyDebug(). bool RooMsgService::anyDebug ; (; ). static . Returns true if any debug level stream is active. ; Definition at line 138 of file RooMsgService.cxx. ◆ Class(). static TClass * RooMsgService::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooMsgService::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooMsgService::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 246 of file RooMsgService.h. ◆ clearErrorCount(). void RooMsgService::clearErrorCount ; (; ). inline . Definition at line 200 of file RooMsgService.h. ◆ debugCode(). Int_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:17088,message,message,17088,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['message'],['message']
Integrability,"essage& mess, TList* slaves); Broadcast a message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Broadcast(const TMessage& mess, TProof::ESlaves list = kActive); Broadcast a message to all slaves in the specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:39927,message,message,39927,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,10,['message'],['message']
Integrability,"essage.cxx. ◆ DeclFileName(). static const char * TMessage::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 96 of file TMessage.h. ◆ EnableSchemaEvolution(). void TMessage::EnableSchemaEvolution ; (; Bool_t ; enable = kTRUE). inline . Definition at line 78 of file TMessage.h. ◆ EnableSchemaEvolutionForAll(). void TMessage::EnableSchemaEvolutionForAll ; (; Bool_t ; enable = kTRUE). static . Static function enabling or disabling the automatic schema evolution. ; By default schema evolution support is off. ; Definition at line 116 of file TMessage.cxx. ◆ ForceWriteInfo(). void TMessage::ForceWriteInfo ; (; TVirtualStreamerInfo * ; info, . Bool_t ; force . ). overridevirtual . Force writing the TStreamerInfo to the message. ; Reimplemented from TBufferIO.; Definition at line 132 of file TMessage.cxx. ◆ Forward(). void TMessage::Forward ; (; ). Change a buffer that was received into one that can be send, i.e. ; forward a just received message. ; Definition at line 144 of file TMessage.cxx. ◆ GetClass(). TClass * TMessage::GetClass ; (; ); const. inline . Definition at line 71 of file TMessage.h. ◆ GetCompressionAlgorithm(). Int_t TMessage::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 100 of file TMessage.h. ◆ GetCompressionLevel(). Int_t TMessage::GetCompressionLevel ; (; ); const. inline . Definition at line 106 of file TMessage.h. ◆ GetCompressionSettings(). Int_t TMessage::GetCompressionSettings ; (; ); const. inline . Definition at line 112 of file TMessage.h. ◆ GetStreamerInfos(). TList * TMessage::GetStreamerInfos ; (; ); const. inline . Definition at line 80 of file TMessage.h. ◆ IsA(). TClass * TMessage::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBufferFile.; Definition at line 96 of file TMessage.h. ◆ operator=(). void TMessage::operator= ; (; const TMessage & ; ). private . ◆ Reset() [1/2]. void TMessage::Reset ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:43535,message,message,43535,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['message'],['message']
Integrability,"essages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams ; for logging of e.g. DEBUG messages on particular topics or objects and or redirect streams to; C++ streams or files.; ; The singleton instance is accessible through RooMsgService::instance() ;; . Function Members (Methods); public:. ~StreamConfig(); voidaddTopic(RooFit::MsgTopic newTopic); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Bool_tmatch(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); RooMsgService::StreamConfig&operator=(const RooMsgService::StreamConfig&); RooMsgService::StreamConfig&operator=(RooMsgService::StreamConfig&&); voidremoveTopic(RooFit::MsgTopic oldTopic); RooMsgService::StreamConfigStreamConfig(); RooMsgService::StreamConfigStreamConfig(const RooMsgService::StreamConfig&); RooMsgService::StreamConfigStreamConfig(RooMsgService::StreamConfig&&). Data Members; public:. Bool_tactive; stringbaseClassName; stringclassName; Color_tcolor; RooFit::MsgLevelminLevel; stringobjectName; ostream*os; Bool_tprefix; stringtagName; Int_ttopic; Bool_tuniversal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const RooAbsArg* obj); Determine if message from given object at given level on given topic is logged. Bool_t match(RooFit::MsgLevel level, RooFit::MsgTopic facility, const TObject* obj); Determine if message from given object at given level on given topic is logged. void addTopic(RooFit::MsgTopic newTopic). void removeTopic(RooFit::MsgTopic oldTopic). » Last changed: Tue Jun 30 14:34:07 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService__StreamConfig.html:2513,message,message,2513,root/html602/RooMsgService__StreamConfig.html,https://root.cern,https://root.cern/root/html602/RooMsgService__StreamConfig.html,4,['message'],['message']
Integrability,"essed with the silent flag. RooAbsArg* addClone(const RooAbsArg& var, Bool_t silent); Add clone of specified element to an owning set. If sucessful, the; set will own the clone, not the original. The operation will fail if; a similarly named object already exists in the set, or; the set is not specified to own its elements. Eventual error messages; can be suppressed with the silent flag. RooAbsArg& operator[](const char* name) const; Array operator. Named element must exist in set, otherwise; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. Bool_t checkForDup(const RooAbsArg& arg, Bool_t silent) const; Check if element with var's name is already in set. Double_t getRealValue(const char* name, Double_t defVal = 0, Bool_t verbose = kFALSE) const; Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:18658,message,messages,18658,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,1,['message'],['messages']
Integrability,"ession of signals; TList*fUWHandlerslist of event handlers for unknown windows; EGEventTypefWaitForEventevent to wait for; Window_tfWaitForWindowwindow in which to wait for event; Pixel_tfWhitewhite color index; THashList*fWlistlist of frames; Int_tfXfdfile descriptor of connection to server; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGClient(const char* dpyName = 0); Create a connection with the display sever on host dpyName and setup; the complete GUI system, i.e., graphics contexts, fonts, etc. for all; widgets. const TGWindow * GetRoot() const; Returns current root (i.e. base) window. By changing the root; window one can change the window hierarchy, e.g. a top level; frame (TGMainFrame) can be embedded in another window. const TGWindow * GetDefaultRoot() const; Returns the root (i.e. desktop) window. Should only be used as parent; for frames that will never be embedded, like popups, message boxes,; etc. (like TGToolTips, TGMessageBox, etc.). void SetRoot(TGWindow* root = 0); Sets the current root (i.e. base) window. By changing the root; window one can change the window hierarchy, e.g. a top level; frame (TGMainFrame) can be embedded in another window. UInt_t GetDisplayWidth() const; Get display width. UInt_t GetDisplayHeight() const; Get display height. const TGPicture * GetPicture(const char* name); Get picture from the picture pool. Picture must be freed using; TGClient::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGClient::FreePicture(). If; picture is not found 0 is returned. void FreePicture(const TGPicture* pic); Free picture resource. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get graphics context from the gc poo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGClient.html:12793,message,message,12793,root/html528/TGClient.html,https://root.cern,https://root.cern/root/html528/TGClient.html,1,['message'],['message']
Integrability,"estBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; Xarg, divided by volume (specified by fBox). Parameters:. - Xarg - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'Xarg', divided by the box volume. virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTargetDensity.html:6053,message,message,6053,root/html530/TMVA__PDEFoamTargetDensity.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTargetDensity.html,3,['message'],['message']
Integrability,"estBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamTargetDensity.html:6072,message,message,6072,root/html534/TMVA__PDEFoamTargetDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamTargetDensity.html,2,['message'],['message']
Integrability,"estBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::FirstSsiz_t First(char c) constFind first occurrence of a character c.Definition TString.cxx:538; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:184227,message,message,184227,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['message'],['message']
Integrability,"estSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iterations when running a MC integration algorithm; If not set use default algorithmic values; In case of ToyMC sampling of the nuisance the value is 100; In case of using the GSL MCintegrations types the default value is; defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls(). { fNumIterations = numIters; }. void ForceNuisancePdf(RooAbsPdf& pdf); force the nuisance pdf when using the toy mc sampling. { fNuisancePdf = &pdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: BayesianCalculator.h 39975 2011-06-26 22:49:46Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__BayesianCalculator.html:17273,integrat,integration,17273,root/html532/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__BayesianCalculator.html,3,"['Integrat', 'integrat']","['IntegratorMultiDimOptions', 'integration']"
Integrability,"estSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iterations when running a MC integration algorithm; If not set use default algorithmic values; In case of ToyMC sampling of the nuisance the value is 100; In case of using the GSL MCintegrations types the default value is; defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls(). { fNumIterations = numIters; }. void ForceNuisancePdf(RooAbsPdf& pdf); force the nuisance pdf when using the toy mc sampling. { fNuisancePdf = &pdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: BayesianCalculator.h 39977 2011-06-26 22:57:52Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:17273,integrat,integration,17273,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,1,['integrat'],['integration']
Integrability,"est_y - coordinates within the destination window; child - returns the child of ""dest"" if the coordinates; are contained in a mapped child of the destination; window; otherwise, child is set to 0. void GetWindowSize(Drawable_t id, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Returns the location and the size of window ""id"". x, y - coordinates of the upper-left outer corner relative to the; parent window's origin; w, h - the inside size of the window, not including the border. void FillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); Fills the region closed by the specified path. The path is closed; automatically if the last point in the list does not coincide with the; first point. Point_t *points - specifies an array of points; Int_t npnt - specifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Returns the root window the pointer is logically on and the pointer; coordinates relative to the root window's origin. id - specifies the window; rotw - the root window that the pointer is in; childw - the child window that the pointer is located in, if any; root_x, root_y - the pointer coordinates relative to the root window's; origin; win_x, win_y - the pointer coordinates relative to the specified; window ""id""; mask - the current state of the modifier keys and pointer; buttons. void SetForeground(GContext_t gc, ULong_t foreground); Sets the foreground color for the specified GC (shortcut for ChangeGC; with only foreground mask set). gc - specifies the GC; foreground - the foreground you want to set; (see also the GCValues_t structure). void SetClipRectangles(GContext_t gc, Int_t x, Int_t y, Rectangle_t* recs, Int_t n); Sets clipping rectangles in graphics context. [x,y] specify the ori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:58522,depend,dependent,58522,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,10,['depend'],['dependent']
Integrability,estatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file RootFinder.h. ◆ IsA(). virtual TClass * TMVA::RootFinder::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 74 of file RootFinder.h. ◆ Log(). MsgLogger & TMVA::RootFinder::Log ; (; ); const. inlineprivate . Definition at line 72 of file RootFinder.h. ◆ Root(). Double_t TMVA::RootFinder::Root ; (; Double_t ; refValue). Root finding using Brents algorithm; taken from CERNLIB function RZERO. ; Definition at line 71 of file RootFinder.cxx. ◆ Streamer(). virtual void TMVA::RootFinder::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::RootFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file RootFinder.h. Member Data Documentation. ◆ fAbsTol. Double_t TMVA::RootFinder::fAbsTol. private . absolute tolerance deviation ; Definition at line 66 of file RootFinder.h. ◆ fLogger. MsgLogger* TMVA::RootFinder::fLogger. mutableprivate . ! message logger ; Definition at line 71 of file RootFinder.h. ◆ fMaxIter. Int_t TMVA::RootFinder::fMaxIter. private . maximum number of iterations ; Definition at line 65 of file RootFinder.h. ◆ fMethod. MethodBase* TMVA::RootFinder::fMethod. private . Definition at line 69 of file RootFinder.h. ◆ fRootMax. Double_t TMVA::RootFinder::fRootMax. private . maximum root value ; Definition at line 64 of file RootFinder.h. ◆ fRootMin. Double_t TMVA::RootFinder::fRootMin. private . minimum root value ; Definition at line 63 of file RootFinder.h. Libraries for TMVA::RootFinder:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RootFinder.h; tmva/tmva/src/RootFinder.cxx. TMVARootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:12761,message,message,12761,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['message'],['message']
Integrability,ested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataWeightedAverage.html:37041,integrat,integration,37041,root/html534/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html534/RooDataWeightedAverage.html,2,['integrat'],['integration']
Integrability,"ested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _catSet;  Set of input category. ;  ;  Protected Attributes inherited from RooAbsCategory; value_type _currentIndex {std::numeric_limits<int>::min()};  Current category state. ;  ; std::vector< std::string > _insertionOrder;  Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ;  ; std::map< value_type, std::unique_ptr< RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:40572,interface,interface,40572,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,1,['interface'],['interface']
Integrability,"estonLL::BarlowCache> >_barlowCache; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAbsData*_data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html:35375,integrat,integration,35375,root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,4,['integrat'],['integration']
Integrability,"estroyPhysical (UInt_t phid);  Destroy physical shape defined by unique 'ID'. ;  ; virtual Int_t DestroyPhysicals ();  Destroy physical shapes. ;  ; void DumpMapSizes () const;  Print sizes of logical and physical-shape maps. ;  ; void EndSmartRefresh ();  Wipes logicals in refresh-cache. ;  ; virtual void EndUpdate (Bool_t minorChange=kTRUE, Bool_t sceneChanged=kTRUE, Bool_t updateViewers=kTRUE);  Exit scene update mode. ;  ; TGLLogicalShape * FindLogical (TObject *logid) const override;  Find and return logical shape identified by unique logid. ;  ; TGLLogicalShape * FindLogicalSmartRefresh (TObject *ID) const;  Find and return logical shape identified by unique 'ID' in refresh-cache. ;  ; virtual TGLPhysicalShape * FindPhysical (UInt_t phid) const;  Find and return physical shape identified by unique 'ID'. ;  ; TGLContextIdentity * GetGLCtxIdentity () const;  ; virtual UInt_t GetMaxPhysicalID ();  Returns the maximum used physical id. ;  ; void LodifySceneInfo (TGLRnrCtx &rnrCtx) override;  Setup LOD-dependant values in scene-info. ;  ; void PostDraw (TGLRnrCtx &rnrCtx) override;  Called after the rendering is finished. ;  ; void PreDraw (TGLRnrCtx &rnrCtx) override;  Initialize rendering. ;  ; void RebuildSceneInfo (TGLRnrCtx &rnrCtx) override;  Major change in scene, need to rebuild all-element draw-vector and sort it. ;  ; LogicalShapeMap_t & RefLogicalShapes ();  ; virtual void RenderAllPasses (TGLRnrCtx &rnrCtx, DrawElementPtrVec_t &elVec, Bool_t check_timeout);  Do full rendering of scene. ;  ; virtual void RenderElements (TGLRnrCtx &rnrCtx, DrawElementPtrVec_t &elVec, Bool_t check_timeout, const TGLPlaneSet_t *clipPlanes=nullptr);  Render DrawElements in elementVec with given timeout. ;  ; virtual void RenderHighlight (TGLRnrCtx &rnrCtx, DrawElementPtrVec_t &elVec);  ; void RenderOpaque (TGLRnrCtx &rnrCtx) override;  Render opaque elements. ;  ; void RenderSelOpaque (TGLRnrCtx &rnrCtx) override;  Render selected opaque elements. ;  ; void RenderSelOpaqueFor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:13052,depend,dependant,13052,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['depend'],['dependant']
Integrability,"estructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in the expression in case of an error (wrong number) returns 0.0 num - number of parameter (counted from 0) ;  ; TString GetProofSelectorName () const;  Returns appropriate TSelector class name for proof for the object that is to be drawn assumes that Parse() method has been called before. ;  ; TString const & GetSelection () const;  ; bool GetShouldDraw () const;  ; TString GetVarExp () const;  Returns the variable string, i.e. [var1[:var2[:var2[:var4]]]]. ;  ; TString GetVarExp (Int_t num) const;  Returns the num-th variable string in case of an error prints an error message and returns an empty string. ;  ; TClass * IsA () const override;  ; bool IsSpecified (int num) const;  returns true if the num-th parameter was specified otherwise returns fFALSE in case of an error (wrong num) prints an error message and returns false. ;  ; bool Parse (const char *varexp, const char *selection, Option_t *option);  Parses parameters from TTree::Draw(). ;  ; void SetObjectName (const char *s);  ; void SetOriginal (TObject *o);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void Ap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:2575,message,message,2575,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['message'],['message']
Integrability,esubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; pRooAbsTestStatistic*RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTestStatistic::_init! Is object initialized; Int_tRooAbsReal::_intValue! Tra,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsOptTestStatistic.html:38821,integrat,integration,38821,root/html602/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsOptTestStatistic.html,4,['integrat'],['integration']
Integrability,"esult; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOracleResult Oracle query result; TOracleRow One row of Oracle query result; TOracleServer Connection to Oracle server; TOracleStatement SQL statement class for Oracle; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TPARA PARA shape; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive Generate work packets for parallel processing; TPacketizerUnit Generate work packets for parallel processing; TPad A Graphics pad; TPadEditor editor of TPad objects; TPadPainter Abstract interface for painting in TPad; TPainter3dAlgorithms Hidden line removal package; TPair Pair TObject*, TObject*; TPaletteAxis class used to display a color palette axis for 2-d plots; TPaletteEditor Base class for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:104437,wrap,wrapper,104437,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['wrap'],['wrapper']
Integrability,"esystem in; 4787 // TClass from the one in the AST.; 4788 if (const ValueDecl* decl = (const ValueDecl*) d){; 4789 std::string ioName;; 4790 bool hasIoName = ROOT::TMetaUtils::ExtractAttrPropertyFromName(*decl,""ioname"",ioName);; 4791 if (hasIoName && ioName != name) return nullptr;; 4792 }; 4793 return d;; 4794 }; 4795 // We are looking up for something on the TU scope.; 4796 // FIXME: We do not want to go through TClingClassInfo(fInterpreter) because of redundant deserializations. That; 4797 // interface will actually construct iterators and walk over the decls on the global scope. In would return the first; 4798 // occurrence of a decl with the looked up name. However, that's not what C++ lookup would do: if we want to switch; 4799 // to a more complete C++ lookup interface we need sift through the found names and pick up the declarations which; 4800 // are only fulfilling ROOT's understanding for a Data Member.; 4801 // FIXME: We should probably deprecate the TClingClassInfo(fInterpreter) interface and replace it withe something; 4802 // similar as below.; 4803 using namespace clang;; 4804 Sema& SemaR = fInterpreter->getSema();; 4805 DeclarationName DName = &SemaR.Context.Idents.get(name);; 4806 ; 4807 LookupResult R(SemaR, DName, SourceLocation(), Sema::LookupOrdinaryName,; 4808 Sema::ForExternalRedeclaration);; 4809 ; 4810 cling::utils::Lookup::Named(&SemaR, R);; 4811 ; 4812 LookupResult::Filter F = R.makeFilter();; 4813 // Filter the data-member looking decls.; 4814 while (F.hasNext()) {; 4815 NamedDecl *D = F.next();; 4816 if (isa<VarDecl>(D) || isa<FieldDecl>(D) || isa<EnumConstantDecl>(D) ||; 4817 isa<IndirectFieldDecl>(D)); 4818 continue;; 4819 F.erase();; 4820 }; 4821 F.done();; 4822 ; 4823 if (R.isSingleResult()); 4824 return R.getFoundDecl();; 4825 return nullptr;; 4826}; 4827 ; 4828////////////////////////////////////////////////////////////////////////////////; 4829/// Return pointer to cling Decl of global/static variable that is located; 4830/// at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:187269,interface,interface,187269,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interface']
Integrability,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:32967,integrat,integration,32967,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['integrat'],['integration']
Integrability,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:13676,integrat,integration,13676,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,6,['integrat'],['integration']
Integrability,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:28239,integrat,integration,28239,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,25,['integrat'],['integration']
Integrability,"et &dependentVars, const RooArgSet *projectedVars,; 817 RooArgSet *&cloneSet, const char* rangeName, const RooArgSet* condObs) const; 818{; 819 // Get the set of our leaf nodes; 820 RooArgSet leafNodes;; 821 RooArgSet treeNodes;; 822 leafNodeServerList(&leafNodes,this);; 823 treeNodeServerList(&treeNodes,this) ;; 824 ; 825 ; 826 // Check that the dependents are all fundamental. Filter out any that we; 827 // do not depend on, and make substitutions by name in our leaf list.; 828 // Check for overlaps with the projection variables.; 829 for (const auto arg : dependentVars) {; 830 if(!arg->isFundamental() && !dynamic_cast<const RooAbsLValue*>(arg)) {; 831 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: variable \"""" << arg->GetName(); 832 << ""\"" of wrong type: "" << arg->ClassName() << std::endl;; 833 return nullptr;; 834 }; 835 ; 836 RooAbsArg *found= treeNodes.find(arg->GetName());; 837 if(!found) {; 838 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: \"""" << arg->GetName(); 839 << ""\"" is not a dependent and will be ignored."" << std::endl;; 840 continue;; 841 }; 842 if(found != arg) {; 843 if (leafNodes.find(found->GetName())) {; 844 leafNodes.replace(*found,*arg);; 845 } else {; 846 leafNodes.add(*arg) ;; 847 ; 848 // Remove any dependents of found, replace by dependents of LV node; 849 RooArgSet lvDep;; 850 arg->getObservables(&leafNodes, lvDep);; 851 for (const auto lvs : lvDep) {; 852 RooAbsArg* tmp = leafNodes.find(lvs->GetName()) ;; 853 if (tmp) {; 854 leafNodes.remove(*tmp) ;; 855 leafNodes.add(*lvs) ;; 856 }; 857 }; 858 }; 859 }; 860 ; 861 // check if this arg is also in the projection set; 862 if(nullptr != projectedVars && projectedVars->find(arg->GetName())) {; 863 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: \"""" << arg->GetName(); 864 << ""\"" cannot be both a dependent and a projected variable."" << std::endl;; 865 return nullptr;; 866 }; 867 }; 868 ; 869 // Remove ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:33693,depend,dependent,33693,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['depend'],['dependent']
Integrability,et &set);  set the global observables which will be used when creating the NLL so the constraint pdf's will be normalized correctly on the global observables when computing the NLL ;  ; void SetIntegrationType (const char *type);  set the integration type (possible type are) : ;  ; void SetLeftSideTailFraction (double leftSideFraction);  set the fraction of probability content on the left tail Central limits use 0.5 (default case) for upper limits it is 0 and 1 for lower limit For shortest intervals a negative value (i.e. ;  ; void SetModel (const ModelConfig &model) override;  set the model via the ModelConfig ;  ; virtual void SetNuisanceParameters (const RooArgSet &set);  specify the nuisance parameters (eg. the rest of the parameters) ;  ; virtual void SetNumIters (Int_t numIters);  set the number of iterations when running a MC integration algorithm If not set use default algorithmic values In case of ToyMC sampling of the nuisance the value is 100 In case of using the GSL MCintegrations types the default value is defined in ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls() ;  ; virtual void SetParameters (const RooArgSet &set);  specify the parameters of interest in the interval ;  ; virtual void SetPriorPdf (RooAbsPdf &pdf);  Set only the Prior Pdf. ;  ; void SetScanOfPosterior (int nbin=100);  use directly the approximate posterior function obtained by binning it in nbins by default the cdf is used by integrating the posterior if a value of nbin <= 0 the cdf function will be used ;  ; void SetShortestInterval ();  set the Bayesian calculator to compute the shortest interval (default is central interval) to switch off SetLeftSideTailFraction to the right value ;  ; void SetTestSize (double size) override;  set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval) ;  ; double Size () const override;  Get the size of the test (eg. rate of Type I error) ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:5996,integrat,integration,5996,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Integrability,"et = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCache",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:42875,integrat,integration,42875,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,5,['integrat'],['integration']
Integrability,"et = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. RooAbsCachedPdf(); Default constructor. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:48213,integrat,integration,48213,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,4,['integrat'],['integration']
Integrability,"et = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . #include <RooTemplateProxy.h>. Inheritance diagram for RooTemplateProxy< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTemplateProxy() [1/2]. template<class T > . RooTemplateProxy< T >::RooTemplateProxy ; (; ). inline . Definition at line 155 of file RooTemplateProxy.h. ◆ RooTemplateProxy() [2/2]. template<class T > . template<typename Bool = bool, typename = std::enable_if_t<std::is_same<Bool,bool>::value>> . RooTemplateProxy< T >::RooTemplateProxy ; (; const char * ; theName, . const char * ; desc, . RooAbsArg * ; owner, . Bool ; valueServer = true, . bool ; shapeServer = false . ). inline . Constructor with owner. ; Parameters. [in]theNameName of this proxy (for printing). ; [in]descDescription what this proxy should act as. ; [in]ownerThe object that owns the proxy. This is important for tracking of client-server dependencies. ; [in]valueServerNotify the owner if value changes. ; [in]shapeServerNotify the owner if shape (e.g. binning) changes. . Definition at line 166 of file RooTemplateProxy.h. Member Function Documentation. ◆ Class(). template<class T > . static TClass * RooTemplateProxy< T >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). template<class T > . static const char * RooTemplateProxy< T >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class T > . static constexpr Version_t RooTemplateProxy< T >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 448 of file RooTemplateProxy.h. ◆ DeclFileName(). template<class T > . static const char * RooTemplateProxy< T >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 448 of file RooTemplateProxy.h. ◆ IsA(). template<class T > . TClass * RooTemplateP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:22068,depend,dependencies,22068,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['depend'],['dependencies']
Integrability,"et Access Key in order to access each S3 file. They are provided to you by your S3 service provider. Those two keys can be provided to ROOT when initializing an object of this class by two means: a. by using the environmental variables S3_ACCESS_KEY and S3_SECRET_KEY, or b. by specifying them when opening each file.; You can use AWS temporary security credentials (temporary access key and secret access key), but you must also give the associated session token. The token may be set in the S3_SESSION_TOKEN environmental variable, or on open in the TOKEN option.; The first method is convenient if all the S3 files you want to access are hosted by a single provider. The second one is more flexible as it allows you to specify which credentials to use on a per-file basis. See the documentation of the constructor of this class for details on the syntax.; For generating and signing the HTTP request, this class uses TS3HTTPRequest.; For more information on the details of S3 protocol please refer to: ""Amazon Simple Storage Service Developer Guide"": http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html; ""Amazon Simple Storage Service REST API Reference"" http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html ; Definition at line 68 of file TS3WebFile.h. Public Member Functions;  TS3WebFile (const char *url, Option_t *options="""");  Construct a TS3WebFile object. ;  ; virtual ~TS3WebFile ();  ; const TString & GetAccessKey () const;  ; const TString & GetBucket () const;  ; const TString & GetObjectKey () const;  ; const TString & GetSecretKey () const;  ; const TUrl & GetUrl () const;  ; TClass * IsA () const override;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read the nbuf blocks described in arrays pos and len. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebFile;  TWebFile (const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:2144,protocol,protocol,2144,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['protocol'],['protocol']
Integrability,"et by either reusing an existing basket that needs to be drop (according to TTree:...Definition TBranch.cxx:1894; TBranch::GetBasketImplTBasket * GetBasketImpl(Int_t basket, TBuffer *user_buffer)Return pointer to basket basketnumber in this Branch.Definition TBranch.cxx:1226; TBranch::fEntryOffsetLenInt_t fEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers.Definition TBranch.h:119; TBranch::DeleteBasketsvirtual void DeleteBaskets(Option_t *option="""")Loop on all branch baskets.Definition TBranch.cxx:726; TBranch::GetBasketSeekvirtual Long64_t GetBasketSeek(Int_t basket) constReturn address of basket in the file.Definition TBranch.cxx:1302; TBranch::TBranchTBranch()Default constructor. Used for I/O by default.Definition TBranch.cxx:87; TBranch::SetCompressionSettingsvoid SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)Set compression settings.Definition TBranch.cxx:2805; TBranch::GetIconNameconst char * GetIconName() const overrideReturn icon name depending on type of branch.Definition TBranch.cxx:1332; TBranch::BackFillInt_t BackFill()Loop on all leaves of this branch to back fill Basket buffer.Definition TBranch.cxx:680; TBranch::~TBranch~TBranch() overrideDestructor.Definition TBranch.cxx:450; TBranch::fMaxBasketsInt_t fMaxBasketsMaximum number of Baskets so far.Definition TBranch.h:125; TBranch::fTotBytesLong64_t fTotBytesTotal number of bytes in all leaves before compression.Definition TBranch.h:136; TBranch::fTransientBufferTBuffer * fTransientBuffer! Pointer to the current transient buffer.Definition TBranch.h:151; TBranch::ReadBasketvirtual void ReadBasket(TBuffer &b)Loop on all leaves of this branch to read Basket buffer.Definition TBranch.cxx:2453; TBranch::GetTreeTTree * GetTree() constDefinition TBranch.h:252; TBranch::Classstatic TClass * Class(); TBranch::fFillLeavesFillLeaves_t fFillLeaves! Pointer to the FillLeaves implementation to use.Definition TBranch.h:163; TBranch::GetFullNamev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:127993,depend,depending,127993,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['depend'],['depending']
Integrability,"et existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting dataset or files unless; specified opt provides the answer!; If kOverwriteNoFiles is set, then a pointer to TList must be passed as; skippedFiles argument. The function will add to this list TFileInfo; objects describing all files that existed on the cluster and were; not uploaded. Communication Summary; Client Master; |------------>DataSetName----------->|; |<-------kMESS_OK/kMESS_NOTOK<-------| (Name OK/file exist); (*)|-------> call RegisterDataSet ------->|; (*) - optional. Int_t UploadDataSet(const char* , const char* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a wrapper around TFile::Cp.; *** Please use TProofMgr::UploadFiles. Upload a set of files and save the list of files by name dataSetName.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting dataset or files unless; specified opt provides the answer!; If kOverwriteNoFiles is set, then a pointer to TList must be passed as; skippedFiles argument. The function will add to this list TFileInfo; objects describing all files that existed on the cluster a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:89593,wrap,wrapper,89593,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['wrap'],['wrapper']
Integrability,"et file's modtime and check against time in map, if modtime not same get md5 and compare against md5 in map, if not same return kTRUE.; if no, get file's md5 and modtime and store in file map, ask slave if file exists with specific md5, if yes return kFALSE, if no return kTRUE. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 674 of file TApplicationRemote.cxx. ◆ Class(). static TClass * TApplicationRemote::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplicationRemote::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplicationRemote::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TApplicationRemote.h. ◆ Collect(). Int_t TApplicationRemote::Collect ; (; Long_t ; timeout = -1). private . Collect responses from the remote server. ; Returns the number of messages received. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). ; Definition at line 326 of file TApplicationRemote.cxx. ◆ CollectInput(). Int_t TApplicationRemote::CollectInput ; (; ). private . Collect and analyze available input from the socket. ; Returns 0 on success, -1 if any failure occurs. ; Definition at line 394 of file TApplicationRemote.cxx. ◆ DeclFileName(). static const char * TApplicationRemote::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TApplicationRemote.h. ◆ Interrupt(). void TApplicationRemote::Interrupt ; (; Int_t ; type = kRRI_Hard). Send interrupt OOB byte to server. ; Returns 0 if ok, -1 in case of error ; Definition at line 937 of file TApplicationRemote.cxx. ◆ IsA(). TClass * TApplicationRemote::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TApplication.; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:27177,message,messages,27177,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['message'],['messages']
Integrability,"et hook to TXSlave ctor. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSlave ();  Default constructor used by derived classes. ;  ; virtual void FlushSocket ();  ; void Init (TSocket *s, Int_t stype);  Init a PROOF slave object using the connection opened via s. ;  ; virtual void Interrupt (Int_t type);  Send interrupt OOB byte to master or slave servers. ;  ; virtual Int_t Ping ();  Ping the remote master or slave servers. ;  ; virtual TObjString * SendCoordinator (Int_t kind, const char *msg=0, Int_t int2=0);  Send message to intermediate coordinator. ;  ; virtual Int_t SendGroupPriority (const char *, Int_t);  ; virtual void SetAlias (const char *alias);  Set an alias for this session. ;  ; void SetSocket (TSocket *s);  ; virtual void SetStatus (Int_t st);  ; virtual void StopProcess (Bool_t abort, Int_t timeout);  Sent stop/abort request to PROOF server. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fArchComp;  ; Long64_t fBytesRead;  ; Float_t fCpuTime;  ; TString fGroup;  ; TString fImage;  ; TFileHandler * fInput;  ; TString fMsd;  ; TString fName;  ; TString fOrdinal;  ; Int_t fParallel;  ; Int_t fPerfIdx;  ; Int_t fPort;  ; TProof * fProof;  ; TString fProofWorkDir;  ; Int_t fProtocol;  ; Float_t fRealTime;  ; TString fROOTVers;  ; TString fSessionTag;  ; ESlaveTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlave.html:11818,message,message,11818,doc/master/classTSlave.html,https://root.cern,https://root.cern/doc/master/classTSlave.html,1,['message'],['message']
Integrability,"et of observables that can be integrated in one go; 618 RooArgSet innerSet ;; 619 findInnerMostIntegration(iset,innerSet,rangeName) ;; 620 ; 621 // If largest set of observables that can be integrated is empty set, problem was ill defined; 622 // Postpone error messaging and handling to end of function, exit loop here; 623 if (innerSet.empty()) {; 624 error = true ;; 625 break ;; 626 }; 627 ; 628 // Prepare name and title of integral to be created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24410,integrat,integrated,24410,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integrated']
Integrability,"et of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; map<pair<string,int>,BoxInfo*>_rangeBoxInfo; Double_tRooAbsPdf::_rawValue; vector<Double_t>_rho; TMatrixD*_rotMat; Bool_t_rotate; vector<Int_t>_sIdcs; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; vector<Double_t>_sigma; Double_t_sigmaAvgR; TVectorD*_sigmaR; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Double_t_sqrt2pi; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooListProxy_varList; vector<string>_varName; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; map<Int_t,Double_t>_wMap; vector<vector<Double_t> >*_weights!; vector<vector<Double_t> >_weights0; vector<vector<Double_t> >_weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNDKeysPdf.html:41218,integrat,integrator,41218,root/html526/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooNDKeysPdf.html,2,['integrat'],['integrator']
Integrability,"et of the events in a tree contained in a file - rootls: to list the content of a rootfile - rootmkdir: to create a directory in a rootfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its value has been changed to be equal to TTree::kMaxEntries.; MakeSelector; TTree::MakeSelector has been update to generate a code skeleton based on the TTreeReader rather than the old style relying on numeric data members replacements for the user objects. The main advantage is the lifting of the problem related to the fact that the old style was using fixed size array to represent variable size collection.; TTree::MakeSelector takes an option parameter that can be used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:9456,rout,routine,9456,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['rout'],['routine']
Integrability,"et sock. ;  ;  TPSocket (TInetAddress address, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t SetOption (ESockOptions opt, Int_t val) override;  Set socket options. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:1772,message,message,1772,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"et status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; RooFit::OwningPtr< RooArgSet > actualObservables (const RooArgSet &nset) const override;  Return the observables to be cached given the normalization set nset. ;  ; RooFit::OwningPtr< RooArgSet > actualParameters (const RooArgSet &nset) const override;  Return the parameters on which the cache depends given normalization set nset. ;  ; void calcParams ();  (Re)calculate effective parameters of this p.d.f. ;  ; PdfCacheElem * createCache (const RooArgSet *nset) const override;  Return specialized cache subclass for FFT calculations. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillCacheObject (PdfCacheElem &cache) const override;  Fill the contents of the cache the FFT convolution output. ;  ; void fillCacheSlice (FFTCacheElem &cache, const RooArgSet &slicePosition) const;  Fill a slice of cachePdf with the output of the FFT convolution calculation. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Create appropriate generator context for this convolution. ;  ; TString histNameSuffix () const override;  Suffix for cache",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:68384,depend,depends,68384,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['depend'],['depends']
Integrability,"et with all category function objects. RooArgSet allResolutionModels() const; Return set with all resolution model objects. RooArgSet allPdfs() const; Return set with all probability density function objects. list<RooAbsData*> allData() const; Return list of all dataset in the workspace. list<RooAbsData*> allEmbeddedData() const; Return list of all dataset in the workspace. list<TObject*> allGenericObjects() const; Return list of all generic objects in the workspace. Bool_t makeDir(); Create transient TDirectory representation of this workspace. This directory; will appear as a subdirectory of the directory that contains the workspace; and will have the name of the workspace suffixed with ""Dir"". The TDirectory; interface is read-only. Any attempt to insert objects into the workspace; directory representation will result in an error message. Note that some; ROOT object like TH1 automatically insert themselves into the current directory; when constructed. This will give error messages when done in a workspace; directory. Bool_t import(TObject& object, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; The object is cloned upon importation and the input argument does not need to live beyond the import call; This method is mostly useful for importing objects that do not have a settable name such as TMatrix. Returns kTRUE if an error has occurred. Bool_t addStudy(RooAbsStudy& s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:22981,message,messages,22981,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,6,['message'],['messages']
Integrability,"et!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooSetProxy_nsetNormalization set (optional); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Int_t_orderDerivation order; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; ROOT::Math::RichardsonDerivator*_rd! Derivator ; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_xObservable; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDerivative(); Default constructor. RooDerivative(const char* name, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDerivative.html:35377,integrat,integrator,35377,root/html534/RooDerivative.html,https://root.cern,https://root.cern/root/html534/RooDerivative.html,2,['integrat'],['integrator']
Integrability,"et&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); RooCacheManager<vector<double> >(Int_t maxSize = 2); RooCacheManager<vector<double> >(RooAbsArg* owner, Int_t maxSize = 2); RooCacheManager<vector<double> >(const RooCacheManager<vector<double> >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double>*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_vector_double___.html:3107,Integrat,Integration,3107,root/html602/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_vector_double___.html,2,['Integrat'],['Integration']
Integrability,"et* getAllConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). RooPlot* plotOn(RooP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:76899,integrat,integrator,76899,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['integrat'],['integrator']
Integrability,"et*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrho1; RooRealProxyrho2; RooRealProxysigp; RooRealProxyx; RooRealProxyxi.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBukinPdf.html:39875,integrat,integrator,39875,root/html532/RooBukinPdf.html,https://root.cern,https://root.cern/root/html532/RooBukinPdf.html,1,['integrat'],['integrator']
Integrability,"et*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; vector<double>_low; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; double_nominal; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_paramIter! do not persist; RooListProxy_paramList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LinInterpVar(); Default constructor. LinInterpVar(const char* name, const char* title, const RooArgList& _paramList, d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html:36829,integrat,integrator,36829,root/html602/RooStats__HistFactory__LinInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html,4,['integrat'],['integrator']
Integrability,"et, RooArgSet& anaIntSet). advertises the analytical integrals that are supported. 'integSet'; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. Double_t analyticalIntegral(Int_t code). Implements the actual analytical integral(s) advertised by; getAnalyticalIntegral. This functions will only be called with; codes returned by getAnalyticalIntegral, except code zero. The integration range for real each dependent to be integrated can; be obtained from the dependents' proxy functions min() and; max(). Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g. in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:3302,depend,dependents,3302,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,24,"['Integrat', 'depend']","['Integrated', 'dependents']"
Integrability,"et, const RooArgSet& nset); 3707{; 3708 return createRunningIntegral(iset,RooFit::SupNormSet(nset)) ;; 3709}; 3710 ; 3711 ; 3712 ; 3713////////////////////////////////////////////////////////////////////////////////; 3714/// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; 3715/// \f[; 3716/// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; 3717/// \f]; 3718///; 3719/// The actual integration calculation is only performed when the return object is evaluated. The name; 3720/// of the integral object is automatically constructed from the name of the input function, the variables; 3721/// it integrates and the range integrates over. The default strategy to calculate the running integrals is; 3722///; 3723/// - If the integrand (this object) supports analytical integration, construct an integral object; 3724/// that calculate the running integrals value by calculating the analytical integral each; 3725/// time the running integral object is evaluated; 3726///; 3727/// - If the integrand (this object) requires numeric integration to construct the running integral; 3728/// create an object of class RooNumRunningInt which first samples the entire function and integrates; 3729/// the sampled function numerically. This method has superior performance as there is no need to; 3730/// perform a full (numeric) integration for each evaluation of the running integral object, but; 3731/// only when one of its parameters has changed.; 3732///; 3733/// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; 3734/// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); 3735/// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; 3736/// granularity for the scanning technique can be controlled with the ScanParameters technique; 3737/// which allows to specify the number of samples to be taken, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:159034,integrat,integration,159034,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,3,['integrat'],"['integrates', 'integration']"
Integrability,"et::GetNEventsLong64_t GetNEvents(Types::ETreeType type=Types::kMaxTreeType) constDefinition DataSet.h:206; TMVA::DataSet::GetNClassEventsLong64_t GetNClassEvents(Int_t type, UInt_t classNumber)Definition DataSet.cxx:168; TMVA::DataSet::GetNTrainingEventsLong64_t GetNTrainingEvents() constDefinition DataSet.h:68; TMVA::DataSet::GetNSpectatorsUInt_t GetNSpectators() constaccess the number of targets through the datasetinfoDefinition DataSet.cxx:232; TMVA::DataSet::GetNVariablesUInt_t GetNVariables() constaccess the number of variables through the datasetinfoDefinition DataSet.cxx:216; TMVA::DataSet::SetCurrentTypevoid SetCurrentType(Types::ETreeType type) constDefinition DataSet.h:89; TMVA::DataSet::SetCurrentEventvoid SetCurrentEvent(Long64_t ievt) constDefinition DataSet.h:88; TMVA::EventDefinition Event.h:51; TMVA::Event::GetValueFloat_t GetValue(UInt_t ivar) constreturn value of i'th variableDefinition Event.cxx:236; TMVA::Event::GetWeightDouble_t GetWeight() constreturn the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not.Definition Event.cxx:389; TMVA::Event::GetSpectatorFloat_t GetSpectator(UInt_t ivar) constreturn spectator contentDefinition Event.cxx:261; TMVA::Event::GetClassUInt_t GetClass() constDefinition Event.h:86; TMVA::Event::SetSpectatorTypesvoid SetSpectatorTypes(const std::vector< char > &types)Definition Event.h:119; TMVA::Event::GetTargetFloat_t GetTarget(UInt_t itgt) constDefinition Event.h:102; TMVA::IncrementDefinition DataSetFactory.h:85; TMVA::MsgLoggerostringstream derivative to redirect and format outputDefinition MsgLogger.h:57; TMVA::RandomGeneratorDefinition Tools.h:299; TMVA::TreeInfoDefinition DataInputHandler.h:52; TMVA::TreeInfo::GetTreeTypeTypes::ETreeType GetTreeType() constDefinition DataInputHandler.h:64; TMVA::TreeInfo::GetClassNameconst TString & GetClassName() constDefinition DataInputHandler.h:65; TMVA::TreeInfo::GetWeightDouble_t GetWeight() constDefinition DataInputHandler.h:62; TMVA::Tree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:91747,depend,depending,91747,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['depend'],['depending']
Integrability,"et::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGButton::IsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tTGCheckButton::IsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTGCheckButton::IsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGTextButton::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); virtual voidMarkerSelected(Style_t marker = 0)SIGNAL ; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGButton::Pressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = """") const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGedMarkerSelect.html:11222,Message,Message,11222,root/html532/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html532/TGedMarkerSelect.html,2,['Message'],['Message']
Integrability,"et; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:10734,message,messages,10734,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,5,['message'],['messages']
Integrability,"et; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction2Binding_double_unsigned_int_double_.html:33489,integrat,integrator,33489,root/html532/RooCFunction2Binding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction2Binding_double_unsigned_int_double_.html,1,['integrat'],['integrator']
Integrability,"et<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooListProxy_list; TIterator*_listIter! do not persist; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRecursiveFraction.html:35024,integrat,integration,35024,root/html602/RooRecursiveFraction.html,https://root.cern,https://root.cern/root/html602/RooRecursiveFraction.html,4,['integrat'],['integration']
Integrability,"etAddress TServerSocket::GetLocalInetAddress ; (; ). overridevirtual . Return internet address of host to which the server socket is bound, i.e. ; the local host. In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented from TSocket.; Definition at line 245 of file TServerSocket.cxx. ◆ GetLocalPort(). Int_t TServerSocket::GetLocalPort ; (; ). overridevirtual . Get port # to which server socket is bound. In case of error returns -1. ; Reimplemented from TSocket.; Definition at line 258 of file TServerSocket.cxx. ◆ IsA(). TClass * TServerSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 95 of file TServerSocket.h. ◆ operator=(). void TServerSocket::operator= ; (; const TServerSocket & ; ). private . ◆ Recv() [1/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 84 of file TServerSocket.h. ◆ Recv() [2/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 86 of file TServerSocket.h. ◆ Recv() [3/4]. Int_t TServerSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if oth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:25169,message,message,25169,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['message'],['message']
Integrability,"etBit(kNoContextMenu);; fEc1->GetCanvas()->Connect(""ProcessedEvent(Int_t,Int_t,Int_t,TObject*)"",; ""MyClass"", this, ""HandleMyCanvas(Int_t,Int_t,Int_t,TObject*)"");. To embed a canvas derived from a TCanvas do the following:; TRootEmbeddedCanvas *embed = new TRootEmbeddedCanvas(0, p, w, h);; // note name must be 0, not null string """"; Int_t wid = embed->GetCanvasWindowId();; TCanvas *myc = new TCanvas(""myname"",10,10,wid);; embed->AdoptCanvas(myc);; // the TCanvas is adopted by the embedded canvas and will be; // destroyed by it; 25.9 The ROOT Graphics Editor (GED); Everything drawn in a ROOT canvas is an object. There are classes for all objects, and they fall into hierarchies. In addition, the ROOT has fully cross-platform GUI classes and provides all standard components for an application environment with common ‘look and feel’. The object-oriented, event-driven programming model supports the modern signals/slots communication mechanism. It handles user interface actions and allows total independence of interacting objects and classes. This mechanism uses the ROOT dictionary information and the Cling the C++ Interpreter to connect signals to slots methods.; Therefore, all necessary elements for an object-oriented editor design are in place. The editor complexity can be reduced by splitting it into discrete units of so-called object editors. Any object editor provides an object specific GUI. The main purpose of the ROOT graphics editor is the organization of the object editors’ appearance and the task sequence between them.; 25.9.1 Object Editors; Every object editor follows a simple naming convention: to have as a name the object class name concatenated with ‘Editor’ (e.g. for TGraph objects the object editor is TGraphEditor). Thanks to the signals/slots communication mechanism and to the method DistancetoPrimitive() that computes a ‘‘distance’’ to an object from the mouse position, it was possible to implement a signal method of the canvas that says which is the sel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1220860,interface,interface,1220860,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"etCompressionAlgorithm(). void TMessage::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). Set compression algorithm. ; Definition at line 242 of file TMessage.cxx. ◆ SetCompressionLevel(). void TMessage::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). Set compression level. ; Definition at line 264 of file TMessage.cxx. ◆ SetCompressionSettings(). void TMessage::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). Set compression settings. ; Definition at line 288 of file TMessage.cxx. ◆ SetLength(). void TMessage::SetLength ; (; ); const. protected . Set the message length at the beginning of the message buffer. ; This method is only called by TSocket::Send(). ; Definition at line 202 of file TMessage.cxx. ◆ SetWhat(). void TMessage::SetWhat ; (; UInt_t ; what). Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ; This makes the sending process synchronous. ; Definition at line 222 of file TMessage.cxx. ◆ Streamer(). void TMessage::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBufferFile. ◆ StreamerNVirtual(). void TMessage::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file TMessage.h. ◆ TagStreamerInfo(). void TMessage::TagStreamerInfo ; (; TVirtualStreamerInfo * ; info). overridevirtual . Remember that the StreamerInfo is being used in writing. ; When support for schema evolution is enabled the list of TStreamerInfo used to stream this object is kept in fInfos. This information is used by TSocket::Send that sends this list through the socket. This list is in turn used by TSocket::Recv to store the TStreamerInfo objects in the relevant TClass in case the TClass does not know yet about a particular",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:45756,message,message,45756,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,2,['message'],['message']
Integrability,"etConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:12374,wrap,wrapper,12374,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['wrap'],['wrapper']
Integrability,"etDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn bin lower edge for 1D histogram.Definition TH1.cxx:9152; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH1::GetSumw2virtual TArrayD * GetSumw2()Definition TH1.h:313; TH1::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width for 1D histogram.Definition TH1.cxx:9163; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::GetErrorXFloat_t GetErrorX() constDefinition TStyle.h:186; TVectorTTVectorT.Definition TVectorT.h:27; TVectorT::GetNrowsInt_t GetNrows() constDefinition TVectorT.h:73; TVectorT::GetLwbInt_t GetLwb() constDefinition TVectorT.h:71; bool; double; int; ROOT::Math::norm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:92604,message,message,92604,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['message'],['message']
Integrability,"etErrorHandler(ErrorHandlerFunc_t newhandler); 91{; 92 ErrorHandlerFunc_t oldhandler = gErrorHandler;; 93 gErrorHandler = newhandler;; 94 return oldhandler;; 95}; 96 ; 97////////////////////////////////////////////////////////////////////////////////; 98/// Returns the current error handler function.; 99 ; 100ErrorHandlerFunc_t GetErrorHandler(); 101{; 102 return gErrorHandler;; 103}; 104 ; 105 ; 106////////////////////////////////////////////////////////////////////////////////; 107/// General error handler function. It calls the user set error handler.; 108 ; 109void ErrorHandler(Int_t level, const char *location, const char *fmt, std::va_list ap); 110{; 111 thread_local Int_t buf_size(256);; 112 thread_local char *buf_storage(nullptr);; 113 ; 114 char small_buf[256];; 115 char *buf = buf_storage ? buf_storage : small_buf;; 116 ; 117 std::va_list ap_copy;; 118 va_copy(ap_copy, ap);; 119 ; 120 if (!fmt); 121 fmt = ""no error message provided"";; 122 ; 123 Int_t n = vsnprintf(buf, buf_size, fmt, ap_copy);; 124 if (n >= buf_size) {; 125 va_end(ap_copy);; 126 ; 127 buf_size = n + 1;; 128 if (buf != &(small_buf[0])); 129 delete[] buf;; 130 buf_storage = buf = new char[buf_size];; 131 ; 132 // Try again with a sufficiently large buffer; 133 va_copy(ap_copy, ap);; 134 vsnprintf(buf, buf_size, fmt, ap_copy);; 135 }; 136 va_end(ap_copy);; 137 ; 138 std::string bp = buf;; 139 if (level >= kSysError && level < kFatal) {; 140 bp.push_back(' ');; 141 if (GetErrorSystemMsgHandlerRef()); 142 bp += GetErrorSystemMsgHandlerRef()();; 143 else; 144 bp += std::string(""(errno: "") + std::to_string(errno) + "")"";; 145 }; 146 ; 147 if (level != kFatal); 148 gErrorHandler(level, level >= gErrorAbortLevel, location, bp.c_str());; 149 else; 150 gErrorHandler(level, kTRUE, location, bp.c_str());; 151}; 152 ; 153////////////////////////////////////////////////////////////////////////////////; 154/// This function can be used in abstract base classes in case one does; 155/// not want to make the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:4047,message,message,4047,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,1,['message'],['message']
Integrability,"etFCN are:. A generic functor object implementing operator()(const double * p) where p is the parameter vectors. In this case one needs to pass the number of parameters, the function object and optionally a vector of initial parameter values. Other optional parameter include the size of the data sets and a flag specifying if it is a chi2 (least-square fit). In the last two parameters are given, the chi2/ndf can be computed after fitting the data. template <class Function>; bool Fitter::SetFCN(unsigned int npar, Function & f,; const double * initialParameters = 0,; unsigned int dataSize=0, bool isChi2Fit = false). A function object implementing the ROOT::Math::IBaseFunctionMultiDim interface:. bool Fitter::SetFCN(const ROOT::Math::IBaseFunctionMultiDim & f,; const double * initialParameters = 0,; unsigned int dataSize=0, bool isChi2Fit = false). A function object implementing the ROOT::Math::FitMethodFunction interface. This is an interface class extending the ROOT::Math::IBaseFunctionMultiDim with some extra functionality which can be used when fitting. This extra functionality is required by dedicated fitting algorithms like Fumili or GSLMultiFit. bool Fitter::SetFCN(const ROOT::Math::FitMethodFunction & f,; const double * initialParameters = 0, unsigned int dataSize=0). A old-Minuit like FCN interface (i.e. a free function with the signature fcn(int &npar, double *gin, double &f, double *u, int flag). typedef void(* MinuitFCN)(int &npar, double *gin, double &f, double *u, int flag); bool Fitter::SetFCN(MinuitFCN fcn, int npar,; const double * initialParameters = 0,; unsigned int dataSize=0, bool isChi2Fit = false); 5.7.6 Fit Result; The result of the fit is contained in the ROOT::Fit::Result object. A reference to the result object is obtained with the function Fitter::Result(). The ROOT::Fit::FitResult class provides an API for retrieving parameter values, errors, covariance and correlation matrix from the fit, minimum chi2/likelihood values, etc…; A FitResult::Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:209830,interface,interface,209830,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"etFile & ; ). protected . ◆ TNetFile() [2/4]. TNetFile::TNetFile ; (; const char * ; url, . const char * ; ftitle, . Int_t ; compress, . Bool_t ;  . ). protected . Create a TNetFile object. ; To be used by derived classes, that need to initialize the TFile base class but not open a connection at this moment. ; Definition at line 89 of file TNetFile.cxx. ◆ TNetFile() [3/4]. TNetFile::TNetFile ; (; const char * ; url, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). Create a TNetFile object. ; This is actually done inside Create(), so for a description of the options and other arguments see Create(). Normally a TNetFile is created via TFile::Open(). ; Definition at line 75 of file TNetFile.cxx. ◆ TNetFile() [4/4]. TNetFile::TNetFile ; (; ). inline . Definition at line 64 of file TNetFile.h. ◆ ~TNetFile(). TNetFile::~TNetFile ; (; ). virtual . TNetFile dtor. Send close message and close socket. ; Definition at line 101 of file TNetFile.cxx. Member Function Documentation. ◆ Class(). static TClass * TNetFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNetFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNetFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TNetFile.h. ◆ Close(). void TNetFile::Close ; (; Option_t * ; option = """"). overridevirtual . Close remote file. ; Reimplemented from TFile.; Definition at line 208 of file TNetFile.cxx. ◆ ConnectServer(). void TNetFile::ConnectServer ; (; Int_t * ; stat, . EMessageTypes * ; kind, . Int_t ; netopt, . Int_t ; tcpwindowsize, . Bool_t ; forceOpen, . Bool_t ; forceRead . ). protectedvirtual . Connect to remote rootd server. ; Definition at line 570 of file TNetFile.cxx. ◆ Create() [1/2]. void TNetFile::Create ; (; const char * ; url, . Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:44242,message,message,44242,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['message'],['message']
Integrability,etGDPathStep(). void TMVA::RuleFit::SetGDPathStep ; (; Double_t ; s = 0.01). inline . Definition at line 115 of file RuleFit.h. ◆ SetGDTau(). void TMVA::RuleFit::SetGDTau ; (; Double_t ; t = 0.0). inline . Definition at line 114 of file RuleFit.h. ◆ SetImportanceCut(). void TMVA::RuleFit::SetImportanceCut ; (; Double_t ; minimp = 0). inline . Definition at line 110 of file RuleFit.h. ◆ SetMethodBase(). void TMVA::RuleFit::SetMethodBase ; (; const MethodBase * ; rfbase). set MethodBase ; Definition at line 150 of file RuleFit.cxx. ◆ SetModelFull(). void TMVA::RuleFit::SetModelFull ; (; ). inline . Definition at line 108 of file RuleFit.h. ◆ SetModelLinear(). void TMVA::RuleFit::SetModelLinear ; (; ). inline . Definition at line 104 of file RuleFit.h. ◆ SetModelRules(). void TMVA::RuleFit::SetModelRules ; (; ). inline . Definition at line 106 of file RuleFit.h. ◆ SetMsgType(). void TMVA::RuleFit::SetMsgType ; (; EMsgType ; t). set the current message type to that of mlog for this class and all other subtools ; Definition at line 190 of file RuleFit.cxx. ◆ SetRuleMinDist(). void TMVA::RuleFit::SetRuleMinDist ; (; Double_t ; d). inline . Definition at line 112 of file RuleFit.h. ◆ SetTrainingEvents(). void TMVA::RuleFit::SetTrainingEvents ; (; const std::vector< const TMVA::Event * > & ; el). set the training events randomly ; Definition at line 429 of file RuleFit.cxx. ◆ SetVisHistsUseImp(). void TMVA::RuleFit::SetVisHistsUseImp ; (; Bool_t ; f). inline . Definition at line 118 of file RuleFit.h. ◆ Streamer(). virtual void TMVA::RuleFit::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::RuleFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 179 of file RuleFit.h. ◆ UseCoefficientsVisHists(). void TMVA::RuleFit::UseCoefficientsVisHists ; (; ). inline . Definition at line 120 of file RuleFit.h. ◆ UseImportanceVisHists(). void TMVA::RuleFit::UseImportanceVisHists ; (; ). inline . Definition at line 119 of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFit.html:14571,message,message,14571,doc/master/classTMVA_1_1RuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFit.html,1,['message'],['message']
Integrability,"etHighlightvoid SetHighlight() overrideSet highlight (enable/disable) mode for fH.Definition THistPainter.cxx:3857; THistPainter::DefineColorLevelsvirtual void DefineColorLevels(Int_t ndivz)Define the color levels used to paint legos, surfaces etc..Definition THistPainter.cxx:9603; THistPainter::fObjectInfoTString fObjectInfoDefinition THistPainter.h:75; THistPainter::PaintColorLevelsvirtual void PaintColorLevels(Option_t *option)Control function to draw a 2D histogram as a color plot.Definition THistPainter.cxx:5766; THistPainter::IsInsideBool_t IsInside(Int_t x, Int_t y) overrideReturn kTRUE if the cell ix, iy is inside one of the graphical cuts.Definition THistPainter.cxx:3994; TImagePaletteA class to define a conversion from pixel values to pixel color.Definition TAttImage.h:33; TImagePalette::CreateCOLPalettestatic TImagePalette * CreateCOLPalette(Int_t nContours)Factory method to creates an image palette for histogram plotting.Definition TAttImage.cxx:739; TImageAn abstract interface to image processing library.Definition TImage.h:29; TImage::Createstatic TImage * Create()Create an image.Definition TImage.cxx:35; TImage::SetImagevirtual void SetImage(const Double_t *, UInt_t, UInt_t, TImagePalette *=nullptr)Definition TImage.h:116; TImage::PaintImagevirtual void PaintImage(Drawable_t, Int_t, Int_t, Int_t=0, Int_t=0, UInt_t=0, UInt_t=0, Option_t *="""")Definition TImage.h:243; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:475902,interface,interface,475902,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['interface'],['interface']
Integrability,"etIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long64_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Fac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:33487,Interface,Interface,33487,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"etIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Facto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:32644,Interface,Interface,32644,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"etLangOpts().Modules;; 1303 ; 1304 // For the list to also include string, we have to include it now.; 1305 // rootcling does parts already if needed, e.g. genreflex does not want using; 1306 // namespace std.; 1307 if (IsFromRootCling()) {; 1308 PreIncludes += ""#include \""RtypesCore.h\""\n"";; 1309 } else {; 1310 if (!hasCxxModules); 1311 PreIncludes += ""#include \""Rtypes.h\""\n"";; 1312 ; 1313 PreIncludes += gClassDefInterpMacro + ""\n""; 1314 + gInterpreterClassDef + ""\n""; 1315 ""#undef ClassImp\n""; 1316 ""#define ClassImp(X);\n"";; 1317 }; 1318 if (!hasCxxModules); 1319 PreIncludes += ""#include <string>\n"";; 1320 ; 1321 // We must include it even when we have modules because it is marked as; 1322 // textual in the modulemap due to the nature of the assert header.; 1323#ifndef R__WIN32; 1324 PreIncludes += ""#include <cassert>\n"";; 1325#endif; 1326 PreIncludes += ""using namespace std;\n"";; 1327 clingInterp.declare(PreIncludes);; 1328}; 1329 ; 1330////////////////////////////////////////////////////////////////////////////////; 1331/// Initialize the cling interpreter interface.; 1332/// \param name name for TInterpreter; 1333/// \param title title for TInterpreter; 1334/// \param argv - array of arguments passed to the cling::Interpreter constructor; 1335/// e.g. `-DFOO=bar`. The last element of the array must be `nullptr`.; 1336 ; 1337TCling::TCling(const char *name, const char *title, const char* const argv[], void *interpLibHandle); 1338: TInterpreter(name, title), fGlobalsListSerial(-1), fMapfile(nullptr),; 1339 fRootmapFiles(nullptr), fLockProcessLine(true), fNormalizedCtxt(nullptr),; 1340 fPrevLoadedDynLibInfo(nullptr), fClingCallbacks(nullptr), fAutoLoadCallBack(nullptr),; 1341 fTransactionCount(0), fHeaderParsingOnDemand(true), fIsAutoParsingSuspended(kFALSE); 1342{; 1343 fPrompt[0] = 0;; 1344 const bool fromRootCling = IsFromRootCling();; 1345 ; 1346 fCxxModulesEnabled = false;; 1347#ifdef R__USE_CXXMODULES; 1348 fCxxModulesEnabled = true;; 1349#endif; 1350 ; 1351",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:48051,interface,interface,48051,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['interface'],['interface']
Integrability,"etListOfBadSlaves () const;  ; TList * GetListOfInactiveSlaves () const;  ; TList * GetListOfSlaves () const;  ; TList * GetListOfUniqueSlaves () const;  ; Int_t GetNumberOfActiveSlaves () const;  Return number of active slaves, i.e. ;  ; Int_t GetNumberOfBadSlaves () const;  Return number of bad slaves. ;  ; Int_t GetNumberOfInactiveSlaves () const;  Return number of inactive slaves, i.e. ;  ; Int_t GetNumberOfSlaves () const;  Return number of slaves as described in the config file. ;  ; Int_t GetNumberOfUniqueSlaves () const;  Return number of unique slaves, i.e. ;  ; Int_t GetQueryReference (Int_t qry, TString &ref);  Get reference for the qry-th query in fQueries (as displayed by ShowQueries). ;  ; Int_t GoMoreParallel (Int_t nWorkersToAdd);  Add nWorkersToAdd workers to current list of workers. ;  ; Int_t GoParallel (Int_t nodes, Bool_t accept=kFALSE, Bool_t random=kFALSE);  Go in parallel mode with at most ""nodes"" slaves. ;  ; Int_t HandleInputMessage (TSlave *wrk, TMessage *m, Bool_t deactonfail=kFALSE);  Analyze the received message. ;  ; void HandleSubmerger (TMessage *mess, TSlave *sl);  Process a message of type kPROOF_SUBMERGER. ;  ; void Interrupt (EUrgent type, ESlaves list=kActive);  Send interrupt to master or slave servers. ;  ; void InterruptCurrentMonitor ();  If in active in a monitor set ready state. ;  ; Bool_t IsEndMaster () const;  ; Bool_t IsSync () const;  ; Int_t LoadPackage (const char *package, Bool_t notOnClient=kFALSE, TList *loadopts=0, TList *workers=0);  Load specified package. ;  ; void MarkBad (TSlave *wrk, const char *reason=0);  Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ;  ; void MarkBad (TSocket *s, const char *reason=0);  Add slave with socket s to the bad slave list and remove if from the active list and from the two monitor objects. ;  ; Int_t ModifyWorkerLists (const char *ord, Bool_t add, Bool_t save);  Modify the worker active/inactive list by making",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:50061,message,message,50061,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['message'],['message']
Integrability,"etMinimum(const char* columname); -- Return minimum of column with name columname. Int_t GetNbranches(); -- Return the number of branches of the current tree. Warning: May set the current tree!. Long64_t GetReadEntry() const; -- See TTree::GetReadEntry(). Double_t GetWeight() const; -- Return the chain weight. By default the weight is the weight of the current tree.; However, if the weight has been set in TChain::SetWeight(); with the option ""global"", then that weight will be returned. Warning: May set the current tree!. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64_t LoadTree(Long64_t entry); -- Find the tree which contains entry, and set it as the current tree. Returns the entry number in that tree. The input argument entry is the entry serial number in the whole chain. Note: This is the only routine which sets the value of fTree to; a non-zero pointer. void Lookup(Bool_t force = kFALSE); Check / locate the files in the chain.; By default only the files not yet looked up are checked.; Use force = kTRUE to check / re-check every file. void Loop(Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); -- Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED). void ls(Option_t* option = """") const; -- List the chain. Long64_t Merge(const char* name, Option_t* option = """"); Merge all the entries in the chain into a new tree in a new file. See important note in the following function Merge(). If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So in a case where we have:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will have not subdirectory. To recreate; the directory structure do:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TChain.html:37790,rout,routine,37790,root/html528/TChain.html,https://root.cern,https://root.cern/root/html528/TChain.html,2,['rout'],['routine']
Integrability,"etMinimum(const char* columname); -- Return minimum of column with name columname. Int_t GetNbranches(); -- Return the number of branches of the current tree. Warning: May set the current tree!. Long64_t GetReadEntry() const; -- See TTree::GetReadEntry(). Double_t GetWeight() const; -- Return the chain weight. By default the weight is the weight of the current tree.; However, if the weight has been set in TChain::SetWeight(); with the option ""global"", then that weight will be returned. Warning: May set the current tree!. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64_t LoadTree(Long64_t entry); -- Find the tree which contains entry, and set it as the current tree. Returns the entry number in that tree. The input argument entry is the entry serial number in the whole chain. Note: This is the only routine which sets the value of fTree to; a non-zero pointer. void Lookup(Bool_t force = kFALSE); Check / locate the files in the chain.; By default only the files not yet looked up are checked.; Use force = kTRUE to check / re-check every file. void Loop(Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); -- Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED). void ls(Option_t* option = """") const; -- List the chain. Long64_t Merge(const char* name, Option_t* option); Merge all the entries in the chain into a new tree in a new file. See important note in the following function Merge(). If the chain is expecting the input tree inside a directory,; this directory is NOT created by this routine. So in a case where we have:. TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");. The resulting file will have not subdirectory. To recreate; the directory structure do:. TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:37194,rout,routine,37194,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['rout'],['routine']
Integrability,"etNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPluginHandler::LoadPluginInt_t LoadPlugin()Load the plugin library for this handler.Definition TPluginManager.cxx:293; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:79300,message,message,79300,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['message'],['message']
Integrability,"etProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction3Ref< VO, VI1, VI2, VI3 > func;  ; RooRealProxy x;  ; RooRealProxy y;  ; RooRealProxy z;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Binding.html:55409,integrat,integration,55409,doc/master/classRooCFunction3Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Binding.html,1,['integrat'],['integration']
Integrability,etProxy _pdfObsList;  List of observables mapped onto histogram observables. ;  ; double _totVolume = 0.0;  ! Total volume of space (product of ranges of observables) ;  ; bool _unitNorm = false;  Assume contents is unit normalized (for use as pdf cache) ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:70268,integrat,integration,70268,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['integrat'],['integration']
Integrability,"etReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fFcnCall;  ; Volume * fHelpVolume;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  EKernelEstimator { ;   kBox = 0; , kSphere; , kTeepee; , kGauss; , ;   kSinc3; , kSinc5; , kSinc7; , kSinc9; , ;   kSinc11; , kLanczos2; , kLanczos3; , kLanczos5; , ;   kLanczos8; , kTrim. };  ; enum  EVolumeRangeMode { ;   kUnsupported = 0; , kMinMax; , kRMS; , kAdaptive; , ;   kUnscaled; , kkNN. };  . Private Member Functions; void CalcAverages ();  compute also average RMS values required for adaptive Gaussian ;  ; void CreateBinarySearchTree (Types::ETreeType ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:29442,message,message,29442,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['message'],['message']
Integrability,"etStreamerSetIndicates whether the ClassInfo is supposed to be available.Definition TClass.h:261; TClass::IgnoreTObjectStreamervoid IgnoreTObjectStreamer(Bool_t ignore=kTRUE)When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call ...Definition TClass.cxx:4841; TClass::GetStreamerTClassStreamer * GetStreamer() constReturn the Streamer Class allowing streaming (if any).Definition TClass.cxx:2914; TClass::GetIdMapstatic IdMap_t * GetIdMap()Definition TClass.cxx:469; TClass::GetInstanceCountUInt_t GetInstanceCount() constDefinition TClass.h:466; TClass::SetDeletevoid SetDelete(ROOT::DelFunc_t deleteFunc)Install a new wrapper around 'delete'.Definition TClass.cxx:7001; TClass::SetLastReadInfovoid SetLastReadInfo(TVirtualStreamerInfo *info)Definition TClass.h:445; TClass::AutoBrowsestatic Int_t AutoBrowse(TObject *obj, TBrowser *browser)Browse external object inherited from TObject.Definition TClass.cxx:1966; TClass::GetNewROOT::NewFunc_t GetNew() constReturn the wrapper around new ThisClass().Definition TClass.cxx:7447; TClass::GetBaseClassTClass * GetBaseClass(const char *classname)Return pointer to the base class ""classname"".Definition TClass.cxx:2655; TClass::GetDataMemberOffsetLongptr_t GetDataMemberOffset(const char *membername) constreturn offset for member name.Definition TClass.cxx:3477; TClass::GetNdataInt_t GetNdata()Return the number of data members of this class Note that in case the list of data members is not yet...Definition TClass.cxx:4554; TClass::SetDestructorvoid SetDestructor(ROOT::DesFunc_t destructorFunc)Install a new wrapper around the destructor.Definition TClass.cxx:7017; TClass::PostLoadCheckvirtual void PostLoadCheck()Do the initialization that can only be done after the CINT dictionary has been fully populated and ca...Definition TClass.cxx:5959; TClass::LoadClassInfovoid LoadClassInfo() constTry to load the ClassInfo if available.Definition TClass.cxx:5824; TClass::SetResetAfterMergevoid SetResetAf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:54692,wrap,wrapper,54692,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"etStreamerSetIndicates whether the ClassInfo is supposed to be available.Definition TClass.h:261; TClass::IgnoreTObjectStreamervoid IgnoreTObjectStreamer(Bool_t ignore=kTRUE)When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call ...Definition TClass.cxx:4908; TClass::GetStreamerTClassStreamer * GetStreamer() constReturn the Streamer Class allowing streaming (if any).Definition TClass.cxx:2981; TClass::GetIdMapstatic IdMap_t * GetIdMap()Definition TClass.cxx:469; TClass::GetInstanceCountUInt_t GetInstanceCount() constDefinition TClass.h:466; TClass::SetDeletevoid SetDelete(ROOT::DelFunc_t deleteFunc)Install a new wrapper around 'delete'.Definition TClass.cxx:7068; TClass::SetLastReadInfovoid SetLastReadInfo(TVirtualStreamerInfo *info)Definition TClass.h:445; TClass::AutoBrowsestatic Int_t AutoBrowse(TObject *obj, TBrowser *browser)Browse external object inherited from TObject.Definition TClass.cxx:2033; TClass::GetNewROOT::NewFunc_t GetNew() constReturn the wrapper around new ThisClass().Definition TClass.cxx:7514; TClass::GetBaseClassTClass * GetBaseClass(const char *classname)Return pointer to the base class ""classname"".Definition TClass.cxx:2722; TClass::GetDataMemberOffsetLongptr_t GetDataMemberOffset(const char *membername) constreturn offset for member name.Definition TClass.cxx:3544; TClass::GetNdataInt_t GetNdata()Return the number of data members of this class Note that in case the list of data members is not yet...Definition TClass.cxx:4621; TClass::SetDestructorvoid SetDestructor(ROOT::DesFunc_t destructorFunc)Install a new wrapper around the destructor.Definition TClass.cxx:7084; TClass::PostLoadCheckvirtual void PostLoadCheck()Do the initialization that can only be done after the CINT dictionary has been fully populated and ca...Definition TClass.cxx:6026; TClass::LoadClassInfovoid LoadClassInfo() constTry to load the ClassInfo if available.Definition TClass.cxx:5891; TClass::SetResetAfterMergevoid SetResetAf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:54520,wrap,wrapper,54520,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['wrap'],['wrapper']
Integrability,"etTextSize and retrieved using the; method GetTextSize.; Text Font and Precision; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision. Font numbers must be between 1 and 14. The precision can be:; precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from TAttText can; be changed using the method SetTextFont and retrieved using the; method GetTextFont.; Font quality and speed; When precision 0 is used, only the original non-scaled system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts. However TTF are slow.; How to use True Type Fonts; One can activate the TTF by adding (or activating) the following line; in the .rootrc file:. Unix.*.Root.UseTTFonts: true. It is possible to check the TTF are in use in a Root session; with the command:. gEnv->Print();. if the TTF are in use the following line will appear at the beginning of the; printout given by this command:. Unix.*.Root.UseTTFonts: true [Global]. List of the currently supported fonts. Font number X11 Names Win32/TTF Names; 1 : times-medium-i-normal ""Times New Roman""; 2 : times-bold-r-normal ""Times New Roman""; 3 : times-bold-i-normal ""Times New Roman""; 4 : helvetica-medium-r-normal ""Arial""; 5 : helvetica-medium-o-normal ""Arial""; 6 : helvetica-bold-r-normal ""Arial""; 7 : helvetica-bold-o-normal ""Arial""; 8 : courier-medium-r-normal ""Courier New""; 9 : courier-medium-o-normal ""Courier New"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttText.html:5223,depend,depending,5223,root/html526/TAttText.html,https://root.cern,https://root.cern/root/html526/TAttText.html,1,['depend'],['depending']
Integrability,"etTime(ms);; 68 }; 69 Bool_t IsSlow() const { return fSlow; }; 70 ; 71 /// timeout handler; 72 /// used to process http requests in main ROOT thread; 73 void Timeout() override; 74 {; 75 Int_t nprocess = fServer.ProcessRequests();; 76 ; 77 if (nprocess > 0) {; 78 fSlowCnt = 0;; 79 if (IsSlow()); 80 SetSlow(kFALSE);; 81 } else if (!IsSlow() && (fSlowCnt++ > 10)) {; 82 SetSlow(kTRUE);; 83 }; 84 }; 85};; 86 ; 87 ; 88/** \class THttpServer; 89\ingroup http; 90 ; 91Online http server for arbitrary ROOT application; 92 ; 93Idea of THttpServer - provide remote http access to running; 94ROOT application and enable HTML/JavaScript user interface.; 95Any registered object can be requested and displayed in the browser.; 96There are many benefits of such approach:; 97 ; 981. standard http interface to ROOT application; 992. no any temporary ROOT files when access data; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be displayed with JSROOT graphics.; 113 ; 114At any time one could register other objects with the command:; 115 ; 116 TGraph* gr = new TGraph(10);; 117 gr->SetName(""gr1"");; 118 serv->Register(""graphs/subfolder"", gr);; 119 ; 120If objects content is changing in the application, one could; 121enable monitoring flag in the browser - than objects view; 122will be regularly updated.; 123 ; 124More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; 125*/; 126 ; 127ClassImp(THttpServer);; 128 ; 129/////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:2740,interface,interface,2740,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['interface'],['interface']
Integrability,"etTitleSize(0.04);; h->DrawClone();; ; TLatex label; label.SetNDC(true);; label.DrawLatex(0.175, 0.740, ""#eta"");; label.DrawLatex(0.205, 0.775, ""#rho,#omega"");; label.DrawLatex(0.270, 0.740, ""#phi"");; label.DrawLatex(0.400, 0.800, ""J/#psi"");; label.DrawLatex(0.415, 0.670, ""#psi'"");; label.DrawLatex(0.485, 0.700, ""Y(1,2,3S)"");; label.DrawLatex(0.755, 0.680, ""Z"");; label.SetTextSize(0.040); label.DrawLatex(0.100, 0.920, ""#bf{CMS Open Data}"");; label.SetTextSize(0.030); label.DrawLatex(0.630, 0.920, ""#sqrt{s} = 8 TeV, L_{int} = 11.6 fb^{-1}"");; ; c->SaveAs(""dimuon_spectrum.pdf"");; ; // Print cut-flow report; report->Print();; }; ; int main(); {; df102_NanoAODDimuonAnalysis();; }; mainint main()Definition Prototype.cxx:12; RDFHelpers.hxx; RDataFrame.hxx; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; RVec.hxx; TCanvas.h; TH1D.h; TLatex.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html:3340,interface,interface,3340,doc/master/df102__NanoAODDimuonAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html,1,['interface'],['interface']
Integrability,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:3347,depend,dependent,3347,doc/v632/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html,1,['depend'],['dependent']
Integrability,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:3393,depend,dependent,3393,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['depend'],['dependent']
Integrability,"etUseSparseHist(Bool_t useSparseHist); set whether to use sparse histogram (if using histogram at all). { fUseSparseHist = useSparseHist; }. void SetIntervalType(RooStats::MCMCInterval::IntervalType intervalType); set what type of interval to have the MCMCInterval represent. { fIntervalType = intervalType; }. void SetKeysConfidenceAccuracy(Double_t epsilon); Set the desired level of confidence-level accuracy for Keys interval; determination. When determining the cutoff PDF height that gives the; desired confidence level (C_d), the algorithm will consider acceptable; any found confidence level c such that Abs(c - C_d) < epsilon. Any value of this ""epsilon"" > 0 is considered acceptable, though it is; advisable to not use a value too small, because the integration of the; Keys PDF sometimes does not have extremely high accuracy. void SetKeysTerminationThreshold(Double_t delta); When the shortest interval using Keys PDF could not be found to have; the desired confidence level +/- the accuracy (see; SetKeysConfidenceAccuracy()), the interval determination algorithm; will have to terminate with an unsatisfactory confidence level when; the bottom and top of the cutoff search range are very close to being; equal. This scenario comes into play when there seems to be an error; in the accuracy of the Keys PDF integration, so the search range; continues to shrink without converging to a cutoff value that will; give an acceptable confidence level. To choose how small to allow the; search range to be before terminating, set the fraction delta such; that the search will terminate when topCutoff (a) and bottomCutoff (b); satisfy this condition:. TMath::Abs(a - b) < TMath::Abs(delta * (a + b)/2). void SetBins(const RooAbsCollection& coll, Int_t numBins) const. » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MCMCCalculator.html:12873,integrat,integration,12873,root/html534/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__MCMCCalculator.html,2,['integrat'],['integration']
Integrability,"etUseSparseHist(Bool_t useSparseHist); set whether to use sparse histogram (if using histogram at all). { fUseSparseHist = useSparseHist; }. void SetIntervalType(RooStats::MCMCInterval::IntervalType intervalType); set what type of interval to have the MCMCInterval represent. { fIntervalType = intervalType; }. void SetKeysConfidenceAccuracy(Double_t epsilon); Set the desired level of confidence-level accuracy for Keys interval; determination. When determining the cutoff PDF height that gives the; desired confidence level (C_d), the algorithm will consider acceptable; any found confidence level c such that Abs(c - C_d) < epsilon. Any value of this ""epsilon"" > 0 is considered acceptable, though it is; advisable to not use a value too small, because the integration of the; Keys PDF sometimes does not have extremely high accuracy. void SetKeysTerminationThreshold(Double_t delta); When the shortest interval using Keys PDF could not be found to have; the desired confidence level +/- the accuracy (see; SetKeysConfidenceAccuracy()), the interval determination algorithm; will have to terminate with an unsatisfactory confidence level when; the bottom and top of the cutoff search range are very close to being; equal. This scenario comes into play when there seems to be an error; in the accuracy of the Keys PDF integration, so the search range; continues to shrink without converging to a cutoff value that will; give an acceptable confidence level. To choose how small to allow the; search range to be before terminating, set the fraction delta such; that the search will terminate when topCutoff (a) and bottomCutoff (b); satisfy this condition:. TMath::Abs(a - b) < TMath::Abs(delta * (a + b)/2). void SetBins(const RooAbsCollection& coll, Int_t numBins) const. » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__MCMCCalculator.html:13529,integrat,integration,13529,root/html604/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html604/RooStats__MCMCCalculator.html,2,['integrat'],['integration']
Integrability,"etUseSparseHist(Bool_t useSparseHist); set whether to use sparse histogram (if using histogram at all). { fUseSparseHist = useSparseHist; }. void SetIntervalType(RooStats::MCMCInterval::IntervalType intervalType); set what type of interval to have the MCMCInterval represent. { fIntervalType = intervalType; }. void SetKeysConfidenceAccuracy(Double_t epsilon); Set the desired level of confidence-level accuracy for Keys interval; determination. When determining the cutoff PDF height that gives the; desired confidence level (C_d), the algorithm will consider acceptable; any found confidence level c such that Abs(c - C_d) < epsilon. Any value of this ""epsilon"" > 0 is considered acceptable, though it is; advisable to not use a value too small, because the integration of the; Keys PDF sometimes does not have extremely high accuracy. void SetKeysTerminationThreshold(Double_t delta); When the shortest interval using Keys PDF could not be found to have; the desired confidence level +/- the accuracy (see; SetKeysConfidenceAccuracy()), the interval determination algorithm; will have to terminate with an unsatisfactory confidence level when; the bottom and top of the cutoff search range are very close to being; equal. This scenario comes into play when there seems to be an error; in the accuracy of the Keys PDF integration, so the search range; continues to shrink without converging to a cutoff value that will; give an acceptable confidence level. To choose how small to allow the; search range to be before terminating, set the fraction delta such; that the search will terminate when topCutoff (a) and bottomCutoff (b); satisfy this condition:. TMath::Abs(a - b) < TMath::Abs(delta * (a + b)/2). void SetBins(const RooAbsCollection& coll, Int_t numBins) const. » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MCMCCalculator.html:13529,integrat,integration,13529,root/html602/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__MCMCCalculator.html,2,['integrat'],['integration']
Integrability,"etWindowName(const char *name=nullptr) overrideSet window name. This is typically done via the window manager.Definition TGFrame.cxx:1788; TGSimpleTableInterfaceTGSimpleTableInterface is a very simple implementation of a TVirtualTableInterface.Definition TGSimpleTableInterface.h:18; TGTableCreate an array to hold a bunch of numbers.Definition TGTable.h:34; TGTable::Updatevirtual void Update()Update the range of the available data and refresh the current view.Definition TGTable.cxx:1529; double; int; unsigned int; It is also possible to visualise data from a tree. A simple macro showing the use of a TTreeTableInterface follows.; {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");; ; // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;; ; return mainframe;; }; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TTreeTableInterfaceTTreeTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:4761,interface,interface,4761,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['interface'],['interface']
Integrability,"etWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Prote",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2935,message,message,2935,doc/v632/classROOT_1_1RFileDialog.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html,2,['message'],['message']
Integrability,"etX2NDC(newx2); //new x end position; 4197///; 4198/// \anchor HFitExtra; 4199/// ### Additional Notes on Fitting; 4200///; 4201/// #### Fitting a histogram of dimension N with a function of dimension N-1; 4202///; 4203/// It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; 4204/// In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content.; 4205/// For correct error scaling, the obtained parameter error are corrected as in the case when the; 4206/// option ""W"" is used.; 4207///; 4208/// #### User defined objective functions; 4209///; 4210/// By default when fitting a chi square function is used for fitting. When option ""L"" is used; 4211/// a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used.; 4212/// Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they; 4213/// are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; 4214/// the file math/mathcore/src/FitUtil.cxx.; 4215/// It is possible to specify a user defined fitting function, using option ""U"" and; 4216/// calling the following functions:; 4217///; 4218/// ~~~ {.cpp}; 4219/// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; 4220/// ~~~; 4221///; 4222/// where MyFittingFunction is of type:; 4223///; 4224/// ~~~ {.cpp}; 4225/// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 4226/// ~~~; 4227///; 4228/// #### Note on treatment of empty bins; 4229///; 4230/// Empty bins, which have the content equal to zero AND error equal to zero,; 4231/// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; 4232/// since they affect the likelihood if the function value in these bins is not negligible.; 4233/// Note that if the histogram is having bins with zero content and non zero-errors they are considered as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:173815,rout,routines,173815,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['rout'],['routines']
Integrability,"etXMLDocument() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tParseBuffer(const char* buffer, Int_t len); virtual Int_tParseFile(const char* filename); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReleaseUnderlying(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDOMParser.html:6054,Message,Message,6054,root/html602/TDOMParser.html,https://root.cern,https://root.cern/root/html602/TDOMParser.html,2,['Message'],['Message']
Integrability,"etain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. template <> void RooCacheManager<RooAbsCacheElement> ShowMembers(TMemberInspector& insp, char* parent); needed to avoid 'specialization after instantiation' problem in gcc. » Last changed: Mon Dec 7 13:47:00 2009 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:4387,integrat,integration,4387,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Integrability,"etain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. » Last changed: Mon Jul 4 15:22:21 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html:4381,integrat,integration,4381,root/html530/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Integrability,"etain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. » Last changed: Thu Nov 3 20:07:39 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCacheManager_RooAbsCacheElement_.html:4381,integrat,integration,4381,root/html532/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html532/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Integrability,"etain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. » Last changed: Thu Sep 23 19:59:10 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCacheManager_RooAbsCacheElement_.html:4373,integrat,integration,4373,root/html528/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html528/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Integrability,"etain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Sat Jun 20 16:42:22 2015 » Last generated: 2015-06-20 16:42; This page h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html:4643,integrat,integration,4643,root/html534/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html,2,['integrat'],['integration']
Integrability,"etation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:14366,integrat,integration,14366,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,1,['integrat'],['integration']
Integrability,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19527,message,message,19527,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['message'],['message']
Integrability,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/VariableImportance.h>. Inheritance diagram for TMVA::VariableImportance:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ VariableImportance(). TMVA::VariableImportance::VariableImportance ; (; TMVA::DataLoader * ; dataloader). explicit . Definition at line 91 of file VariableImportance.cxx. ◆ ~VariableImportance(). TMVA::VariableImportance::~VariableImportance ; (; ). Definition at line 98 of file VariableImportance.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::VariableImportance::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::VariableImportance::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:17489,message,message,17489,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['message'],['message']
Integrability,"ete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; virtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:13203,message,message,13203,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,2,['message'],['message']
Integrability,"ete; };. protected:. TGClient*TGObject::fClientConnection to display server; Handle_tTGObject::fIdX11/Win32 Window identifier. private:. THashTable*fListhash table of graphics contexts in pool. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGGCPool(TGClient* client); Create graphics context pool. ~TGGCPool(); Delete graphics context pool. void ForceFreeGC(const TGGC* gc); Force remove graphics context from list. Is only called via ~TGGC(). void FreeGC(const TGGC* gc); Delete graphics context if it is not used anymore. void FreeGC(GContext_t gc); Delete graphics context if it is not used anymore. TGGC * FindGC(const TGGC* gc); Find graphics context. Returns 0 in case gc is not found. TGGC * FindGC(GContext_t gc); Find graphics context based on its GContext_t handle. Returns 0; in case gc is not found. TGGC * GetGC(GContext_t gct); returns graphics context based on its GContext_t handle. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get the best matching graphics context depending on values.; If rw is false only a readonly, not modifiable graphics context; is returned. If rw is true a new modifiable graphics context is; returned. Int_t MatchGC(const TGGC* gc, GCValues_t* values); Try to find matching graphics context. On success returns the amount; of matching bits (which may be zero if masks have no common bits),; -1 on failure (when there are common bits but not a single match). void UpdateGC(TGGC* gc, GCValues_t* values); Update graphics context with the values spcified in values->fMask. void Print(Option_t* option = """") const; List all graphics contexts in the pool. TGGC & operator=(const TGGCPool& gp). TGGCPool(const TGGCPool& gp); { }. » Author: Fons Rademakers 20/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGGCPool.html:6622,depend,depending,6622,root/html534/TGGCPool.html,https://root.cern,https://root.cern/root/html534/TGGCPool.html,2,['depend'],['depending']
Integrability,"ete; };. protected:. TGClient*TGObject::fClientConnection to display server; Handle_tTGObject::fIdX11/Win32 Window identifier. private:. THashTable*fListhash table of graphics contexts in pool. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGGCPool(TGClient* client); Create graphics context pool. ~TGGCPool(); Delete graphics context pool. void ForceFreeGC(const TGGC* gc); Force remove graphics context from list. Is only called via ~TGGC(). void FreeGC(const TGGC* gc); Delete graphics context if it is not used anymore. void FreeGC(GContext_t gc); Delete graphics context if it is not used anymore. TGGC * FindGC(const TGGC* gc); Find graphics context. Returns 0 in case gc is not found. TGGC * FindGC(GContext_t gc); Find graphics context based on its GContext_t handle. Returns 0; in case gc is not found. TGGC * GetGC(GContext_t gct); returns graphics context based on its GContext_t handle. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get the best matching graphics context depending on values.; If rw is false only a readonly, not modifiable graphics context; is returned. If rw is true a new modifiable graphics context is; returned. Int_t MatchGC(const TGGC* gc, GCValues_t* values); Try to find matching graphics context. On success returns the amount; of matching bits (which may be zero if masks have no common bits),; -1 on failure (when there are common bits but not a single match). void UpdateGC(TGGC* gc, GCValues_t* values); Update graphics context with the values spcified in values->fMask. void Print(Option_t* option = """") const; List all graphics contexts in the pool. TGGC & operator=(const TGGCPool& gp). TGGCPool(const TGGCPool& gp); { }. » Author: Fons Rademakers 20/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGGC.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGGCPool.html:6534,depend,depending,6534,root/html528/TGGCPool.html,https://root.cern,https://root.cern/root/html528/TGGCPool.html,1,['depend'],['depending']
Integrability,"ete; };. protected:. TGClient*TGObject::fClientConnection to display server; Handle_tTGObject::fIdX11/Win32 Window identifier. private:. THashTable*fListhash table of graphics contexts in pool. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGGCPool(TGClient* client); Create graphics context pool. ~TGGCPool(); Delete graphics context pool. void ForceFreeGC(const TGGC* gc); Force remove graphics context from list. Is only called via ~TGGC(). void FreeGC(const TGGC* gc); Delete graphics context if it is not used anymore. void FreeGC(GContext_t gc); Delete graphics context if it is not used anymore. TGGC * FindGC(const TGGC* gc); Find graphics context. Returns 0 in case gc is not found. TGGC * FindGC(GContext_t gc); Find graphics context based on its GContext_t handle. Returns 0; in case gc is not found. TGGC * GetGC(GContext_t gct); returns graphics context based on its GContext_t handle. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get the best matching graphics context depending on values.; If rw is false only a readonly, not modifiable graphics context; is returned. If rw is true a new modifiable graphics context is; returned. Int_t MatchGC(const TGGC* gc, GCValues_t* values); Try to find matching graphics context. On success returns the amount; of matching bits (which may be zero if masks have no common bits),; -1 on failure (when there are common bits but not a single match). void UpdateGC(TGGC* gc, GCValues_t* values); Update graphics context with the values spcified in values->fMask. void Print(Option_t* option = """") const; List all graphics contexts in the pool. TGGC & operator=(const TGGCPool& gp). TGGCPool(const TGGCPool& gp); { }. » Author: Fons Rademakers 20/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGGC.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGGCPool.html:6603,depend,depending,6603,root/html530/TGGCPool.html,https://root.cern,https://root.cern/root/html530/TGGCPool.html,1,['depend'],['depending']
Integrability,"ete; };. protected:. TGClient*TGObject::fClientConnection to display server; Handle_tTGObject::fIdX11/Win32 Window identifier. private:. THashTable*fListhash table of graphics contexts in pool. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGGCPool(TGClient* client); Create graphics context pool. ~TGGCPool(); Delete graphics context pool. void ForceFreeGC(const TGGC* gc); Force remove graphics context from list. Is only called via ~TGGC(). void FreeGC(const TGGC* gc); Delete graphics context if it is not used anymore. void FreeGC(GContext_t gc); Delete graphics context if it is not used anymore. TGGC * FindGC(const TGGC* gc); Find graphics context. Returns 0 in case gc is not found. TGGC * FindGC(GContext_t gc); Find graphics context based on its GContext_t handle. Returns 0; in case gc is not found. TGGC * GetGC(GContext_t gct); returns graphics context based on its GContext_t handle. TGGC * GetGC(GCValues_t* values, Bool_t rw = kFALSE); Get the best matching graphics context depending on values.; If rw is false only a readonly, not modifiable graphics context; is returned. If rw is true a new modifiable graphics context is; returned. Int_t MatchGC(const TGGC* gc, GCValues_t* values); Try to find matching graphics context. On success returns the amount; of matching bits (which may be zero if masks have no common bits),; -1 on failure (when there are common bits but not a single match). void UpdateGC(TGGC* gc, GCValues_t* values); Update graphics context with the values spcified in values->fMask. void Print(Option_t* option = """") const; List all graphics contexts in the pool. TGGC & operator=(const TGGCPool& gp). TGGCPool(const TGGCPool& gp); { }. » Author: Fons Rademakers 20/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGGC.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGGCPool.html:6603,depend,depending,6603,root/html532/TGGCPool.html,https://root.cern,https://root.cern/root/html532/TGGCPool.html,2,['depend'],['depending']
Integrability,"eted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_BINARY; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_CHAR; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_DOUBLE; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_FLOAT; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_INTEGER; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_NONE; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_NUMERIC; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_TIMESTAMP; static TSQLServer::ESQLDataTypesTSQLServer::kSQL_VARCHAR; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTSQLServer::fDBcurrently selected DB; Int_tTSQLServer::fErrorCodeerror code of last operation; TStringTSQLServer::fErrorMsgerror message of last operation; Bool_tTSQLServer::fErrorOutenable error output; TStringTSQLServer::fHosthost to which we are connected; TStringfInfoserver info string; MYSQL*fMySQLconnection to MySQL server; Int_tTSQLServer::fPortport to which we are connected; TStringTSQLServer::fTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*TSQLServer::fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMySQLServer(const char* db, const char* uid, const char* pw); Open a connection to a MySQL DB server. The db arguments should be; of the form ""mysql://<host>[:<port>][/<database>]"", e.g.:; ""mysql://pcroot.cern.ch:3456/test"". The uid is the username and pw; the password that should be used for the connection. In addition, several parameters can be specified in url after ""?"" symbol:; timeout=N n is connect timeout is seconds; socket=socketname socketname should be name of Unix socket, used; for connection; multi_statements tell the server that the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLServer.html:9018,message,message,9018,root/html602/TMySQLServer.html,https://root.cern,https://root.cern/root/html602/TMySQLServer.html,4,['message'],['message']
Integrability,"eter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long64_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_Factory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:33559,Interface,Interface,33559,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"eter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:32716,Interface,Interface,32716,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"eter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEvalPar (double x, const double *p) const override;  Implementation of the evaluation function using the x value and the parameters. ;  ; double DoParameterDerivative (double x, const double *p, unsigned int ipar) const override;  Evaluate the gradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html:5852,interface,interface,5852,doc/master/classROOT_1_1Math_1_1Polynomial.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html,1,['interface'],['interface']
Integrability,"eterSpace() constDefinition IFunction.h:222; ROOT::Math::IGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(const double *x) constCompatibility method with multi-dimensional interface for partial derivative.Definition IFunction.h:266; ROOT::Math::IGradientFunctionOneDim::FdFvirtual void FdF(double x, double &f, double &df) constOptimized method to evaluate at the same time the function value and derivative at a point x.Definition IFunction.h:275; ROOT::Math::IGradientFunctionOneDim::FdFvoid FdF(const double *x, double &f, double *df) constCompatibility method with multi-dimensional interface for Gradient and function evaluation.Definition IFunction.h:282; ROOT::Math::IGradientFunctionOneDim::BaseGradIGradientFunctionOneDim BaseGradDefinition IFunction.h:259; ROOT::Math::IGradientFunctionOneDim::Gradientvoid Gradient(const double *x, double *g) constCompatibility method with multi-dimensional interface for Gradient.Definition IFunction.h:269; ROOT::Math::IGradientFunctionOneDim::BaseFuncIBaseFunctionOneDim BaseFuncDefinition IFunction.h:258; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(double x) constReturn the derivative of the function at a point x Use the private method DoDerivative.Definition IFunction.h:263; ROOT::Math::IGradientFunctionOneDim::DoDerivativevirtual double DoDerivative(double x) const =0Function to evaluate the derivative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionOneDim::HasGradientbool HasGradient() const overrideDefinition IFunction.h:284; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIFunction.h. ROOT master - Refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:18693,interface,interface,18693,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['interface'],['interface']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Mon Dec 7 13:45:40 2009 » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsMCStudyModule.html:9158,depend,dependents,9158,root/html526/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html526/RooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Mon Jul 4 15:21:24 2011 » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsMCStudyModule.html:9213,depend,dependents,9213,root/html530/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html530/RooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Thu Nov 3 20:06:44 2011 » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsMCStudyModule.html:9213,depend,dependents,9213,root/html532/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html532/RooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Thu Sep 23 19:58:12 2010 » L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsMCStudyModule.html:9144,depend,dependents,9144,root/html528/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html528/RooAbsMCStudyModule.html,1,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Tue Jun 2 15:27:10 2015 » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsMCStudyModule.html:9693,depend,dependents,9693,root/html604/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html604/RooAbsMCStudyModule.html,2,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Tue Jun 30 14:30:12 2015 » L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMCStudyModule.html:9693,depend,dependents,9693,root/html602/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html602/RooAbsMCStudyModule.html,2,['depend'],['dependents']
Integrability,"eters will apply to next fit operation. Note that setConstant; flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist. Bool_t processAfterFit(Int_t ); Method called after fit has been performed. RooFitResult* refit(RooAbsData* inGenSample = 0); Interface methods to RooMCStudy objects,; which are only functional after module has been attached to a RooMCStudy object. RooAbsData* genSample(); Return generate sample. RooAbsPdf* genModel(); Return generator pdf. RooAbsGenContext* genContext(); Accessor for generator context, generator parameters,	prototype data and projected dependents. RooArgSet* genInitParams(); Return initial value of generator model parameters. RooArgSet* genParams(); Return current value of generator model parameters. const RooDataSet* genProtoData(); Return generator prototype data provided by user. RooArgSet* projDeps(); Return projected observables. RooArgSet* dependents(); Accessors for fit observables, fit model, current and initial fit parameters and NLL value. RooArgSet* allDependents(); Returna all observables. RooAbsPdf* fitModel(); Return fit model. RooArgSet* fitInitParams(); Return initial value of parameters of fit model. RooArgSet* fitParams(); Return current value of parameters of fit model. RooRealVar* nllVar(); Return pointer to RooRealVar holding minimized -log(L) value. const char* fitOptions(); Accessors for fit options, generator annd MCstudy configuration flags. RooLinkedList* fitOptList(); Return list of fit options provided by user. Bool_t extendedGen(); If true extended mode generation is requested. Bool_t binGenData(); If true binning of data between generating and fitting is requested. Double_t numExpGen(); Return expected number of events from generator model. Bool_t randProto(); If true randomization of prototype data order is requested. Bool_t verboseGen(); If true verbose message in the generation step is requested. » Last changed: Tue Mar 10 17:14:01 2015 » L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMCStudyModule.html:9232,depend,dependents,9232,root/html534/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html534/RooAbsMCStudyModule.html,2,['depend'],['dependents']
Integrability,"eters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGQuartz.; Definition at line 454 of file TVirtualX.cxx. ◆ GetTextExtent() [2/2]. void TVirtualX::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). virtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented in TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 466 of file TVirtualX.cxx. ◆ GetTextMagnitude(). Float_t TVirtualX::GetTextMagnitude ; (; ). virtual . Returns the current font magnification factor. ; Reimplemented in TGQuartz, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 512 of file TVirtualX.cxx. ◆ GetVisual(). Visual_t TVirtualX::GetVisual ; (; ); const. virtual . Returns handle to visual. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1227 of file TVirtualX.cxx. ◆ GetWindowAttributes(). void TVirtualX::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). virtual . The WindowAttributes_t structure is set to default. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 67 of file TVirtualX.cxx. ◆ GetWindowID(). Window_t TVirtualX::GetWindowID ; (; Int_t ; wid). virtual . Returns the X11 window identifier. ; Parameters. [in]widworkstation identifier (input) . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 530 of file TVirtualX.cxx. ◆ GetWindowSize(). void TVirtualX::GetWindowSize ; (; Drawable_t ; id, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). virtual . Returns the location and the size of window ""id"". ; Parameters. [in]iddrawable identifier ; [in]x,ycoordinates of the upper-left outer corner relative ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:92272,interface,interface,92272,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['interface'],['interface']
Integrability,"ethod for pathname expansion. ;  ; TSystem & operator= (const TSystem &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSystem.h>. Inheritance diagram for TSystem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAclicMode. enum TSystem::EAclicMode. EnumeratorkDefault ; kDebug ; kOpt . Definition at line 269 of file TSystem.h. ◆ EAclicProperties. enum TSystem::EAclicProperties. EnumeratorkFlatBuildDir . Definition at line 270 of file TSystem.h. Constructor & Destructor Documentation. ◆ TSystem() [1/2]. TSystem::TSystem ; (; const TSystem & ; ). privatedelete . ◆ TSystem() [2/2]. TSystem::TSystem ; (; const char * ; name = ""Generic"", . const char * ; title = ""Generic System"" . ). Create a new OS interface. ; Definition at line 125 of file TSystem.cxx. ◆ ~TSystem(). TSystem::~TSystem ; (; ). virtual . Delete the OS interface. ; Definition at line 139 of file TSystem.cxx. Member Function Documentation. ◆ Abort(). void TSystem::Abort ; (; int ; code = 0). virtual . Abort the application. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 725 of file TSystem.cxx. ◆ AcceptConnection(). int TSystem::AcceptConnection ; (; int ; sock). virtual . Accept a connection. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2381 of file TSystem.cxx. ◆ AccessPathName(). Bool_t TSystem::AccessPathName ; (; const char * ; path, . EAccessMode ; mode = kFileExists . ). virtual . Returns FALSE if one can access a file using the specified access mode. ; The file name must not contain any special shell characters line ~ or $, in those cases first call ExpandPathName(). Attention, bizarre convention of return value!! ; Reimplemented in TDCacheSystem, TNetSystem, TWebSystem, TUnixSystem, and TWinNTSystem.; Definition at line 1296 of file TSystem.cxx. ◆ AddDynamicPath(). void TSyste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:34210,interface,interface,34210,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['interface'],['interface']
Integrability,"ethod of selecting the target (only mulit target regr.) ;  ; TString fTargetSelectionStr;  method of selecting the target (only mulit target regr.) ;  ; Bool_t fUseYesNoCell;  return -1 or 1 for bg or signal like event ;  ; Float_t fVolFrac;  volume fraction (used for density calculation during buildup) ;  ; std::vector< Float_t > fXmax;  range for histograms and foams ;  ; std::vector< Float_t > fXmin;  . Additional Inherited Members;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodPDEFoam.h>. Inheritance diagram for TMVA::MethodPDEFoam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EKernel. typedef enum TMVA::MethodPDEFoam::EKernel TMVA::MethodPDEFoam::EKernel. Member Enumeration Documentation. ◆ EKernel. enum TMVA::MethodPDEFoam::EKernel. EnumeratorkNone ; kGaus ; kLinN . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:32900,message,message,32900,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['message'],['message']
Integrability,"ethodBase.; Definition at line 2756 of file MethodBDT.cxx. ◆ MakeClassSpecificHeader(). void TMVA::MethodBDT::MakeClassSpecificHeader ; (; std::ostream & ; fout, . const TString & ; className . ); const. virtual . Specific class header. ; Reimplemented from TMVA::MethodBase.; Definition at line 2876 of file MethodBDT.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBDT::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented from TMVA::MethodBase.; Definition at line 1068 of file MethodBDT.cxx. ◆ PreProcessNegativeEventWeights(). void TMVA::MethodBDT::PreProcessNegativeEventWeights ; (; ). private . O.k. ; you know there are events with negative event weights. This routine will remove them by pairing them with the closest event(s) of the same event class with positive weights A first attempt is ""brute force"", I dont' try to be clever using search trees etc, just quick and dirty to see if the result is any good ; Definition at line 932 of file MethodBDT.cxx. ◆ PrivateGetMvaValue(). Double_t TMVA::MethodBDT::PrivateGetMvaValue ; (; const TMVA::Event * ; ev, . Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr, . UInt_t ; useNTrees = 0 . ). private . Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ; Definition at line 2467 of file MethodBDT.cxx. ◆ ProcessOptions(). void TMVA::MethodBDT::ProcessOptions ; (; ). virtual . The option string is decoded, for available options see ""DeclareOptions"". ; Implements TMVA::MethodBase.; Definition at line 470 of file MethodBDT.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodBDT::ReadWeightsFromStream ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:54955,rout,routine,54955,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['rout'],['routine']
Integrability,"ethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory(MethodInfo_t* minfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. Bool_t MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. std::string MethodArgInfo_TypeNormalizedName(MethodArgInfo_t* marginfo) const. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. Bool_t TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:43462,Interface,Interface,43462,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Interface'],['Interface']
Integrability,"ethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:42411,Interface,Interface,42411,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,1,['Interface'],['Interface']
Integrability,"ethods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. ; The derived class VirtualIntegratorMultiDim defines the method for multi-dimensional integration. The concrete classes for one dimension (e.g. GSLIntegrator) or multi-dimension (e.g. GSLMCIntegrator) can be created using the plug-in manager. Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or ROOT::Math::IntegratorMultiDim ; Definition at line 48 of file VirtualIntegrator.h. Public Member Functions; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual double Error () const =0;  return the estimate of the absolute Error of the last Integral calculation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; virtual double Result () const =0;  return the Result of the last Integral calculation ;  ; virtual void SetAbsTolerance (double)=0;  set the desired absolute Error ;  ; virtual void SetRelTolerance (double)=0;  set the desired relative Error ;  ; virtual int Status () const =0;  return the Error Status of the last Integral calculation ;  . #include <Math/VirtualIntegrator.h>. Inheritance diagram for ROOT::Math::VirtualIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~VirtualIntegrator(). virtual ROOT::Math::VirtualIntegrator::~VirtualIntegrator ; (; ). inlinevirtual . destructor: no operation ; Definition at line 53 of file VirtualIntegrator.h. Member Function Documentation. ◆ Error(). virtual double ROOT::Math::VirtualIntegrator::Error ; (; ); const. pure virtual . return the estimate of the absolute Error of the last Integral calculation ; Implemented in ROOT::Math::Adaptiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html:1342,integrat,integrator,1342,doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,1,['integrat'],['integrator']
Integrability,"ethods. void ProcessSetup(); process all options; the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition). void DeclareCompatibilityOptions(). std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:20620,message,message,20620,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,1,['message'],['message']
Integrability,"ethods. void ProcessSetup(); process all options; the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(). std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDevia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:21533,message,message,21533,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,3,['message'],['message']
Integrability,"ethods. void ProcessSetup(); process all options; the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void CheckSetup(); check may be overridden by derived class; (sometimes, eg, fitters are used which can only be implemented during training phase). void InitBase(); default initialization called by all constructors. void DeclareBaseOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: VariableTransform=None,Decorrelated,PCA to use transformed variables; instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use; in the method. Only the Likelihood; Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:21502,message,message,21502,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,6,['message'],['message']
Integrability,"ethods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output ; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::PDEFoam ; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDistr Class for Event density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:98138,interface,interface,98138,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['interface'],['interface']
Integrability,"ethods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output ; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::PDEFoam General purpose self-adapting binning; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamIntegrand n-dimensional real positive integrand of FOAM; TMVA::PDEFoamMaxwt Controlling of the MC weight (maximum weight); TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:96089,interface,interface,96089,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['interface'],['interface']
Integrability,"etricFunctionOneDim ROOT::Math::IParametricGradFunctionOneDim::BaseParamFunc. Definition at line 334 of file IParamFunction.h. Constructor & Destructor Documentation. ◆ ~IParametricGradFunctionOneDim(). ROOT::Math::IParametricGradFunctionOneDim::~IParametricGradFunctionOneDim ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 342 of file IParamFunction.h. Member Function Documentation. ◆ DoParameterDerivative(). virtual double ROOT::Math::IParametricGradFunctionOneDim::DoParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the gradient, to be implemented by the derived classes. ; Implemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial. ◆ ParameterDerivative() [1/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:5649,interface,interface,5649,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,1,['interface'],['interface']
Integrability,"etrieve any valid GC. ;  ; int GetColorByName (const char *zColor);  This routine returns an index between 0 and N_COLOR-1 which indicates which ColorStruct_t structure in the fApColor[] array should be used to describe the color specified by the given name. ;  ; int GetColorByValue (ColorStruct_t *pRef);  Find a color integer for the color whose color components are given by pRef. ;  ; SHtmlStyle_t GetCurrentStyle ();  Get the current rendering style. ;  ; int GetDarkShadowColor (int iBgColor);  Given that the background color is iBgColor, figure out an appropriate color for the dark part of a 3D shadow. ;  ; GContext_t GetGC (int color, int font);  Return a GC from the cache. ;  ; int GetImageAlignment (TGHtmlElement *p);  Find the alignment for an image. ;  ; int GetImageAt (int x, int y);  This routine searchs for an image beneath the coordinates x,y and returns the token number of the image, or -1 if no image found. ;  ; int GetIndex (const char *zIndex, TGHtmlElement **ppToken, int *pIndex);  This routine decodes a complete index specification. ;  ; int GetLightShadowColor (int iBgColor);  Given that the background color is iBgColor, figure out an appropriate color for the bright part of the 3D shadow. ;  ; int GetLinkColor (const char *zURL);  For the markup <a href=XXX>, find out if the URL has been visited before or not. ;  ; SHtmlTokenMap_t * GetMarkupMap (int n);  Returns token map at location n. ;  ; const char * GetPctWidth (TGHtmlElement *p, char *opt, char *ret);  Return the height and width, converting to percent if required ret must be at least 16 characters long. ;  ; const char * GetUid (const char *string);  Given a string, this procedure returns a unique identifier for the string. ;  ; void HClear ();  Erase all data from the HTML widget. Bring it back to an empty screen. ;  ; void ImageChanged (TGHtmlImage *image, int newWidth, int newHeight);  This routine is called when an image changes. ;  ; int IndexMod (TGHtmlElement **pp, int *ip, char *c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:32346,rout,routine,32346,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,ets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TCollection*fGlobalFunctionsList of global functions; TCollection*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; Int_tfSvnRevisionSubversion revision number of built (dec value of Git short SHA1); TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:18368,message,message,18368,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,2,['message'],['message']
Integrability,"etters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{CONTOURS}\)), the corresponding names of the classes are written using sans-serif font type (MnMigrad, MnMinos, MnContours).; 2 Introduction: M basic concepts; [sec:intro]; 2.1 The organization of M; The M package acts on a multiparameter objective function which is called — for historical reasons — the \(\mbox{FCN}\) function (see [howto:fcn]). This function is usually a chisquared or a log–likelihood, but it could also be a mathematical function. The \(\mbox{FCN}\) function needs to be written in for which M defines the pure abstract base class FCNBase as interface. The user must define and implement the \(\mbox{FCN}\) function in a derived class from FCNBase. Sometimes this is done by an intermediate program such as HippoDraw@bib-HippoDraw, in which case M is being used under the control of such an intermediate program1. The value of the \(\mbox{FCN}\) function will in general depend on one or more variable parameters whose meaning is defined by the user (or by the intermediate program), but whose trial values are determined by M .; To take a simple example, suppose the problem is to fit a polynomial through a set of data points. Then the user would write a \(\mbox{FCN}\) which calculates the \(\chi^2\) between a polynomial and the data; the variable parameters of \(\mbox{FCN}\) would be the coefficients of the polynomials. Using objects for minimization from M , the user would request M to minimize the \(\mbox{FCN}\) with respect to the parameters, that is, find those values of the coefficients which give the lowest value of chisquare.; The user must therefore supply, in addition to the function to be analyzed, via a set or sequence of M applications the instructions which analysis is wanted. The instructions are coded in in the calling program (main.cpp), which allows looping, conditional execution, and all the other possibilities of , but not interactivity, since it must be compiled before execution.; 2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:7954,depend,depend,7954,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['depend'],['depend']
Integrability,"etting parameter bounds and step sizes to values different than the automatically computed ones, one needs to use the ROOT::Fit::ParameterSetting class. This example code will set the lower/upper bounds for the first parameter and a lower bound for the second parameter; fitter.SetFunction( fitFunction, false);; fitter.Config().ParSettings(0).SetLimits(0,1.E6);; fitter.Config().ParSettings(2).SetLowerLimit(0);; Note that a ROOT::Fit::ParameterSettings objects exists for each fit parameter and it created by the ROOT::Fit::FitConfig class, after the model function has been set in the Fitter. Only when the function is set, the number of parameter is known and automatically the FitConfig creates the corresponding ParameterSetting objects.; When fitting, different minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (librar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:201466,interface,interface,201466,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"eturn (*fFunc)( x, p );; 118 }; 119 ; 120 ; 121 FuncPtr fFunc;; 122 unsigned int fDim;; 123 std::vector<double> fParams;; 124 ; 125 ; 126 ; 127};; 128 ; 129 ; 130typedef double( * FreeMultiFunctionPtr ) (const double *);; 131 ; 132/**; 133 WrappedParamGenFunction class to wrap any multi-dimensional function; 134 implementing the operator()(const double * ); 135 in an interface-like IParamFunction, by fixing some of the variables and define them as; 136 parameters.; 137 i.e. transform any multi-dim function in a parametric function; 138 ; 139 @ingroup ParamFunc; 140 ; 141*/; 142template< typename FuncPtr = FreeMultiFunctionPtr >; 143class WrappedParamFunctionGen : public IParamMultiFunction {; 144 ; 145public:; 146 ; 147 /**; 148 Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became; 149 parameters in the new API; 150 */; 151 ; 152 WrappedParamFunctionGen (const FuncPtr & func, unsigned int dim, unsigned int npar, const double * par, const unsigned int * idx) :; 153 fFunc(func),; 154 fDim(dim),; 155 fParams(std::vector<double>(par,par+npar) ),; 156 fParIndices(std::vector<unsigned int>(idx, idx + npar) ),; 157 fX(std::vector<double>(npar+dim) ) // cached vector; 158 {; 159 DoInit();; 160 }; 161 ; 162 /**; 163 Constructor as before but taking now a non - const pointer to a callable object.; 164 This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; 165 */; 166 WrappedParamFunctionGen (FuncPtr & func, unsigned int dim, unsigned int npar, const double * par, const unsigned int * idx) :; 167 fFunc(func),; 168 fDim(dim),; 169 fParams(std::vector<double>(par,par+npar) ),; 170 fParIndices(std::vector<unsigned int>(idx, idx + npar) ),; 171 fX(std::vector<double>(npar+dim) ) // cached vector; 172 {; 173 Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedParamFunction_8h_source.html:4893,wrap,wrapped,4893,doc/master/WrappedParamFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedParamFunction_8h_source.html,1,['wrap'],['wrapped']
Integrability,"eturn 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147185,message,message,147185,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['message'],['message']
Integrability,"eturn 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. bool TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; G__TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. bool TypedefInfo_IsValid(TypedefInfo_t* ) const; {return 0;}. Long_t TypedefInfo_Property(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Size(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_TrueName(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Name(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Title(TypedefInfo_t* ) const; {return 0;}. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TInterpreter.h 34701 2010-08-02 20:10:24Z pcanal $ » Last generated: 2010-09-23 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:29347,interface,interface,29347,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,1,['interface'],['interface']
Integrability,"eturn 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. bool TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; G__TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. bool TypedefInfo_IsValid(TypedefInfo_t* ) const; {return 0;}. Long_t TypedefInfo_Property(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Size(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_TrueName(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Name(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Title(TypedefInfo_t* ) const; {return 0;}. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TInterpreter.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TInterpreter.html:29511,interface,interface,29511,root/html530/TInterpreter.html,https://root.cern,https://root.cern/root/html530/TInterpreter.html,1,['interface'],['interface']
Integrability,"eturn 0;}. Long_t MethodArgInfo_Property(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_Name(MethodArgInfo_t* ) const; {return 0;}. const char * MethodArgInfo_TypeName(MethodArgInfo_t* ) const; {return 0;}. void TypeInfo_Delete(TypeInfo_t* ) const; G__TypeInfo interface. {;}. TypeInfo_t * TypeInfo_Factory() const; {return 0;}. TypeInfo_t * TypeInfo_Factory(G__value* ) const; {return 0;}. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; {return 0;}. void TypeInfo_Init(TypeInfo_t* , const char* ) const; {;}. bool TypeInfo_IsValid(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_Name(TypeInfo_t* ) const; {return 0;}. Long_t TypeInfo_Property(TypeInfo_t* ) const; {return 0;}. int TypeInfo_RefType(TypeInfo_t* ) const; {return 0;}. int TypeInfo_Size(TypeInfo_t* ) const; {return 0;}. const char * TypeInfo_TrueName(TypeInfo_t* ) const; {return 0;}. void TypedefInfo_Delete(TypedefInfo_t* ) const; G__TypedefInfo interface. {;}. TypedefInfo_t * TypedefInfo_Factory() const; {return 0;}. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* ) const; {return 0;}. void TypedefInfo_Init(TypedefInfo_t* , const char* ) const; {;}. bool TypedefInfo_IsValid(TypedefInfo_t* ) const; {return 0;}. Long_t TypedefInfo_Property(TypedefInfo_t* ) const; {return 0;}. int TypedefInfo_Size(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_TrueName(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Name(TypedefInfo_t* ) const; {return 0;}. const char * TypedefInfo_Title(TypedefInfo_t* ) const; {return 0;}. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TInterpreter.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TInterpreter.html:29511,interface,interface,29511,root/html532/TInterpreter.html,https://root.cern,https://root.cern/root/html532/TInterpreter.html,2,['interface'],['interface']
Integrability,"eturn 100*tmp1*tmp1+tmp2*tmp2;; }; ; int NumericalMinimization(const char * minName = ""Minuit2"",; const char *algoName = """" ,; int randomSeed = -1); {; // create minimizer giving a name and a name (optionally) for the specific; // algorithm; // possible choices are:; // minName algoName; // Minuit /Minuit2 Migrad, Simplex,Combined,Scan (default is Migrad); // Minuit2 Fumili2; // Fumili; // GSLMultiMin ConjugateFR, ConjugatePR, BFGS,; // BFGS2, SteepestDescent; // GSLMultiFit; // GSLSimAn; // Genetic; ROOT::Math::Minimizer* minimum =; ROOT::Math::Factory::CreateMinimizer(minName, algoName);; if (!minimum) {; std::cerr << ""Error: cannot create minimizer \"""" << minName; << ""\"". Maybe the required library was not built?"" << std::endl;; return 1;; }; ; // set tolerance , etc...; minimum->SetMaxFunctionCalls(1000000); // for Minuit/Minuit2; minimum->SetMaxIterations(10000); // for GSL; minimum->SetTolerance(0.001);; minimum->SetPrintLevel(1);; ; // create function wrapper for minimizer; // a IMultiGenFunction type; ROOT::Math::Functor f(&RosenBrock,2);; double step[2] = {0.01,0.01};; // starting point; ; double variable[2] = { -1.,1.2};; if (randomSeed >= 0) {; TRandom2 r(randomSeed);; variable[0] = r.Uniform(-20,20);; variable[1] = r.Uniform(-20,20);; }; ; minimum->SetFunction(f);; ; // Set the free variables to be minimized !; minimum->SetVariable(0,""x"",variable[0], step[0]);; minimum->SetVariable(1,""y"",variable[1], step[1]);; ; // do the minimization; minimum->Minimize();; ; const double *xs = minimum->X();; std::cout << ""Minimum: f("" << xs[0] << "","" << xs[1] << ""): ""; << minimum->MinValue() << std::endl;; ; // expected minimum is 0; if ( minimum->MinValue() < 1.E-4 ); std::cout << ""Minimizer "" << minName << "" - "" << algoName; << "" converged to the right minimum"" << std::endl;; else {; std::cout << ""Minimizer "" << minName << "" - "" << algoName; << "" failed to converge !!!"" << std::endl;; Error(""NumericalMinimization"",""fail to converge"");; }; ; return 0;; }; Functor.h; Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NumericalMinimization_8C.html:1774,wrap,wrapper,1774,doc/master/NumericalMinimization_8C.html,https://root.cern,https://root.cern/doc/master/NumericalMinimization_8C.html,1,['wrap'],['wrapper']
Integrability,"eturn GetMean(axis+10);; 7580}; 7581 ; 7582////////////////////////////////////////////////////////////////////////////////; 7583/// Returns the Standard Deviation (Sigma).; 7584/// The Sigma estimate is computed as; 7585/// \f[; 7586/// \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; 7587/// \f]; 7588/// For axis = 1,2 or 3 returns the Sigma value of the histogram along; 7589/// X, Y or Z axis; 7590/// For axis = 11, 12 or 13 returns the error of StdDev estimation along; 7591/// X, Y or Z axis for Normal distribution; 7592///; 7593/// Note that the mean value/sigma is computed using the bins in the currently; 7594/// defined range (see TAxis::SetRange). By default the range includes; 7595/// all bins from 1 to nbins included, excluding underflows and overflows.; 7596/// To force the underflows and overflows in the computation, one must; 7597/// call the static function TH1::StatOverflows(kTRUE) before filling; 7598/// the histogram.; 7599///; 7600/// IMPORTANT NOTE: The returned value depends on how the histogram statistics; 7601/// are calculated. By default, if no range has been set, the returned standard; 7602/// deviation is the (unbinned) one calculated at fill time. If a range has been; 7603/// set, however, the standard deviation is calculated using the bins in range,; 7604/// as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use; 7605/// TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard; 7606/// deviation (and all other statistics) is always that of the binned data stored; 7607/// in the histogram, call TH1::ResetStats. See TH1::GetStats.; 7608 ; 7609Double_t TH1::GetStdDev(Int_t axis) const; 7610{; 7611 if (axis<1 || (axis>3 && axis<11) || axis>13) return 0;; 7612 ; 7613 Double_t x, stddev2, stats[kNstat];; 7614 for (Int_t i=4;i<kNstat;i++) stats[i] = 0;; 7615 GetStats(stats);; 7616 if (stats[0] == 0) return 0;; 7617 Int_t ax[3] = {2,4,7};; 7618 Int_t axm = ax[axis%10 - 1];; 7619 x = stats[axm]/stats[0];; 7620 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:296902,depend,depends,296902,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['depend'],['depends']
Integrability,"eturn __FILE__; }; 315)ICF"";; 316}; 317R__EXTERN int optind;; 318 ; 319// The functions are used to bridge cling/clang/llvm compiled with no-rtti and; 320// ROOT (which uses rtti); 321 ; 322////////////////////////////////////////////////////////////////////////////////; 323/// Print a StackTrace!; 324 ; 325extern ""C""; 326void TCling__PrintStackTrace() {; 327 gSystem->StackTrace();; 328}; 329 ; 330////////////////////////////////////////////////////////////////////////////////; 331/// Load a library.; 332 ; 333extern ""C"" int TCling__LoadLibrary(const char *library); 334{; 335 return gSystem->Load(library, """", false);; 336}; 337 ; 338////////////////////////////////////////////////////////////////////////////////; 339/// Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused.; 340 ; 341extern ""C"" void TCling__RestoreInterpreterMutex(void *delta); 342{; 343 ((TCling*)gCling)->ApplyToInterpreterMutex(delta);; 344}; 345 ; 346////////////////////////////////////////////////////////////////////////////////; 347/// Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name,; 348/// which is extracted by error messages we get from callback from cling. Return true; 349/// when the missing library was autoloaded.; 350 ; 351extern ""C"" bool TCling__LibraryLoadingFailed(const std::string& errmessage, const std::string& libStem, bool permanent, bool resolved); 352{; 353 return ((TCling*)gCling)->LibraryLoadingFailed(errmessage, libStem, permanent, resolved);; 354}; 355 ; 356////////////////////////////////////////////////////////////////////////////////; 357/// Reset the interpreter lock to the state it had before interpreter-related; 358/// calls happened.; 359 ; 360extern ""C"" void *TCling__ResetInterpreterMutex(); 361{; 362 return ((TCling*)gCling)->RewindInterpreterMutex();; 363}; 364 ; 365////////////////////////////////////////////////////////////////////////////////; 366/// Lock the interpreter.; 367 ; 368extern ""C"" void *TCling__LockCompi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:12210,message,messages,12210,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['message'],['messages']
Integrability,"eturn a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. std::list<std::string> getBinningNames() const; Get a list of all binning names. An empty name implies the default binning and; a NULL pointer should be passed to getBinning in this case. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameteri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealVar.html:44086,message,message,44086,root/html534/RooRealVar.html,https://root.cern,https://root.cern/root/html534/RooRealVar.html,6,['message'],['message']
Integrability,"eturn a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:41072,message,message,41072,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,4,['message'],['message']
Integrability,"eturn a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; AnaIntData & anaIntData (Int_t code) const;  Check if cache entry was previously created. ;  ; void decodeCode (Int_t code, std::vector< int > &map1, std::vector< int > &map2) const;  Decode analytical integration/generation code into index map of integrated/generated (map2) and non-integrated/generated observables (map1) ;  ; double evaluate () const override;  Do not persist. ;  ; GenData & genData (Int_t code) const;  WVE – CHECK THAT GENDATA IS VALID GIVEN CURRENT VALUES OF _MU. ;  ; void syncMuVec () const;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:60406,rout,routine,60406,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['rout'],['routine']
Integrability,"eturn expected number of events for extended likelihood calculation, this is the sum of all coefficients ; Definition at line 2804 of file RooLagrangianMorphFunc.cxx. ◆ expectedEvents() [3/3]. double RooLagrangianMorphFunc::expectedEvents ; (; const RooArgSet * ; nset); const. return expected number of events for extended likelihood calculation, this is the sum of all coefficients ; Definition at line 2785 of file RooLagrangianMorphFunc.cxx. ◆ expectedUncertainty(). double RooLagrangianMorphFunc::expectedUncertainty ; (; ); const. return the expected uncertainty for the current parameter set ; Definition at line 2812 of file RooLagrangianMorphFunc.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooLagrangianMorphFunc::extendMode ; (; ); const. return extended mored capabilities ; Definition at line 2776 of file RooLagrangianMorphFunc.cxx. ◆ forceAnalyticalInt(). bool RooLagrangianMorphFunc::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. overridevirtual . Force analytical integration for the given observable. ; Reimplemented from RooAbsReal.; Definition at line 2938 of file RooLagrangianMorphFunc.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooLagrangianMorphFunc::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; numVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Retrieve the mat. ; Reimplemented from RooAbsReal.; Definition at line 2946 of file RooLagrangianMorphFunc.cxx. ◆ getBinWidth(). RooRealVar * RooLagrangianMorphFunc::getBinWidth ; (; ); const. retrieve the histogram observable ; Definition at line 2531 of file RooLagrangianMorphFunc.cxx. ◆ getCache(). RooLagrangianMorphFunc::CacheElem * RooLagrangianMorphFunc::getCache ; (; ); const. private . retrieve the cache object ; Definition at line 2327 of file RooLagrangianMorphFunc.cxx. ◆ getCondition(). double RooLagrangianMorphFunc::getCondition ; (; ); const. Retrieve the condition of the coefficient matrix. ; If the condition number is ver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:79753,integrat,integration,79753,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['integrat'],['integration']
Integrability,"eturn the upper point not the closest one. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target, bool lower = true, double xmin = 1, double xmax = 0); Return an error estimate on the upper(lower) limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); need to have compute first lower limit. Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value; opt = """" (default) : compute limit by interpolating all the p values, find the corresponding limit distribution; and then find the quantiles in the limit distribution; ioption = ""P"" is the method used for plotting. One Finds the corresponding nsig quantile in the p values and then; interpolates them. double GetExpectedUpperLimit(double nsig = 0, const char* opt = """") const; Get the expected upper limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:14678,depend,depending,14678,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,6,['depend'],['depending']
Integrability,"eturn value is a unique identifier code, that will be passed to coefficient() to identify the basis function for which the coefficient is requested. If the resolution model used does not support the declared basis function, code -1 is returned. ; Definition at line 159 of file RooAbsAnaConvPdf.cxx. ◆ DeclFileName(). static const char * RooAbsAnaConvPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 120 of file RooAbsAnaConvPdf.h. ◆ evaluate(). double RooAbsAnaConvPdf::evaluate ; (; ); const. overrideprotectedvirtual . Calculate the current unnormalized value of the PDF. ; PDF = sum_k coef_k * [ basis_k (x) ResModel ] ; Implements RooAbsReal.; Definition at line 329 of file RooAbsAnaConvPdf.cxx. ◆ forceAnalyticalInt(). bool RooAbsAnaConvPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . This function forces RooRealIntegral to offer all integration dependents to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for internal integration, if RooRealIntegral considers this to be unsafe (e.g. ; due to hidden Jacobian terms).; RooAbsAnaConvPdf will not attempt to actually integrate all these dependents but feed them to the resolution models integration interface, which will make the final determination on how to integrate these dependents. ; Reimplemented from RooAbsReal.; Definition at line 566 of file RooAbsAnaConvPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsAnaConvPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overridevirtual . Create a generator context for this p.d.f. ; If both the p.d.f and the resolution model support internal generation of the convolution observable on an infinite domain, deploy a specialized convolution generator context, which generates the physics distribution and the smearing separately, adding them a posteriori.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:84877,integrat,integration,84877,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,3,"['depend', 'integrat']","['dependents', 'integration']"
Integrability,"eturns -1 in case of error. ; Reimplemented from TSocket.; Definition at line 768 of file TPSocket.cxx. ◆ GetSize(). Int_t TPSocket::GetSize ; (; ); const. inline . Definition at line 83 of file TPSocket.h. ◆ Init(). void TPSocket::Init ; (; Int_t ; tcpwindowsize, . TSocket * ; sock = nullptr . ). private . Create a parallel socket to the specified host. ; Definition at line 356 of file TPSocket.cxx. ◆ IsA(). TClass * TPSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 85 of file TPSocket.h. ◆ IsValid(). Bool_t TPSocket::IsValid ; (; ); const. inlineoverridevirtual . Reimplemented from TSocket.; Definition at line 79 of file TPSocket.h. ◆ operator=(). void TPSocket::operator= ; (; const TPSocket & ; ). privatedelete . ◆ Recv() [1/4]. Int_t TPSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TPSocket.h. ◆ Recv() [2/4]. Int_t TPSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TPSocket.h. ◆ Recv() [3/4]. Int_t TPSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connectio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:26132,message,message,26132,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['message'],['message']
Integrability,"evFCN = 1900.156536 a1=-1.497, y=0, ; prevFCN = 1900.088181 a1=-1.485, ; prevFCN = 1899.958806 a1=-1.491, ; prevFCN = 1899.994382 a1=-1.484, ; prevFCN = 1899.958577 a1=-1.485, ; prevFCN = 1899.959183 a1=-1.484, ; prevFCN = 1899.958511 a1=-1.485, ; prevFCN = 1899.960007 a1=-1.485, y=0.0003051, ; prevFCN = 1899.958806 y=-0.0003051, ; prevFCN = 1899.958806 a1=-1.484, y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 y=0, [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; y=0, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8py.html:4773,synchroniz,synchronize,4773,doc/master/rf315__projectpdf_8py.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8py.html,1,['synchroniz'],['synchronize']
Integrability,"evFCN = 1900.156536 a1=-1.497, y=0, ; prevFCN = 1900.088181 a1=-1.485, ; prevFCN = 1899.958806 a1=-1.491, ; prevFCN = 1899.994382 a1=-1.484, ; prevFCN = 1899.958577 a1=-1.485, ; prevFCN = 1899.959183 a1=-1.484, ; prevFCN = 1899.958511 a1=-1.485, ; prevFCN = 1899.960007 a1=-1.485, y=0.0003051, ; prevFCN = 1899.958806 y=-0.0003051, ; prevFCN = 1899.958806 a1=-1.484, y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 y=0, [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; y=0, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf315",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8C.html:9200,synchroniz,synchronize,9200,doc/master/rf315__projectpdf_8C.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8C.html,1,['synchroniz'],['synchronize']
Integrability,"evTObjLink * Prev()Definition TList.h:152; TObjLink::GetAddOptionvirtual Option_t * GetAddOption() constDefinition TList.h:148; TObjLink::fObjectTObject * fObjectDefinition TList.h:134; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::fPrevTObjLinkWeakPtr_t fPrevDefinition TList.h:132; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjLink::fNextTObjLinkPtr_t fNextDefinition TList.h:131; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TSeqCollection::Changedvirtual void Changed()Definition TSeqCollection.h:34; TSeqCollection::fSortedBool_t fSortedDefinition TSeqCollection.h:31; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; bool; int; object; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. corecontsrcTList.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:46914,message,message,46914,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['message'],['message']
Integrability,"evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:39719,interface,interface,39719,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['interface'],['interface']
Integrability,"eve that they may not be; 199accurate.; 200 ; 201If no mitigating adjective is given, then at least MINUIT believes the; 202errors are accurate, although there is always a small chance that MINUIT; 203has been fooled. Some visible signs that MINUIT may have been fooled are:; 204 ; 205 ; 206 1. Warning messages produced during the minimization or error analysis.; 207 ; 208 2. Failure to find new minimum.; 209 ; 210 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum).; 211 ; 212 4. Correlation coefficients exactly equal to zero, unless some parameters; 213 are known to be uncorrelated with the others.; 214 ; 215 5. Correlation coefficients very close to one (greater than 0.99). This; 216 indicates both an exceptionally difficult problem, and one which has been; 217 badly parameterised so that individual errors are not very meaningful; 218 because they are so highly correlated.; 219 ; 220 6. Parameter at limit. This condition, signalled by a MINUIT warning; 221 message, may make both the function minimum and parameter errors; 222 unreliable. See the discussion above ``Getting the right parameter errors; 223 with limits''.; 224 ; 225 ; 226The best way to be absolutely sure of the errors, is to use; 227``independent'' calculations and compare them, or compare the calculated; 228errors with a picture of the function. Theoretically, the covariance; 229matrix for a ``physical'' function must be positive-definite at the; 230minimum, although it may not be so for all points far away from the; 231minimum, even for a well-determined physical problem. Therefore, if MIGRAD; 232reports that it has found a non-positive-definite covariance matrix, this; 233may be a sign of one or more of the following:; 234 ; 235##### A non-physical region:; 236 ; 237On its way to the minimum, MIGRAD may have traversed a region which has; 238unphysical behaviour, which is of course not a serious problem as long as; 239it recovers and leaves such a region.; 240 ; 241##### An underdetermin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:10674,message,message,10674,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['message'],['message']
Integrability,"evel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts). { return _silentMode ; }. void setSilentMode(Bool_t flag); { _silentMode = flag ; }. Int_t errorCount() const; { return _errorCount ; }. void clearErrorCount(); { _errorCount = 0 ; }. RooMsgService(); Private ctor -- singleton class. » Last changed: Mon Dec 7 13:48:17 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:11973,message,messages,11973,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,2,"['message', 'rout']","['messages', 'routed']"
Integrability,"evel, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; Int_t _lowestOrder = 1;  ; std::vector< double > _wksp;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:68826,integrat,integration,68826,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['integrat'],['integration']
Integrability,"evel, const char* location, const char* fmt, va_list va) const; voidinitialize(const RooAbsFunc* function = 0); RooImproperIntegrator1D::LimitsCaselimitsCase() const; voidTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact). Data Members; public:. enum LimitsCase { Invalid; ClosedBothEnds; OpenBothEnds; OpenBelowSpansZero; OpenBelow; OpenAboveSpansZero; OpenAbove; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooImproperIntegrator1D::LimitsCase_caseConfiguration of limits; RooNumIntConfig_configConfiguration object; RooInvTransform*_functionBinding with inverse of function; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; RooIntegrator1D*_integrator1; RooIntegrator1D*_integrator2; RooIntegrator1D*_integrator3Piece integrators; RooAbsFunc*_origFuncOriginal function binding; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsUse limits in function binding?; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmaxValue of limits; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooImproperIntegrator1D, its parameters and capabilities with RooNumIntFactory. RooImproperIntegrator1D(); Default constructor. RooImproperIntegrator1D(const RooAbsFunc& function); Constructor with function binding. The integration range is taken from the; definition in the function binding. RooImproperIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with function binding and configuration object. The integration range is taken; from the definition in the function bind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooImproperIntegrator1D.html:6957,integrat,integrators,6957,root/html526/RooImproperIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooImproperIntegrator1D.html,21,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"evel; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:11827,integrat,integrator,11827,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,2,['integrat'],['integrator']
Integrability,"eveloped anymore and receiving only limited support. ROOT has since a few years moved to RDataFrame and related products as multi-core/multi-processing engines. ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset; Use observableOverlaps() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const; Use recursiveCheckObservables() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const; Use checkObservables() ; Member RooAbsArg::R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList; Use observableOverlaps() ; Member RooAbsCategory::defineType (const char *label); Use defineState(const std::string& label) ; Member RooAbsCategory::defineType (const char *label, int index); Use defineState(const std::string& label, value_type index) ; Member RooAbsCategory::defineTypeUnchecked (const char *label, value_type index); Use defineStateUnchecked(const std::string& label, value_type index) ; Member RooAbsCategory::lookupType (const RooCatType &type, bool printError=false) const; RooCatType is not used, any more. This function will create one and let it leak. Use lookupIndex() (preferred) or lookupName() instead. ; Member RooAbsCategory::lookupType (value_type index, bool printError=false) const; RooCatType is not used, any more. This function will create one and let it leak. Use lookupIndex() (preferred) or lookupName() instead. ; Member RooAbsCategory::lookupType (const char *label, bool printError=false) const; RooCatType is not used, any more. This function will create one and let it leak. Use lookupIndex() (preferred) or lookupName() instead. ; Member RooAbsCategory::typeIterator () const; Use begin() and end() instead. ; Class RooAbsCategoryLegacyIterator ; Legacy class to iterate through legacy Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/deprecated.html:994,depend,dependentOverlaps,994,doc/master/deprecated.html,https://root.cern,https://root.cern/doc/master/deprecated.html,1,['depend'],['dependentOverlaps']
Integrability,"evels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or \(\mbox{HESSE}\) step, the errors are usually quite accurate, unless there has been a problem. If no mitigating adjective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a M warning message, may make both the function minimum and parameter errors unreliable. See section [answer:right-errors], Getting the right parameter errors with limits. The best way to be absolutely sure of the errors, is to use “independent” calculations and compare them, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:74407,message,messages,74407,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['message'],['messages']
Integrability,"event list text entry; TGTextEntry*fTxtOptionsoptions text entry; TGTextEntry*fTxtQueryNamequery name text entry; TGTextEntry*fTxtSelectorselector name text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNewQueryDlg(TSessionViewer* gui, Int_t Width, Int_t Height, TQueryDescription* query = 0, Bool_t editmode = kFALSE); Create a new Query dialog, used by the Session Viewer, to Edit a Query if; the editmode flag is set, or to create a new one if not set. ~TNewQueryDlg(); Delete query dialog. void Build(TSessionViewer* gui); Build the ""new query"" dialog. void CloseWindow(); Called when window is closed via the window manager. void OnNewQueryMore(); Show/hide options frame and update button text accordingly. void OnBrowseChain(); Call new chain dialog. void OnElementSelected(TObject* obj); Handle OnElementSelected signal coming from new chain dialog. void OnBrowseSelector(); Open file browser to choose selector macro. void OnBrowseEventList(); Browse event list. void OnBtnSaveClicked(); Save current settings in main session viewer. void OnBtnSubmitClicked(); Save and submit query description. void OnBtnCloseClicked(); Close dialog. void Popup(); Display dialog and set focus to query name text entry. void SettingsChanged(); Settings have changed, update GUI accordingly. void UpdateFields(TQueryDescription* desc); Update entry fields with query description values. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for new query dialog.; Essentially used to navigate between text entry fields. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNewQueryDlg.html:24322,message,messages,24322,root/html534/TNewQueryDlg.html,https://root.cern,https://root.cern/root/html534/TNewQueryDlg.html,2,['message'],['messages']
Integrability,"ever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 21",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:7244,interface,interface,7244,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,3,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,"evirtual . Definition at line 316 of file TProofServ.h. ◆ EnableTimeout(). virtual void TProofServ::EnableTimeout ; (; ). inlinevirtual . Definition at line 317 of file TProofServ.h. ◆ ErrorHandler(). void TProofServ::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). static . The PROOF error handler function. ; It prints the message on fgErrorHandlerFile and if abort is set it aborts the application. ; Definition at line 5755 of file TProofServ.cxx. ◆ FilterLocalroot(). void TProofServ::FilterLocalroot ; (; TString & ; path, . const char * ; dsrv = ""root://dum/"" . ). static . If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings, if any. ; The final path via the server is dsrv+path. ; Definition at line 6966 of file TProofServ.cxx. ◆ FlushLogFile(). void TProofServ::FlushLogFile ; (; ). Reposition the read pointer in the log file to the very end. ; This allows to ""hide"" useful debug messages during normal operations while preserving the possibility to have them in case of problems. ; Definition at line 6013 of file TProofServ.cxx. ◆ Fork(). Int_t TProofServ::Fork ; (; ). protectedvirtual . Fork a child. ; If successful, return 0 in the child process and the child pid in the parent process. The child pid is registered for reaping. Return <0 in the parent process in case of failure. ; Definition at line 6665 of file TProofServ.cxx. ◆ Get(). TObject * TProofServ::Get ; (; const char * ; namecycle). Get object with name ""name;cycle"" (e.g. ; ""aap;2"") from master or client. This method is called by TDirectory::Get() in case the object can not be found locally. ; Definition at line 1091 of file TProofServ.cxx. ◆ GetActSessions(). Int_t TProofServ::GetActSessions ; (; ); const. inline . Definition at line 263 of file TProofServ.h. ◆ GetCacheDir(). const char * TProofServ::GetCacheDir ; (; ); const. inline . Definition at line 248 of file TProofServ.h. ◆ GetCacheLock(). TProofLockPath * TProofServ::GetC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:36127,message,messages,36127,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['message'],['messages']
Integrability,"evirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinWidth(). Double_t TH1::GetBinWidth ; (; Int_t ; bin); const. virtual . Return bin width for 1D histogram. ; Better to use h1.GetXaxis()->GetBinWidth(bin) ; Definition at line 9163 of file TH1.cxx. ◆ GetBinWithContent(). Double_t TH1::GetBinWithContent ; (; Double_t ; c, . Int_t & ; binx, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ; In case several bins in the specified range with diff=0 are found the first bin found is returned in binx. In case several bins in the specified range satisfy diff <=maxdiff the bin with th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:151050,depend,depend,151050,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['depend'],['depend']
Integrability,"ew; };; enum { kLoading; kDefault; kEmulated; kTObject; kInstrumented; kForeign; kExternal; };; enum TDictionary::ESTLType { kNone; kVector; kList; kDeque; kMap; kMultimap; kSet; kMultiset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fAllPubDataall public data members (including from base classes); TList*fAllPubMethodall public methods (including from base classes); TList*fBaselinked list for base classes; Int_tfCanSplit!Indicates whether this class can be split or not.; UInt_tfCheckSumchecksum of data members and base classes; ClassInfo_t*fClassInfopointer to CINT class info class; TList*fClassMenuListlist of class menu items; Version_tfClassVersionClass version Identifier; TVirtualCollectionProxy*fCollectionProxyCollection interface; TStringfContextMenuTitlecontext menu title; map<std::string,TObjArray*>*fConversionStreamerInfoArray of the streamer infos derived from another class.; TVirtualStreamerInfo*fCurrentInfo!cached current streamer info.; TList*fDatalinked list for data members; Short_tfDeclFileLineline of class declaration; const char*fDeclFileNamename of class declaration file; void*fDeletepointer to a function deleting one object.; void*fDeleteArraypointer to a function deleting an array of objects.; void*fDestructorpointer to a function call an object's destructor.; void*fDirAutoAddpointer which implements the Directory Auto Add feature for this class.']'; IsAGlobalFunc_tfGlobalIsApointer to a global IsA function.; Short_tfImplFileLineline of class implementation; const char*fImplFileNamename of class implementation file; UInt_tfInstanceCountnumber of instances of this class; void*fInterShowMembersInterpreter call setup for ShowMembers; TVirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:14549,interface,interface,14549,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,3,['interface'],['interface']
Integrability,"ewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetfgDefaultColorSet! a shared, default color-set; static Bool_tfgUseDefaultColorSetForNewViewers! name says it all. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewer(TVirtualPad* pad, Int_t x, Int_t y, Int_t width, Int_t height); Construct the viewer object, with following arguments:; 'pad' - external pad viewer is bound to; 'x', 'y' - initial top left position; 'width', 'height' - initial width/height. TGLViewer(TVirtualPad* pad); gl-embedded viewer's ctor; Construct the viewer object, with following arguments:; 'pad' - external pad viewer is bound to; 'x', 'y' - initial top left position; 'width', 'height' - initial width/height. void InitSecondaryObjects(); Common initialization. ~TGLViewer(); Destroy viewer object. void PadPaint(TVirtualPad* pad); Entry point for updating viewer contents via VirtualViewer3D; interface.; We search and forward the request to appropriate TGLScenePad.; If it is not found we create a new TGLScenePad so this can; potentially also be used for registration of new pads. void UpdateScene(Bool_t redraw = kTRUE); Force update of pad-scenes. Eventually this could be generalized; to all scene-types via a virtual function in TGLSceneBase. void ResetCurrentCamera(); Resets position/rotation of current camera to default values. void SetupCameras(Bool_t reset); Setup cameras for current bounding box. void PostSceneBuildSetup(Bool_t resetCameras); Perform post scene-build setup. void InitGL(); Initialise GL state. void RequestDraw(Short_t LOD = TGLRnrCtx::kLODMed); Post request for redraw of viewer at level of detail 'LOD'; Request is directed via cross thread gVirtualGL object. void SetupClipObject(); Setup clip-object. Protected virtual method. void PreRender(); Initialize objects that influence rendering.; Called before every ren",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewer.html:23348,interface,interface,23348,root/html528/TGLViewer.html,https://root.cern,https://root.cern/root/html528/TGLViewer.html,10,['interface'],['interface']
Integrability,"ewerListList of Viewers providing common operations on TEveViewer collections ;  CTEveViewerListEditorGUI editor for TEveViewerList ;  CTEveVSDVisualization Summary Data - a collection of trees holding standard event data in experiment independent format ;  CTEveWindowAbstract base-class for representing eve-windows ;  CTEveWindowEditorGUI editor for TEveWindow ;  CTEveWindowFrameEncapsulates TGFrame into an eve-window ;  CTEveWindowManagerManager for EVE windows ;  CTEveWindowPackEncapsulates TGPack into an eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  ►CTF11-Dim function class ;  CTF1FunctorPointer;  CTF1FunctorPointerImpl;  CTF12A projection of a TF2 along X or Y ;  CTF1AbsComposition;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMerge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:150156,wrap,wrapping,150156,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['wrap'],['wrapping']
Integrability,"ewerListList of Viewers providing common operations on TEveViewer collections ;  CTEveViewerListEditorGUI editor for TEveViewerList ;  CTEveVSDVisualization Summary Data - a collection of trees holding standard event data in experiment independent format ;  CTEveWindowAbstract base-class for representing eve-windows ;  CTEveWindowEditorGUI editor for TEveWindow ;  CTEveWindowFrameEncapsulates TGFrame into an eve-window ;  CTEveWindowManagerManager for EVE windows ;  CTEveWindowPackEncapsulates TGPack into an eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  ►CTF11-Dim function class ;  CTF1FunctorPointer;  CTF1FunctorPointerImpl;  CTF12A projection of a TF2 along X or Y ;  CTF1AbsComposition;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  ►CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CInfoListRetSimple struct of the return value of GetStreamerInfoListImpl ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:153793,wrap,wrapping,153793,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,2,['wrap'],['wrapping']
Integrability,"ewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1C1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1D1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1F1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1I1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1S1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2C2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2D2-D histogram with a double per channel (see TH1 documentation)} ;  CTH2Editor;  CTH2F2-D histogram with a float per channel (see TH1 documentation)} ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:177608,interface,interface,177608,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['interface'],['interface']
Integrability,"ewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2-D histogram with a double per channel (see TH1 documentation)} ;  CTH2Editor;  CTH2FTomato 2-D histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:160467,interface,interface,160467,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['interface'],['interface']
Integrability,"ewspaper> myTribuneDeGeneve(subscriptionManager, ""TribuneDeGeneve"");. TTreeReader::Next(); You would not want to have all issues of the Tribune de Geneve at once, but only one, say today's. You do that by requesting delivery of an issue from the subscription manager: Data delivery; // In this example, we loop over all entries on the TTree.; while (subscriptionManager.Next()) {; // Now myTribuneDeGeneve has loaded its data and we can access it.; // TTreeReaderValue behaves like an iterator; you need to use ""->"" on; // it to access the data it refers to.; myTribuneDeGeneve->read();; ...; }. Summary; As you saw, TTree is about. Chunking up similar, disconnected entries of which typically only one needs to be available, just like newspaper issues or data from High Energy Physics collisions, also known as the entries of a TTree; Selecting which data the TTree should provide, i.e. subscribing to certain branches only. Branches can be nested, so depending on the tree you could even subscribe to only the sports section or even only an article, reducing data transfer. A precedure like this is actually what most physicists do to analyze data from a series of TTrees. So let's try it in practice!; . ‹ Using TTree::Draw() to access a TTree; up; Using a Macro to Read a TTree ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Develope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:4098,depend,depending,4098,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,1,['depend'],['depending']
Integrability,"ex ; (; SHtmlIndex_t ; sIndex, . TGHtmlBlock ** ; ppBlock, . int * ; piIndex . ). protected . Convert an Element-based index into a Block-based index. ; In other words, given a pointer to an element and an index of a particular character within that element, compute a pointer to the TGHtmlBlock used to display that character and the index in the TGHtmlBlock of the character. ; Definition at line 209 of file TGHtmlIndex.cxx. ◆ InputSelected(). void TGHtml::InputSelected ; (; const char * ; name, . const char * ; val . ). virtual . Emit Selected() signal. ; Definition at line 1326 of file TGHtml.cxx. ◆ InsertToken(). TGHtmlElement * TGHtml::InsertToken ; (; TGHtmlElement * ; pToken, . char * ; zType, . char * ; zArgs, . int ; offs . ). protected . This routine takes a text representation of a token, converts it into an TGHtmlElement object and inserts it immediately prior to pToken. ; If pToken is 0, then the newly created TGHtmlElement is appended.; This routine does nothing to resize, restyle, relayout or redisplay the HTML. That is the calling routines responsibility.; Return the new TGHtmlElement object if successful. Return zero if zType is not a known markup name.; pToken - Insert before this. Append if pToken == 0 zType - Type of markup. Ex: ""/a"" or ""table"" zArgs - List of arguments offs - Calculate offset, and insert changed text into fZText! ; Definition at line 1113 of file TGHtmlParse.cxx. ◆ IsDarkColor(). int TGHtml::IsDarkColor ; (; ColorStruct_t * ; p). protected . Check to see if the given color is too dark to be easily distinguished from black. ; Definition at line 1678 of file TGHtml.cxx. ◆ IsLightColor(). int TGHtml::IsLightColor ; (; ColorStruct_t * ; p). protected . Check to see if the given color is too light to be easily distinguished from white. ; Definition at line 1725 of file TGHtml.cxx. ◆ IsVisited(). virtual int TGHtml::IsVisited ; (; const char * ; ). inlinevirtual . Definition at line 924 of file TGHtml.h. ◆ ItemLayout(). Bool_t TGHtml::It",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:74733,rout,routine,74733,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['rout'],['routine']
Integrability,"ex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFITSHDU Class interfacing FITS HDUs; TFPBlock File prefetch block; TFTP File Transfer Protocol class using rootd; TFcnAdapter wrapper class implementing the Minuit2 interface for TMinuit2-like objective functions; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit ; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFitterFumili Fitter based on new Fumili method (Fumili2); TFitterMinuit The ROOT fitter based on new Minuit (Minuit2); TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula ; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimizatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:72078,interface,interface,72078,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['interface'],['interface']
Integrability,"ex between [0,FF].; 1920 ; 1921Int_t TColor::GetColor(const char *hexcolor); 1922{; 1923 if (hexcolor && *hexcolor == '#') {; 1924 Int_t r, g, b;; 1925 if (sscanf(hexcolor+1, ""%02x%02x%02x"", &r, &g, &b) == 3); 1926 return GetColor(r, g, b);; 1927 }; 1928 ::Error(""TColor::GetColor(const char*)"", ""incorrect color string"");; 1929 return 0;; 1930}; 1931 ; 1932////////////////////////////////////////////////////////////////////////////////; 1933/// Static method returning color number for color specified by; 1934/// r, g and b. The r,g,b should be in the range [0,1].; 1935///; 1936/// The color retrieval is done using a threshold defined by SetColorThreshold.; 1937///; 1938/// If specified color does not exist it will be created; 1939/// with as name ""#rrggbb"" with rr, gg and bb in hex between; 1940/// [0,FF].; 1941 ; 1942Int_t TColor::GetColor(Float_t r, Float_t g, Float_t b, Float_t a); 1943{; 1944 return GetColor(Int_t(r * 255), Int_t(g * 255), Int_t(b * 255), a);; 1945}; 1946 ; 1947////////////////////////////////////////////////////////////////////////////////; 1948/// Static method returning color number for color specified by; 1949/// system dependent pixel value. Pixel values can be obtained, e.g.,; 1950/// from the GUI color picker.; 1951///; 1952/// The color retrieval is done using a threshold defined by SetColorThreshold.; 1953 ; 1954 ; 1955Int_t TColor::GetColor(ULong_t pixel); 1956{; 1957 Int_t r, g, b;; 1958 ; 1959 Pixel2RGB(pixel, r, g, b);; 1960 ; 1961 return GetColor(r, g, b);; 1962}; 1963 ; 1964////////////////////////////////////////////////////////////////////////////////; 1965/// This method specifies the color threshold used by GetColor to retrieve a color.; 1966///; 1967/// \param[in] t Color threshold. By default is equal to 1./31. or 1./255.; 1968/// depending on the number of available color planes.; 1969///; 1970/// When GetColor is called, it scans the defined colors and compare them to the; 1971/// requested color.; 1972/// If the Red Green ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:69677,depend,dependent,69677,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['depend'],['dependent']
Integrability,"ex(); default. TFFTComplex(Int_t n, Bool_t inPlace); For 1d transforms; Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. TFFTComplex(Int_t ndim, Int_t* n, Bool_t inPlace = kFALSE); For multidim. transforms; Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ~TFFTComplex(); Destroys the data arrays and the plan. However, some plan information stays around; until the root session is over, and is reused if other plans of the same size are; created. void Init(Option_t* flags, Int_t sign, const Int_t* ); Creates the fftw-plan. NOTE: input and output arrays are overwritten during initialisation,; so don't set any points, before running this function!!!!!. 2nd parameter: +1; Argument kind is dummy and doesn't need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and; type are going to be done. Planning is only done once, for the first transform of this; size and type. void Transform(); Computes the transform, specified in Init() function. void GetPoints(Double_t* data, Bool_t fromInput = kFALSE) const; Copies the output(or input) into the argument array. void GetPointComplex(Int_t ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; returns real and imaginary parts of the point #ipoint. void GetPointComplex(const Int_t* ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; For multidimensional transforms. Returns real and imaginary parts of the point #ipoint. void GetPointsComplex(Double_t* re, Double_t* im, Bool_t fromInput = kFALSE) const; Copies real and imaginary parts of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFFTComplex.html:9737,depend,depending,9737,root/html528/TFFTComplex.html,https://root.cern,https://root.cern/root/html528/TFFTComplex.html,10,['depend'],['depending']
Integrability,"exDefinition RArrowDS.hxx:37; ROOT::RDF::RArrowDS::GetTypeNamestd::string GetTypeName(std::string_view colName) const finalType of a column as a string, e.g.Definition RArrowDS.cxx:475; ROOT::RDF::RArrowDS::GetColumnReadersImplstd::vector< void * > GetColumnReadersImpl(std::string_view name, const std::type_info &type) finalThis needs to return a pointer to the pointer each value getter will point to.Definition RArrowDS.cxx:570; ROOT::RDF::RArrowDS::fValueGettersstd::vector< std::unique_ptr< ROOT::Internal::RDF::TValueGetter > > fValueGettersDefinition RArrowDS.hxx:38; ROOT::RDF::RArrowDS::SetEntrybool SetEntry(unsigned int slot, ULong64_t entry) finalAdvance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot.Definition RArrowDS.cxx:502; ROOT::RDF::RArrowDS::fColumnNamesstd::vector< std::string > fColumnNamesDefinition RArrowDS.hxx:34; ROOT::RDF::RArrowDS::fEntryRangesstd::vector< std::pair< ULong64_t, ULong64_t > > fEntryRangesDefinition RArrowDS.hxx:33; ROOT::RDF::RArrowDS::GetColumnNamesconst std::vector< std::string > & GetColumnNames() const finalReturns a reference to the collection of the dataset's column names.Definition RArrowDS.cxx:464; ROOT::RDF::RDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats.Definition RDataSource.hxx:109; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::FromArrowRDataFrame FromArrow(std::shared_ptr< arrow::Table > table, std::vector< std::string > const &columnNames)Factory method to create a Apache Arrow RDataFrame.Definition RArrowDS.cxx:606; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; arrowDefinition RArrowDS.hxx:17. treedataframeincROOTRArrowDS.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RArrowDS_8hxx_source.html:6229,interface,interface,6229,doc/master/RArrowDS_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RArrowDS_8hxx_source.html,1,['interface'],['interface']
Integrability,"example is the int type. It may be 16 bits on some old machines and 32 bits on some newer ones. To ensure the size of your variables, use these pre defined types in ROOT:. Char_t Signed Character 1 byte; UChar_t Unsigned Character 1 byte; Short_t Signed Short integer 2 bytes; UShort_t Unsigned Short integer 2 bytes; Int_t Signed integer 4 bytes; UInt_tUnsigned integer 4 bytes; Long64_t Portable signed long integer 8 bytes; ULong64_t Portable unsigned long integer 8 bytes; Float_t Float 4 bytes; Double_t Float 8 bytes; Double32_t Double 8 bytes in memory, written as a Float 4 bytes; Bool_t Boolean (0=false, 1=true). If you do not want to save a variable on disk, you can use int or Int_t, the result will be the same and the interpreter or the compiler will treat them in exactly the same way.; 2.5.3 TObject; In ROOT, almost all classes inherit from a common base class called TObject. This kind of architecture is also used in the Java language. The TObject class provides default behavior and protocol for all objects in the ROOT system. The main advantage of this approach is that it enforces the common behavior of the derived classes and consequently it ensures the consistency of the whole system. See “The Role of TObject”.; TObject provides protocol, i.e. (abstract) member functions, for:. Object I/O (Read(), Write()); Error handling (Warning(), Error(), SysError(), Fatal()); Sorting (IsSortable(), Compare(), IsEqual(), Hash()); Inspection (Dump(), Inspect()); Printing (Print()); Drawing (Draw(), Paint(), ExecuteEvent()); Bit handling (SetBit(), TestBit()); Memory allocation (operatornew and delete, IsOnHeap()); Access to meta information (IsA(), InheritsFrom()); Object browsing (Browse(), IsFolder()). 2.6 Global Variables; ROOT has a set of global variables that apply to the session. For example, gDirectory always holds the current directory, and gStyle holds the current style.; All global variables begin with “g” followed by a capital letter.; 2.6.1 gROOT; The single i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:58796,protocol,protocol,58796,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['protocol'],['protocol']
Integrability,"example the gPad pointer, which is treated in a different way, whether it is accessed from any thread or the main thread.; Threads within a process must not be considered as a group of processes (even though in Linux each thread receives an own process id, so that it can be scheduled by the kernel scheduler). All threads share the same address space. This means that two pointers having the same value in two threads refer to the same data. Also, if any thread changes one of the shared system resources, all threads within the process are affected. For example, if a thread closes a file, the file is closed for all threads.; 23.1.3 The Initial Thread; When a process is created, one thread is automatically created. This thread is called the initial thread or the main thread. The initial thread executes the main routine in multi-threaded programs.; Note: At the end of this chapter is a glossary of thread specific terms; 23.2 Implementation of Threads in ROOT; The TThread class has been developed to provide a platform independent interface to threads for ROOT.; 23.2.1 Installation; For the time being, it is still necessary to compile a threaded version of ROOT to enable some very special treatments of the canvas operations. We hope that this will become the default later.; To compile ROOT, just do (for example on a debian Linux):; ./configure linuxdeb2 --with-thread=/usr/lib/libpthread.so; gmake depend; gmake; This configures and builds ROOT using /usr/lib/libpthread.so as the Pthread library, and defines R__THREAD.; This enables the thread specific treatment of gPad, and creates $ROOTSYS/lib/libThread.so.; Note: The parameter linuxdeb2 has to be replaced with the appropriate ROOT keyword for your platform.; 23.2.2 Classes; TThread class implements threads . The platform dependent implementation is in the TThreadImp class and its descendant classes (e.g. TPosixThread ).; TMutex class implements mutex locks. A mutex is a mutually exclusive lock. The platform dependent imple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1103719,interface,interface,1103719,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['interface'],['interface']
Integrability,"exist; it is included before the declaration of the proxy class. This can; be used in particular to insure that the include files needed by; the macro file are properly loaded. The default histogram is accessible via the variable named 'htemp'. If the library of the classes describing the data in the branch is; loaded, the skeleton will add the needed #include statements and; give the ability to access the object stored in the branches. To draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. TPrincipal * Principal(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Interface to the Principal Components Analysis class. Create an instance of TPrincipal; Fill it with the selected variables; if option ""n"" is specified, the TPrincipal object is filled with; normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions; return a pointer to the TPrincipal object. It is the user responsibility; to delete this object.; The option default value is ""np"". See TTreePlayer::DrawSelect for explanation of the other parameters. Long64_t Process(const char* filename, Option_t* option, Long64_t nentries, Long64_t firstentry); Process this tree executing the TSelector code in the specified filename.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. The code in filename is loaded (interpreted or compiled, see ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreePlayer.html:22126,Interface,Interface,22126,root/html532/TTreePlayer.html,https://root.cern,https://root.cern/root/html532/TTreePlayer.html,4,['Interface'],['Interface']
Integrability,"existing columns are matched against the regular expression. If the string provided; 3072 /// is empty, all columns are selected.; 3073 /// See the previous overloads for further details.; 3074 RResultPtr<RDisplay>; 3075 Display(std::string_view columnNameRegexp = """", size_t nRows = 5, size_t nMaxCollectionElements = 10); 3076 {; 3077 const auto columnNames = GetColumnNames();; 3078 const auto selectedColumns = RDFInternal::ConvertRegexToColumns(columnNames, columnNameRegexp, ""Display"");; 3079 return Display(selectedColumns, nRows, nMaxCollectionElements);; 3080 }; 3081 ; 3082 ////////////////////////////////////////////////////////////////////////////; 3083 /// \brief Provides a representation of the columns in the dataset.; 3084 /// \param[in] columnList Names of the columns to be displayed.; 3085 /// \param[in] nRows Number of events for each column to be displayed.; 3086 /// \param[in] nMaxCollectionElements Number of maximum elements in collection.; 3087 /// \return the `RDisplay` instance wrapped in a RResultPtr.; 3088 ///; 3089 /// See the previous overloads for further details.; 3090 RResultPtr<RDisplay>; 3091 Display(std::initializer_list<std::string> columnList, size_t nRows = 5, size_t nMaxCollectionElements = 10); 3092 {; 3093 ColumnNames_t selectedColumns(columnList);; 3094 return Display(selectedColumns, nRows, nMaxCollectionElements);; 3095 }; 3096 ; 3097private:; 3098 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type>; 3099 std::enable_if_t<std::is_default_constructible<RetType>::value, RInterface<Proxied, DS_t>>; 3100 DefineImpl(std::string_view name, F &&expression, const ColumnNames_t &columns, const std::string &where); 3101 {; 3102 if (where.compare(0, 8, ""Redefine"") != 0) { // not a Redefine; 3103 RDFInternal::CheckValidCppVarName(name, where);; 3104 RDFInternal::CheckForRedefinition(where, name, fColRegister, fLoopManager->GetBranchNames(),; 3105 fDataSource ? fDataSource->GetColumnNames",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:175755,wrap,wrapped,175755,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['wrap'],['wrapped']
Integrability,"existing curve with given name (and relative weight factors).; 1879/// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; 1880/// the signal of a signal+background model).; 1881/// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; 1882///; 1883/// <tr><th> Type of argument <th> Projection control; 1884/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1885/// in set from the projection, i.e. by not integrating over these.; 1886/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1887/// of the PDF at the current value of the category observable.; 1888/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1889/// observable from the projection, i.e., by not integrating over all states of this category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:91647,integrat,integrating,91647,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrating']
Integrability,"expr Version_t TGFileDialog::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGFileDialog.h. ◆ CloseWindow(). void TGFileDialog::CloseWindow ; (; ). overridevirtual . Close file dialog. ; Reimplemented from TGMainFrame.; Definition at line 403 of file TGFileDialog.cxx. ◆ DeclFileName(). static const char * TGFileDialog::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGFileDialog.h. ◆ IsA(). TClass * TGFileDialog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 101 of file TGFileDialog.h. ◆ operator=(). TGFileDialog & TGFileDialog::operator= ; (; const TGFileDialog & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGFileDialog::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process messages generated by the user input in the file dialog. ; Reimplemented from TGCompositeFrame.; Definition at line 425 of file TGFileDialog.cxx. ◆ Streamer(). void TGFileDialog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGFileDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TGFileDialog.h. Member Data Documentation. ◆ fCancel. TGTextButton* TGFileDialog::fCancel. protected . cancel button ; Definition at line 83 of file TGFileDialog.h. ◆ fCdup. TGPictureButton* TGFileDialog::fCdup. protected . top toolbar button ; Definition at line 72 of file TGFileDialog.h. ◆ fCheckB. TGCheckButton* TGFileDialog::fCheckB. protected . set on/off file overwriting for Open dialog OR set on/off multiple file selection for SaveAs dialog ; Definition at line 76 of file TGFileDialog.h. ◆ fDetails. TGPictureButton* TGFileDialog::fDetails. protected . top toolba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileDialog.html:40260,message,messages,40260,doc/master/classTGFileDialog.html,https://root.cern,https://root.cern/doc/master/classTGFileDialog.html,1,['message'],['messages']
Integrability,"expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:43140,interface,interface,43140,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['interface'],['interface']
Integrability,"expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6137,interface,interface,6137,root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,4,['interface'],['interface']
Integrability,"expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](int j); { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5909,interface,interface,5909,root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,6,['interface'],['interface']
Integrability,"expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](int j); { ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5817,interface,interface,5817,root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,6,['interface'],['interface']
Integrability,"ext () const;  [private] ;  ; TString DeterminePath (const TString &fileName, const char defaultPath[]) const;  [private] ;  ; TString ExtendPath (const char originalPath[], TString newBase) const;  [private] ;  ; void InitPatterns ();  [private] ;  ; TClass * MakeClassFromClassName (const char className[]) const;  [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ;  ; TClass * MakeClassFromVarName (const char varName[], EContext_t &context, int iter=0);  [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ;  ; TTabCom & operator= (const TTabCom &)=delete;  ; int ParseReverse (const char *var_str, int start);  Returns the place in the string where to put the \0, starting the search from ""start"". ;  ; void SetPattern (EContext_t handle, const char regexp[]);  [private] ;  ; TClass * TryMakeClassFromClassName (const char className[]) const;  Same as above but does not print the error message. ;  . Private Attributes; char * fBuf;  ; Int_t fLastIter;  ; Pattern_t fPat [kNUM_PAT][1024];  ; TSeqCollection * fpClasses;  ; TSeqCollection * fpDirectives;  ; TSeqCollection * fpEnvVars;  ; TSeqCollection * fpFiles;  ; TSeqCollection * fpGlobals;  ; int * fpLoc;  ; TSeqCollection * fpPragmas;  ; ULong64_t fPrevInterpMarker;  ; TSeqCollection * fpSysIncFiles;  ; TSeqCollection * fpUsers;  ; const char * fRegExp [kNUM_PAT];  ; Bool_t fVarIsPointer;  . #include <TTabCom.h>; Member Typedef Documentation. ◆ TContainer. typedef TList TTabCom::TContainer. Definition at line 59 of file TTabCom.h. ◆ TContIter. typedef TListIter TTabCom::TContIter. Definition at line 60 of file TTabCom.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkDebug . Definition at line 111 of file TTabCom.h. ◆ EContext_t. enum TTabCom::EContext_t. EnumeratorkUNKNOWN_CONTEXT ; kSYS_UserNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:6148,message,message,6148,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['message'],['message']
Integrability,"ext layout is entirely outside of the; rectangle, 0 if it overlaps, and 1 if it is entirely inside of the; rectangle. x, y -- Upper-left hand corner, in pixels, of rectangular area to compare; with text layout. Coordinates are with respect to the upper-left; hand corner of the text layout itself.; w, h -- The width and height of the above rectangular area, in pixels. void ToPostscript(TString* dst) const; Outputs the contents of a text layout in Postscript format. The set of; lines in the text layout will be rendered by the user supplied Postscript; function. The function should be of the form:. justify x y string function --. Justify is -1, 0, or 1, depending on whether the following string should; be left, center, or right justified, x and y is the location for the; origin of the string, string is the sequence of characters to be printed,; and function is the name of the caller-provided function; the function; should leave nothing on the stack. The meaning of the origin of the string (x and y) depends on the; justification. For left justification, x is where the left edge of the; string should appear. For center justification, x is where the center of; the string should appear. And for right justification, x is where the; right edge of the string should appear. This behavior is necessary; because, for example, right justified text on the screen is justified; with screen metrics. The same string needs to be justified with printer; metrics on the printer to appear in the correct place with respect to; other similarly justified strings. In all circumstances, y is the; location of the baseline for the string. result is modified to hold the Postscript code that will render the text; layout. FontAttributes_t& operator=(const TGTextLayout& tlayout). TGTextLayout(const TGTextLayout& tlayout). TGTextLayout(); {}. » Author: Fons Rademakers 20/5/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:57; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextLayout.html:12550,depend,depends,12550,root/html604/TGTextLayout.html,https://root.cern,https://root.cern/root/html604/TGTextLayout.html,2,['depend'],['depends']
Integrability,"ext layout is entirely outside of the; rectangle, 0 if it overlaps, and 1 if it is entirely inside of the; rectangle. x, y -- Upper-left hand corner, in pixels, of rectangular area to compare; with text layout. Coordinates are with respect to the upper-left; hand corner of the text layout itself.; w, h -- The width and height of the above rectangular area, in pixels. void ToPostscript(TString* dst) const; Outputs the contents of a text layout in Postscript format. The set of; lines in the text layout will be rendered by the user supplied Postscript; function. The function should be of the form:. justify x y string function --. Justify is -1, 0, or 1, depending on whether the following string should; be left, center, or right justified, x and y is the location for the; origin of the string, string is the sequence of characters to be printed,; and function is the name of the caller-provided function; the function; should leave nothing on the stack. The meaning of the origin of the string (x and y) depends on the; justification. For left justification, x is where the left edge of the; string should appear. For center justification, x is where the center of; the string should appear. And for right justification, x is where the; right edge of the string should appear. This behavior is necessary; because, for example, right justified text on the screen is justified; with screen metrics. The same string needs to be justified with printer; metrics on the printer to appear in the correct place with respect to; other similarly justified strings. In all circumstances, y is the; location of the baseline for the string. result is modified to hold the Postscript code that will render the text; layout. FontAttributes_t& operator=(const TGTextLayout& tlayout). TGTextLayout(const TGTextLayout& tlayout). TGTextLayout(); {}. » Author: Fons Rademakers 20/5/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-05 16:39; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextLayout.html:12089,depend,depends,12089,root/html534/TGTextLayout.html,https://root.cern,https://root.cern/root/html534/TGTextLayout.html,2,['depend'],['depends']
Integrability,"ext layout is entirely outside of the; rectangle, 0 if it overlaps, and 1 if it is entirely inside of the; rectangle. x, y -- Upper-left hand corner, in pixels, of rectangular area to compare; with text layout. Coordinates are with respect to the upper-left; hand corner of the text layout itself.; w, h -- The width and height of the above rectangular area, in pixels. void ToPostscript(TString* dst) const; Outputs the contents of a text layout in Postscript format. The set of; lines in the text layout will be rendered by the user supplied Postscript; function. The function should be of the form:. justify x y string function --. Justify is -1, 0, or 1, depending on whether the following string should; be left, center, or right justified, x and y is the location for the; origin of the string, string is the sequence of characters to be printed,; and function is the name of the caller-provided function; the function; should leave nothing on the stack. The meaning of the origin of the string (x and y) depends on the; justification. For left justification, x is where the left edge of the; string should appear. For center justification, x is where the center of; the string should appear. And for right justification, x is where the; right edge of the string should appear. This behavior is necessary; because, for example, right justified text on the screen is justified; with screen metrics. The same string needs to be justified with printer; metrics on the printer to appear in the correct place with respect to; other similarly justified strings. In all circumstances, y is the; location of the baseline for the string. result is modified to hold the Postscript code that will render the text; layout. FontAttributes_t& operator=(const TGTextLayout& tlayout). TGTextLayout(const TGTextLayout& tlayout). TGTextLayout(); {}. » Author: Fons Rademakers 20/5/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:58; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextLayout.html:12550,depend,depends,12550,root/html602/TGTextLayout.html,https://root.cern,https://root.cern/root/html602/TGTextLayout.html,2,['depend'],['depends']
Integrability,"ext layout is entirely outside of the; rectangle, 0 if it overlaps, and 1 if it is entirely inside of the; rectangle. x, y -- Upper-left hand corner, in pixels, of rectangular area to compare; with text layout. Coordinates are with respect to the upper-left; hand corner of the text layout itself.; w, h -- The width and height of the above rectangular area, in pixels. void ToPostscript(TString* dst) const; Outputs the contents of a text layout in Postscript format. The set of; lines in the text layout will be rendered by the user supplied Postscript; function. The function should be of the form:. justify x y string function --. Justify is -1, 0, or 1, depending on whether the following string should; be left, center, or right justified, x and y is the location for the; origin of the string, string is the sequence of characters to be printed,; and function is the name of the caller-provided function; the function; should leave nothing on the stack. The meaning of the origin of the string (x and y) depends on the; justification. For left justification, x is where the left edge of the; string should appear. For center justification, x is where the center of; the string should appear. And for right justification, x is where the; right edge of the string should appear. This behavior is necessary; because, for example, right justified text on the screen is justified; with screen metrics. The same string needs to be justified with printer; metrics on the printer to appear in the correct place with respect to; other similarly justified strings. In all circumstances, y is the; location of the baseline for the string. result is modified to hold the Postscript code that will render the text; layout. FontAttributes_t& operator=(const TGTextLayout& tlayout). TGTextLayout(const TGTextLayout& tlayout). TGTextLayout(); {}. » Author: Fons Rademakers 20/5/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGFont.h 23115 2008-04-10 13:35:37Z ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLayout.html:12001,depend,depends,12001,root/html528/TGTextLayout.html,https://root.cern,https://root.cern/root/html528/TGTextLayout.html,1,['depend'],['depends']
Integrability,"ext layout is entirely outside of the; rectangle, 0 if it overlaps, and 1 if it is entirely inside of the; rectangle. x, y -- Upper-left hand corner, in pixels, of rectangular area to compare; with text layout. Coordinates are with respect to the upper-left; hand corner of the text layout itself.; w, h -- The width and height of the above rectangular area, in pixels. void ToPostscript(TString* dst) const; Outputs the contents of a text layout in Postscript format. The set of; lines in the text layout will be rendered by the user supplied Postscript; function. The function should be of the form:. justify x y string function --. Justify is -1, 0, or 1, depending on whether the following string should; be left, center, or right justified, x and y is the location for the; origin of the string, string is the sequence of characters to be printed,; and function is the name of the caller-provided function; the function; should leave nothing on the stack. The meaning of the origin of the string (x and y) depends on the; justification. For left justification, x is where the left edge of the; string should appear. For center justification, x is where the center of; the string should appear. And for right justification, x is where the; right edge of the string should appear. This behavior is necessary; because, for example, right justified text on the screen is justified; with screen metrics. The same string needs to be justified with printer; metrics on the printer to appear in the correct place with respect to; other similarly justified strings. In all circumstances, y is the; location of the baseline for the string. result is modified to hold the Postscript code that will render the text; layout. FontAttributes_t& operator=(const TGTextLayout& tlayout). TGTextLayout(const TGTextLayout& tlayout). TGTextLayout(); {}. » Author: Fons Rademakers 20/5/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGFont.h 35912 2010-09-30 13:43:06Z ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGTextLayout.html:12070,depend,depends,12070,root/html530/TGTextLayout.html,https://root.cern,https://root.cern/root/html530/TGTextLayout.html,3,['depend'],['depends']
Integrability,"ext menu. ;  ;  ~TRootContextMenu () override;  Delete a context menu. ;  ; void Dialog (TObject *object, TFunction *function) override;  Create dialog object with OK and Cancel buttons. ;  ; void Dialog (TObject *object, TMethod *method) override;  Create dialog object with OK and Cancel buttons. ;  ; void DisplayPopup (Int_t x, Int_t y) override;  Display context popup menu for currently selected object. ;  ; void DrawEntry (TGMenuEntry *entry) override;  Draw context menu entry. ;  ; TRootDialog * GetDialog () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button event in the context menu. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle pointer crossing event in context menu. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle pointer motion event in context menu. ;  ; TClass * IsA () const override;  ; virtual void OnlineHelp ();  Open the online help matching the actual class/method. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Handle context menu messages. ;  ; void RecursiveRemove (TObject *obj) override;  Close the context menu if the object is deleted in the RecursiveRemove() operation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGPopupMenu;  TGPopupMenu (const TGWindow *p=nullptr, UInt_t w=10, UInt_t h=10, UInt_t options=0);  Create a popup menu. ;  ;  ~TGPopupMenu () override;  Delete a popup menu. ;  ; void Activate (Bool_t) override;  ; virtual void Activate (TGMenuEntry *entry);  Activate a menu entry in a popup menu. ;  ; virtual void Activated (Int_t id);  ; virtual void AddEntry (const char *s, Int_t id, void *ud=nullptr, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  Add a menu entry. ;  ; virtual void AddEntry (TGHotString *s, Int_t id, void *ud=nullptr, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootContextMenu.html:1822,message,messages,1822,doc/master/classTRootContextMenu.html,https://root.cern,https://root.cern/doc/master/classTRootContextMenu.html,1,['message'],['messages']
Integrability,"ext or pixmaps, check buttons, radio buttons, menu bars and popup menus, scroll bars, list boxes, combo boxes, group frames, text entry widgets, tab widgets, progress bars, sliders, tool tips; Complex widgets: shutter, toolbar, status bar, list view, list tree; Common dialogs: File Open/Save, File Properties, Font Selection, Color Selection, About; The widgets are shown in frames:; frame, composite frame, main frame, transient frame, group frame; Arranged by layout managers:; horizontal layout, vertical layout, row layout, list layout, tile layout, matrix layout. Using a combination of layout hints:. left, right, center x, center y, top, bottom, expand x, expand y, fixed offsets. Event handling by signals/slots and messaging (as opposed to callbacks):. in response to actions widgets send messages and emit signals; associated frames process these messages or the slot methods connected to the signals are executed. 25.3 TVirtualX; The GUI classes interface to the platform dependent low level graphics system via the semi-abstract graphics base class TVirtualX. Currently concrete implementations exist for X11 and Win32 (MacOS X is fully supported via Apple’s X11 implementation). Thanks to this single graphics interface, porting the ROOT GUI to a new platform requires only the implementation of TVirtualX. 25.4 A Simple Example; We will start with a simple example that builds a small application containing a canvas and two buttons: Draw and Exit. Its functionality will be very simple: every time you click on Draw button, the graphics of the function sin(x)/x will be drawn in randomly chosen interval in the canvas window, if you click on Exit - you close the application. This example shows the basic concepts for almost any GUI-application in ROOT and it is important to understand how it is constructed. The example program is written as a named script. See “Cling the C++ Interpreter”. Remember that the named script can be executed via; root[] .x example.C; only if the filenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1129286,interface,interface,1129286,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,"['depend', 'interface']","['dependent', 'interface']"
Integrability,"ext(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:37790,Interface,Interface,37790,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,2,['Interface'],['Interface']
Integrability,"extMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. TGenPhaseSpace& operator=(const TGenPhaseSpace& gen); Assignment operator. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id$ » Last generated: 2015-06-02 15:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGenPhaseSpace.html:7580,depend,dependece,7580,root/html604/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html604/TGenPhaseSpace.html,2,['depend'],['dependece']
Integrability,"extMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. TGenPhaseSpace& operator=(const TGenPhaseSpace& gen); Assignment operator. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenPhaseSpace.html:7580,depend,dependece,7580,root/html602/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html602/TGenPhaseSpace.html,2,['depend'],['dependece']
Integrability,"extSize and retrieved using the; method GetTextSize.; Text Font and Precision; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision. Font numbers must be between 1 and 14. The precision can be:; precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from TAttText can; be changed using the method SetTextFont and retrieved using the; method GetTextFont.; Font quality and speed; When precision 0 is used, only the original non-scaled system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts. However TTF are slow.; How to use True Type Fonts; One can activate the TTF by adding (or activating) the following line; in the .rootrc file:. Unix.*.Root.UseTTFonts: true. It is possible to check the TTF are in use in a Root session; with the command:. gEnv->Print();. If the TTF are in use the following line will appear at the beginning of the; printout given by this command:. Unix.*.Root.UseTTFonts: true [Global]. List of the currently supported fonts. Font number X11 Names Win32/TTF Names; 1 : times-medium-i-normal ""Times New Roman""; 2 : times-bold-r-normal ""Times New Roman""; 3 : times-bold-i-normal ""Times New Roman""; 4 : helvetica-medium-r-normal ""Arial""; 5 : helvetica-medium-o-normal ""Arial""; 6 : helvetica-bold-r-normal ""Arial""; 7 : helvetica-bold-o-normal ""Arial""; 8 : courier-medium-r-normal ""Courier New""; 9 : courier-medium-o-normal ""Courier Ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttText.html:5675,depend,depending,5675,root/html528/TAttText.html,https://root.cern,https://root.cern/root/html528/TAttText.html,10,['depend'],['depending']
Integrability,"extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:46150,integrat,integrated,46150,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,9,['integrat'],['integrated']
