quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72631/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-561327079:1159,test,testReport,1159,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-561327079,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72632/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-561329616:1506,test,testReport,1506,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-561329616,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execMergeMulti](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75181/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execMergeMulti/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-575730397:1167,test,testReport,1167,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-575730397,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execMergeMulti](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75664/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execMergeMulti/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-577209543:1167,test,testReport,1167,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-577209543,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execMergeMulti](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76048/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execMergeMulti/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-578213191:1167,test,testReport,1167,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-578213191,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execMergeMulti](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76169/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execMergeMulti/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-578459308:1167,test,testReport,1167,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-578459308,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.math.mathmore.test.mathmore_testChebyshev](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.math.mathmore/test/mathmore_testChebyshev/); - [projectroot.math.mathmore.test.mathmore_testDerivation](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.math.mathmore/test/mathmore_testDerivation/); - [projectroot.roottest.cling.template.roottest_cling_template_compiled](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.cling/template/roottest_cling_template_compiled/); - [projectroot.roottest.cling.template.roottest_cling_template_defaultTemplateParam](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.cling/template/roottest_cling_template_defaultTemplateParam/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_stlProxies](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_stlProxies/); - [projectroot.roottest.python.cling.roottest_python_cling_cling](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.python/cling/roottest_python_cling_cling/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_LongRootls3](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37444/testReport/projectroot.roottest.python/cmdLine,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2442#issuecomment-414261666:1388,test,testReport,1388,https://root.cern,https://github.com/root-project/root/pull/2442#issuecomment-414261666,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_nodes](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_nodes/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_merge_results](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_merge_results/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_basics](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_basics/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_rdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_rdf/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_minifile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_minifile/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_extended](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimplePattern1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91500/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimplePa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6038#issuecomment-669085807:1379,test,test,1379,https://root.cern,https://github.com/root-project/root/pull/6038#issuecomment-669085807,1,['test'],['test']
Testability,; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_streamerInfoError](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_streamerInfoError/); - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_CheckMissingDictionaries](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_CheckMissingDictionaries/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_classesDictSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_classesDictSelection/); - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_equivalentSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_equivalentSelections/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_conflictingSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65162/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4126#issuecomment-521653757:1782,test,testReport,1782,https://root.cern,https://github.com/root-project/root/pull/4126#issuecomment-521653757,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_streamerInfoError](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_streamerInfoError/); - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_CheckMissingDictionaries](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_CheckMissingDictionaries/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_classesDictSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_classesDictSelection/); - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_selectionDuplicate](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_selectionDuplicate/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_equivalentSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65175/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_equi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4126#issuecomment-521683226:1782,test,testReport,1782,https://root.cern,https://github.com/root-project/root/pull/4126#issuecomment-521683226,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_streamerInfoError](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_streamerInfoError/); - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_CheckMissingDictionaries](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_CheckMissingDictionaries/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_classesDictSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_classesDictSelection/); - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_selectionDuplicate](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_selectionDuplicate/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_conflictingSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65205/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_con,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4126#issuecomment-521747284:1782,test,testReport,1782,https://root.cern,https://github.com/root-project/root/pull/4126#issuecomment-521747284,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_streamerInfoError](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_streamerInfoError/); - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_CheckMissingDictionaries](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_CheckMissingDictionaries/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_classesDictSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_classesDictSelection/); - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_conflictingSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_conflictingSelections/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_equivalentSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65357/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genrefle,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4126#issuecomment-522079031:1782,test,testReport,1782,https://root.cern,https://github.com/root-project/root/pull/4126#issuecomment-522079031,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_streamerInfoError](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_streamerInfoError/); - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_CheckMissingDictionaries](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_CheckMissingDictionaries/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_classesDictSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_classesDictSelection/); - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_runFullheaderParsingOnDemand/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_selectionDuplicate](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_selectionDuplicate/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_conflictingSelections](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65572/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_con,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4235#issuecomment-523174040:1782,test,testReport,1782,https://root.cern,https://github.com/root-project/root/pull/4235#issuecomment-523174040,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_stl_makeproject_test_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stl_makeproject_test_build/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_classWithComplex_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_classWithComplex_libgen_build/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_aclicModelWrite](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_aclicModelWrite/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_writeUniqPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_writeUniqPtrColls/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_examples](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_examples/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_writePtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_writePtrColls/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_writeClassWithComplex](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75139/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_writeClassWithComplex/); - [projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609409997:1352,test,testReport,1352,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609409997,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.autoloading.headerParsingOnDemand.roottest_root_meta_autoloading_headerParsingOnDemand_no_autoparse_write](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.root.meta.autoloading/headerParsingOnDemand/roottest_root_meta_autoloading_headerParsingOnDemand_no_autoparse_write/); - [projectroot.runtutorials.tutorial_dataframe_df028_SQliteIPLocation](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot/runtutorials/tutorial_dataframe_df028_SQliteIPLocation/); - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_stlProxies](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_stlProxies/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_compiled](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_compiled/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.root.io.bigevent.roottest_root_io_bigevent_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.root.io/bigevent/roottest_root_io_bigevent_make/); - [projectroot.roottest.root.io.compression.roottest_root_io_compression_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.roottest.root.io/compression/roottest_root_io_compression_make/); - [projectroot.roottest.root.meta.roottest_root_meta_runtemplateAutoload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139508/testReport/projectroot.ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10132#issuecomment-1068604928:1283,test,testReport,1283,https://root.cern,https://github.com/root-project/root/pull/10132#issuecomment-1068604928,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execReadOldCSC](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execReadOldCSC/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc/); - [projectroot.roottest.root.meta.autoloading.roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root.meta/autoloading/roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto/); - [projectroot.roottest.root.meta.fwdDecls.roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root.meta/fwdDecls/roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build/); - [projectroot.roottest.root.meta.iotypeioname.roottest_root_meta_iotypeioname_classes_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29370/testReport/projectroot.roottest.root.meta/iotypeioname/roottest_root_meta_iotypeioname_classes_libgen_build/). And 5 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2155#issuecomment-395440228:1865,test,testReport,1865,https://root.cern,https://github.com/root-project/root/pull/2155#issuecomment-395440228,4,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execReadOldCSC](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execReadOldCSC/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc/); - [projectroot.roottest.root.meta.autoloading.roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root.meta/autoloading/roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto/); - [projectroot.roottest.root.meta.fwdDecls.roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root.meta/fwdDecls/roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build/); - [projectroot.roottest.root.meta.iotypeioname.roottest_root_meta_iotypeioname_classes_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29371/testReport/projectroot.roottest.root.meta/iotypeioname/roottest_root_meta_iotypeioname_classes_libgen_build/). And 5 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2155#issuecomment-395421481:1666,test,testReport,1666,https://root.cern,https://github.com/root-project/root/pull/2155#issuecomment-395421481,4,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execReadOldCSC](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execReadOldCSC/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc_build/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc/); - [projectroot.roottest.root.meta.autoloading.roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root.meta/autoloading/roottest_root_meta_autoloading_execAutoLoadEntriesAsSelected_auto/); - [projectroot.roottest.root.meta.fwdDecls.roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root.meta/fwdDecls/roottest_root_meta_fwdDecls_fwdDeclarations_libgen_build/); - [projectroot.roottest.root.meta.iotypeioname.roottest_root_meta_iotypeioname_classes_libgen_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29372/testReport/projectroot.roottest.root.meta/iotypeioname/roottest_root_meta_iotypeioname_classes_libgen_build/). And 5 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2155#issuecomment-395447052:1668,test,testReport,1668,https://root.cern,https://github.com/root-project/root/pull/2155#issuecomment-395447052,4,['test'],['testReport']
Testability,; - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD32/); - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_RotWeights](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.tmva.tmva.test.DNN/CNN/TMVA_DNN_CNN_RotWeights/); - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_Im2Col_CPU](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.tmva.tmva.test.DNN/CNN/TMVA_DNN_CNN_Im2Col_CPU/); - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_PoolingLayer_CPU](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.tmva.tmva.test.DNN/CNN/TMVA_DNN_CNN_PoolingLayer_CPU/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_baseClass_53410_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_baseClass_53410_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_53410_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_53410_v2/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD/); - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37813/testReport/projectro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2495#issuecomment-414955482:2044,test,testReport,2044,https://root.cern,https://github.com/root-project/root/pull/2495#issuecomment-414955482,1,['test'],['testReport']
Testability,; - [projectroot.roottest.root.multicore.roottest_root_multicore_tsenums](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tsenums/); - [projectroot.core.metacling.test.gtest_core_metacling_test_TClingTest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.core.metacling/test/gtest_core_metacling_test_TClingTest/); - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.roottest.cling.operator.roottest_cling_operator_runEqualTest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.cling/operator/roottest_cling_operator_runEqualTest/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.cling.template.separateDictNamespace.roottest_cling_template_separateDictNamespace_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.cling.template/separateDictNamespace/roottest_cling_template_separateDictNamespace_make/); - [projectroot.roottest.root.io.double32.roottest_root_io_double32_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.root.io/double32/roottest_root_io_double32_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/180080/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1640436259:1644,test,testReport,1644,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1640436259,4,['test'],['testReport']
Testability,; - [projectroot.roottest.root.tree.branches.roottest_root_tree_branches_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/); - [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/); - [projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.treeformula/array/roottest_root_treeformula_array_make/); - [projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.treeformula/parse/roottest_root_treeformula_parse_make/); - [projectroot.roottest.root.collection.roottest_root_collection_execTClonesArrayAbsorb_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root/collection/roottest_root_collection_execTClonesArrayAbsorb_auto/); - [projectroot.roottest.root.hist.profile.roottest_root_hist_profile_runcopy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.hist/profile/roottest_root_hist_profile_runcopy/); - [projectroot.roottest.root.io.TFile.roottest_root_io_TFile_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.io/TFile/roottest_root_io_TFile_make/); - [projectroot.roottest.root.io.directory.roottest_root_io_directory_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194952/testReport/projectroot.roottest.root.io/directory/roottest_root_io_directory_make/). And 6 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1936073907:1898,test,testReport,1898,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1936073907,4,['test'],['testReport']
Testability,; - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_runtreeCloneTest2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_runtreeCloneTest2/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_exectrim](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_exectrim/); - [projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_forwardList](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.roottest.root.io/cpp11Containers/roottest_root_io_cpp11Containers_forwardList/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_branchlessForest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_branchlessForest/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rbdt](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_rbdt/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_sqlite](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_sqlite/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96711/testReport/projectroot.roottest.root.io/cpp11Containers/roottest_root_io_cpp11Containers_Names/). An,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-698564111:1886,test,test,1886,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-698564111,1,['test'],['test']
Testability,; - [projectroot.roottest.root.tree.stl.roottest_root_tree_stl_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/); - [projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/schemaEvolution/roottest_root_treeformula_schemaEvolution_make/); - [projectroot.roottest.root.treeformula.string.roottest_root_treeformula_string_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/string/roottest_root_treeformula_string_make/); - [projectroot.roottest.root.treeformula.morrison.roottest_root_treeformula_morrison_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/morrison/roottest_root_treeformula_morrison_make/); - [projectroot.roottest.root.treeformula.references.roottest_root_treeformula_references_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/references/roottest_root_treeformula_references_make/); - [projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/retobj/roottest_root_treeformula_retobj_make/); - [projectroot.roottest.root.treeformula.function.roottest_root_treeformula_function_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/17824/testReport/projectroot.roottest.root.treeformula/function/roottest_root_treeformula_function_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-367104623:1281,test,testReport,1281,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-367104623,4,['test'],['testReport']
Testability,; - [projectroot.runtutorials.tutorial_dataframe_df001_introduction_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df001_introduction_py/); - [projectroot.runtutorials.tutorial_dataframe_df002_dataModel_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df002_dataModel_py/); - [projectroot.runtutorials.tutorial_dataframe_df003_profiles_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df003_profiles_py/); - [projectroot.runtutorials.tutorial_dataframe_df007_snapshot_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df007_snapshot_py/); - [projectroot.runtutorials.tutorial_dataframe_df004_cutFlowReport_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df004_cutFlowReport_py/); - [projectroot.runtutorials.tutorial_dataframe_df008_createDataSetFromScratch_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df008_createDataSetFromScratch_py/); - [projectroot.runtutorials.tutorial_dataframe_df011_ROOTDataSource_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df011_ROOTDataSource_py/); - [projectroot.runtutorials.tutorial_dataframe_df006_ranges_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df006_ranges_py/); - [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61239/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource_py/); - [projectroot.runtutorials.tutorial_dataframe_df012_DefinesAndFilt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3957#issuecomment-501755468:1694,test,testReport,1694,https://root.cern,https://github.com/root-project/root/pull/3957#issuecomment-501755468,1,['test'],['testReport']
Testability,; - [projectroot.runtutorials.tutorial_pyroot_fillrandom_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot/runtutorials/tutorial_pyroot_fillrandom_py/); - [projectroot.runtutorials.tutorial_pyroot_geometry_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot/runtutorials/tutorial_pyroot_geometry_py/); - [projectroot.runtutorials.tutorial_pyroot_hsimple_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot/runtutorials/tutorial_pyroot_hsimple_py/); - [projectroot.runtutorials.tutorial_roofit_rf502_wspacewrite_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot/runtutorials/tutorial_roofit_rf502_wspacewrite_py/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_makenumpy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_makenumpy/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_asnumpy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_asnumpy/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_histo_profile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_histo_profile/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_rdfdescription](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/156281/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_rdfdescription/); - [projectroot.bindings.pyroot.pythonizations.test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443#issuecomment-1266757587:1281,test,testReport,1281,https://root.cern,https://github.com/root-project/root/pull/11443#issuecomment-1266757587,1,['test'],['testReport']
Testability,; - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory/); - [projectroot.runtutorials.tutorial_multicore_mp104_processH1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_multicore_mp104_processH1/); - [projectroot.runtutorials.tutorial_foam_foam_demopers](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_foam_foam_demopers/); - [projectroot.runtutorials.tutorial_legacy_tasks](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_legacy_tasks/); - [projectroot.runtutorials.tutorial_roofit_rf512_wsfactory_oper](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_roofit_rf512_wsfactory_oper/); - [projectroot.runtutorials.tutorial_multicore_mp105_processEntryList](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_multicore_mp105_processEntryList/); - [projectroot.runtutorials.tutorial_tree_clonesA_Event](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_tree_clonesA_Event/); - [projectroot.runtutorials.tutorial_tree_jets](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_tree_jets/); - [projectroot.runtutorials.tutorial_tree_hsimpleProxyDriver](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/102353/testReport/projectroot/runtutorials/tutorial_tree_hsimpleProxyDriver/); - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://lcgapp-services.cern.ch/root-jenk,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6850#issuecomment-731296810:1237,test,testReport,1237,https://root.cern,https://github.com/root-project/root/pull/6850#issuecomment-731296810,1,['test'],['testReport']
Testability,; - [projectroot.runtutorials.tutorial_tmva_TMVAClassification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_tmva_TMVAClassification/); - [projectroot.runtutorials.tutorial_tmva_TMVAMultipleBackgroundExample](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_tmva_TMVAMultipleBackgroundExample/); - [projectroot.runtutorials.tutorial_geom_geometry](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_geom_geometry/); - [projectroot.runtutorials.tutorial_foam_foam_demo](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_foam_foam_demo/); - [projectroot.runtutorials.tutorial_multicore_mp104_processH1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_multicore_mp104_processH1/); - [projectroot.runtutorials.tutorial_hist_fillrandom](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_hist_fillrandom/); - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory/); - [projectroot.runtutorials.tutorial_roofit_rf502_wspacewrite](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_roofit_rf502_wspacewrite/); - [projectroot.runtutorials.tutorial_tmva_TMVAClassificationCategory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77081/testReport/projectroot/runtutorials/tutorial_tmva_TMVAClassificationCategory/); - [projectroot.runtutorials.tutorial_unfold_testUnfold5b](https://lcgapp-services.cern.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5391#issuecomment-615541543:1319,test,testReport,1319,https://root.cern,https://github.com/root-project/root/pull/5391#issuecomment-615541543,1,['test'],['testReport']
Testability,; - [projectroot.test.test_stressfit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot/test/test_stressfit_interpreted/); - [projectroot.test.test_stressvector_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot/test/test_stressvector_interpreted/); - [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot/test/test_stressinterpreter/); - [projectroot.test.test_stressiterators_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot/test/test_stressiterators_interpreted/); - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_stl_vector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_stl_vector/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rtensor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rtensor/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_array_interface](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194536/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_array_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1925360368:1382,test,test,1382,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1925360368,1,['test'],['test']
Testability,; - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot/runtutorials/tutorial_roostats_TestNonCentral/); - [projectroot.roottest.cling.dict.fwd-decl-stdless.roottest_cling_dict_fwd_decl_stdless_execLessyTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot.roottest.cling.dict/fwd-decl-stdless/roottest_cling_dict_fwd_decl_stdless_execLessyTest/); - [projectroot.runtutorials.tutorial_roofit_rf511_wsfactory_basic_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot/runtutorials/tutorial_roofit_rf511_wsfactory_basic_py/); - [projectroot.roottest.python.pickle.roottest_python_pickle_read](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot.roottest.python/pickle/roottest_python_pickle_read/); - [projectroot.runtutorials.tutorial_roostats_StandardFrequentistDiscovery](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot/runtutorials/tutorial_roostats_StandardFrequentistDiscovery/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_hadd_autoload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_hadd_autoload/); - [projectroot.roottest.root.io.webfile.roottest_root_io_webfile_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot.roottest.root.io/webfile/roottest_root_io_webfile_make/); - [projectroot.roottest.root.meta.rootcling.roottest_root_meta_rootcling_includeInLinkdef](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76284/testReport/projectroot.roottest.root.meta/rootcling/roott,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-578712852:1630,test,testReport,1630,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-578712852,1,['test'],['testReport']
Testability,; - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.bindings.pyroot.pythonizations.test.test_import_numba](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.bindings.pyroot.pythonizations/test/test_import_numba/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_dependency_versions](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_handlers_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_handlers_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_utils_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_utils_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97283/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/). And 6 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6499#issuecomment-700735110:1741,test,testReport,1741,https://root.cern,https://github.com/root-project/root/pull/6499#issuecomment-700735110,4,['test'],['testReport']
Testability,; - [projectroot.test.test_stressroostats_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot/test/test_stressroostats_interpreted/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_interpreted/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_compiled](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_compiled/); - [projectroot.roottest.root.meta.roottest_root_meta_drawing](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.root/meta/roottest_root_meta_drawing/); - [projectroot.roottest.root.meta.method.roottest_root_meta_method_execConstMethod_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.root.meta/method/roottest_root_meta_method_execConstMethod_auto/); - [projectroot.roottest.root.meta.method.roottest_root_meta_method_execTemplate_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.root.meta/method/roottest_root_meta_method_execTemplate_auto/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execBrowseNonAccessibleType](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execBrowseNonAccessibleType/); - [projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56168/testReport/projectroot.roottest.root.treeformula/retobj/roottest_root_treeformula_retobj_make/); - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_cintrun](https://epsft-jenkins.cern.ch/job/root-pullreq,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616#issuecomment-478469150:1153,test,testReport,1153,https://root.cern,https://github.com/root-project/root/pull/3616#issuecomment-478469150,1,['test'],['testReport']
Testability,; - [projectroot.test.test_stressroostats_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot/test/test_stressroostats_interpreted/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_interpreted/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_compiled](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_compiled/); - [projectroot.roottest.root.meta.roottest_root_meta_drawing](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.root/meta/roottest_root_meta_drawing/); - [projectroot.roottest.root.meta.method.roottest_root_meta_method_execConstMethod_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.root.meta/method/roottest_root_meta_method_execConstMethod_auto/); - [projectroot.roottest.root.meta.method.roottest_root_meta_method_execTemplate_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.root.meta/method/roottest_root_meta_method_execTemplate_auto/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execBrowseNonAccessibleType](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execBrowseNonAccessibleType/); - [projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56222/testReport/projectroot.roottest.root.treeformula/retobj/roottest_root_treeformula_retobj_make/); - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_cintrun](https://epsft-jenkins.cern.ch/job/root-pullreq,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616#issuecomment-478917617:1153,test,testReport,1153,https://root.cern,https://github.com/root-project/root/pull/3616#issuecomment-478917617,1,['test'],['testReport']
Testability,; - [projectroot.test.test_stressroostats_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot/test/test_stressroostats_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_rooabspdf_fitto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_rooabspdf_fitto/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_roodatahist_ploton](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_roodatahist_ploton/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_rooabsreal_ploton](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_rooabsreal_ploton/); - [projectroot.roofit.RDataFrameHelpers.test.gtest_roofit_RDataFrameHelpers_test_testActionHelpers](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.roofit.RDataFrameHelpers/test/gtest_roofit_RDataFrameHelpers_test_testActionHelpers/); - [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117781/testReport/projectroot.roofit.roofit/test/gtest_roofit_roof,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8179#issuecomment-841889839:1459,test,test,1459,https://root.cern,https://github.com/root-project/root/pull/8179#issuecomment-841889839,1,['test'],['test']
Testability,; - [projectroot.test.test_stressroostats_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot/test/test_stressroostats_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_roodatahist_ploton](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_roodatahist_ploton/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_rooabspdf_fitto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_rooabspdf_fitto/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_roofit_rooabsreal_ploton](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_roofit_rooabsreal_ploton/); - [projectroot.roofit.RDataFrameHelpers.test.gtest_roofit_RDataFrameHelpers_test_testActionHelpers](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.roofit.RDataFrameHelpers/test/gtest_roofit_RDataFrameHelpers_test_testActionHelpers/); - [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117784/testReport/projectroot.roofit.roofit/test/gtest_roofit_roof,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8179#issuecomment-841894054:1451,test,test,1451,https://root.cern,https://github.com/root-project/root/pull/8179#issuecomment-841894054,1,['test'],['test']
Testability,; - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_basics](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_basics/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_descriptor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_descriptor/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_rdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_rdf/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_view](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_view/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_rfield_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_rfield_class/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_rfield_vector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_rfield_vector/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_show](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_show/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_storage](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121164/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_storage/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_e,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8552#issuecomment-869882116:1504,test,test,1504,https://root.cern,https://github.com/root-project/root/pull/8552#issuecomment-869882116,1,['test'],['test']
Testability,; - include/ROOT/REveDataSimpleProxyBuilderTemplate.hxx:36:47: warning: unused parameter 'index' [-Wunused-parameter] ; - include/ROOT/REveDataSimpleProxyBuilderTemplate.hxx:41:55: warning: unused parameter 'index' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lz4_compr_level4](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lz4_compr_level4/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_zlib_compr_level9_datageneration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63047/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_zlib_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.r,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4058#issuecomment-510053893:1148,test,testReport,1148,https://root.cern,https://github.com/root-project/root/pull/4058#issuecomment-510053893,1,['test'],['testReport']
Testability,"; - include/TProfile.h:118:21: warning: by ‘virtual Long64_t TProfile::Merge(TCollection*)’ [-Woverloaded-virtual] ; - include/TH1.h:338:21: warning: ‘virtual Long64_t TH1::Merge(TCollection*, Option_t*)’ was hidden [-Woverloaded-virtual] ; - include/TProfile2D.h:123:22: warning: by ‘virtual Long64_t TProfile2D::Merge(TCollection*)’ [-Woverloaded-virtual] ; - include/TH1.h:338:21: warning: ‘virtual Long64_t TH1::Merge(TCollection*, Option_t*)’ was hidden [-Woverloaded-virtual] ; - include/TProfile3D.h:124:22: warning: by ‘virtual Long64_t TProfile3D::Merge(TCollection*)’ [-Woverloaded-virtual] . And 211 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_reduce](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_reduce/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_ctors](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_ctors/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_splitcoll_arrayview](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/27961/testReport/projectroot.roottest.root/dataframe/roottest_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2102#issuecomment-392746116:1745,test,testReport,1745,https://root.cern,https://github.com/root-project/root/pull/2102#issuecomment-392746116,1,['test'],['testReport']
Testability,; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' . And 13 more. ### Failing tests:; - [projectroot.tree.dataframe.test.pyunittests_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77626/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_misc/); - [projectroot.tree.dataframe.test.pyunittests_dataframe_histograms](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77626/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_histograms/); - [projectroot.tree.dataframe.test.pyunittests_dataframe_cache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77626/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_cache/); - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77626/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.root.meta.tclass.regression.roottest_root_meta_tclass_regression_execNormalizationInfPy](https://epsft-jenk,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945#issuecomment-583001691:1378,test,tests,1378,https://root.cern,https://github.com/root-project/root/pull/4945#issuecomment-583001691,1,['test'],['tests']
Testability,; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' ; - ld: warning: directory not found for option '-L/build/jenkins/workspace/root-pullrequests-build/build/lib/python2.7' . And 14 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm1PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69528/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootrm1PrepareInput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm3PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69528/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootrm3PrepareInput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmkdir1PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69528/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootmkdir1PrepareInput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm2PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69528/testR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-540432667:1375,test,tests,1375,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-540432667,1,['test'],['tests']
Testability,; - ld: warning: text-based stub file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices.tbd and library file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation.tbd and library file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//CoreFoundation.framework/Versions/A/CoreFoundation.tbd and library file /System/Library/Frameworks//CoreFoundation.framework/Versions/A/CoreFoundation are out of sync. Falling back to library file for linking. . And 77 more. ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46358/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.io.compression.roottest_root_io_compression_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46358/testReport/projectroot.roottest.root.io/compression/roottest_root_io_compression_make/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46358/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_make/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_hadd_autoload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46358/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_hadd_autoload/); - [projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46358/testReport/projectroot.roottest.root.io/evolut,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889#issuecomment-434830785:2869,test,testReport,2869,https://root.cern,https://github.com/root-project/root/pull/2889#issuecomment-434830785,1,['test'],['testReport']
Testability,"; 878: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 878: error code: -529697949; 878:; 878:; 1/16 Test #878: tutorial-dataframe-df001_introduction-py .................***Failed 5.63 sec; test 879; Start 879: tutorial-dataframe-df002_dataModel-py. 879: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df002_dataModel.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 879: Environment variables:; 879: ROOT_HIST=0; 879: Test timeout computed to be: 1500; 879: Error in <TChain::LoadTree>: Cannot find tree with name in file df002_dataModel_py.root; 879: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 879: error code: -529697949; 879:; 879:; 2/16 Test #879: tutorial-dataframe-df002_dataModel-py ....................***Failed Error regular expression found in output. Regex=[Error in] 8.04 sec; test 880; Start 880: tutorial-dataframe-df003_profiles-py. 880: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df003_profiles.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 880: Environment variables:; 880: ROOT_HIST=0; 880: Test timeout computed to be: 1500; 880: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 880: error code: -529697949; 880:; 880:; 3/16 Test #880: tutorial-dataframe-df003_profiles-py .....................***Failed 4.47 sec; test 881; Start 881: tutorial-dataframe-df004_cutFlowReport-py. 881",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:1665,Test,Test,1665,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['Test'],['Test']
Testability,; Create ./cernstaff.root; (TFile *) nullptr; **********************************************************************; * Starting Graphics - S T R E S S suite *; **********************************************************************; * Starting Basic Graphics - S T R E S S *; **********************************************************************; Test 1: TLine..................................................... OK; PDF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 2: TMarker................................................... OK; PDF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 3: TPolyLine................................................. OK; PDF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 4: Fill patterns............................................. OK; PDF output.......................................... 4 FAILED; Result = 19240; Reference = 19386; Error = 146 (was 100); JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK; Test 5: TText 1 (Text attributes)................................. OK; PDF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result..............................,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14295#issuecomment-1866909548:1224,Test,Test,1224,https://root.cern,https://github.com/root-project/root/pull/14295#issuecomment-1866909548,1,['Test'],['Test']
Testability,"; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 2338; Start 2338: gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression. 2338: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462/RelWithDebInfo/gh14462regression.exe"" ""-DCWD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462"" ""-DSYS=C:/root-dev/build/x64/relwithdebinfo"" ""-P"" ""C:/root-dev/build/x64/relwithdebinfo/RootTestDriver.cmake""; 2338: Working Directory: C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462; 2338: Environment variables:; 2338: ROOT_HIST=0; 2338: Test timeout computed to be: 1500; 2338: Running main() from C:\root-dev\build\x64\relwithdebinfo\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; 2338: [==========] Running 1 test from 1 test suite.; 2338: [----------] Global test environment set-up.; 2338: [----------] 1 test from ReadRules; 2338: [ RUN ] ReadRules.CustomReadRuleWithSpace; 2338: Error in TCling::LoadPCM ROOT PCM C:\root-dev\build\x64\relwithdebinfo\roottest\root\tree\readrules\gh-14462\RelWithDebInfo\gh14462regressionDict_rdict.pcm file does not exist; 2338: [ OK ] ReadRules.CustomReadRuleWithSpace (317 ms); 2338: [----------] 1 test from ReadRules (317 ms total); 2338:; 2338: [----------] Global test environment tear-down; 2338: [==========] 1 test from 1 test suite ran. (317 ms total); 2338: [ PASSED ] 1 test.; 1/1 Test #2338: gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression ... Passed 0.41 sec. The following tests passed:; gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 0.92 sec; ```; But it's correct. When moving the PCM at the right place, it stops compla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354#issuecomment-2370611327:1759,test,test,1759,https://root.cern,https://github.com/root-project/root/issues/9354#issuecomment-2370611327,2,['test'],['test']
Testability,; Running on macitois21.cern.ch:/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5879-mac1014-python3&date=2020-06-16).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/console).; ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_build/); - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_load](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_load/); - [projectroot.roottest.root.io.event.roottest_root_io_event](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.root.io/event/roottest_root_io_event/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86993/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://lcgap,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5879#issuecomment-644446287:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/5879#issuecomment-644446287,1,['test'],['testReport']
Testability,; Running on macitois21.cern.ch:/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5938-mac1014-python3&date=2020-07-02).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/console).; ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_build/); - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_load](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_load/); - [projectroot.roottest.root.io.event.roottest_root_io_event](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.root.io/event/roottest_root_io_event/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDictTXMLFile/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readUniqPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_readUniqPtrColls/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88790/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_readPtrColls/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-652929842:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-652929842,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113488/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7726#issuecomment-815656946:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/7726#issuecomment-815656946,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113512/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7726#issuecomment-815968756:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/7726#issuecomment-815968756,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113560/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7810#issuecomment-816607467:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/7810#issuecomment-816607467,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113576/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7811#issuecomment-816676585:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/7811#issuecomment-816676585,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113617/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969#issuecomment-816986546:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/6969#issuecomment-816986546,1,['test'],['testReport']
Testability,; Running on macitois21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lz4_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/113633/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [pro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7816#issuecomment-817018914:1046,test,testReport,1046,https://root.cern,https://github.com/root-project/root/pull/7816#issuecomment-817018914,1,['test'],['testReport']
Testability,; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/console).; ### Warnings:; - [2022-09-23T23:29:36.370Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-09-23T23:30:10.011Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-09-23T23:30:10.011Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-09-23T23:31:00.213Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-09-23T23:32:22.262Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups . ### Failing tests:; - [projectroot.runtutorials.test_import_pandas](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/testReport/projectroot/runtutorials/test_import_pandas/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_dependency_versions](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_numbadeclare](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_numbadeclare/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_rdf_define_pyz](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_rdf_define_pyz/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_rdf_filter_pyz](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/155323/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_rdf_filter_py,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11424#issuecomment-1256810467:1028,test,test,1028,https://root.cern,https://github.com/root-project/root/pull/11424#issuecomment-1256810467,1,['test'],['test']
Testability,; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158919/console).; ### Warnings:; - [2022-11-11T17:57:36.472Z] Warning in &lt;CheckModuleValid&gt;: warning: Couldn't find in the following specified headers in the module Core: ; - [2022-11-11T17:57:38.896Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-11-11T17:57:48.699Z] Warning in &lt;CheckModuleValid&gt;: warning: Couldn't find in the following specified headers in the module Thread: ; - [2022-11-11T17:57:50.021Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-11-11T17:57:50.278Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-11-11T17:57:56.416Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups ; - [2022-11-11T17:58:05.420Z] ld: warning: -undefined dynamic_lookup may not work with chained fixups . ### Failing tests:; - [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158919/testReport/projectroot/test/test_stressinterpreter/); - [projectroot.roottest.cling.staticinit.roottest_cling_staticinit_ROOT_7775](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158919/testReport/projectroot.roottest.cling/staticinit/roottest_cling_staticinit_ROOT_7775/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158919/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/158919/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312042585:1080,test,tests,1080,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312042585,7,['test'],"['test', 'testReport', 'tests']"
Testability,; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/console).; ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); - [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.root.io/fakeClass/roottest_root_io_fakeClass_make/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDict2TFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDict2TFile/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_stltest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stltest/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_foreign](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/99680/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_foreign/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6680#issuecomment-713864701:1044,test,testReport,1044,https://root.cern,https://github.com/root-project/root/pull/6680#issuecomment-713864701,1,['test'],['testReport']
Testability,; Running on olhswep22.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6301-ROOT-performance-centos7-multicore-default&date=2020-09-03).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_multicore_mt101_fillNtuples](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_multicore_mt101_fillNtuples/); - [projectroot.runtutorials.tutorial_dataframe_df023_aggregate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_dataframe_df023_aggregate/); - [projectroot.runtutorials.tutorial_dataframe_df021_createTGraph](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_dataframe_df021_createTGraph/); - [projectroot.runtutorials.tutorial_dataframe_df018_customActions](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_dataframe_df018_customActions/); - [projectroot.runtutorials.tutorial_dataframe_df022_useKahan](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_dataframe_df022_useKahan/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_multicore_mt301_TTaskGroupSimple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94723/testReport/projectroot/runtutorials/tutorial_multicore_mt301_TTaskGroupSimple/); - [projectroot.runtutorials.tutorial_multicore_mt103_f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-686702103:1038,test,testReport,1038,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-686702103,1,['test'],['testReport']
Testability,; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/console).; ### Errors:; - [2021-08-02T11:16:36.645Z] stderr: error: could not read '.git/rebase-apply/head-name': No such file or directory . ### Failing tests:; - [projectroot.core.base.test.gtest_core_base_test_CoreBaseTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.core.base/test/gtest_core_base_test_CoreBaseTests/); - [projectroot.core.imt.test.gtest_core_imt_test_testTaskArena](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.core.imt/test/gtest_core_imt_test_testTaskArena/); - [projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.core.meta/test/gtest_core_meta_test_testStatusBitsChecker/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTF1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTF1/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooDataHist](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooDataHist/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooFormula](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123880/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFormula/); - [proje,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-890964731:1011,test,test,1011,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-890964731,1,['test'],['test']
Testability,; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195869/console).; ### Errors:; - [2024-02-16T20:30:16.039Z] FAILED: tmva/sofie/test/CMakeFiles/TestCustomModelsFromONNX.dir/TestCustomModelsFromONNX.cxx.o ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:23:13: error: ‘other’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:23:18: error: template argument 1 is invalid ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:23:18: error: template argument 2 is invalid ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:18:7: error: ‘fTensor_Y’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:19:7: error: ‘tensor_Y’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:27:21: error: ‘fTensor_Y’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:29:7: error: ‘tensor_Y’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:32:7: error: ‘fTensor_Y’ was not declared in this scope ; - [2024-02-16T20:30:16.319Z] tmva/sofie/test/RangeFloat_FromONNX.hxx:34:16: error: ‘other’ was not declared in this scope . And 17 more. ### Warnings:; - [2024-02-16T20:30:16.318Z] tmva/sofie/test/Linear_16_FromONNX.hxx:420:9: warning: unused variable ‘op_0_transA’ [-Wunused-variable] ; - [2024-02-16T20:30:16.318Z] tmva/sofie/test/Linear_16_FromONNX.hxx:421:9: warning: unused variable ‘op_0_transB’ [-Wunused-variable] ; - [2024-02-16T20:30:16.318Z] tmva/sofie/test/Linear_16_FromONNX.hxx:422:8: warning: unused variable ‘op_0_m’ [-Wunused-variable] ; - [2024-02-16T20:30:16.318Z] tmva/sofie/test/Linear_16_FromONNX.hxx:423:8: warning: unused variable ‘op_0_n’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14413#issuecomment-1949290178:1036,test,test,1036,https://root.cern,https://github.com/root-project/root/pull/14413#issuecomment-1949290178,1,['test'],['test']
Testability,; Running on sft-ubuntu-1604-2.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/console).; ### Failing tests:; - [projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_writecomplex/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTF1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTF1/); - [projectroot.io.io.test.gtest_io_io_test_RRawFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.io.io/test/gtest_io_io_test_RRawFile/); - [projectroot.test.test_stressIOPlugins_http](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot/test/test_stressIOPlugins_http/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rstandardscaler](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_rstandardscaler/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rreader](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_rreader/); - [projectroot.tmva.tmva.test.DNN.TMVA_DNN_MethodDL_Adam_Optimization_Cpu](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.tmva.tmva.test/DNN/TMVA_DNN_MethodDL_Adam_Optimization_Cpu/); - [projectroot.tmva.tmva.test.DNN.TMVA_DNN_MethodDL_SGD_Optimization_Cpu](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97353/testReport/projectroot.tmva.tmva.test/DNN/TMVA_DNN_MethodDL_SGD_Optimization_Cpu/); - [projectroot.tmva.tmva.test.DNN.TMVA_DNN_M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-700852409:1030,test,testReport,1030,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-700852409,2,['test'],"['test', 'testReport']"
Testability,"; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349216512:2373,log,logEvalError,2373,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349216512,4,['log'],['logEvalError']
Testability,; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5913-mac1014-python3&date=2020-07-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/console).; ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readUniqPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_readUniqPtrColls/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_RunMyClass/); - [projectroot.test.test_stressgraphics_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot/test/test_stressgraphics_interpreted/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_display](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_display/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/88975/testReport/projectroot.roottest.root.io/cl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5913#issuecomment-654226605:1126,test,testReport,1126,https://root.cern,https://github.com/root-project/root/pull/5913#issuecomment-654226605,1,['test'],['testReport']
Testability,; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.casting.roottest_root_treeformula_casting_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.treeformula/casting/roottest_root_treeformula_casting_make/); - [projectroot.roottest.root.tree.selectorreader.roottest_root_tree_selectorreader_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.tree/selectorreader/roottest_root_tree_selectorreader_make/); - [projectroot.roottest.root.tree.split.roottest_root_tree_split_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.tree/split/roottest_root_tree_split_make/); - [projectroot.roottest.root.treeformula.depth.roottest_root_treeformula_depth_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.treeformula/depth/roottest_root_treeformula_depth_make/); - [projectroot.roottest.root.tree.stl.roottest_root_tree_stl_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/); - [projectroot.roottest.root.treeformula.event.roottest_root_treeformula_event_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.treeformula/event/roottest_root_treeformula_event_make/); - [projectroot.roottest.root.tree.treeproblem.roottest_root_tree_treeproblem_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16080/testReport/projectroot.roottest.root.tree/treeproblem/roottest_root_tree_treeproblem_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1574#issuecomment-362221906:1247,test,testReport,1247,https://root.cern,https://github.com/root-project/root/pull/1574#issuecomment-362221906,4,['test'],['testReport']
Testability,; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/console).; ### Failing tests:; - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_pragmaOnce1_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_pragmaOnce1_WILL_FAIL/); - [projectroot.roottest.root.meta.ROOT-7181.roottest_root_meta_ROOT_7181_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/ROOT-7181/roottest_root_meta_ROOT_7181_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execCheckSum](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execCheckSum/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_excludedAutoparseKeys](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_excludedAutoparseKeys/); - [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_unsupportedClasses](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_unsupportedClasses/); - [projectroot.roottest.root.meta.evolution.version5.roottest_root_meta_evolution_version5_execNestedColl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16628/testReport/projectroot.roottest.root.meta.evolution/version5/roottest_root_meta_evolution_version5_execNestedColl/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMissingCheckS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364079597:1034,test,testReport,1034,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364079597,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/console).; ### Failing tests:; - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_branch_attr/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_iterable](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_iterable/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tcollection_len](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tcollection_len/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tcollection_listmethods](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tcollection_listmethods/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107918/testReport/projectroot.bindings.pyr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7290#issuecomment-786172737:1090,test,test,1090,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786172737,1,['test'],['test']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/console).; ### Failing tests:; - [projectroot.bindings.experimental.distrdf.test.pyunittests_distrdf_unit_test_headnode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.experimental.distrdf/test/pyunittests_distrdf_unit_test_headnode/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_branch_attr/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_branch/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_array_interface](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_array_interface/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_asmatrix](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117262/testReport/projectroot.bindings.pyroot.pythonizations/t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8124#issuecomment-834727273:1125,test,test,1125,https://root.cern,https://github.com/root-project/root/pull/8124#issuecomment-834727273,1,['test'],['test']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/console).; ### Failing tests:; - [projectroot.bindings.experimental.distrdf.test.pyunittests_distrdf_unit_test_headnode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.experimental.distrdf/test/pyunittests_distrdf_unit_test_headnode/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_branch_attr/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_array_interface](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_array_interface/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_branch](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_branch/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttree_asmatrix](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117263/testReport/projectroot.bindings.pyroot.pythonizations/t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8124#issuecomment-834722654:1126,test,test,1126,https://root.cern,https://github.com/root-project/root/pull/8124#issuecomment-834722654,1,['test'],['test']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/console).; ### Errors:; - [2021-11-04T13:04:53.678Z] 1839/2290 Test #474: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.52 sec ; - [2021-11-04T13:08:08.418Z] 1854/2290 Test #1096: tutorial-dataframe-df106_HiggsToFourLeptons-py ....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.62 sec ; - [2021-11-04T13:08:11.197Z] 1856/2290 Test #1097: tutorial-dataframe-df107_SingleTopAnalysis-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.60 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_multicore_mp001_fillHistos](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/testReport/projectroot/runtutorials/tutorial_multicore_mp001_fillHistos/); - [projectroot.runtutorials.tutorial_multicore_mtbb001_fillHistos](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/testReport/projectroot/runtutorials/tutorial_multicore_mtbb001_fillHistos/); - [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); - [projectroot.runtutorials.tutorial_dataframe_df106_HiggsToFourLeptons_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/testReport/projectroot/runtutorials/tutorial_dataframe_df106_HiggsToFourLeptons_py/); - [projectroot.runtutorials.tutorial_dataframe_df107_SingleTopAnalysis_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129174/testReport/projectroot/runtutorials/tutorial_dataframe_df107_SingleTopAnalysis_py/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205#issuecomment-960916688:1105,test,testReport,1105,https://root.cern,https://github.com/root-project/root/pull/9205#issuecomment-960916688,5,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df028_SQliteIPLocation](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot/runtutorials/tutorial_dataframe_df028_SQliteIPLocation/); - [projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.root.io/evolution/roottest_root_io_evolution_make/); - [projectroot.roottest.root.io.newClassDef.roottest_root_io_newClassDef_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.root.io/newClassDef/roottest_root_io_newClassDef_make/); - [projectroot.roottest.cling.dict.roottest_cling_dict_rundefaultargs_compiled](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.cling/dict/roottest_cling_dict_rundefaultargs_compiled/); - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_stlProxies](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_stlProxies/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.root.meta.roottest_root_meta_runtemplateAutoloadInclude_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512/testReport/projectroot.roottest.root/meta/roottest_root_meta_runtemplateAutoloadInclude_auto/); - [projectroot.roottest.root.meta.roottest_root_meta_runtemplateAutoload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139512,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10132#issuecomment-1068628455:1136,test,testReport,1136,https://root.cern,https://github.com/root-project/root/pull/10132#issuecomment-1068628455,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/console).; ### Failing tests:; - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.python/function/roottest_python_function_function/); - [projectroot.roottest.python.ttree.roottest_python_ttree_ttree](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.python/ttree/roottest_python_ttree_ttree/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_ROOT9975](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_ROOT9975/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readShip](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readShip/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_chainZombieFile_WILL_FAIL](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_chainZombieFile_WILL_FAIL/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/140437/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches_WILL_FAIL](https://lcgapp-ser,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10246#issuecomment-1080759678:1106,test,testReport,1106,https://root.cern,https://github.com/root-project/root/pull/10246#issuecomment-1080759678,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/console).; ### Failing tests:; - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.python/function/roottest_python_function_function/); - [projectroot.roottest.python.ttree.roottest_python_ttree_ttree](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.python/ttree/roottest_python_ttree_ttree/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_ROOT9975](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_ROOT9975/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readShip](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readShip/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_chainZombieFile_WILL_FAIL](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_chainZombieFile_WILL_FAIL/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141524/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches_WILL_FAIL](https://lcgapp-ser,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1087864923:1106,test,testReport,1106,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1087864923,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/console).; ### Failing tests:; - [projectroot.roottest.cling.other.roottest_cling_other_checkMissingSymbolExitCode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.cling/other/roottest_cling_other_checkMissingSymbolExitCode/); - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.python/function/roottest_python_function_function/); - [projectroot.roottest.python.ttree.roottest_python_ttree_ttree](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.python/ttree/roottest_python_ttree_ttree/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_ROOT9975](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_ROOT9975/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readShip](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readShip/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_chainZombieFile_WILL_FAIL](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_chainZombieFile_WILL_FAIL/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141608/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches_WILL_FAIL](https://lcgapp-ser,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10328#issuecomment-1088687393:1106,test,testReport,1106,https://root.cern,https://github.com/root-project/root/pull/10328#issuecomment-1088687393,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/console).; ### Failing tests:; - [projectroot.roottest.root.io.withoutDictionaries.roottest_root_io_withoutDictionaries_VectorDMWriteWithoutDictionary](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.roottest.root.io/withoutDictionaries/roottest_root_io_withoutDictionaries_VectorDMWriteWithoutDictionary/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tobject_contains](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tobject_contains/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tcontext_contextmanager](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tcontext_contextmanager/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_stl_vector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_stl_vector/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_array_interface](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_array_interface/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tcollection_len](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159034/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tcollection_len/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tcollection_iterable](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-buil,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1312749734:1065,test,test,1065,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1312749734,1,['test'],['test']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/console).; ### Failing tests:; - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooGaussian/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooPoisson](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooPoisson/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooBernstein](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooBernstein/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooWrapperPdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooWrapperPdf/); - [projectroot.roofit.roostats.test.gtest_roofit_roostats_test_testSPlot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roofit.roostats/test/gtest_roofit_roostats_test_testSPlot/); - [projectroot.roottest.root.roofitstats.gtesttest_root_roofitstats_stabilityTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82124/testReport/projectroot.roottest.root/roofitstats/gtesttest_root_roofitstats_stabilityTests/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_numbadeclare](https://lcgapp-services.cern.ch/root-jenkins/j,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628676143:1291,test,testReport,1291,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628676143,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/console).; ### Failing tests:; - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooGaussian/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooPoisson](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooPoisson/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooBernstein](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooBernstein/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_ttree_asmatrix](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_ttree_asmatrix/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooWrapperPdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooWrapperPdf/); - [projectroot.roofit.roostats.test.gtest_roofit_roostats_test_testSPlot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82125/testReport/projectroot.roofit.roostats/test/gtest_roofit_roostats_test_testSPlot/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_histomodels](https://lcgapp-servic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628669769:1301,test,testReport,1301,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628669769,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/console).; ### Failing tests:; - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooGaussian/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooPoisson](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooPoisson/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooBernstein](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooBernstein/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooWrapperPdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooWrapperPdf/); - [projectroot.roofit.roostats.test.gtest_roofit_roostats_test_testSPlot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roofit.roostats/test/gtest_roofit_roostats_test_testSPlot/); - [projectroot.roottest.root.meta.loadAllLibs.roottest_root_meta_loadAllLibs_LoadAllLibs](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82126/testReport/projectroot.roottest.root.meta/loadAllLibs/roottest_root_meta_loadAllLibs_LoadAllLibs/); - [projectroot.roottest.root.meta.loadAllLibs.roottest_root_meta_loadAllLibs_LoadAllLibsAZ](https://lcgapp-services.cern.ch/root-je,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628667527:1288,test,testReport,1288,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628667527,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/console).; ### Failing tests:; - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooGaussian](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooGaussian/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooPoisson](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooPoisson/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooBernstein](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooBernstein/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooWrapperPdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooWrapperPdf/); - [projectroot.roofit.roostats.test.gtest_roofit_roostats_test_testSPlot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roostats/test/gtest_roofit_roostats_test_testSPlot/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testProxiesAndCategories](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82539/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testProxiesAndCategories/); - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-629745887:1288,test,testReport,1288,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-629745887,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/console).; ### Failing tests:; - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_dependency_versions](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/); - [projectroot.runtutorials.test_import_pandas](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot/runtutorials/test_import_pandas/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_handlers_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_handlers_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_utils_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_utils_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93502/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_thread_local_notebook](https://lcgapp-services.cer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6238#issuecomment-678232755:1299,test,testReport,1299,https://root.cern,https://github.com/root-project/root/pull/6238#issuecomment-678232755,1,['test'],['testReport']
Testability,; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/console).; ### Failing tests:; - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_dependency_versions](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/); - [projectroot.runtutorials.test_import_pandas](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot/runtutorials/test_import_pandas/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_handlers_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_handlers_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_utils_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_utils_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93766/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_thread_local_notebook](https://lcgapp-services.cer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6217#issuecomment-679943013:1299,test,testReport,1299,https://root.cern,https://github.com/root-project/root/pull/6217#issuecomment-679943013,1,['test'],['testReport']
Testability,"; cd ./roottest/root/meta/cmsUnload/; make cleantest V=1. cat scripts/case3.script; ```. ```cpp; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. ```bash; root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundUnnamedIncorrectFileLoc"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -l -b < scripts/case3.script; ```. Currently this test fails for runtime_cxxmodules even though the change seems unrelated. It seems to me that failure is the right behavior. The script 'unloads' `gInterpreter->AutoParse(""SiStripCluster"");` and after that point the definition of `SiStripCluster` should not be available. ```; ROOT_prompt_6:1:16: error: variable has incomplete type 'SiStripCluster'; SiStripCluster obj;; ^; libStrip dictionary forward declarations' payload:5:132: note: forward declaration of 'SiStripCluster'; ...__attribute__((annotate(""$clingAutoload$SiStripCluster.h""))) SiStripCluster;; ^; ```. My suspicion is that the for the non-modules case we somehow fail to unload the definition of `SiStripCluster`. @pcanal, can you remember what exactly we were testing there?. PS: How the deserialization of the vtables of `TMVA::IPruneTool` makes the test succeeds is a complete mystery to me at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-433640932:1156,test,test,1156,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-433640932,6,['test'],"['test', 'testing']"
Testability,; cd /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core && /scratch/greenc/test-products/cmake/v3_23_2/Linux64bit+3.10-2.17/bin/cmake -E env LD_LIBRARY_PATH=/scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/products/xrootd/v5_4_3a/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/scratch/greenc/test-products/tbb/v2021_5_0b/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib64:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib:/products/pythia/v6_4_28u/Linux64bit+3.10-2.17-c14-debug/lib:/scratch/greenc/test-products/postgresql/v14_4/Linux64bit+3.10-2.17-p3912/lib:/products/openblas/v0_3_20c/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/python/v3_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/sqlite/v3_38_05_00/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/libxml2/v2_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/gsl/v2_7/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib/x86_64-unknown-linux-gnu:/scratch/greenc/test-products/fftw/v3_3_10/Linux64bit+3.10-2.17/lib: /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib/libCore.so -excludePath /scratch/greenc/test-products/root/v6_26_04b/source/root-6.26.04 -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/ginclude -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/externals -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mBypro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1192995322:1015,test,test-products,1015,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1192995322,2,['test'],['test-products']
Testability,; roofit/roofit/src/RooNDKeysPdf.cxx:6; roofit/roofit/src/RooPoisson.cxx:2; roofit/roofit/src/RooGExpModel.cxx:4; roofit/roofitcore/src/RooHistPdf.cxx:1; roofit/roofitcore/src/RooRealSumPdf.cxx:2; roofit/roofitcore/src/RooTruthModel.cxx:5; roofit/roofitcore/src/RooEfficiency.cxx:1; roofit/roofitcore/src/RooPolyVar.cxx:2; roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:2; roofit/histfactory/src/FlexibleInterpVar.cxx:11; gui/fitpanel/src/TFitEditor.cxx:1; hist/hist/test/test_THBinIterator.cxx:1; hist/hist/src/THistRange.cxx:1; hist/hist/src/TH1Merger.cxx:5; hist/hist/inc/THistRange.h:4; hist/hist/src/TF1.cxx:2; hist/hist/src/TProfile2D.cxx:4; hist/hist/src/TFormula_v5.cxx:1; hist/hist/src/TH3.cxx:5; hist/hist/inc/TNDArray.h:3; hist/hist/src/TH1.cxx:5; hist/hist/src/TProfileHelper.h:2; hist/hist/src/HFitImpl.cxx:5; hist/hist/src/TPrincipal.cxx:1; hist/hist/src/TProfile3D.cxx:4; hist/hist/src/TProfile.cxx:2; hist/hist/src/TFormula.cxx:3; test/TrackMathCore.h:5; test/vlazy.cxx:1; test/vmatrix.cxx:21; test/stressLinear.cxx:43; geom/geom/src/TGeoShape.cxx:4; math/vecops/inc/ROOT/RVec.hxx:6; math/mlp/src/TMultiLayerPerceptron.cxx:2; math/mathcore/test/fit/testFit.cxx:1; math/mathcore/test/stress/TrackMathCore.h:5; math/mathcore/test/fit/testLogLExecPolicy.cxx:1; math/physics/src/TRobustEstimator.cxx:1; math/mathcore/src/TMath.cxx:1; math/mathcore/src/TKDTreeBinning.cxx:1; math/matrix/inc/TMatrixTSparse.h:2; math/matrix/inc/TMatrixTUtils.h:14; math/matrix/inc/TMatrixT.h:5; math/matrix/inc/TMatrixTSym.h:3; math/matrix/inc/TVectorT.h:6; math/matrix/src/TDecompChol.cxx:5; math/matrix/src/TMatrixDSymEigen.cxx:1; math/matrix/src/TDecompBK.cxx:4; math/matrix/src/TMatrixDEigen.cxx:1; math/matrix/src/TMatrixTLazy.cxx:5; math/matrix/src/TDecompSVD.cxx:6; math/matrix/src/TDecompBase.cxx:2; math/matrix/src/TMatrixTSparse.cxx:61; math/matrix/src/TVectorT.cxx:74; math/matrix/src/TMatrixTSym.cxx:46; math/matrix/src/TDecompLU.cxx:6; math/matrix/src/TMatrixTBase.cxx:31; math/matrix/s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-872791223:2098,test,test,2098,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-872791223,1,['test'],['test']
Testability,; specified path differs in case from file name on disk [-Wnonportable-include-path] . And 10 more. ### Failing tests:; - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.roottest.cling.return.roottest_cling_return_constRetrunTest_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.cling/return/roottest_cling_return_constRetrunTest_WILL_FAIL/); - [projectroot.roottest.root.collection.roottest_root_collection_execTClonesArrayAbsorb_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.root/collection/roottest_root_collection_execTClonesArrayAbsorb_auto/); - [projectroot.roottest.root.io.json.roottest_root_io_json_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.root.io/json/roottest_root_io_json_make/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_cachedChain](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_cachedChain/); - [projectroot.roottest.cling.stl.vector.roottest_cling_stl_vector_Run_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.cling.stl/vector/roottest_cling_stl_vector_Run_WILL_FAIL/); - [projectroot.roottest.cling.typedef_global.roottest_cling_typedef_global_scopeTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.cling/typedef_global/roottest_cling_typedef_global_scopeTest2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_runforeign](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11345/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_runforeign/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-343509208:3767,test,testReport,3767,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-343509208,4,['test'],['testReport']
Testability,; specified path differs in case from file name on disk [-Wnonportable-include-path] . And 10 more. ### Failing tests:; - [projectroot.roottest.cling.return.roottest_cling_return_constRetrunTest_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.cling/return/roottest_cling_return_constRetrunTest_WILL_FAIL/); - [projectroot.roottest.root.collection.roottest_root_collection_execTClonesArrayAbsorb_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.root/collection/roottest_root_collection_execTClonesArrayAbsorb_auto/); - [projectroot.roottest.root.io.json.roottest_root_io_json_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.root.io/json/roottest_root_io_json_make/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_cachedChain](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_cachedChain/); - [projectroot.roottest.cling.stl.vector.roottest_cling_stl_vector_Run_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.cling.stl/vector/roottest_cling_stl_vector_Run_WILL_FAIL/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_runforeign](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_runforeign/); - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.roottest.cling.typedef_global.roottest_cling_typedef_global_scopeTest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11412/testReport/projectroot.roottest.cling/typedef_global/roottest_cling_typedef_global_scopeTest2/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-343735053:3791,test,testReport,3791,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-343735053,4,['test'],['testReport']
Testability,"; | 1 | 1 |; | 2 | 2 |; | 3 | 3 |; | 4 | 4 |; | 5 | 5 |; | 6 | 6 |; | 7 | 7 |; | 8 | 8 |. I can do that through:; 1. Two TTrees, each with 9 entries, each saved to one single file.; 2. Two TChains, each chain has 9 total entries, each chain is made of three files, each file has internally one TTree with 3 entries.; 3. One TTree with 9 entries saved to one file, plus one TChain with 9 total entries, three files each with a TTree with 3 entries. In each scenario I will create the datasets, read the files back, add one of the two datasets as a friend to the other. Finally, I will try to print the columns both with `TTree::Print` and rdf's `Display`. Plus, I will also use `TTree::Scan` to get more information on the internal structure of the tree and its friend. # Case 1; This is the code I use to recreate the scenario. ```cpp; void write_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }; ; int main(){; write_tree(""treeparent.root"", ""treeparent"");; write_tree(""treefriend.root"", ""treefriend"");; TFile parentfile{""treeparent.root"", ""read""};; TFile friendfile{""treefriend.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};; std::unique_ptr<TTree> friendtree{friendfile.Get<TTree>(""treefriend"")};. parenttree->AddFriend(friendtree.get());; parenttree->Scan(""x:treefriend.x"");; parenttree->Print(""all"");. ROOT::RDataFrame rdf{*parenttree};; auto display = rdf.Display("""");; std::cout << ""Result from rdf.Display()->Print():\n"";; display->Print();; }; ```. Result from TTree:Scan(""x:treefriend.x""):; ```; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 3 *; * 4 * 4 * 4 *; * 5 * 5 * 5 *; * 6 * 6 * 6 *; * 7 * 7 * 7 *; * 8 * 8 * 8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-816500613:1519,test,test,1519,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613,2,['test'],['test']
Testability,;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: . And 7 more. ### Failing tests:; - [projectroot.runtutorials.tutorial_geom_RadioNuclides](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_geom_RadioNuclides/); - [projectroot.runtutorials.tutorial_multicore_mp001_fillHistos](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mp001_fillHistos/); - [projectroot.runtutorials.tutorial_multicore_mp201_parallelHistoFill](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mp201_parallelHistoFill/); - [projectroot.runtutorials.tutorial_multicore_mt001_fillHistos](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mt001_fillHistos/); - [projectroot.runtutorials.tutorial_multicore_mt201_parallelHistoFill](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mt201_parallelHistoFill/); - [projectroot.runtutorials.tutorial_multicore_mtbb001_fillHistos](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mtbb001_fillHistos/); - [projectroot.runtutorials.tutorial_multicore_mtbb201_parallelHistoFill](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_multicore_mtbb201_parallelHistoFill/); - [projectroot.runtutorials.tutorial_r_SimpleFitting](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12468/testReport/projectroot/runtutorials/tutorial_r_SimpleFitting/); - [projectroot.roottest.cling.other.roottest_cling_other_execValuePrint](https://epsft-jenkins.cern.ch/job/root-pullreques,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1365#issuecomment-346941647:4151,test,testReport,4151,https://root.cern,https://github.com/root-project/root/pull/1365#issuecomment-346941647,1,['test'],['testReport']
Testability,;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressfit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot/test/test_stressfit/); - [projectroot.test.test_stressmathmore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot/test/test_stressmathmore/); - [projectroot.test.test_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.test.test_stressentrylist](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot/test/test_stressentrylist/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.test.test_stressshapes](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10211/testReport/projectroot/test/test_stressshapes/); - [projectroot.tes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1255#issuecomment-340811548:1417,test,test,1417,https://root.cern,https://github.com/root-project/root/pull/1255#issuecomment-340811548,1,['test'],['test']
Testability,;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_mapDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressfit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot/test/test_stressfit/); - [projectroot.test.test_stressmathmore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot/test/test_stressmathmore/); - [projectroot.test.test_stressentrylist](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot/test/test_stressentrylist/); - [projectroot.test.test_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.test.test_stressvector_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10209/testReport/projectroot/test/test_stressvector_interpret,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1255#issuecomment-340820999:1413,test,test,1413,https://root.cern,https://github.com/root-project/root/pull/1255#issuecomment-340820999,1,['test'],['test']
Testability,;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_mapDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressfit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressfit/); - [projectroot.test.test_stressmathmore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressmathmore/); - [projectroot.test.test_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.test.test_stressentrylist](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressentrylist/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.test.test_stressshapes](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressshapes/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10195/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.test.test_stressvector_interpreted](https://epsft-jenkins.cern.ch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1255#issuecomment-340830948:1640,test,testReport,1640,https://root.cern,https://github.com/root-project/root/pull/1255#issuecomment-340830948,2,['test'],"['test', 'testReport']"
Testability,;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_tclass_methods](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_listFilesCtor](https,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1317#issuecomment-344080035:1640,test,test,1640,https://root.cern,https://github.com/root-project/root/pull/1317#issuecomment-344080035,1,['test'],['test']
Testability,;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_tclass_methods](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_listFilesCtor](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11502/testReport/projectroot.roottest.root/dataframe/roottest_root_d,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1317#issuecomment-344080035:1743,test,testReport,1743,https://root.cern,https://github.com/root-project/root/pull/1317#issuecomment-344080035,2,['test'],"['test', 'testReport']"
Testability,;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11623/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11623/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.roottest.cling.typedef.roottest_cling_typedef_assertTypedefIter](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11623/testReport/projectroot.roottest.cling/typedef/roottest_cling_typedef_assertTypedefIter/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11623/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11623/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.rootte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1322#issuecomment-344233628:1504,test,testReport,1504,https://root.cern,https://github.com/root-project/root/pull/1322#issuecomment-344233628,2,['test'],"['test', 'testReport']"
Testability,;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: . And 7 more. ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_tdf013_InspectAnalysis](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_dataframe_tdf013_InspectAnalysis/); - [projectroot.runtutorials.tutorial_math_quasirandom](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_math_quasirandom/); - [projectroot.runtutorials.tutorial_multicore_mt303_AsyncSimple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_multicore_mt303_AsyncSimple/); - [projectroot.runtutorials.tutorial_multicore_mt304_AsyncNested](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_multicore_mt304_AsyncNested/); - [projectroot.runtutorials.tutorial_multicore_mt305_TFuture](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_multicore_mt305_TFuture/); - [projectroot.runtutorials.tutorial_multicore_mtbb201_parallelHistoFill](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_multicore_mtbb201_parallelHistoFill/); - [projectroot.runtutorials.tutorial_roostats_Zbi_Zgamma](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_roostats_Zbi_Zgamma/); - [projectroot.runtutorials.tutorial_roostats_rs_numbercountingutils](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/testReport/projectroot/runtutorials/tutorial_roostats_rs_numbercountingutils/); - [projectroot.runtutorials.tutorial_tmva_keras_LaunchClasGUI](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12921/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1388#issuecomment-347671000:3930,test,testReport,3930,https://root.cern,https://github.com/root-project/root/pull/1388#issuecomment-347671000,1,['test'],['testReport']
Testability,";::_M_elems’ [-Wmissing-field-initializers] ; - [2020-09-08T17:10:46.379Z] /data/sftnight/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ColumnReaders.hxx:311:108: warning: missing initializer for member ‘std::array&lt;std::unique_ptr&lt;ROOT::Internal::RDF::RColumnReaderBase&gt;, 0ul&gt;::_M_elems’ [-Wmissing-field-initializers] ; - [2020-09-08T17:10:46.379Z] /data/sftnight/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ColumnReaders.hxx:311:108: warning: missing initializer for member ‘std::array&lt;std::unique_ptr&lt;ROOT::Internal::RDF::RColumnReaderBase&gt;, 0ul&gt;::_M_elems’ [-Wmissing-field-initializers] ; - [2020-09-08T17:10:46.380Z] /data/sftnight/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ColumnReaders.hxx:311:108: warning: missing initializer for member ‘std::array&lt;std::unique_ptr&lt;ROOT::Internal::RDF::RColumnReaderBase&gt;, 0ul&gt;::_M_elems’ [-Wmissing-field-initializers] . And 19 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95279/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_ctors](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95279/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_ctors/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_reduce](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95279/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_reduce/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95279/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6325#issuecomment-689024818:3554,test,tests,3554,https://root.cern,https://github.com/root-project/root/pull/6325#issuecomment-689024818,1,['test'],['tests']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12465/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12465/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.io.transient.roottest_root_io_transient_execOld](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12465/testReport/projectroot.roottest.root.io/transient/roottest_root_io_transient_execOld/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12465/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDictTXMLFile/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/124,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-346940389:3351,test,testReport,3351,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-346940389,1,['test'],['testReport']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressgraphics](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/test/test_stressgraphics/); - [projectroot.runtutorials.tutorial_tmva_TMVAMulticlass](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_tmva_TMVAMulticlass/); - [projectroot.runtutorials.tutorial_tmva_TMVARegression](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_tmva_TMVARegression/); - [projectroot.test.test_stressgraphics_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/test/test_stressgraphics_interpreted/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.runtutorials.tutorial_dataframe_tdf013_InspectAnalysis](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_dataframe_tdf013_InspectAnalysis/); - [projectroot.runtutorials.tutorial_math_quasirandom](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_math_quasirandom/); - [projectroot.runtutorials.tutorial_multicore_mt303_AsyncSimple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_multicore_mt303_AsyncSimple/); - [projectroot.runtutorials.tutorial_multicore_mt304_AsyncNested](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12812/testReport/projectroot/runtutorials/tutorial_multicore_mt304_AsyncNested/); - [projectroot.runtutori,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1381#issuecomment-347513862:3949,test,test,3949,https://root.cern,https://github.com/root-project/root/pull/1381#issuecomment-347513862,1,['test'],['test']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12524/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stressmathmore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12524/testReport/projectroot/test/test_stressmathmore_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12524/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12524/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_dataframe_tdf013_InspectAnalysis](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12524/testReport/projectroot/runtutorials/tutorial_dataframe_tdf013_InspectAnalysis/); - [projectroot.runtutorials.tutorial_fit_fitNormSum](https://epsft-jenkins.cern.ch/job,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-347035780:3424,test,test,3424,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-347035780,1,['test'],['test']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressmathmore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/test/test_stressmathmore_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_dataframe_tdf013_InspectAnalysis](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/runtutorials/tutorial_dataframe_tdf013_InspectAnalysis/); - [projectroot.runtutorials.tutorial_fit_fitNormSum](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12525/testReport/projectroot/runtutorials/tutorial_fit_fitNormSum/); - [projectroot.runtutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-347042370:3525,test,testReport,3525,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-347042370,2,['test'],"['test', 'testReport']"
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stressmathmore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/test/test_stressmathmore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_math_mathcoreGenVector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/runtutorials/tutorial_math_mathcoreGenVector/); - [projectroot.runtutorials.tutorial_math_mathmoreIntegration](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12750/testReport/projectroot/runtutorials/tutorial_math_mathmoreIntegration/); - [projectroot.runtutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-347483577:3532,test,testReport,3532,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-347483577,2,['test'],"['test', 'testReport']"
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimapDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBranches/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_listFilesCtor](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_listFilesCtor/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testRepo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1321#issuecomment-345228175:2128,test,test,2128,https://root.cern,https://github.com/root-project/root/pull/1321#issuecomment-345228175,1,['test'],['test']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11504/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11504/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11504/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11504/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11504/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_tem,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1317#issuecomment-344062073:1518,test,testReport,1518,https://root.cern,https://github.com/root-project/root/pull/1317#issuecomment-344062073,1,['test'],['testReport']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11512/testReport/projectroot.roottest.cling/array/roottest_cling_array_runarray1/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11512/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11512/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/); - [projectroot.roottest.root.collection.roottest_root_collection_execHistArray_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11512/testReport/projectroot.roottest.root/collection/roottest_root_collection_execHistArray_auto/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11512/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBra,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1317#issuecomment-344093769:1518,test,testReport,1518,https://root.cern,https://github.com/root-project/root/pull/1317#issuecomment-344093769,1,['test'],['testReport']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressgraphics](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/test_stressgraphics/); - [projectroot.test.test_stressmathmore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/test_stressmathmore_interpreted/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.test.test_stressgraphics_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12559/testReport/projectroot/test/t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-347121921:3423,test,test,3423,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-347121921,1,['test'],['test']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module mapDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module listDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module map2Dict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressgraphics](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/test_stressgraphics/); - [projectroot.test.test_stressmathmore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/test_stressmathmore_interpreted/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stressroofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.test.test_stressgraphics_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12625/testReport/projectroot/test/t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1356#issuecomment-347214595:3423,test,test,3423,https://root.cern,https://github.com/root-project/root/pull/1356#issuecomment-347214595,1,['test'],['test']
Testability,;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module vectorDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module valarrayDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_multisetDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module unordered_setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimap2Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module multimapDict: . And 7 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBranches/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_templateRecursionLimit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_templateRecursionLimit/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_listFilesCtor](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_listFilesCtor/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/12134/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.roottest.cling.array.roottest_cling_array_runarray1](https://epsft-jenkins.cer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1321#issuecomment-345228175:1383,test,tests,1383,https://root.cern,https://github.com/root-project/root/pull/1321#issuecomment-345228175,1,['test'],['tests']
Testability,";double&gt;&, const ROOT::Fit::BinData&, const double*, unsigned int&)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluateChi2.cxx:336:6: error: template-id ‘EvalGradient&lt;&gt;’ for ‘void ROOT::Fit::FitUtil::Chi2&lt;double&gt;::EvalGradient(ROOT::Fit::FitUtil::IModelFunctionTempl&lt;double&gt;&, const ROOT::Fit::BinData&, const double*, double*, unsigned int&, ROOT::Fit::ExecutionPolicy, unsigned int)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluateChi2.cxx:539:8: error: template-id ‘EvalResidual&lt;&gt;’ for ‘double ROOT::Fit::FitUtil::Chi2&lt;double&gt;::EvalResidual(ROOT::Fit::FitUtil::IModelFunctionTempl&lt;double&gt;&, const ROOT::Fit::BinData&, const double*, unsigned int, double*)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluateLogL.cxx:104:8: error: template-id ‘Eval&lt;&gt;’ for ‘double ROOT::Fit::FitUtil::LogL&lt;double&gt;::Eval(ROOT::Fit::FitUtil::IModelFunctionTempl&lt;double&gt;&, const ROOT::Fit::UnBinData&, const double*, int, bool, unsigned int&, ROOT::Fit::ExecutionPolicy, unsigned int)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluateLogL.cxx:314:6: error: template-id ‘EvalGradient&lt;&gt;’ for ‘void ROOT::Fit::FitUtil::LogL&lt;double&gt;::EvalGradient(ROOT::Fit::FitUtil::IModelFunctionTempl&lt;double&gt;&, const ROOT::Fit::UnBinData&, const double*, double*, unsigned int&, ROOT::Fit::ExecutionPolicy, unsigned int)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluatePoissonLogL.cxx:70:8: error: template-id ‘Eval&lt;&gt;’ for ‘double ROOT::Fit::FitUtil::PoissonLogL&lt;double&gt;::Eval(ROOT::Fit::FitUtil::IModelFunctionTempl&lt;double&gt;&, const ROOT::Fit::BinData&, const double*, int, bool, unsigned int&, ROOT::Fit::ExecutionPolicy, unsigned int)’ does not match any template declaration ; - ../root/math/mathcore/src/EvaluatePoissonLogL.cxx:255:8: error: template-id ‘EvalBinPdf&lt;&gt;’ for ‘double ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2690#issuecomment-424710024:1569,Log,LogL,1569,https://root.cern,https://github.com/root-project/root/pull/2690#issuecomment-424710024,2,['Log'],['LogL']
Testability,";double, double&gt;’ from initializer list would use explicit constructor ‘constexpr std::tuple&lt;_T1, _T2&gt;::tuple(_U1&&, _U2&&) [with _U1 = int; _U2 = int; &lt;template-parameter-2-3&gt; = void; _T1 = double; _T2 = double]’ . ### Warnings:; - [2021-07-22T15:12:08.350Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:25:91: warning: declaration of ‘calculation_is_clean’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-07-22T15:12:08.350Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:25:91: warning: declaration of ‘likelihood’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-07-22T15:12:10.265Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-07-22T15:12:10.265Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-07-22T15:12:10.266Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:79:109: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-07-22T15:12:10.266Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:79:109: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-07-22T15:12:10.266Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:88:35: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshado",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-884992866:8066,Test,TestStatistics,8066,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884992866,1,['Test'],['TestStatistics']
Testability,";double, double&gt;’ from initializer list would use explicit constructor ‘constexpr std::tuple&lt;_T1, _T2&gt;::tuple(_U1&&, _U2&&) [with _U1 = int; _U2 = int; &lt;template-parameter-2-3&gt; = void; _T1 = double; _T2 = double]’ . ### Warnings:; - [2021-09-02T11:39:10.396Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:25:91: warning: declaration of ‘calculation_is_clean’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-02T11:39:10.397Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:25:91: warning: declaration of ‘likelihood’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-02T11:39:11.738Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-02T11:39:11.738Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-02T11:39:11.738Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:79:109: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-02T11:39:11.738Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:79:109: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-02T11:39:11.738Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:88:35: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshado",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-911573431:4741,Test,TestStatistics,4741,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-911573431,1,['Test'],['TestStatistics']
Testability,";double, double&gt;’ from initializer list would use explicit constructor ‘constexpr std::tuple&lt;_T1, _T2&gt;::tuple(_U1&&, _U2&&) [with _U1 = int; _U2 = int; &lt;template-parameter-2-3&gt; = void; _T1 = double; _T2 = double]’ . ### Warnings:; - [2021-09-03T11:32:20.771Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:41:91: warning: declaration of ‘calculation_is_clean’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-03T11:32:20.771Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:41:91: warning: declaration of ‘likelihood’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-03T11:32:22.784Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-03T11:32:22.784Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-03T11:32:22.784Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:84:109: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-03T11:32:22.784Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:84:109: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-03T11:32:22.785Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:101:35: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshad",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-912469739:4743,Test,TestStatistics,4743,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-912469739,1,['Test'],['TestStatistics']
Testability,";double, double&gt;’ from initializer list would use explicit constructor ‘constexpr std::tuple&lt;_T1, _T2&gt;::tuple(_U1&&, _U2&&) [with _U1 = int; _U2 = int; &lt;template-parameter-2-3&gt; = void; _T1 = double; _T2 = double]’ . ### Warnings:; - [2021-09-07T09:16:38.334Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:41:91: warning: declaration of ‘calculation_is_clean’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-07T09:16:38.334Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/LikelihoodGradientWrapper.cxx:41:91: warning: declaration of ‘likelihood’ shadows a member of ‘RooFit::TestStatistics::LikelihoodGradientWrapper’ [-Wshadow] ; - [2021-09-07T09:16:39.551Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-07T09:16:39.551Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:63:83: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-07T09:16:39.551Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:84:109: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-07T09:16:39.551Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:84:109: warning: declaration of ‘N_events’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshadow] ; - [2021-09-07T09:16:39.551Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:101:35: warning: declaration of ‘N_components’ shadows a member of ‘RooFit::TestStatistics::RooAbsL’ [-Wshad",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-914137534:4743,Test,TestStatistics,4743,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-914137534,1,['Test'],['TestStatistics']
Testability,"< "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [5,7]"" << std::endl;; range.AddRange(5,7);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [20,25]"" << std::endl;; range.AddRange(20,25);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. assert(range(0,1).first == 20);; assert(range(0,1).second == 25);; std::cout << ""range [20,25] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [24,26]"" << std::endl;; range.AddRange(24,26);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;; assert(range(0,1).first == 20);; assert(range(0,1).second == 26);; std::cout << ""range [20,26] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [19,20]"" << std::endl;; range.AddRange(19,20);; assert(range(0,1).first == 19);; assert(range(0,1).second == 26);; std::cout << ""range [16,26] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [6,20]"" << std::endl;; range.AddRange(6,20);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;; assert(range(0,0).first == -2);; assert(range(0,0).second == 26);; std::cout << ""range [-2,26] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;; ```. This shows several behaviors: adding a range fully encapsulated by an existing one, adding a range which fully encapsulates and existing one, extending an existing range by adding an overlapping one, merging two existing ranges by adding one in the middle. . Tim",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10101#issuecomment-1080761923:2318,assert,assert,2318,https://root.cern,https://github.com/root-project/root/pull/10101#issuecomment-1080761923,7,['assert'],['assert']
Testability,"< Use new instance of all the pass/analysis managers every time . If this commit works out, please enhance the commit log with an explanation of why this change is improving things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1863176284:118,log,log,118,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1863176284,1,['log'],['log']
Testability,"< std::endl;. assert((range(0,0).first == 0));; assert(range(0,0).second == 5);. std::cout << ""range [0,5] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [-1,6]"" << std::endl;; range.AddRange(-1,6);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -1);; assert(range(0,0).second == 6);; std::cout << ""range [-1,6] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [-2,4]"" << std::endl;; range.AddRange(-2,4);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 6);; std::cout << ""range [-2,6] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [5,7]"" << std::endl;; range.AddRange(5,7);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [20,25]"" << std::endl;; range.AddRange(20,25);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. assert(range(0,1).first == 20);; assert(range(0,1).second == 25);; std::cout << ""range [20,25] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [24,26]"" << std::endl;; range.AddRange(24,26);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;; assert(range(0,1).first == 20);; assert(range(0,1).second == 26);; std::cout << ""range [20,26] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [19,20]"" << std::endl;; range.AddRang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10101#issuecomment-1080761923:1541,assert,assert,1541,https://root.cern,https://github.com/root-project/root/pull/10101#issuecomment-1080761923,1,['assert'],['assert']
Testability,"<TGeoManager>: Changing system of units to Geant4 units (mm, ns, MeV).; Using Geant4 system of units. ; Element: SI Z=14 N=28.000000 A=28.085500 [g/mole]; Material Mat_Si_G4 A=28.0855 Z=14 rho=2.329 radlen=93.5361 intlen=457.729 index=0; Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]; Material Mat_Fe_G4 A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=169.589 index=4; Element: U Z=92 N=238.000000 A=238.028900 [g/mole]; Material Mat_U_G4 A=238.029 Z=92 rho=18.95 radlen=3.16948 intlen=114.473 index=8; TEST PASSED Si vs. Mat_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_1_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_2_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_3_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mat_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_1_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_2_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_3_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Mat_Si_TGeo vs. Mat_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_1_Si_TGeo vs. Mix_1_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_2_Si_TGeo vs. Mix_2_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_3_Si_TGeo vs. Mix_3_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Fe vs. Mat_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_1_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.028 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_2_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198355345:2188,TEST,TEST,2188,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198355345,1,['TEST'],['TEST']
Testability,"<a href=""https://github.com/root-project/root/blob/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/roofit/roofitcore/src/RooGaussMinimizerFcn.cxx#L604"">RooGaussMinimizerFcn.cxx:604</a></li></ul></td>; <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/5b6f465ca3bb34ba08d3848eb0631d8e4199beab/root-project/root/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/pr/_/%2Froofit%2Froofitcore%2Fsrc%2FRooGaussMinimizerFcn.cxx/cpp%2Fdc%2FMissingOpenCheckOnFile/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>; </tr>; <tr>; <td width=""77%"">Rethrow the original exception object using an empty throw. Otherwise a copy of e2 is created and the original exception type is lost and replaced by its (potential) super-type zmq::error_t. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/roofit/roofitZMQ/test/test_ZMQ.cpp#L36"">test_ZMQ.cpp:36</a></li> <li><a href=""https://github.com/root-project/root/blob/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/roofit/roofitZMQ/test/test_ZMQ.cpp#L49"">test_ZMQ.cpp:49</a></li></ul></td>; <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/5b6f465ca3bb34ba08d3848eb0631d8e4199beab/root-project/root/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/pr/_/%2Froofit%2FroofitZMQ%2Ftest%2Ftest_ZMQ.cpp/cpp%2Fdc%2FRethrowWithEmptyThrow%2Ftest/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>; </tr>; </tbody>; </table>. #### 👉 View analysis in [**DeepCode’s Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/5b6f465ca3bb34ba08d3848eb0631d8e4199beab/root-project/root/1b9c58fb0cd14a4fc79e18eb05fac286a371d8b9/pr/_/%2F/code/?utm_source=gh_review&c=0&w=2&i=3&) | [_Configure the bot_](https://www.deepcode.ai/app/gh/?ownerconfig=root-project); #### 👉 The DeepCode service and API will be deprecated in August, 2021. [Here](https://www.deepcode.ai/blog/migrate-to-snyk-code) is the information how to migrate. Thank you for using DeepCode 🙏 ❤️ !; If you are using ou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294#issuecomment-851566058:2696,test,test,2696,https://root.cern,https://github.com/root-project/root/pull/8294#issuecomment-851566058,1,['test'],['test']
Testability,"<built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:1097:24: note: to match this '('; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:117:57: note: expanded from macro 'atomic_store'; #define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST); ^; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:1108:33: error: expected parameter declarator; template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r ) ...; ^; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:123:81: note: expanded from macro 'atomic_exchange'; #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOM...; ^; <built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:1108:33: error: expected ')'; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:123:81: note: expanded from macro 'atomic_exchange'; #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOM...; ^; <built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:1108:33: note: to match this '('; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:123:63: note: expanded from macro 'atomic_exchange'; #define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOM...; ^; ```. ```; $ sw_vers; ProductName: macOS; ProductVersion: 11.2; BuildVersion: 20D64; $ c++ --version; Apple clang version 12.0.0 (clang-1200.0.32.29); Target: x86_64-apple-darwin20.3.0; Thread model",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6454#issuecomment-789316508:8813,test,test,8813,https://root.cern,https://github.com/root-project/root/issues/6454#issuecomment-789316508,1,['test'],['test']
Testability,"<cstdint>; +#include <cstdio>; #include <cstdlib>; #include <cstring>; #include <ctime>; @@ -2498,6 +2499,8 @@; // did not result in us loading a module file for that submodule. For; // instance, a cross-top-level-module 'conflict' declaration will hit this.; unsigned ID = getLocalOrImportedSubmoduleID(Mod);; + fprintf(stderr, ""Mod=%X\n"", Mod);; + fprintf(stderr, ""Submodule=%s\n"", Mod->Name.c_str());; assert((ID || !Mod) &&; ""asked for module ID for non-local, non-imported module"");; return ID;; ```; gives:; ```ConsoleSession; <snip/>; End of search list.; Mod=0; #0 0x0000000009107d6a llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:11; #1 0x0000000009107f1b PrintStackTraceSignalHandler(void*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:632:1; #2 0x0000000009106743 llvm::sys::RunSignalHandlers() /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Signals.cpp:97:5; #3 0x0000000009108535 SignalHandler(int) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #4 0x00007f1a911a0630 __restore_rt sigaction.c:0:0; #5 0x00000000031e3975 std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> >::__is_long() const /scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/bin/../include/c++/v1/string:1445:22; #6 0x00000000031e3929 std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> >::__get_pointer() const /scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/bin/../include/c++/v1/string:1544:17; #7 0x00000000031e38e5 std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> >::data() const /scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/bin/../incl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377675811:1353,test,test-products,1353,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377675811,1,['test'],['test-products']
Testability,"<details>; <summary>Here's the full data from yesterday:</summary>. ```; ntpl-perf01:/data/ssdext4/jonas/20231113; 00-master; 0:26.13; 0:26.11; 0:26.53; 0:28.10; 0:30.30; 0:34.19; 0:52.34; 2:11.26. 01-limit; 0:25.86; 0:26.09; 0:26.86; 0:28.11; 0:30.24; 0:33.25; 0:53.51; 1:50.53. 02-no-queue; 0:26.04; 0:26.54; 0:26.85; 0:28.03; 0:29.89; 0:33.16; 0:49.10; 1:40.39. ntpl-perf01:/data/hddext4/jonas/20231113; 00-master; 0:27.11; 0:30.00; 0:33.98; 0:42.73; 0:59.20; 1:26.24; 2:29.70; 4:35.79. 01-limit; 0:27.70; 0:29.85; 0:32.01; 0:42.52; 1:00.22; 1:17.40; 2:26.46; 4:37.90. 02-no-queue; 0:31.03; 0:30.05; 0:34.06; 0:42.76; 1:00.26; 1:30.60; 2:29.95; 4:34.74; ```; </details>. ![ssdext4](https://github.com/root-project/root/assets/1613332/6aa4706c-d23e-4ab0-8f94-0f1d7cf66d23); ![hddext4](https://github.com/root-project/root/assets/1613332/be804c42-1f99-4d2c-9f73-f758c01c896a). From this one measurement it looks like no queue would be slower at 32 threads, but this is within experiment uncertainty: Re-running the same benchmark, I measure 1m14s for both versions. I would have to run a lot more sophisticated tests to quantify the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1809726974:1021,benchmark,benchmark,1021,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1809726974,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"= 4.1184. [Nearest point from ref: j=36	x,y=( 4.745, 4.1184) ]	range=12.699; RooCurve::isIdentical[ 37] Y tolerance exceeded ( 0.008638>0.004), x,y=( 4.7875, 4.5633)	ref: y= 4.673. [Nearest point from ref: j=37	x,y=( 4.7875, 4.673) ]	range=12.699; RooCurve::isIdentical[ 38] Y tolerance exceeded ( 0.0092771>0.004), x,y=( 4.83, 5.1366)	ref: y= 5.2544. [Nearest point from ref: j=38	x,y=( 4.83, 5.2544) ]	range=12.699; RooCurve::isIdentical[ 39] Y tolerance exceeded ( 0.010568>0.004), x,y=( 4.915, 6.3583)	ref: y= 6.4925. [Nearest point from ref: j=39	x,y=( 4.915, 6.4925) ]	range=12.699; RooCurve::isIdentical[ 40] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooCurve::isIdentical[ 41] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooUnitTest ERROR: comparison of object RooCurve::nll_Norm[sigma_g2] fails comparison with counterpart in reference RooPlot rf605_plot2; Test 41 : Profile Likelihood operator............................FAILED; Test 42 : NLL error handling.....................................OK; Test 43 : Fit Result functionality...............................OK; Test 44 : Chi^2 fit to X-Y dataset...............................OK; Test 45 : Efficiency operator p.d.f. 1D..........................OK; Test 46 : Efficiency operator p.d.f. 2D..........................OK; Test 47 : Efficiency product operator p.d.f......................OK; Test 48 : Amplitude sum operator p.d.f...........................OK; Test 49 : Linear morph operator p.d.f............................OK; Test 50 : Histogram based p.d.f.s................................OK; Test 51 : Kernel estimation p.d.f.s..............................OK; Test 52 : B Physics p.d.f.s......................................OK; Test 53 : Automated MC studies...................................OK; Test 54 : MC Study with chi^2 calculator.......",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:11044,Test,Test,11044,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['Test'],['Test']
Testability,"=( 4.915, 6.3583)	ref: y= 6.4925. [Nearest point from ref: j=39	x,y=( 4.915, 6.4925) ]	range=12.699; RooCurve::isIdentical[ 40] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooCurve::isIdentical[ 41] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooUnitTest ERROR: comparison of object RooCurve::nll_Norm[sigma_g2] fails comparison with counterpart in reference RooPlot rf605_plot2; Test 41 : Profile Likelihood operator............................FAILED; Test 42 : NLL error handling.....................................OK; Test 43 : Fit Result functionality...............................OK; Test 44 : Chi^2 fit to X-Y dataset...............................OK; Test 45 : Efficiency operator p.d.f. 1D..........................OK; Test 46 : Efficiency operator p.d.f. 2D..........................OK; Test 47 : Efficiency product operator p.d.f......................OK; Test 48 : Amplitude sum operator p.d.f...........................OK; Test 49 : Linear morph operator p.d.f............................OK; Test 50 : Histogram based p.d.f.s................................OK; Test 51 : Kernel estimation p.d.f.s..............................OK; Test 52 : B Physics p.d.f.s......................................OK; Test 53 : Automated MC studies...................................OK; Test 54 : MC Study with chi^2 calculator.........................OK; Test 55 : MC Study with param rand. and Z calc...................OK; Test 56 : MC Studies with aux. obs. constraints..................OK; ******************************************************************; * SYS: Darwin ESLT0149 20.5.0 Darwin Kernel Version 20.5.0: Sat May; * SYS: 11.4 Mac OS X ; ******************************************************************; ******************************************************************; * ROOTMARKS =1199.2 * Root6.25/0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:11462,Test,Test,11462,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['Test'],['Test']
Testability,=1&field1=buildname/string&compare1=65&value1=PR-4058-ROOT-performance-centos7-multicore-default&date=2020-09-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/console).; ### Failing tests:; - [projectroot.roottest.root.roofitstats.roottest_root_roofitstats_RooDataSet_ASCII_out](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root/roofitstats/roottest_root_roofitstats_RooDataSet_ASCII_out/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lz4_compr_level4](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95759/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lz4_compr_level4/); - [projectro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4058#issuecomment-692151790:1221,test,testReport,1221,https://root.cern,https://github.com/root-project/root/pull/4058#issuecomment-692151790,1,['test'],['testReport']
Testability,=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-fedora31-noimt&date=2020-05-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/console).; ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testProxiesAndCategories](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testProxiesAndCategories/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_simple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_simple/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_testIMT](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_testIMT/); - [projectroot.roottest.root.hist.roottest_root_hist_mergeTH2Poly](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roottest.root/hist/roottest_root_hist_mergeTH2Poly/); - [projectroot.roottest.root.io.webfile.roottest_root_io_webfile_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roottest.root.io/webfile/roottest_root_io_webfile_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84339/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-636277740:1155,test,test,1155,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-636277740,1,['test'],['test']
Testability,"=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.52 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ```; 1254/2175 Test #959: tutorial-v7-concurrentfill.cxx ............................................................***Failed 5.91 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Mac 14 ARM. https://github.com/root-project/root/actions/runs/7693740131/job/20963072938?pr=14472. ```; 1373/2419 Test #1052: tutorial-v7-ntuple-ntpl007_mtFill .................................................................***Failed 1.32 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```. ```; 1384/2419 Test #1067: tutorial-v7-concurrentfill.cxx ....................................................................***Failed 1.76 sec; ; Processing /Users/sftnight/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while linking [cling interface function]!; CMake Error at /Users/sftnight/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1915527940:2987,Test,Test,2987,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940,2,['Test'],['Test']
Testability,=2.329 radlen=93.5361 intlen=457.729 index=0; Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]; Material Mat_Fe_G4 A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=169.589 index=4; Element: U Z=92 N=238.000000 A=238.028900 [g/mole]; Material Mat_U_G4 A=238.029 Z=92 rho=18.95 radlen=3.16948 intlen=114.473 index=8; TEST PASSED Si vs. Mat_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_1_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_2_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_3_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mat_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_1_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_2_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_3_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Mat_Si_TGeo vs. Mat_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_1_Si_TGeo vs. Mix_1_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_2_Si_TGeo vs. Mix_2_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_3_Si_TGeo vs. Mix_3_Si_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Fe vs. Mat_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_1_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.028 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_2_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_3_Fe_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mat_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198355345:2380,TEST,TEST,2380,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198355345,1,['TEST'],['TEST']
Testability,=2020-05-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/console).; ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_vecops](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_vecops/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_simple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_simple/); - [projectroot.tree.dataframe.test.pyunittests_dataframe_cache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_cache/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_cache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_cache/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readTotemNtuple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readTotemNtuple/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80832/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://lcgapp-services.cern.ch/root-jenkins/job/root-p,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5562#issuecomment-624826367:1288,test,testReport,1288,https://root.cern,https://github.com/root-project/root/pull/5562#issuecomment-624826367,1,['test'],['testReport']
Testability,=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/console).; ### Failing tests:; - [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot/test/test_stressinterpreter/); - [projectroot.test.test_periodic_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot/test/test_periodic_build/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_import_load_libs](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_import_load_libs/); - [projectroot.math.mathcore.test.gtest_math_mathcore_test_GradientUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_GradientUnit/); - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.cling.other.roottest_cling_other_runfileClose](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.roottest.cling/other/roottest_cling_other_runfileClose/); - [projectroot.roottest.cling.staticinit.ROOT-10426.roottest_cling_staticinit_ROOT_10426_ROOT_10426](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.roottest.cling.staticinit/ROOT-10426/roottest_cling_staticinit_ROOT_10426_ROOT_10426/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83402/testReport/projectroot.roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660#issuecomment-633523818:1256,test,test,1256,https://root.cern,https://github.com/root-project/root/pull/5660#issuecomment-633523818,1,['test'],['test']
Testability,=2020-06-03).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/console).; ### Errors:; - [2020-06-03T11:47:43.379Z] 659/2030 Test #363: tutorial-dataframe-df024_Display ..................................................................***Failed Error regular expression found in output. Regex=[: error:] 9.83 sec ; - [2020-06-03T11:48:02.934Z] 934/2030 Test #688: tutorial-roofit-rf105_funcbinding .................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.98 sec ; - [2020-06-03T11:48:30.701Z] 1112/2030 Test #873: tutorial-tree-hvector .............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.13 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_cont_cnt001_basictseq](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/testReport/projectroot/runtutorials/tutorial_cont_cnt001_basictseq/); - [projectroot.runtutorials.tutorial_dataframe_df024_Display](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/testReport/projectroot/runtutorials/tutorial_dataframe_df024_Display/); - [projectroot.runtutorials.tutorial_fitsio_FITS_tutorial5](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/testReport/projectroot/runtutorials/tutorial_fitsio_FITS_tutorial5/); - [projectroot.runtutorials.tutorial_multicore_mt102_readNtuplesFillHistosAndFit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/testReport/projectroot/runtutorials/tutorial_multicore_mt102_readNtuplesFillHistosAndFit/); - [projectroot.runtutorials.tutorial_roofit_rf105_funcbinding](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84826/testReport/projectroot/runtutorials/tutorial_roofit_rf105_funcbinding/); - [projectroot.runtutorials.tutorial_tree_hvector](https:/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-638150233:1291,test,testReport,1291,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-638150233,1,['test'],['testReport']
Testability,=2020-06-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/console).; ### Errors:; - [2020-06-09T20:06:52.960Z] 925/2033 Test #669: tutorial-multicore-imt001_parBranchProcessing .....................................................***Failed Error regular expression found in output. Regex=[: error:] 1.19 sec ; - [2020-06-09T20:06:54.779Z] 943/2033 Test #694: tutorial-roofit-rf105_funcbinding .................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.99 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_multicore_mt101_fillNtuples](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot/runtutorials/tutorial_multicore_mt101_fillNtuples/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteReadConst](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteReadConst/); - [projectroot.runtutorials.tutorial_fitsio_FITS_tutorial5](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot/runtutorials/tutorial_fitsio_FITS_tutorial5/); - [projectroot.runtutorials.tutorial_multicore_imt001_parBranchProcessing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot/runtutorials/tutorial_multicore_imt001_parBranchProcessing/); - [projectroot.runtutorials.tutorial_roofit_rf105_funcbinding](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot/runtutorials/tutorial_roofit_rf105_funcbinding/); - [projectroot.runtutorials.tutorial_tmva_envelope_classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86185/testReport/projectroot/runtutorials/tutorial_tmva_envelope_classifica,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-641546337:1322,test,testReport,1322,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-641546337,1,['test'],['testReport']
Testability,=2020-06-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/console).; ### Failing tests:; - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_runabstract_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_runabstract_datageneration/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_runoutoforder_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_runoutoforder_datageneration/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tclass_dynamiccast](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tclass_dynamiccast/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tdirectory_attrsyntax](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tdirectory_attrsyntax/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tdirectoryfile_attrsyntax_get](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tdirectoryfile_attrsyntax_get/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tfile_attrsyntax_get_writeobject_open](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87602/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tfile_attrsyntax_get_writeobject_open/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_ttre,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5908#issuecomment-647621180:1230,test,test,1230,https://root.cern,https://github.com/root-project/root/pull/5908#issuecomment-647621180,1,['test'],['test']
Testability,=65&value1=PR-5094-ROOT-performance-centos7-multicore-default&date=2020-06-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df102_NanoAODDimuonAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/runtutorials/tutorial_dataframe_df102_NanoAODDimuonAnalysis/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); - [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/); - [projectroot.runtutorials.tutorial_tmva_envelope_classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/runtutorials/tutorial_tmva_envelope_classification/); - [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/test/test_stressIOPlugins_xroot/); - [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86749/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643463265:1295,test,testReport,1295,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643463265,11,['test'],"['test', 'testReport']"
Testability,=65&value1=PR-5591-ROOT-debian10-i386-cxx14&date=2020-05-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/console).; ### Failing tests:; - [projectroot.core.base.v7.test.gtest_core_base_v7_test_base_exception](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.core.base.v7/test/gtest_core_base_v7_test_base_exception/); - [projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.core.meta/test/gtest_core_meta_test_testStatusBitsChecker/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTHn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTHn/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTF1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTF1/); - [projectroot.math.mathcore.test.gtest_math_mathcore_test_stressMathCoreUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_stressMathCoreUnit/); - [projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.roofit.roofit/test/gtest_roofit_roofit_test_testRooExponential/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testProxiesAndCategories](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82966/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testProxiesAndCategories/); - [projectroot.roofit.roostats.test.gtest_roofit_roostats_test_testHypoTestInvResult](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-631402351:1237,test,testReport,1237,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-631402351,1,['test'],['testReport']
Testability,=65&value1=PR-5591-ROOT-performance-centos7-multicore-default&date=2020-06-11).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/console).; ### Failing tests:; - [projectroot.core.imt.test.gtest_core_imt_test_testImt](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.core.imt/test/gtest_core_imt_test_testImt/); - [projectroot.core.imt.test.gtest_core_imt_test_coreimttestUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.core.imt/test/gtest_core_imt_test_coreimttestUnit/); - [projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.core.meta/test/gtest_core_meta_test_testStatusBitsChecker/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTF1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTF1/); - [projectroot.math.mathcore.test.gtest_math_mathcore_test_stressMathCoreUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_stressMathCoreUnit/); - [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooFormula](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFormula/); - [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot/test/test_stressIOPlugins_xroot/); - [projectroot.tree.tree.test.gtest_tree_tree_test_testTBasket](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86480/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_testTBasket/); - [projectroo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642535996:1256,test,testReport,1256,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642535996,1,['test'],['testReport']
Testability,"========; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f9b7558746c in __libc_waitpid (pid=1463649, stat_loc=stat_loc; entry=0x7ffce938d760, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f9b75504f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f9b78f9a4bc in TUnixSystem::Exec (this=0x1e1e960, shellcmd=0x2b7f4b0 ""X/etc/gdb-backtrace.sh 1463630 1>&2"") at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f9b78f9ad16 in TUnixSystem::StackTrace (this=0x1e1e960) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f9b78f9e5f4 in TUnixSystem::DispatchSignals (this=0x1e1e960, sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3649; #5 0x00007f9b78f96794 in SigHandler (sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:407; #6 0x00007f9b78f9e4fc in sighandler (sig=11) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3620; #7 <signal handler called>; #8 0x0000000000000000 in ?? (); #9 0x00007f9b77f28ed4 in TCanvas::Close (this=0x1e9efd0, option=0x7f9b77f92e51 """") at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:782; #10 0x00007f9b77f28bc5 in TCanvas::Destructor (this=0x1e9efd0) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:697; #11 0x00007f9b77f28969 in TCanvas::~TCanvas (this=0x1e9efd0, __in_chrg=<optimized out>) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:668; #12 0x00007f9b77f28a0a in TCanvas::~TCanvas (this=0x1e9efd0, __in_chrg=<optimized out>) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:669; #13 0x0000000000401293 in main (argc=<optimized out>, argv=<optimized out>) at /Projects/zevis/test/pad4.cxx:16; ===========================================================. ```; master/gcc4.8.5/CentOS7. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6537#issuecomment-702879711:2223,test,test,2223,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-702879711,1,['test'],['test']
Testability,"=============================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. This result is seen on CentOS7/EPEL/root6220/gcc485 as well as on. lxplus with . ```; source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428#issuecomment-698590998:4180,test,test,4180,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998,2,['test'],['test']
Testability,"=====================================; #0 0x00007f69e399b3eb in waitpid () from /lib64/libc.so.6; #1 0x00007f69e38fcbaf in do_system () from /lib64/libc.so.6; #2 0x00007f69e8654040 in TUnixSystem::StackTrace() () from /usr/lib64/root/libCore.so.6.24; #3 0x00007f69e8656515 in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib64/root/libCore.so.6.24; #4 <signal handler called>; #5 0x00007f69db7ba9ff in ROOT::TMetaUtils::TNormalizedCtxtImpl::keepTypedef(cling::LookupHelper const&, char const*, bool) () from /tmp/yuehshun/root_build_pr-9518_with-test/lib/libCling.so; #6 0x00007f69db7bad7e in ROOT::TMetaUtils::TNormalizedCtxtImpl::TNormalizedCtxtImpl(cling::LookupHelper const&) () from /tmp/yuehshun/root_build_pr-9518_with-test/lib/libCling.so; #7 0x00007f69db7bb1e2 in ROOT::TMetaUtils::TNormalizedCtxt::TNormalizedCtxt(cling::LookupHelper const&) () from /tmp/yuehshun/root_build_pr-9518_with-test/lib/libCling.so; #8 0x00007f69db86d9bb in TCling::TCling(char const*, char const*, char const* const*) () from /tmp/yuehshun/root_build_pr-9518_with-test/lib/libCling.so; #9 0x00007f69db86ec20 in CreateInterpreter () from /tmp/yuehshun/root_build_pr-9518_with-test/lib/libCling.so; #10 0x00007f69e8502360 in TROOT::InitInterpreter() () from /usr/lib64/root/libCore.so.6.24; #11 0x00007f69e850270f in ROOT::Internal::GetROOT2() () from /usr/lib64/root/libCore.so.6.24; #12 0x0000000000407c26 in main (); ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f69db7ba9ff in ROOT::TMetaUtils::TNormalizedCtxtImpl::keepTypedef(cling::LookupHelp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1059973386:34563,test,test,34563,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1059973386,1,['test'],['test']
Testability,"=========================================. Second canvas has been created, but I should have gotten seg. fault at this point.Exception in thread Thread-1:; Traceback (most recent call last):; File ""/cvmfs/ilc.desy.de/key4hep/spackages/python/3.9.10/x86_64-centos7-gcc11.2.0-opt/7j5vqgmqodwjxxe2ssf42zxb2uqxi374/lib/python3.9/threading.py"", line 973, in _bootstrap_inner; self.run(); File ""/cvmfs/ilc.desy.de/key4hep/spackages/python/3.9.10/x86_64-centos7-gcc11.2.0-opt/7j5vqgmqodwjxxe2ssf42zxb2uqxi374/lib/python3.9/threading.py"", line 910, in run; self._target(*self._args, **self._kwargs); File ""/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/_application.py"", line 91, in _process_root_events; gSystem.ProcessEvents(); cppyy.ll.SegmentationViolation: bool TSystem::ProcessEvents() =>; SegmentationViolation: segfault in C++; program state was reset; ^CTraceback (most recent call last):; File ""/afs/desy.de/user/d/dudarboh/analysis/misc/test.py"", line 12, in <module>; ; File ""/afs/desy.de/user/d/dudarboh/analysis/misc/test.py"", line 10, in test_function; print(""Second canvas has been created.; KeyboardInterrupt; ```. I think the most important bit is here:. ```batch; ===========================================================; #9 0x00007faebe93656a in TNamed::Streamer (this=0x4991600, R__b=...) at /tmp/madlener/spack-stage/spack-stage-root-6.26.06-dctcyvzmo7xg4dehiooyfl24oevtaids/spack-build-dctcyvz/core/G__Core.cxx:21041; #10 0x00007faea6e9c223 in TCanvas::Resize (this=0x4cf5a50) at /tmp/madlener/spack-stage/spack-stage-root-6.26.06-dctcyvzmo7xg4dehiooyfl24oevtaids/spack-src/graf2d/gpad/src/TCanvas.cxx:1740; #11 0x00007fae9fca7ae8 in TRootCanvas::HandleContainerConfigure (this=0x4c0a660) at /tmp/madlener/spack-stage/spack-stage-root-6.26.06-dctcyvzmo7xg4dehiooyfl24oevtaids/spack-src/gui/gui/src/TRootCanvas.cxx:1789; #12 0x00007fae9fbe4a3d in TGFrame::HandleEvent (this=0x4c5e710, event=0x7faea81b7150) at",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:54218,test,test,54218,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['test'],['test']
Testability,"========================================================; #0 0x0000100000b7e488 in __waitpid_nocancel () from /lib64/libc.so.6; #1 0x0000100000aefd3c in do_system () from /lib64/libc.so.6; #2 0x0000100000a75348 in system () from /lib64/libpthread.so.0; #3 0x0000100000468a30 in TUnixSystem::StackTrace() () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #4 0x00001000004643b4 in TUnixSystem::DispatchSignals(ESignals) () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #5 0x0000100000464490 in SigHandler(ESignals) () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #6 0x000010000045da00 in sighandler(int) () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #7 <signal handler called>; #8 0x0000100000b58414 in __strchr_power7 () from /lib64/libc.so.6; #9 0x000010000028f724 in TDirectory::DecodeNameCycle(char const*, char*, short&, unsigned long) () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #10 0x000010000028f938 in TDirectory::Get(char const*) () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #11 0x0000100000255e74 in TROOT::FindObject(char const*) const () from /scratch/cmsbuild/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-8f15712a8ca095b2e7ecc700ddf4b55e/build/lib/libCore.so; #12 0x0000100007c20610 in ?? (); #13 0x0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-975756188:1618,test,tests,1618,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-975756188,2,['test'],"['testBuildDir', 'tests']"
Testability,=PR-5094-mac1014-python3&date=2020-05-30).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_numbadeclare](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_numbadeclare/); - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_handlers_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_handlers_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_utils_doctest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_utils_doctest/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84333/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-636223509:1235,test,testReport,1235,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-636223509,1,['test'],['testReport']
Testability,=PR-5855-mac1014-python3&date=2020-06-15).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/console).; ### Failing tests:; - [projectroot.roottest.root.io.transient.roottest_root_io_transient_execOld](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.roottest.root.io/transient/roottest_root_io_transient_execOld/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readUniqPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_readUniqPtrColls/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.core.metacling.test.gtest_core_metacling_test_TClingTest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.core.metacling/test/gtest_core_metacling_test_TClingTest/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_perfstattest_libevent_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_perfstattest_libevent_build/); - [projectroot.math.mathmore.test.mathmore_testQuasiRandom](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.math.mathmore/test/mathmore_testQuasiRandom/); - [projectroot.math.mathmore.test.mathmore_testSpecFunc](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86881/testReport/projectroot.math.mathmore/test/mathmore_testSpecFunc/); - [projectroot.math.mathmore.test.mathmore_testStatFunc](https://lcgapp-services.cern.ch/root-jenkins/job/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855#issuecomment-644030325:1224,test,test,1224,https://root.cern,https://github.com/root-project/root/pull/5855#issuecomment-644030325,1,['test'],['test']
Testability,=PR-5884-mac1014-python3&date=2020-06-23).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df002_dataModel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df002_dataModel/); - [projectroot.runtutorials.tutorial_dataframe_df004_cutFlowReport](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df004_cutFlowReport/); - [projectroot.runtutorials.tutorial_dataframe_df005_fillAnyObject](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df005_fillAnyObject/); - [projectroot.runtutorials.tutorial_dataframe_df006_ranges](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df006_ranges/); - [projectroot.runtutorials.tutorial_dataframe_df008_createDataSetFromScratch](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df008_createDataSetFromScratch/); - [projectroot.runtutorials.tutorial_dataframe_df009_FromScratchVSTTree](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df009_FromScratchVSTTree/); - [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df014_CSVDataSource](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87789/testReport/projectroot/runtutorials/tutorial_dataframe_df014_CSVDataSource/); - [proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5884#issuecomment-648392917:1208,test,testReport,1208,https://root.cern,https://github.com/root-project/root/pull/5884#issuecomment-648392917,1,['test'],['testReport']
Testability,=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5237)[See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/console).; ### Failing tests:; - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot/test/test_stressinterpreter/); - [projectroot.test.test_TFormulaTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot/test/test_TFormulaTests/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_root_module](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_root_module/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_tobject_contains](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_tobject_contains/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_array_interface](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74644/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_array_interface/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5237#issuecomment-607300337:1064,test,test,1064,https://root.cern,https://github.com/root-project/root/pull/5237#issuecomment-607300337,1,['test'],['test']
Testability,=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5884-mac1015-cxx17&date=2020-07-15).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/console).; ### Failing tests:; - [projectroot.test.test_check_invalidptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_check_invalidptr/); - [projectroot.test.test_stressvector_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stressvector_interpreted/); - [projectroot.test.test_stresstmva_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stresstmva_interpreted/); - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stressHistFactory_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.test.test_stressroostats_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stressroostats_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_tf_pycallables](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89818/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_tf_pycallables/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_makenumpy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5884#issuecomment-658692760:1174,test,test,1174,https://root.cern,https://github.com/root-project/root/pull/5884#issuecomment-658692760,1,['test'],['test']
Testability,=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6016-mac1014-python3&date=2020-07-09).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/console).; ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_forwardList](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.roottest.root.io/cpp11Containers/roottest_root_io_cpp11Containers_forwardList/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_branchlessForest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_branchlessForest/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rbdt](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_rbdt/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_readClassWithComplex](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_readClassWithComplex/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_readcomplex/); - [projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_unorderedSet](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89441/testReport/projectroot.roottest.root.io/cpp11Containers/roottest_root_io_cpp11Containers_unordere,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6016#issuecomment-656311912:1131,test,test,1131,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656311912,1,['test'],['test']
Testability,=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6126-mac1014-python3&date=2020-08-05).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/console).; ### Failing tests:; - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseWrite_1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_colWiseWrite_1/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDictTXMLFile/); - [projectroot.roottest.root.io.transient.roottest_root_io_transient_execOld](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/transient/roottest_root_io_transient_execOld/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseRead_11](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_colWiseRead_11/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseRead_12](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_colWiseRead_12/); - [projectroot.roottest.root.io.transient.roottest_root_io_transient_execNew](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/91515/testReport/projectroot.roottest.root.io/transient/roottest_root_io_transient_execNew/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6126#issuecomment-669155197:1325,test,testReport,1325,https://root.cern,https://github.com/root-project/root/pull/6126#issuecomment-669155197,4,['test'],['testReport']
Testability,=[: error:] 0.42 sec ; - 50/1921 Test #499: tutorial-hist-fillrandom ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.75 sec ; - 51/1921 Test #367: tutorial-foam-foam_demo ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.90 sec . And 606 more. ### Failing tests:; - [projectroot.roottest.scripts.roottest_scripts_utils](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot.roottest/scripts/roottest_scripts_utils/); - [projectroot.runtutorials.tutorial_unfold_testUnfold5a](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_unfold_testUnfold5a/); - [projectroot.runtutorials.tutorial_tmva_TMVAMultipleBackgroundExample](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_tmva_TMVAMultipleBackgroundExample/); - [projectroot.runtutorials.tutorial_unfold_testUnfold7a](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_unfold_testUnfold7a/); - [projectroot.runtutorials.tutorial_tmva_TMVAClassification](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_tmva_TMVAClassification/); - [projectroot.runtutorials.tutorial_io_importCode](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_io_importCode/); - [projectroot.runtutorials.tutorial_fit_fitslicesy](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_fit_fitslicesy/); - [projectroot.runtutorials.tutorial_roofit_rf502_wspacewrite](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72506/testReport/projectroot/runtutorials/tutorial_roofit_rf502_wspacewrite/); - ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-560292715:2717,test,testReport,2717,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-560292715,1,['test'],['testReport']
Testability,=[: error:] 0.58 sec ; - [2021-10-28T16:56:53.468Z] 719/2198 Test #431: tutorial-dataframe-df101_h1Analysis ...............................................................***Failed Error regular expression found in output. Regex=[: error:] 2.37 sec ; - [2021-10-28T16:57:49.644Z] 1258/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.84 sec ; - [2021-10-28T16:57:53.366Z] 1286/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.39 sec ; - [2021-10-28T16:59:42.271Z] 2165/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.61 sec ; - [2021-10-28T17:02:41.072Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.59 sec ; - [2021-10-28T17:02:43.598Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.66 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testRep,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205#issuecomment-954037232:1674,Test,Test,1674,https://root.cern,https://github.com/root-project/root/pull/9205#issuecomment-954037232,1,['Test'],['Test']
Testability,=[: error:] 0.61 sec ; - [2021-10-28T14:55:22.216Z] 718/2198 Test #431: tutorial-dataframe-df101_h1Analysis ...............................................................***Failed Error regular expression found in output. Regex=[: error:] 1.69 sec ; - [2021-10-28T14:56:19.214Z] 1255/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.90 sec ; - [2021-10-28T14:56:22.849Z] 1279/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.35 sec ; - [2021-10-28T14:58:13.720Z] 2166/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.59 sec ; - [2021-10-28T15:01:08.541Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.55 sec ; - [2021-10-28T15:01:11.814Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 3.02 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testRep,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9204#issuecomment-953937094:1674,Test,Test,1674,https://root.cern,https://github.com/root-project/root/pull/9204#issuecomment-953937094,1,['Test'],['Test']
Testability,=[: error:] 0.67 sec ; - [2022-08-19T16:55:57.049Z] 1220/2403 Test #943: tutorial-roostats-Zbi_Zgamma ......................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.54 sec ; - [2022-08-19T16:56:02.417Z] 1283/2403 Test #1005: tutorial-tmva-TMVA_Higgs_Classification ...........................................................***Failed Error regular expression found in output. Regex=[: error:] 0.41 sec ; - [2022-08-19T16:56:02.676Z] 1286/2403 Test #1008: tutorial-tmva-tmva001_RTensor .....................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.46 sec ; - [2022-08-19T16:56:02.676Z] 1287/2403 Test #1011: tutorial-tmva-tmva004_RStandardScaler .............................................................***Failed Error regular expression found in output. Regex=[: error:] 0.30 sec ; - [2022-08-19T16:56:02.676Z] 1288/2403 Test #1009: tutorial-tmva-tmva002_RDataFrameAsTensor ..........................................................***Failed Error regular expression found in output. Regex=[: error:] 0.48 sec ; - [2022-08-19T16:56:02.676Z] 1289/2403 Test #1012: tutorial-tmva-tmva103_Application .................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.43 sec ; - [2022-08-19T16:56:03.210Z] 1293/2403 Test #1010: tutorial-tmva-tmva003_RReader .....................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.76 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf509_wsinteractive](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/152479/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1220900279:1678,Test,Test,1678,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1220900279,1,['Test'],['Test']
Testability,=[: error:] 0.70 sec ; - [2021-10-28T15:46:59.352Z] 723/2198 Test #431: tutorial-dataframe-df101_h1Analysis ...............................................................***Failed Error regular expression found in output. Regex=[: error:] 2.21 sec ; - [2021-10-28T15:47:55.489Z] 1256/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.97 sec ; - [2021-10-28T15:47:59.417Z] 1283/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.73 sec ; - [2021-10-28T15:49:51.737Z] 2167/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.58 sec ; - [2021-10-28T15:52:45.771Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.59 sec ; - [2021-10-28T15:52:48.292Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.78 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testRep,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205#issuecomment-953982526:1674,Test,Test,1674,https://root.cern,https://github.com/root-project/root/pull/9205#issuecomment-953982526,1,['Test'],['Test']
Testability,=[: error:] 0.74 sec ; - 772/1835 Test #522: tutorial-mlp-mlpRegression ........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.82 sec . ### Warnings:; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3803:17: warning: declaration of ‘f1’ shadows a previous local [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3797:9: warning: shadowed declaration is here [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3807:17: warning: declaration of ‘f2’ shadows a previous local [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3798:9: warning: shadowed declaration is here [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3811:17: warning: declaration of ‘f3’ shadows a previous local [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3799:9: warning: shadowed declaration is here [-Wshadow] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3798:9: warning: unused variable ‘f2’ [-Wunused-variable] ; - /data/sftnight/workspace/root-pullrequests-build/root/hist/hist/src/TH1.cxx:3799:9: warning: unused variable ‘f3’ [-Wunused-variable] . ### Failing tests:; - [projectroot.runtutorials.tutorial_mlp_mlpHiggs](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/60623/testReport/projectroot/runtutorials/tutorial_mlp_mlpHiggs/); - [projectroot.runtutorials.tutorial_mlp_mlpRegression](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/60623/testReport/projectroot/runtutorials/tutorial_mlp_mlpRegression/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/60623/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3906#issuecomment-498733896:1748,test,tests,1748,https://root.cern,https://github.com/root-project/root/pull/3906#issuecomment-498733896,4,['test'],"['testReport', 'tests']"
Testability,=[: error:] 0.84 sec ; - 963/1949 Test #865: tutorial-v7-draw_mt.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.88 sec ; - 964/1949 Test #867: tutorial-v7-draw_subpads.cxx ......................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.89 sec ; - 971/1949 Test #869: tutorial-v7-histops.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 2.74 sec ; - 973/1949 Test #876: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.27 sec . And 2 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_histomodels](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76640/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_histomodels/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_raw](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76640/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_raw/); - [projectroot.tree.ntuple.v7.test.gtest_tree__v7_test_ntuple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76640/testReport/projectroot.tree.ntuple.v7/test/gtest_tree__v7_test_ntuple/); - [projectroot.runtutorials.tutorial_dataframe_df015_LazyDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76640/testReport/projectroot/runtutorials/tutorial_dataframe_df015_LazyDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76640/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579676099:2338,test,testReport,2338,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579676099,1,['test'],['testReport']
Testability,=[: error:] 0.86 sec ; - 963/1949 Test #865: tutorial-v7-draw_mt.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.94 sec ; - 965/1949 Test #867: tutorial-v7-draw_subpads.cxx ......................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.88 sec ; - 971/1949 Test #869: tutorial-v7-histops.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 2.92 sec ; - 974/1949 Test #876: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.38 sec . And 2 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_histomodels](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76778/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_histomodels/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_raw](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76778/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_raw/); - [projectroot.tree.ntuple.v7.test.gtest_tree__v7_test_ntuple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76778/testReport/projectroot.tree.ntuple.v7/test/gtest_tree__v7_test_ntuple/); - [projectroot.runtutorials.tutorial_dataframe_df015_LazyDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76778/testReport/projectroot/runtutorials/tutorial_dataframe_df015_LazyDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76778/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579954419:2338,test,testReport,2338,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579954419,1,['test'],['testReport']
Testability,=[: error:] 1.23 sec ; - 796/1675 Test #715: tutorial-dataframe-tdf002_dataModel-py ............................................................***Failed Error regular expression found in output. Regex=[: error:] 0.92 sec . ### Failing tests:; - [projectroot.test.test_TFormulaTests](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/test/test_TFormulaTests/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_nodes](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_nodes/); - [projectroot.runtutorials.tutorial_dataframe_tdf002_dataModel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_dataframe_tdf002_dataModel/); - [projectroot.runtutorials.tutorial_dataframe_tdf013_InspectAnalysis](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_dataframe_tdf013_InspectAnalysis/); - [projectroot.runtutorials.tutorial_dataframe_tdf017_vecOpsHEP](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_dataframe_tdf017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_math_quasirandom](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_math_quasirandom/); - [projectroot.runtutorials.tutorial_multicore_mtbb201_parallelHistoFill](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_multicore_mtbb201_parallelHistoFill/); - [projectroot.runtutorials.tutorial_roostats_Zbi_Zgamma](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/projectroot/runtutorials/tutorial_roostats_Zbi_Zgamma/); - [projectroot.runtutorials.tutorial_roostats_rs_numbercountingutils](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20889/testReport/proj,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-378399783:2493,test,testReport,2493,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-378399783,1,['test'],['testReport']
Testability,=[: error:] 1.25 sec ; - 961/1948 Test #863: tutorial-v7-draw.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.32 sec ; - 962/1948 Test #866: tutorial-v7-draw_rh1.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.85 sec ; - 963/1948 Test #865: tutorial-v7-draw_mt.cxx ...........................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.93 sec ; - 965/1948 Test #867: tutorial-v7-draw_subpads.cxx ......................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.94 sec . And 4 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_histomodels](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76608/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_histomodels/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_raw](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76608/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_raw/); - [projectroot.tree.ntuple.v7.test.gtest_tree__v7_test_ntuple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76608/testReport/projectroot.tree.ntuple.v7/test/gtest_tree__v7_test_ntuple/); - [projectroot.runtutorials.tutorial_dataframe_df015_LazyDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76608/testReport/projectroot/runtutorials/tutorial_dataframe_df015_LazyDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76608/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource/); - [projectroot.runtutorials.tutorial_dataframe_df,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579471787:2338,test,testReport,2338,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579471787,1,['test'],['testReport']
Testability,=[: error:] 1.69 sec ; - [2021-10-28T14:56:19.214Z] 1255/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.90 sec ; - [2021-10-28T14:56:22.849Z] 1279/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.35 sec ; - [2021-10-28T14:58:13.720Z] 2166/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.59 sec ; - [2021-10-28T15:01:08.541Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.55 sec ; - [2021-10-28T15:01:11.814Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 3.02 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128466/testReport/projec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9204#issuecomment-953937094:1904,Test,Test,1904,https://root.cern,https://github.com/root-project/root/pull/9204#issuecomment-953937094,1,['Test'],['Test']
Testability,=[: error:] 18.14 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_io_loopdir11](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_io_loopdir11/); - [projectroot.runtutorials.tutorial_roofit_rf509_wsinteractive_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive_py/); - [projectroot.runtutorials.tutorial_roofit_rf513_wsfactory_tools_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_roofit_rf513_wsfactory_tools_py/); - [projectroot.runtutorials.tutorial_roofit_rf903_numintcache_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_roofit_rf903_numintcache_py/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_roostats_StandardFrequentistDiscovery](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_roostats_StandardFrequentistDiscovery/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/77172/testReport/projectroot/runtutorials/tutorial_roostats_TestNonCentral/); - [projectroot.runtutorials.tutorial_roofit_rf511_wsfactory_basic_py](https://epsft-jenkins.cern.ch/job/ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-581623029:1334,test,testReport,1334,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-581623029,1,['test'],['testReport']
Testability,=[: error:] 2.21 sec ; - [2021-10-28T15:47:55.489Z] 1256/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.97 sec ; - [2021-10-28T15:47:59.417Z] 1283/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.73 sec ; - [2021-10-28T15:49:51.737Z] 2167/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.58 sec ; - [2021-10-28T15:52:45.771Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.59 sec ; - [2021-10-28T15:52:48.292Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.78 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128473/testReport/projec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205#issuecomment-953982526:1904,Test,Test,1904,https://root.cern,https://github.com/root-project/root/pull/9205#issuecomment-953982526,1,['Test'],['Test']
Testability,=[: error:] 2.37 sec ; - [2021-10-28T16:57:49.644Z] 1258/2198 Test #999: tutorial-dataframe-df016_vecOps-py ................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.84 sec ; - [2021-10-28T16:57:53.366Z] 1286/2198 Test #990: tutorial-dataframe-df002_dataModel-py .............................................................***Failed Error regular expression found in output. Regex=[: error:] 6.39 sec ; - [2021-10-28T16:59:42.271Z] 2165/2198 Test #433: tutorial-dataframe-df103_NanoAODHiggsAnalysis .....................................................***Failed Error regular expression found in output. Regex=[: error:] 0.61 sec ; - [2021-10-28T17:02:41.072Z] 2182/2198 Test #1011: tutorial-dataframe-df103_NanoAODHiggsAnalysis-py ..................................................***Failed Error regular expression found in output. Regex=[: error:] 1.59 sec ; - [2021-10-28T17:02:43.598Z] 2183/2198 Test #1012: tutorial-dataframe-df104_HiggsToTwoPhotons-py .....................................................***Failed Error regular expression found in output. Regex=[: error:] 2.66 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projectroot/runtutorials/tutorial_dataframe_df016_vecOps/); - [projectroot.runtutorials.tutorial_dataframe_df017_vecOpsHEP](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projectroot/runtutorials/tutorial_dataframe_df017_vecOpsHEP/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df016_vecOps_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128487/testReport/projec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9205#issuecomment-954037232:1904,Test,Test,1904,https://root.cern,https://github.com/root-project/root/pull/9205#issuecomment-954037232,1,['Test'],['Test']
Testability,=[: error:] 6.50 sec ; - [2020-06-10T22:18:29.731Z] 494/2084 Test #375: tutorial-dataframe-df007_snapshot .................................................................***Failed Error regular expression found in output. Regex=[: error:] 7.59 sec ; - [2020-06-10T22:18:31.406Z] 497/2084 Test #378: tutorial-dataframe-df010_trivialDataSource ........................................................***Failed Error regular expression found in output. Regex=[: error:] 7.68 sec ; - [2020-06-10T22:18:33.817Z] 500/2084 Test #386: tutorial-dataframe-df020_helpers ..................................................................***Failed Error regular expression found in output. Regex=[: error:] 3.30 sec ; - [2020-06-10T22:18:34.603Z] 501/2084 Test #382: tutorial-dataframe-df016_vecOps ...................................................................***Failed Error regular expression found in output. Regex=[: error:] 5.64 sec . And 10 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_regression/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_simple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_simple/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_helpers](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_helpers/); - [projectroot.tree.ntuple.v7.test.gtest_tree_ntuple_v7_test_ntuple_rdf](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86346/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_rdf/); - [projectroot.runtutorials.tutorial_cont_cnt00,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-642304262:2756,test,test,2756,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-642304262,1,['test'],['test']
Testability,=buildname/string&compare1=65&value1=PR-4058-ROOT-debian10-i386-cxx14&date=2020-09-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lz4_compr_level4](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lz4_compr_level4/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_zlib_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95758/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_zlib_compr_level9_datagenerat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4058#issuecomment-692162794:1225,test,testReport,1225,https://root.cern,https://github.com/root-project/root/pull/4058#issuecomment-692162794,1,['test'],['testReport']
Testability,=buildname/string&compare1=65&value1=PR-4058-ROOT-ubuntu16-nortcxxmod&date=2020-09-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/console).; ### Failing tests:; - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_default_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_default_compr_level9_datageneration/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplex2_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplex2_default_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_default_compr_deflevel](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_default_compr_deflevel/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lzma_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lzma_compr_level9/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simplek_lz4_compr_level4](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplek_lz4_compr_level4/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_simple_zlib_compr_level9_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/95762/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_zlib_compr_level9_datagenerat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4058#issuecomment-692151436:1212,test,testReport,1212,https://root.cern,https://github.com/root-project/root/pull/4058#issuecomment-692151436,1,['test'],['testReport']
Testability,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel.; Also now it includes interactive features testing - also inside `node.js`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13644#issuecomment-1724880543:3,test,test,3,https://root.cern,https://github.com/root-project/root/pull/13644#issuecomment-1724880543,3,['test'],"['test', 'testing']"
Testability,"> ## Test Results; > ; >        3 files         3 suites   10h 45m 27s [stopwatch](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols) 2 418 tests 2 385 [heavy_check_mark](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols)   2 [zzz](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols) 31 [x](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols) 7 160 runs  7 096 [heavy_check_mark](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols) 12 [zzz](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols) 52 [x](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v1.20/README.md#the-symbols); > ; > For more details on these failures, see [this check](https://github.com/root-project/root/runs/11884313691).; > ; > Results for commit [279a1db](https://github.com/root-project/root/commit/279a1db5b2fd0bd186cb6db8cd8a1562b808f370). This seems totally unrelated. Also, it looks like something got stuck for the `(ubuntu20, Release)` build, @olemorud.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12466#issuecomment-1462410563:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/12466#issuecomment-1462410563,9,"['Test', 'test']","['Test', 'test-result-action', 'tests']"
Testability,"> ## Test Results; > ; >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols); > ; > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027).; > ; > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13804#issuecomment-1746936913:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/13804#issuecomment-1746936913,9,"['Test', 'test']","['Test', 'test-result-action', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.roottest.cling.dict.ROOT-7879.roottest_cling_dict_ROOT_7879_skipLinkDefDict](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.cling.dict/ROOT-7879/roottest_cling_dict_ROOT_7879_skipLinkDefDict/); > ; > * [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_stltest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stltest/); > ; > * [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); > ; > * [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); > ; > * [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_customDeleteError](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_customDeleteError/); > ; > * [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDict2TFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDict2TFile/); > ; > * [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genreflex_ioreadrulesfailonwarning](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143298/testReport/projectroot.roottest.root.meta/genreflex/roottest_root_meta_genreflex_ioreadrulesfailonwarning/); > ; > * [projectroot.roottest.root.meta.genreflex.roottest_root_meta_genrefle,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10457#issuecomment-1110847529:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/10457#issuecomment-1110847529,5,['test'],"['testReport', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); > ; > * [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); > ; > * [projectroot.roottest.python.regression.roottest_python_regression_regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_CNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_CNN_Classification/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_RNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139475/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_RNN_Classification/). These failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10120#issuecomment-1068283475:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/10120#issuecomment-1068283475,7,['test'],"['testReport', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.roottest.python.distrdf.roottest_python_distrdf_spark_test_reducer_merge](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/127736/testReport/projectroot.roottest.python/distrdf/roottest_python_distrdf_spark_test_reducer_merge/). This failure is totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158#issuecomment-948796747:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/9158#issuecomment-948796747,2,['test'],"['testReport', 'tests']"
Testability,"> ### Failing tests:; > ; > * [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2_WILL_FAIL](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/174145/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2_WILL_FAIL/). Totally unrelated. Merging PR. However, the test was expected to fail on Windows, but it passed (?) @bellenot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12785#issuecomment-1538268852:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/12785#issuecomment-1538268852,3,['test'],"['test', 'testReport', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_dataframe_distrdf001_spark_connection_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_CNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_CNN_Classification/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_RNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_RNN_Classification/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_thread_local_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_thread_local_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_ROOT_kernel_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_tpython_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136357/testReport,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9789#issuecomment-1028714777:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/9789#issuecomment-1028714777,5,['test'],"['testReport', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_io_float16](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/138489/testReport/projectroot/runtutorials/tutorial_io_float16/); > ; > * [projectroot.runtutorials.tutorial_legacy_mlp_mlpRegression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/138489/testReport/projectroot/runtutorials/tutorial_legacy_mlp_mlpRegression/). These failures seem totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9998#issuecomment-1055337681:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/9998#issuecomment-1055337681,3,['test'],"['testReport', 'tests']"
Testability,> ### Failing tests:; > ; > * [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_definepersample](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129185/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_definepersample/); > ; > * [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_samplecallback](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/129185/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_samplecallback/). These failures are (obviously) unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9245#issuecomment-961173852:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/9245#issuecomment-961173852,7,['test'],"['test', 'testReport', 'tests']"
Testability,"> (And btw it's GCC 12, I'm not remembering seeing this issue with GCC 11 as the commit log says?). Nope, the problem being fixed is seen for gcc11 as the commit message points out: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-centos9,SPEC=noimt,V=master/3429/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1429228775:88,log,log,88,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429228775,1,['log'],['log']
Testability,"> (but slightly more performant in principle, as it doesn't have to check the min/max/scale factor for each element - they are all the same within a call to Pack/Unpack). Isn't it the already same in the in `Read/WriteFastArrayDouble32` ? (Furthermore for reading the common case is to call `TBufferFile::ReadWithFactor/ReadWithNbits`). > The implementation is, logically speaking, exactly the same. Thank you for clarifying :). > As a last divergence point, Double32_t silently clamps the values that fall our of range, while Real32Quant will throw in that situation. (If not already done) this should be called out in the doc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390#issuecomment-2361871567:362,log,logically,362,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2361871567,1,['log'],['logically']
Testability,"> (cough cough) - this might be pre-existing before the llvm13 upgrade. Have some 💧 :) no ""might"" about this T_T; http://cdash.cern.ch/testDetails.php?test=14519774&build=210942",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11921#issuecomment-1357864265:135,test,testDetails,135,https://root.cern,https://github.com/root-project/root/pull/11921#issuecomment-1357864265,2,['test'],"['test', 'testDetails']"
Testability,"> (slight correction to what I said before: Since #10289 LLVM is built _with_ RTTI in `master`. This is different from released versions of 6.26 and earlier, so keep in mind while investigating...); > ; > > Note the `-Wl,--no-undefined` linker option, added by default on TW for all builds.; > ; > This option is also a ROOT default for shared libraries. I tested adding it to `CMAKE_EXE_LINKER_FLAGS` for executable as well and it doesn't change anything. (not sure if it should, after all all symbols must be resolved when linking an executable, no?). There are several occasions when symbol resolving may happen:. 1. When linking libCling.so - whe shared library is linked with `--no-unresolved`, but also with `--unresolved-symbols=ignore-in-object-files` -> missing symbols are ignored; ```; [ 1473s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/core/metacling/src && /usr/bin/cmake -E cmake_link_script CMakeFiles/Cling.dir/link.txt --verbose=1; [ 1473s] /usr/bin/c++ -fPIC -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG -Wl,--as-needed -Wl,--no-undefined -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.26 -o ../../../lib/libCling.so.6.26.06 ../../clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o ../../clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o ../../dictgen/CMakeFiles/Dictgen.dir/src/Selecti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1207946705:357,test,tested,357,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1207946705,1,['test'],['tested']
Testability,"> (you can also run the test locally if you compile ROOT with your changes). I'm having some trouble with that. What is the sourcedir? When I point it towards the CMakeLists.txt file in the test folder, it thows me an error. Is this the right folder?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-778185042:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-778185042,2,['test'],['test']
Testability,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem; > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`.; > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > ; > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1621492471:285,assert,assertions,285,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621492471,6,['assert'],"['assert', 'assertion', 'assertions']"
Testability,"> * Test skipping non-persistent members. Done. See check in test `ntuple_types.cxx`, line 155. > * Test the most complicated (artificial) example for a class hierarchy, e.g. diamond inheritance and members that have types of the inherited classes. Done. Also, I have added a test for types inheriting from a templated class, based on the mails exchanged with Marcin Nowak.; ; > * Trying to read/write polymorphic classes: perhaps we can detect with TClass if we have a derived class in our hands. In which case... I guess we want to warn? Or silently slice?. Currently, we throw -see test `ntuple_types.cxx:165`-. For a future PR, maybe we can change this behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8552#issuecomment-927349101:4,Test,Test,4,https://root.cern,https://github.com/root-project/root/pull/8552#issuecomment-927349101,5,"['Test', 'test']","['Test', 'test']"
Testability,"> * There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?. Just pushed a commit that tries to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14813#issuecomment-2039351047:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2039351047,2,['test'],['test']
Testability,> * [projectroot.runtutorials.tutorial_dataframe_df010_trivialDataSource_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_dataframe_df010_trivialDataSource_py/); > ; > * [projectroot.runtutorials.tutorial_dataframe_distrdf001_spark_connection_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/); > ; > * [projectroot.runtutorials.tutorial_dataframe_distrdf002_dask_connection_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf002_dask_connection_py/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_Higgs_Classification_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_Higgs_Classification_py/); > ; > * [projectroot.bindings.experimental.distrdf.test.pyunittests_distrdf_unit_test_operation](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.experimental.distrdf/test/pyunittests_distrdf_unit_test_operation/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_makenumpy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_makenumpy/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_histo_profile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_histo_profile/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rtensor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12703#issuecomment-1523326456:157,test,testReport,157,https://root.cern,https://github.com/root-project/root/pull/12703#issuecomment-1523326456,4,['test'],['testReport']
Testability,> * [projectroot.runtutorials.tutorial_multicore_mp001_fillHistos](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126450/testReport/projectroot/runtutorials/tutorial_multicore_mp001_fillHistos/); > ; > * [projectroot.runtutorials.tutorial_multicore_mtbb001_fillHistos](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126450/testReport/projectroot/runtutorials/tutorial_multicore_mtbb001_fillHistos/). These failures are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9033#issuecomment-928992915:147,test,testReport,147,https://root.cern,https://github.com/root-project/root/pull/9033#issuecomment-928992915,2,['test'],['testReport']
Testability,> * [projectroot.tree.tree.test.gtest_tree_tree_test_entrylist_addsublist](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/131742/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_addsublist/); > ; > * [projectroot.tree.tree.test.gtest_tree_tree_test_chain_setentrylist](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/131742/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_chain_setentrylist/). These failures are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9313#issuecomment-986271886:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/9313#issuecomment-986271886,6,['test'],"['test', 'testReport']"
Testability,"> * why does Linux seem to be ok?. See my previous reply (I will debug myself on Linux next week to give you the correct answer). > * why is `clustersInThisFileSize` zero as per Bertrand's last comment? that number should correspond to the TTree clusters in a given file, and should always be at least 1. Because, as already explained, the `TThreadExecutor` is created **after** `Internal::MakeClusters`, which is calling `ROOT::GetImplicitMTPoolSize()`, which is calling `ROOT::Internal::TPoolManager::GetPoolSize()`, and since the constructor of ROOT::Internal::TPoolManager has not yet been created (by the `TThreadExecutor` constructor), its `fgPoolSize` default value is 0: `UInt_t TPoolManager::fgPoolSize = 0;`; The purpose of this patch is to move the constructor of `TThreadExecutor` **before** the use of `ROOT::Internal::TPoolManager::GetPoolSize()`. I'm a but puzzled about all the discussions around this one line change, and I don't know how to explain better such an easy and obvious issue. Feel free to do anything about it, I know how to fix it on Windows, and I can still disable the failing test if you (I mean all of you) can't find a proper solution to this issue.; And [#4947](https://github.com/root-project/root/pull/4947) was simply another way of initializing the `TPoolManager` before using it.; And sorry if I'm not clear enough about this issue, but it becomes obvious simply by looking at the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4953#issuecomment-583759945:1110,test,test,1110,https://root.cern,https://github.com/root-project/root/pull/4953#issuecomment-583759945,2,['test'],['test']
Testability,"> . BTW, I have a question: how can I run the cling tests on Windows (if possible at all)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9888#issuecomment-1066788292:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/9888#issuecomment-1066788292,1,['test'],['tests']
Testability,"> . Could we put something like the following in RMakeUnique.hxx instead?. Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1203#issuecomment-337983024:160,test,test,160,https://root.cern,https://github.com/root-project/root/pull/1203#issuecomment-337983024,1,['test'],['test']
Testability,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some?. Pity! I get an error with; ```; auto lambda0 = [](){return #jets; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6700#issuecomment-729067524:134,test,tests,134,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-729067524,1,['test'],['tests']
Testability,"> 1261 - tutorial-rcanvas-df104-py (Failed). This failure seems to be linked to memory limitation. On my node there is 48 cores but the `ulimit` is set to 16Gb. When reducing the number of cores down to 35 cores then the test starts to sometimes complete sometimes fails.; It works all the time for 32 cores or less. The error output sometimes contains:; ```; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; RDataFrame::Run: event loop was interrupted; ```; and always contains:; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tutorials/rcanvas/df104.py"", line 89, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad_alloc: std::bad_alloc; ```. **And indeed, the process easily reaches 16Gb. With 32 cores, the peak is 15Gb.**. This is opened as its own issue: https://github.com/root-project/root/issues/16252",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242#issuecomment-2292400234:221,test,test,221,https://root.cern,https://github.com/root-project/root/issues/16242#issuecomment-2292400234,1,['test'],['test']
Testability,"> ; > Comments?. This looks awesome!. > A few caveats:; > ; > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. > ; > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > ; > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > ; > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1716088321:672,test,test,672,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1716088321,2,['test'],['test']
Testability,"> ; > Maybe an error message if `BASH_...` isn't available would be enough?. I started doing this, but it's not possible. The reason is that BASH is not defined either for zsh, so I would be breaking the code already in place for zsh then. The only way is to get somehow the shell name. > I'm not sure whether all shells that currently support `thisroot.sh` will continue to be happy. Maybe a CI test could be run to test them all on mac and linux, but I have no idea how to implement it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10332#issuecomment-1089327209:396,test,test,396,https://root.cern,https://github.com/root-project/root/pull/10332#issuecomment-1089327209,2,['test'],['test']
Testability,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore.; > ; > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM?. > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line.; > ; > That was probably relevant for the PCH and rootmaps?. Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1621540477:71,assert,assertions,71,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621540477,4,['assert'],"['assert', 'assertion', 'assertions']"
Testability,"> > ; > ; > BTW, I have a question: how can I run the cling tests on Windows (if possible at all)?. We have an option in ROOT which is `-Dclingtest=On` that adds the cling tests in CTest. Probably needs some tweaks to work on Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9888#issuecomment-1067268061:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/9888#issuecomment-1067268061,2,['test'],['tests']
Testability,"> > > ; > > ; > > ; > > BTW, I have a question: how can I run the cling tests on Windows (if possible at all)?; > ; > We have an option in ROOT which is `-Dclingtest=On` that adds the cling tests in CTest. Probably needs some tweaks to work on Windows. OK, thanks Vassil, I'll give it a try",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9888#issuecomment-1067676040:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/9888#issuecomment-1067676040,2,['test'],['tests']
Testability,"> > > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > > ; > > > > ; > > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > > ```; > > > > Singularity> ./cling -xcuda; > > > > warning: argument unused during compilation: '-c'; > > > > ; > > > > ****************** CLING ******************; > > > > * Type C++ code and press enter to run it *; > > > > * Type .q to exit *; > > > > *******************************************; > > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > > #10 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-777250984:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984,6,['test'],"['test', 'tested']"
Testability,"> > > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > > ; > > > ; > > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > > ```; > > > Singularity> ./cling -xcuda; > > > warning: argument unused during compilation: '-c'; > > > ; > > > ****************** CLING ******************; > > > * Type C++ code and press enter to run it *; > > > * Type .q to exit *; > > > *******************************************; > > > [cling]$ __global__ void g(int * out){ *out=43;}; > > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-777052629:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777052629,6,['test'],"['test', 'tested']"
Testability,"> > > > We should understand why there are still DeferredDeclsToEmit;; > > > > Do we understand why there are still some left?; > > > > I think we do. When committing a transaction CodeGen requires some definition which is present in another module which then eagerly deserializes declarations.; > ; > And is that the intent or is that a problem? Either, should we update the ""call to action"" at the end of the commit message?. The problem is that the intent fails due to the fact we have an assert on having `DeferredDeclsToEmit`. I think the commit message captures pretty much what I want to say at that point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398#issuecomment-810371400:492,assert,assert,492,https://root.cern,https://github.com/root-project/root/pull/7398#issuecomment-810371400,1,['assert'],['assert']
Testability,"> > > > Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me.; > > > ; > > > ; > > > Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic.; > > ; > > ; > > Got it. Thanks.; > > @vgvassilev It turns out that the reason for so many failures is we have an ExternalASTSource in root out of the llvm tree, so we don't update that. [ChuanqiXu9@570fd78](https://github.com/ChuanqiXu9/root/commit/570fd783875671d346c7cdc0d98a8a9afcad05a4); > > There is also another bug about the order to remove iterators: [ChuanqiXu9@7fb4aa9](https://github.com/ChuanqiXu9/root/commit/7fb4aa9d11c6966b54745009187928dd13cec566); > > Now I can build the project in https://github.com/ChuanqiXu9/root/commits/chuanqi_pr83233/. I only run `make` instead of `ctest`. But it may be fine as we said the logic happens at build time actually. I think you can push the 2 commits to the branch to test it with the CI again.; > ; > @ChuanqiXu9, that is really awesome! Apologies for the oversight of the ExternalASTSource. I've pushed these changes and let's see what happens. @ChuanqiXu9, the tests look good on our side. I will compare performance but I think we should bring these changes to the upstream pull request and ask the google folks to test the scalability of the patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1978559674:404,log,logic,404,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1978559674,5,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"> > > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > > ; > > ; > > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > > ```; > > Singularity> ./cling -xcuda; > > warning: argument unused during compilation: '-c'; > > ; > > ****************** CLING ******************; > > * Type C++ code and press enter to run it *; > > * Type .q to exit *; > > *******************************************; > > [cling]$ __global__ void g(int * out){ *out=43;}; > > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-776591942:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942,6,['test'],"['test', 'tested']"
Testability,"> > > @hahnjo, is there a way to move forward without losing progress we made for windows?; > > ; > > I don't see one, please see my very lengthy and detailed commit message of why I think it's not going to work like that.; > ; > Would it not help if we annotate all dependencies by hand all of the dependencies that cannot work with modules?. Yes, this is the direction I've also been thinking about. But it's certainly not an easy change of a couple of lines, and I really would like to fix the currently broken state first. To be clear, this is currently *blocking* me from making changes in ROOT / Cling, or at least making it unnecessarily hard because I always have to either deal with 20-ish unrelated test failures or base my branches on these fixes. It's really painful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561#issuecomment-1491725885:709,test,test,709,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1491725885,2,['test'],['test']
Testability,"> > > @junaire, can you test if this solves also your problems?; > > ; > > ; > > I haven't tested this, but @hahnjo said this almost fixes my issue in #10910, only `roottest-root-html-runMakeIndex` needs some tweaking for the generated header file. But I think this may not be a full ""workaround"" as it doesn't handle the root issue. In fact, Jonas did mention this doesn't help with the problems about `TSeq`, which means we still have to preload `ROOTDataFrame`.; > > I also made my own fix ([4757b60](https://github.com/root-project/root/commit/4757b60656381a668b24a0ea0dbf6b77aff71e14)) and I feel like it may be a better direction to work on (even though it also failed to fix `TSeq`...); > ; > FWIW I pushed a new commit to #10910 and it looks like surprisingly fixes all issues even without preloading `ROOTDataFrame`! But now let's see if Jenkins is happy or not. Fingers crossed :). OK, so we still got some failures but I can't see it locally. I'll try to reproduce them, but I feel like that's the right direction. CC @hahnjo @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272460457:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272460457,2,['test'],"['test', 'tested']"
Testability,"> > > @smuzaffar, can we run this PR against cmssw?; > > ; > > ; > > CMSSW tests are running via [cms-sw#198](https://github.com/cms-sw/root/pull/198) (note that cmssw tests are running for non-CXXMODULES builds); > ; > @smuzaffar, can you interpret the results?. cmssw tests looks good. unit test failure is not related to root's change",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1925702097:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1925702097,4,['test'],"['test', 'tests']"
Testability,"> > > Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/console).; > > > ### Failing tests:; > > > ```; > > > * [projectroot.math.mathcore.test.gtest_math_mathcore_test_CladDerivatorTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_CladDerivatorTests/); > > > ```; > > ; > > ; > > @arora-vidushi, the test fails on windows with:; > > ```; > > [ RUN ] CladDerivator.logx6; > > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(208): error: Expected equality of these values:; > > -0.43429448190325176; > > value->GetAsDouble(); > > Which is: 4.4274168156280442e+20; > > [ FAILED ] CladDerivator.logx6 (13 ms); > > [ RUN ] CladDerivator.minimum; > > [ OK ] CladDerivator.minimum (24 ms); > > [ RUN ] CladDerivator.erf1; > > [ OK ] CladDerivator.erf1 (31 ms); > > [ RUN ] CladDerivator.erf2; > > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(245): error: Expected equality of these values:; > > -0.83021499484118955; > > value->GetAsDouble(); > > Which is: -1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erf2 (18 ms); > > [ RUN ] CladDerivator.erfc1; > > [ OK ] CladDerivator.erfc1 (10 ms); > > [ RUN ] CladDerivator.erfc2; > > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > > 0.83021499484118955; > > value->GetAsDouble(); > > Which is: 1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erfc2 (13 ms); > > ```; > ; > @arora-vidushi, here is some more debug output from the windows machine:; > ; > ```; > C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1402636544:228,test,tests,228,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1402636544,6,['test'],"['test', 'testReport', 'tests']"
Testability,"> > > I tested a bit on my end, I guess the `llvm::StringRef` conversion errors are the following:; > > > [...]; > > ; > > ; > > I do not understand why. Calling `.str()` is often too expensive but we may need to do it here.; > ; > I think the problem is that `const char*` is convertible to `std::string_view` and `llvm::StringRef` while the latter two are convertible to each other. So the compiler in principle can do both conversions and its ambiguous which one should be preferred. Using `llvm::StringRef` in the three cases explicitly fixes the build for me:; > ; > ```diff; > diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx; > index 0900c4d62a..b288aef228 100644; > --- a/core/metacling/src/TCling.cxx; > +++ b/core/metacling/src/TCling.cxx; > @@ -3164,10 +3164,11 @@ Bool_t TCling::IsLoaded(const char* filename) const; > llvm::StringRef(filesStr).split(files, ""\n"");; > ; > std::set<std::string> fileMap;; > + llvm::StringRef file_name_ref(file_name);; > // Fill fileMap; return early on exact match.; > for (llvm::SmallVector<llvm::StringRef, 100>::const_iterator; > iF = files.begin(), iE = files.end(); iF != iE; ++iF) {; > - if ((*iF) == file_name.c_str()) return kTRUE; // exact match; > + if ((*iF) == file_name_ref) return kTRUE; // exact match; > fileMap.insert(iF->str());; > }; > ; > @@ -7116,9 +7117,12 @@ static std::string GetSharedLibImmediateDepsSlow(std::string lib,; > // FIXME: It is unclear whether we can ignore all weak undefined; > // symbols:; > // http://lists.llvm.org/pipermail/llvm-dev/2017-October/118177.html; > - if (SymName == ""_Jv_RegisterClasses"" ||; > - SymName == ""_ITM_deregisterTMCloneTable"" ||; > - SymName == ""_ITM_registerTMCloneTable""); > + static constexpr llvm::StringRef RegisterClasses(""_Jv_RegisterClasses"");; > + static constexpr llvm::StringRef RegisterCloneTable(""_ITM_registerTMCloneTable"");; > + static constexpr llvm::StringRef DeregisterCloneTable(""_ITM_deregisterTMCloneTable"");; > + if (SymName == RegisterClas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1089931729:8,test,tested,8,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1089931729,1,['test'],['tested']
Testability,"> > > Let’s wait for this to land upstream.; > > ; > > ; > > Is this a requirement? This is finally fixing test crashes with the most recent GCC and C++20, I'd rather have this in...; > ; > Do we have a open PR against the llvm mainstream at least?. Yes, https://github.com/llvm/llvm-project/pull/69076, as linked from the LLVM issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13859#issuecomment-1764675615:107,test,test,107,https://root.cern,https://github.com/root-project/root/pull/13859#issuecomment-1764675615,1,['test'],['test']
Testability,"> > > Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > > > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred.; > > ; > > ; > > You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well.; > ; > Unfortunately, the only flags I've passed are `-std=c++17`, `-I`, `-L`, and some `-l`. The full command is shown in the readme. Should this work automatically or do I need to do more to expose these symbols to clang?. Can you add to cling -fno-rtti? I don’t think this can be done automatically it is not automatic for compilers as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193095859:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193095859,6,['test'],"['test', 'test-case']"
Testability,"> > > Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me.; > > ; > > ; > > Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic.; > ; > Got it. Thanks.; > ; > @vgvassilev It turns out that the reason for so many failures is we have an ExternalASTSource in root out of the llvm tree, so we don't update that. [ChuanqiXu9@570fd78](https://github.com/ChuanqiXu9/root/commit/570fd783875671d346c7cdc0d98a8a9afcad05a4); > ; > There is also another bug about the order to remove iterators: [ChuanqiXu9@7fb4aa9](https://github.com/ChuanqiXu9/root/commit/7fb4aa9d11c6966b54745009187928dd13cec566); > ; > Now I can build the project in https://github.com/ChuanqiXu9/root/commits/chuanqi_pr83233/. I only run `make` instead of `ctest`. But it may be fine as we said the logic happens at build time actually. I think you can push the 2 commits to the branch to test it with the CI again. @ChuanqiXu9, that is really awesome! Apologies for the oversight of the ExternalASTSource. I've pushed these changes and let's see what happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1978147182:396,log,logic,396,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1978147182,3,"['log', 'test']","['logic', 'test']"
Testability,"> > > cms tests passed for production arch (el8_amd64_gcc12) and powerpc; > > ; > > Thanks! And I understand correctly it solves some problems that were there on ppc64le before?; > ; > @hahnjo , most of ppc64le issues (e.g. [cms-sw/cmssw#41658](https://github.com/cms-sw/cmssw/issues/41658)) were already fixed when we moved to ROOT 6.30 ( LLVM 13). Ah ok, so it wasn't the JIT linker infrastructure after all. That's good to hear, I hope things are still equally fine in `ROOT6` now with LLVM 16. But then does this JITLink backport actually still solve some issues on top of that?. > In order to test this jitlink ppc64 change we need to test it for ROOT 6.26 e.g. CMSSW_13_3_X IBs where we still get errors (https://cmssdt.cern.ch/SDT/html/cmssdt-ib/#/relVal/CMSSW_13_3/2023-12-19-2300?selectedArchs=el8_ppc64le_gcc12&selectedFlavors=X&selectedStatus=failed ). If you can open a PR for root 6.26 patches branch then I can test it. ROOT 6.26 had LLVM 9, it would be very hard to backport these JITLink changes there. And also, if the upgrade to LLVM 13 already solved most issues, it seems questionable to me that it would improve anything, or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1867528365:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1867528365,4,['test'],"['test', 'tests']"
Testability,"> > > run it within ctest.; > > ; > > ; > > I get the following result when running ctest clingtest-check-cling, but I see no sign that the test under question is being run?; > > [clingtest.txt](https://github.com/root-project/root/files/14982001/clingtest.txt); > ; > Is it in the source tree under interpreter/cling/test?. Yes, and then Driver/C.c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2057662322:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2057662322,2,['test'],['test']
Testability,"> > @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.; > ; > I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:; > ; > ```; > Singularity> ./cling -xcuda; > warning: argument unused during compilation: '-c'; > ; > ****************** CLING ******************; > * Type C++ code and press enter to run it *; > * Type .q to exit *; > *******************************************; > [cling]$ __global__ void g(int * out){ *out=43;}; > #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); > #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); > #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); > #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); > #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); > #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); > #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); > #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); > #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); > #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-775750283:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-775750283,3,['test'],"['test', 'tested']"
Testability,"> > @guitargeek please fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks; > ; > Hi @bellenot, I have now forked [roottest](https://github.com/root-project/roottest), but the Windows build is still failing. Should I do something else besides just forking? Thanks for your help!. Hi @guitargeek No, now the failure is a real one, see the build log:; ```; 17:41:07 CMake Error at C:/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-configure-Release.cmake:49 (message):; 17:41:07 Command failed: 1; 17:41:07 ; 17:41:07 'devenv.exe' '/useenv' '/upgrade' 'build/vs2013/makefile.sln'; 17:41:07 ; 17:41:07 See also; 17:41:07 ; 17:41:07 C:/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-configure-*.log; 17:41:07 ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7126#issuecomment-775010584:410,log,log,410,https://root.cern,https://github.com/root-project/root/pull/7126#issuecomment-775010584,2,['log'],['log']
Testability,"> > @hahnjo let's wait until we merge the latest ROOT update in [cms-sw/cmsdist#8650](https://github.com/cms-sw/cmsdist/pull/8650) (hopefully in a couple of hours) and I will start the testing. Thanks!; > ; > @aandvalenzuela Did you get a chance to test?. Yes! I tested it at https://github.com/cms-sw/root/pull/186, but unit test failures are still present",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1684417813:185,test,testing,185,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1684417813,4,['test'],"['test', 'tested', 'testing']"
Testability,"> > @junaire, can you test if this solves also your problems?; > ; > I haven't tested this, but @hahnjo said this almost fixes my issue in #10910, only `roottest-root-html-runMakeIndex` needs some tweaking for the generated header file. But I think this may not be a full ""workaround"" as it doesn't handle the root issue. In fact, Jonas did mention this doesn't help with the problems about `TSeq`, which means we still have to preload `ROOTDataFrame`.; > ; > I also made my own fix ([4757b60](https://github.com/root-project/root/commit/4757b60656381a668b24a0ea0dbf6b77aff71e14)) and I feel like it may be a better direction to work on (even though it also failed to fix `TSeq`...). FWIW I pushed a new commit to #10910 and it looks like surprisingly fixes all issues even without preloading `ROOTDataFrame`! But now let's see if Jenkins is happy or not. Fingers crossed :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272363354:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272363354,2,['test'],"['test', 'tested']"
Testability,"> > @ktf can you please not debug in Jenkins? This should be investigated offline!; > ; > Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it?. I can quite easily reproduce it on EL8 with the exact `cmake` command from the Jenkins log. The important piece seems to be `-DCMAKE_CXX_STANDARD=14`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1722289138:217,ASSERT,ASSERT,217,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1722289138,2,"['ASSERT', 'log']","['ASSERT', 'log']"
Testability,"> > @lmoneta, shouldn't we link the whole archive of libVc.a into MathCore? We see some failures such as:; > > ```; > > root.exe -q -l -b test/testGenVectorVc.cxx ; > > ; > > Processing test/testGenVectorVc.cxx...; > > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general14signMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > > You are probably missing the definition of Vc_1::SSE::c_general::signMaskDouble; > > Maybe you need to load the corresponding shared library?; > > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general13absMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > > You are probably missing the definition of Vc_1::SSE::c_general::absMaskDouble; > > Maybe you need to load the corresponding shared library?; > > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_16Common10AllBitsSetE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > > You are probably missing the definition of Vc_1::Common::AllBitsSet; > > Maybe you need to load the corresponding shared library?; > > warning: Failed to call `testGenVectorVc()` to execute the macro.; > > Add this function or rename the macro. Falling back to `.L`.; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > Where:; > > ```; > > nm externals/usr/local/lib/libVc.a | grep _ZN4Vc_13SSE9c_general14signMaskDoubleE; > > 0000000000000580 R _ZN4Vc_13SSE9c_general14signMaskDoubleE; > > ```; > ; > @lmoneta ping. @lmoneta, ping 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-931977759:138,test,test,138,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-931977759,5,['test'],"['test', 'testGenVectorVc']"
Testability,"> > @osschar the problem that it will not work...; > > Having TGLIncludes.h (with #include <GL/glew.h>) make RGL depends on GLEW, and then as a consequence, I need to put graf3d\ftgl (FTGL) depends on RGL. Having this is creating circular dependency:; > > ```; > > CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):; > > ""FTGL"" of type SHARED_LIBRARY; > > depends on ""RGL"" (weak); > > ""RGL"" of type SHARED_LIBRARY; > > depends on ""FTGL"" (weak); > > At least one of these targets is not a STATIC_LIBRARY. Cyclic dependencies are allowed only among static libraries.; > > CMake Generate step failed. Build files cannot be regenerated correctly.; > > make: *** [Makefile:9096: cmake_check_build_system] Error 1; > > ```; > > ; > > ; > > Why it was not visible before because TGLIncludes.h were copied in ${CMAKE_BINARY_DIR}/include/ where it was picked up by whatever ROOT library you were building before. To achieve better modularity this could be fixed, in a way, I am proposing in this PR.; > > Here is a test PR I opened to show you an error for your proposal: #4786; > > ```; > > C:\build\workspace\root-pullrequests-build\build\include\TGLIncludes.h(21,10): fatal error C1083: Cannot open include file: 'GL/glew.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\graf3d\ftgl\FTGL.vcxproj]; > > ```; > ; > Oh, but why don't you just make the change to direct GL/glew.h inclusion in FTGL then?. Because it is indirect dependency :( If you check files that I changed, there is no direct includes of glew.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-600592932:1063,test,test,1063,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-600592932,1,['test'],['test']
Testability,"> > @smuzaffar, can we run this PR against cmssw?; > ; > CMSSW tests are running via [cms-sw#198](https://github.com/cms-sw/root/pull/198) (note that cmssw tests are running for non-CXXMODULES builds). @smuzaffar, can you interpret the results?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1925295977:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1925295977,2,['test'],['tests']
Testability,"> > @smuzaffar, can you test with cmssw the current state of this PR?; > ; > @smuzaffar, ping. @vgvassilev , sorry currently I am unable to test this because of the cmssw build errors we are getting with root master ( see https://github.com/cms-sw/cmsdist/pull/7911#issuecomment-1148864921 and https://github.com/root-project/root/pull/10650#issuecomment-1149048876 ). Once we understand and fix this issue then I can start the testing for llvm13",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1149062812:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1149062812,3,['test'],"['test', 'testing']"
Testability,"> > @vgvassilev The fix for the CUDA support is ready and all CUDA tests passes. You can find it here: [SimeonEhrig@b683be2](https://github.com/SimeonEhrig/root/commit/b683be20d3e8f08ad6bb8f484bdb2a978a8450cc); > > It is on the branch [fixCUDAllvm13](https://github.com/SimeonEhrig/root/tree/fixCUDAllvm13) in my root fork.; > ; > That's awesome @SimeonEhrig!! Pushed the patch. Wow this was really asap :sweat_smile: And it is great to see, that CUDA is now working with LLVM 13 :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1196615718:67,test,tests,67,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1196615718,1,['test'],['tests']
Testability,"> > ACLiC supports modules pretty well if we build with modules on; > ; > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > ; > > There are things to do to improve it but none seem major blockers.; > ; > They deterred at least one user from proceeding.; > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1771839121:697,test,test,697,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1771839121,2,['test'],['test']
Testability,"> > Ah yes, I had not thought about the py2 compatibility! I have now pushed the fix for that. Hope that works.; > > Unfortunately I don't have access to the details of the failing tests. Is there something else to do for the other test that @hageboeck mentioned?; > ; > Nope, you cannot do anything on the python side. It's a numerical instability that arises due to multi-threaded processing, and it's not related to the pythonisation. I see, thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314#issuecomment-794110806:181,test,tests,181,https://root.cern,https://github.com/root-project/root/pull/7314#issuecomment-794110806,2,['test'],"['test', 'tests']"
Testability,"> > Any chance that that could be done?; > ; > Certainly! What would such a test look like?. Unfortunately I think it would involve using an ARM build machine. Not sure if you already have such a thing in the ROOT CI yet... I would have to check if it's possible to maybe build GCC with an ""external"" `libatomic.so` on x86 as well. In that case a Docker based CI job on x86 could be enough. That will have to wait a little bit at least unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6609#issuecomment-707069356:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/6609#issuecomment-707069356,1,['test'],['test']
Testability,"> > As far as I can see, just from looking at the code,; > ; > I assume it should be in the generated dictionary and not in the code, isn't it?. My comment was about where this error is likely introduced. > > Both of them load just fine in a PowerPC build of ROOT.; > ; > Do you mean both the `older` libceleritas_root.so and the new one or something else?. I tested both current `master` and the commit before the refactoring. In both cases, `.L src/libceleritas_root.so` or `.L src/libceleritas_io.so` work without warnings or errors. > ; > > Both of them load just fine in a PowerPC build of ROOT.; > ; > If you can not reproduce the problem with the older library and with your PowerPC then we need compare more carefully the hardware/OS you have and the one @sethrj is using (part of the Summit HPC). For a start, I would suggest not using Spack but building yourself and being aware which flags are used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1079019110:360,test,tested,360,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1079019110,1,['test'],['tested']
Testability,"> > Awesome! Can we also add codecov to measure given PR test coverage? You can take a look at [vgvassilev/clad@57345cf/.github/workflows/ci.yml#L737-L741](https://github.com/vgvassilev/clad/blob/57345cfae9fd3c1ad2fc1f5a4e2e95e0ee4a68ac/.github/workflows/ci.yml#L737-L741); > ; > Certainly (I think we have an issue up for this, please check, @vgvassilev or open one). Codecov shouldn't be part of this PR though :-). I did not intend to ask about it in the context of this PR. It was more towards being a very similar feature that's easy to reach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12314#issuecomment-1433357106:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/12314#issuecomment-1433357106,1,['test'],['test']
Testability,"> > Because the doc strings were written into the file, and since they are different the file size changed.; > ; > But strangely the report is about the size of the `TTree` rather than the file ... Maybe the TTree also encodes some class info? Because as you see in the CI, reverting this change in the docs fixed the test failures",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1865226558:318,test,test,318,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1865226558,1,['test'],['test']
Testability,"> > Build failed on ROOT-fedora31/noimt.; > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build; > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console).; > > ### Failing tests:; > > ; > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/); > > ; > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/); > ; > Maybe `src/TExecutor.cxx` should be added also in the noimt case?. You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7070#issuecomment-763929904:256,test,tests,256,https://root.cern,https://github.com/root-project/root/pull/7070#issuecomment-763929904,3,['test'],"['testReport', 'tests']"
Testability,"> > Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/console).; > > ### Failing tests:; > > ```; > > * [projectroot.math.mathcore.test.gtest_math_mathcore_test_CladDerivatorTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_CladDerivatorTests/); > > ```; > ; > @arora-vidushi, the test fails on windows with:; > ; > ```; > [ RUN ] CladDerivator.logx6; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(208): error: Expected equality of these values:; > -0.43429448190325176; > value->GetAsDouble(); > Which is: 4.4274168156280442e+20; > [ FAILED ] CladDerivator.logx6 (13 ms); > [ RUN ] CladDerivator.minimum; > [ OK ] CladDerivator.minimum (24 ms); > [ RUN ] CladDerivator.erf1; > [ OK ] CladDerivator.erf1 (31 ms); > [ RUN ] CladDerivator.erf2; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(245): error: Expected equality of these values:; > -0.83021499484118955; > value->GetAsDouble(); > Which is: -1.9812626051377354e-49; > [ FAILED ] CladDerivator.erf2 (18 ms); > [ RUN ] CladDerivator.erfc1; > [ OK ] CladDerivator.erfc1 (10 ms); > [ RUN ] CladDerivator.erfc2; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > 0.83021499484118955; > value->GetAsDouble(); > Which is: 1.9812626051377354e-49; > [ FAILED ] CladDerivator.erfc2 (13 ms); > ```. @arora-vidushi, here is some more debug output from the windows machine:; ```; C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; Running main() from C:\Users\vvdebug\source\repos\root\out\googletest-prefix\src\g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1399226357:224,test,tests,224,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1399226357,6,['test'],"['test', 'testReport', 'tests']"
Testability,"> > Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.; > ; > Did you see the numbers posted initially and just above last week? I think they cover the most relevant cases, including an instantiation of a a full `ROOT::RDataFrame`. And all examples where Clings is spending most of the time in the passes themselves don't really change, it's just how they are called... Ok, overlooked that. If we are testing the pass manager re-creation over a every transaction, why we test things that do not have multiple transactions. That is, we need tests that call ProcessLine many many times to be able to measure the eventual overhead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1914254356:516,test,testing,516,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1914254356,3,['test'],"['test', 'testing', 'tests']"
Testability,"> > Delete test/Prompt/ValuePrinter/FileSystemPath.C; > > Unfortunately the std::filesystem symbols are provided by the static; > > library libstdc++fs.a, which might be stripped out by the linker.; > ; > Which platform does it fail on?. In principle this affects any `libstdc++` platform that has the symbols in a static archive. I locally see it on Alma and Jenkins also reports it on Debian. It seems to luckily work on Ubuntu, which is why we weren't aware of the issue initially. > From the wording it sounds like it would also fails on the prompt if a user is attempting to use `std::filesystem`. Shouldn't we open a related issue to re-allow the user to use `std::filesystem` (and reintroduce the test)?. Possible. Note that this has the same underlying cause as https://github.com/root-project/root/issues/11601 and the note on`devtoolset`s in https://root.cern/install/build_from_source/#caveats - problems with symbols in static archives are basically well known and understood. > > Disable test/DynamicLibraryManager/cached_realpath.C on macOS; > > It uses ln -r, which is not implemented on macOS.; > ; > Would it be possible (and thus better) to only disable the 2 lines of the test that uses `ln -r`?. No, this is not possible. Tests can only be disabled as a whole. > > [cling] Disable many DynamicLibraryManager test on macOS; > ; > Should we open an issue to port (and/or fix) those tests (or a subset at least) to MacOS?. I'm not sure this would actually help. AFAICT these tests never worked on macOS since they were introduced, and I'm already pointing this out since at least two years. Note that the feature itself works fine on macOS, it's only a problem with the way the tests are written (and that they try really hard to create the most complex scenarios).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2294913044:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2294913044,9,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"> > Do we have a way to run the cling tests in the ci?; > ; > That would be #15230. Ok, so it's not there yet. @ferdymercury, did you try to run the cling tests locally? Does this change still lead to successful testsuite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694#issuecomment-2418631901:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/16694#issuecomment-2418631901,3,['test'],"['tests', 'testsuite']"
Testability,"> > Here it is; > ; > Great. Could you **also** make it part of the commit log (finding the PR summary from a given commit is not that ""easy"")?; > ; > Thanks. Done",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663691984:75,log,log,75,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663691984,1,['log'],['log']
Testability,> > How shall I proceed with this PR ?; > ; > Can you maybe rebase on `master` to fix the conflicts and trigger the tests? Then we can decide what to do next. Done :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9651#issuecomment-1808387997:116,test,tests,116,https://root.cern,https://github.com/root-project/root/pull/9651#issuecomment-1808387997,1,['test'],['tests']
Testability,"> > However, some classes already use it, which requires us to implement the operator as discussed in #12525.; > ; > Are we guaranteed that testing for C++20 is sufficient (i.e. there is no compiler/library that have the three-way comparison but do not set C++20) (If not is there a small test we can have cmake run to check whether we need this or not?). This would be a very weird compiler that enables the three-way comparison, a semantic change compared to previous versions, when compiled without C++20! I also didn't find the other way around, ie all interesting compilers with support for C++20 also implement the three-way comparison so that the code will at least compile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12803#issuecomment-1542541856:140,test,testing,140,https://root.cern,https://github.com/root-project/root/pull/12803#issuecomment-1542541856,2,['test'],"['test', 'testing']"
Testability,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation.; > ; > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?. I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721018511:78,assert,assertion,78,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721018511,1,['assert'],['assertion']
Testability,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now; > ; > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1211637235:185,log,log,185,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1211637235,1,['log'],['log']
Testability,"> > I don't want to bikeshed on this PR but why did you end up with so much code - wasn't just looking at the `gOptModuleByproducts` enough?; > ; > Please propose a PR; I don't see how else to do it. And btw ""so much code"": it's adding 15 lines; the rest just moves code around to help the logic / control flow. I think this is good to go, thus added an approval - no need to spend tons of time to optimize a diagnostic ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12067#issuecomment-1398182028:290,log,logic,290,https://root.cern,https://github.com/root-project/root/pull/12067#issuecomment-1398182028,1,['log'],['logic']
Testability,"> > I hope we'll see the same behaviour as in our private tests 🤞; > ; > Like this? 😉; > ; > ```; > C:\root-dev\build\x64\release>ctest -C Release -R pyroot-pyz-stl-set; > Test project C:/root-dev/build/x64/release; > Start 7: pyunittests-bindings-pyroot-pythonizations-pyroot-pyz-stl-set; > 1/1 Test #7: pyunittests-bindings-pyroot-pythonizations-pyroot-pyz-stl-set ... Passed 1.44 sec; > ; > 100% tests passed, 0 tests failed out of 1; > ; > Total Test time (real) = 1.91 sec; > ```. Yes, but on both flavours ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16763#issuecomment-2441602175:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/16763#issuecomment-2441602175,6,"['Test', 'test']","['Test', 'tests']"
Testability,"> > I tested a bit on my end, I guess the `llvm::StringRef` conversion errors are the following:; > >; > > [...]; > ; > I do not understand why. Calling `.str()` is often too expensive but we may need to do it here. I think the problem is that `const char*` is convertible to `std::string_view` and `llvm::StringRef` while the latter two are convertible to each other. So the compiler in principle can do both conversions and its ambiguous which one should be preferred. Using `llvm::StringRef` in the three cases explicitly fixes the build for me:; ```diff; diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx; index 0900c4d62a..b288aef228 100644; --- a/core/metacling/src/TCling.cxx; +++ b/core/metacling/src/TCling.cxx; @@ -3164,10 +3164,11 @@ Bool_t TCling::IsLoaded(const char* filename) const; llvm::StringRef(filesStr).split(files, ""\n"");. std::set<std::string> fileMap;; + llvm::StringRef file_name_ref(file_name);; // Fill fileMap; return early on exact match.; for (llvm::SmallVector<llvm::StringRef, 100>::const_iterator; iF = files.begin(), iE = files.end(); iF != iE; ++iF) {; - if ((*iF) == file_name.c_str()) return kTRUE; // exact match; + if ((*iF) == file_name_ref) return kTRUE; // exact match; fileMap.insert(iF->str());; }. @@ -7116,9 +7117,12 @@ static std::string GetSharedLibImmediateDepsSlow(std::string lib,; // FIXME: It is unclear whether we can ignore all weak undefined; // symbols:; // http://lists.llvm.org/pipermail/llvm-dev/2017-October/118177.html; - if (SymName == ""_Jv_RegisterClasses"" ||; - SymName == ""_ITM_deregisterTMCloneTable"" ||; - SymName == ""_ITM_registerTMCloneTable""); + static constexpr llvm::StringRef RegisterClasses(""_Jv_RegisterClasses"");; + static constexpr llvm::StringRef RegisterCloneTable(""_ITM_registerTMCloneTable"");; + static constexpr llvm::StringRef DeregisterCloneTable(""_ITM_deregisterTMCloneTable"");; + if (SymName == RegisterClasses ||; + SymName == RegisterCloneTable ||; + SymName == DeregisterCloneTable); co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088604187:6,test,tested,6,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088604187,1,['test'],['tested']
Testability,"> > I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?; > ; > No, it is not, see my comments about the coordinates ... how do you define them ?. I added Doxygen comments on the parameters of the methods. The coordinates are like this:. For AddItem you provide x1, y1 which is the starting coordinate and x2, y2 which is the stopping coordinate and labelX and labelY whihc is where the label is. I'm trying to figure out a way where you don't need to set the coordinates, but that may take a while. For AddPair, you simply provide the x and y coordinate of the center of the arc. The labels are positioned automatically. For AddCurved, You also only provide the x and y coordinate of the center of the arc, along with phimin and phimax angles. I'm also trying to find a way to reduce the amount of parameters here (like in TikZ). The problem is that the main type of feynman Diagram, is one where you have the fermions at the left and right side, and a boson + virtual particles (in pairs) in the middle. If this were the only type of feynman diagram, I could do this easily, however sometimes there are other ""irregular"" diagrams, which would be harder to implement. Is there a way, where the particles can be positioned automatically, and then checked to make sure there is no overlapping?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-829968031:49,test,tested,49,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829968031,2,['test'],['tested']
Testability,"> > I think there should be little failures since we switch already long ago to the ""just fail the test"" mode. But you never know :); > ; > There is a ton of tutorials that would fail that currently do not run, see #5938 . But I don't think this PR interferes with that, right @hageboeck ?. They are kind of doing the same thing, but #5938 is dumb. It only checks if it can `import <package>` at all, and then runs the tutorial or fails all that need e.g. `numpy`. It doesn't care for versions. I guess I can rewrite the `${PYTHON_EXECUTABLE_DevMain} -c ""import <package>""` from the other PR to simply use the test from this PR. For this, however, it would be nice if you could ask for specific packages. So the thing would look up numba in the requirements, and test if the correct version is installed to run a tutorial or test. This way, we would also get a cross-check that dependencies of tests/tutorials are actually in requirements.txt.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654934046:99,test,test,99,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654934046,10,['test'],"['test', 'tests']"
Testability,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions.; > ; > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ?. You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210#issuecomment-1630421173:784,test,tests,784,https://root.cern,https://github.com/root-project/root/pull/13210#issuecomment-1630421173,1,['test'],['tests']
Testability,"> > I would argue that typical cmake projects do not need to deal with this; > ; > Fair enough, other projects just leave the headers in the source directory.; > But I don't understand the motivation for this change then.; > ; > > it allows better navigation from compile output logs in IDEs and better editing of headers; > ; > Can you elaborate on why symlinking is better than copying in these regard? (e.g. why is your IDE trying to edit the headers in the build directory?) Again, just curious, my workflow does not rely on compilation logs for navigation so I never had this problem. The problem might actually stem from a different problem. But first things first:. In VS when you compile a target in ROOT, like Tree, compiler invocations are spawned that compile the various source files. The output of these compilers is piped into a window inside VS. Error messages and warnings are analyzed by VS. You can double-click these in the compiler output window and VS will jump to the file and line where this error/warning occured. This is a super useful navigation feature. The workflow for running static code analysis like clang-tidy is similar. Now the issue is that when you jump to errors/warnings in header files, VS jumps to the copies of the headers in the build directory. If I fix the problem there and recompile/rerun clang-tidy, the errors/warnings of course persist, because the fixed header files are overridden again from the source directory. A possible explanation why VS jumps to the headers in the build directory might be, that the headers in the source directory are NOT part of the CMake targets and thus not part of the VS projects. This is a problem of itself. Btw, I just tried reproducing the problem with the clicks on the output window jumping into the build directory on master and now VS jumps into the source directory. That is confusing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656561889:279,log,logs,279,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656561889,2,['log'],['logs']
Testability,"> > If it is incompatible, it should detect this when CMake runs; > ; > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well.; ; > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options; > ; > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s; > ; > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4; > ; > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146#issuecomment-1208151017:125,log,logic,125,https://root.cern,https://github.com/root-project/root/issues/11146#issuecomment-1208151017,1,['log'],['logic']
Testability,"> > Is somebody working with priority on the test case so that we can merge this fix?; > ; > I attempted to create one but didn't succeed ([#14887 (comment)](https://github.com/root-project/root/pull/14887#issuecomment-1981644071)) so I abandoned it. I think the test is actually good, except for `assert(longString[i] = checkString[i])`: It should be `==` and `assert` doesn't work interactively depending on the options ROOT was built with. I added a standalone gtest that I came up with independently...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-2023286731:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-2023286731,4,"['assert', 'test']","['assert', 'test']"
Testability,"> > Just curious: would it also work to have the build directory adjacent to the source directory, instead of below the git repository? Or does this interact poorly with IDEs?; > ; > I think that interacts poorly with keeping things in order in your filesystem: say you have a `projects/` directory with `myawesomeproject1/` and `myothersideproject/` inside, you don't want them both creating a `build` directory next to the sources. Yes, I completely agree. That's why I clone the repos into `myawesomeproject1/src/` and `myothersideproject/src/`. This has the advantage that I can have as many build directories of the same source code as I want. > But at the same time for IDEs and tools to automatically pick up build artifacts (e.g. tests) you do want every project to use the same name for the build directory (ideally `build/` as per [pitchfork](https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs)'s recommendations). Ok, sure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12881#issuecomment-1563241199:738,test,tests,738,https://root.cern,https://github.com/root-project/root/pull/12881#issuecomment-1563241199,1,['test'],['tests']
Testability,"> > LGTM!; > ; > Thanks! By the way I have no idea how the cling-tests worked, so I just tried to copy what I saw in the lines above with the comment doing the ""CHECK"" I hope. The easiest way would be to configure ROOT with `-Dclingtest=On -Dtesting=On` and run it within ctest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2053640480:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2053640480,1,['test'],['tests']
Testability,"> > Let’s wait for this to land upstream.; > ; > Is this a requirement? This is finally fixing test crashes with the most recent GCC and C++20, I'd rather have this in... Do we have a open PR against the llvm mainstream at least?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13859#issuecomment-1764630931:95,test,test,95,https://root.cern,https://github.com/root-project/root/pull/13859#issuecomment-1764630931,1,['test'],['test']
Testability,"> > Looks like we have register something atexit (https://github.com/root-project/root/blame/master/core/base/src/TApplication.cxx#L162). Why TApplication does not rely on the regular gROOT's shutdown logic in TROOT.cxx?; > ; > Because TApplication are usually/often created after TROOT and we want to get the atexit at much at the tip of the chain (i.e. actually executed as early as possible). That's confusing, `TROOT::ShutDown` already makes this call in the proper order. I've removed this piece of code and let's see if tests will be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-567423037:201,log,logic,201,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-567423037,2,"['log', 'test']","['logic', 'tests']"
Testability,"> > Not only should writing be faster but pages are also ordered by columns, so we may see better reading performance with this change.; > ; > Yes, I've been trying to measure this with the `iotools` analyses, we'll have to see if we get convincing numbers out of it... Right, I can see a quite measurable effect when turning off the cluster cache *and* drop the file system cache before running the benchmarks for reading the converted files. In that setup, on my system, I see up to a factor 3x (!) difference for the LHCb analysis (average over 20 repetitions) and less for the other benchmarks. The current hypothesis is that this is related to the flat data model and quite dense reading of the LHCb data. For all benchmarks, the difference is much reduced with either of the caching turned back on. ![image](https://github.com/root-project/root/assets/1613332/514636a2-695b-4c5f-986a-1df42306804d)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14616#issuecomment-1932250935:400,benchmark,benchmarks,400,https://root.cern,https://github.com/root-project/root/pull/14616#issuecomment-1932250935,3,['benchmark'],['benchmarks']
Testability,"> > Note that this change breaks forward compatibility.; > ; > Will we still be able to read ""old"" rc2 files?. Yes, also tested e.g. in the ntpl004 tutorial that reads a pre-PR file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16345#issuecomment-2324265662:121,test,tested,121,https://root.cern,https://github.com/root-project/root/pull/16345#issuecomment-2324265662,1,['test'],['tested']
Testability,"> > Ok, for only running on 3G. Is it possible to cut this down even more by pre-filtering? Review coming soon.; > ; > I would have to look in detail into the cuts, perhaps? At the end, I like that many filters we use since that's how you go from the generic samples to the results, meaning this is the content of the example :) Also it's very nice from the benchmarking point of view!; > ; > I tried to go down using even less events, but then the statistics are super bad and it does not look good anymore. Using the 5% of the initial 10fb^-1 is the bare minimum. I meant to have a magic, pre-filtered sample. If e.g. the leading jet cut is at 45 GeV, create a sample that has it at 40. If you need one b-jet, only take events that have a b-jet, but relax the b-tagging working point. You know - the standard things you do when you want to have smaller samples, but still test the cuts. This way, you can probably condense it down to << 1G with exactly the same result. I didn't mean to actually change the filters in the code, but suppress events that wouldn't pass anyway.; Then, you disclose that you run on a pre-filtered sample to save bandwith, and that with the flag `--all` or `--no-prefilter` or whatever people can switch to the full beast.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667202882:358,benchmark,benchmarking,358,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667202882,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,"> > Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred.; > ; > You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well. Unfortunately, the only flags I've passed are `-std=c++17`, `-I`, `-L`, and some `-l`. The full command is shown in the readme. Should this work automatically or do I need to do more to expose these symbols to clang?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193060988:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193060988,6,['test'],"['test', 'test-case']"
Testability,"> > Pointing to what alternatives there are, if any, either through the legacy alias, or in > the body doc, would be additionally helpful.; > ; > We cannot test the existence of an input variable in an alias therefore we cannot handle with the same alias the case where there is another solution and the case where there is not. I guess if there are possible alternatives they should be mentioned in the body of the class documentation. I guess one could use:; `ALIASES = ""legacy{2}=\htmlonly<div class=\""legacybox\""><h2>Legacy Code</h2> \1 is a legacy interface: there will be no bug fixes nor new developments. But depending on the context using \1 might still be a valid solution. \2</div>\endhtmlonly""; `. and then e.g.:; `\legacy{TSpectrum,Some parts of this class are superseded by RooFit.}`. or:; `\legacy{TTreeReader,RDataFrame is recommended as replacement.}`. Second argument can be also left empty `{TTreeReader,}`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315#issuecomment-1237828753:156,test,test,156,https://root.cern,https://github.com/root-project/root/pull/11315#issuecomment-1237828753,1,['test'],['test']
Testability,"> > Probably this is just a style preference, but given that we might want to implement similar approaches for other tests, wouldn't it be cleaner to specify the dependency on the xml target from the `ROOT_ADD_TEST` call? imho it looks more sustainable with the perspective of wanting to disable tests that need specific targets of the build system.; > ; > Not in this case, there is no C++ dependency that can be expressed in CMake. The test doesn't link against the XML library, but it uses an executable via `gSystem` that is only available when building ROOT with `xml=ON`. I see, thanks for the clarification!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675#issuecomment-2411286373:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/16675#issuecomment-2411286373,3,['test'],"['test', 'tests']"
Testability,"> > Right, I was using 6.30.04 as reference. I can rerun if needed.; > ; > Yes, when comparing files it is essential that the only difference is the change being investigated. With the new commit following vgvassilevs suggestion, the test passes, so not sure if I should continue in this direction?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1986390863:234,test,test,234,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1986390863,1,['test'],['test']
Testability,"> > Suspicious, that all but linux jobs failed. I have tested locally on my linux machine a month ago, and it worked.; > ; > To solve it, go to your fork on GitHub, master branch, click on Sync Fork.; > ; > Then go to your terminal, git pull your master branch. Then checkout your branch add_point. Call git rebase --interactive master; > ; > Finally, call git push -f add_point to end the rebase. Ok, now my master branch is in sync with the mainstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2127082566:55,test,tested,55,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2127082566,1,['test'],['tested']
Testability,"> > Thanks! Please squash on merge, we don't need the individual commits in the history.; > ; > We should only have squash and merge allowed to keep our history friendly to git bisect... I disagree, in many cases it's helpful to have more detailed and logically separate commits and for example I try to make sure that all of them build. Also, merge commits don't help all that much for bisect, you might still end up in the branch and you have to manually figure out that you're supposed to skip it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14445#issuecomment-1919232281:252,log,logically,252,https://root.cern,https://github.com/root-project/root/pull/14445#issuecomment-1919232281,1,['log'],['logically']
Testability,"> > That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe.; > ; > Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?. You should build in debug mode and then from the stacktrace (https://github.com/root-project/root/issues/12156#issuecomment-1658967214) you will see the full command that fails. You copy it and add it after `gdb --args COPIED_CMD` then you run and it will crash. You can see where it crashes and set a breakpoint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1660294759:98,assert,assert,98,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1660294759,1,['assert'],['assert']
Testability,"> > The change looks good to me, if the CI failures are understood/unrelated. Just for clarification, is there a way to test this specifically? Or it is easily visible but we don't have a Python 3.8 runner in the CI?; > ; > Hi, @hahnjo was able to reproduce this on python3.8. It should be more visible if we had a python3.8 runner, but this does not error out on newer python versions. Actually I noticed on Friday that we have Python 3.8 in our `alma8` image. I don't know why it's not visible there... > The stack trace points to TCling not handling `void init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}` which is an incorrectly constructed aggregate initialization constructor. I would prefer if this could be tested before merging if @hahnjo can apply this commit on his platform and confirm that `roottest-python-basic-datatype` and `roottest-python-cpp-cpp11` start to pass. I re-checked that the two tests are still failing on `master` for my local configuration and can confirm that this PR fixes them, getting me back to a fully green test result :smiley:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16548#issuecomment-2381281651:120,test,test,120,https://root.cern,https://github.com/root-project/root/pull/16548#issuecomment-2381281651,4,['test'],"['test', 'tested', 'tests']"
Testability,"> > The header file `RLazyDSImpl.hxx` seems to use `TSeq`, removing the include doesn't seem to be an option. Duplicating the type / the code of `TSeq` certainly isn't a viable option either :-); > ; > @junaire, can you preload RDataFrame here `std::vector<std::string> FIXMEModules = {""Hist""};` and see if the issue goes away? Here:; > ; > https://github.com/root-project/root/blob/5e0ea9bd2f33d629cdd29fd67138c32483b86208/core/metacling/src/TCling.cxx#L1236; > ; It seems to work... But need a full ci test. > PS: @hahnjo, @junaire is working on the same stacktrace where we instantiate a template and we end up with an ODRHash mismatch. Maybe you could exchange ideas... Yeah, that would be great :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268162251:504,test,test,504,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268162251,1,['test'],['test']
Testability,> > The intent of this patch is to fix the failing OSX tests with; > ; > Can you remind me why:; > a) it only fails on the MacOS node?; > b) it (seems to) not be reproduce-able on my own Mac?. Because ROOT need to be built with `-Dsoversion=On`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618359069:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618359069,1,['test'],['tests']
Testability,"> > The subtraction was never needed, this was a way to cast a pointer into an integer via a ptrdiff_t. I can elaborate on this, but I'm not sure this really adds value to archeological investigations that might ever come across this...; > ; > This plausible albeit a bit odd (i.e. why didn't they do the straight cast in the first place? I find it more likely that there has been a change in the C++ standard (from 1994 to now :) ) that allows the straight cast to work ), I agree that it might not be helpful to dig any further. I would add the above fact/claim/opinion :) at the very least in the git log. Yes, `uintptr_t` likely didn't exist in 1994. It's still optional in current C++ standards as far as I can tell, but ROOT and many other projects use it throughout their code base, so its existence is likely a given on all relevant platforms. Regarding the straight cast not being possible, I remember reading some time ago that the original `malloc` implementation in Unix casted pointers to `int` in various places, so it definitely was possible and I can't tell why it wasn't done here. I've added a sentence to the commit message explaining that we're now directly going to `uintptr_t` instead of taking the detour into `ptrdiff_t`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9969#issuecomment-1061647802:604,log,log,604,https://root.cern,https://github.com/root-project/root/pull/9969#issuecomment-1061647802,1,['log'],['log']
Testability,"> > The test failure on mac13 is not due to the changes of this PR.; > ; > So some old svg tests (o) are failing because of a changed fill attribute:; > ; > * Original: fill=""#917f6e""; > * Modified: fill=""#6f2da8""; > ; > The json tests (j) are failing because of differences in fOper.; > ; > Do we need new reference files ?. May be @linev can help ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328106540:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328106540,3,['test'],"['test', 'tests']"
Testability,"> > There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling `TInterpreter::Declare` in this respect. This is likely related to the issues described by @jalopezg-git in [#12449 (comment)](https://github.com/root-project/root/pull/12449#issuecomment-1467860880) and can be fixed in a future PR.; > ; > FYI, #13565 should fix the issues with unloading that I mentioned before in this PR! I still need to look at two test failures, but it's mostly there 🙂!. @bendavid #13565 was recently merged into master. Provided that you have the time, you could rebase this PR and see how it works now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1840852485:502,test,test,502,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1840852485,1,['test'],['test']
Testability,"> > There is still failures.; > ; > Maybe rebasing to current master helps with those. I checked alma9 build, it failed somewhere else if I understand the log correctly:; ```; [ 98%] Linking CXX executable emitGraphIndependent; /usr/bin/ld: cannot find -lblas; Scanning dependencies of target G__TMVAUtils; Consolidate compiler generated dependencies of target G__TMVAUtils; [ 98%] Building CXX object tmva/tmva/CMakeFiles/G__TMVAUtils.dir/G__TMVAUtils.cxx.o; collect2: error: ld returned 1 exit status; gmake[2]: *** [tmva/pymva/test/CMakeFiles/TestRModelParserPyTorch.dir/build.make:124: tmva/pymva/test/TestRModelParserPyTorch] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:70193: tmva/pymva/test/CMakeFiles/TestRModelParserPyTorch.dir/all] Error 2; ```. Suspicious, that all but linux jobs failed. I have tested locally on my linux machine a month ago, and it worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2126878049:155,log,log,155,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2126878049,8,"['Test', 'log', 'test']","['TestRModelParserPyTorch', 'log', 'test', 'tested']"
Testability,"> > This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden.; > ; > As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR). IMO that’s a prerequisite for this new feature. We usually do not have new features without a good amount of tests. Delaying them for future seems like a bad idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-529620191:112,test,tests,112,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-529620191,3,['test'],['tests']
Testability,"> > What does the build error message say? I can't read it; > ; > ```; > 12:53:51 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > 12:53:51 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; > 12:53:51 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ```. Thanks. I have no clue what it means",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779872889:327,test,test,327,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779872889,5,['test'],['test']
Testability,"> > Why is this seen only in the cxxmodule case?; > https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/projectroot/runtutorials/tutorial_graphs_gerrors2/. I see the following steps on the stack trace (retaining only a few frame for clarity); ```; #10 0x00007f892fc17090 in ?? (); #11 0x00007f89305d4d23 in cling::IncrementalExecutor::executeInit (this=0x2239550, function=...) at .../IncrementalExecutor.h:275; ...; #19 0x00007f893906e732 in TROOT::RegisterModule .... TROOT.cxx:2588; ...; #35 0x00007f89306dcd17 in cling::utils::platform::DLOpen ... PlatformPosix.cpp:112; ...; #36 0x00007f89304c2143 in cling::DynamicLibraryManager::loadLibrary ... DynamicLibraryManager.cpp:207; ... ; #47 0x00007f893927253b in TUnixSystem::Load (module=""./h1analysisTreeReader_C.so"", ...) ... TCling.cxx:5935; #48 0x00007f893035ef96 in LazyFunctionCreatorAutoloadForModule ... TCling.cxx:5935; #49 0x00007f893035f1dc in TCling::LazyFunctionCreatorAutoload ....TCling.cxx:5953; ...; #100 0x00007f89391010ae in TApplication::ProcessLine (... line="".x /.../tutorials/graphs/gerrors2.C"", ...) at ... TApplication.cxx:1002; ...; #103 in main ; ```. And from that I do not see how this PR would materially change the behavior (i.e. it does 'more' work but ends up calling DynamicLibraryManager as this PR does and I do not see how the removed behavior would cause the problem ... i.e. looking at the stack I would expect the same crash to happen with or without this PR). To help better understand the problem (and whether this PR is the best solution), I think we need to understand a bit better what is cause the crash at IncrementalExecutor.h:275 and why the similar code path works when not relying on modules).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394482259:180,test,testReport,180,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394482259,1,['test'],['testReport']
Testability,"> > Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug?; > ; > Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. Also in CMS' testing the occurrence rate is in the range of 1e-4 ... 1e-6, i.e. rare enough to make debugging very impractical, but frequent enough to be a problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113#issuecomment-2056982955:63,mock,mock,63,https://root.cern,https://github.com/root-project/root/pull/15113#issuecomment-2056982955,2,"['mock', 'test']","['mock', 'testing']"
Testability,"> > Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me.; > ; > Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic. Got it. Thanks. ---. @vgvassilev It turns out that the reason for so many failures is we have an ExternalASTSource in root out of the llvm tree, so we don't update that. https://github.com/ChuanqiXu9/root/commit/570fd783875671d346c7cdc0d98a8a9afcad05a4. There is also another bug about the order to remove iterators: https://github.com/ChuanqiXu9/root/commit/7fb4aa9d11c6966b54745009187928dd13cec566; ; Now I can build the project in https://github.com/ChuanqiXu9/root/commits/chuanqi_pr83233/. I only run `make` instead of `ctest`. But it may be fine as we said the logic happens at build time actually. I think you can push the 2 commits to the branch to test it with the CI again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1976338232:384,log,logic,384,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1976338232,3,"['log', 'test']","['logic', 'test']"
Testability,"> > [SdtElectronics/cline#10](https://github.com/SdtElectronics/cline/issues/10) and [root-project/cling#490](https://github.com/root-project/cling/issues/490) redirect the discussion of parsing `noexcept` to here. However I suggest to address it in another dedicate issue and pull request for it (or re-open the above issues). Currently cling seems to not parse `noexcept` at all. At least not at lexer/token level since string-searching `kw_noexcept` got nothing in `root/interpreter/cling/` directory.; > ; > Many thanks @jiangyilism. Please, re-request a code review when you think it is ready 🙂!. It is ready for review. However I have no clue about the failure test report above. clang-format failed to checkout code before running. The windows test fail seems to be file permission error irrelevant to this pull request. The Fedora test fail is unreproducible on my ubuntu either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1587111417:667,test,test,667,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1587111417,3,['test'],['test']
Testability,"> > _t0 = Log10_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; ValueAndPushforward<double, double> _t00 = _t0.value;; return _d__t0.pushforward;; }; ""; (clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > (*)(double, double, double, double)) Function @0xf1a02d0; clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > Log10_pushforward_pushforward(double x, double d_x, double _d_x, double _d_d_x) {; ValueAndPushforward<double, double> _t0 = clad::custom_derivatives::TMath::Log10_pushforward(x, _d_x);; clad::ValueAndPushforward<Double_t, Double_t> _t1 = Ln10_pushforward();; double &_t2 = _t1.value;; double _t3 = (x * _t2);; double _t4 = (1. / _t3);; return {{_t0.value, _t4 * d_x}, {_t0.pushforward, ((0. * _t3 - 1. * (_d_x * _t2 + x * _t1.pushforward)) / (_t3 * _t3)) * d_x + _t4 * _d_d_x}};; }. C:\Users\vvdebug\source\repos\root\math\mathcore\test\CladDerivatorTests.cxx(211): error: Expected equality of these values:; -0.43429448190325176; value->GetAsDouble(); Which is: 2.4350792485954245e+19; [ FAILED ] CladDerivator.logx6 (1856 ms); ```. Here is the information for the `erf`. ```cpp; C:\Users\vvdebug\source\repos\root\out>root.exe -l -b; root [0] #include <Math/CladDerivator.h>; root [1] #include ""TMath.h""; root [2] double e2(double x){ return TMath::Erf(x);}; root [3] auto df = clad::differentiate<2>(e2, 0); (clad::CladFunction<double (*)(double), clad::NoObject, false> &) @0xf7c0000; root [4] df.dump(); The code is:; double e2_d2arg0(double x) {; double _d_x = 1;; double _d__d_x = 0;; double _d_x0 = 1;; clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > _t0 = Erf_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; ValueAndPushforward<double, double> _t00 = _t0.value;; return _d__t0.pushforward;; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1399226357:3466,test,test,3466,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1399226357,1,['test'],['test']
Testability,"> > `Alt$` vs `RVec::Take with back fill value`; > > also it is really unrelated to this PR.; > ; > It is related to this PR as the 2 features needs to work together. (I.e. case where the user relied on `RVec::Take with back fill value` _and_ there is some times where that column is also completely missing. The usage of `ROOT::VecOps::Take` to create an RVec filled with elements of an existing vector or a default user-provided value is a completely unrelated feature w.r.t. this PR. But, reading this comment of yours leads me to thinking what you are looking for is a unit test that makes sure the handling of missing values works with vector-like input branches, including providing default values via `DefaultFor` for those branches. Some test like the following example; ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TFile.h>; #include <TTree.h>. struct Dataset; {; constexpr static auto filename_1{""myfile_1.root""};; constexpr static auto filename_2{""myfile_2.root""};; constexpr static auto treename{""mytree""};; Dataset(); {; {; TFile f{filename_1, ""recreate""};; TTree t{treename, treename};. std::vector<float> vec1{1.1f, 2.2f, 3.3f, 4.4f, 5.5f};; std::vector<float> vec2{6.6f, 7.7f};. t.Branch(""vec1"", &vec1);; t.Branch(""vec2"", &vec2);; t.Fill();; t.Write();; }. {; TFile f{filename_2, ""recreate""};; TTree t{treename, treename};. std::vector<float> vec1{1.1f, 2.2f, 3.3f, 4.4f, 5.5f};. t.Branch(""vec1"", &vec1);; t.Fill();; t.Write();; }; }. ~Dataset(); {; std::remove(filename_1);; std::remove(filename_2);; }; };. int main(); {; Dataset dataset;; ROOT::RDataFrame df{dataset.treename, {dataset.filename_1, dataset.filename_2}};; auto display = df; .DefaultFor(""vec2"", ROOT::RVecF{100.f, 200.f, 300.f}); .Define(""vec3"", [](const ROOT::RVecF &vec1, const ROOT::RVecF &vec2); { return vec1 + ROOT::VecOps::Take(vec2, vec1.size(), 10.f); }, {""vec1"", ""vec2""}); .Display<ROOT::RVecF, ROOT::RVecF, ROOT::RVecF>({""vec1"", ""vec2"", ""vec3""});; display->Print();; }; ```. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2354094095:578,test,test,578,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354094095,2,['test'],['test']
Testability,"> > a meta-question might be whether we should veto these tutorials on all but the fastest of our testing platforms, i don't know how many more multi-thread multi-minute tutorials we can add before nightlies and incrementals become noticeably slower; > ; > If you label them `longtest`, they are skipped on a lot of machines. The `multicore` e.g. will run them. Ah damn, missed that you pushed to my branch :see_no_evil: I've added the flag again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667881359:98,test,testing,98,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667881359,1,['test'],['testing']
Testability,"> > but Mac 12 and Mac 13 are still not happy!; > ; > Tests on macs failing due to network problems downloading ROOT files. Anyway, I would prefer to see them green. Why do they failed? Can I trigger a new build?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1961103530:54,Test,Tests,54,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1961103530,1,['Test'],['Tests']
Testability,> > cannot seem to log on the ubuntu node; > ; > Which one?. root-ubuntu-2204-1.cern.ch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1367225485:19,log,log,19,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1367225485,1,['log'],['log']
Testability,"> > cms tests passed for production arch (el8_amd64_gcc12) and powerpc; > ; > Thanks! And I understand correctly it solves some problems that were there on ppc64le before?. @hahnjo , most of ppc64le issues (e.g. https://github.com/cms-sw/cmssw/issues/41658) were already fixed when we moved to ROOT 6.30 ( LLVM 13). In order to test this jitlink ppc64 change we need to test it for ROOT 6.26 e.g. CMSSW_13_3_X IBs where we still get errors (https://cmssdt.cern.ch/SDT/html/cmssdt-ib/#/relVal/CMSSW_13_3/2023-12-19-2300?selectedArchs=el8_ppc64le_gcc12&selectedFlavors=X&selectedStatus=failed ). If you can open a PR for root 6.26 patches branch then I can test it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1867519153:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1867519153,4,['test'],"['test', 'tests']"
Testability,"> > could you also add a little paragraph to the specification.md explaining the relationship between RBlob TKeys and pages / metadata objects.; > ; > This would be a new paragraph, right? Would `specification.md` even be the right place for this since it's about the `TFile` embedding?. Okay, I found the part of `specification.md` that talks about the embedding (in particular the locators and anchors), and added a paragraph about the RBlob keys and saying that there is no semantic mapping established by the RNTuple format (aka ""just use the offsets""). > The new methods for reserving blobs and writing into reserved blobs should probably be unit tested in the RMiniFile unit tests. Now also done. In the process found a mistake in the `RKeyBlob` embedding into proper `TFile`s where the keylen would be wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14190#issuecomment-1884989199:652,test,tested,652,https://root.cern,https://github.com/root-project/root/pull/14190#issuecomment-1884989199,2,['test'],"['tested', 'tests']"
Testability,> > do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?; > ; > Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient). That could be it! I have removed the changes from the LinkDef files from this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863638811:119,test,test,119,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863638811,2,['test'],['test']
Testability,"> > get a list of exact upstream commit hashes that we can apply to https://github.com/root-project/llvm-project/; > ; > Will do. Must be noted, some commits are not cherry-picked cleanly. Ok, is this because of other changes? Ideally, we really want to apply upstream commits so that they automatically rebase out during the next upgrade. > > get a CMSSW test on PowerPC64 (the above test is for x86!); > ; > Can you elaborate?. https://github.com/root-project/root/pull/13850#issuecomment-1782483745 notes that CMS tests passed, however that is for the `amd64` architecture, *not* for `ppc64le`!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1849671963:356,test,test,356,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1849671963,3,['test'],"['test', 'tests']"
Testability,> > if it is easy to backport this to root 6.26 then I can test it.; > ; > How difficult is to move to 6.30?. change root in production releases is not an easy task. We need to redo the physics validation which we do not recommend for production cmssw releases.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940892944:59,test,test,59,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940892944,1,['test'],['test']
Testability,"> > run it within ctest.; > ; > I get the following result when running ctest clingtest-check-cling, but I see no sign that the test under question is being run?; > ; > [clingtest.txt](https://github.com/root-project/root/files/14982001/clingtest.txt). Is it in the source tree under interpreter/cling/test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2057556231:128,test,test,128,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2057556231,2,['test'],['test']
Testability,"> > since the compiler can use such constructors to perform conversions in order to be able to rewrite comparisons.; > ; > Isn't that solved/avoided by having a complete set of explicit comparison operator?. Yes, if you catch all of them :) So as I said, try to debug and step through some unit tests to figure out where the compiler picks something unexpected and then implement in the missing comparison operator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1479713682:295,test,tests,295,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1479713682,1,['test'],['tests']
Testability,"> > so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled?; > ; > I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test?. hello,; what I intend to do is to create an RNTuple, populate it with random data, and checking default compression settings used for generated files (by default, without explicitly saying which compression algorithm I want to use).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-620214935:267,test,test,267,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-620214935,1,['test'],['test']
Testability,"> > we only need to make sure that we never have statements spanning more than one line; > ; > we control the generation of that code, so that should not happen/tests will break noisily and we can fix them if it happens. Yes, they will fail *if* they exceed the threshold of 1000 lines :smiley:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328#issuecomment-977876906:161,test,tests,161,https://root.cern,https://github.com/root-project/root/pull/9328#issuecomment-977876906,1,['test'],['tests']
Testability,"> @AdvaitDhingra please fork also [roottest](https://github.com/root-project/roottest) to prevent failures (timeout) on Windows nodes. Thanks. Okay, I forked it. How can I test my changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7208#issuecomment-779293610:172,test,test,172,https://root.cern,https://github.com/root-project/root/pull/7208#issuecomment-779293610,1,['test'],['test']
Testability,"> @AdvaitDhingra you can also compile ROOT locally and test your changes, instructions are at https://root.cern/install/build_from_source/. Ah ok. I will keep that in mind",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-777633908:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-777633908,1,['test'],['test']
Testability,"> @Axel-Naumann Hi, it seems I got very similar errors as yesterday. Here is the information. [build_err.log](https://github.com/root-project/root/files/11328201/build_err.log). Commit a5754ae51f70ab2b6ae87671a69aa95189c717d9 was used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522723227:105,log,log,105,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522723227,2,['log'],['log']
Testability,"> @Axel-Naumann Hi, it seems I got very similar errors as yesterday. Here is the information. [build_err.log](https://github.com/root-project/root/files/11328201/build_err.log). I've build it success without mpi on the lastest mac with the nightly version `6.29.01`. it seems you have 2 problem, one is ; ```; /Users/macbook/WORK/Tools/root/roofit/roofitZMQ/src/ppoll.cpp:21:13: error: use of undeclared identifier 'zmq_ppoll' int rc = zmq_ppoll(items_, static_cast<int>(nitems_), timeout_, sigmask_);; ^; 1 error generated.; ```; not sure if it is caused by `mpi`; if MPI is not necessary needed; building with `XXXmpi=OFF` also remove `-Dall=ON`. another is a bug of `glew,cocoa,opengl`. ; ```; /Users/macbook/WORK/Tools/root/builtins/glew/inc/GL/glew.h:19860:17: error: missing '#include <OpenGL/gl3.h>'; 'PFNGLCOPYTEXSUBIMAGE3DPROC' must be declared before it is used; GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D;; ^; In module 'OpenGL' imported from /Users/macbook/WORK/Tools/root/builtins/glew/inc/GL/glew.h:1203:; ```. add `-Dbuiltin_glew=ON -Dcocoa=ON -Dopengl=ON`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522831989:105,log,log,105,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522831989,2,['log'],['log']
Testability,"> @ChuanqiXu9, this looks good on our side. Performance is also within the same ballpark. . Great! I'll try to invite Google to test for it. > If I run `/usr/bin/time -v root.exe -l -b -q tutorials/hsimple.C ` I get:; > ; > master	this pr	this PR w/o [ChuanqiXu9@2467fe7](https://github.com/ChuanqiXu9/root/commit/2467fe73721150e3b70bc17cb36e03507257c6e5); > user time:	0.53s	0.50s	0.49s; > rss:	309436	310196	310192; > It is surprising that we lose 1MB somewhere between D41416 and your changes... It looks like it is slightly faster (I know it is not accurate). The size overhead may comes from the hash table I guess. Time/Space trade offs. I guess it makes sense in the high level in some degree. > ; > @smuzaffar, can you test this PR against cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1980600340:128,test,test,128,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1980600340,2,['test'],['test']
Testability,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT.; > ; > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-770015914:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-770015914,3,['test'],['tests']
Testability,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you !. Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11086#issuecomment-1235236211:117,test,test,117,https://root.cern,https://github.com/root-project/root/pull/11086#issuecomment-1235236211,2,['test'],"['test', 'tests']"
Testability,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707#issuecomment-720490551:296,test,testing,296,https://root.cern,https://github.com/root-project/root/pull/6707#issuecomment-720490551,3,['test'],"['test', 'testing', 'tests']"
Testability,"> @SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration. I tested this last week. Unfortunately, the CUDA mode does not work at the moment. If I try to compile a CUDA kernel, I get a segmentation error:. ```; Singularity> ./cling -xcuda; warning: argument unused during compilation: '-c'. ****************** CLING ******************; * Type C++ code and press enter to run it *; * Type .q to exit *; *******************************************; [cling]$ __global__ void g(int * out){ *out=43;}; #0 0x0000000000b80b2a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (./cling+0xb80b2a); #1 0x0000000000b7e9cc llvm::sys::RunSignalHandlers() (./cling+0xb7e9cc); #2 0x0000000000b7eb39 SignalHandler(int) (./cling+0xb7eb39); #3 0x00007f024c2c54c0 (/lib/x86_64-linux-gnu/libc.so.6+0x354c0); #4 0x0000000000b4b092 llvm::Twine::str[abi:cxx11]() const (./cling+0xb4b092); #5 0x0000000000b456e9 llvm::Triple::Triple(llvm::Twine const&) (./cling+0xb456e9); #6 0x0000000000b80ce9 llvm::TargetRegistry::lookupTarget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (./cling+0xb80ce9); #7 0x0000000000ab412e cling::IncrementalCUDADeviceCompiler::generatePTX() (./cling+0xab412e); #8 0x0000000000ab4b67 cling::IncrementalCUDADeviceCompiler::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (./cling+0xab4b67); #9 0x0000000000ace867 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); #11 0x0000000000bad161 cling::UserInterface::runInteractiv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-775735742:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-775735742,3,['test'],"['test', 'tested']"
Testability,"> @agheata I am a bit hesitant to have one TGeoManager with materials created with different systems of units....; > ; We can use 2 different TGeoManager, deleting in between, and caching the results in a struct. > Concerning the comparison: if PDG == TROOTMaterial and PDG == TGeant4Material then also: TROOTMaterial == TGeant4Material; > ; > Clearly both tests must succeed. AFAICT you only compare to PDG with some tolerance, but it is essential that the equality above is strict between TROOTMaterial == TGeant4Material",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198051219:357,test,tests,357,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198051219,1,['test'],['tests']
Testability,"> @amadio : lxplus is your counter-argument, with plenty of ttys but it's a shared resource so we must not enable IMT. Please keep trying to beat X11 as autoIMT symptom! :-). ```; epsftws ~ $ ssh lxplus; Last login: Fri Nov 6 13:54:59 2020 from 2a02:1205:c6af:f4e0:7593:da3b:ac49:b142; * ********************************************************************; * Welcome to lxplus718.cern.ch, CentOS, 7.8.2003; * Archive of news is available in /etc/motd-archive; * Reminder: you have agreed to the CERN; * computing rules, in particular OC5. CERN implements; * the measures necessary to ensure compliance.; * https://cern.ch/ComputingRules; * Puppet environment: production, Roger state: production; * Foreman hostgroup: lxplus/nodes/login; * Availability zone: cern-geneva-b; * LXPLUS Public Login Service - http://lxplusdoc.web.cern.ch/; * A C8 based lxplus8.cern.ch is now available; * Tuesday November 24th lxplus6.cern.ch will terminate - http://cern.ch/go/j9cD; * ********************************************************************; lxplus ~ $ ls /tmp/.X11-unix/; X33 X38 X55 X6 X69 X7 X75 X8; ```. I'm reviewing old pull requests assigned to me or with reviews requested, etc... As you can see above, your method would enable IMT on lxplus. In any case, is this pull request still planned to be merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2703#issuecomment-723068147:209,log,login,209,https://root.cern,https://github.com/root-project/root/pull/2703#issuecomment-723068147,3,"['Log', 'log']","['Login', 'login']"
Testability,"> @andresailer reports; > ; > ```; > ...; > Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; > Missing FileEntry for include/IOIMPL/TrackerPulseIOImpl.h; > requested to autoload type IOIMPL::TrackerPulseIOImpl; > Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; > Missing FileEntry for include/IOIMPL/TrackerRawDataIOImpl.h; > requested to autoload type IOIMPL::TrackerRawDataIOImpl; > Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; > Missing FileEntry for include/IOIMPL/VertexIOImpl.h; > requested to autoload type IOIMPL::VertexIOImpl; > Error in <TInterpreter::AutoParse>: Error parsing payload code for class EVENT::LCEvent with content:; > ; > #line 1 ""EVENT dictionary payload""; > ...; > Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; > Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; > Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; > ```; > ; > and more, http://cdash.cern.ch/testDetails.php?test=16531307&build=211395 from `Test: LCIO_pyLCIO_import_test (Passed)` (cough cough) - this might be pre-existing before the llvm13 upgrade. Perhaps, the last fix I pushed will fix it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11921#issuecomment-1357863281:1249,test,testDetails,1249,https://root.cern,https://github.com/root-project/root/pull/11921#issuecomment-1357863281,3,"['Test', 'test']","['Test', 'test', 'testDetails']"
Testability,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-723020267:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-723020267,2,['test'],['test']
Testability,"> @bellenot Do you understand why:; > ; > ```; > projectroot.runtutorials.tutorial_graphics_tmathtext; > projectroot.runtutorials.tutorial_legacy_rootenv; > ```; > ; > fail on windows as a result of this PR?. Well, it's probably unrelated, I see also a couple of failures in the master (nightly):; ```; 02:47:27 The following tests FAILED:; 02:47:27 	403 - tutorial-graphics-tmathtext (Failed); 02:47:27 	516 - tutorial-legacy-rootenv (Failed); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6251#issuecomment-680680841:326,test,tests,326,https://root.cern,https://github.com/root-project/root/pull/6251#issuecomment-680680841,1,['test'],['tests']
Testability,"> @bellenot I am looking the logs for windows build and it looks like it stuck? (no changes from 10 morning?). Weird, checking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8104#issuecomment-833445675:29,log,logs,29,https://root.cern,https://github.com/root-project/root/pull/8104#issuecomment-833445675,1,['log'],['logs']
Testability,> @bellenot I do not understand the failures in the tests. But I am sure has nothing to do with the actual proposed changes. Can this be merged to be ready for tonight's LCG builds?. Sure! Done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13946#issuecomment-1781312543:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/13946#issuecomment-1781312543,1,['test'],['tests']
Testability,"> @bellenot Thanks for fixing! But: How do I run the CI on the changes ?. I don't know if everyone can do it, but typing `@phsft-bot build` in the comment starts the builds and tests. See also https://github.com/phsft-bot/build-configuration/blob/master/README.md",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11894#issuecomment-1352719582:177,test,tests,177,https://root.cern,https://github.com/root-project/root/pull/11894#issuecomment-1352719582,1,['test'],['tests']
Testability,> @bellenot What were you testing through the use of Pythia6?. Pythia 6,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823#issuecomment-2040415250:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/14823#issuecomment-2040415250,1,['test'],['testing']
Testability,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6970#issuecomment-749423083:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/6970#issuecomment-749423083,1,['test'],['test']
Testability,"> @bzEq can you please prepare the list of upstream commit hashes that you are backporting here?. They are; ```; 18dc8dcd768f [PowerPC][JITLink] Support R_PPC64_GOT_TLSGD_PCREL34 (#68660); a712244f3b76 [PowerPC][JITLink] Support R_PPC64_GOT_PCREL34 (#68658); 1dae4dd0d80f [JITLink][PowerPC] Fix incorrect assertion of addend for R_PPC64_REL24; 94239712eb17 Fix typos in comments of ExecutionEngine (NFC); b6e2eac2930e [JITLink][PowerPC] Add relocations included in rtdyld but missing from jitlink; d6791fb77402 [JITLink][PowerPC] Fix relocations in stubs for ppc64 big-endian target; 9c38a178d3a6 [JITLink][PowerPC] Add basic TLS support for ppc64; 5cb2a78ac2fe [Orc][PowerPC] Enable ELFNixPlatform support for ppc64le; ca6d86f6bf12 [JITLink][PowerPC] Support R_PPC64_PCREL34; 11a02de7829a [JITLink][PowerPC] Change method to check if a symbol is external to current object; 7bf9c5bbb7d1 [JITLink] ppc64.h - fix MSVC ""not all control paths return a value"" warning. NFC.; 995f199f0a76 [JITLink][PowerPC] Correct handling of R_PPC64_REL24_NOTOC; 74f2a76904d7 [JITLink] Rename TableManager::appendEntry, add comment.; 79786c4d23f1 [JITLink][PowerPC] Fixed unused variable warning. NFC.; 61358d4fbeb3 [JITLink][PowerPC] Add TOC and relocations for ppc64; 52b88457baf8 [JITLink] Use SubtargetFeatures to store features in LinkGraph; 846bde483d63 Silence switch statement contains 'default' but no 'case' labels warning; NFC; 8313507a7c3f [JITLink][ELF][ppc64] Add skeleton ppc64 support and ELF/ppc64 JITLink backend.; ```; `52b88457baf8` can't be cherry-pick'ed cleanly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1864265043:305,assert,assertion,305,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1864265043,2,"['assert', 'stub']","['assertion', 'stubs']"
Testability,"> @chissg I see in logs:; > ; > ```; > [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::AMultB(int, int, int, double const*, double const*, double*)':; > [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x30): undefined reference to `cblas_dgemm'; > [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::ATMultB(int, int, int, double const*, double const*, double*)':; > [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x70): undefined reference to `cblas_dgemm'; > [2020-12-15T08:57:43.694Z] collect2: error: ld returned 1 exit status; > ```. Can I see the full command line that produced this, please? It might be an ordering issue. I'm confused that the initial build succeeded (https://travis-ci.org/github/root-project/root/builds/749627815?utm_source=github_status&utm_medium=notification)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950#issuecomment-745449838:19,log,logs,19,https://root.cern,https://github.com/root-project/root/pull/6950#issuecomment-745449838,1,['log'],['logs']
Testability,> @couet I think it's ready for first tests on your end (though not ready to be merged yet). @ferdymercury I took your branch. How to test it ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1076218541:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1076218541,2,['test'],"['test', 'tests']"
Testability,"> @couet; > In the CMake build log I see:; > ; > ```; > -- Checking internet connectivity...; > -- Yes; > ```; > ; > does this mean an internet connection is required? (would not be nice when just building the documentation).; > . No, it's just disabling the external packages requiring internet access if there is no internet connection",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887575337:31,log,log,31,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887575337,1,['log'],['log']
Testability,"> @dpiparo @hahnjo No amount of changes to the https://github.com/root-project/root/blob/master/.github/workflows/test-result-comment.yml seem to do literally anything on this PR, I even changed the name of the job and that is not reflected, I don't know what to outside merging this PR as it is (removing the debug commits ofc). It *could* be that the definition for `workflow_run` are taken from the target branch. I remember that this is the case for `pull_request_target`; for security reasons you don't want to run arbitrary code with ""elevated"" privileges. The GitHub documentation is unfortunately very scarce on this, so yes I agree, we should modify to the best of our knowledge and then merge. In the better case, it just works or in the worst case, we'll have to live with an empty comment :shrug:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14613#issuecomment-1932130842:114,test,test-result-comment,114,https://root.cern,https://github.com/root-project/root/pull/14613#issuecomment-1932130842,1,['test'],['test-result-comment']
Testability,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality?. No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13644#issuecomment-1723022582:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/13644#issuecomment-1723022582,3,['test'],"['test', 'tested', 'tests']"
Testability,"> @dpiparo we are tunning PR with modules, tests which failed in your PR is actually passing in master, please don't mind about them!. @oshadura no problem! thanks for the info.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2669#issuecomment-424028969:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2669#issuecomment-424028969,1,['test'],['tests']
Testability,"> @eguiraud Does that test fail in other circumstances?. I haven't seen it fail elsewhere, but it's a fairly new test and it's windows, so I wouldn't be surprised if we had a problem/bug. It does not seem to be related to the PR anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6404#issuecomment-696675823:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/6404#issuecomment-696675823,2,['test'],['test']
Testability,> @eguiraud would you mind trying your test-script with the current patch?. would be more robust to have a test with the patch :grimacing:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-1864583189:39,test,test-script,39,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-1864583189,2,['test'],"['test', 'test-script']"
Testability,"> @eguiraud, could you test #9404 on your setup?. @vgvassilev I have a similar setup (Arch Linux x86_64) and I can confirm that the patch fixes the problem. :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-991162788:23,test,test,23,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-991162788,1,['test'],['test']
Testability,"> @ellert BTW, is it supposed to work on all platforms?. For me it works for Fedora 34 - 37 and EPEL 7 - 9.; It should work for any system that has a libgtest and libgmock (.so or .a) in the system library path and headers in /usr/lib/gtest and /usr/lib/gmock. I added a commit to the PR adding compatibility with the older gmock versions in EPEL for a recently added test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301#issuecomment-1100944350:368,test,test,368,https://root.cern,https://github.com/root-project/root/pull/10301#issuecomment-1100944350,1,['test'],['test']
Testability,"> @ellert It is strange that the uring warning appears only in this unit test. Other unit tests use uring, too, and I would expect all of them to report uring issues consistently. Could you give me the full printout of the failed unit test?. ```; 472/1232 Test #423: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 29.66 sec; Running main() from /builddir/build/BUILD/googletest-release-1.11.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix; [==========] Running 3 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 3 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in [ROOT.NTuple] Warning /builddir/build/BUILD/root-6.26.02/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&) The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in [ROOT.NTuple] Warning /builddir/build/BUILD/root-6.26.02/tree/ntuple/v7/src/RNTupleSerialize.cxx:1105 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&) Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (8502 ms); [ RUN ] RNTuple.RandomAccess; Warning in [ROOT.NTuple] Warning /builddir/build/BUILD/root-6.26.02/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&) The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in [ROOT.NTuple] Warning /builddir/build/BUILD/root-6.26.02/tree/ntuple/v7/src/RNTupleSerialize.cxx:1105 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Exper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1100792435:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1100792435,10,"['Test', 'test']","['Test', 'test', 'test-ntuple-extended', 'tests']"
Testability,"> @ellert for me looks good, even though sadly we can't test it in CI! I remember that on aarch we had insignificant file size increase. Can I ask you please to add better explanation in commit (for the history) why tolerance was increased (e.g because of aach64 and ppc64le). The commit message already contains this information (click on the ... button top see more than the first line in the browser).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025#issuecomment-507696583:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/4025#issuecomment-507696583,1,['test'],['test']
Testability,"> @ellert thanks for the PR, but it looks like it doesn't work... The tests seem to be run with fail-on-missing.; Since most of the builtins have default OFF, I did the same for this one.; With fail-on-missing enabled the build then fails if the system googletest is not there.; So the test kind-of worked, since it tested this and acted accordingly. Should I change the default value for the builtin_gtest to ON, or should the tests be changed to install the system googletest?; It probably makes most sense for you to change the default. I will try that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301#issuecomment-1091174652:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/10301#issuecomment-1091174652,4,['test'],"['test', 'tested', 'tests']"
Testability,"> @etejedor @vgvassilev What do you want to do about libz3? Should we disable that in the builtin LLVM? It's probably a good idea not to let the builtin LLVM be influenced by whatever may be found on the system at build time. The option to disable is called LLVM_ENABLE_Z3_SOLVER. That's @vgvassilev or @Axel-Naumann 's call, the Python test is just notifying a new library that is loaded at `import ROOT` time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-824020800:337,test,test,337,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-824020800,1,['test'],['test']
Testability,"> @ferdymercury is that library already used in ROOT?. I don't think it's used yet in ROOT, but @henryiii could confirm. . > Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables). True. My experience is that there are many places doing CLI parsing over and over again within ROOT, so if we would replace everywhere, then we would remove more than 10k from ROOT's codebase, and reduce maintenance / bugs on ROOT's side, so it would be worth it. Or at least for new interfaces, see e.g. https://github.com/root-project/root/pull/14038. > Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib. That lib has many customization options, so a derived parser class could probably do it, but yeah, it's hard to say for sure in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2244874004:673,log,logic,673,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244874004,2,['log'],['logic']
Testability,"> @ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?. It's almost ready. Just missing the notebook and tutorial part. To test it, just clone my branch. Then:. Compile ROOT with CMake flag `-Ddocu=ON -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt -DDOXYGEN_EXECUTABLE=/opt/doxygen/build/bin/doxygen -DDOCU_INPUT=""./mainpage.md;../../core""`. You probably also need to disable WebCanvas in your .rootrc. Note, only specify DOCU_INPUT if you want to build a small part of the docu, to be quicker. Otherwise, it will get the default, which is to build all folders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2058589491:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2058589491,2,['test'],['test']
Testability,"> @ferdymercury, the test failure on alma8 is real. Good catch. Solved now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16570#issuecomment-2395172143:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/16570#issuecomment-2395172143,1,['test'],['test']
Testability,"> @guitargeek Maybe commit a comment on how to create the reference file above the test. Sorry that I didn't do that already. The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832034444:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832034444,2,['test'],['test']
Testability,"> @guitargeek too much time passed and I cannot restart the builds. Do you feel like rebasing so to trigger the tests and then, if satisfied, merge?. I will rebase so that we can see the status, but we can't merge it yet. First we need to make sure that Minuit 2 doesn't set parameter values outside of boundaries to begin with. This is still happening in the contour plots, and will be fixed by:. * https://github.com/root-project/root/pull/13966. After that PR is merged, I can come back to this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10470#issuecomment-2076840825:112,test,tests,112,https://root.cern,https://github.com/root-project/root/pull/10470#issuecomment-2076840825,1,['test'],['tests']
Testability,"> @guitargeek, can you remind me which was the test case that we had disabled on Windows and we found out that it mostly works now? I thought it was `testRooFuncWrapper.cxx` but I could not find any windows-related ifdefs... You don't see any ifdefs because the whole file is excluded at the CMake level:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/CMakeLists.txt#L51. However, in the HistFactory tests, your are doing the right thing by only excluding the AD tests :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1938117013:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1938117013,5,['test'],"['test', 'testRooFuncWrapper', 'tests']"
Testability,"> @hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong. No worries, that's somebody else who messed up a setup. I think we are ready to merge, thanks for taking the time!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675429807:103,test,test,103,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675429807,2,['test'],['test']
Testability,> @hageboeck do you know if these failures are something expected in projectroot.test.test_stressroostats_minuit2:. @oshadura A test that was previously inactive was re-enabled. Those failures are real. We better wait for @lmoneta to have a look at those results when he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059#issuecomment-666258821:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/6059#issuecomment-666258821,2,['test'],['test']
Testability,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking!. > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2382239702:643,test,tests,643,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2382239702,4,"['log', 'test']","['log', 'tests']"
Testability,"> @hahnjo hm that's an interesting clue, but then I still don't fully understand why `RooFit::TestStatistics::RooUnbinnedL` would give a different answer, because it also just calls `RooAbsPdf::extendedTerm`, so it should still get the exact same result... Yes, you are absolutely right, I got carried away by finding the first / one of the differences by comparing x86 to mac13arm. Looking some more why `RooUnbinnedL` gives two different results on the same platform, it is actually closely related: in `RooUnbinnedL::evaluatePartition`, the `extendedTerm` is added to the first partition, if `events.begin_fraction == 0`. With one big partition, this is added at the very end, just before returning. For the sub event sections, it is added to the first partition and the other partitions are later added on top. This exhibits different rounding, which is *triggered* by mac13arm using the FMA instructions and having a different `extendedTerm` than x86. One solution to this would be to add the `extendedTerm` to the last partition, that is if `events.end_fraction == 1`. This fixes `SimBinnedConstrainedTest.SubEventSections` on `mac13arm`, but makes it fail on x86 (didn't investigate why). It also makes `SimBinnedConstrainedTest.EventSections` fail (both on `mac13arm` and x86) - this test looks even worse in terms of floating point arithmetic, since it expects summing up two partitions individually and then adding the result being bitwise identical to summing up the whole range at once. From what I can see, this is only working by chance right now. > Or is the problem that the FMA operation on the different parts of the sum (the likelihood is calculated over multiple event ranges in the test that is failing, which are summed afterwards) has higher rounding errors on non-x86 so that in the end the result indeed differs?. See above; the additional problem is that the (optimizing) compiler will insert FMA operations if it sees fit (and is allowed to do so). So depending on how the c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1545342170:94,Test,TestStatistics,94,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1545342170,1,['Test'],['TestStatistics']
Testability,> @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!. @aandvalenzuela Did you get a chance to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1684403223:160,test,testing,160,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1684403223,2,['test'],"['test', 'testing']"
Testability,"> @hahnjo there is no stack trace unfortunately, just the assertion failure message. Were you able to reproduce yourself? I can reproduce on both my laptop and desktop machines, Ubuntu and CentOS7 with master, but not e.g. on lxplus. I didn't try yet, first checking if you might have more information that would accelerate diagnosis. I will build a debug version of Cling and try to reproduce :+1: with Axel and Javi on vacation, I might take a look if it's easy to fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899365169:58,assert,assertion,58,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899365169,1,['assert'],['assertion']
Testability,"> @hahnjo, looks like the test failures in #13139 that were fixed by this commit are gone. Any idea why?. It's possible that D153003 isn't needed anymore with LLVM 16. We should try reverting in ROOT 6.30 with LLVM 13...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14777#issuecomment-1956060611:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/14777#issuecomment-1956060611,1,['test'],['test']
Testability,"> @hahnjo; > ; > How can I reproduce this build:; > ; > https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/196057/consoleFull; > ; > I only see that is executed on `olbdw-01` host, but no any docker/vm configurations. Because that one is the ""old"" Jenkins, ie no container. There the old procedure applies, ie logging in via SSH. For the container based CI, there's instructions at the end of every build how to reproduce it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14750#issuecomment-1953617510:332,log,logging,332,https://root.cern,https://github.com/root-project/root/pull/14750#issuecomment-1953617510,1,['log'],['logging']
Testability,"> @ianna, this is the implicit conversion from a tuple of arguments: [wlav/CPyCppyy@eec92e5](https://github.com/wlav/CPyCppyy/commit/eec92e53af6e8eb0c89fe27332cdc23179059bb7); > ; > It is only accepted for C++ functions that are temporaries (const ref, by value, move), whereas returning a proxy object directly works in all cases except moves. In principle I could make both work in all cases, but this seems to be more logical, especially since methods could be overloaded. Fantastic! Thanks, @wlav!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12580#issuecomment-1492033623:421,log,logical,421,https://root.cern,https://github.com/root-project/root/pull/12580#issuecomment-1492033623,1,['log'],['logical']
Testability,> @jblomer the failure at https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/145821/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_ntuple/ seems real -- we get a different type name for mac 11..?. Looking into it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1140873521:106,test,testReport,106,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1140873521,2,['test'],"['test', 'testReport']"
Testability,> @jiangyilism I was wondering what's the status of this PR?. There is no pending issue as far as I know. The mac11/cxx14 test fail above is due to (flaky?) timeout so it seems irrelevant to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1590825591:122,test,test,122,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1590825591,1,['test'],['test']
Testability,"> @junaire tests _should_ be clean in CI builds, as you can see for this PR. Any failures are introduced by the code changes, possibly due to exposing other issues (as was the case here, leading to this fix). And it's not only some obscure platforms, but both macOS and two of the three Linux platforms. But we should discuss this on the PR itself, not here... Sorry about discussing unrelated content here, I sent you a message in mattermost. Anyway, thanks for your help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273032219:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273032219,1,['test'],['tests']
Testability,"> @junaire, can you test if this solves also your problems?. I haven't tested this, but @hahnjo said this almost fixes my issue in #10910, only `roottest-root-html-runMakeIndex` needs some tweaking for the generated header file. But I think this may not be a full ""workaround"" as it doesn't handle the root issue. In fact, Jonas did mention this doesn't help with the problems about `TSeq`, which means we still have to preload `ROOTDataFrame`. I also made my own fix (https://github.com/root-project/root/pull/10910/commits/4757b60656381a668b24a0ea0dbf6b77aff71e14) and I feel like it may be a better direction to work on (even though it also failed to fix `TSeq`...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272351665:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272351665,2,['test'],"['test', 'tested']"
Testability,"> @ktf can you please not debug in Jenkins? This should be investigated offline!. Sorry, but I cannot replicate it offline, I have tried mac, ubuntu and centos with a number of combinations of the various `-D*ASSERT*=ON`, `-DCMAKE_BUILD_TYPE=*` I can possibly think of. If you have a failing environment could you provide me access to it?. Alternatively, could you either provide me access to the the builder that is failing or let me know how I (i.e. the ALICE experiment) can loan you a machine to be hooked up in the same way as the other builders and use that one for testing (in case your concern is about resource usage)?. Alternatively, I am happy to keep testing adding debug statements and triggering new builds to find out why this fails in the ROOT jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1721573427:209,ASSERT,ASSERT,209,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1721573427,3,"['ASSERT', 'test']","['ASSERT', 'testing']"
Testability,"> @lmoneta, shouldn't we link the whole archive of libVc.a into MathCore? We see some failures such as:; > ; > ```; > root.exe -q -l -b test/testGenVectorVc.cxx ; > ; > Processing test/testGenVectorVc.cxx...; > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general14signMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > You are probably missing the definition of Vc_1::SSE::c_general::signMaskDouble; > Maybe you need to load the corresponding shared library?; > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general13absMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > You are probably missing the definition of Vc_1::SSE::c_general::absMaskDouble; > Maybe you need to load the corresponding shared library?; > IncrementalExecutor::executeFunction: symbol '_ZN4Vc_16Common10AllBitsSetE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; > You are probably missing the definition of Vc_1::Common::AllBitsSet; > Maybe you need to load the corresponding shared library?; > warning: Failed to call `testGenVectorVc()` to execute the macro.; > Add this function or rename the macro. Falling back to `.L`.; > ```; > ; > Where:; > ; > ```; > nm externals/usr/local/lib/libVc.a | grep _ZN4Vc_13SSE9c_general14signMaskDoubleE; > 0000000000000580 R _ZN4Vc_13SSE9c_general14signMaskDoubleE; > ```. @lmoneta ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-899807507:136,test,test,136,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-899807507,5,['test'],"['test', 'testGenVectorVc']"
Testability,"> @mrodozov does ROOT master works for you with 2021.1.1? (cc: @xvallspl ). I started testing it for master just now. I didn't check before asking :D that's because 6.22 is of greater importance. > @mrodozov The deprecated functionality was removed a while ago and the fix will be included in the next release.; > ; > I will bring up backporting it to 6.22. great, we use 6.22 for our main releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6933#issuecomment-762125007:86,test,testing,86,https://root.cern,https://github.com/root-project/root/issues/6933#issuecomment-762125007,1,['test'],['testing']
Testability,"> @oshadura How can I get the path to the `requirements.txt` in the test? `ROOTSYS` does not really help because it points to the build dir, I would need the path to the source dir. Supposing the test is under ""path/to/root/bindings/pyroot_experimental/pythonizations/test/"" you could do:; ```; import os; abspath = os.path.abspath(__file__) # path/to/root/bindings/pyroot_experimental/pythonizations/test/test.py; reqpath = os.path.join(abspath.partition(""bindings/"")[0], ""requirements.txt"") # path/to/root/requirements.txt. with open(reqpath) as f:; ...; ```. Though I wonder whether the requirements.txt file would be better suited under the bindings folder since it's python related?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-617016560:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-617016560,5,['test'],['test']
Testability,"> @oshadura yes, the following minimal reproducer runs in 13 seconds on my workstation with built-in LZMA, and in 6 with LZMA installed from system packages. 75% of the runtime is spent in `R__zipLZMA` in the slow case, 48% in the fast case.; > ; > This patch fixes that runtime difference.; > ; > (EDIT: plus from the [build log](https://github.com/root-project/root/files/5049830/LZMA-build-out.log) of built-in LZMA you can see no optimization flags are added at the moment); > ; > ```c++; > // write_lzma.cpp; > #include <ROOT/RDataFrame.hxx> ; > #include <TStopwatch.h> ; > #include <iostream> ; > ; > int main() { ; > ROOT::RDF::RSnapshotOptions opts; ; > opts.fCompressionAlgorithm = ROOT::kLZMA; ; > opts.fCompressionLevel = 6; ; > opts.fLazy = true; ; > auto trigger = ROOT::RDataFrame(50000000).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""}, opts); ; > TStopwatch s; ; > s.Start(); ; > *trigger; ; > s.Stop(); ; > std::cout << s.RealTime() << std::endl; ; > return 0; ; > }; > ```. btw, nice benchmark!!! I vote to add it in rootbench.git :+1: . (Actually even just to tune parameters: https://github.com/root-project/rootbench/blob/master/root/io/io/TFile_RDFSnapshot.cxx )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6144#issuecomment-671240797:326,log,log,326,https://root.cern,https://github.com/root-project/root/pull/6144#issuecomment-671240797,3,"['benchmark', 'log']","['benchmark', 'log']"
Testability,"> @oshadura; > ; > There are also [real failures](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/116051/console) produced by new `root-webgui-ping` test, but I do not see any error output :(. ahhhhh.... I didn't notice, sorry!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829147751:174,test,test,174,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829147751,1,['test'],['test']
Testability,"> @osschar the problem that it will not work...; > ; > Having TGLIncludes.h (with #include <GL/glew.h>) make RGL depends on GLEW, and then as a consequence, I need to put graf3d\ftgl (FTGL) depends on RGL. Having this is creating circular dependency:; > ; > ```; > CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):; > ""FTGL"" of type SHARED_LIBRARY; > depends on ""RGL"" (weak); > ""RGL"" of type SHARED_LIBRARY; > depends on ""FTGL"" (weak); > At least one of these targets is not a STATIC_LIBRARY. Cyclic dependencies are allowed only among static libraries.; > CMake Generate step failed. Build files cannot be regenerated correctly.; > make: *** [Makefile:9096: cmake_check_build_system] Error 1; > ```; > ; > Why it was not visible before because TGLIncludes.h were copied in ${CMAKE_BINARY_DIR}/include/ where it was picked up by whatever ROOT library you were building before. To achieve better modularity this could be fixed, in a way, I am proposing in this PR.; > ; > Here is a test PR I opened to show you an error for your proposal: #4786; > ; > ```; > C:\build\workspace\root-pullrequests-build\build\include\TGLIncludes.h(21,10): fatal error C1083: Cannot open include file: 'GL/glew.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\graf3d\ftgl\FTGL.vcxproj]; > ```. Oh, but why don't you just make the change to direct GL/glew.h inclusion in FTGL then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-596676095:1039,test,test,1039,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-596676095,1,['test'],['test']
Testability,"> @pcanal I had been running the master branch for tests and builds all this time, and not my patch branch; that's why its been failing the Jekyll build 😅 It should be ready now. My apologies for the repeated reviews. Can I have the review for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1808298510:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1808298510,1,['test'],['tests']
Testability,"> @pcanal can we have a test for this? This sounds pretty terrible to get wrong... ping? Unless I'm blind, I don't think we have a test for this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1681698733:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1681698733,2,['test'],['test']
Testability,"> @pcanal did you mean ... -Dbuiltin_zstd=ON . Well ... that is one test to run ... but also since without it does not ""work"" , we can't merge ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541337677:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541337677,1,['test'],['test']
Testability,"> @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On. It seems that Jenkins failed, but I cannot access the logs, so I do not know what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2041031336:114,log,logs,114,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2041031336,1,['log'],['logs']
Testability,"> @phsft-bot build!; > ; > Could you update the commit message to something like:; > ""[rootcling] Don't generate dictionary to throw it away when called with -r; > ; > This patch should speed up rootcling -r and simplify some of the conditional logic."". It's just cosmetics, but could you maybe shorten the first line a bit more? In github, the `-r` starts to fall into the next line.; ""[rootcling] Suppress dictionary when called with -r.""; Then, the ""throwing away"" part etc can go into the body.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5223#issuecomment-606481867:245,log,logic,245,https://root.cern,https://github.com/root-project/root/pull/5223#issuecomment-606481867,2,['log'],['logic']
Testability,"> @sanjibansg I think we can merge the parsing of the Concat operator and add the direct Keras and PyTorch parsing later. Do you have time to fix these conflicts and rebase ?. Yes surely, I will rebase to fix the conflicts. I think I need to add a test for parsing the ONNX Concat Op with axis=0, I will add that as well soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9311#issuecomment-1080473478:248,test,test,248,https://root.cern,https://github.com/root-project/root/pull/9311#issuecomment-1080473478,1,['test'],['test']
Testability,"> @smuzaffar Could you check if this break any CMSSW code? Actually more interesting is: #14444. @pcanal , cmssw tests are running via https://github.com/cms-sw/root/pull/196",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14441#issuecomment-1911648216:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/14441#issuecomment-1911648216,1,['test'],['tests']
Testability,"> @smuzaffar Could you check if this break any CMSSW code? Actually more interesting is: #14444. It doesn't matter which one you test, they both contain the commit with the `GetAddress()` and `GetObject()` return type",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14441#issuecomment-1911139719:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/14441#issuecomment-1911139719,1,['test'],['test']
Testability,"> @smuzaffar Could you check if this break any CMSSW code?. @pcanal , cmssw tests started via https://github.com/cms-sw/root/pull/197",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14444#issuecomment-1911646951:76,test,tests,76,https://root.cern,https://github.com/root-project/root/pull/14444#issuecomment-1911646951,1,['test'],['tests']
Testability,> @smuzaffar can you trigger a build on the ppc64 infrastructure for cmssw?. CMS tests started via https://github.com/cms-sw/root/pull/188,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1761294870:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1761294870,1,['test'],['tests']
Testability,"> @smuzaffar, can we run this PR against cmssw?. CMSSW tests are running via https://github.com/cms-sw/root/pull/198 (note that cmssw tests are running for non-CXXMODULES builds)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1923400186:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1923400186,2,['test'],['tests']
Testability,"> @smuzaffar, can you apply this PR in cmssw and see if something breaks?; > . @vgvassilev , tests for cmssw are running via https://github.com/cms-sw/root/pull/171 . Nothing failed, so looks good for the short tests we run for PR tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1167317164:93,test,tests,93,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1167317164,3,['test'],['tests']
Testability,"> @smuzaffar, can you test this PR within cmssw?. @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1621800231:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621800231,3,['test'],"['test', 'tests']"
Testability,"> @smuzaffar, can you test with cmssw the current state of this PR?. @smuzaffar, ping.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1148818032:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1148818032,1,['test'],['test']
Testability,"> @smuzaffar, the jenkins link does not open for me. Can you attach the log here. The build works for me -- `cmsbuild@ibmminsky-1:/scratch/cmsbuild/vvasilev/rootobj`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-986182056:72,log,log,72,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-986182056,1,['log'],['log']
Testability,"> @smuzaffar, we will probably start moving towards more upstream llvm parts in Cling. These PRs need to be tested on cmssw because of relocation and pcms. Can you test this PR?. CMSSW tests started via cms-sw/root#206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2082570918:108,test,tested,108,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2082570918,3,['test'],"['test', 'tested', 'tests']"
Testability,"> @stwunsch @bellenot I'm confused, there is no mention of what issue this commit is meant to fix in the commit message or the PR. Plus the discussion at ROOT-10560 is for `TThreadExecutor`, but this PR is about `TTreeProcessorMT`..?. @bluehood sorry, I created this PR before the Jira issue... Without this patch, the test crash on Windows due to a division by zero at this line (224) in `TTreeProcessorMT`:; ```; const auto nFolds = clustersInThisFileSize / maxTasksPerFile;; ```; `maxTasksPerFile` being zero at line 218:; ```; const auto maxTasksPerFile = TTreeProcessorMT::GetMaxTasksPerFilePerWorker() * ROOT::GetImplicitMTPoolSize();; ```; since `ROOT::GetImplicitMTPoolSize()`, which calls `ROOT::Internal::TPoolManager::GetPoolSize()` returns zero, because the `TPoolManager::fgPoolSize` default value is 0, and the constructor of `TPoolManager` has never been called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4947#issuecomment-583272612:319,test,test,319,https://root.cern,https://github.com/root-project/root/pull/4947#issuecomment-583272612,1,['test'],['test']
Testability,"> @stwunsch do we keep this PR or #5361 ?. We keep both :) The other test checks the usage of the ROOT namespace implicitly (so not ROOT.ROOT.RDataFrame but just ROOT.RDataFrame). That RVec was part of this there was just by chance. I think testing this ""feature"" explicitly in the RVec tests is a good idea from the documentation point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7687#issuecomment-816488389:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/7687#issuecomment-816488389,3,['test'],"['test', 'testing', 'tests']"
Testability,"> @surya2191997 can you please include test cases for the forward, backward pass and other functional TCs required. Backward pass is still not working, thats why I have not included tests. Shall include it in my next commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6091#issuecomment-665105299:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/6091#issuecomment-665105299,2,['test'],"['test', 'tests']"
Testability,"> @vepadulano this PR doesn't have Philippe's fix and therefore blocks the `mac12` and `mac13` nodes (until I notice and manually cancel the jobs). If this needs more CI runs, please consider rebasing on latest `master` to avoid that... Thank you for noticing. I have just sync the branch, I hope now the tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14730#issuecomment-1964288369:305,test,tests,305,https://root.cern,https://github.com/root-project/root/pull/14730#issuecomment-1964288369,1,['test'],['tests']
Testability,"> @vgvassilev , I have started the tests here [cms-sw#185](https://github.com/cms-sw/root/pull/185). Awesome! Thanks a lot @smuzaffar!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1665262143:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1665262143,1,['test'],['tests']
Testability,"> @vgvassilev , `-DLLVM_BUILD_TYPE=Debug` did not help much. It failed again with the same error ( see https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25499/external/py3-hepdata-lib/0.8.1-23017aefcaec1f6e033b49c0652b0cd2/log ). @smuzaffar, but this great :) Now if you tell me the recipe to debug it would be awesome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1155124994:253,log,log,253,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1155124994,1,['log'],['log']
Testability,"> @vgvassilev , as @makortel mentioned above , you can do something like the following on lxplus to reproduce this build failure; > ; > ```; > #Login to lxplus and start cmssw-el8 container; > > ssh lxplus; > > cd cd /tmp/$(whoami); > > source /cvmfs/cms.cern.ch/cmsset_default.sh; > > cmssw-el8; > # Create CMSSW area using PR artefacts; > > /cvmfs/cms-ci.cern.ch/week1/cms-sw/root/208/41293/install.sh; > > cd CMSSW_14_2_ROOT6_X_2024-09-03-2300/; > > cmsenv; > #Build root dict; > > scram b -v -j 10 tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc; > ```. I just got autowarned:. ```; The LxPlus service is now monitoring CPU and Memory Pressure Stall; Informaton (PSI) on each node. The LxPlus node lxplus974.cern.ch has been identified as under io pressure.; Your processes are currently the highest contributor to that pressure. In particular, the some_avg300 value for io is 57.04% which; is over the threshold of 50%. This is the percentage of time that; resources are being wasted due to cpu context switching or thrashing memory.; This impacts all users of the service, including yourself, as your; own processes fight with one another.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332302392:144,Log,Login,144,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332302392,1,['Log'],['Login']
Testability,"> @vgvassilev , cms tests failed. Looks like hepdata-lib package, see the build error [here](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-57f21d/29184/external/py3-hepdata-lib/0.10.1-d5a65a50fc66bb6ceb2097b9bc30c480/log); > ; > ```; > Processing ./v0.10.1.tar.gz; > Preparing metadata (setup.py): started; > Running command python setup.py egg_info; > input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/build/etc/cling/libc.modulemap); > #include <new>; > ^; > input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm'; > Warning in cling::IncrementalParser::CheckABICompatibility():; > Failed to extract C++ standard library version.; > Replaced symbol atexit cannot be found in JIT!; > Replaced symbol at_quick_exit cannot be found in JIT!; > <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/libc.pcm' is out of date and needs to be rebuilt; > Failed to load module libc; > Failed to load module std; > Failed to load module _Builtin_intrinsics; > Failed to load module _Builtin_intrinsics; > Failed to load module std; > Failed to load module libc; > python3: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326879491:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326879491,8,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"> @vgvassilev - I added this patch for tonight's cmssw modules IB for a test... Thank you, David! BTW how can I see the test result?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1181579834:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1181579834,2,['test'],['test']
Testability,> @vgvassilev - I added this patch for tonight's cmssw modules IB for a test... Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1180702756:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1180702756,1,['test'],['test']
Testability,"> @vgvassilev Can you explain me, why the test cases failed? [#10593 (comment)](https://github.com/root-project/root/pull/10593#issuecomment-1128002967). These tests were broken on 32-bit platforms for a while, should be fixed now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1129721828:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1129721828,2,['test'],"['test', 'tests']"
Testability,"> @vgvassilev Do we actually have any tests that checks that things still work if the files used to produce the pcm (or the pch) are gone and/or not longer accessible? (i.e. the test framework would have to explicitly hides/move/removes some files to achieve this). We seem to have builders that use the PCH (nortcxxmod). Then, we have cmssw that has the hybrid model, forward declarations and modules, including relocating the ROOT build - I doubt we would not catch the failure of this patch. I suspect what saves us here is several optimizations we did over the years where rootcling does not produce a lot of virtual file entries and basically pch/pcm files have less (but not 0) virtual files. @Axel-Naumann, I think you should know better - you created the patch long time ago ;) My memory is that we were trying to fix something with cms/atlas and PCH?. > * for this PR to be correctly validated we need to have tested a setup where the build directory is not available anymore at runtime. Does CMS test this, @smuzaffar @vgvassilev ?. Oh, yes, they do :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139459615:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139459615,4,['test'],"['test', 'tested', 'tests']"
Testability,"> @vgvassilev FYI `mac14arm` fails to build the dictionary for `TMVAUtils`, with a crash in `cling::DeclCollector::HandleInterestingDecl`... Ha, ok, until now I only saw `Failed to open the S3 connection: You must provide an auth secret.`. That might be ""just"" missing a `PushTransactionRAII` on our side. Is there a way to build a debug + asserts version of that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1978586425:340,assert,asserts,340,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1978586425,1,['assert'],['asserts']
Testability,"> @vgvassilev I see ` In case an identifier is defined in both (eg TMVA::Event and X::Event), the GMI will take priority and load the TMVA module without later allowing the system to look for other candidates.`. Could you explicit in the commit log why an unrelated fully qualified name (`TMVA::Event`) takes precedence over another fully qualified name (`X::Event`). The GMI contains Identifier->list_of_modules mapping. This means that a lookup for `Event` will give all modules in a fully modularized system. However, until today, we have not considered (nor had the tests for) the hybrid approach where parts of the names are resolved from a rootmap files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1014883004:245,log,log,245,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1014883004,2,"['log', 'test']","['log', 'tests']"
Testability,"> @vgvassilev If I see it correctly - it is just cleanup of historical code. No any real changes. That's what I am worried about. When this code changes even for NFCs there is always somebody that complains something broke. Doing it before branching leaves almost no place for testing even from within the team and experiments which build often against the master. The question is whether it pays off to change that so late and then potentially fix things under pressure asap, backport patches and make urgent patch releases. I think it does not. If @Axel-Naumann thinks otherwise, go ahead...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5573#issuecomment-625294109:277,test,testing,277,https://root.cern,https://github.com/root-project/root/pull/5573#issuecomment-625294109,1,['test'],['testing']
Testability,"> @vgvassilev It is a bit surprising that `rootlcing --reflex ... selection.xml` works but `rootcling ... selection.xml` partially works but silently fails. The current code will parse and use the selection.xml but a few internal part (of the selection.xml handling) are disabled without the `--reflex`. See `rootcling_impl.cxx:406` for example. Ah, yes, that makes sense. We have seen that on several occasions actually and that’s why we added this flag. Do you want to turn that logic on when we see selection.xml file? Is there a use case where we would want rootcling only behavior and still pass a selection.xml file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13543#issuecomment-1696821525:481,log,logic,481,https://root.cern,https://github.com/root-project/root/issues/13543#issuecomment-1696821525,1,['log'],['logic']
Testability,"> @vgvassilev Thanks for review.; > To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive. I can do it for you if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603752145:51,log,logical,51,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603752145,1,['log'],['logical']
Testability,> @vgvassilev The fix for the CUDA support is ready and all CUDA tests passes. You can find it here: [SimeonEhrig@b683be2](https://github.com/SimeonEhrig/root/commit/b683be20d3e8f08ad6bb8f484bdb2a978a8450cc); > ; > It is on the branch [fixCUDAllvm13](https://github.com/SimeonEhrig/root/tree/fixCUDAllvm13) in my root fork. That's awesome @SimeonEhrig!! Pushed the patch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1196612161:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1196612161,1,['test'],['tests']
Testability,"> @vgvassilev as I wrote on Mattermost, this change was particularly written to address Jun's problem. `roottest-root-html-runMakeIndex` is a separate thing that needs addressing anyhow; it's only now visible because all the other failures are gone.; > ; > FWIW I don't agree that the workarounds (hacks) introduced in #10910 are a good way to go, as shown by the many failing tests. The scope of the changes is too big and there are valid reasons to do something with `Decl`s currently being defined, as evidenced by the many failing tests. Adding more conditions will eventually only lead to internally inconsistent states... The ""workaround"" introduced in #10910 is not only intended to address my problem but also serves as a more generic fix. It makes more sense right? disable the callback when we're instantiating templates. > as shown by the many failing tests. Ahh... yes and no, actually we're almost getting there. Currently, it is just some strange failures in some specific build bots (`ROOT-debian10-i386` and mac builders) We also haven't tested that separately so who knows what triggered the failure. I'm not really sure which way is the best to go, we still need time to discover, can you check if that patch fixes your issue? Also, I would appreciate it if you can take a look at the failures to see if you have a clue or not :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273015498:377,test,tests,377,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273015498,4,['test'],"['tested', 'tests']"
Testability,"> @vgvassilev do we need this open, are there followups to the failing tests?. Yes, on the clad side. We should keep this open for a little longer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1896117139:71,test,tests,71,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1896117139,1,['test'],['tests']
Testability,"> @vgvassilev do you object to me merging? I'd want to see this exposed to users earlier rather than later, to hear feedback before we tag v6.26. I have opened an issue #9312 to keep track. No objections. What I'd like to understand is how much code regressed. But also, is the performance benefit significant outside of RDF. Both probably require more field testing... I suspect that for many cases we will be okay. There will be a number of regressed cases. What is unclear is how many are going to be the significantly improved cases. I believe for RDF we control the environment and compile even with -O2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-973325971:359,test,testing,359,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-973325971,2,['test'],['testing']
Testability,"> @vgvassilev would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?. If you simplify things, you still need the custom streamer (because RIOLite does not have access to Cling) *and* you need to add new code to transform the simple form into the run-time form. So it just split the custom streamer in 2 part :). None of this is ""hard"" but it is need some typing (and testing) time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-722648289:438,test,testing,438,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722648289,2,['test'],['testing']
Testability,"> @vgvassilev; > ; > User CPU time, 2nd run of all tests:; > test 	opt 	non-opt; > stressGeometry.cxx 	20.10 	19.36; > stressHistogram.cxx 	16.52 	15.89; > stressGraphics.cxx 	57.68 	16.13; > ; > stressGraphics generates code that's full of virtual function calls. This used to explode; a factor 4 is still terrible but given that this is on the ""awkward"" side of our legacy code likely a price we need to pay. The question is how many tutorials and code such as stressGraphics.cxx we have, and more importantly how much of the experiments/users use that style of coding/interfaces.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-971694661:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-971694661,2,['test'],"['test', 'tests']"
Testability,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict).; > ; > For example after doing `ctest -R MakeProject`, you could test:; > ; > ```; > {; > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");; > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");; > TTree *tree = nullptr; f->GetObject(""Events"", tree);; > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);; > }; > ```; > ; > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-471050063:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-471050063,3,['test'],['test']
Testability,"> A doubt: is the test really testing the example provided in #13965 ?. In #13965, the issue was that when we try to call a TF1 constructor with wrong arguments in root, it segfaults. We were trying to use the type information we didn't have, and that was causing the segfault. . This is similar to calling a function with wrong arguments and is a standalone test case. I can try to use TF1 in the test case too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14451#issuecomment-1916269380:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14451#issuecomment-1916269380,4,['test'],"['test', 'testing']"
Testability,"> A doubt: is the test really testing the example provided in #13965 ?. To add to Dev's reply, the crash message for the code provided in that issue changed after the upgrade to LLVM 16. I agree it's the same underlying problem, ie calling a function / constructor with the wrong number of arguments so that the `auto` deduction doesn't work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14451#issuecomment-1916315141:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14451#issuecomment-1916315141,2,['test'],"['test', 'testing']"
Testability,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1771774458:501,test,test,501,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1771774458,2,['test'],['test']
Testability,"> About the exact line, sorry, I can't tell you.. we have very parallel builds (not verbose as well) but you can easily reproduce while compiling libMathMore.so.6.23.01. Unfortunately, it wasn't ""easy to reproduce"" because it required specific packages to be present (and not present) on the system. However, @pcanal was able to run some interactive commands on the node and I got the information I needed. Your test systems have Netlib BLAS installed, wherein `cblas` functions are in a different library than `blas` functions (the latter, I believe, being implemented in Fortran), whereas mine used OpenBLAS, which provides only one library containing everything. GSL uses functions found only in `cblas`, so `FindBLAS.cmake` sufficient to satisfy GSL's needs in only the latter case, which is why I didn't see the problem. The situation is further complicated by the fact that TMVA can handle both situations via conditional compilation (`-DTMVA_USE_CBLAS`). It will require some care to ensure thatall possible situtations can be handled while satisfying the original goal of my PR, that of ensuring consistency of BLAS implementation between all dependents. Since the holiday break is looming and I have other demands on the remaining time, I am closing this PR for the nonce; thanks for your help and time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950#issuecomment-746242933:412,test,test,412,https://root.cern,https://github.com/root-project/root/pull/6950#issuecomment-746242933,1,['test'],['test']
Testability,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:; https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-447906384:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-447906384,1,['test'],['tests']
Testability,"> Actually the issue seems stranger than expected. At the moment, I can not reproduce the problem. It seems to reproduce reasonably well when compiling with Clang (on EL8 and, according to the nightlies, also on Ubuntu 20.04). That said, in my local ASan build the test hangs and runs into a timeout (0% CPU usage after a few seconds), so no sanitizer output unfortunately... > Rerun the test with ASAN and a single thread [...]. This crashes with the same stack trace in the ""regular"" build (without sanitizer turned on).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715#issuecomment-1554204757:265,test,test,265,https://root.cern,https://github.com/root-project/root/issues/12715#issuecomment-1554204757,2,['test'],['test']
Testability,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:; ```; root [0] namespace NS { template <typename T> struct A; }; root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };; root [2] TClass::GetClass(""B<NS::A<int>>""); (TClass *) nullptr; root [3] namespace NS { template <> struct A<int> { int v; }; }; root [4] B<NS::A<int>> b;; error: static_assert failed; fatal error: cannot open file 'input_line_114': No such file or directory; ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here; B<NS::A<int>> b;; ^; ```; whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1759250811:161,test,test,161,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1759250811,1,['test'],['test']
Testability,"> After updating ROOT to [026a1a7](https://github.com/root-project/root/commit/026a1a701b246b495fda3054719a2a224e4299f8), the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log). Correction: the first error is still there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1430101217:230,log,log,230,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1430101217,2,['log'],['log']
Testability,> Ah I broke pretty-printing of `std::map` 🤦‍♂️. I'm proud of our test coverage :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-815643040:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-815643040,1,['test'],['test']
Testability,"> Ah yes, I had not thought about the py2 compatibility! I have now pushed the fix for that. Hope that works.; > ; > Unfortunately I don't have access to the details of the failing tests. Is there something else to do for the other test that @hageboeck mentioned?. Nope, you cannot do anything on the python side. It's a numerical instability that arises due to multi-threaded processing, and it's not related to the pythonisation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314#issuecomment-794106136:181,test,tests,181,https://root.cern,https://github.com/root-project/root/pull/7314#issuecomment-794106136,2,['test'],"['test', 'tests']"
Testability,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638493780:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638493780,1,['test'],['testing']
Testability,"> Ah, I think I know the issue: `std::rotate` is not exactly what we're looking for. It's typically **only one** out of 0, 1 or 2 (or sometimes 3 (or 4...)) that is put in front. After that, the rest of the tasks will go in intended order. So we should remove the first element from the completed range and insert it in front of `expected_order`. But isn't this exactly what `std::rotate` does? It is even explicitly recommended for deletion and reinsertion because it's faster:; https://stackoverflow.com/questions/29785266/moving-object-to-front-of-vector-c. Maybe I'm missing something, but what exactly is the logical difference between the code I suggested and the code you have now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627#issuecomment-1330068076:614,log,logical,614,https://root.cern,https://github.com/root-project/root/pull/11627#issuecomment-1330068076,1,['log'],['logical']
Testability,"> All check passed. LGTM. Thanks! Still testing, since it's for debug builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16181#issuecomment-2275272161:40,test,testing,40,https://root.cern,https://github.com/root-project/root/pull/16181#issuecomment-2275272161,1,['test'],['testing']
Testability,"> Almost 10/10, only denied by the a spurious failure on `Windows 10 x64 Release`... Thanks for approving. The error is only a test failure (`tutorial-v7-concurrentfill.cxx`)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14314#issuecomment-1882988047:127,test,test,127,https://root.cern,https://github.com/root-project/root/pull/14314#issuecomment-1882988047,1,['test'],['test']
Testability,"> Almost there! slightly_smiling_face; > ; > Please, test the implementation after applying the suggestions; after that, I think we can squash into a single commit and merge. It's working well, but we have a crash if I perform the following (stupid) sequence:. - press CTRL+S; - write 'int'; - press CTRL+S again. ```; ===========================================================; #10 __memchr_avx2 () at ../sysdeps/x86_64/multiarch/memchr-avx2.S:65; #11 0x00007f9a4575a505 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6; #12 0x00007f9a45e00162 in textinput::Editor::UpdateHistSearch (this=0x560b564df640, R=...) at /opt/root_src/core/textinput/src/textinput/Editor.cpp:124; #13 0x00007f9a45e00a77 in textinput::Editor::ProcessCommand (this=0x560b564df640, M=textinput::Editor::kCmdForwardSearch, R=...) at /opt/root_src/core/textinput/src/textinput/Editor.cpp:285; #14 0x00007f9a45dffb48 in textinput::Editor::Process (this=0x560b564df640, cmd=..., R=...) at /opt/root_src/core/textinput/src/textinput/Editor.cpp:67; #15 0x00007f9a45e1049d in textinput::TextInput::ProcessNewInput (this=0x7f9a462fd880 <(anonymous namespace)::TextInputHolder::getHolder()::sTIHolder>, in=..., R=...) at /opt/root_src/core/textinput/src/textinput/TextInput.cpp:174; #16 0x00007f9a45e10117 in textinput::TextInput::ReadInput (this=0x7f9a462fd880 <(anonymous namespace)::TextInputHolder::getHolder()::sTIHolder>) at /opt/root_src/core/textinput/src/textinput/TextInput.cpp:126; #17 0x00007f9a45dfe363 in Getlinem (mode=kOneChar, prompt=0x0) at /opt/root_src/core/textinput/src/Getline.cxx:256; ===========================================================; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10208#issuecomment-1082943729:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/10208#issuecomment-1082943729,1,['test'],['test']
Testability,"> Alright, I think I managed to hunt down and fix the underlying issues that required removing the `assert` and disabling the IR verifier: https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443 Assuming these go through upstream, we could either revert the ""hacky"" LLVM patch (and replace it by two backports for LLVM 13), or just wait for the next LLVM upgrade (and close this PR). What do you think @Axel-Naumann @vgvassilev?. I'd prefer to replace the hacky patch with the backports as they are now. This way we have at least one more source to track what happened to the particular issue. If they end up closed there will be a reason or an alternative which will make it easier to get rid of the non-merged backport patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12074#issuecomment-1402001581:100,assert,assert,100,https://root.cern,https://github.com/root-project/root/pull/12074#issuecomment-1402001581,1,['assert'],['assert']
Testability,"> Also maybe I'd put the tree argument before the step argument because I don't expect the step argument to be used much? (but maybe that's also the case for tree?). I put the step first because I felt it went ""logically"" after the other two integer arguments. I really wouldn't know what could be used more between that and the tree argument",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-895275602:211,log,logically,211,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895275602,1,['log'],['logically']
Testability,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code?. I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796#issuecomment-319126181:152,log,log,152,https://root.cern,https://github.com/root-project/root/pull/796#issuecomment-319126181,1,['log'],['log']
Testability,"> Although: I'm not exactly sure if already existing files that were serialized with a shorter enum correctly read back. I _think_ yes, but that needs to be tested. This I can try on my side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2320441112:157,test,tested,157,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2320441112,1,['test'],['tested']
Testability,"> An alternative would be to check in a ""known"" hsimple.root and not generate it on the fly. This has the disadvantage of no longer testing differences in how we write it. Albeit we could store a known version and used it (read it) to write a new version. > found a better solution by disabling floating point contractions .... . Even better :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1656177155:132,test,testing,132,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1656177155,1,['test'],['testing']
Testability,"> And I confirm that it does, as code in unnamed macros is wrapped as needed. Unless @Axel-Naumann, @vgvassilev or @hahnjo suggest otherwise, the only thing missing is to fix the two failing tests reported above. **EDIT:** sibling roottest PR is https://github.com/root-project/roottest/pull/951.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1512889140:191,test,tests,191,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1512889140,1,['test'],['tests']
Testability,"> And by the way, I cannot reproduce locally these warnings. For example:; > ; > ```; > ...; > Info in <TCanvas::Print>: SVG file mathsymb.svg has been created; > Info in <TCanvas::Print>: png file /Users/couet/rootdoc/html/pict1_latex5.C.png has been created; > Info in <TCanvas::Print>: ps file mathsymb.ps has been created; > ...; > ```; > ; > On the log-ouput you pointed we can see a warning about `latex5.C` but locally, with a fresh build, it is fine. No warning. Maybe it would be useful to add to the Jenkins build a step that cleans the git repository on sftnight before starting the build? To get fresh builds there too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1302771481:354,log,log-ouput,354,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1302771481,1,['log'],['log-ouput']
Testability,"> And oddly enough, the exact inverse operation was introduced by [3900b83](https://github.com/root-project/root/commit/3900b83fda07d9b2e5ba03088939615caef4140a) with log; > ; > ```; > Provide the definition of kDimension before use.; > ```. Yes, we need a *declaration* or the compiler will start complaining (ie it wants to know that the template is instantiated somewhere). However, a non-`inline`able *definition* (and that's the case for all variable definitions until C++17) is always wrong in header files, as can be observed by `#include`ing this header into multiple TUs and then trying to link the resulting object files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10617#issuecomment-1134244376:167,log,log,167,https://root.cern,https://github.com/root-project/root/pull/10617#issuecomment-1134244376,1,['log'],['log']
Testability,"> And we prefer static libs, because that allows us to hide symbols more effectively, and e.g. some NVidia driver famously exposed all LLVM symbols - of its own LLVM libraries! - to the process, causing conflicts, so we do want to hide those LLVM symbols. Some quick tests with `bin/root` show me that I don't have any llvm symbols available. I haven't done a proper check by reading the symbols though / CMake transitive link libraries though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1662518682:267,test,tests,267,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1662518682,1,['test'],['tests']
Testability,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ?. This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws).; * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-791556472:753,test,test,753,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-791556472,1,['test'],['test']
Testability,> Any chance for a test in cling’s teatsuite?. See https://github.com/root-project/roottest/pull/808 (not sure how to link them),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1021348426:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1021348426,1,['test'],['test']
Testability,> Any chance that that could be done?. Certainly! What would such a test look like?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6609#issuecomment-707028437:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/6609#issuecomment-707028437,1,['test'],['test']
Testability,"> Any chance to run the failing process in valgrind?. I don't have any power on the process that fail itself, it's a task run inside of the `dask` worker and its scheduling is out of my control. On other news, I made a few more tests focusing on the version of dask `distributed` module. In the description of the issue above I stated `distributed==2022.7.1`, this was my starting version for the tests I will describe in the following. First, I noticed this type of error, happening between a test and another; ```; 2022-10-08 02:33:36,474 - tornado.application - ERROR - Exception in callback functools.partial(<bound method IOLoop._discard_future_result of <tornado.platform.asyncio.AsyncIOLoop object at 0x7f946cbb8340>>, <Task finished name='Task-245' coro=<SpecCluster._correct_state_internal() done, defined at /home/vpadulan/.local/lib/python3.10/site-packages/distributed/deploy/spec.py:330> exception=RuntimeError('cannot schedule new futures after shutdown')>); Traceback (most recent call last):; File ""/home/vpadulan/.local/lib/python3.10/site-packages/tornado/ioloop.py"", line 741, in _run_callback; ret = callback(); File ""/home/vpadulan/.local/lib/python3.10/site-packages/tornado/ioloop.py"", line 765, in _discard_future_result; future.result(); RuntimeError: cannot schedule new futures after shutdown; ```. Initially I thought these errors were just a by-product of the errors coming from `TInterpreter` that were leaving the dask worker in a bad state and thus breaking the scheduler too. But then, I updated to `distributed==2022.8.1` and they were not present. So I went on and I used `git bisect` starting from `2022.8.0` going onwards. . I was able to identify the following scenarios, depending on a combination of the status of ROOT and the version of dask `distributed` module:. * ROOT current master, with `distributed==2022.8.0`: errors like shown shown above, both those coming from `TInterepreter::Calc` from RDF and those coming from dask about `cannot schedule new fut",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515#issuecomment-1272186236:228,test,tests,228,https://root.cern,https://github.com/root-project/root/issues/11515#issuecomment-1272186236,3,['test'],"['test', 'tests']"
Testability,"> Any news on this? Just tested this again with your llvm16 branch and it's still required. And sorry - yes, this fell through the cracks :neutral_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1660380450:25,test,tested,25,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1660380450,1,['test'],['tested']
Testability,"> Apologies for letting this sit way too long. I think what we need is:; > ; > * get rid of `R__HAS_STD_SPAN` (incl the CMake code); > * remove the option of `experimental::span` (incl CMake) as I don't manage to find any incarnation of this anyway.; > * use the feature test macro `__cpp_lib_span`; > ; > ; > I would totally understand if you'd find this unreasonable to update this PR at this point. Please let me know and I will close this PR and implement myself what I suggest here. Never mind! I prefer to follow your suggestion as a more appropriate solution. After all, what I want is exactly ""Add support for building ROOT with C++20"". I believe you have a better understanding of how this works. If there is not much to do on this PR, it can be closed whenever appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1346615585:271,test,test,271,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1346615585,1,['test'],['test']
Testability,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1755369266:360,test,test,360,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1755369266,1,['test'],['test']
Testability,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6983#issuecomment-756094858:46,log,log,46,https://root.cern,https://github.com/root-project/root/pull/6983#issuecomment-756094858,1,['log'],['log']
Testability,> Approving. Could you still open a new PR (probably on roottest) to explicitly test the multi library setups for both simple types and complex type. Thanks. Once more: There is nothing to test for complex types wrt `TDataType::GetType` - it's not handled anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-831409669:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831409669,4,['test'],['test']
Testability,> Are the failed tests in Jenkins related to my PR? May I see the failed results?. These are glitches. I think you can see the logs if you make a cern lightweight account. I think this PR is good to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1137623800:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1137623800,2,"['log', 'test']","['logs', 'tests']"
Testability,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093#issuecomment-1881003634:20,log,logging,20,https://root.cern,https://github.com/root-project/root/pull/11093#issuecomment-1881003634,1,['log'],['logging']
Testability,"> Are you suggesting we collect everything from all these files - and what is their relative priority?. Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:; * In autofs maps one can write `+dir:/etc/auto.master.d`, or; * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-802032258:726,log,logic,726,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-802032258,1,['log'],['logic']
Testability,"> Are you trying to test the failure mode or should we just not run the test if the build does not support it?. The test should not run in inappropriate builds, @Axel-Naumann told me how to veto out the test if vecgeom is not enabled, and it seems to work, so we can merge this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1431915283:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1431915283,4,['test'],['test']
Testability,"> As I said in my original commit message: This code is tested by stressRooFit (where a RooChebychev is used as a background model), so if this runs through fine (and it does), it means that the new code produces results that are indistinguishable from the reference file. Is that good enough?. I see that now, yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-490010544:56,test,tested,56,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-490010544,1,['test'],['tested']
Testability,"> As a **quick & dirty** solution it is ok, but we need much more advanced methods to work with ROOT structures. There are many global lists in ROOT, which should be accessed properly via RBrowser. In ROOT6 there is `TObject::Browse(TBrowser*)` method, which is implemented for many sub-classes. We need similar logic, but for arbitrary c++ classes - not only TObject.; > ; > One possible solution is implemented for THttpServer - it is so called TRootSniffer. It provides methods to scan many different classes without need to implement specialized `Browse()` method in the class itself.; > ; > I hope, we can discuss this topic next week. This is indeed more a proof of concept than a final solution. I propose to merge it as it is now and then review the whole concept (as several others, like directory navigation) when you'll be around next week. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4468#issuecomment-537861902:312,log,logic,312,https://root.cern,https://github.com/root-project/root/pull/4468#issuecomment-537861902,1,['log'],['logic']
Testability,"> As a logical extension, the same happens for any additional branch that later files have, for example:. Thanks for the example. I simplified it further down to:. ```; #include ""TTree.h""; #include ""TFileMerger.h""; #include ""TFile.h""; #include ""TFileMergeInfo.h"". void printBranches(TTree *const tree) {; printf(""PrintBranches:\n"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716() {; TTree atree(""tree"", ""title"");; int value;; atree.Branch(""a"", &value);; printBranches(&atree);. TTree abtree(""tree"", ""title"");; abtree.Branch(""a"", &value);; abtree.Branch(""b"", &value);; value = 42;; abtree.Fill();; printBranches(&abtree);. TTree dummy;; TList treelist;; treelist.Add(&atree);; treelist.Add(&abtree);; std::unique_ptr<TFile> file(TFile::Open(""c.root"", ""RECREATE""));; TFileMergeInfo info(file.get());; dummy.Merge(&treelist, &info);; printBranches(&dummy);. treelist.Clear();; treelist.Add(&abtree);; std::unique_ptr<TFile> file2(TFile::Open(""d.root"", ""RECREATE""));; TFileMergeInfo info2(file2.get());; atree.Merge(&treelist, &info2);; printBranches(&atree);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14558#issuecomment-2022610545:7,log,logical,7,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-2022610545,2,['log'],['logical']
Testability,"> As a side remark, it sounds expensive to recreate all managers and passes for every module. Is this also what upstream does if it runs on multiple input files?. I agree that it might not be very efficient to recreate all managers/passes for every module. I've been looking upstream and couldn't find any instance where populating pass/analysis managers and running passes are separated (unlike the legacy pass manager). . I used this as a reference for this PR: https://reviews.llvm.org/D123425. [This issue](https://discourse.llvm.org/t/segmentation-faults-running-the-new-llvm-modulepassmanager-with-default-pipeline/59105) is what I think happened with the failing tests for us. From the thread, they recommend using a new instance every time we perform codegen as the analyses might not be cleared. I could also try using the clear() method instead,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1864281326:670,test,tests,670,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1864281326,2,['test'],['tests']
Testability,"> As far as I understood, this only happens after some other libraries have been loaded? I tested .L libceleritas_root.so as the first action in a fresh root REPL, what else did you execute before that to make the error appear?. Nothing else :). The 'more' libraries comes from the fact that `libceleritas_root.so` is explicitly linked to many library and we tested that loading any and all those dependent libraries by themselves does not introduce any (noticeable) problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1090214128:91,test,tested,91,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1090214128,2,['test'],['tested']
Testability,"> As to where these come from, my primary suspect would be fused-multiply-add instructions or other optimized floating point instructions that are not fully IEEE-754 compliant. I don't know exactly where, but I also don't think that you want to disable them globally and pay the performance penalty... Yep: At least for the first difference in `testRooAbsL` that I hunted down, mac13arm has a fused instruction in `RooAbsPdf::extendedTerm`. If instead of; https://github.com/root-project/root/blob/b7b8646c53724503b3c603de4cf633bc78270b5f/roofit/roofitcore/src/RooAbsPdf.cxx#L820-L822; I put; ```c++; printf("" expected = %.17g, log = %.17g\n"", expected, std::log(expected));; double test = sumEntries * std::log(expected);; printf("" test = %.17g\n"", test);; test = expected - test;; printf("" test = %.17g\n"", test);; #if 0; double extra = doOffset; ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); : expected - sumEntries * std::log(expected);; #endif; double extra = expected - sumEntries * std::log(expected);; printf("" extra = %.17g\n"", extra);; ```; I get the following output:; ```; test = 2390.5943542960845; test = -1990.5943542960845; extra = -1990.5943542960847; ```; with the corresponding assembly code being (with some annotations; the `fmsub` is at `ca518`); ```; ca4d0: 00 41 60 1e fmov d0, d8; ca4d4: c9 1c 07 94 bl 0x2917f8 <_write+0x2917f8> # likely the call to std::log; ca4d8: 0b 40 60 1e fmov d11, d0; ca4dc: e0 07 00 fd str d0, [sp, #8]; ca4e0: e8 03 00 fd str d8, [sp]; ca4e4: 20 10 00 f0 adrp x0, 0x2d1000 <RooAbsPdf::createNLL(RooAbsData&, RooLinkedList const&)+0x6e8>; ca4e8: 00 78 36 91 add x0, x0, #3486; ca4ec: ff 1c 07 94 bl 0x2918e8 <_write+0x2918e8> # print ""expected = %.17g, log = %.17g""; ca4f0: 6c 09 6a 1e fmul d12, d11, d10 # test = sumEntries * std::log(expected); ca4f4: ec 03 00 fd str d12, [sp]; ca4f8: 33 10 00 f0 adrp x19, 0x2d1000 <RooAbsPdf::createNLL(RooAbsData&, RooLinkedList const&)+0x6fc>; ca4fc: 73 16 37 91 add x1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1540239366:345,test,testRooAbsL,345,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540239366,15,"['log', 'test']","['log', 'test', 'testRooAbsL']"
Testability,"> As well as std::cerr... Well it does not have to ... . On a side note, this logger needs (before any experiment can use v7) to have a way for the user to customize/redirect the output.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1662#issuecomment-367848997:78,log,logger,78,https://root.cern,https://github.com/root-project/root/pull/1662#issuecomment-367848997,1,['log'],['logger']
Testability,"> At least on my machine substituting `Declare` with `ProcessLine` fixed the test failure, let's see what the CI has to say. We need to land that change in the master for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894233627:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894233627,1,['test'],['test']
Testability,"> At some point there was a discussion and I think the outcome was to always keep these tutorials in and install pandas and numba on all build nodes. That's fair, but users who don't have either of them installed will get broken tests if they choose to run the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-650299813:229,test,tests,229,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-650299813,2,['test'],['tests']
Testability,"> Awesome! Can we also add codecov to measure given PR test coverage? You can take a look at [vgvassilev/clad@57345cf/.github/workflows/ci.yml#L737-L741](https://github.com/vgvassilev/clad/blob/57345cfae9fd3c1ad2fc1f5a4e2e95e0ee4a68ac/.github/workflows/ci.yml#L737-L741). Certainly (I think we have an issue up for this, please check, @vgvassilev or open one). Codecov shouldn't be part of this PR though :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12314#issuecomment-1433196262:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/12314#issuecomment-1433196262,1,['test'],['test']
Testability,"> Awesome, @AniqJaved - thanks a lot for all your work!; > ; > * Could you please reduce the number of commits to something like 5 max? I'm happy to. show you how to rewrite the commit history.; > ; > * `.github/workflows/root-ci-config/__pycache__/build_utils.cpython-39.pyc`, `patch.txt`, and `.github/workflows/root-ci-config/test_file.py` won't be needed in the repo, please don't add them.; > ; > * `.github/workflows/test-coverage.yml` needs only one platform iiuc? Why does it have e.g. `build-macos`?; > ; > ; > I will have a closer look at the code after we chat tomorrow :-). Thank you for your help along the way @Axel-Naumann 💯 🙌,; I have made the proposed changes relating to the files, but I am not sure how to decrease the number of commits, would love to have your guidance on that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13394#issuecomment-1665533318:423,test,test-coverage,423,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1665533318,2,['test'],['test-coverage']
Testability,"> BTW, why doing this test ? we have something working with all bash versions, simply use it. good point. I just changed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081930311:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081930311,2,['test'],['test']
Testability,"> Backward pass is still not working, thats why I have not included tests. Shall include it in my next commit. yes that would be great to verify",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6091#issuecomment-665133451:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/6091#issuecomment-665133451,1,['test'],['tests']
Testability,"> Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. I assume that @simonmichal or @abh3 can do this?. > The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github. Ah that's interesting. Good to know for the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1151363501:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1151363501,1,['test'],['test']
Testability,> Benchmarks for my RDF use-case with 256 threads look like:. I might be confused (i.e. I am probably looking at the wrong numbers). This last set of numbers says that the total improvements on the 256 threads use case is around 7% of the 3 minutes run-time. Is that correct?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-747624992:2,Benchmark,Benchmarks,2,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-747624992,1,['Benchmark'],['Benchmarks']
Testability,> Both tests fail due to the change in the default value for IgnorePromptDiags. I agree that both tests should be fixed to not have functions that returns a value when declared to return void.; However; ```; {; return 0;; }; ```; should continue to work (i.e. return in *unnamed* macros),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1509435047:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1509435047,2,['test'],['tests']
Testability,"> Build failed on ROOT-debian10-i386/cxx14.; > Running on pcepsft11.dyndns.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123133/console).; > ### Failing tests:; > ; > * [projectroot.roottest.python.cpp.roottest_python_cpp_cpp](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/123133/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_cpp/). @vgvassilev , I don't have this test in my checkout:. ```pgras@xps13:~/git.d/root.grasph/mybuild$ ctest -R projectroot.roottest.python.cpp.roottest_python_cpp_cpp ; Test project /home/pgras/git.d/root.grasph/mybuild; No tests were found!!!; ```; Do you have an idea why? I ran cmake with the following options as described in [1]:. ```cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON```. Do I need more options? A `pyroottest=ON` ?. Philippe. [1] https://root.cern/for_developers/run_the_tests/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-884998226:267,test,tests,267,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-884998226,5,"['Test', 'test']","['Test', 'test', 'testReport', 'tests']"
Testability,> Build failed on ROOT-fedora30/cxx14.; > Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/106458/console).; > ; > ### Errors:; > * [2021-02-11T17:52:31.264Z] FAILED: core/base/test/CMakeFiles/CoreBaseTests.dir/TStringTest.cxx.o; > * [2021-02-11T17:52:31.570Z] /build/workspace/root-pullrequests-build/root/core/base/test/TStringTest.cxx:10:21: error: ‘n’ was not declared in this scope; did you mean ‘yn’?. Fixed this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-777677750:301,test,test,301,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-777677750,2,['test'],['test']
Testability,"> Build failed on ROOT-fedora30/cxx14.; > Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115053/console).; > ; > ### Errors:; > * [2021-04-20T13:41:37.174Z] FAILED: interpreter/llvm/src/lib/Demangle/CMakeFiles/LLVMDemangle.dir/Demangle.cpp.o; > * [2021-04-20T13:41:37.174Z] c++: error: brokenFlag: No such file or directory. I guess that settles it @stwunsch. 🙂 ; - CI builds are `RELEASE`; - Setting the flags from the outside works.; - When you don't set anything, the CI passes.; - The assert build that we have in the nightlies can be activated using either; - `cmake -Dasserts=On ...` or; - `cmake -DCMAKE_CXX_FLAGS_RELEASE=""-O3""`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823307275:629,assert,assert,629,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823307275,1,['assert'],['assert']
Testability,> Build failed on ROOT-fedora31/noimt.; > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console).; > ### Failing tests:; > ; > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/); > ; > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7070#issuecomment-763768796:248,test,tests,248,https://root.cern,https://github.com/root-project/root/pull/7070#issuecomment-763768796,3,['test'],"['testReport', 'tests']"
Testability,"> Build failed on ROOT-fedora31/noimt.; > Running on root-fedora-31-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112046/console).; > ; > ### Failing tests:; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_pretty_printing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112046/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_pretty_printing/). This test fails because the pretty printing mechanism of cling is not picked up for the RVec 2.0. Actually I don't see why because the `operator<<` overload is there (see bottom of `RVec.hxx`). It's also weird from the ROOT prompt. The pretty printing doesn't work right away after the constructor, but piping it in the stringstream is works:. ```cpp; root [0] ROOT::RVec<float> x = {1, 2, 3}; (ROOT::RVec<float> &) @0x7f555e6c3010; root [1] stringstream ss;; root [2] ss << x; (std::ostream &) @0x7f555e6c3058; root [3] ss.str(); (std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::__string_type) ""{ 1, 2, 3 }""; ```. It should look like this:. ```cpp; root [0] ROOT::RVec<float> x = {1, 2, 3}; (ROOT::RVec<float> &) { 1.00000f, 2.00000f, 3.00000f }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806614416:266,test,tests,266,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806614416,5,['test'],"['test', 'testReport', 'tests']"
Testability,> Build failed on ROOT-performance-centos7-multicore/default.; > Running on olhswep22.cern.ch:/data/sftnight/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-performance-centos7-multicore-default&date=2020-06-14).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/console).; > ### Failing tests:; > ; > * [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot/test/test_stressIOPlugins_xroot/); > ; > * [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df102_NanoAODDimuonAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot/runtutorials/tutorial_dataframe_df102_NanoAODDimuonAnalysis/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); > ; > * [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86837/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/). This is likely infrastructure related. If I login and rerun those tests they all pass.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-643914463:456,test,tests,456,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-643914463,13,"['log', 'test']","['login', 'test', 'testReport', 'tests']"
Testability,> Build failed on ROOT-performance-centos7-multicore/default.; > Running on olhswep22.cern.ch:/data/sftnight/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5094-ROOT-performance-centos7-multicore-default&date=2020-06-16).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/console).; > ### Failing tests:; > ; > * [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot/test/test_stressIOPlugins_xroot/); > ; > * [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df102_NanoAODDimuonAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot/runtutorials/tutorial_dataframe_df102_NanoAODDimuonAnalysis/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); > ; > * [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); > ; > * [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/87069/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/). Those fail all over the place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-644850315:456,test,tests,456,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-644850315,11,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on ROOT-performance-centos7-multicore/default.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/console).; > ; > ### Warnings:; > * CMake Warning at /data/sftnight/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):; > ; > ### Failing tests:; > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_branch_attr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_branch_attr/); > * [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_pyz_ttree_setbranchaddress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_pyz_ttree_setbranchaddress/); > * [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71797/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/). In the failing tests involving TNtuples, the main difference between a successful working environment and this machine is in the root file used by the above mentioned tests: in this case, the TNtupleD is saved in the root file without name, so when it's called by name a TObject nullptr is returned, making the tests fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-550358311:319,test,tests,319,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-550358311,11,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on ROOT-performance-centos8-multicore/cxx17.; > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console).; >; > ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/); > ; > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11163#issuecomment-1210685075:272,test,tests,272,https://root.cern,https://github.com/root-project/root/pull/11163#issuecomment-1210685075,3,['test'],"['testReport', 'tests']"
Testability,> Build failed on ROOT-performance-centos8-multicore/default. Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136652/console).; > ### Failing tests:; > ; > * [projectroot.tmva.tmva.test.crossvalidation.gtest_tmva_tmva_test_crossvalidation_testCrossValidationIntVar](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/136652/testReport/projectroot.tmva.tmva.test/crossvalidation/gtest_tmva_tmva_test_crossvalidation_testCrossValidationIntVar/). Is the failing test related to this PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761#issuecomment-1074226391:265,test,tests,265,https://root.cern,https://github.com/root-project/root/pull/9761#issuecomment-1074226391,5,['test'],"['test', 'testReport', 'tests']"
Testability,> Build failed on ROOT-ubuntu16/nortcxxmod. Running on sft-ubuntu-1604-1.cern.ch:/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141962/console).; > ### Failing tests:; > ; > * [projectroot.roottest.cling.operator.roottest_cling_operator_runEqualTest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141962/testReport/projectroot.roottest.cling/operator/roottest_cling_operator_runEqualTest/); > ; > * [projectroot.roottest.cling.templateMembers.roottest_cling_templateMembers_runoperatorEqual](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141962/testReport/projectroot.roottest.cling/templateMembers/roottest_cling_templateMembers_runoperatorEqual/); > ; > * [projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/141962/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/). tests fixed via https://github.com/root-project/roottest/pull/865,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10350#issuecomment-1091839558:248,test,tests,248,https://root.cern,https://github.com/root-project/root/pull/10350#issuecomment-1091839558,5,['test'],"['testReport', 'tests']"
Testability,> Build failed on ROOT-ubuntu16/nortcxxmod.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72624/console).; > ; > ### Errors:; > * FAILED: cd /mnt/build/workspace/root-pullrequests-build/build && /usr/bin/python /mnt/build/workspace/root-pullrequests-build/root/build/unix/makepchinput.py /mnt/build/workspace/root-pullrequests-build/root . ON etc/cling/Interpreter/DynamicExprInfo.h etc/cling/Interpreter/DynamicLookupRuntimeUniverse.h etc/cling/Interpreter/DynamicLookupLifetimeHandler.h etc/cling/Interpreter/Exception.h etc/cling/Interpreter/RuntimePrintValue.h etc/cling/Interpreter/RuntimeUniverse.h etc/cling/Interpreter/Value.h && /usr/local/bin/cmake -E env ROOTIGNOREPREFIX=1 /usr/bin/python /mnt/build/workspace/root-pullrequests-build/root/etc/dictpch/makepch.py etc/allDict.cxx.pch -I/mnt/build/workspace/root-pullrequests-build/build/include. Build and tests were tried separately in this machine.; Everything is fine.; The build directory is:. /home/sftnight/gallim_multipython/build. Don't know why it does not work with Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4647#issuecomment-561624257:902,test,tests,902,https://root.cern,https://github.com/root-project/root/pull/4647#issuecomment-561624257,1,['test'],['tests']
Testability,"> Build failed on ROOT-ubuntu2004-clang/default. Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/138532/console).; > ### Failing tests:; > [...]. Yes, as expected many tests are failing now, so we have to decide on a strategy here: Do we want to fix all issues first or merge this one first to make it easier to debug things? I'm definitely in favor of the latter, it's a waste of time to check the verbose output of 30+ tests by hand because they're not failing if the Address Sanitizer found something...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1057797101:268,test,tests,268,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1057797101,3,['test'],['tests']
Testability,> Build failed on ROOT-ubuntu2004/soversion. Running on root-ubuntu-2004-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/console).; > ### Failing tests:; > ; > * [projectroot.roottest.root.hist.operator.roottest_root_hist_operator_runsparse](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/testReport/projectroot.roottest.root.hist/operator/roottest_root_hist_operator_runsparse/); > ; > * [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execFileMerger](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/134230/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execFileMerger/). These failures are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9580#issuecomment-1014438815:264,test,tests,264,https://root.cern,https://github.com/root-project/root/pull/9580#issuecomment-1014438815,3,['test'],"['testReport', 'tests']"
Testability,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console).; > ### Failing tests:; > ; > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13243#issuecomment-1635361341:265,test,tests,265,https://root.cern,https://github.com/root-project/root/pull/13243#issuecomment-1635361341,2,['test'],"['testReport', 'tests']"
Testability,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/console).; > ### Failing tests:; > ; > * [projectroot.roofit.histfactory.test.gtest_roofit_histfactory_test_testHistFactory](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/193778/testReport/projectroot.roofit.histfactory/test/gtest_roofit_histfactory_test_testHistFactory/). @guitargeek, can you give us a hand again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1912542311:265,test,tests,265,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1912542311,4,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on ROOT-ubuntu2204/nortcxxmod.; > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e.; ```; -- Cloning roottest from 'https://github.com/root-project/roottest' (master); Cloning into 'roottest'...; ```; or; ```; -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13003#issuecomment-1592010000:368,log,log,368,https://root.cern,https://github.com/root-project/root/pull/13003#issuecomment-1592010000,1,['log'],['log']
Testability,> Build failed on mac1014/cxx17.; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72808/console).; > ; > ### Warnings:; > ### Failing tests:; > * [projectroot.roottest.root.dataframe.roottest_root_dataframe_writeFcc](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72808/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_writeFcc/); > * [projectroot.roottest.root.io.buffer.roottest_root_io_buffer_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72808/testReport/projectroot.roottest.root.io/buffer/roottest_root_io_buffer_make/); > * [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readFcc](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72808/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readFcc/). @eguiraud can you confirm that the two fcc ones are not related to these changes?; we see them failing also in other PRs:; http://cdash.cern.ch/testSummary.php?project=1&name=roottest-root-dataframe-writeFcc&date=2020-03-24; http://cdash.cern.ch/testSummary.php?project=1&name=roottest-root-dataframe-test_readFcc&date=2020-03-24,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5083#issuecomment-603114708:182,test,tests,182,https://root.cern,https://github.com/root-project/root/pull/5083#issuecomment-603114708,6,['test'],"['testReport', 'testSummary', 'tests']"
Testability,> Build failed on mac1015/cxx17.; > Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5443-mac1015-cxx17&date=2020-04-29).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/console).; > ### Failing tests:; > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_importROOT_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_importROOT_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_thread_local_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_thread_local_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_ROOT_kernel_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/); > ; > * [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_tpython_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/79301/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_tpython_notebook/). Fail with `sh: ipython3: command not found`. > Build failed on ROOT-fedora29/python3.; > Running on root-fedora29-3.cern.ch:/build/workspace/root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5443#issuecomment-621200029:421,test,tests,421,https://root.cern,https://github.com/root-project/root/pull/5443#issuecomment-621200029,3,['test'],"['testReport', 'tests']"
Testability,> Build failed on mac1015/cxx17.; > Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97532/console).; > ; > ### Failing tests:; > * [projectroot.runtutorials.test_import_pandas](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97532/testReport/projectroot/runtutorials/test_import_pandas/); > * [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97532/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); > * [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97532/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/). I fixed that (just now)!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6519#issuecomment-701925299:261,test,tests,261,https://root.cern,https://github.com/root-project/root/pull/6519#issuecomment-701925299,4,['test'],"['testReport', 'tests']"
Testability,> Build failed on mac11.0/cxx17.; > Running on macphsft23.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/125699/console).; > ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_multicore_mp001_fillHistos](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/125699/testReport/projectroot/runtutorials/tutorial_multicore_mp001_fillHistos/); > ; > * [](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/125699/testReport/projectroot/runtutorials/tutorial_multicore_mtbb001_fillHistos/). These fails are totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8772#issuecomment-916056137:258,test,tests,258,https://root.cern,https://github.com/root-project/root/pull/8772#issuecomment-916056137,3,['test'],"['testReport', 'tests']"
Testability,> Build failed on mac11/cxx17. Running on macphsft23.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/console).; > ### Failing tests:; > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_CNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_CNN_Classification/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_RNN_Classification](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_RNN_Classification/); > ; > * [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); > ; > * [projectroot.roottest.python.regression.roottest_python_regression_regression](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139454/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/). These failures seem totally unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123#issuecomment-1068033264:250,test,tests,250,https://root.cern,https://github.com/root-project/root/pull/10123#issuecomment-1068033264,7,['test'],"['testReport', 'tests']"
Testability,"> Build failed on mac12arm/cxx20. Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/console).; > ### Failing tests:; > ; > * [projectroot.test.test_stressinterpreter](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot/test/test_stressinterpreter/); > ; > * [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183553/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/). I'll check these failing tests in the next few days, but for the rest it should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13565#issuecomment-1700825834:242,test,tests,242,https://root.cern,https://github.com/root-project/root/pull/13565#issuecomment-1700825834,6,['test'],"['test', 'testReport', 'tests']"
Testability,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console).; > ### Failing tests:; > ; > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/); > ; > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/); > ; > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13139#issuecomment-1615955177:250,test,tests,250,https://root.cern,https://github.com/root-project/root/pull/13139#issuecomment-1615955177,4,['test'],"['testReport', 'tests']"
Testability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139399/console).; > ### Errors:; > ; > * [2022-03-15T09:41:07.706Z] ghprbPullLongDescription=`\r\nIn file included from /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/RModel.hxx:14,\r\n from /builddir/build/BUILD/root-6.26.00/tmva/sofie/src/RModel.cxx:3:\r\n/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx: In member function 'void TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared()':\r\n/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx:75:12: error: 'memcpy' is not a member of 'std'; did you mean 'wmemcpy'?\r\n 75 | std::memcpy(tData.get(), fPersistentData,fSize * sizeof(float));\r\n | ^~~~~~\r\n | wmemcpy\r\ngmake[2]: *** [tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/build.make:79: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel.cxx.o] Error 1\r\n`\r\n\r\n# This Pull request:\r\n\r\n## Changes or fixes:\r\n\r\nAdd #include &lt;cstring&gt; for std::memcpy\r\n\r\n## Checklist:\r\n\r\n- [x] tested changes locally\r\n- [ ] updated the docs (if necessary)\r\n\r\n. The build reports an error because it quotes the git commit message in the log and then detects the quoted error message in the commit message as a failure when it parses the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10116#issuecomment-1068139049:1160,test,tested,1160,https://root.cern,https://github.com/root-project/root/pull/10116#issuecomment-1068139049,3,"['log', 'test']","['log', 'tested']"
Testability,> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/console).; > ### Failing tests:; > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_0_0_1_0](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_0_0_1_0/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_0_0_1_1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_0_0_1_1/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_0_1_1_0](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_0_1_1_0/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_0_1_1_1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_0_1_1_1/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_1_0_1_0](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_1_0_1_0/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_1_0_1_1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/144996/testReport/projectroot.roottest.root.io/stdpair/roottest_root_io_stdpair_pairEnumEvo_1_0_1_1/); > ; > * [projectroot.roottest.root.io.stdpair.roottest_root_io_stdpair_pairEnumEvo_1_1_1_0](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10402#issuecomment-1127580309:220,test,tests,220,https://root.cern,https://github.com/root-project/root/pull/10402#issuecomment-1127580309,4,['test'],"['testReport', 'tests']"
Testability,> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/console).; > ### Failing tests:; > ; > * [projectroot.test.test_stressshapes_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stressshapes_interpreted/); > ; > * [projectroot.test.test_stresshistofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stresshistofit_interpreted/); > ; > * [projectroot.test.test_stresshistogram_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stresshistogram_interpreted/); > ; > * [projectroot.test.test_stressentrylist_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stressentrylist_interpreted/); > ; > * [projectroot.test.test_stressroostats_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stressroostats_interpreted/); > ; > * [projectroot.test.test_stressgraphics_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot/test/test_stressgraphics_interpreted/); > ; > * [projectroot.roottest.cling.bytecode.roottest_cling_bytecode_runhenry](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot.roottest.cling/bytecode/roottest_cling_bytecode_runhenry/); > ; > * [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/159431/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); > ; > * [projectroot.roottest.root.multicore.roottest_root_multicore_tsenums](https://lcgap,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1319854599:220,test,tests,220,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1319854599,13,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/console).; > ### Failing tests:; > ; > * [projectroot.math.mathcore.test.gtest_math_mathcore_test_CladDerivatorTests](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164724/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_CladDerivatorTests/). @arora-vidushi, the test fails on windows with:. ```; [ RUN ] CladDerivator.logx6; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(208): error: Expected equality of these values:; -0.43429448190325176; value->GetAsDouble(); Which is: 4.4274168156280442e+20; [ FAILED ] CladDerivator.logx6 (13 ms); [ RUN ] CladDerivator.minimum; [ OK ] CladDerivator.minimum (24 ms); [ RUN ] CladDerivator.erf1; [ OK ] CladDerivator.erf1 (31 ms); [ RUN ] CladDerivator.erf2; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(245): error: Expected equality of these values:; -0.83021499484118955; value->GetAsDouble(); Which is: -1.9812626051377354e-49; [ FAILED ] CladDerivator.erf2 (18 ms); [ RUN ] CladDerivator.erfc1; [ OK ] CladDerivator.erfc1 (10 ms); [ RUN ] CladDerivator.erfc2; C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; 0.83021499484118955; value->GetAsDouble(); Which is: 1.9812626051377354e-49; [ FAILED ] CladDerivator.erfc2 (13 ms); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1398190065:220,test,tests,220,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1398190065,8,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5552-windows10-cxx14&date=2020-06-06).; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/85621/console).; > ; > ### Errors:; > * [2020-06-06T10:06:37.755Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring(3019,1): fatal error C1088: Cannot flush compiler intermediate file: 'C:\Users\sftnight\AppData\Local\Temp_CL_60f507d3sy': No space left on device [C:\build\workspace\root-pullrequests-build\build\test\TBench.vcxproj]; > * [2020-06-06T10:06:37.755Z] C:\Program Files (x86)\Microsoft Visual > ; > And 50 more. Sorry, my bad, I had to free disk space on the Windows nodes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5552#issuecomment-640035031:720,test,test,720,https://root.cern,https://github.com/root-project/root/pull/5552#issuecomment-640035031,1,['test'],['test']
Testability,> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/106671/console). @pcanal I can't check the error log (no permission). Let me know if I can fix the error somehow. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7200#issuecomment-871412157:243,log,log,243,https://root.cern,https://github.com/root-project/root/pull/7200#issuecomment-871412157,1,['log'],['log']
Testability,"> Build failed on windows10/cxx14.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112283/console).; > ### Failing tests:; > ; > * [projectroot.roottest.cling.other.roottest_cling_other_checkMissingSymbolExitCode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/112283/testReport/projectroot.roottest.cling/other/roottest_cling_other_checkMissingSymbolExitCode/). @bellenot, could you help here. This patch, when seeing an unknown symbol, iterates over all libraries available in ROOT's current library paths; scans for the symbol; and proposes which library to load. The diagnostics seems to be coming from something opening and not releasing the file lock (which frankly makes no sense as we should have seen that before on different occasions). . The only place I can find `CreateFile` is [here](https://github.com/root-project/root/blob/master/core/winnt/src/TWinNTSystem.cxx#L4127) -- is that the one triggers the original issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-808856045:226,test,tests,226,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-808856045,2,['test'],"['testReport', 'tests']"
Testability,"> Build failed on windows10/default. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195088/console).; > ; > ### Failing tests:; > * [projectroot.roofit.roofitcore.test.gtest_roofit_roofitcore_test_testRooFuncWrapper](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195088/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/). @guitargeek, could you take a look at the failure and maybe suggest what needs suppressing on windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1938425658:226,test,tests,226,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1938425658,4,['test'],"['test', 'testReport', 'tests']"
Testability,"> Build failed on windows10/default.; > Running on null:C:\build\workspace\root-pullrequests-build; > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182470/console).; > ### Failing tests:; > ; > * [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/182470/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_root/). Ok, this test failure is pretty interesting:; ```; [ RUN ] TRootTDS.FromARDFMT; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TFile::TFile' reading 'file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/RCsvDS_test_headers.cs does not exist'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::SetBranchAddress' reading 'unknown branch -> i'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::SetBranchAddress' reading 'unknown branch -> g'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 13; [ FAILED ] TRootTDS.FromARDFMT (9 ms); [ RUN ] TRootTDS.FromARDFWithJittingMT; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::LoadTree' reading 'Cannot find tree with name t in file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/specTestDescribe3.root'.; Suppress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681726222:228,test,tests,228,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681726222,11,"['Test', 'test']","['TestSupport', 'test', 'testReport', 'tests', 'testsupport']"
Testability,> Build failed on windows10/default.; > [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/53471/console). Could someone show me the error logs when building on Windows? (I do not have the relevant permission),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3405#issuecomment-462216565:167,log,logs,167,https://root.cern,https://github.com/root-project/root/pull/3405#issuecomment-462216565,1,['log'],['logs']
Testability,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has.; 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so).; 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088#issuecomment-1606966381:694,benchmark,benchmarks,694,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1606966381,1,['benchmark'],['benchmarks']
Testability,"> But the fine grained options in-between -- some columns in vector writes and some columns not -- are, I think, not tested. I'm not even sure if such cases can occur in practice.; > One option is to just add a comment on that possible optimization and to remove the more sophisticated parts of the vector write logic - i.e. either one big vector write or all scalar writes. Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775#issuecomment-1169370262:117,test,tested,117,https://root.cern,https://github.com/root-project/root/pull/10775#issuecomment-1169370262,3,"['log', 'test']","['logic', 'test', 'tested']"
Testability,"> But we can't test that it definitely happens . I agree, but at least you can know whether it breaks. Pushing the machinery with a dedicated test wouldn't hurt. But if you are happy with the coverage that the current tests already do, forget about my comment then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329#issuecomment-615317787:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/5329#issuecomment-615317787,3,['test'],"['test', 'tests']"
Testability,"> Can I just run the test macros and take the results as new reference values or do they need to be calculated on a specific system with specific configurations?. You should be able to run it on almost any system. If the results changed across systems, we would constantly see a lot of failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-572457405:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-572457405,1,['test'],['test']
Testability,> Can this be closed now? It should have been superseded by #6277. I'll check that we have the test coverage and whether this works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5430#issuecomment-704143521:95,test,test,95,https://root.cern,https://github.com/root-project/root/pull/5430#issuecomment-704143521,1,['test'],['test']
Testability,"> Can we have a test for this?. For the moment we do not have methods to test communication artifacts. ; One side is JavaScript, other side is ROOT C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15452#issuecomment-2106917048:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/15452#issuecomment-2106917048,2,['test'],['test']
Testability,"> Can we not merge this, and then leave macOS `CLING_DEBUG` (or really, JITLink `CLING_DEBUG`) as an open ""challenge"" for a future PR?. Yes, this was also my thinking. However, this means `CLING_DEBUG` won't work on macOS in the meantime, or we cannot default to JITLink for the time being. I'm fine either way, I think it's a step forward to support JITLink (again) and have all tests passing on macOS with it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11997#issuecomment-1378650523:380,test,tests,380,https://root.cern,https://github.com/root-project/root/pull/11997#issuecomment-1378650523,1,['test'],['tests']
Testability,> Can you also add a unit test for this pythonization?. The tutorials are testing this feature 5 times or so. Can obviously add an extra test that just copies code from the tutorials and runs it ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5308#issuecomment-610265668:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/5308#issuecomment-610265668,3,['test'],"['test', 'testing']"
Testability,"> Can you also backport this to v6-26-patches, please?. Yes will do. How urgent is this? I think the fix is working and we could merge this now, but the test in https://github.com/root-project/roottest/pull/808 fails on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1022011820:153,test,test,153,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1022011820,1,['test'],['test']
Testability,"> Can you come up with a reproducer for what you see?. @Axel-Naumann : The following simple test case; ```; #include <TROOT.h>; int main(int argc, char** argv) {; gROOT->GetInterpreter();; return 0;; }; ```; compiled via; `c++ -o test -O0 -ggdb `root-config --libs` -I`root-config --incdir` -std=c++17 test.cpp /usr/lib64/libgandiva.so`; yields the error for me. I have a system installation of arrow with gandiva. If I remove the libgandiva.so from the command line, it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-566586924:92,test,test,92,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-566586924,6,['test'],['test']
Testability,"> Can you run a profiler and/or callgrind on the benchmark?. I found nothing interesting there. However, I rebuilt my master and PR in both Release (not RelWithDebInfo) and now I see the speedup of my patch in your example. Average of 3 runs of `root.exe -l -b -q /build/vvassilev/callfuncbench.C\(2000000000\)` master 13.05s and this PR (with the enum what-i-thought optimization) 11.16s and 11.16s. The ctest benchmarks show slight effect towards the enum optimization but it is really negligible. I thought the RelWithDebInfo is almost the same but for LLVM Release means -O3 and RelWithDebInfo means -O2. . Things are looking good for the ctest examples, too:. <summary>Master Release Mode </summary>; <details>. ```; ctest -R .*treefor.* ; Test project /build/vvassilev/root-callfunc-master/release; Start 2216: roottest-root-treeformula-array-make; 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 26.16 sec; Start 2217: roottest-root-treeformula-casting-make; 2/19 Test #2217: roottest-root-treeformula-casting-make ........... Passed 2.84 sec; Start 2218: roottest-root-treeformula-clones-make; 3/19 Test #2218: roottest-root-treeformula-clones-make ............ Passed 0.79 sec; Start 2219: roottest-root-treeformula-depth-make; 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.23 sec; Start 2220: roottest-root-treeformula-event-make; 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 3.82 sec; Start 2221: roottest-root-treeformula-evolution-make; 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 5.06 sec; Start 2222: roottest-root-treeformula-formulaio-make; 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.47 sec; Start 2223: roottest-root-treeformula-function-make; 8/19 Test #2223: roottest-root-treeformula-function-make .......... Passed 11.50 sec; Start 2224: roottest-root-treeformula-morrison-make; 9/19 Test #2224: roottest-root-treeformula-morr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1252919323:49,benchmark,benchmark,49,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1252919323,5,"['Test', 'benchmark']","['Test', 'benchmark', 'benchmarks']"
Testability,> Can you use the `__cplusplus` macro to check the c++ version and protect unsupported headers?. I have added a [check](https://github.com/root-project/root/blob/39fc632526d243bafc171ac1b0bf872b2b192a72/interpreter/cling/include/cling/std_msvc.modulemap#L23) in the modulemap files to detect C++ versions for the headers that require a specific version. I am not sure if `__cplusplus` macro can be used in the modulemap files. Please run the build so that we can test it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5610#issuecomment-628448551:463,test,test,463,https://root.cern,https://github.com/root-project/root/pull/5610#issuecomment-628448551,1,['test'],['test']
Testability,"> Changing it as shown in this diff here seems to solve the problem:. ah, definitely, that's a _bug_! that logic assumes that different trees are stored in files with different names :/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7143#issuecomment-775057149:107,log,logic,107,https://root.cern,https://github.com/root-project/root/issues/7143#issuecomment-775057149,1,['log'],['logic']
Testability,> Comments have been addressed. I still need to understand why it fails on Jenkins. I tested myself on Mac High Sierra and it worked. I might be mis-reading the new code but it seems comment https://github.com/root-project/root/pull/1751/files#r175929733 might still be valid (i.e. needing to be addressed). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1751#issuecomment-380951399:86,test,tested,86,https://root.cern,https://github.com/root-project/root/pull/1751#issuecomment-380951399,1,['test'],['tested']
Testability,"> Commit [e97f74d](https://github.com/root-project/root/commit/e97f74d67e4cf4133d431ffabda283e924fb1bb6) changed the tutorials `fit/graph2dfit.C` and `hist/hstack.C` to not return a pointer to `TCanvas`. Remove the special case and expect the test to exit code 0. Yes, see my commit message quoted here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11830#issuecomment-1337578448:243,test,test,243,https://root.cern,https://github.com/root-project/root/pull/11830#issuecomment-1337578448,1,['test'],['test']
Testability,"> Correct, but I argue that the current ""real world"" tests don't show any measurable overhead. If we find problems in micro-benchmarks, these can be addressed in followup changes. My rationale is that we _have_ to go this step to the new pass manager, better make progress sooner than later... The real world tests that you tested do not test this part. How about trying to run `stressInterpreter` and probably something that enables `O2` and generates many `TClingCallFunc`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1914407345:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1914407345,5,"['benchmark', 'test']","['benchmarks', 'test', 'tested', 'tests']"
Testability,"> Could we have a tiny, little test?. I admit, I was lazy ... I thought; ```; $ bin/root -q -e 'TVectorD({1., 2., 3.}).GetNoElements()'. (int) 3; ```; was enough ... I'll add that somewhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9968#issuecomment-1051045153:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/9968#issuecomment-1051045153,1,['test'],['test']
Testability,> Could you add tests for the Callfunc changes. That do you mean? Signature of I/O constructor changes for the class? Is it possible?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-598577203:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-598577203,1,['test'],['tests']
Testability,> Could you add the error message we get to the commit log?. @Axel-Naumann Done,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312#issuecomment-457488367:55,log,log,55,https://root.cern,https://github.com/root-project/root/pull/3312#issuecomment-457488367,1,['log'],['log']
Testability,"> Could you give some hints in the commit log of the kind of layout issue being addressed?. Well, in some cases, the GUI layout is wrong. Do you want me to take screenshots?. > What is the ""value"" of keeping the old code (behind `#if 0`) in this case?. Form my own purpose, I want to test on a machine with dual screens once I can access it (and I'll remove it once tested)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663557542:42,log,log,42,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663557542,3,"['log', 'test']","['log', 'test', 'tested']"
Testability,"> Could you paste the error for `roottest-python-pickle-read`?. That one no longer fails for me. I guess it may only fail sporadically or only with GCC 8.4, which is what I was using before.; If I see it fail again, I will paste the output here. However, I attached the output for all tests in the issue description, so it should be there already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823921721:285,test,tests,285,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823921721,1,['test'],['tests']
Testability,"> Delete test/Prompt/ValuePrinter/FileSystemPath.C; > Unfortunately the std::filesystem symbols are provided by the static; > library libstdc++fs.a, which might be stripped out by the linker. Which platform does it fail on? From the wording it sounds like it would also fails on the prompt if a user is attempting to use `std::filesystem`. Shouldn't we open a related issue to re-allow the user to use `std::filesystem` (and reintroduce the test)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293950884:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293950884,2,['test'],['test']
Testability,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-452376863:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-452376863,1,['test'],['test']
Testability,"> Did you make sure it works for -Dcxxmodules=On?. How I can check it? I cannot compile current master when specifying `-Dcxxmodules=On`.; Same will be after I merge this PR. There is simple error which can be fixed in graf2s/mathtext/inc/mathrenderer.h, but it does not solve general compilation errors with cxxmodules. I test both on mac and linux platforms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5791#issuecomment-640223995:323,test,test,323,https://root.cern,https://github.com/root-project/root/pull/5791#issuecomment-640223995,2,['test'],['test']
Testability,"> Disable test/DynamicLibraryManager/cached_realpath.C on macOS; > It uses ln -r, which is not implemented on macOS. Would it be possible (and thus better) to only disable the 2 lines of the test that uses `ln -r`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293953418:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293953418,2,['test'],['test']
Testability,"> Do we have a (standalone) test of the new feature?. Sure, I will write one in C++, I can't do it in Python now because we have not updated the cppyy of PyROOT experimental yet (since we need the changes of this PR for that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671#issuecomment-575695903:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/4671#issuecomment-575695903,1,['test'],['test']
Testability,"> Do we have a backtrace of one of the crashes, does it point somewhere specifically?. Not from the CI directly, I should login on a Windows machine and try to debug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1914334936:122,log,login,122,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1914334936,1,['log'],['login']
Testability,> Do we have a test for this?. Yes: https://github.com/root-project/root/blob/7cfacbaf3cfe402d20bbec1d4bb737151716e274/interpreter/cling/test/Prompt/ValuePrinter/TuplesAndPairs.C#L4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13619#issuecomment-1711690349:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/13619#issuecomment-1711690349,2,['test'],['test']
Testability,> Do we have a way to run the cling tests in the ci?. That would be https://github.com/root-project/root/issues/15230,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694#issuecomment-2418571348:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/16694#issuecomment-2418571348,1,['test'],['tests']
Testability,"> Do you have access to a machine where you can test this?. Nope. Some of our unit tests are simulating the scenario expected on a big-endian machine. It would be helpful to test this on a real machine, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10402#issuecomment-1122862180:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/10402#issuecomment-1122862180,3,['test'],"['test', 'tests']"
Testability,"> Do you mean 6.30 or 6.32?. 6.30. I hope we can still make it :-) @bellenot might you be able to fix this while I'm gone? We can remove the actual code of the modules in a second, unrelated step - what's needed now is the CMake build option part. I.e. what's left is the error in [pyunittests_dataframe_cache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/187156/testReport/projectroot.tree.dataframe/test/pyunittests_dataframe_cache/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13856#issuecomment-1762850189:391,test,testReport,391,https://root.cern,https://github.com/root-project/root/pull/13856#issuecomment-1762850189,2,['test'],"['test', 'testReport']"
Testability,"> Do you mean that the sanitiser report when running the following unit test; > ; > ```c++; > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest; > ; > TEST(){ std::cout << ""Hello world\n""; }; > ```; > ; > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2371254649:72,test,test,72,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371254649,5,"['TEST', 'test']","['TEST', 'test']"
Testability,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?. Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1809327683:104,test,tests,104,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1809327683,2,['test'],"['test', 'tests']"
Testability,"> Does it mean that they are optional requirement?. Correct, always has been like this. > Humm ... but then they become non-optional requirement for developer. If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. > It also means that we can not test the case where they are not installed. In principle we can add a ""special"" CI image and run that as a separate github action. > and since we are not testing this configuration one could assume that the configuration is broken (until proven otherwise). What we are ""not testing"" is the situation `-Dpyroot=OFF` and no Python package being installed on the same machine... i.e. no need to even bother with Python. > i.e. those package are actually required . No, they are not",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2051098946:289,test,test,289,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2051098946,3,['test'],"['test', 'testing']"
Testability,> Does that change allow us to run successfully the cppyy test suite?. I would argue that there should be no change; where can I find those tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12703#issuecomment-1520930491:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/12703#issuecomment-1520930491,2,['test'],"['test', 'tests']"
Testability,"> Does the crash go away if you're extending the relevant if statement like this?. Yes, this fixes the two tests on my end AFAICT :tada: I'll re-run all tests now to see if it has any other unintended effect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2371039171:107,test,tests,107,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2371039171,2,['test'],['tests']
Testability,"> Does the problem also happen when the threads are working on their own library?. Yes indeed. Letting each thread create its own library via `CompileMacro` highlights other types of data races, that I think might be better treated in a separate PR. Just to give an example, these are 2 thread stacktraces in a modified test (see at the bottom). ```; (gdb) t 3; (gdb) bt; #7 0x00007ffff75b7ed0 in ROOT::TReadLockGuard::TReadLockGuard (this=0x7fffcfff7e70, mutex=0x277a800); at /home/vpadulan/Programs/rootproject/rootsrc/core/base/inc/TVirtualRWMutex.h:123; #8 0x00007ffff75f4aae in TSystem::FindHelper (this=0x45fa10, ; path=0x7fffc8034040 ""/home/vpadulan/Projects/rootcode/lock-tcling-unloadfile/load_unload_helpers_1_cpp_ACLiC_dict.h"", dirptr=0x0); at /home/vpadulan/Programs/rootproject/rootsrc/core/base/src/TSystem.cxx:737; #9 0x00007ffff7705827 in TUnixSystem::Unlink (this=0x45fa10, ; name=0x7fffc8034040 ""/home/vpadulan/Projects/rootcode/lock-tcling-unloadfile/load_unload_helpers_1_cpp_ACLiC_dict.h""); at /home/vpadulan/Programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:1674; #10 0x00007ffff7600b75 in TSystem::CompileMacro (this=0x45fa10, filename=0x7fffc8000ba0 ""load_unload_helpers_1.cpp"", opt=0x40909c ""g"", ; library_specified=0x40909b """", build_dir=0x40909b """", dirmode=0); ```; ```; (gdb) t 6; (gdb) bt; #12 0x00007ffff6e88301 in TFile::TFile (this=0x7fffce7f3370, ; fname1=0x7fffb8003ee0 ""/home/vpadulan/Projects/rootcode/lock-tcling-unloadfile/load_unload_helpers_4_cpp_ACLiC_dict_rdict.pcm"", ; option=0x7ffff120efbb ""READ"", ftitle=0x7ffff1209b59 """", compress=101) at /home/vpadulan/Programs/rootproject/rootsrc/io/io/src/TFile.cxx:380; #13 0x00007fffed25be48 in TCling::LoadPCM (this=0x54c9c0, ; pcmFileNameFullPath=""/home/vpadulan/Projects/rootcode/lock-tcling-unloadfile/load_unload_helpers_4_cpp_ACLiC_dict_rdict.pcm""); at /home/vpadulan/Programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1879; #14 0x00007fffed25db4e in TCling::RegisterModule (this=0x54c9c0, mo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348#issuecomment-1658918736:320,test,test,320,https://root.cern,https://github.com/root-project/root/pull/13348#issuecomment-1658918736,1,['test'],['test']
Testability,"> Does the test machine have bash dash ksh zsh ... all installed or could they be added? So that several terms can be tested. It would be great to include `shellcheck`, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557#issuecomment-1284380807:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/11557#issuecomment-1284380807,2,['test'],"['test', 'tested']"
Testability,"> Does this have any linked issue / failing CI test?. Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13785#issuecomment-1744924647:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/13785#issuecomment-1744924647,3,['test'],['test']
Testability,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2168506571:25,test,tests,25,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2168506571,1,['test'],['tests']
Testability,"> Edit: So this means, we should just remove the `-DNDEBUG` flag via string matching if we enable asserts. Yes, you can either remove any debug-related string:; ```cmake; string(REGEX REPLACE ""-.NDEBUG"" """" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE} ""${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}""); ```; or the lazy clutter-the-string version; ```cmake; set(CMAKE_BUILD_TYPE_RELEASE ""${CMAKE_BUILD_TYPE_RELEASE} -UNDEBUG""); ```. But I actually favour:; `cmake -DCMAKE_CXX_FLAGS_RELEASE=""-O3"" <src dir>`. And my second favoured solution (only example flags):; ```diff; diff --git a/CMakeLists.txt b/CMakeLists.txt; index e40b84a920..ab41612006 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -29,6 +29,11 @@ endforeach(); ; include(cmake/modules/CaptureCommandLine.cmake); ; +set(CMAKE_CXX_FLAGS_DEBUG_INIT ""-O1 -g""); +set(CMAKE_CXX_FLAGS_ASSERT_INIT ""-O2 -g""); +; project(ROOT); ; #---Set the locale to default C to prevent issued due to localization of commands---------------. ```; combined with; `cmake -DCMAKE_BUILD_TYPE=Assert <src dir>`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-823072396:98,assert,asserts,98,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-823072396,2,"['Assert', 'assert']","['Assert', 'asserts']"
Testability,"> Especially those https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/108798/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/ and friends seem relevant. These look similar to something that I addressed in the past, that currently is taken care of with https://github.com/root-project/root/blob/master/cmake/modules/XROOTDApplePostInstall.cmake . I tried to look for the messages from that script in the logs of the build (e.g. ""Adjusting LC_RPATH variable of XRootD libraries in ${install_libdir}"" ) but there was none so maybe that's weird. That being said, in this particular case the error is that `libNetxNG.6.25.01.so` doesn't find the reference of `@rpath/libXrdUtils.3.dylib` to load, whereas in the past the issue was that all `libXrD*` libraries couldn't load other xrootd libs in the same install folder. So, possibly, it's the RPATH of `libNetxNG` that should be changed in this case",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-790698646:99,test,testReport,99,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-790698646,3,"['log', 'test']","['logs', 'test', 'testReport']"
Testability,"> Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Yes, in that case if you want to help with testing, please build from source, but do not download the source as .tar.gz, but clone instead the github repository and checkout the 6.30.00-patches branch, or the master branch. This one will include the fixes I mentioned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1916952606:281,test,testing,281,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916952606,1,['test'],['testing']
Testability,"> Example:; > ; > ```; > #include <TROOT.h>; > int main(int argc, char** argv) {; > gROOT->GetInterpreter();; > return 0;; > }; > ```; > ; > with the following command (using a system-installation of apache-arrow width gandiva):; > ; > ```; > c++ -o test -O0 -ggdb `root-config --libs` -I`root-config --incdir` -std=c++17 test.cpp /usr/lib64/libgandiva.so.14.1.0 && ./test; > ```; > ; > will show the `...please hide them or dlopen() them after the call to TROOT::InitInterpreter()` error.; > ; > The problem with the opencl runtime is analogous. So, would the error still be there if you change the example to something like:; ```; #include <TROOT.h>; static auto force_init = gROOT->GetInterpreter();; int main(int argc, char** argv) {; return 0;; }; ```; why is `/usr/lib64/libgandiva.so.14.1.0 ` initialized/dlopened first?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564004143:250,test,test,250,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564004143,3,['test'],['test']
Testability,"> FWIW I think this ""only"" fixes the test on Windows, this is no explanation on the random failures on various Linux platforms... indeed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13473#issuecomment-1682239197:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/13473#issuecomment-1682239197,1,['test'],['test']
Testability,"> FWIW, I will try seeing if I can come up with a single modulemap on this build node we use for cxx20. @Axel-Naumann, I cannot seem to log on the ubuntu node. Can you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1366467379:136,log,log,136,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1366467379,1,['log'],['log']
Testability,"> Fair enough, this is a more fundamental reason (i.e. `""lib"" files are usually not along side the libraries in C:\Program*`) and you should consider adding it to the commit log and/or comments. Will do",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6156#issuecomment-672198259:174,log,log,174,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672198259,1,['log'],['log']
Testability,"> Fair enough. Can we still verify this (i.e. build this PR, install and verify that the correct module map is picked up in a build) before merging this PR?. Tested this PR, there was a correct modulemap picked on build (ROOT.modulemap inside of the source tree), even if there was another deliberately broken ROOT.modulemap under /usr/include . The build was successful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321#issuecomment-1902719537:158,Test,Tested,158,https://root.cern,https://github.com/root-project/root/pull/14321#issuecomment-1902719537,1,['Test'],['Tested']
Testability,"> For bench-marking the change can you run and compare with and without the PR:; > ; > ```; > #include ""TChain.h""; > ; > void callfuncbench(int repeat = 1000) ; > {; > TChain ch(""ntuple""); ; > for(int i = 0 ; i < repeat; ++i); > ch.Draw(""TMath::TanH(px)"", """", ""goff""););; > }; > ```; > ; > This demonstrates a simple common (indirect) usage of CallFunc.; > ; > Thanks, Philippe.; > ; > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```; root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)...; 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)""; 	User time (seconds): 0.16; 	System time (seconds): 0.06; 	Percent of CPU this job got: 100%; 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22; 	Average shared text size (kbytes): 0; 	Average unshared data size (kbytes): 0; 	Average stack size (kbytes): 0; 	Average total size (kbytes): 0; 	Maximum resident set size (kbytes): 195476; 	Average resident set size (kbytes): 0; 	Major (requiring I/O) page faults: 0; 	Minor (reclaiming a frame) page faults: 25164; 	Voluntary context switches: 218; 	Involuntary context switches: 6; 	Swaps: 0; 	File system inputs: 0; 	File system outputs: 0; 	Socket messages sent: 0; 	Socket messages received: 0; 	Signals delivered: 0; 	Page size (bytes): 4096; 	Exit status: 0; ```; and this PR on my machine:; ```; /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1251821611:557,benchmark,benchmark,557,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1251821611,4,['benchmark'],['benchmark']
Testability,"> For future readers, it might make sense to remove the misleading `cd %t-dir` which doesn't affect future `RUN` lines... I was too quick here, the `cd` is needed. The test is creating `%t-dir`s in `%t-dir` :man_facepalming:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1141028113:168,test,test,168,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1141028113,1,['test'],['test']
Testability,"> For posterity (and for a few more tests) can you upload here the tar file of you test?. Sure, here are the four ""benchmark applications"": [ttreeTBufferMerger.tar.gz](https://github.com/root-project/root/files/13457173/ttreeTBufferMerger.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1825360848:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1825360848,3,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,"> For the `TObject` documentation I would add something along the line of:; > ; > ```; > Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; > ```. Can we move this into another PR? (I would suggest you opening it), because it's still not clear whether the main target of the current PR is actually desired or not. And TBH, I don't have the resources to perform a proper benchmark, nor do I have good other arguments why the proposed style is better (for example more readable, more maintainable, etc).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2151703325:532,benchmark,benchmark,532,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2151703325,2,['benchmark'],['benchmark']
Testability,"> For the `TTree::Draw` based benchmark, you noted:; > ; > ```; > That benchmark runs more or less for the same time (0.16 +-2):; > ```; > ; > which is pretty large relative increase. Since you machine is fast could you increase the number of iteration by 200 or so (i.e unless it run for at least 30 seconds)? It might also be instructive to profile that example and see where the cost comes from. `/usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000000\)` yields 6.12 for master and 6.45 for this PR. The results are over 3 runs and seem pretty stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1252773796:30,benchmark,benchmark,30,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1252773796,2,['benchmark'],['benchmark']
Testability,"> For x86_64, this change passed all cmssw [CI tests](https://github.com/cms-sw/root/pull/209#issuecomment-2316914821). Does both have the same version of gcc? Does one have `libgcc_s.so` and the other `libgcc.a`? And which one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2326571628:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2326571628,1,['test'],['tests']
Testability,"> From my limited view point it seems that we have:; > ; > * python support is enabled; > ; > * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); > ; > * a test still complains that those optional component are not installed. You're correct, there is no reason for a test to complain about these optional components missing.; The test is gone now:; https://github.com/root-project/root/pull/15286",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2105673059:210,test,tests,210,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2105673059,4,['test'],"['test', 'tests']"
Testability,"> From my side, this is ready to be merged after squashing the commits. Waiting for rootbench's grafana to be updated, so one can see the difference.; (https://rootbnch-grafana-test.cern.ch/d/ENlOG7EWz/roofit-benchmarks-vectorized-pdfs?orgId=1)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8616#issuecomment-890881651:177,test,test,177,https://root.cern,https://github.com/root-project/root/pull/8616#issuecomment-890881651,2,"['benchmark', 'test']","['benchmarks-vectorized-pdfs', 'test']"
Testability,"> From the CI, it seems the code generation does not work on 32 bit platforms like `windows10` and `debian10-i386`. Why is that? I think it would be good to understand this, and I don't think this is related to RooFit specifics. Maybe some overflows in the generated code on 32 bit? Maybe we can also use the help of @vgvassilev here. Is there a compilation error? If not then we can run valgrind on the test case and maybe get a hint of what goes wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1344015532:404,test,test,404,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1344015532,1,['test'],['test']
Testability,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14084#issuecomment-1821595350:344,test,test,344,https://root.cern,https://github.com/root-project/root/issues/14084#issuecomment-1821595350,1,['test'],['test']
Testability,> From the wording it sounds like it would also fails on the prompt if a user is attempting to use `std::filesystem`. Shouldn't we open a related issue to re-allow the user to use `std::filesystem` (and reintroduce the test)?. https://github.com/root-project/root/issues/16269. > > [cling] Disable many DynamicLibraryManager test on macOS; > ; > Should we open an issue to port (and/or fix) those tests (or a subset at least) to MacOS?. https://github.com/root-project/root/issues/16270,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2298316087:219,test,test,219,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2298316087,3,['test'],"['test', 'tests']"
Testability,"> Ha interesting! Is there a reason why you turned cxxmodules on initially?. No particular reason, just a random test. But I'm not going to worry about this anymore, because I can't make plots even if the compilation is successful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1527028784:113,test,test,113,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1527028784,1,['test'],['test']
Testability,"> Have you tested this with mariadb and mysql both installed? I'm not sure you could choose mariadb without the first find_program overwriting it with mysql. Since the first search, looks only in ```${MYSQL_DIR} $ENV{MYSQL_DIR}```, it ought to find only one of the two (which ever was meant to). Line 21 is likely to contain a typo (i.e. it seems like it should be ```mysql_config mariadb_config```)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1993#issuecomment-387843376:11,test,tested,11,https://root.cern,https://github.com/root-project/root/pull/1993#issuecomment-387843376,1,['test'],['tested']
Testability,"> Hello Rahul,; > ; > I had a look over the changes. and added some comments.; > Next time, please don't mix different topics such as graphics and Bernstein ranges, as the continuous integration should test them one by one. The ""mixing of topics"" is my fault here - this is our development branch for the RooFit implementation of RooUnfold, and so far we only needed to change graphics. We encountered problems with RooBernstein and needed to fix them to get our examples running. We hope that not so many further changes are needed, but we will try to keep topics more separate in the future. If you want, I can split this into two different branches before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3922#issuecomment-525306032:202,test,test,202,https://root.cern,https://github.com/root-project/root/pull/3922#issuecomment-525306032,1,['test'],['test']
Testability,"> Here are more details from my local builds:. They feel like the opaque typedef (`Double32_t`) are (at the very least partially) no longer opaque (See in particular the ""new"" duplicate definitions complaint from the linker). In https://github.com/root-project/root/commit/45c0f48f3c3c631d291e0a7a32fd1ba292e79160, I see:; ```; TemplateDecl *TD = T->getTemplateName().getAsTemplateDecl();; ...; printTemplateArgumentList(OS, T->template_arguments(), Policy,; TD->getTemplateParameters());; ```; From the text in the long discussion, I am guessing that `TD` is now used to inform the printer on how to spell the template argument. I would bet that `TD` has neither the opaque typedef kept nor the default argument being made explicit (all done by `Utils/AST.cpp` and part of T (if I read correctly)). This would explain both the sudden need to request the default template argument and the error related to `Double32_t`. One solution might be to remove those 2 patches and instead to deal with the suffixes in `Utils/AST.cpp`. [Reminder the spelling of the normalized name is essential for backward compatibility; if the name must change to be more accurate, we might need to extend TClass/TStreamerInfo to smooth out the conversion. Testing this is ""easy"", create a file with v6.28/00 contains just an object with the name-that-will-changed and try to read it with a ROOT with the new name]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136445744:1233,Test,Testing,1233,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136445744,1,['Test'],['Testing']
Testability,> Here is the build log -DLLVM_BUILD_TYPE=Debug with http://cdash.cern.ch/upload/5bf095bd99721b08d57f37a4e561dbbb08db6eaf/ROOT-v6-26-00-patches-build.log Or do you need some other output?. I need a machine where I can login and run gdb.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9641#issuecomment-1020587588:20,log,log,20,https://root.cern,https://github.com/root-project/root/pull/9641#issuecomment-1020587588,3,['log'],"['log', 'login']"
Testability,"> Here it is. Great. Could you **also** make it part of the commit log (finding the PR summary from a given commit is not that ""easy"")? . Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663645756:67,log,log,67,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663645756,1,['log'],['log']
Testability,"> Hey @manuelschiller,; > ; > that looks like a brilliant idea, thanks! We might get into trouble with the pragmas, though, because not all versions of ROOT are built with clang. We will see that when the bots get a chance to build it.; > ; > Would it be possible to write a test that compares the old and the new RooChebychev? A naive one would be to copy the old class into roofit/roofit/test/testRooChebychev.cxx, rename it, and just run the two against each other.; > You might have tested locally, so including that would also be a good option. As I said in my original commit message: This code is tested by stressRooFit (where a RooChebychev is used as a background model), so if this runs through fine (and it does), it means that the new code produces results that are indistinguishable from the reference file. Is that good enough?. Regarding the pragmas: Would it help if I tried hiding them behind some preprocessor magic? (According to https://en.cppreference.com/w/cpp/preprocessor/impl, unknown pragmas should be ignored by compilers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-489977868:275,test,test,275,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-489977868,5,['test'],"['test', 'testRooChebychev', 'tested']"
Testability,"> Hi @AaradhyaSaxena; > Thank you for this useful contribution!; > Can you please add also a test program for the Batch Normalisation in tmva/sofie/test ?. @lmoneta, I will add the test program asap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8882#issuecomment-904490384:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/8882#issuecomment-904490384,3,['test'],['test']
Testability,"> Hi @AaronBallman,; > ; > Sorry for summoning you on a random PR but we seem to have local patch in Clang fixing a valid usecase where we want to use raw string literals in attributes that take strings. Do you see a way forward to make this patch upstreamable?. I'm not certain I understand the goal of the patch (or the changes its applied over the top of). `writeValue()` and `writeDump()` are used for AST printing and AST dumping, so it doesn't seem correct to me to convert what the user wrote to be a raw string literal. Not only will that not round trip to what the user wrote in code (that's fine, it happens), but it can cause behavioral differences that might be relevant to consumers of the attribute information: https://godbolt.org/z/sb3o1oTYo. The AST printing behavior is wonderfully broken, but the AST dump behavior is somewhat more worrying; there's a difference between \n and an actual newline (for example, on Windows, the actual newline would be `\r\n` and not `\n`). That said, the test failures you're seeing are ones I would expect. For example, the failure in `AST/ast-print-attr.c` is specifically because we were checking that we round-tripped the user-provided argument, and now we're round-tripping it differently. What problem(s) are you trying to solve by printing/dumping raw string literals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1169019275:1006,test,test,1006,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1169019275,1,['test'],['test']
Testability,"> Hi @VanyaBelyaev , do you think the fact that you are using RooFit through PyROOT is relevant? Would you be able to test in pure C++ ?. Dear @eguiraud; I am not using RooFit througt C++ . It would be expremently difficult or even impossible for me to conver tmy python stuff into C++.; Note that for simple models I have no problems.; It happens only for multidimensional multicomponent model, when I draw projecton; - first draw data set with `Invisible` flag ; - draw fit components; - draw data with normal vizibility ; ; And it segfaults at the second step. ; The relevant part of the stack is here: . ```. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #7 0x00007f36325eec01 in (anonymous namespace)::removeCommon(std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >&, std::__ROOT::span<RooAbsArg* const>) () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #8 0x00007f36325f2568 in RooProdPdf::factorizeProduct(RooArgSet const&, RooArgSet const&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&, RooLinkedList&) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #9 0x00007f36325f94b9 in RooProdPdf::getPartIntList(RooArgSet const*, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc9-opt/lib/libRooFitCore.so; #10 0x00007f36325fd52e in RooProdPdf::getAnalyticalIntegralWN(RooArgSet&, RooArgSet&, RooArgSet const*, char const*) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864062658:118,test,test,118,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864062658,2,['test'],['test']
Testability,"> Hi @chissg, can you test #9592. Building now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583#issuecomment-1015569069:22,test,test,22,https://root.cern,https://github.com/root-project/root/issues/9583#issuecomment-1015569069,1,['test'],['test']
Testability,"> Hi @ellert thank you for the PR, the test is failing because `sys` is being used but not imported, could you fix that and we re-run the builds?. Sorry about that, I have fixed it. The byte compilation did work without it so I didn't notice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5960#issuecomment-652469551:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/5960#issuecomment-652469551,1,['test'],['test']
Testability,"> Hi @ellert, thanks for updating this PR!; > ; > My preferred solution would be to detect in the build system if the machine in big endian, and only build/execute the NaN - packer test if this is not the case. Would this be possible? Then we don't need to hack into the ROOT test system. There is one explicit test for specifically checking the NaN feature:. gtest-roofit-roofitcore-test-testNaNPacker. This PR is not about this test. This test still correctly fails with this PR applied. The PR is so that tests that are testing other things don't fail because they trigger this warning about the NaN feature not having been implemented. The warning says: fast recovery not implemented. As far as I can tell the tests fall back to some slower recovery method and succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1826767382:181,test,test,181,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1826767382,9,['test'],"['test', 'test-testNaNPacker', 'testing', 'tests']"
Testability,"> Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits.; > ; > I addressed all of your comments, but for one comment I'm not sure if I made the right choice.; > ; > My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. The reason is simple: When `_batchMode` is not persistified, you create a test statistic in BatchMode, write it to file, read it back, it will run in scalar mode. That's at best ""annoying"". > ; > Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class. That's good, but the above will happen also now. If you wrote an old test statistic to a file, which had the batch flag set in the derived class, it will now run in scalar mode, because nobody moves the info up to the base class. It's somehow possible to do that, but I need to look this up myself.; Let's first think if this is the best way to do it, and solve the schema evolution later. Remind me, please: Why did the flag have to go to the base class?. NB: There's also the RooChi2Var, which could make use of the batch mode. Maybe for this alone, it's already nice to have the flag in the base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344#issuecomment-792681797:471,test,test,471,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-792681797,6,['test'],['test']
Testability,"> Hi @hageboeck, thanks for the comments! I have addressed them now. Is all the documentation I added here good enough so we can close #8421 after this PR is merged?. I think it's getting there, but it's hard to say ""yes"". The real test is to run doxygen, and ask a member of the team to find the classes and how to use them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-893446054:232,test,test,232,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-893446054,1,['test'],['test']
Testability,"> Hi @jblomer, the new test `RNTuple.SmallClusters` seems a bit flaky, sometimes [running into timeouts](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac13arm,SPEC=cxx17,V=master/3502/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/), sometimes [throwing exceptions](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac13arm,SPEC=cxx17,V=master/3500/testReport/junit/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/) (both `mac13arm`), and one time [crashing on Linux](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/3501/testReport/junit/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/) (how does it get to `llvm::LazyMachineBlockFrequencyInfoPass::ID()` though?). An address-sanitized build doesn't show anything when executing the test, any idea where we could start looking?. Hi @hahnjo, @jblomer is off the rest of the week, but I did take a look :-). Apparently, on an IMT build, some TBB tasks might still be running when the `RPageSink` object (a member of a `RNTupleWriter`) is destructed. A PR is coming... (**EDIT:** that's now https://github.com/root-project/root/pull/12824).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12665#issuecomment-1549328320:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/12665#issuecomment-1549328320,8,['test'],"['test', 'testReport']"
Testability,"> Hi @pcanal, this is a quite big pull request, it may make sense to break it down in a few separate pull requests to make it easier to test/review. Also, I see revert commits included, and whitespace changes bundled together here, the reverts you should probably drop and rebase, and whitespace creates unnecessary noise for reviewing, so better split in another pull request or make all such changes in a single commit upfront before other commits. For white, github's `Hide whitespace changes` usually works well :). I had kept the ""revert"" commit intentionally to remember (for posterity) that this avenue was looked into. I have no remove it. Technically this could indeed be split in several (4 or 5) PRs ... which the consequent delay in merging (time to do and locally test the split, time to run the PRs through the build) ... given that we are branching soon .. this would also either delay the branching or require the PRs to be tested twice each ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-786785312:136,test,test,136,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-786785312,3,['test'],"['test', 'tested']"
Testability,"> Hi @rdschaffer,; > ; > > And it seems only in October, was it?; > ; > Would you know if it may have been tied to your analysis going to a different analysis release?; > ; > Analysis release 21.2.139 uses XRootD 4.10.0. (As it happens we switched to XRootD 4.12.2 just with AnalysisBase-21.2.140.) We've used XRootD 4.10.0 (in sync with external versions from [LCG_96b](http://lcginfo.cern.ch/release/96b/)) from 21.2.115 before that.; > ; > Could you check which version of the analysis release you were using before 21.2.139? I still suspect that the problematic nodes provide a different version of some system library than the non-problematic ones. And that this may not have been an issue with previous versions of the analysis release (previous versions of XRootD...), but with 4.10.0 it is.; > ; > You could of course also try to switch to a newer version. But I understand that your analysis may very well not want to do that for physics reasons...; > ; > Cheers,; > Attila. Before 139, we were using 91 for a long time and had no problems. I *believe* that I tested again 'after October' 91, and it was still ok. And I tested 150 which I think I still had problems. But I would have to test it again to be 100% certain. I can easily rerun these tests just at BNL where we see the problem...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758651033:1069,test,tested,1069,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758651033,4,['test'],"['test', 'tested', 'tests']"
Testability,"> Hi @smuzaffar , looking at the CMSSW tests, it seems this patch worked for CMS: could you confirm that?. Yes @dpiparo , this worked for CMS too. Local tests also show that with this update CMSSW/ROOT symbols mentioned in https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1867640888 also do not trigger loading of all shared libs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1870070172:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1870070172,2,['test'],['tests']
Testability,"> Hi @subham73, thank you very much for updating the PR! I have started a first run of tests.; > ; > If the tests pass and after you addressed the remaining comments of mine about using `static_range_cast` instead of `dynamic_range_cast`, we can merge this one. Hello @guitargeek !! At that time I only updated 2 of the files, now I have modified all the rest files of histfactory/src. ; Can you pls provide the review on src/LinInterpVar.cxx, should I just leave the instance of the constructor like that.; Also i don't really know why this test [`[projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_spark_test_rungraphs]`]((https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/138804/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_spark_test_rungraphs/)) is failing. Thankyou for ur time and also for any new suggestions and corrections before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10022#issuecomment-1059933079:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/10022#issuecomment-1059933079,4,['test'],"['test', 'testReport', 'tests']"
Testability,"> Hi @vgvassilev , thanks once again for this great development, which was delivered and tested on such a short timescale, basically during the end of the year break. On January 23rd, the last open pre-release of CMSSW_14_0_0 will close: after that date, no ROOT version updates will be possible (see [cms-sw/cmssw#43077 (comment)](https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1858057605)). Currently, the CMS issue has been worked around, therefore ROOT 6.30 _can_ be picked up by CMS. However, it would be much better to have your fix in master and the 6.30 branch for CMS to pick up. That leaves us with a short window of opportunity, which is basically this week.; > ; > Do you think you can factor and succinctly document the changes in the way @hahnjo proposed in order to be able to merge the PR to make your fixes available to CMS? We see LHCb experiencing similar problems - they would also likely benefit from your code. @dpiparo, I have made the changes that I agree with and responded to the rest of the comments. This PR seems to be ready to go from what concerns me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1882860199:89,test,tested,89,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1882860199,1,['test'],['tested']
Testability,> Hi @will-cern . Thanks a lot for this PR. Could you add a unit test to make sure we do not have any regressions in the future?. Test was added. Is this ready to merge now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16194#issuecomment-2283685645:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/16194#issuecomment-2283685645,2,"['Test', 'test']","['Test', 'test']"
Testability,"> Hi Stefan, I don't remember what this is about, can you please add more details and motivation for the change to the commit log?. Sry yes, you are right, we are missing here the context. I've added a longer explanation to the commit message and also above in the inital comment of the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6109#issuecomment-667961835:126,log,log,126,https://root.cern,https://github.com/root-project/root/pull/6109#issuecomment-667961835,1,['log'],['log']
Testability,"> Hi Stephan, thanks a lot for your comments! I will address them as soon as I have written a test that covers all these branches in `factorizeProduct`. I don't think such a tests exists at the moment, right?. All dedicated unit tests should be in `roofit/roofitcore/test/*Prod*` etc. There's only integration tests that might by accident test this, e.g. stressRooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907#issuecomment-823507523:94,test,test,94,https://root.cern,https://github.com/root-project/root/pull/7907#issuecomment-823507523,6,['test'],"['test', 'tests']"
Testability,"> Hi Stephan, thanks for taking a look!; > ; > Indeed, I assume that for RooArgSet there are much more of these pointer comparisons around. That's why I only cover RooDataSet here, motivated by this strange increase in memory that is observed then using the memory pool for RooDataSet. So far, I have not seen any problems arising from the memory pool for RooArgSet. No, I don't know. I only noticed that when disabling the mempool for RooArg**Set**, *some* test *rarely* fail on *some* machines in the nightlies. It's an evil Heisenbug because it only shows up when the OS decides that it's now time to recycle a pointer. That's when I stopped and went back to the memory pool.; > ; > Do you happen to know other locations where things are cached based on the RooDataSet?; No, sorry. You can only really now with a static code analyser or clang plugin.; > ; > I think I can fix the counter initialization problem by putting them in the .cxx sources of the class that uses the counter.; > ; I think so, too. > About the multi-threading problem: it's a very good point! But making the counter a `std::atomic` should solve this, right?; > ; Yes, when it becomes desirable, you can do that. There's anyway many other thread-unsafe things that need fixing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8324#issuecomment-859719866:458,test,test,458,https://root.cern,https://github.com/root-project/root/pull/8324#issuecomment-859719866,1,['test'],['test']
Testability,"> Hi folks. Is this PR at a point where I could try it with cling on Linux? I'd be happy to report any issues; for some compatibility issues, I can't use the stable cling's llvm so I've been eager watching the progress here.; > ; > If it's workable now, any tips for getting this hooked up to cling would be much appreciated. Either way, thanks so much for the huge effort to get llvm 13 in here. Hi @jeaye, we seem to be mostly converging. We know that some tests from cling's test suite still fail. If you cannot wait another month maybe it is now a good time to try it. . You can build cling against llvm13 using the llvm13 branches from clang.git and llvm.git available in my GitHub profile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1186184492:459,test,tests,459,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1186184492,2,['test'],"['test', 'tests']"
Testability,"> Hi! No that's alright, we don't enforce the formatting of old code. Also a rebase is not necessary, since the tests all passed and the PR would merge fine.; > ; > Just a note: probably the PR was unattended for so long because the usecase for this feature was not clear (or you needed it in your project?). Now that we have it, we might as well merge it, but for the future try to focus more on addressing concrete use needs or improving the ROOT developer experience (like you did in many other PRs). Thanks for the feedback!. It was a feature needed for my project. Because it took long, I used a workaround with a TGLabel class, so I did not insist much either, but for the future I will make it more clear what the usecase is :). Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156#issuecomment-1812527084:112,test,tests,112,https://root.cern,https://github.com/root-project/root/pull/9156#issuecomment-1812527084,2,['test'],['tests']
Testability,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance!. ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13091#issuecomment-1611289628:68,log,log,68,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1611289628,2,['log'],['log']
Testability,"> Hi, most of cmssw tests passed but for few relvals we get runtime errors [...]. Thanks for testing! This needs debugging (likely after CHEP)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2410181489:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2410181489,2,['test'],"['testing', 'tests']"
Testability,"> Hi,; > ; > This PR cannot be merged since the test is failing. Could you please have a look @will-cern ?; > ; > ```; > Running main() from /googletest-release-1.11.0/googletest/src/gtest_main.cc; > [==========] Running 3 tests from 1 test suite.; > [----------] Global test environment set-up.; > [----------] 3 tests from Projections; > [ RUN ] Projections.Issue_6658_2D; > [ OK ] Projections.Issue_6658_2D (175 ms); > [ RUN ] Projections.Issue_6658_3D; > [ OK ] Projections.Issue_6658_3D (0 ms); > [ RUN ] Projections.Issue_6658_Profile2D; > /root/src/core/testsupport/src/TestSupport.cxx:89: Failure; > Failed; > Received unexpected diagnostic of severity 2000 at 'TROOT::Append' reading 'Replacing existing TH1: x (Potential memory leak).'.; > Suppress those using ROOT/TestSupport.hxx; > [ FAILED ] Projections.Issue_6658_Profile2D (1 ms); > [----------] 3 tests from Projections (176 ms total); > ; > [----------] Global test environment tear-down; > [==========] 3 tests from 1 test suite ran. (176 ms total); > [ PASSED ] 2 tests.; > [ FAILED ] 1 test, listed below:; > [ FAILED ] Projections.Issue_6658_Profile2D; > ; > 1 FAILED TEST; > CMake Error at /root/src/cmake/modules/RootTestDriver.cmake:232 (message):; > error code: 1; > ; > ```. ok I just renamed the projection histogram to avoid the clash, I hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16194#issuecomment-2285931106:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/16194#issuecomment-2285931106,15,"['TEST', 'Test', 'test']","['TEST', 'TestSupport', 'test', 'tests', 'testsupport']"
Testability,> How about remembering the number of methods in TClassRef? I don't know if this will solve the performance problem but at least we don't have to iterate on same classes. I am a bit lost .... What performance problem are we addressing here? [i.e. as far as I can tell most time the number of methods is accessed this is followed by an iteration over all methods]. Can you be more specific on which (part of which) benchmark you are optimizing and how much this change would improve the run-time of this benchmark?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-373170242:414,benchmark,benchmark,414,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-373170242,2,['benchmark'],['benchmark']
Testability,"> How confident are you @hahnjo that things are fine on 32bit? I can try to resurrect the box, but that will only happen on Wednesday morning... Maybe you ask for someone to reboot it on Mattermost?. I'm somewhat confident that it's not completely broken since there were only two test failures in July: https://github.com/root-project/root/pull/13273#issuecomment-1657200906 hard to say if these two got fixed as well...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1838674587:281,test,test,281,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1838674587,1,['test'],['test']
Testability,"> How did you enable `tmva-sofie`? This has not been tested on Windows. Hi bellenot, I add -Dtesting=ON -Droottest=ON for cmake option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487#issuecomment-1009741982:53,test,tested,53,https://root.cern,https://github.com/root-project/root/issues/9487#issuecomment-1009741982,1,['test'],['tested']
Testability,"> How does it mess things up?. IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions.; > ; > > with no tests; > ; > As I said that won't be the case.; > ; > > to improve the less used feature of unloading; > ; > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > ; > > make this feature configurable; > ; > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532596881:369,test,tests,369,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532596881,6,['test'],"['test', 'tests']"
Testability,"> How does the new cache handle the typical cache of a file being edited and then reloaded?. While being loaded by the same path and when being matched against itself, it should hit the strncmp logic and exit the function. The race condition causing false positives or false negatives can only be triggered by accessing via different paths to what was or should now be the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010#issuecomment-921304029:194,log,logic,194,https://root.cern,https://github.com/root-project/root/pull/9010#issuecomment-921304029,1,['log'],['logic']
Testability,> How shall I proceed with this PR ?. Can you maybe rebase on `master` to fix the conflicts and trigger the tests? Then we can decide what to do next.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9651#issuecomment-1808235267:108,test,tests,108,https://root.cern,https://github.com/root-project/root/pull/9651#issuecomment-1808235267,1,['test'],['tests']
Testability,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1813955876:968,benchmark,benchmarks,968,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1813955876,1,['benchmark'],['benchmarks']
Testability,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote; > ; > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report.; > ; > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2371133405:359,test,test,359,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371133405,1,['test'],['test']
Testability,"> However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525. Are we guaranteed that testing for C++20 is sufficient (i.e. there is no compiler/library that have the three-way comparison but do not set C++20) (If not is there a small test we can have cmake run to check whether we need this or not?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12803#issuecomment-1542418722:172,test,testing,172,https://root.cern,https://github.com/root-project/root/pull/12803#issuecomment-1542418722,2,['test'],"['test', 'testing']"
Testability,"> I _installed_ ROOT on Fedora 29 nodes to show the problem that roottest is picking it up instead of the ROOT being tested. > > I am confused, it is because you uninstalled root binaries at fedora node?. I see, thanks, I will submit separate fix for it. So if I understand correctly, root binaries is not anymore installed on this node, and I need to clean cache (build directory)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502763394:117,test,tested,117,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502763394,1,['test'],['tested']
Testability,"> I agree that better testing is needed, but none of the thetemplateclass<sometype> hits TDataType::GetType. Well technically, the test is still valid/needed with replacing `thetemplateclass<sometype>` with `int` or `float` (just less likely to fail :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-831403447:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831403447,2,['test'],"['test', 'testing']"
Testability,"> I agree that the test should probably not use `echo` for that but we should probably fix the interface, too. Agreed. > Is `Value::isVoid` not being checked in the `echo` interface? I am not sure I understand how it worked before and how the PR you mentioned broke it.. It's an issue related to multiple `Interpreter`s that have different `ASTContext`s. I fixed it by calling `isVoidType()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282#issuecomment-1642273551:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/13282#issuecomment-1642273551,1,['test'],['test']
Testability,> I also checked with Python 3.13 on Arch Linux: the test is passing now. It also works on Fedora. Thank you for addressing this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15799#issuecomment-2159695680:53,test,test,53,https://root.cern,https://github.com/root-project/root/issues/15799#issuecomment-2159695680,1,['test'],['test']
Testability,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1820886920:452,log,logical,452,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920,2,['log'],['logical']
Testability,> I also sent the fix upstream: https://reviews.llvm.org/D142188. Awesome! I bet they will want a test..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12054#issuecomment-1398181022:98,test,test,98,https://root.cern,https://github.com/root-project/root/pull/12054#issuecomment-1398181022,1,['test'],['test']
Testability,"> I am a bit confused. I believe here we should not change the code but the rules of cmake when it comes to linking llvm. I believe the problem is when we link in two copies of llvm instead of one. Here that would fix the problem with the asserts but we will still have two copies of llvm leading to much more subtle issues. I don't think this is problem of linking two copies of llvm. For example, if I remove; ```; // Hide options from llvm which we got from static initialization of libCling.; llvm::cl::HideUnrelatedOptions(/*keep*/gRootclingOptions);; ```; and run; ```; core/rootcling_stage1/src/rootcling_stage1 --help-hidden; ```; I get many unrelated options - these are the predefined by LLVM. I think that in the default builtin LLVM build the part of the LLVM library that defines the `-W` option is just not enabled. A coincidence, but the current way of building the CLI is not the most robust anyway, so I don't see a problem with changing the code. It's worth doing even if I link LLVM twice. Btw, `clangd` also uses `llvm::cl::ResetCommandLineParser()` since they have a similar problem. > Why is this linking both specific LLVM static libraries and /usr/lib/llvm-16/lib/libLLVM-16.so.1? I suspect that to be the cause. I checked the linking command again, the static libraries are clang libraries, not LLVM. Which is to be expected, since it's not possible to build with upstream clang yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1661726763:239,assert,asserts,239,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1661726763,1,['assert'],['asserts']
Testability,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO.; > ; > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?. Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146#issuecomment-1669214483:533,log,logging,533,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1669214483,1,['log'],['logging']
Testability,> I am in favor of this PR but it will require more thorough testing...@vgvassilev was asking if it works with -Dclingtest=ON. I agree that this one is cleaned and the build works with `clingtest=ON`. (I didn't try running anything beyond my usual test commands.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4750#issuecomment-572954934:61,test,testing,61,https://root.cern,https://github.com/root-project/root/pull/4750#issuecomment-572954934,2,['test'],"['test', 'testing']"
Testability,"> I am not 100% where the `TString::Replace` comes from, I'd need to checkout these changes and run the test. Yeah, I'm wondering that too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-778187369:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-778187369,1,['test'],['test']
Testability,"> I am not sure how but the failure in Ubuntu2310: https://github.com/root-project/root/actions/runs/7971661830/job/21783650878?pr=14627 seems limites to this PR .... This test sporadically fails on that platform, not the first time I see it. I doubt it is related to this PR. Let me rerun just that platform",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14627#issuecomment-1956088929:172,test,test,172,https://root.cern,https://github.com/root-project/root/pull/14627#issuecomment-1956088929,1,['test'],['test']
Testability,"> I am not sure if we have testing of TF1::Save() and TF1::GetSave() methods. We need to add the test for both `f1->Save(0,0,0,0,0,0)` and the other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13949#issuecomment-1781351475:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/13949#issuecomment-1781351475,2,['test'],"['test', 'testing']"
Testability,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707966075:66,log,log,66,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707966075,2,['log'],['log']
Testability,"> I am not sure using `RooAbsReal::Ref` is a good idea, it might confuse some users. Why not adding an extra constructors taking double for some of these pdf's In addition I would make this only for the pdf variables that make sense to use numbers, and this should not be the `x` of a Gaussian or Landau. Okay, I have now kept also all the original constructors now, I hope this can prevent any confusion. For consistency, I think in the new constructors with the `RooAbsReal::Ref`s, all of the variables should have it, including the `x` variables. There can be cases where the observables are constant global observables, and also it's still convenient for quick prototyping, debugging and testing if numbers can be passed for the observables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12036#issuecomment-1384262553:692,test,testing,692,https://root.cern,https://github.com/root-project/root/pull/12036#issuecomment-1384262553,1,['test'],['testing']
Testability,"> I am sorry, I think I can not read the build log from the Windows and unfortunately I do not have a Windows to test it by myself :( Is it possible to read the log somehow in order to fix this commit on Windows?. It timed out. Please fork also roottest, that should at least fix the timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4136#issuecomment-518222885:47,log,log,47,https://root.cern,https://github.com/root-project/root/pull/4136#issuecomment-518222885,3,"['log', 'test']","['log', 'test']"
Testability,"> I am super supporting the idea to roll back to CMake defaults !!! Let's cross our fingers that testing whole ROOT test suites will work...I just have a question, why we couldn't do this before (e.g. what was fa reason to use specific hardcodeded flags)?. To be honest:; I think we didn't know better. It looks to me like people thought that they had to to this manually. The only challenge is probably if you want to get *other* defaults than CMake, but the way to do this is also known - the `CMAKE_CXX_*_INIT`, which you have to set **before** `project(ROOT)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823356232:97,test,testing,97,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823356232,2,['test'],"['test', 'testing']"
Testability,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ?. If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken?. > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like?. > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that?. > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole?. > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't unde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313799028:643,test,test,643,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313799028,2,['test'],"['test', 'tests']"
Testability,> I believe the changes make sense and the user reports correctness on the original issue. It would be nice to add the reproducer as a test (probably in roottest under `root/io/hadd`). This can be done at a later time. Added to https://github.com/root-project/root/issues/14319,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14913#issuecomment-1993708913:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/14913#issuecomment-1993708913,1,['test'],['test']
Testability,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2046265770:180,test,test,180,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770,6,['test'],"['test', 'tests']"
Testability,"> I can imagine that we can make change this function to return a string and then call it when we called the `.gh` command?. Sounds great, as long as the 'stacktrace' logic does not clear it internally, once it has printed it to terminal before calling `.gh bug`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122636569:167,log,logic,167,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122636569,2,['log'],['logic']
Testability,> I can't upload a Windows package right now because I have to be at CERN to access my OpenStack instance. You can always ssh into lxplus and log into your CERN machines from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369511647:142,log,log,142,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369511647,1,['log'],['log']
Testability,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721011333:76,assert,assertion,76,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721011333,1,['assert'],['assertion']
Testability,> I cannot reproduce the failure of roottest-root-core-execStatusBitsCheck; it's possible the fact I switched to an enum class avoids the underlying bug in that test?. It is indeed possible. It could also be a platform dependent thing or it could be depend on the library actually build as part of ROOT ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327901090:161,test,test,161,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327901090,1,['test'],['test']
Testability,"> I could probably write some for sqlite . It would be grate! ; As far as I know, sqllite can be squeezed in one file. If you can create such small data base (~100KB) with all supported data types and provide simple test macro for reading - it would be really grate! With mysql I am not sure how to do this easily.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3707#issuecomment-484375382:216,test,test,216,https://root.cern,https://github.com/root-project/root/pull/3707#issuecomment-484375382,2,['test'],['test']
Testability,"> I do not see any warnings with `gs`:; > ; > ```; > % gs Test.pdf; > GPL Ghostscript 9.05 (2012-02-08); > Copyright (C) 2010 Artifex Software, Inc. All rights reserved.; > This software comes with NO WARRANTY: see the file PUBLIC for details.; > Processing pages 1 through 1.; > Page 1; > >>showpage, press <return> to continue<<; > ```. you version is defnitly different to mine. Maybe they changed something over the years and now these warnings apear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560#issuecomment-1697281477:58,Test,Test,58,https://root.cern,https://github.com/root-project/root/issues/13560#issuecomment-1697281477,1,['Test'],['Test']
Testability,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15149#issuecomment-2039816688:1261,log,logic,1261,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688,2,['log'],['logic']
Testability,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1210918515:177,log,log,177,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1210918515,1,['log'],['log']
Testability,"> I don't have a good solution here... and big endian is certainly on the way out. We might emulate a big-endian architecture using `qemu`, but building ROOT and testing there might take some time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10402#issuecomment-1125345137:162,test,testing,162,https://root.cern,https://github.com/root-project/root/pull/10402#issuecomment-1125345137,1,['test'],['testing']
Testability,"> I don't remember how the first commit fixes errors, it seems to throw errors in more cases. Can you remind me?. By removing the error-unchecked assertions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13296#issuecomment-1839042417:146,assert,assertions,146,https://root.cern,https://github.com/root-project/root/pull/13296#issuecomment-1839042417,1,['assert'],['assertions']
Testability,"> I don't think we have it, or do we? I only see it in this test suite where it is deactivated for Python 3:. Indeed, I remembered we had more, maybe we already got rid of some instances, there is also [this file](https://github.com/root-project/roottest/blob/f09afcfc77741909bc80431ba2d749ae3c5f7a1e/python/regression/Amir.py#L6) which points at this [jira issue](https://its.cern.ch/jira/browse/ROOT-8931) related to the argument, so we can also close that one once this is merged :+1: . > why do you think an explicit __all__ is better than not having this attribute at all?. Explicit is better than implicit, having the attribute means we can also comment on it for readers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1926955879:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1926955879,1,['test'],['test']
Testability,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..?. The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1661649786:886,test,test,886,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1661649786,2,['test'],['test']
Testability,"> I don't understand why we would want to allow older versions than we did in the past. The reason why we restrict version - we were not testing for `json_fwd.hpp`. ; With 3.11.x version such simple restriction no longer working. But now we testing `json_fwd.hpp` and can use it, and restriction making no sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1245012584:137,test,testing,137,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1245012584,4,['test'],['testing']
Testability,"> I don't want to bikeshed on this PR but why did you end up with so much code - wasn't just looking at the `gOptModuleByproducts` enough?. Please propose a PR; I don't see how else to do it. And btw ""so much code"": it's adding 15 lines; the rest just moves code around to help the logic / control flow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12067#issuecomment-1398060430:282,log,logic,282,https://root.cern,https://github.com/root-project/root/pull/12067#issuecomment-1398060430,1,['log'],['logic']
Testability,"> I don't want to require Chrome for ROOT, so the test (and ROOT) must survive also without. Would that be possible? Or is it already the case and I just misread your statement?. Without chrome browser any kind of batch root7 graphics generation will fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4855#issuecomment-578158318:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/4855#issuecomment-578158318,1,['test'],['test']
Testability,"> I don't when it was restricted to single test but the original intent was to apply the load/unload to all the clang test to have as ""complete"" of a coverage as possible:; > ; > ```; > commit 2334a2089ecda6998bb0fbbc3e63bf027a52ddac; > Add a test that loads every clang test and unloads it; > ```. That would be commit 2a420c374054d51441c601d54d13a6d73fc8814e (maybe by accident), after commit 180be8392b9fae67a6d99cc5c35de3dde8aea71d noted that the ""test is a no-op in CMake"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2306437590:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2306437590,5,['test'],['test']
Testability,"> I expect, that ClassDef and LinkDef.h changes are not necessary - just moving RBrowserDataCleanup to header files. I tested this before submitting, and it didn't fix the problem. But I'm by no means an expert in this area, entirely possible that I'm missing something!. > Fully agree. One should try to analyze why problem appears at all. @pcanal could you help with this? I'm not very familiar with this part of ROOT...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1615702365:119,test,tested,119,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1615702365,1,['test'],['tested']
Testability,"> I feel uneasy about this change. @smuzaffar, can you run the cmssw CI on this PR?. cmssw tests started via https://github.com/cms-sw/root/pull/210",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16420#issuecomment-2352341188:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/16420#issuecomment-2352341188,1,['test'],['tests']
Testability,"> I find that this patch solves the problem (at least in the reduced case):. Yes, this change solves the problem with original file with many RooFit canvases. It looks logical. I hope, it does not have other side effects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1692916652:168,log,logical,168,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1692916652,1,['log'],['logical']
Testability,> I found a specific use case as example and updated the commit log. My github refuses to show me the updated commit log.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663608718:64,log,log,64,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663608718,2,['log'],['log']
Testability,"> I found line https://github.com/root-project/root/pull/15038/files#diff-c35e46fbb246941a30fd3fa261506e5eb03b601e3bf6734460f814fd3aa156c9R46 intriguing. We are doubling the compression level given in input. The ZSTD documentation does not say anything which could possibly justify this behaviour https://facebook.github.io/zstd/zstd_manual.html . This deserves a bit of caution/discussion I believe, also given the test of the compression level which has to be coherent with that. From the linked manual:. > The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; > which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; > caution, as they require more memory. The library also offers negative; > compression levels, which extend the range of speed vs. ratio preferences.; > The lower the level, the faster the speed (at the cost of compression). So the doubling maps ROOT's single digit layer to the ""reasonable"" level 0 to 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15038#issuecomment-2017606324:416,test,test,416,https://root.cern,https://github.com/root-project/root/pull/15038#issuecomment-2017606324,1,['test'],['test']
Testability,> I found out by testing that multiple connections are possible if I use session key and require auth key is disabled. Session key is useless without connection key.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14779#issuecomment-1969631741:17,test,testing,17,https://root.cern,https://github.com/root-project/root/pull/14779#issuecomment-1969631741,1,['test'],['testing']
Testability,"> I have built successfully for the latest master version of root on the latest macOS 13.3.1, with the option `root7=ON` open gui with `root --web=safari` or other web browser works fine with new TCanvas;; > ; > tested 3 days, with `root --web` works fine on mac os 13.3.1, actually more stable than ever `using cocoa`. What's your version of xcode and command line tool? I still can't build successfully. It may also be the enabled options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1519260717:212,test,tested,212,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1519260717,1,['test'],['tested']
Testability,"> I have measured the runtime of all PyROOT tests without and with this PR, and there is no significant difference (see results at the end of this post). Thank you very much @guitargeek. > Given that the CI is also green, I would suggest you polish up the implementation a little bit and open a PR upstream: https://github.com/wlav/CPyCppyy. I will open a new PR with the changes I just made. Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16000#issuecomment-2217381932:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/16000#issuecomment-2217381932,1,['test'],['tests']
Testability,"> I have not thoroughly tested it but LGTM. Please just run the configuration step and let us know if it fails for you. As mentioned in the description, it works for me with many concurrent versions of clang installed in the system. However, I have vanilla clang only, so the build step fails due to API incompatibilities from ROOT's patches. > PS: Consider improving the commit log. Sure, I will add some explanation text.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3807#issuecomment-492090162:24,test,tested,24,https://root.cern,https://github.com/root-project/root/pull/3807#issuecomment-492090162,2,"['log', 'test']","['log', 'tested']"
Testability,"> I have roottest working now. Which tests do I need to run? There are 2000. I think you do not need to run it explicitly, just have a fork on GitHub, so that the automatic CI tests pass well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7208#issuecomment-783741861:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/7208#issuecomment-783741861,2,['test'],['tests']
Testability,"> I have run the current version of mlpHiggs.C. It works fine seems to me.; > I do not see why changing it ?. The test falls back to using a remote copy if the local file can not be opened.; If the test is run in an environment without network access (e.g. koji) it fails without the change, because the local copy is not found.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5162#issuecomment-600663967:114,test,test,114,https://root.cern,https://github.com/root-project/root/pull/5162#issuecomment-600663967,2,['test'],['test']
Testability,"> I have tested the PR with the code used to reproduce #7890 and unfortunately the memory leak is still there. Ok, I think I saw one more in the leak sanitizer logs, I'll rerun with the fixes and check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7904#issuecomment-822273459:9,test,tested,9,https://root.cern,https://github.com/root-project/root/pull/7904#issuecomment-822273459,2,"['log', 'test']","['logs', 'tested']"
Testability,"> I hope we'll see the same behaviour as in our private tests 🤞. Like this? 😉 ; ```; C:\root-dev\build\x64\release>ctest -C Release -R pyroot-pyz-stl-set; Test project C:/root-dev/build/x64/release; Start 7: pyunittests-bindings-pyroot-pythonizations-pyroot-pyz-stl-set; 1/1 Test #7: pyunittests-bindings-pyroot-pythonizations-pyroot-pyz-stl-set ... Passed 1.44 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 1.91 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16763#issuecomment-2441530176:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/16763#issuecomment-2441530176,6,"['Test', 'test']","['Test', 'tests']"
Testability,"> I know it may be hard, but can we have a test?. Yes, I preparing test for this functionality",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931#issuecomment-2190819108:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/15931#issuecomment-2190819108,2,['test'],['test']
Testability,"> I might be missing something, but I think the C++ logic can be simplified by removing RTypeErasedMergeables: we should be able to just return a RMergeableVariations<T> (cast to RMergeableValueBase, from which it could inherit) from RVariedAction::GetMergeableValue. What do you think?. My understanding is as follows: `RVariedAction::GetMergeableValue`'s signature is `std::unique_ptr<RMergeableValueBase> GetMergeableValue() const` . Inside the implementation of this function, I have no typename `T` with which I could construct internally a `std::vector<std::unique_ptr<RDFDetail::RMergeableValue<T>>>`. Thus, I need a struct that holds a `std::vector<std::unique_ptr<RDFDetail::RMergeableValueBase>>` (keep in mind that any subclass of `RActionImpl` defined in `ActionHelpers.hxx` has a method `std::unique_ptr<RMergeableValueBase> GetMergeableValue() const`, so inside `RVariedAction`'s `GetMergeableValue` I don't have any information about the concrete mergeable value type).; I would also just return a `std::vector<std::unique_ptr<RDFDetail::RMergeableValueBase>>` directly from this method, but then I would break the pattern of passing around unique ptrs to `RMergeableValueBase` and I would need to change the interface just for `RVariedAction`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9942#issuecomment-1061744458:52,log,logic,52,https://root.cern,https://github.com/root-project/root/pull/9942#issuecomment-1061744458,2,['log'],['logic']
Testability,"> I noticed that in the logs of the CI runs of this particular PR, The two relevant tutorials are being run 3 times on the windows nodes, e.g. searching for; > ; > ```; > Start 959: tutorial-v7-concurrentfill.cxx; > ```; > ; > Returns 3 results. Now this is extremely weird, but I could not see it happening in any other PR or in the nightlies. I even triggered a [CI run](https://github.com/root-project/root/pull/14481) to print the target tutorials created at configuration time and that still returned only 1 target tutorial. Running 3 times is intentional and because of; https://github.com/root-project/root/blob/aea6318989b0e4da60e48226c379d202ab51f691/.github/workflows/root-ci-config/build_root.py#L128-L130",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1916208136:24,log,logs,24,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1916208136,1,['log'],['logs']
Testability,"> I propose to:; > ; > 1. Disable CLAD on macbeta in master and merge this PR. I decided to merge this PR as-is; `clad=OFF` for `mac-beta` is done in https://github.com/root-project/root/pull/15910. > 2. Port this PR to 6.32, disable CLAD on macbeta and merge the PR. Agreed; let's wait for the PR above to be merged and then we can backport the two (edit: https://github.com/root-project/root/pull/15911). > 3. If the work is little, backport to 6.28 and 6.30 and disable clad. Otherwise, disable macbeta builds on 6.28 and 6.30. We'll need to test how LLVM 13 in general behaves for the new SDK. I can hopefully do this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15900#issuecomment-2185706642:545,test,test,545,https://root.cern,https://github.com/root-project/root/pull/15900#issuecomment-2185706642,1,['test'],['test']
Testability,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042#issuecomment-1595284979:351,test,tested,351,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979,6,['test'],"['test', 'testable', 'tested']"
Testability,"> I see you macro. it should be:; > ; > ```; > void feynman(); > {; > TCanvas *c1 = new TCanvas();; > TFeynman *f = new TFeynman();; > f->AddItem(""fermion"", 10, 10, 30, 30);; > f->Draw();; > }; > ```; > ; > then you start you new built root. And do:; > ; > ```; > root[0] .x feynman.C; > ```; > ; > is it what you are doing ?. Actually I created a buildroot directory outside of the root directory on my laptop and I run ; ```; cmake -DCMAKE_INSTALL_PREFIX=../rootinstall ../root. cmake --build . -- -j4; ```; And then once it is done I navigate to the buildroot/bin directory and run ; ```; source thisroot.sh; ./root test.C; ```; The test.C has the same contents as feynman.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-821166029:619,test,test,619,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-821166029,2,['test'],['test']
Testability,"> I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes. I tend to agree. > I tried adding appending `-Wno-error` to the CMakeLists of some directories (like `interpreter`), but it didn't really work (I guess `-Werror` gets added after it so it suppresses the other flag) and even if it did it looks sketchy. Not sure what's the best way to approach this. As mentioned before, I think nothing is needed for `interpreter/` because we already disable all warnings for LLVM libraries. For `core/clingutils` and `core/metacling`, I think the flags must be set before `ROOT_OBJECT_LIBRARY`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173773554:53,test,tested,53,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173773554,1,['test'],['tested']
Testability,"> I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes. We still need to test (at the very least in the nightly) what the user will see. If we don't test it we will eventually break it (for example some new `CMake` that inadvertently relies on side-effect of that code path).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2174024966:53,test,tested,53,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2174024966,3,['test'],"['test', 'tested']"
Testability,"> I suspect if 2 macros have the different content this means that the user has updated/fixed the code between the 2 run producing the files ... whether the change is semantically consequent (i.e the files are compatible or not is a decision the user has to take) ... So it would make sense to only merge the TMacro that are all the same .... I understand your concerns, but I don't know whether its possible to implement it like that. At least I don't know how.; However, I would consider merging the results of two different versions of the same macro extremly dangerous and would only use that for quick and dirty tests. At least in my case the macros are so complex that I would rerun it after all changes for safety.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4830#issuecomment-577576252:617,test,tests,617,https://root.cern,https://github.com/root-project/root/pull/4830#issuecomment-577576252,1,['test'],['tests']
Testability,"> I tested a bit on my end, I guess the `llvm::StringRef` conversion errors are the following:; > ; > ```; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx: In function ‘std::__cxx11::string GetSharedLibImmediateDepsSlow(std::__cxx11::string, cling::Interpreter*, bool)’:; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:7119:25: error: ambiguous overload for ‘operator==’ (operand types are ‘llvm::StringRef’ and ‘const char [20]’); > if (SymName == ""_Jv_RegisterClasses"" ||; > ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; > /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; > inline Bool_t operator==(const std::string_view &s1, const char *s2); > ^~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; > /home/jhahnfel/ROOT/llvm13/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088544588:4,test,tested,4,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088544588,1,['test'],['tested']
Testability,"> I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?. No, it is not, see my comments about the coordinates ... how do you define them ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-829931553:47,test,tested,47,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829931553,1,['test'],['tested']
Testability,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142#issuecomment-1845235983:571,benchmark,benchmark,571,https://root.cern,https://github.com/root-project/root/pull/14142#issuecomment-1845235983,1,['benchmark'],['benchmark']
Testability,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used?; > ; > > Users do not use make project; > ; > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > ; > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659503189:1058,test,test,1058,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659503189,1,['test'],['test']
Testability,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619057225:398,test,test,398,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225,6,"['log', 'test']","['logic', 'test']"
Testability,"> I think my fix is actually could be right, can you check it please again?. Your fix simply removes usage of semi-standard pthread_setname_np function on linux.; It is not right solution in my mind. Unfortunately, I cannot test with clang8. ; With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv); {; return 0;; }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418737656:224,test,test,224,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418737656,4,['test'],['test']
Testability,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1823482567:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> I think the PR needs to also fixup the new `RNTupleModel, Clone` unit test. Done; I had to add `const` overloads for `RFieldBase::begin()` and `end()` in order to make range-based for loops works, let me know if that's ok or should be solved differently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16714#issuecomment-2424149303:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/16714#issuecomment-2424149303,1,['test'],['test']
Testability,"> I think the error is due to the fact that there is no VDT on Windows. Did you try without VDT on other platforms?. I don't think it's that. :thinking: `ROOTConfig.cmake` will not look for VDT in this PR's setup if VDT was not used in the build. I instead believe that I was just trying to set the `CMAKE_PREFIX_PATH` environment variable incorrectly in the Windows shell. Since Windows provides a few different shells, each of which comes with a slightly different formalism, in the end I reverted back to passing `CMAKE_PREFIX_PATH` as a cache variable to that test. On Linux that works. Hopefully it will work on Windows too. I tried to set up a build on Windows on my laptop, but when after about 20 minutes it was still failing in one of the externals, I just gave up. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1342794108:564,test,test,564,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1342794108,1,['test'],['test']
Testability,"> I think the test is actually good, except for `assert(longString[i] = checkString[i])`: It should be `==` and `assert` doesn't work interactively depending on the options ROOT was built with. I added a standalone gtest that I came up with independently... Yep, the `==` I had fixed already and forgot to edit the post. So probably the mistake was then using assert which I was checking interactively :) Thanks for clarifying!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-2023312172:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-2023312172,4,"['assert', 'test']","['assert', 'test']"
Testability,"> I think there is a pretty clear explanation where this comes from in the commit history. We could not load `gRandom`. That was with the very old dyld-based approach to loading symbols. This PR checks if the new approach has the same problem. Note that:; - We can still not reproduce the issue; - With this change, I got the following test failure on Windows (not tested in our CI):; ```; 988: Processing C:/Users/sftnight/git/master/tutorials/rcanvas/symlog.cxx...; 988: IncrementalExecutor::executeFunction: symbol '_imp_?gRandom@@3PAVTRandom@@A' unresolved while linking function '_GLOBAL__sub_I_cling_module_5'!; 988: You are probably missing the definition of _imp_?gRandom@@3PAVTRandom@@A; 988: Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1091405727:336,test,test,336,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1091405727,4,['test'],"['test', 'tested']"
Testability,"> I think there should be little failures since we switch already long ago to the ""just fail the test"" mode. But you never know :). There is a ton of tutorials that would fail that currently do not run, see #5938 . But I don't think this PR interferes with that, right @hageboeck ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654898523:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654898523,1,['test'],['test']
Testability,"> I think we should have some unit tests. Indeed, we also discussed those during the review. I'll squash the commits, add tests and open the PR for the final review",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10098#issuecomment-1082007083:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/10098#issuecomment-1082007083,2,['test'],['tests']
Testability,"> I think we want to test code in core/foundation which is the most restrictive place in ROOT - eg we can run with rootcling_stage1, etc. I think we can move the library there to avoid introducing incompatible changes.; > ; > Maybe we can avoid the new library situation and conditionally add the testing header/source files to an existing library, eg libFoundation?. That should be possible. What do you think @Axel-Naumann ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009720710:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009720710,2,['test'],"['test', 'testing']"
Testability,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804875300:369,test,tests,369,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804875300,1,['test'],['tests']
Testability,"> I took the liberty to get the member names in line with the RooFit conventions. I also added tags to typeset the formulas as latex.; > ; > Currently, there are problems with the build system, so we will have to wait a bit for the final test. Thanks - and my apologies about the member names - I should have done that from the start, but it's hard to act against one's reflexes. Please let me know if there's anything else I should be doing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-490047636:238,test,test,238,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-490047636,1,['test'],['test']
Testability,"> I understand that backwards compatibility is a strong factor. Would it be possible to print a warning when the internal unit system is assumed when no unit is explicitly specified?. The difficulty is that the large unit-unaware GDML files may generate tons of such warnings, bloating the log files. Also, printing just a general warning once that the file contains unitless entities may pass unnoticed. What would you expect the behavior to be?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1329207975:290,log,log,290,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1329207975,1,['log'],['log']
Testability,> I updated the stack trace. Note that we verified that in the 'real' case neither TROOT::~TROOT nor TCling::~TCling have been run before the assert. We also verified that calling SetUnloaded for that class 'right before' the end/return of main have the same behavior. That confuses me. So we call explicitly from users code `SetUnloaded` when we have properly initialized TROOT and TCling?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462#issuecomment-620534291:142,assert,assert,142,https://root.cern,https://github.com/root-project/root/pull/5462#issuecomment-620534291,1,['assert'],['assert']
Testability,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm; b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm; c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm; d) generate only the pcm (renaming it rdict.pcm) ; e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435348431:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435348431,3,['test'],['test']
Testability,> I vote to add it in rootbench.git +1. I bet we will already see an improvement in the current benchmark?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6144#issuecomment-671243605:96,benchmark,benchmark,96,https://root.cern,https://github.com/root-project/root/pull/6144#issuecomment-671243605,1,['benchmark'],['benchmark']
Testability,"> I was reading the doc of the action _""It can backport [rebased and merged](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#rebase-and-merge-your-pull-request-commits) pull requests with a single commit and [squashed and merged](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#squash-and-merge-your-pull-request-commits) pull requests.""_. Ah, ok, well. At that point if we want the bot to help us we should probably do 1 commit by PR for backports. Alternatively, we can implement our own logic - should be no more than 2-3 git commands...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14889#issuecomment-1983059044:602,log,logic,602,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1983059044,1,['log'],['logic']
Testability,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing?. > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax?. > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619095994:404,test,test,404,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619095994,2,['test'],"['test', 'tests']"
Testability,"> I will try to test locally first, then I will merge it. For CEF you find instructions in gui/cefdisplay/readme.md file; For qt5 I did not provide info, just install Qt5WebEngine and Qt5WebEngineWidgets libraries.; And configure with command:. cmake -Droot7=ON -Dcxx14=ON -Dcefweb=ON -Dqt5web=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365925950:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365925950,1,['test'],['test']
Testability,"> I would argue that typical cmake projects do not need to deal with this. Fair enough, other projects just leave the headers in the source directory.; But I don't understand the motivation for this change then. > it allows better navigation from compile output logs in IDEs and better editing of headers. Can you elaborate on why symlinking is better than copying in these regard? (e.g. why is your IDE trying to edit the headers in the build directory?) Again, just curious, my workflow does not rely on compilation logs for navigation so I never had this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656201185:262,log,logs,262,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656201185,2,['log'],['logs']
Testability,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001954686:403,test,tests,403,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686,2,['test'],['tests']
Testability,> I'll go through the C++ source later... @bellenot and all other; It is really build test - I used very fancy forwarding of template declaration with 6 arguments.; Want to be sure that it works on all platforms.; On the meeting we should discuss how deep we want to refactor old code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2705#issuecomment-425104173:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/2705#issuecomment-425104173,1,['test'],['test']
Testability,"> I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. > Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?. Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake.; Does the test pass locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968052222:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968052222,26,"['log', 'test']","['log', 'login', 'logs', 'test', 'tests']"
Testability,"> I'm hoping that #8204 will work - it does address the issue for me. Thx, I am in vacation this week but will test next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8180#issuecomment-844884758:111,test,test,111,https://root.cern,https://github.com/root-project/root/issues/8180#issuecomment-844884758,1,['test'],['test']
Testability,"> I'm not familiar with root's llvm merging strategy, how to fix above llvm-diff errors?. We need to have a tag in https://github.com/root-project/llvm-project/. I will take care of this, that's why I asked for the commit hashes :wink: . In the mean time, it would be great to get CMS testing on `ppc64le`. @smuzaffar can you help with that? Now that the LLVM upgrade is merged, I guess this should be a bit easier...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1864372469:285,test,testing,285,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1864372469,1,['test'],['testing']
Testability,"> I'm relatively sure it can be made work if we also pass `-DCLANG_DIR=${Clang_DIR}` in `interpreter/cling/tools/plugins/clad/CMakeLists.txt`, but I won't be working on things touching `interpreter/llvm/` until I can properly revert Clang patches again. So yeah, we can go ahead with this PR for now. Any news on this? Just tested this again with your llvm16 branch and it's still required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1659113144:324,test,tested,324,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1659113144,1,['test'],['tested']
Testability,"> I've figured out why the test fails on macOS. There, libz.so gets autoloaded,. Why does it get autoloaded 'only' on macOS? I.e. I don't see why it would be autoloaded on its own and so I am concerned another library is indirectly bringing it along ... i.e. we may (or may not) need to hide the libz symbol in that library too ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1636#issuecomment-366686614:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/1636#issuecomment-366686614,1,['test'],['test']
Testability,"> IIUC the patch is not a fix, it's to expose the problem even without using asan.; > ; > I guess we need to update `TClassEdit::STLArgs` to support RVec, we forgot when moving it to the collection proxy mechanism. That's exactly right. I propose to leave the assert in place. It may get ugly if something like this gets forgotten again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903#issuecomment-821333872:260,assert,assert,260,https://root.cern,https://github.com/root-project/root/issues/7903#issuecomment-821333872,1,['assert'],['assert']
Testability,"> IMHO it sends the wrong signal that nvc++ would be supported. I'm still not seeing the point of having build system support for a ""broken"" compiler (for our purposes). A fair point but I fail to see how it has an consequence for this PR. As is the master does not reject `nvc++` is just fails in some weird ways (that are fixed by this PR) and some weirder ways (bug in the compiler). . ie. *Not* merging this PR would *not* send the signal that `nvc++` is not supported, it would only make it harder to support it in the future and make it more annoying than it should be to try the next version (because then this PR needs to then be hand applied (if by some miracle the tester remembers or knows about this PR) or re-discovererd-and-re-implemented). The 'right' way to express the point you make is:; (a) merge the best possible version of this PR ; (b) explicitly warn or error out upon seeing a known broken version of `nvc++`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14370#issuecomment-1900419680:675,test,tester,675,https://root.cern,https://github.com/root-project/root/pull/14370#issuecomment-1900419680,1,['test'],['tester']
Testability,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option?. ```; new TFile(""name.root?reproducible=somename"",""recreate""); ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept?. Of course this could also be decoupled from the reproducible feature by having this in a different option. ```; new TFile(""name.root?reproducible&fname=somename"",""recreate""); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524219323:294,sandbox,sandbox,294,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524219323,1,['sandbox'],['sandbox']
Testability,"> Ideally you would backport the fix for root.git now. The change of roottest can stay in master and you can merge that once it's fixed / disabled on windows. Thanks!. Done, also directly pushed to `v6-26-00-patches` given that no test detected the failure anyhow. I'll wait for Jenkins to complete https://github.com/root-project/roottest/pull/808 before I merge that, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1022213045:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1022213045,1,['test'],['test']
Testability,"> If it can be turned into a constexpr that would probably be better. Here are the numbers, after this PR + the diff; ```; diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h; index 7710169876..8181dc2563 100644; --- a/core/base/inc/TString.h; +++ b/core/base/inc/TString.h; @@ -277,7 +277,7 @@ private:; public:; enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };; enum ECaseCompare { kExact, kIgnoreCase };; - static const Ssiz_t kNPOS = ::kNPOS;; + static constexpr Ssiz_t kNPOS = ::kNPOS;; ; TString(); // Null string; explicit TString(Ssiz_t ic); // Suggested capacity; diff --git a/core/base/src/TString.cxx b/core/base/src/TString.cxx; index 4087cdbb52..f6efde6a0a 100644; --- a/core/base/src/TString.cxx; +++ b/core/base/src/TString.cxx; @@ -54,12 +54,6 @@ as a TString, construct a TString from it, eg:; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; ; -// Definition of the TString static data member. Declaration (even with; -// initialization) in the class body *is not* definition according to C++; -// standard. The definition must be explicitly done in one TU for ODR use. See; -// https://en.cppreference.com/w/cpp/language/definition; -const Ssiz_t TString::kNPOS;; ```. ```; time python -c ""import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)""; -1; 3000. real	0m0.805s; user	0m0.604s; sys	0m0.198s; ```; ```; nm -C $ROOTSYS/lib/*.so | grep TString::kNPOS | wc -l; 0; ```; ```; strace -z -f -o openat.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)'; -1; 3000; grep openat openat.log | wc -l; 402; ```. So indeed, when this PR is merged we can make `TString::kNPOS` `constexpr` and remove also that symbol from `libCore.so` :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1868332728:1467,log,log,1467,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1868332728,2,['log'],['log']
Testability,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s; https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4; but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146#issuecomment-1208052361:117,log,logic,117,https://root.cern,https://github.com/root-project/root/issues/11146#issuecomment-1208052361,1,['log'],['logic']
Testability,"> If possible, I think we should add a test where the inspector opens an ntuple with deferred columns in the second cluster. Yes, my plan was to address the inspector (+ tests) in a separate PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15698#issuecomment-2144408622:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/15698#issuecomment-2144408622,2,['test'],"['test', 'tests']"
Testability,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2052136735:275,test,test,275,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735,8,['test'],"['test', 'tests']"
Testability,"> If this PR is already in a satisfactory state for you, then I will test locally and once I'm done I will rebase and merge. What do you think?. Yes, please merge this PR.; This is now in state I want to have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365924390:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365924390,1,['test'],['test']
Testability,"> If this hypothesis is correct, it would mean that this patch wouldn't work on user-defined types either with only a templated move constructor... Interesting! This is something I can test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14426#issuecomment-1917742936:185,test,test,185,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917742936,1,['test'],['test']
Testability,"> If this is what you are after, I agree with this idea and I will add it to the unit testing suite of this PR. Yes, this is exactly the kind of example I was looking for. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2354113777:86,test,testing,86,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354113777,1,['test'],['testing']
Testability,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10696#issuecomment-1146253227:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/10696#issuecomment-1146253227,2,['test'],"['test', 'tests']"
Testability,"> In `TInterpreter::GetSharedLibDeps`, at some point we call `interp->getDynamicLibraryManager()->searchLibrariesForSymbol(""__libc_single_threaded@GLIBC_2.32"", /*searchSystem*/false)` and that returns `""/home/blue/ROOT/master/_build/roottest/root/dataframe/branchoverwrite""` in this broken usecase.; > ; > As `branchoverwrite` is a completely unrelated test, the linking of which actually breaks the ACLiC compilation of this macro, I guess we don't want to pick `""__libc_single_threaded@GLIBC_2.32""` from `""/home/blue/ROOT/master/_build/roottest/root/dataframe/branchoverwrite""`. Is the `branchoverwrite` the executable which runs the `TInterpreter::GetSharedLibDeps`? If that is not the case then for some reason, on Arch, the implementation thinks `branchoverwrite` is a shared object and not an executable..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-850530149:353,test,test,353,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-850530149,1,['test'],['test']
Testability,"> In addition this changes the value kUseCompiledDefault, could that be documented in the commit log?. Done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4839#issuecomment-577620773:97,log,log,97,https://root.cern,https://github.com/root-project/root/pull/4839#issuecomment-577620773,1,['log'],['log']
Testability,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072#issuecomment-1602886183:390,test,test,390,https://root.cern,https://github.com/root-project/root/pull/13072#issuecomment-1602886183,1,['test'],['test']
Testability,"> In fact, I have a project that uses C++20, and uses ROOT compiled with C++17,. We currently do not support this mixing of standard. > However, once the restriction of this preprocessor macro is resolved, the compilation could pass, and no related problems have been encountered for the time being. . This means that the example/test that have been run so far did not stress the interfaces that uses `std::span` (and/or your lucky that both version are similar enough). In practice, changing the test as this PR does introduces a ODR (one definition rule) violation: i.e. some of the code use one version of `std::span` and some of the code use a different version of `std::span`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252819197:330,test,test,330,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252819197,2,['test'],['test']
Testability,"> In ginclude/compiledata.h, I can see -std=c++2a correctly replacing -std=c++17 in both MAKEEXE and MAKESHAREDLIB. humm ... then it is weird. You can see the actual command line used by typing:; ```; .L test.cpp++kv; ```; (with the 'k' the temporary files are kept and you can try re-running the command line shown in the log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12747#issuecomment-1531439473:204,test,test,204,https://root.cern,https://github.com/root-project/root/issues/12747#issuecomment-1531439473,2,"['log', 'test']","['log', 'test']"
Testability,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1818478493:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493,6,['test'],['test']
Testability,"> In practice, changing the test as this PR does introduces a ODR (one definition rule) violation: i.e. some of the code use one version of `std::span` and some of the code use a different version of `std::span`. Exactly, that's the tricky part of this issue. If no other means are used to avoid problems, and the compilation is successful, directly adding the same name to the std will potentially lead to many surprises. . If I understand correctly, the same is true for `std::string_view`. See `RStringView.hxx`:. ```C++; #if defined(R__HAS_STD_STRING_VIEW) || R__MSVC_LANG >= 201703L || __cplusplus >= 201703L. #include <string_view>. #else. # if defined(R__HAS_STD_EXPERIMENTAL_STRING_VIEW); # include <experimental/string_view>; # else; # include ""RWrap_libcpp_string_view.h""; # endif; ```. There is also a feature test macro. If someone uses C++17 and links to the ROOT compiled by C++14, they might encounter the same issue. I think it is a better practice to change a namespace (such as `cxx20::span`, `cxx17::string_view`, etc.) and provide the corresponding implicit conversion when the standard matches. In this way, users will not be disturbed to use normally, and these features are also available inside ROOT. The only symmetry break is in the API. Because the features exposed are not those of the standard library, users may need to manually convert them in some cases, so implicit conversion should be provided. . For example:. ```C++; #if __cplusplus >= 202002L; # include <span>; #endif. namespace cxx20 {. constexpr std::size_t dynamic_extent =; #if __cplusplus >= 202002L; std::dynamic_extent;; #else; /* something */;; #endif. template<class T, std::size_t Extent = dynamic_extent>; class span {. // ... here is the normal implementation. #if __cplusplus >= 202002L; public:; constexpr operator std::span<T, Extent>() noexcept;; constexpr span(const std::span<T, Extent>& other) noexcept;; constexpr span& operator=(const std::span<T, Extent>& other) noexcept;; #endif. // ... h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1253349273:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1253349273,2,['test'],['test']
Testability,"> In principle LGTM; is it possible to test this in our infrastructure, to make sure the warning pops up where we expect it and that the ""feature"" continues to work for the time being? After removing the instances from `roottest`, we would otherwise lack coverage... Is this test sufficient?. https://github.com/devajithvs/root/blob/master/core/metacling/test/TClingTests.cxx#L91. Or should the test go in `roottest` repository.?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1952137893:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1952137893,4,['test'],['test']
Testability,"> In the currently generated code, I don't see a reinterpret_cast... Is the error message in the commit message maybe copied from an intermediate try?. Indeed it was! I update the description and git log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11556#issuecomment-1329810173:200,log,log,200,https://root.cern,https://github.com/root-project/root/pull/11556#issuecomment-1329810173,1,['log'],['log']
Testability,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository?. You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609417290:513,test,tests,513,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609417290,2,['test'],"['test', 'tests']"
Testability,> Is somebody working with priority on the test case so that we can merge this fix?. I attempted to create one but didn't succeed (https://github.com/root-project/root/pull/14887#issuecomment-1981644071) so I abandoned it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-2023159242:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-2023159242,1,['test'],['test']
Testability,"> Is that intentional?. @pcanal yes, that's an `EXPECT_THROW` in the test code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552#issuecomment-1279118450:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/11552#issuecomment-1279118450,1,['test'],['test']
Testability,> Is there a corresponding roottest PR enabling/adding test for this?. Added a cling test for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15458#issuecomment-2104584643:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/15458#issuecomment-2104584643,2,['test'],['test']
Testability,> Is there a plan to introduce testing for this part?. There was no concrete plan. . One can try to emulate attack on RWebWindow communication without real http server.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15452#issuecomment-2107863360:31,test,testing,31,https://root.cern,https://github.com/root-project/root/pull/15452#issuecomment-2107863360,1,['test'],['testing']
Testability,> Is there possibility to disable automatic testing with gcc 4.8.x?. This is still used a lot. Isn't there a way to backport the external library to that version of gcc?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-351527582:44,test,testing,44,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-351527582,1,['test'],['testing']
Testability,> Is this WIP or ready for testing?. It is ready to go in if I manage to resolve the last issue in https://github.com/root-project/root/pull/5094#issuecomment-607082228,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628636323:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628636323,1,['test'],['testing']
Testability,"> Isn't it wrong? Testing floating point for equality is numerically unstable, isn't it?. Normal float representation is 1.2345e67; But in trivial cases (like 1 or 2 or 35) integer is much shorter. Yes, `value == std::nearbyint(value)` not always return true for real integer, but this should not be a problem. In such case one just gets value like ""5.0000001e1"". And such value absolutely ok - other side should not expect integer at this place anyway. This is just to save space in produced JSON string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/925#issuecomment-326642782:18,Test,Testing,18,https://root.cern,https://github.com/root-project/root/pull/925#issuecomment-326642782,1,['Test'],['Testing']
Testability,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413992581:315,assert,assert,315,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413992581,2,['assert'],['assert']
Testability,"> It does so only for the left-over elements when the collection shrinks. uhm why are leftover elements different from elements that are replaced? if some resource management logic has to be called when an element is removed, it might also have to be called when it is replaced?. EDIT: ah, I see now that #10520 basically covers this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8770#issuecomment-1117113278:175,log,logic,175,https://root.cern,https://github.com/root-project/root/pull/8770#issuecomment-1117113278,1,['log'],['logic']
Testability,"> It is a bit confusing, it is possible to run this code as standalone still? I would actually remove ; > everywhere this possibility (e.g remove -> find_package(ROOT REQUIRED) and etc.). I explained in Mattermost - `find_package(ROOT REQUIRED)` kept in two places while variables like `ROOT_vs_FOUND` or `ROOT_mathcore_FOUND` defined only after calling `ROOTConfigure.cmake`. One need to change a lot in `test/CMakeLists.txt` and `tutorials/CMakeLists.txt`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5577#issuecomment-625777738:406,test,test,406,https://root.cern,https://github.com/root-project/root/pull/5577#issuecomment-625777738,1,['test'],['test']
Testability,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange.; [new.log](https://github.com/root-project/root/files/14669633/new.log); [old.log](https://github.com/root-project/root/files/14669634/old.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2009990047:298,log,log,298,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2009990047,4,['log'],['log']
Testability,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10748#issuecomment-1159421157:12,log,logic,12,https://root.cern,https://github.com/root-project/root/issues/10748#issuecomment-1159421157,2,['log'],['logic']
Testability,"> It removes the requirement for version 3.9. Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. > It worsens the error message in case json_fwd.h when it is required for recent versions. They were written based on feedback from upstream, so I would like to keep the detailed messages. `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. After LLVM upgrade we could completely skip usage of `json_fwd.h`. I hope it will happen before 6.28 release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230200939:189,test,testing,189,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230200939,2,['test'],['testing']
Testability,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1756967993:317,test,test,317,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1756967993,1,['test'],['test']
Testability,"> It seems to be reproducible via vanilla cppyy as shown below. . The example above isn't a proper leak check b/c the `range()` call will have Python cache integers, the first `obj.leak` call will compile a wrapper (loading all kinds of stuff the first time around) etc. Below is an actual test, which doesn't leak on ""vanilla cppyy"" although it may still be on the one included in ROOT as there are differences:. ```; import cppyy, gc, os, psutil. cppyy.cppdef(""""""; #include <string>; class foo {; public:; const std::string leak (std::size_t size) const {; std::string result;; result.reserve(size);; return result;; }; };; """"""). process = psutil.Process(os.getpid()). # warmup; obj = cppyy.gbl.foo(); for i in range(1000000):; s = obj.leak(2048). gc.collect(). last = process.memory_info().rss. for i in range(1000000):; s = obj.leak(2048). gc.collect(); assert last == process.memory_info().rss; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15703#issuecomment-2145734725:290,test,test,290,https://root.cern,https://github.com/root-project/root/issues/15703#issuecomment-2145734725,2,"['assert', 'test']","['assert', 'test']"
Testability,> It will be my honor to squash that last test failure tomorrow.; > ; > @vgvassilev do we need anything else before we merge? Should we have a pass over this PR's history to clean it?. We need to:; - [ ] Review the commit history;; - [ ] Update back the clang.git and llvm.git forks with the right set of changes we applied after we imported the code in ROOT; - [x] Fix the cmssw reported issue - I believe it is due to not properly rebased patch in clang.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326773688:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326773688,1,['test'],['test']
Testability,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14218#issuecomment-1865931261:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/14218#issuecomment-1865931261,3,['test'],['test']
Testability,"> It would be nice to include a test of the operator. @lmoneta added the test for Leaky Relu, Kindly review the PR and suggest changes if needed. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10415#issuecomment-1111551637:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/10415#issuecomment-1111551637,2,['test'],['test']
Testability,> It would probably be good to add a test for this ... Problem with test - it must fail anyway. Just avoid invalid arguments in TString::Replace.; I will adjust commit soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6498#issuecomment-700715275:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/6498#issuecomment-700715275,2,['test'],['test']
Testability,"> It's at the end of the `testRooFuncWrapper` file where you can exclude specific tests: https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx; > ; > In the case of Windows, it's the `AddPdf` fit that fails, which is encoded in `param3`. So wee need:; > ; > ```c++; > INSTANTIATE_TEST_SUITE_P(RooFuncWrapper, FactoryTest,; > testing::Values(param1, param2,; > #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS); > param3,; > #endif; > param4, param5, param6, param7, param8, param8p1, param9, param10, param11,; > param12, param13),; > [](testing::TestParamInfo<FactoryTest::ParamType> const &paramInfo) {; > return paramInfo.param._name;; > });; > ```; > ; > By the way, this failure is maybe not even related to Clad, but could be because of different random numbers. I will follow up on this later after this PR. I do not understand the change but I've added it. Let's see what happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1939006181:26,test,testRooFuncWrapper,26,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1939006181,7,"['Test', 'test']","['TestParamInfo', 'test', 'testRooFuncWrapper', 'testing', 'tests']"
Testability,"> It's exactly the point of the test that the results should be the same bit-wise. I don't understand why you want this, I will comment on the other PR. > If you want green builds :green_apple: I suggest to disable this test on mac13arm with a comment. Yes, we should always have green builds, and in my opinion it's very unfortunate that we have known-failing tests on a significant platform for months.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12784#issuecomment-1538438094:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/12784#issuecomment-1538438094,3,['test'],"['test', 'tests']"
Testability,> It's guaranteed that tests excluded by this ROOT_runtime_cxxmodules_FOUND are temporary. Are temporary and will always be? I.e. also future usages of this exclusion mechanism will only ever exclude tests temporarily? So grepping for `ROOT_runtime_cxxmodules_FOUND` will only find tests that must be re-enabled? Good!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-387662235:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-387662235,3,['test'],['tests']
Testability,"> It's off intentionally because of what I wrote previously.; > ; > https://github.com/root-project/root/blob/498ac1dca5c1c30bc9fa3bc2ec722c33ebbd93a8/core/sanitizer/SanitizerSetup.cxx#L19-L23. Ah yes, I only checked `__lsan_options`... Regarding the test failures, I'm currently going through them one-by-one to create issues on GitHub.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1056659717:251,test,test,251,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1056659717,1,['test'],['test']
Testability,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183#issuecomment-2046093422:210,test,test,210,https://root.cern,https://github.com/root-project/root/pull/15183#issuecomment-2046093422,1,['test'],['test']
Testability,"> Just curious: would it also work to have the build directory adjacent to the source directory, instead of below the git repository? Or does this interact poorly with IDEs?. I think that interacts poorly with keeping things in order in your filesystem: say you have a `projects/` directory with `myawesomeproject1/` and `myothersideproject/` inside, you don't want them both creating a `build` directory next to the sources. But at the same time for IDEs and tools to automatically pick up build artifacts (e.g. tests) you do want every project to use the same name for the build directory (ideally `build/` as per [pitchfork](https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs)'s recommendations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12881#issuecomment-1563102438:513,test,tests,513,https://root.cern,https://github.com/root-project/root/pull/12881#issuecomment-1563102438,1,['test'],['tests']
Testability,"> LGTM !; > Thank you Vassil for fixing the issue with the R include files.; > Are we testing in the PR builds the R interface ?. IIRC we had a node with R enabled, however I'd not rely on that. After merging I will trigger the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8827#issuecomment-895901592:86,test,testing,86,https://root.cern,https://github.com/root-project/root/pull/8827#issuecomment-895901592,1,['test'],['testing']
Testability,"> LGTM but I think a test would be useful; ; Yes, it is https://github.com/root-project/roottest/pull/950",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12662#issuecomment-1510464426:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/12662#issuecomment-1510464426,1,['test'],['test']
Testability,"> LGTM for the RDF part.; > ; > Out of curiosity, can you share a link to the kind of errors you see?. ```; Start 878: tutorial-dataframe-df001_introduction-py. 878: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df001_introduction.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 878: Environment variables:; 878: ROOT_HIST=0; 878: Test timeout computed to be: 1500; 878: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 878: error code: -529697949; 878:; 878:; 1/16 Test #878: tutorial-dataframe-df001_introduction-py .................***Failed 5.63 sec; test 879; Start 879: tutorial-dataframe-df002_dataModel-py. 879: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df002_dataModel.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 879: Environment variables:; 879: ROOT_HIST=0; 879: Test timeout computed to be: 1500; 879: Error in <TChain::LoadTree>: Cannot find tree with name in file df002_dataModel_py.root; 879: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 879: error code: -529697949; 879:; 879:; 2/16 Test #879: tutorial-dataframe-df002_dataModel-py ....................***Failed Error regular expression found in output. Regex=[Error in] 8.04 sec; test 880; Start 880: tutorial-dataframe-df003_profiles-py. 880: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:166,Test,Test,166,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,5,"['Test', 'test']","['Test', 'test']"
Testability,"> LGTM if all tests pass. Thanks! This PR fixes the build, but then some tests are failing. Need more investigations. Still working on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15855#issuecomment-2168112742:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/15855#issuecomment-2168112742,2,['test'],['tests']
Testability,"> LGTM! 13 tests were fixed (from 37 to 24), but why -Dsoversion=Off should be off?. I was just playing around. No particular need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4758#issuecomment-573834193:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/4758#issuecomment-573834193,1,['test'],['tests']
Testability,"> LGTM! Do we also want to use this in case someone attempts to create a `std::unique_ptr` field of a cyclic class? Or is this already handled in some other way?. Thanks! Yep, the `unique_ptr` case is handled in the same way than the unit-tested vector case: `RFieldBase::Create` will construct the unique_ptr from a `RUniquePtrField` with an inner field of the actual type. And, if cyclic, fail on the construction of that inner type.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14874#issuecomment-1983009306:239,test,tested,239,https://root.cern,https://github.com/root-project/root/pull/14874#issuecomment-1983009306,1,['test'],['tested']
Testability,"> LGTM!. Thanks! By the way I have no idea how the cling-tests worked, so I just tried to copy what I saw in the lines above with the comment doing the ""CHECK"" I hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2053626453:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2053626453,1,['test'],['tests']
Testability,"> LGTM, I think we can merge -- I trust that you tested locally and it works. We'll merge the PR with the improved Vary test suite as soon as possible. Still waiting for the mac1015 node. Should I merge anyway? Everything else is green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10486#issuecomment-1113036144:49,test,tested,49,https://root.cern,https://github.com/root-project/root/pull/10486#issuecomment-1113036144,2,['test'],"['test', 'tested']"
Testability,"> LGTM, although I'd have hoped to get a test making sure we do not break it again... It runs fine on Ubuntu 18.04 and 20.04 with root 6.22 (I also tested it with root 6.20, both downloaded as binary tar-ball). The problem did not exist in earlier versions (the latest that I tested was, I think, 6.18). One of our students pointed out that it does not work anymore in newer versions. That was the best fix that I found, but I admit that the root-build system is a mystery to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6306#issuecomment-688316481:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/6306#issuecomment-688316481,3,['test'],"['test', 'tested']"
Testability,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15094#issuecomment-2036379202:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/15094#issuecomment-2036379202,1,['test'],['tests']
Testability,"> LGTM, in principle, though it's very hard to know from the code whether everything is fine. Would it be possible to have a test or is there no changed behaviour?. I understand the review is a bit hard if you are not familiar with the code. In the commit message I try to explain the reason of the change. As for the test, I added this:. https://github.com/root-project/roottest/pull/607. which reproduces what the commit is trying to fix (a proper match and invocation if the constructor has default arguments). The other tests seem to run fine. I also want to add a test for TGMainFrame once https://github.com/root-project/root/issues/6578 is fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6582#issuecomment-706109623:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/6582#issuecomment-706109623,4,['test'],"['test', 'tests']"
Testability,> LGTM. And it looks like this fixes also the LLVM 18 build... Or maybe not. Still testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16222#issuecomment-2286513186:83,test,testing,83,https://root.cern,https://github.com/root-project/root/pull/16222#issuecomment-2286513186,1,['test'],['testing']
Testability,> LGTM. Can we have a test for this? (might need #8771 to land first). Sure! (but it will have to wait until I'm back from vacations...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8772#issuecomment-889792374:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/8772#issuecomment-889792374,1,['test'],['test']
Testability,> LIBRARY_PATH. They don't. Just tested it. One of the reasons is certainly that TUnixSystem is not part of Clang.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1496182008:33,test,tested,33,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496182008,1,['test'],['tested']
Testability,"> Let's just take care of the CI issues before merging. @jblomer I think I fixed the `pyroot_import_load_libs` issue with 297a25b. That last build instead failed with a ""Cannot allocate memory"" failure, which I think comes from opening too many `urings` on the test node. I will see what the CI thinks about the changes in 0c49514. I'd like to avoid `test/RIoUring.cxx` becoming an unstable test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-679273847:261,test,test,261,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-679273847,3,['test'],['test']
Testability,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5280#issuecomment-1801237636:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/5280#issuecomment-1801237636,3,['test'],"['test', 'tested', 'tests']"
Testability,"> Let's see what a test should look like: we'd need one side of the `==` from JIT, the other side needs to be compiled. So IIUC we can just call `gInterpreter->Calc(""TDataType::GetType(typeid(unsigned long long)"")` etc from interpreted code and see whether it works? That'd be a good test to have anyway ;-) Could you help with this, @hahnjo - `core/meta/test/` might be a good place for this?. I tried this, and it works on all platforms due to the quoted requirement that the `type_info` for the most basic types live in the runtime support library. It could only break if some platforms don't follow the ABI (do we care?) or we pass `class`es - which are not handled by `TDataType::GetType` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-828999939:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-828999939,3,['test'],['test']
Testability,"> Let’s wait for this to land upstream. Is this a requirement? This is finally fixing test crashes with the most recent GCC and C++20, I'd rather have this in...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13859#issuecomment-1764416972:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/13859#issuecomment-1764416972,1,['test'],['test']
Testability,> Lgtm! Any chance for a test to capture this?. Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1030048765:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1030048765,1,['test'],['test']
Testability,"> Llvm9 is in master. Can someone check whether it helps?. With master (@ 5b06edd12572938cd83e45e07067c827cc0fc615) I get the same error it seems:. ```; $ export ROOT_INCLUDE_PATH=$(brew --prefix boost)/include; $ cat test.C; #include <boost/smart_ptr/shared_ptr.hpp>. void test() {}; $ root -q test.C; ------------------------------------------------------------------; | Welcome to ROOT 6.23/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Mar 03 2021, 00:17:00 |; | From heads/master@v6-23-01-RF-binSampling-1035-g5b06edd125 |; | With Apple clang version 12.0.0 (clang-1200.0.32.29) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. Processing test.C...; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base.hpp:40:; /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base_gcc_atomic.hpp:65:30: error: expected parameter declarator; inline boost::uint_least32_t atomic_load( boost::uint_least32_t const * pw ); ^; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:120:55: note: expanded from macro 'atomic_load'; #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST); ^; <built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/bo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6454#issuecomment-789316508:218,test,test,218,https://root.cern,https://github.com/root-project/root/issues/6454#issuecomment-789316508,5,['test'],['test']
Testability,"> Logically one do not require windows includes in cocoa. But probably @bellenot can give more comments as Windows expert. Indeed, cocoa and Windows are two different (and unrelated) platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-600638432:2,Log,Logically,2,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-600638432,1,['Log'],['Logically']
Testability,"> Long term: will super builds solve this?. Yes, because in a super build you don't have builtins, but a real installation of each project in sequence (more or less like what LCGCMake does now, but just for ROOT's dependencies and ROOT itself). Another alternative is to use `add_subdirectory()`, but not all projects support that. Google test and benchmark do, but CMake segfaults with other projects if they are added just with `add_subdirectory()`. https://blog.kitware.com/cmake-superbuilds-git-submodules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2727#issuecomment-426182221:339,test,test,339,https://root.cern,https://github.com/root-project/root/pull/2727#issuecomment-426182221,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> Looks good to me ! I agree with the implemented logic.; > ; > Maybe I have missed, and it is already there, but I think we should have an INFO message (also with gDebug=0), telling which type of library is loaded. If you set gDebug to 0 you will get the message from SystemLoad().",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7415#issuecomment-793964719:50,log,logic,50,https://root.cern,https://github.com/root-project/root/pull/7415#issuecomment-793964719,1,['log'],['logic']
Testability,"> Looks good to me!. Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775#issuecomment-1163526251:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/10775#issuecomment-1163526251,1,['test'],['tests']
Testability,"> Looks like it's not quite ready. After patching up CPT to be able to build from custom repos and branches, I get a hard crash with just `#include <filesystem>`. Here's the repro:; > ; > ```; > ~/projects/third-party/cling-llvm13 took 16s at 21:38:01 ; > ❯ ./cling-build/cling-Arch\ Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling -std=c++17; > ; > ****************** CLING ******************; > * Type C++ code and press enter to run it *; > * Type .q to exit *; > *******************************************; > [cling]$ #include <filesystem>; > cling: /home/jeaye/projects/third-party/cling-llvm13/cling-build/cling-src/tools/cling/lib/Interpreter/Transaction.cpp:173: void cling::Transaction::forceAppend(DelayCallInfo): Assertion `oldDCI != DCI && ""Duplicates?!""' failed.; > #0 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb34b; > #1 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17f8eac ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fabfe; > #2 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x18491a8 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x1848ed8; > #3 0x000055e9492a6288 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb288); > #4 0x000055e9492a634b (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb34b); > #5 0x000055e9492a3eac gsignal (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17f8eac); > #6 0x000055e9492a5bfe abort (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fabfe); > #7 0x000055e9492f41a8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x18491a8); > #8 0x000055e9492f3ed8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192249515:724,Assert,Assertion,724,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192249515,1,['Assert'],['Assertion']
Testability,> Looks like we have register something atexit (https://github.com/root-project/root/blame/master/core/base/src/TApplication.cxx#L162). Why TApplication does not rely on the regular gROOT's shutdown logic in TROOT.cxx?. Because TApplication are usually/often created after TROOT and we want to get the atexit at much at the tip of the chain (i.e. actually executed as early as possible).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-565419613:199,log,logic,199,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-565419613,1,['log'],['logic']
Testability,"> Many thanks! More unit tests are always a good thing!; > ; > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no?. I Will work on all the issues mentioned asap.; Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-614620021:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-614620021,2,['test'],['tests']
Testability,"> Many thanks! More unit tests are always a good thing!; > ; > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no?. hello, jblomer,; so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled?. Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-619465032:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-619465032,3,['test'],"['test', 'tests']"
Testability,"> Maybe one of the atlas or CMS files should be checked. If one of the CMS files is stored uncompressed they have a different issue. I think hsimple.root is a fine test case for uncompressed data: reasonably small, close to analysis sample, not a huge amount of data (i.e. streamer info is a relevant fraction).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-391765689:164,test,test,164,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-391765689,1,['test'],['test']
Testability,"> Maybe the commit message could be more verbose about what was wrong before and how this patch fixes it. Fair enough, I will expand. > Also, should we have a test for the case this fixes?. Yes :) Can you add the test you case you had?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9750#issuecomment-1025151194:159,test,test,159,https://root.cern,https://github.com/root-project/root/pull/9750#issuecomment-1025151194,2,['test'],['test']
Testability,"> Maybe the logic in hadd was misguided by the parameter name. Indeed, way-back in 2011 the semantic of the compress parameter of `TFile::Open` was updated by that was not propagated to the name/doc of `hadd/TFileMerger`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14873#issuecomment-1974015531:12,log,logic,12,https://root.cern,https://github.com/root-project/root/pull/14873#issuecomment-1974015531,1,['log'],['logic']
Testability,"> Merging the PR, the test failures are unrelated (the ones regarding the tutorials seem to be triggered by some not-well-understood issue in TClass & friends, possibly regarding thread-safety, to be investigated). Unrelated or not, these will now fail in every PR. That's not good, it is still your responsibility to keep the builds green...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12485#issuecomment-1642095175:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12485#issuecomment-1642095175,1,['test'],['test']
Testability,"> Might work for Streamer(). Even for Streamer, the test is looking for a 'local' definition and thus inheritance is not a guaranteed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1837#issuecomment-380137802:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/1837#issuecomment-380137802,1,['test'],['test']
Testability,"> More practically speaking, anything in filed 0x05 is impossible to read for 3rd party libraries unless they have the C++ class definitions as well as the decoding streamer logic?. That is actually too strict of a statement. It is true for the PR in its current form, but the unsplit field is not considered finished yet. We will also add the streamer info so that everything remains self-described.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14728#issuecomment-2015284880:174,log,logic,174,https://root.cern,https://github.com/root-project/root/pull/14728#issuecomment-2015284880,1,['log'],['logic']
Testability,"> My suspicion is that the for the non-modules case we somehow fail to unload the definition of SiStripCluster. That is very likely (or more likely because 'moving memory around change the behavior), the unloading is only partially done. > PS: How the deserialization of the vtables of TMVA::IPruneTool makes the test succeeds is a complete mystery to me at the moment. I recommend that it is actually investigated and understood as this 'seeming random behavior' is likely to be 'use of undefined behavior in the code (somewhere)' or (less likely) the correct behavior but we are completely misunderstanding what's going on under the hood. > It seems to me that failure is the right behavior. It is not :) . I am sure we can agree that an 'undo X' should return the state to a point as if the last X cling related actions had not happened. I.e. the simplified example:. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. should actually have the same result (assuming no side effect for Marker::Marker) as. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; SiStripCluster obj;; ```. and it does not (when modules are turned on) ... possibly because the implicit AutoParse (that is triggered by the use of the symbol SiStripCluster) is no longer possible, in the module case, after the first execution (for example because the first execution of the AutoParse is switching some flag, like I already read this part of the pcm file, that is not 'reset'/'reverted' by the undo. > @pcanal, can you remember what exactly we were testing there?. It is testing both that in this setup the undo is not running into an infinite loop and that we correctly support an (implicit or explicit) AutoParse followed by undo followed by an implicit AutoParse. See the related commit:; ```; commit b6296198c2735101051daa33af89fe8ae641991e (fix_cms); Author: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-434478365:313,test,test,313,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-434478365,2,['test'],['test']
Testability,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2050660691:40,test,tests,40,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691,4,['test'],"['testing', 'tests']"
Testability,> Needs more test and tuning. Like what?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5863#issuecomment-646576018:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5863#issuecomment-646576018,1,['test'],['test']
Testability,"> New feature (as in, RooFit can now do something more than before) but no new test or changes in the docs is suspicious 😄. True, but writing a test that checks graphics output would consume too much time. Docs have actually improved. They are just not in function docstrings, but where they were before:; RooFit sends a message when this feature is invoked, and this message is much more informative now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5566#issuecomment-625240761:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/5566#issuecomment-625240761,2,['test'],['test']
Testability,> Nice change. I proposed a simplification. The tests seem to fail because the change does what it is supposed to do and the reference would need to be adapted. Thanks! We're on it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10928#issuecomment-1947918617:48,test,tests,48,https://root.cern,https://github.com/root-project/root/issues/10928#issuecomment-1947918617,2,['test'],['tests']
Testability,"> Nice try, but you have to be careful with schema evolution.; > ; > 1. Go back, write a class that uses those proxies to a file, commit the file to git, and implement a read test.; > ; > 2. Change the classes, and implement the proper typedefs, so no other code in RF has to be touched.; > ; > 3. Create schema evolution rules like those:; > https://github.com/root-project/root/blob/05d10d2127282c5ec11b1330763dc0b43a93a6df/roofit/roofitcore/inc/LinkDef.h#L185-L192. Hi @hageboeck, thanks for the review! The proper typedefs were already implemented, and now I also implemented schema evolution rules and implemented a read test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8728#issuecomment-1033824234:175,test,test,175,https://root.cern,https://github.com/root-project/root/pull/8728#issuecomment-1033824234,2,['test'],['test']
Testability,"> No luck. Are you able to reproduce the failure locally? If not, you can use something like:; ```; //check if element is a TRef or TRefArray; const bool originalTest = (strncmp(fTypeName.Data(),""TRef"",4) != 0);; TClass* const type = GetClassPointer();; const bool newTest = (!type || !(type->InheritsFrom(TRef::Class()) || type->InheritsFrom(TRefArray::Class()) || type->InheritsFrom(""TVirtualRefProxy"")); if (originalTest != newTest); 		Fatal(""GetExecID"", ""Problem with type %s original test %d, new test %d\n"", ; fTypeName.Data(), originalTest, newTest);; if (originalTest) return 0;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1989251733:489,test,test,489,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1989251733,2,['test'],['test']
Testability,"> No test was broken in the incrementals: perhaps we can give it a try in the nightlies?. I was hoping getting some feedback from @krasznaa before merging, but I guess we can merge and we'll see afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14474#issuecomment-1923285964:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1923285964,2,['test'],['test']
Testability,"> No, I didn't, sorry. I just rebased an existing PR, I think at that time, it was tested with jenkins. See discussion here: [root-project/cling#174 (comment)](https://github.com/root-project/cling/pull/174#issuecomment-313743374). Ok, 7 years ago the tests were fine. Are they now? We should probably implement the feature request you mentioned earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694#issuecomment-2418648683:83,test,tested,83,https://root.cern,https://github.com/root-project/root/pull/16694#issuecomment-2418648683,2,['test'],"['tested', 'tests']"
Testability,"> No, we don't see this in other RooFit PRs.; > ; > From the log, it seems that there is a problem when using RooFit from Python now:; > ; > And in the final test the whole run crashes, that's why in the comment on GitHub we don't see these test failures. I'm rerunning the build right now, and logged in into the mac node where it runs. It's a different node, and the tests seem to pass. Let's wait for the build to finish, but I would assume it's a problem with the node where it ran.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536#issuecomment-1482615382:61,log,log,61,https://root.cern,https://github.com/root-project/root/pull/12536#issuecomment-1482615382,5,"['log', 'test']","['log', 'logged', 'test', 'tests']"
Testability,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12.; > ; > > Without a virtual environment, MacOS does not allow to pip packages; > ; > I'm very surprised about that - not even `pip --user` or whatever it's called?. Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6686#issuecomment-714496187:6,test,testing,6,https://root.cern,https://github.com/root-project/root/issues/6686#issuecomment-714496187,1,['test'],['testing']
Testability,> Note that the new test is still failing on Windows x86... 😞. @bellenot has it open in a debugger but needs some shared screen time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16373#issuecomment-2376302781:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/16373#issuecomment-2376302781,1,['test'],['test']
Testability,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!. I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072#issuecomment-1603964951:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/13072#issuecomment-1603964951,1,['test'],['test']
Testability,"> OK so you recommend to use `__cplusplus` instead of `__cpp_lib_three_way_comparison`?. I don't know yet, still trying. It seems to solve the one tutorial I debugged in `mac13arm`, but I'll need to test with more compilers to make sure it doesn't break elsewhere...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1540482992:199,test,test,199,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1540482992,1,['test'],['test']
Testability,"> OK, I un-commented the safety check, I don't remember the reason why I disabled it in the first place. Thanks for this. > Please open a separate issue if needed with a macro to test for the random sequence. In principle, `gRandom->Rndm()` is used for sampling, which should produce the same sequence if not seeded elsewhere. Will do. This is low priority for us as we found some workaround in our test-chain, but the issue is kept open in our tracker with a long timeline and assigned to me, so probably the kind we dig out during the summer activity dip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675#issuecomment-1968643689:179,test,test,179,https://root.cern,https://github.com/root-project/root/issues/14675#issuecomment-1968643689,2,['test'],"['test', 'test-chain']"
Testability,"> OK, there are errors already in LLVM/Clang, and as I said, there is no way I can test on ARM64, so there is not much I can do... Hi @bellenot, in fact, I am also using an amd64 machine, but I am doing cross-compilation, and the target architecture is arm64ec.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238714635:83,test,test,83,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238714635,1,['test'],['test']
Testability,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804084669:388,test,test,388,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804084669,1,['test'],['test']
Testability,"> Ok I do not see changes compare to the last comments I did. I suggested you now modify the test example according to the new structure and try if it works. Okay, I will do it. Do I need to build root first? If yes, I am unsure if I structured LinkDef.h correctly. Is is done correctly?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-821033850:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-821033850,1,['test'],['test']
Testability,> Ok now it compiles but we get the following error in the new test; > ; > ```c++; > input_line_49:1:21: error: unknown type name 'ROOT_7459'; > int ROOT_7459 = 42; ROOT_7459++;; > ^; > input_line_49:1:30: error: expected unqualified-id; > int ROOT_7459 = 42; ROOT_7459++;; > ```. Somehow the parsing seems broken. We should probably try using `ProcessLine` instead of `Declare`... still a mystery why this fails only for the PCH based builds... EDIT: Parsing is broken because `Declare` does not support statements on the global scope but `ProcessLine` does. In addition it works in master because clang already supports statements on the global scope (thanks to clang-repl)...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894094024:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894094024,1,['test'],['test']
Testability,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-620603698:95,test,test,95,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-620603698,2,['test'],['test']
Testability,"> Ok, for only running on 3G. Is it possible to cut this down even more by pre-filtering? Review coming soon. I would have to look in detail into the cuts, perhaps? At the end, I like that many filters we use since that's how you go from the generic samples to the results, meaning this is the content of the example :) Also it's very nice from the benchmarking point of view!. I tried to go down using even less events, but then the statistics are super bad and it does not look good anymore. Using the 5% of the initial 10fb^-1 is the bare minimum.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667116797:349,benchmark,benchmarking,349,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667116797,1,['benchmark'],['benchmarking']
Testability,"> Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred. You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193060626:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193060626,6,['test'],"['test', 'test-case']"
Testability,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1629035353:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353,2,['test'],['tests']
Testability,"> Ok, thanks for the clarification! May I ask which tests are failing because of this warning? Normally, a warning should not make the test fail, so I'm curious to know what is exactly going on there. This is a list of test that fail without this change:. 	239 - gtest-roofit-hs3-test-testHS3SimultaneousFit (Failed); 	249 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	250 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	261 - gtest-roofit-roofitcore-test-testRooAddPdf (Failed); 	266 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	267 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	269 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	273 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	277 - gtest-roofit-roofitcore-test-testRooAbsReal (Failed); 	279 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	280 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	281 - gtest-roofit-roofitcore-test-testInterface (Failed); 	282 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	283 - gtest-roofit-roofitcore-test-testRooAbsL (Failed); 	287 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	290 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	292 - gtest-roofit-roofitcore-test-testSumW2Error (Failed); 	294 - gtest-roofit-roofitcore-test-testLikelihoodGradientJob (Failed); 	295 - gtest-roofit-roofitcore-test-testLikelihoodJob (Failed); 	298 - gtest-roofit-roostats-test-testSPlot (Failed). Here is an example failure:; ```; 331/1268 Test #292: gtest-roofit-roofitcore-test-testSumW2Error ...............................***Failed 0.58 sec; Running main() from /builddir/build/BUILD/googletest-1.14.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test suite.; [----------] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1837156931:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1837156931,23,['test'],"['test', 'test-', 'test-testGlobalObservables', 'test-testInterface', 'test-testLikelihoodGradientJob', 'test-testLikelihoodJob', 'test-testLikelihoodSerial', 'test-testRooAbsL', 'test-testRooAbsPdf', 'test-testRooAbsReal', 'test-testRooAddPdf', 'test-testRooBinSamplingPdf', 'test-testRooCrystalBall', 'test-testRooJohnson', 'test-testRooProdPdf', 'test-testRooRealL', 'test-testRooSimultaneous', 'test-testRooWrapperPdf', 'test-testSPlot', 'test-testTestStatistics', 'tests']"
Testability,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766744713:148,test,test,148,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766744713,1,['test'],['test']
Testability,"> On windows:; > ; > ```; > ; > 11:06:03 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > 11:06:03 ParallelTest.cxx; > ; > 11:06:03 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; > ; > 11:06:03 PaulTest.cxx; > ; > 11:06:03 REveTreeTools.cxx; > ; > 11:06:03 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > ```. I mean on debian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-780829540:286,test,test,286,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-780829540,5,['test'],['test']
Testability,"> Once more: ... The test I sketched does not use `TDataType::GetType`, it is testing the assumption that `type_info's operator==` has been fixed (and will not be broken by new platforms). [Ultimate goal: be able to rely on that operator everywhere] [The test setup can also be used to test cross library GetType ... but I guess one library might be enough there].",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-831413518:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831413518,4,['test'],"['test', 'testing']"
Testability,"> Once the tests are green, I think these changes should be merged asap. Yes, I opened it to expose the fix and the result of the debugging session. While I polish it to avoid interfering with existing tests, this can be already tested on SWAN by injecting the custom DistRDF Python package taken from this branch on the PYTHONPATH of the workers, so we will try to get some measurements soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094#issuecomment-2247088485:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2247088485,3,['test'],"['tested', 'tests']"
Testability,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1768951805:34,test,test,34,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768951805,4,['test'],"['test', 'tests']"
Testability,"> One should test with runtime_cxxmodules=OFF. Indeed, it's what I wrote in the PR description. I hoped that we had at least one build with that option. This means that currently there is no build with `runtime_cxxmodules=OFF` and we should understand if that's intended/desirable or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15749#issuecomment-2149032105:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/15749#issuecomment-2149032105,1,['test'],['test']
Testability,> Only for certain types and it's not exposed by TTreeReader. humm .. isn't it also the case for RNtuple (I guess maybe less so but still). Anyway there is an attempt of it see `tree/tree/test/BulkApi*`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11517#issuecomment-1435038376:188,test,test,188,https://root.cern,https://github.com/root-project/root/pull/11517#issuecomment-1435038376,1,['test'],['test']
Testability,"> Our test suite is driven via `ctest`, so whatever `ctest` thinks is ""the truth"" for what concerns that test run. If it cannot find those packages, then they are not there for all intents and purposes. In all other `ctest`-run Python tests it works just fine, because the importing the packages with `import` always works. It's just that in this test, the packages are checked for availability with the deprecated `pkg_resources.require()`. So what `ctest` thinks is the truth is inconsistent, hence my conclusion that the test is broken. But that doesn't matter anymore, since you suggest to completely remove the test :smile: Thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272#issuecomment-2067660264:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/15272#issuecomment-2067660264,6,['test'],"['test', 'tests']"
Testability,> Ping. What's the fate of this?. Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1408170465:199,test,test,199,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1408170465,1,['test'],['test']
Testability,> Please remove the `if (!entry)` test and associated warning.; > Please also change the signature of GetEvent. okay. But I did some internet research and couldn't find a way to check if no entry parameter was given by the user without also raising the error when the user enters 0 (since !entry == true if entry == 0),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-862535003:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-862535003,1,['test'],['test']
Testability,"> Pointing to what alternatives there are, if any, either through the legacy alias, or in > the body doc, would be additionally helpful. We cannot test the existence of an input variable in an alias therefore we cannot handle with the same alias the case where there is another solution and the case where there is not. I guess if there are possible alternatives they should be mentioned in the body of the class documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315#issuecomment-1237811047:147,test,test,147,https://root.cern,https://github.com/root-project/root/pull/11315#issuecomment-1237811047,1,['test'],['test']
Testability,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692#issuecomment-1730113177:253,test,test,253,https://root.cern,https://github.com/root-project/root/pull/13692#issuecomment-1730113177,1,['test'],['test']
Testability,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?. As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1845011209:566,log,logic,566,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845011209,1,['log'],['logic']
Testability,"> Probably this is just a style preference, but given that we might want to implement similar approaches for other tests, wouldn't it be cleaner to specify the dependency on the xml target from the `ROOT_ADD_TEST` call? imho it looks more sustainable with the perspective of wanting to disable tests that need specific targets of the build system. Not in this case, there is no C++ dependency that can be expressed in CMake. The test doesn't link against the XML library, but it uses an executable via `gSystem` that is only available when building ROOT with `xml=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675#issuecomment-2411277606:115,test,tests,115,https://root.cern,https://github.com/root-project/root/pull/16675#issuecomment-2411277606,3,['test'],"['test', 'tests']"
Testability,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634#issuecomment-1300054951:22,benchmark,benchmarks,22,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951,2,['benchmark'],['benchmarks']
Testability,"> Put the bare/exact original example rather than using gtest. My current iteration is the following; ```; // CMakeLists.txt; [...]; ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO); ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx; #include ""TDirectoryFile.h"". int main(); {; TDirectoryFile f{""f"", ""f""};; }; ```. Which still doesn't trigger the segfault when run as; ```; ctest -VV -R test-tdirectoryfile; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692#issuecomment-1729888167:228,test,test-tdirectoryfile,228,https://root.cern,https://github.com/root-project/root/pull/13692#issuecomment-1729888167,2,['test'],['test-tdirectoryfile']
Testability,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? ; To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. ; Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`.; I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637859746:649,log,logical,649,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637859746,1,['log'],['logical']
Testability,"> ROOT does not enforce any build-time Python dependencies (except for numpy) . Does it mean that they are optional requirement?. > The unittest is merely checking that our test suite will find the packages it needs for the optional, runtime dependencies that we want to test ourselves. Humm ... but then they become non-optional requirement for developer. It also means that we can not test the case where they are not installed ... and since we are not testing this configuration one could assume that the configuration is broken (until proven otherwise) ... i.e. those package are actually required ... and if they are required why are we not checking at build time?. i.e. I am still missing something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2050662999:173,test,test,173,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2050662999,4,['test'],"['test', 'testing']"
Testability,"> Rebased version of this PR, which already got approved:; > ; > * [Mention root.cern instead of root.cern.ch #6114](https://github.com/root-project/root/pull/6114). Nice, thanks!! Maybe it's even worth to add the check in the CI tests as already done in the web: https://github.com/root-project/web/blob/d1b74175cdcbb5d43a86c8de9293439396d07fe9/.github/workflows/continuous-integration-workflow.yml#L40",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14275#issuecomment-1864499314:230,test,tests,230,https://root.cern,https://github.com/root-project/root/pull/14275#issuecomment-1864499314,1,['test'],['tests']
Testability,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413919076:162,assert,assert,162,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413919076,1,['assert'],['assert']
Testability,"> Remove test/CodeUnloading/RunAgainstClangTestSuite; > .... clang/test/Sema/address-constant.c is a very arbitrary Clang test. I don't know when it was restricted to single test but the original intent was to apply; the load/unload to all the clang test to have as ""complete"" of a coverage as; possible:. ```; commit 2334a2089ecda6998bb0fbbc3e63bf027a52ddac; Add a test that loads every clang test and unloads it; ```. This test is probably better off being move to clang-repl.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2302848580:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2302848580,8,['test'],['test']
Testability,"> Requires that chrome is installed on all test machines. I don't want to *require* Chrome for ROOT, so the test (and ROOT) must survive also without. Would that be possible? Or is it already the case and I just misread your statement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4855#issuecomment-578157459:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/4855#issuecomment-578157459,2,['test'],['test']
Testability,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar).; > ; > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13487#issuecomment-1683995383:148,assert,assert,148,https://root.cern,https://github.com/root-project/root/pull/13487#issuecomment-1683995383,1,['assert'],['assert']
Testability,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:; 1. Run TROOT::EndOfProcessCleanups; 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects; 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:; ```python; import ROOT. def create():; f = ROOT.TFile(""file.root"", ""RECREATE""); t = ROOT.TTree(""tree"", """"); return f, t; f, t = create(); ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155514143:262,log,logic,262,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155514143,2,['log'],['logic']
Testability,"> See command and If you could also add a test for this features (eg. a TTreeReader usage) that would be great. I realized there was already a test for using TTreeReader with the truncated datatypes, however it was not properly working and thereby unable to detect the problem since it stored the Float16_t / Double32_t data as regular Float_t / Double_t. The reason is that the used TTree::Branch method is unable to automatically detect the Float16_t / Double32_t datatype since like Float_t / Double_t they are typedefs of float / double which results in typeid(Float_t) = typeid(Float16_t) = typeid(float), same for the double types. For these reasons, the truncated datatypes always need to be specified via the leaflist. I changed the test accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008#issuecomment-921267934:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/9008#issuecomment-921267934,3,['test'],['test']
Testability,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself); > ; > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else?; > ; > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience.; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205#issuecomment-1680561107:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/13205#issuecomment-1680561107,1,['test'],['test']
Testability,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface.; > ; > What do you think @guitargeek ?. I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free; * correct global observables definition and import; * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost); * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13078#issuecomment-1608428520:763,test,testHistFactory,763,https://root.cern,https://github.com/root-project/root/pull/13078#issuecomment-1608428520,2,['test'],"['test', 'testHistFactory']"
Testability,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side!. @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182#issuecomment-2047582660:283,test,tested,283,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-2047582660,1,['test'],['tested']
Testability,> Seems to have passed all roottests?. The PR runs **only** a **subset** of the test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412#issuecomment-410219946:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/2412#issuecomment-410219946,1,['test'],['test']
Testability,"> Seems to work except for `gtest_tree_dataframe_test_dataframe_vary` throwing exceptions. I think we'll have to keep this disabled for now. This was a communication failure on my side; what I meant is that we have to keep the test disabled, but the revert of disabling GlobalISel is probably fine / potentially even needed now to address failures in the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11946#issuecomment-1419351071:227,test,test,227,https://root.cern,https://github.com/root-project/root/pull/11946#issuecomment-1419351071,1,['test'],['test']
Testability,"> Should I revert the std::log changes so the compiler doesn't run out of heap space?. No, please just ignore this. Let's wait for the other platforms to arrive and then if the other builds are green, merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-824889681:27,log,log,27,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-824889681,1,['log'],['log']
Testability,"> Should be fixed. Isn't the test still running for the stdlib implementation? I don't see any `#ifdef` in it anymore?. OK for testing the test, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3432#issuecomment-463940853:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/3432#issuecomment-463940853,3,['test'],"['test', 'testing']"
Testability,"> Should the limit be lowered to `EnableExplicitMT()` (i.e. when called with the default argument)? If 32bit and > 8 cores, cap it at 8 threads? Else we run the risk of exhausting the address space again soon enough with some other test, or on some user's analysis... What do you think? Or is this the user's responsibility?. I have the strong opinion that it's the user's responsibility. Mainly because the limit of 8 threads is not necessarily a sane default, it depends on the program you execute concurrently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842#issuecomment-730185356:232,test,test,232,https://root.cern,https://github.com/root-project/root/pull/6842#issuecomment-730185356,1,['test'],['test']
Testability,"> Should this be reverted once https://github.com/root-project/root/issues/9137 is fixed?. Not really, what we expect is an error in that scenario, and the test that makes sure we error out in that scenario should be put in TTree/TChain, not RDF. RDF should not test scenarios that TTree/TChain does (or should) not support.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025#issuecomment-1382240153:156,test,test,156,https://root.cern,https://github.com/root-project/root/pull/12025#issuecomment-1382240153,2,['test'],['test']
Testability,> Should we add maybe also a tutorial similar to the degenerate coefficient test ?. I will convert the test into one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401#issuecomment-698161939:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/6401#issuecomment-698161939,2,['test'],['test']
Testability,"> Should we also propagate the value of TBranch::GetMakeClass from input branch to output branch?. That is a separate problem that indeed deserves testing (i.e. the memory layout is different, so yes the 2 branches needs to have the same mode and also it will introduce its own set of challenges/possible failures).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6094#issuecomment-665711574:147,test,testing,147,https://root.cern,https://github.com/root-project/root/pull/6094#issuecomment-665711574,1,['test'],['testing']
Testability,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1745141219:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1745141219,1,['test'],['tests']
Testability,"> Since for these tests an interpreted and a no interpreted version exists, flag as longtest only the non interpreted version. Since the compiled version is (presummably) faster than the interpreted version, should we do the reverse or do you think that testing the interpreted interface is also essential?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426#issuecomment-463258018:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/3426#issuecomment-463258018,2,['test'],"['testing', 'tests']"
Testability,"> So I would go for folder `core/testsupport`, both library and namespace `ROOT::TestSupport`, and the header file moves from `ROOTUnitTestSupport.h` to `inc/ROOT/TestSupport.hxx`. This is *exactly* what I discussed with Axel in the mean time. Excellent that you think along the same lines. Working on it ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009852840:33,test,testsupport,33,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009852840,3,"['Test', 'test']","['TestSupport', 'testsupport']"
Testability,"> So far changing to a function and PARENT_SCOPING the gensrdict seems to work.; > . Yes, that's fine assuming the fixme I proposed. > I added the `IF(TARGET ...)` parts in the last push, this would let me do what I want without adding any additional option to the function. I am not sure about that not affecting existing uses of REFLEX_GENERATE_DICTIONARY. Good. I like this approach better. > ; > > Can't we make this call to target_sources(edm4hep PRIVATE edm4hep.cxx) internal to REFLEX_GENERATE_DICTIONARY, this way you won't need an extra switch and things are a little more consistent and controlled by the routine supposed to handle dictionary generation?; > ; > That `target_sources` call is not what made we want a new switch, though; > ; > I don't I understand which code should be re-used where from the link to ROOT_GENERATE_DICTIONARY. This is a major refactoring which I think we should do in the future. Genreflex (wrapped in cmake by REFLEX_GENERATE_DICTIONARY) and rootcling/rootcing (wrapped by ROOT_GENERATE_DICTIONARY) essentially are the same binary which takes different set of arguments. From build system perspective, we should not have two isolated routines doing dictionary generation. ROOT_GENERATE_DICTIONARY is better tested because it is the default way to generate the ROOT dictionaries. I can imagine that REFLEX_GENERATE_DICTIONARY is a tiny wrapper over ROOT_GENERATE_DICTIONARY or other helper function which just makes the genreflex specific build system requirements and translates them to the underlying rootcling...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-588207137:1249,test,tested,1249,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-588207137,1,['test'],['tested']
Testability,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3?. I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694#issuecomment-1739130259:44,test,tests,44,https://root.cern,https://github.com/root-project/root/issues/13694#issuecomment-1739130259,1,['test'],['tests']
Testability,"> So the master has no issue with libunwind but 6.28 has? I don’t think there have been changes in this area but can you bisect which commit “fixes” this issue?. Sorry, that's not the meaning I intended to convey! The `libunwind` problem is still present; it just didn't prevent a(n otherwise) successful build ([log attached](https://github.com/root-project/root/files/10546827/build-root-v6_29_00f2-c14-debug-x86_64.log)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1410364334:313,log,log,313,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1410364334,2,['log'],['log']
Testability,"> So this is actually a more general question: should we duplicate the cppyy tests as ROOT unit tests?. IMHO we should inherit cppyy's testing suite, upstreaming all ROOT's Python unit tests (that do not use specifically ROOT classes).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2262230374:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2262230374,4,['test'],"['testing', 'tests']"
Testability,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176#issuecomment-2271543583:576,log,log,576,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583,2,['log'],['log']
Testability,"> So, should we just add this logic directly into the top `CMakeLists.txt` file?. You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the; > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325343587:30,log,logic,30,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325343587,1,['log'],['logic']
Testability,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1419265262:486,Assert,Assertion,486,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262,2,['Assert'],['Assertion']
Testability,"> Sorry I meant grad2d . You do not need a README.md ... just two file TFeynman.cxx and TFeynman.h . Ah ok, I will move the folder and remove the README and the test.C files. An example is provided at the top of TFeynman.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-817817588:161,test,test,161,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-817817588,1,['test'],['test']
Testability,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168787536:395,test,tests,395,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168787536,1,['test'],['tests']
Testability,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7057#issuecomment-762157521:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/7057#issuecomment-762157521,2,['test'],"['test', 'testTBBGlobalControl']"
Testability,"> Sure, and actually I am interested in having such kind of unit tests also in some custom pdfs I coded up and plan to push to Root if I have some free time.; > I first have to get the root master compiled on my MacBook to run the unit tests or are those tests something which runs in the CI? Or are those tests something which runs as macros?. The first two, actually. If you register the unit test in `roofit/roofit/test/CMakeLists.txt`, it will run with the CI. You can get a lot of inspiration from the existing tests on how to do that!; I also recommend to run them on your macbook by compiling yourself, as the turnaround time is *much* faster.; Run them either by compiling and directly starting the exectuables under `<buildDirectory>/roofit/roofit/tests/<executable>` or `ctest -R testName -V`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9539#issuecomment-1010925815:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/9539#issuecomment-1010925815,9,['test'],"['test', 'testName', 'tests']"
Testability,"> Suspicious, that all but linux jobs failed. I have tested locally on my linux machine a month ago, and it worked. To solve it, go to your fork on GitHub, master branch, click on Sync Fork. Then go to your terminal, git pull your master branch. Then checkout your branch add_point.; Call git rebase --interactive master. Finally, call git push -f add_point to end the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2127023131:53,test,tested,53,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2127023131,1,['test'],['tested']
Testability,> TClassEdit was selected as class which does not have any effect. . humm ... so I don't understand why the test works without this PR but fail with this PR ... I am confused ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1042#issuecomment-331523717:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/1042#issuecomment-331523717,1,['test'],['test']
Testability,"> Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. My point is: why would we want to go back? AFAICT we already released ROOT with the requirement for 3.9. Did anybody complain?. > `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. For me, this isn't an argument for changing the error message for *the current version* and make it worse. > After LLVM upgrade we could completely skip usage of `json_fwd.h`. I still don't understand this. All discussions we had so far ended with agreeing that the LLVM upgrade will change nothing wrt the JSON library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230208129:145,test,testing,145,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230208129,1,['test'],['testing']
Testability,"> Test can't be ""tiny"". O really - there's no `TClassEdit` use that would reproduce a broken type name split? Yikes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6252#issuecomment-680949078:2,Test,Test,2,https://root.cern,https://github.com/root-project/root/pull/6252#issuecomment-680949078,1,['Test'],['Test']
Testability,"> Test tutorial-v7-ntuple-ntpl005_introspection failure; > ` what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user`. In any case, it is a bug that we don't fall back to blocking IO, but this can occur if user limits for locked memory are too low. What is the output of `ulimit -l`? On machines I have tested, the default user limit has to be adjusted (e.g. 16MB). Just out of curiosity, which kernel are you running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823331170:2,Test,Test,2,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823331170,2,"['Test', 'test']","['Test', 'tested']"
Testability,> Tests are in roottest. Not the reproducer which gives the semantic reason why we skip deleted functions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6173#issuecomment-673461722:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/6173#issuecomment-673461722,1,['Test'],['Tests']
Testability,> Tests are then fixed in root-project/roottest#183. Wouldn't it be better to (also) have a backward compatibility layer (i.e. using statement for the old names)? In particular this would give currently user of the experimental interface a little time to update their scripts?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2055#issuecomment-391038331:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/2055#issuecomment-391038331,1,['Test'],['Tests']
Testability,> Tests don't test this part of code anyways. should they?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7247#issuecomment-781288458:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/7247#issuecomment-781288458,2,"['Test', 'test']","['Tests', 'test']"
Testability,"> Thank you for adding the TThreadExecutor and the test; > I had only a small comment for the test program, otherwise we are ready to merge this PR; > ; > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-427597378:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-427597378,2,['test'],['test']
Testability,"> Thank you for the PR. @stephanlachnit Is it completed and ready to be reviewed ?; > ; > The numbers in the doc, they are probably some and tags used in some past documentation of the Math libraries. I think they can be removed now since they are not used. . Ok thanks. I'll remove the numbers and rebase. Else the code is ready to be reviewed, I tested the changes locally and added unit tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496#issuecomment-872537838:348,test,tested,348,https://root.cern,https://github.com/root-project/root/pull/8496#issuecomment-872537838,2,['test'],"['tested', 'tests']"
Testability,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13299#issuecomment-1723612261:228,test,tests,228,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261,4,['test'],['tests']
Testability,"> Thank you for this improvement. It would be nice to have a test of broadcasting , for example using operator Add ?. I added some tests in this commit https://github.com/root-project/root/pull/11415/commits/3ddd5c51ebe5cef2a3b73220cb6e56539726e6bd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11415#issuecomment-1277262515:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/11415#issuecomment-1277262515,2,['test'],"['test', 'tests']"
Testability,"> Thank you for your fast reply. Streaming stl container in ROOT of standard types is easly done as doing for native ROOT objects.; > But I understand you have this preference, and since you are the class author we accept this. I will try to figure out how the streaming of STL containers is done, then I don't feel bad about using them, since they also have some advantages. > For SetNErrorDimensions I understand the use case to reduce the dimensionality before storing, but then it would not be better to have the capability to delete a full error dimension with a dedicated function ?. I also think that might be an even better solution. I will look into it. > I think before merging this PR it would be nice to have also two additional things:; > ; > * one tutorial showing the usage of the class; > ; > * a test program testing the basic functionality. This could be written for example in gtest and included in the hist/hist/test directory where we have other tests of new histogram classes. I will also look into this. I will probaly need some time to implement and test all the requested changes, especially since I have also some work to do for my PhD, but I see no severe problems at the moment. Thanks and all the best,; Simon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558630837:813,test,test,813,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558630837,5,['test'],"['test', 'testing', 'tests']"
Testability,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1719042201:746,test,tests,746,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201,3,"['Assert', 'test']","['Assertion', 'tests']"
Testability,"> Thank you so much for helping out, @langenbruch!; > ; > I have a few change requests. Also, is it possible to implement a unit test here? https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testTestStatistics.cxx. Thanks for the review @guitargeek , I implemented the requests. Please see attached the adapted tutorial rf611_weightedfits.C to demonstrate the extended functionality, which could also replace the existing one. I would prefer to not write any additional unit tests.; [rf611_weightedfits.tar.gz](https://github.com/root-project/root/files/14323844/rf611_weightedfits.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14751#issuecomment-1951345864:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/14751#issuecomment-1951345864,4,['test'],"['test', 'testTestStatistics', 'tests']"
Testability,"> Thanks - I bet there are many other missing and outdated particle properties. Do you have a suggestion how to fix ""everything""?. Hi @Axel-Naumann , One can parse the file https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt to update masses of some particles in a more automated way, but it does not cover other particle properties nor all particle masses (e.g. Xi_cc++ is missing). The page https://pdg.lbl.gov/2023/html/computer_read.html also mentions available APIs and SQLite files for accessing the full database. This could be the best way to systematically compare the two databases and update everything. This kind of access is provided for testing only though so might require manual check of the found differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12968#issuecomment-1592966409:651,test,testing,651,https://root.cern,https://github.com/root-project/root/pull/12968#issuecomment-1592966409,1,['test'],['testing']
Testability,"> Thanks @JRS296 ! I'm not sure we need / want this, tbh: it's a really system specific implementation and it will have to be in a library that I'd like to replace anyway. And creating a test for it will be non-trivial :-) So I'd actually prefer to still with whatever the shell provides. Makes sense?; > ; > But yes _please_ contribute! You could start with imlpementing; > ; > ```c++; > static std::unique_ptr<TFile> OpenU(const char *name, Option_t *option = """",; > const char *ftitle = """", Int_t compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault,; > Int_t netopt = 0);; > ```; > ; > internally calling `TFile::Open` but returning a `unique_ptr`. The name is subject to discussion but we want this interface in any case. This would allow you to exercise the contribution procedure! I'd recommend a Linux docker container for improved build speed. Can I get a bit more context on what exactly this is implemented for? And where this interface is to be built out, as well as the functionality it serves. Thanks once again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13958#issuecomment-1782993206:187,test,test,187,https://root.cern,https://github.com/root-project/root/issues/13958#issuecomment-1782993206,1,['test'],['test']
Testability,"> Thanks @JRS296 ! We need to decide how to proceed; the name we choose will become part of ROOT's API and we need to keep it backward compatible from there on. We will come back to you hopefully tonight (@pcanal ). @Axel-Naumann Any updates on the naming convention to be used? Also, I'd like to know if there is a possibility for me adding some unit test cases for the newly implemented interface, thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1819517680:352,test,test,352,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1819517680,1,['test'],['test']
Testability,"> Thanks a lot! LGTM! Consider squashing on merge!. Actually I would prefer leaving the first commit because it ""just"" enables an existing test (that I happened to extend in the actual fix).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7100#issuecomment-768251646:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/7100#issuecomment-768251646,1,['test'],['test']
Testability,"> Thanks for hunting down solutions for these tests! For the first one, you could maybe mention that this is because of [8deb57c](https://github.com/root-project/root/commit/8deb57c04a5ceea96533d095092fcd4f71d1df94) (as far as I could find some time ago for #12454). Updated [commit](https://github.com/root-project/root/pull/12855/commits/cc4dcce381f19f3dd77133218920d2d6048842d8) message! Thanks for reviewing! :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1554771507:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1554771507,1,['test'],['tests']
Testability,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8719#issuecomment-886482916:379,test,tests,379,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916,2,['test'],['tests']
Testability,"> Thanks for the report! What does [valgrind](https://root-forum.cern.ch/t/valgrind-and-root/28506) say?. [valgrind.log](https://github.com/root-project/root/files/7849240/valgrind.log) (edit: from `master`) - and interestingly, then it doesn't crash. Oh I hate memory corruption problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543#issuecomment-1010275250:116,log,log,116,https://root.cern,https://github.com/root-project/root/issues/9543#issuecomment-1010275250,2,['log'],['log']
Testability,"> Thanks for the review! No, there is no unit test for this IO rule, but I tested it locally.; > ; > I don't think it's worth it to include a test for this simple IO rule, because such a test also always needs a file storing an object of the old class version, and I think it's not good to have too many binary files in the repository without strong reasons. Actually, if I may @guitargeek 🙂:; Some of the biggest grievances some users had in RF's ""dormant time"" was a non-functioning schema evolution, which prevented users from moving to a newer ROOT version. You lose these users, as they have to disconnect from ROOT's evolution. Therefore, I strongly suggest having schema evolution tests in master. These files only consume a few kB, and they will never be altered.; This becomes even more important if a specific class version was in use for a long time, because the number of workspaces in the wild will scale with the time that a class version was in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10909#issuecomment-1181856704:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/10909#issuecomment-1181856704,10,['test'],"['test', 'tested', 'tests']"
Testability,"> Thanks for the tip! Adding `-fno-rtti` to cling works, but only in the case where the function is defined inline in the header. When the function is defined in a separate TU which is linked into the host application, cling fails to find the symbol.; > ; > I've updated the test case here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Basically just moved `test::integer::to_string` into its own cpp file, which then brings the linker errors back when trying to call it from cling. That's probably the wrong place to discuss these things but is `src/object.cpp` linked to `./a.out`? What does `nm ./a.out | grep _ZTVN4test7integerE` say?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193179100:275,test,test,275,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193179100,3,['test'],"['test', 'test-case']"
Testability,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?. I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3150#issuecomment-447861372:599,test,test,599,https://root.cern,https://github.com/root-project/root/pull/3150#issuecomment-447861372,1,['test'],['test']
Testability,"> Thanks for this improvement. You are welcome. > 1. A small unit test is added for this fix. Done. > 3. We promote the old JIRA item as a new GH issue specific to the residual issue. Ok for me, but I'd say the residual issue and the full one are more or less the same. If I call reader.SetEntry(0), then the first fix is not needed either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15929#issuecomment-2190989573:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/15929#issuecomment-2190989573,1,['test'],['test']
Testability,"> Thanks for this nice update. Would it be perhaps possible to add a test?. Not easily I think, because passing a `void` mapping function will still fail to compile, just with a nicer error message now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14694#issuecomment-1943313583:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/14694#issuecomment-1943313583,1,['test'],['test']
Testability,> Thanks for your work @vgvassilev ! Do you think it's possible to add a high level test of the code to check the original report of Alice is addressed?. The test I have is the minimal reproducer from this issue's test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14853#issuecomment-1971358469:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/14853#issuecomment-1971358469,3,['test'],['test']
Testability,"> Thanks, @bellenot!; > ; > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13004#issuecomment-1589159193:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/13004#issuecomment-1589159193,1,['test'],['test']
Testability,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?. Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13724#issuecomment-1736898626:261,benchmark,benchmarks,261,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736898626,1,['benchmark'],['benchmarks']
Testability,"> That did not help. Even with the default set to ON, the CI tests are run with -Dbuiltin_gtest=Off, so they ignore the default. It seems that the test definition must be changed too. Where are the tests defined? rootspi? So for this to work in the CI testing it must be accompanied by a change in the definition of the CI tests to either call with -Dbuiltin_gtest=On (or at least not with an explicit -Dbuiltin_gtest=Off), or install the gtest-devel and gmock-devel packages in the test environment. Can someone give some pointers or help with the changes?. I think `builtin_gtest` should be added to the list of supported modules for different platforms in https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake; (but only after this PR is merged)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301#issuecomment-1091277933:61,test,tests,61,https://root.cern,https://github.com/root-project/root/pull/10301#issuecomment-1091277933,6,['test'],"['test', 'testing', 'tests']"
Testability,"> That looks correct diagnosis. Can we extend the lifetime of `clang::ExternalASTSource::Deserializing::~Deserializing` eg register a deserialization upon say `findScope` and then delay the odr hash checks after things were fully deserialized?. Very creative idea :sweat_smile: what we can do is create our own `Deserializing` RAII in `findScope` because `ASTReader::FinishedDeserializing` will only do ODR violation checking on the last matching call. However, this also skips a number of other actions. As a result, I end up with an assertion for a cast of `FunctionDecl` - probably because some internal state is not correctly updated. In general, this approach sounds like treating the symptoms instead of the underlying cause, no? If I look at the backtrace for https://github.com/root-project/root/issues/10291, `findScope` is not involved there... (but a `friend` decl is :thinking:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1403525168:535,assert,assertion,535,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1403525168,1,['assert'],['assertion']
Testability,"> That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1659934285:96,assert,assert,96,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1659934285,1,['assert'],['assert']
Testability,"> That would be commit https://github.com/root-project/root/commit/2a420c374054d51441c601d54d13a6d73fc8814e (maybe by accident), after commit https://github.com/root-project/root/commit/180be8392b9fae67a6d99cc5c35de3dde8aea71d noted that the ""test is a no-op in CMake"". No explanation, so I would also assume by accident. Conclusion: the test was never ""properly"" ported to CMake, Yikes :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2307559186:243,test,test,243,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2307559186,2,['test'],['test']
Testability,"> That would be the roottest repository, say in a new directory root/thisroot/. That's a good idea! Does the test machine have bash dash ksh zsh ... all installed or could they be added? So that several terms can be tested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557#issuecomment-1281922502:109,test,test,109,https://root.cern,https://github.com/root-project/root/pull/11557#issuecomment-1281922502,2,['test'],"['test', 'tested']"
Testability,"> That's fair, but users who don't have either of them installed will get broken tests if they choose to run the tests. Well ... for what it is worth, I am one those users ... (and a minimal build would also be one of those users, wouldn't it be?). If the ROOT build configure successfully and build successfully, then ctest should be clean also. I.e. roottest failing because numba is not installed would, in my opinion, means that the cmake configure step of ROOT should fail if numba is not installed ... i.e. numba would become a hard dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-650352555:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-650352555,2,['test'],['tests']
Testability,"> The 2nd windows build worked: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157161/console. There was apparently a problem with the build node, 267 tests failed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1277117636:177,test,tests,177,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1277117636,1,['test'],['tests']
Testability,"> The IsBatch() was logical. No it is not. IsBatch ""just"" mean that there is attached screen but the code is still dealing with pad and canvas and current canvases (for example to store them in pdf file or ROOT file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704343689:20,log,logical,20,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704343689,1,['log'],['logical']
Testability,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache?. I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721001471:239,assert,assertion,239,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721001471,3,"['assert', 'test']","['assertion', 'test']"
Testability,"> The SmallClusters test, however, seems to still fail for [mac13 ARM64](https://github.com/root-project/root/actions/runs/5242483996/jobs/9465937397?pr=12990), but we'll see. Yes, this is unrelated - likely the iterators aren't actually invalidated by any implementation. I still wanted to fix it before further debugging, just in case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12990#issuecomment-1588630387:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/12990#issuecomment-1588630387,1,['test'],['test']
Testability,"> The alternative could be to have the decorator inspect the function signature and, if it does not have the second argument wrap it with something like. That's a very nice idea! Actually I already had a wrapper of the user pythonizor function (the wrapper does the filtering based on the class name), so it was easy to add the two ways of calling the pythonizor depending on its number of parameters. I also added an early check for the number of parameters of the pythonizor which happens when it is registered (I use `inspect` to get the number of positional arguments). I wrote some tests already so the only missing thing is a tutorial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128#issuecomment-964073687:587,test,tests,587,https://root.cern,https://github.com/root-project/root/pull/9128#issuecomment-964073687,1,['test'],['tests']
Testability,"> The change looks good to me, if the CI failures are understood/unrelated. Just for clarification, is there a way to test this specifically? Or it is easily visible but we don't have a Python 3.8 runner in the CI?. Hi, @hahnjo was able to reproduce this on python3.8. It should be more visible if we had a python3.8 runner, but this does not error out on newer python versions. The stack trace points to TCling not handling `void init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}` which is an incorrectly constructed aggregate initialization constructor. I would prefer if this could be tested before merging if @hahnjo can apply this commit on his platform and confirm that `roottest-python-basic-datatype` and `roottest-python-cpp-cpp11` start to pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16548#issuecomment-2381246738:118,test,test,118,https://root.cern,https://github.com/root-project/root/pull/16548#issuecomment-2381246738,2,['test'],"['test', 'tested']"
Testability,"> The commit fixes a bug but it looks like we have no test for this case. This being TTree, I would warmly suggest a test is added for this case. Well ... that was of course useful ... as thinking about it more made it clear that there more similar cases. See https://github.com/root-project/roottest/pull/487",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-612209494:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-612209494,4,['test'],['test']
Testability,> The crash depends on the input file. I landed with one file and here is the log file which came from running valgrind. . Does the crash with valgrind have the same symptoms as the original problem (i.e. seg fault in `TStreamerInfoActions::VectorLooper::ReadCollectionBool`)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1466612723:78,log,log,78,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1466612723,1,['log'],['log']
Testability,"> The current logic in RDisplay relies on cling::printValue for printing the column elements,. We should short-circuit this for the numerical types. Furthermore, in principle, `Display(""numerical_column"")` should be doable without JITing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14511#issuecomment-1922102651:14,log,logic,14,https://root.cern,https://github.com/root-project/root/issues/14511#issuecomment-1922102651,1,['log'],['logic']
Testability,"> The error is ""real"":; > ; > ```; > Warning in <THnSparse::CreateHnAny>: Unknown Type of Histogram; > Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments.; > const int dim ( s->GetNdimensions() );; > ^; > ```; > ; > Could you have a look at `root -l -b test/stressHistogram.cxx`, please? That seems to fail after your change. It seems that THnSparse is not defined for Long64_t, only for Long_t. I'll create the L64_t version of it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-875602523:328,test,test,328,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-875602523,1,['test'],['test']
Testability,"> The error is concerning because it is in a test directly involving address calculation. The changes seems all very reasonable so it might actually be pre-existing (but have an 'arbitrary undefined' behavior). I'll take a look. OK, thanks @pcanal !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8013#issuecomment-828544291:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/8013#issuecomment-828544291,1,['test'],['test']
Testability,"> The fact that you use R__DEBUG_HERE signals to RLogger that it should only emit this if the verbosity is >= debug. @Axel-Naumann yes but to figure out whether verbosity (for the group) is >= debug, a ""raw"" `R__DEBUG_HERE` will take some locks and go through quite some logic won't it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-734245275:271,log,logic,271,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-734245275,1,['log'],['logic']
Testability,"> The failing test seems to trigger some llvm bug:; > ; > ```; > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; > ==22765== Memcheck, a memory error detector; > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; > ==22765== ; > ; > Processing assertSparseSelection.C...; > ==22765== Conditional ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250619567:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250619567,2,"['assert', 'test']","['assertSparseSelection', 'test']"
Testability,> The failure is [execCheckClusterRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195807/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/) is surprising. Shall we do a binary diff to investigate?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1949904856:121,test,testReport,121,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1949904856,1,['test'],['testReport']
Testability,"> The feature was _meant_ to work, but was later dropped (unintentionally?) from llvm. For now, #8044 will do for us, until @hahnjo will re-introduce this feature upstream. Already works upstream: The generated header files are marked as out-of-date whenever I switch branches, but the logic prevents updating / touching the files when not including the VCS revision, so `ninja` notices that it doesn't actually need to rebuild anything:; ```; $ ninja -j1; [1/109] Generating VCSRevision.h; [2/33] Generating VCSVersion.inc; ```. I think the reason this doesn't work in ROOT is that we don't have https://github.com/llvm/llvm-project/commit/fb5fafb23cc2d8613f8be2487afe94d8594a88ce, so `interpreter/llvm/src/tools/clang/lib/Basic/VCSVersion.inc` currently still contains the information and must be touched upon every switch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8006#issuecomment-831097216:286,log,logic,286,https://root.cern,https://github.com/root-project/root/pull/8006#issuecomment-831097216,1,['log'],['logic']
Testability,"> The file has arrived on lcgpackages, with the following name and unchanged hash:; > ; > ```; > $ sha256sum xrootd-5.4.3.tar.gz; > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz; > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1154669571:338,test,test,338,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1154669571,1,['test'],['test']
Testability,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime?. These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700).; > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343755018:565,test,test,565,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343755018,8,['test'],['test']
Testability,"> The function here seems to well behave for the analytical integral only when `z=0,beta=0, lambda <-1 strictly` In the current master implementation some of the logics on the parameter and sigma,lambda interplay seems to be not implemented. Hi, I'm also trying to use the analytical integral and I think the problem is that currently the RMS is used as the sigma parameter, but for `z=0, beta=0, 0>lambda >-1` the RMS is infinity. In `Ipatia2`, the definition of `sigma` changes when `lambda` moves from (-oo,-1] to (-1,0). This actually could cause problems in the fit as the shape does not change smoothly. Similar behavior happens in the current version due to the definition change of `sigma` for `zeta->0` and `zeta=0`. The definition of `sigma` in the current version is inconsistent in the `evaluate()` function and `analyticalIntegral` function (though commented out). When `beta=0, zeta=0`, the analytical integral could work for `-1<lambda<0`, but the `sigma` is not the RMS. This need to be fixed either in the code, or in the documentation. I suggest to update the `analyticalIntegral` code to be consistent with `evaluate()`. So the RMS will be:; 1. `beta=0, zeta=0, lambda<-1`: non-standard student t pdf, RMS = sigma/sqrt(-2(lambda+1)); 2. `beta=0, zeta=0, 0>lambda>-1`: non-standard student t pdf, RMS is infinity; 3. `beta=0, zeta>0`: RMS = sigma; 4. other: RMS is complicated, as given in https://en.wikipedia.org/wiki/Generalised_hyperbolic_distribution. The user should use the pdf in two modes as the definition of `sigma` is different: 1) `zeta=0, lambda<0`; and 2) `zeta>0`. The analytical integral is provided for mode 1) when `beta=0`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7254#issuecomment-1169929120:162,log,logics,162,https://root.cern,https://github.com/root-project/root/issues/7254#issuecomment-1169929120,1,['log'],['logics']
Testability,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13620#issuecomment-1713700974:10,log,log,10,https://root.cern,https://github.com/root-project/root/pull/13620#issuecomment-1713700974,1,['log'],['log']
Testability,"> The idea (of having the stress test run both compiled and interpreted) was to ensure that the code worked in both environment (i.e. that the interpreter is working for the syntax used here) **and** to monitor the performance differential (arguably the later has not been followed through). Wouldn't you agree, though, that this was an issue in cint times, but not any more in cling times?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656544638:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656544638,1,['test'],['test']
Testability,> The intent of this patch is to fix the failing OSX tests with. Can you remind me why:; a) it only fails on the MacOS node?; b) it (seems to) not be reproduce-able on my own Mac?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618012121:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618012121,1,['test'],['tests']
Testability,"> The last three commits are for Cling's CUDA support. It still doesn't fully work on my machine, but the errors are the same as `master` with LLVM 9 (complains about not finding symbols from `libcudart.so` even though that has been loaded; could be related to the CUDA version?) _without_ assertions that I see tripping on `master`. Do we know which setup used to work for these tests? Maybe I'll have to install older versions of CUDA... That sounds pretty good! I remember @SimeonEhrig mentioning some issues when loading the cuda library. . PS: if the cuda test state is the same as it is in the master maybe we can go off hunting the root test failures and eventually come back to cuda after?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1093338608:290,assert,assertions,290,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1093338608,4,"['assert', 'test']","['assertions', 'test', 'tests']"
Testability,"> The motivation for this patch is that cling should not adjust itself to the PCHs of the client, pretty much the same way as clang. That seems to contradict the goal that a ROOT build should be relocatable. Let me retry to explain better:. ROOT is built on machine 1 with some flags, e.g. `-DMACOS_DEPLOYMENT_TARGET=13.1` (just making this up). Now we try to run this package on a different machine, where clang would (e.g. because of the Xcode version) set `-DMACOS_DEPLOYMENT_TARGET=13.2`. Before this used to work because the compiler config is taken from the PCH. This PR will break this case. Typical cases might be:; - not all compile time flags made it from the build of ROOT to ; - not all flags passed to rootcling when building the PCH are replicated by the Driver. You should be able to try by building ROOT with `CXXFLAGS=-Dfoo` and then running the resulting ROOT binary without. This works in master and should fail in your PR. This has been a real issue, seen with macOS and experiments, which triggered me to take the PCH compiler config as the source of truth, and not an unrelated config determined at runtime and potentially clashing with what we had when building the PCH. I believe several experiments currently still use ROOT build with a PCH due to issues with modules. As a way forward I propose:; - try the `CXXFLAGS` test I mention above; - check with your preferred experiment currently using PCH in production, to assert relocatability e.g. onto grid nodes. Either way I'd strongly recommend we merge this only after branching v6-28-00-patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11922#issuecomment-1357340575:1344,test,test,1344,https://root.cern,https://github.com/root-project/root/pull/11922#issuecomment-1357340575,2,"['assert', 'test']","['assert', 'test']"
Testability,> The new scheme indeed seems like a reasonable solution. Thanks Philippe! I've uploaded a few tests. I'd like to have also @eguiraud 's opinion,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660#issuecomment-883374728:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/8660#issuecomment-883374728,1,['test'],['tests']
Testability,> The only thing is that stressGraphics has been changed.; > Does it run properly after this change ?. Yes it still works. All changes in stressGraphics and stressHistograms; were about mixing in logical operators bool and int types.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3887#issuecomment-498215670:196,log,logical,196,https://root.cern,https://github.com/root-project/root/pull/3887#issuecomment-498215670,1,['log'],['logical']
Testability,"> The point is, I don't think this logic is needed at all. ~RooAbsArg takes care of properly breaking all the client-server links, both uplinks and downlinks, for every object. I couldn't find a logical case where a crash would occur if the safeDeleteList logic were to be removed.; > ; > All RooFit tests pass after this patch. No problem for my heavy workspace manipulation worflows either. By now, I think that the breaking of the links came after this destructor magic. You might be right that this is not needed, any more. I suggest to put it in master and see if the address sanitizer build blows up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685#issuecomment-1021007687:35,log,logic,35,https://root.cern,https://github.com/root-project/root/pull/9685#issuecomment-1021007687,4,"['log', 'test']","['logic', 'logical', 'tests']"
Testability,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440329756:141,test,test,141,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440329756,1,['test'],['test']
Testability,"> The second one is a change in the interface of the MinimumBuilder base class. We run Minuit using > the MnMigrad class. Without this change, there is no way to change the print level in a particular; > instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder. When considering thread-safety, one of the conclusion is that in order to have a consistent system, const function **must** be thread-safe. So indeed all mutable ought to be either protected by a lock or made atomic. [Most of our code was written before this conclusion was reached and thus are not compliant but we ought to have new code following this correctly to avoid getting further in technical debt :) ]. Independently, it is **very** odd to have a 'Setter' to be const. What is the actual use case/code that is prevented by having this function non-const?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384991793:258,log,logical,258,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384991793,1,['log'],['logical']
Testability,"> The status bit check test seems a bit flaky as it also failed in the nightlies, albeit with a different problem (segfault, not error message). @amadio humm ... Odd ... I can't find any recent nightly showing the problem. Can you point me in the right direction? Also odd, *this* failure is a segfault and not an error message (aka I am confused by your message ;) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327879837:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327879837,1,['test'],['test']
Testability,"> The subtraction was never needed, this was a way to cast a pointer into an integer via a ptrdiff_t. I can elaborate on this, but I'm not sure this really adds value to archeological investigations that might ever come across this... This plausible albeit a bit odd (i.e. why didn't they do the straight cast in the first place? I find it more likely that there has been a change in the C++ standard (from 1994 to now :) ) that allows the straight cast to work ), I agree that it might not be helpful to dig any further. I would add the above fact/claim/opinion :) at the very least in the git log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9969#issuecomment-1061021450:595,log,log,595,https://root.cern,https://github.com/root-project/root/pull/9969#issuecomment-1061021450,1,['log'],['log']
Testability,"> The test failure on mac13 is not due to the changes of this PR. So some old svg tests (o) are failing because of a changed fill attribute:; - Original: fill=""#917f6e""; - Modified: fill=""#6f2da8"". The json tests (j) are failing because of differences in fOper. Do we need new reference files ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2326408720:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2326408720,3,['test'],"['test', 'tests']"
Testability,"> The tests that are added in this PR work with Cl, but there are still failures because of this:; > ; > * [Regression in support of functions with unknown definition vgvassilev/clad#890](https://github.com/vgvassilev/clad/issues/890); > ; > ; > It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?. This should work but we *should* avoid num diff fallback because it is slow and can introduce numerical instabilities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107653275:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107653275,2,['test'],"['test', 'tests']"
Testability,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832043953:422,test,test,422,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953,8,['test'],"['test', 'testProxiesAndCategories', 'testRooDataHist']"
Testability,"> The whole method could actually be folded in GetBulkEntries. Yes, I think so. There is only 2 differences between the two function and both could be handle with an if statement. I would prefer to finish/merge https://github.com/root-project/root/pull/6519 and then have a new PR (an extension of this one?) that ; * remove the check on DestructiveSerialization.; * Collapse the 2 functions into a single Impl functions; * Extend the test to cover the new known-to-work cases.; * Create a new issue on the still failing one (char); * Remove/Deprecate the GetDeserializeType functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6558#issuecomment-703954227:435,test,test,435,https://root.cern,https://github.com/root-project/root/pull/6558#issuecomment-703954227,1,['test'],['test']
Testability,"> There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling `TInterpreter::Declare` in this respect. This is likely related to the issues described by @jalopezg-git in [#12449 (comment)](https://github.com/root-project/root/pull/12449#issuecomment-1467860880) and can be fixed in a future PR. FYI, https://github.com/root-project/root/pull/13565 should fix the issues with unloading that I mentioned before in this PR! I still need to look at two test failures, but it's mostly there :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1700934823:534,test,test,534,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1700934823,1,['test'],['test']
Testability,> There are still test errors and clang-format errors to handle. All errors are not related to PR.; clang-errors I will check,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1988607058:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1988607058,1,['test'],['test']
Testability,> There is actually a test for it: [root-project/roottest#562](https://github.com/root-project/roottest/pull/562) 😄. That's excellent!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6024#issuecomment-660167751:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/6024#issuecomment-660167751,1,['test'],['test']
Testability,"> There is no ""undefined"" value for an integer variable. The test failures are because with these changes we are printing errors that were not printed before. Ah ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861746872:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861746872,1,['test'],['test']
Testability,"> These dataframes are constructed from a `RRootDS` with `fileGlob = ""TRootTDS_input_*.root""` - _why_ do `RCsvDS_test_headers.cs` (note the missing `v`!), `specTestDescribe3.root` and `testDescribeDataset3.root` show up to the party?! Is this maybe causing the spurious dataframe test failures on Windows? @bellenot @eguiraud @pcanal. The fix is coming (thread safe `TWinNTSystem::OpenDirectory` and `TWinNTSystem::GetDirEntry`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681738398:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681738398,1,['test'],['test']
Testability,"> These new functionalities would really benefit from some tests if you can, to be added in https://github.com/root-project/roottest/tree/master/python/cmdLineUtils. test added :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14419#issuecomment-2047128584:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/14419#issuecomment-2047128584,2,['test'],"['test', 'tests']"
Testability,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!. It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107#issuecomment-1825822442:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/14107#issuecomment-1825822442,1,['test'],['test']
Testability,"> This behavior is a **very significant** departure from the existing behavior (where, because the libraries were added to the link line, the library were never reloaded).; > ; > Reloading arbitrary depend library is never a good idea since they (are likely to) include static object that may do things that are **essential** to do only once (initialization, connection to db).; > ; > Technically CompileMacro could (as it does elsewhere) first check if the library is loaded.; > ; > But still several questions:; > ; > 1. Why is libTree listed twice in the list of depend library?. The libTree.6.21.01.so libTree.so are the same library -- one is linked to the other (forgot which way it was). The dependent symbol scanner currently does not work well with symlinks. This PR fixes it: https://github.com/root-project/root/pull/4717. > ; > 2. When should gSystem->Load automatically reload a library, if ever?. If we decide that it won't ever reload (which I do not see issues with) then we should reimplement the calls to `gInterpreter->Load` as it translates them to `.L libName` which reloads. Alternatively, we could check if the library changed and only reload it if it changed. > ; > ; > @Axel-Naumann @vgvassilev opinions?; > ; > PS. Even-though the set of test would be fixed by updating gSystem->Load and/or CompileMacro, the PR is still likely necessary for the case where CompileMacro generates a pcm (and thus need to support reload) or the case where the user explicitly unload a library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618361118:1264,test,test,1264,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618361118,1,['test'],['test']
Testability,"> This button was not added by me, it was meant to be use ro test the code editor before the fileDialog was created. But i can remove it if you want. Just ""hide"" this button for the moment - it will be confusing to the people. > I will look into that but i don't think m or ui have such things. Please check. If there are no alternatives - I will add tnt lib to ROOT openui5 package",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4646#issuecomment-575603020:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/4646#issuecomment-575603020,1,['test'],['test']
Testability,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090#issuecomment-2027521011:447,test,test,447,https://root.cern,https://github.com/root-project/root/issues/15090#issuecomment-2027521011,1,['test'],['test']
Testability,"> This is just for testing. In this case make it a draft PR. Like this, it doesn't automatically ask for reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9367#issuecomment-984709564:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/9367#issuecomment-984709564,1,['test'],['testing']
Testability,"> This is the intended behavior for this macro, i.e. it cannot work as intended if the VecGeom converter cannot be instantiated. However, I can make it issue a warning instead, and do raytracing using the unconverted shape. Are you trying to test the failure mode or should we just not run the test if the build does not support it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1431712470:242,test,test,242,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1431712470,2,['test'],['test']
Testability,"> This means, that they remain open but zero bytes are served,; > (I'm getting data for some files but zero bytes for other files). Do you know if the xrootd routine just ""hang"" in that case or return with request to retry later? If they just hang there is not much I can see doing to detect the case unless there is an xrootd routine that detect/support this case that we could replace the current call with. (and we would need some help to update the xrootd plugin in ROOT to support and test this).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1253892312:490,test,test,490,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1253892312,1,['test'],['test']
Testability,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-527495903:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-527495903,2,['test'],['tests']
Testability,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:; ```; Failed Tests (23): ; Clang :: AST/ast-dump-attr.cpp ; Clang :: AST/ast-dump-attr.m ; Clang :: AST/ast-dump-c-attr.c ; Clang :: AST/ast-dump-color.cpp ; Clang :: AST/ast-dump-wasm-attr-export.c ; Clang :: AST/ast-dump-wasm-attr-import.c ; Clang :: AST/ast-print-attr.c; Clang :: AST/attr-swift_attr.m; Clang :: AST/attr-swift_bridge.m; Clang :: AST/category-attribute.m; Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp; Clang :: AST/pragma-attribute-objc-subject-match-rules.m; Clang :: AST/pragma-multiple-attributes.cpp; Clang :: Misc/pragma-attribute-cxx.cpp; Clang :: Misc/pragma-attribute-objc.m; Clang :: Misc/pragma-attribute-strict-subjects.c; Clang :: OpenMP/assumes_codegen.cpp; Clang :: OpenMP/assumes_print.cpp; Clang :: OpenMP/assumes_template_print.cpp; Clang :: Sema/ast-print.c; Clang :: Sema/attr-availability-swift.c; Clang :: SemaCXX/cxx11-attr-print.cpp; Clang :: SemaTemplate/attributes.cpp; ```. A broken example like:; ```; /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input ; // CHECK: int fun_asm() asm(""test""); ; ^ ; <stdin>:3:46: note: scanning from here ; using C = int ((*))() __attribute__((cdecl)); ; ^ ; <stdin>:4:1: note: possible intended match here ; int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); ; ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168753106:92,test,test,92,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168753106,11,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1217534028:17,test,tested,17,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1217534028,1,['test'],['tested']
Testability,> This shouldn't compile with the current master? Draw() doesn't need GetOptions() anymore. I took version from last Friday.; I closing this PR.; New one will follow once I test it with newest code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1647#issuecomment-366710718:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/1647#issuecomment-366710718,1,['test'],['test']
Testability,"> This test is with uncompressed data already. However, the bottleneck is not the merging process. Merging can go as fast as the output disk can write, which is the fastest we can do. What I see in profiles is a lot of time being spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. I think we should focus on these parts first. Fair enough ; I had misunderstood where the memory mentioned in ""the total amount of used memory is still high since tasks are accumulating large chunks of data into the"" was located (and it is on the 'client/producer' side rather than the 'writer-to-disk' side). > we reuse zlib dictionaries, so the whole file is a single stream. Not that I know off. They are limited to each TBuffer/TBasket. > Nevertheless, this is dealing with data generation, so there are no pre-defined clusters. Yes and the chunking of the generation is determining the clusters size . Smaller clusters size means smaller basket which means smaller compression ratio (usually), smaller baskets also means more baskets which means more meta data (always). Smaller clusters means that the default TTreeCache size when reading the file will be smaler which means higher number of individual reads which means lower performance (especially over high latency links). Of course this is a trade-off; the gain from reducing the memory during the writing may offset the above mentioned loss but this is often challenging since the files are (usually) write once read many times. > spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. This is a bit surprising. The TTree is supposed to be re-using as much as possible the memory chunk (both the compression buffer and the TBuffer) as much as possible. Maybe we are creating too many TTree objects and we could re-use some of them or maybe the re-u",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385#issuecomment-461138586:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/3385#issuecomment-461138586,1,['test'],['test']
Testability,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1640536926:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1640536926,1,['test'],['test']
Testability,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. ; There is difference in handling for `T *` and `unique_ptr<T>` transient members.; I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1639855962:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1639855962,1,['test'],['test']
Testability,> This will most probably not work on Windows. Why do you think so?; I test it at least from windows command line - it was starting firefox in headless mode.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2660#issuecomment-423511759:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/2660#issuecomment-423511759,1,['test'],['test']
Testability,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775#issuecomment-1169652245:94,test,test,94,https://root.cern,https://github.com/root-project/root/pull/10775#issuecomment-1169652245,2,['test'],['test']
Testability,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2041158064:8,log,logs,8,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2041158064,1,['log'],['logs']
Testability,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):; > ; > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup.; > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no?; > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?. 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time; ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1413340461:787,test,tests,787,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1413340461,2,['test'],"['test', 'tests']"
Testability,"> To do so we need an additional public API:; GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-817863318:654,log,logical,654,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318,2,['log'],['logical']
Testability,> Unfortunately that's not the case. Developments in cling are quite coupled to the tests -- for example PR #5884 is blocked due to such failures. My experience is that those stress tests are actually quite useful when making changes to core of ROOT. PS: If they are slow we can think how to make them run faster.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656639961:84,test,tests,84,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656639961,2,['test'],['tests']
Testability,"> Unfortunately the reproducer is not fixed by this patch, see the following (which can become the seed for a test to be added to the PR). Thanks! What I was suggesting with this fix is to enforce that all TH1F converge towards a maximum value of 16,777,216, and describe it well in the description. Your picture looks like the TH1F does exactly that. Maybe it worked already like that without the patch, but just by chance, whereas now we are defining / enforcing that behavior. Now... another story is why TTree::Draw still uses TH1F. Maybe to open in a separate issue.; The issue https://github.com/root-project/root/issues/6671 shows that RDataFrame uses instead a correct TH1D which 'reveals' that the TTree.Draw example was reaching the TH1F overflow. Another option would not to add any explicit checks in the code and just state in the documentation that whenever you see something close to 16e6 with TH1F, distrust and use TH1D instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-2045737882:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-2045737882,1,['test'],['test']
Testability,"> Using the same file in multiple tests is never good, they might run concurrently. You are right, I changed the filename in the latest commit :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-896015112:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-896015112,1,['test'],['tests']
Testability,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721014397:40,test,test,40,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721014397,2,['test'],['test']
Testability,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor?. Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors; ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023; 1548: @@ -14,5 +14,9 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638479994:173,test,testing,173,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638479994,2,"['log', 'test']","['log', 'testing']"
Testability,"> WOW! Nice catch!. It's not black magic. Both of them failed in a PR, and then it was pretty obvious that they are the same test. :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6192#issuecomment-673995354:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/6192#issuecomment-673995354,1,['test'],['test']
Testability,"> Wait, actually there is no existing `tmva-cudnn` build option in [RootBuildOptions.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake).... So `-Dtmva-cudnn=On ` in your reproducer is ""illegal"" as far as I can tell, hence your issue. Even if it is, why do we have two variables which have to be kept in sync to do one job? And if you look at the ROOT build options, `tmva-cudnn` very much looks like a logical extension of `tmva-cpu, tmva-gpu, tmva-pymva, ...`, so I guess it's logical that I got confused when I looked into CMake how to enable it. It seems that my mistake also tricked you. 🙂 ; And even if it was ""illegal"", why does ROOT configure correctly, and fails only when you build?. That's why I'm proposing to remove `cudnn`, and only go with `tmva-cudnn`. Let's make this an official build option, fail fast when it's not supported, and keep it off when it's not needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16715#issuecomment-2435518243:445,log,logical,445,https://root.cern,https://github.com/root-project/root/issues/16715#issuecomment-2435518243,2,['log'],['logical']
Testability,"> Was this followed up on? It's not a critical issue but the extra warnings are still annoying. I agree, and this is followed up in this PR, being tested now: https://github.com/root-project/root/pull/16550",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14132#issuecomment-2380555584:147,test,tested,147,https://root.cern,https://github.com/root-project/root/issues/14132#issuecomment-2380555584,1,['test'],['tested']
Testability,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes.; > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766892905:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766892905,2,['test'],"['test', 'tests']"
Testability,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1717037288:533,log,logarithmic,533,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288,2,['log'],['logarithmic']
Testability,"> We have tests for IsDataContainer in tree/dataframe/test/dataframe_utils.cxx, you could add an additional test to cover RVec<bool>. done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5961#issuecomment-654998021:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/5961#issuecomment-654998021,3,['test'],"['test', 'tests']"
Testability,"> We just have to watch out that `${TBB_INCLUDE_DIRS}` is never `$ROOTSYS/include` else we will not see any warning from any of ROOT's headers... But IIUC this is currently external or if builtin in `ginclude/`, so all good. Thanks for the review and for the comment. So should I add a test or not?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9067#issuecomment-934112246:286,test,test,286,https://root.cern,https://github.com/root-project/root/pull/9067#issuecomment-934112246,1,['test'],['test']
Testability,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1680750267:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1680750267,2,['test'],"['test', 'testing']"
Testability,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before.; If one creating file in other directory or with other name - it is already not exactly same code.; I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical.; To achieve this, default values for TKey/TDirectory time stamps and UUID are stored.; Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524215736:318,test,test,318,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524215736,1,['test'],['test']
Testability,"> We should probably be extra explicit and provide an empty `__all__` list attribute in our `__init__.py`. This is already done in in the ROOT facade constructor. Indeed, one can move it directly to `__init__.py`, but now that you raised that point: why do you think an explicit `__all__` is better than not having this attribute at all?. > In principle, we could also raise an exception every time a user tries `from ROOT import *`. That would be nice! Do you know how to do this? Google didn't give an easy solution :(. > (beware that we have this in our own test suite, so we _will_ see errors). I don't think we have it, or do we? I only see it in this test suite where it is deactivated for Python 3:; https://github.com/root-project/roottest/blob/master/python/regression/PyROOT_regressiontests.py#L188",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1926944206:561,test,test,561,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1926944206,2,['test'],['test']
Testability,"> We should probably try using ProcessLine instead of Declare. Seems like an easy test, let me try that :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894113472:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894113472,1,['test'],['test']
Testability,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-1980364814:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814,4,['test'],['test']
Testability,"> We try to keep ROOT platform independent, this isn't helping :-/ I'll merge this as a stop-gap solution, but I'd like you @ferdymercury and @pcanal to consider reverting this feature. I am not sure I have seen any discussion on motivation, and why the use of e.g. tbb isn't a more appropriate solution. Hi, the discussion is here: https://root-forum.cern.ch/t/performance-effects-in-a-root-based-data-acquisition/45519/3, I am developing a 40Gbps DAQ system where readout performance is critical to not lose data. Depending on which CPU the DAQ thread is located, the readout is fast enough to not lose any data. That's why setting CPU affinity was proposed. Without it, some readouts were not fast enough to catch up with the data rate. I do not know about TBB, thus not sure if it would be better or worse. In any case, I am not a thread expert, so if there is a better solution, I would be happy to try it instead of the current attempt with CPU affinity. Just as a side note, for my application, I do not need highly parallel tasks, I just need two threads (one for the GUI, one for the DAQ). If I do not set the affinity, Linux puts them both on the same CPU and thus the DAQ readout performance is reduced. (That being said, it's true that this feature could be expanded to Windows and MacOS, however I do not have any of these OS to test it.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8563#issuecomment-870438974:1342,test,test,1342,https://root.cern,https://github.com/root-project/root/pull/8563#issuecomment-870438974,1,['test'],['test']
Testability,"> We understand why `roottest-python-basic-basic` fails on fedora38 and, if possible, fix the problem. I believe this is not related to this PR, some of the Python tests fail from time to time on Fedora 38 and Fedora 39. I suspect there are still GC-related issues with Python 3.11 and 3.12 that were never fully understood...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1870259041:164,test,tests,164,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1870259041,1,['test'],['tests']
Testability,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too?. The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`).; I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-759590333:276,test,test,276,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-759590333,1,['test'],['test']
Testability,"> We're already adding `-fno-semantic-interposition` since commit [e564c8a](https://github.com/root-project/root/commit/e564c8a04feb2b6fa18a2f429d8fb5a103825a34) / PR #8204 which I _think_ should already set the visibility such that LLVM symbols are hidden from other libraries. Did you recently test a `master` build or 6.24/02?. Interesting. From my understanding of g++ document, this flag with accidentally solves the problem if the compiler optimize the code by in-lining it but it is not guarranted. In addition it can create confusing situations where the problem disappears as soon as you try to debug it using the debugged version of the code. That said, we are in a confusing situation, as I'm not able to reproduce the problem as soon as I recompile ROOT. Nevertheless, I recompiled many time ROOT last week, and then the problem was systematic. It could be that it is due to the ROOT code version I used. The problem is there for LCG100 which used ROOT 6.24/00, but not for `/cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.24.02/x86_64-centos7-gcc48-opt/`. So it would confirm that `-fno-semantic-interposition` has solved the problem if it has happened between the two versions. Nevertheless, as I wrote before, in my understanding, it's accidental and won't be as reliable as the -Bsymbolic option. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885033654:296,test,test,296,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885033654,1,['test'],['test']
Testability,"> Well ... for what it is worth, I am one those users ... (and a minimal build would also be one of those users, wouldn't it be?). I agree (hence this PR), but I think I have found a solution (@Axel-Naumann). Look at this:; ```; ctest -R df026; Test project /home/shageboe/root-archNative-clang; Start 797: tutorial-dataframe-df026_AsNumpyArrays-py; 1/1 Test #797: tutorial-dataframe-df026_AsNumpyArrays-py ...***Not Run (Disabled) 0.00 sec; No tests were found!!!; ```; CMake's `DISABLED` property can be used already in 3.9, and disabled tests are listed, but don't run.; Apparently, they are even reported to cdash. I'm curious now how jenkins handles them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-651134600:245,Test,Test,245,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-651134600,4,"['Test', 'test']","['Test', 'tests']"
Testability,"> Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good?. Sounds perfect, indeed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210#issuecomment-1630478178:78,test,tests,78,https://root.cern,https://github.com/root-project/root/pull/13210#issuecomment-1630478178,1,['test'],['tests']
Testability,"> Well, in some cases, the GUI layout is wrong. Do you want me to take screenshots?. No but a short descriptions of the elements used and/or the kind of situation would be helpful. > Form my own purpose, I want to test on a machine with dual screens once I can access it (and I'll remove it once tested). Can you add a comment along this line next to the code? (This would prevent somebody else from (proposing to) removing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663608298:214,test,test,214,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663608298,2,['test'],"['test', 'tested']"
Testability,"> Well, wouldn't that issue a spurrious/wrong warning in the following case (i.e the normal usage):; > ; > ```; > for(Long64_t entry = 0; entry < tree->GetEntriesFast(); ++entry); > {; > tree->GetEntry(entry);; > }; > ```; > ; > [Slightly related question, did you run any of the test after successfully compiling?]. Actually I had some trouble compiling in my usual manor. But when I tried to compile upstream/master it also failed so the failure didn't seem to originate from my chnages. I wasnt sure what to do so I was hoping I could see what phsft-bot has to say before I do anything. This is how I build: (Ubuntu 20.04 LTS). ```; mkdir rootbuild rootinstall ; cd rootbuild; cmake -DCMAKE_INSTALL_PREFIX=../rootinstall/ ../root/; cmake --build . -- -j4; cd bin; source thisroot.sh; root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861658671:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861658671,1,['test'],['test']
Testability,"> Well, wouldn't that issue a spurrious/wrong warning in the following case (i.e the normal usage):; > ; > ```; > for(Long64_t entry = 0; entry < tree->GetEntriesFast(); ++entry); > {; > tree->GetEntry(entry);; > }; > ```; > ; > [Slightly related question, did you run any of the test after successfully compiling?]. But here the user would be providing a value for `entry` that is 0. The warning would only trigger if entry is not provided at all, i.e. `!entry` is true.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861660138:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861660138,1,['test'],['test']
Testability,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log); [old.log](https://github.com/root-project/root/files/14693214/old.log),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2011793603:180,test,testReport,180,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2011793603,5,"['log', 'test']","['log', 'testReport']"
Testability,"> What about the loop in getLogProbabilities()?. It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032#issuecomment-773942657:199,log,log,199,https://root.cern,https://github.com/root-project/root/issues/7032#issuecomment-773942657,1,['log'],['log']
Testability,"> What do you think?. I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13794#issuecomment-1747210950:203,log,logic,203,https://root.cern,https://github.com/root-project/root/pull/13794#issuecomment-1747210950,1,['log'],['logic']
Testability,"> What does the build error message say? I can't read it. ```; 12:53:51 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; 12:53:51 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; 12:53:51 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779835777:317,test,test,317,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779835777,5,['test'],['test']
Testability,"> What is root-io-pcm? Do you mean rdict.pcm?. Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435211605:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435211605,1,['test'],['test']
Testability,"> What is stopping us from adding them and close this item for good?. That the CI will probably become red, because it would enable the GNN tests that were never run on the CI before. But we can work around this by also always disabling the tests:; https://github.com/root-project/root/pull/15512. Once that PR is merged, we can close this issue, and I'll open a new one to remind the TMVA guys to re-enable the GNN tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553#issuecomment-2111247254:140,test,tests,140,https://root.cern,https://github.com/root-project/root/issues/14553#issuecomment-2111247254,3,['test'],['tests']
Testability,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1658748624:176,test,test,176,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1658748624,2,['test'],['test']
Testability,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex.; > ; > Thoughts?. I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:; https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:; https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13771#issuecomment-2121660162:516,test,tested,516,https://root.cern,https://github.com/root-project/root/pull/13771#issuecomment-2121660162,2,['test'],"['test', 'tested']"
Testability,"> What’s the state of cling’s test suite?. I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12218#issuecomment-1415945499:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/12218#issuecomment-1415945499,1,['test'],['test']
Testability,"> Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. Sorry, I meant that I could not find the test definition in the source. Maybe I'm not looking in the right place. Also, the test in question is quoted two times in the log, once successful and one unsuccessful. In any case, I do know something is going on and wanted to have a look, but because of the above, I'm not sure where and how. > Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake. Does the test pass locally?. Alright, I will have a look. > I wanted to have a look at where the crash happens, but all commits are now squashed into one. Do you have a version where the commits are separated as the first time when you put up the PR? (...); > ROOT's clang-format file will therefore introduce a lot of indentation changes, which makes the diffs hard to read. Unfortunately, not. I rebased and force-pushed. But for what it's worth, I think the function in question is rewritten to such an extent that old history before clang-format will not help much. But you can easily use a text editor to switch back to the original indentation. Bear in mind that the original code did not use a consistent indentation - some lines used spaces, others tabs, and the size was different in all places. On top of that, lots of the code was improperly spaced where statements belonging to loops or if's were indented shorter than the scope. In any case, I will try next week to see what's going on ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968158801:36,log,logs,36,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968158801,8,"['log', 'test']","['log', 'login', 'logs', 'test', 'tests']"
Testability,"> Why do these builds say that your branch is gone? Should we just restart the Jenkins builds?. I don't know, it's about `roottest` as far as I could tell from the logs. We might restart - or have there been recent changes to the Jenkins scripts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12724#issuecomment-1525971267:164,log,logs,164,https://root.cern,https://github.com/root-project/root/pull/12724#issuecomment-1525971267,1,['log'],['logs']
Testability,"> Why the change in roofitcore and bindings?; > ; > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake.; > ; > Thanks a lot!. Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++; template <typename T>; T *TMath::Gradient(Long64_t n, T *f, double h); {; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; Long64_t i = 1;; ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15100#issuecomment-2104598022:110,test,testTMath,110,https://root.cern,https://github.com/root-project/root/pull/15100#issuecomment-2104598022,2,['test'],['testTMath']
Testability,"> Why we cannot have the test directory use the common ROOT configuration?. Good question, I don't understand why it is like that. I think it grew a bit chaotically, actually the `test` in included in the main CMakeLists via `ROOT_ADD_TEST_SUBDIRECTORY`:; https://github.com/root-project/root/blob/master/CMakeLists.txt#L443. So I was wrong, apparently it is included in the main configuration, but then is tries to find the ROOT package itself, which doesn't make sense as Sergey notes:; https://github.com/root-project/root/blob/master/test/CMakeLists.txt#L16. What happens if you do that, especially when you already have ROOT on your system? Maybe the situation can be improved by not doing `find_package(ROOT)`. But since the tests are not relevant to users, it's not so important to improve this. Anyway, since you don't have a strong opinion, I'll go ahead and merge this. Thanks! It's just so much easier for RooFit development if all the C++ code is in the `roofit` directory :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15490#issuecomment-2113616304:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/15490#issuecomment-2113616304,4,['test'],"['test', 'tests']"
Testability,"> With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; > ... but; > So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:; > ; > ```; > CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; > add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; > Call Stack (most recent call first):; > /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); > /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); > ```; > ; > If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. I imagined that we will have the setting with PARENT_SCOPE and on the roottest side we will have an extra variable which we use onward. > ; > Could you trigger the CI, please? I would like to know if these changes are at least working. Done. > ; > To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; > This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY; > ; > ```cmake; > IF(TARGET ${dictionary}); > LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); > LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); > ENDIF(); > ```; > ; > ```cmake; > IF(TARGET ${dictionary}); > target_sources(${dictionary} PRIVATE ${gensrcdict}); > ENDIF(); > ```. That seems to be the pattern used for the `ROOT_GENERATE_DICTIONARY` analog [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L526). It would be great if we can reuse some code there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587581863:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587581863,2,['test'],['test']
Testability,"> With the new commit following vgvassilevs suggestion, the test passes, so not sure if I should continue in this direction?. No need. As Vassil suggested the original change had unintended consequences (that are of course gone with the latest commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1986443558:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1986443558,1,['test'],['test']
Testability,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754#issuecomment-1155292684:142,test,test,142,https://root.cern,https://github.com/root-project/root/pull/10754#issuecomment-1155292684,1,['test'],['test']
Testability,"> Would it be acceptable to follow this change for v6.30 and up?. From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:; https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13; and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1828463249:556,log,logo,556,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1828463249,1,['log'],['logo']
Testability,"> Would it be helpful to repeat the test with debug symbols enabled for cling (and ROOT)?. ok, I am re-running cmssw tests with ROOT/cling debug",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2329324795:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2329324795,2,['test'],"['test', 'tests']"
Testability,"> Would it be possible to create the libraries from the main thread only, before starting the ""worker"" threads?; > P.S.: Currently all libraries have the same function - is that fine?. Sure, I added another test that creates one shared library per thread before starting execution. Each shared library contains different code (same function body but the function name is changed). Each thread then `Load`s/`Unload`s its own different library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348#issuecomment-1659062317:207,test,test,207,https://root.cern,https://github.com/root-project/root/pull/13348#issuecomment-1659062317,1,['test'],['test']
Testability,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug?. Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113#issuecomment-2052634277:61,mock,mock,61,https://root.cern,https://github.com/root-project/root/pull/15113#issuecomment-2052634277,1,['mock'],['mock']
Testability,"> Wouldn't that reduce the cluster size and hence decrease compression ratio and likely overall read performance of the produced files?. According to @Axel-Naumann, we reuse zlib dictionaries, so the whole file is a single stream, which means that this shouldn't be a problem. Nevertheless, this is dealing with data generation, so there are no pre-defined clusters. > We may also want to speed up the merging process (if I am remembering correctly the current bottleneck is likely the uncompression and unstreaming of the input TTree, if we could find a way to avoid having to do that ... maybe 'just' not compressing the TTree in the TMemFile might help [yes at the cost of memory but ...]). This test is with uncompressed data already. However, the bottleneck is not the merging process. Merging can go as fast as the output disk can write, which is the fastest we can do. What I see in profiles is a lot of time being spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. I think we should focus on these parts first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385#issuecomment-461133086:699,test,test,699,https://root.cern,https://github.com/root-project/root/pull/3385#issuecomment-461133086,1,['test'],['test']
Testability,"> Wouldn't you agree, though, that this was an issue in cint times, but not any more in cling times?. Not because there **are** differences, most intentional (and few not) between cling and a compiler. (To the extreme, if we were to disable one of the test, that would be the compiled one :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656826014:252,test,test,252,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656826014,1,['test'],['test']
Testability,"> Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me. Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1972843020:375,log,logic,375,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972843020,1,['log'],['logic']
Testability,"> Yep, but do I see whether this happened in the PR builds?. Yes, you just need to check that the `pyz` tests ran, then you are sure it is an experimental PyROOT build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3429#issuecomment-463628557:104,test,tests,104,https://root.cern,https://github.com/root-project/root/pull/3429#issuecomment-463628557,1,['test'],['tests']
Testability,"> Yes :) Can you add the test you case you had?. That needed valgrind to detect anything. @pcanal can we use `TStreamerInfo::ls()` or something to validate the layout? Like this (output corresponds to `master`)?; ```; root [0] TClass::GetClass(""std::map<int, std::set<float>>"")->GetStreamerInfo()->ls(). StreamerInfo for class: map<int,set<float> >, version=6, checksum=0xbe69c367; map<int,set<float> > This offset= 0 type=300 ,stl=4, ctype=61, <pair<int,set<float> >> Used to call the proper TStreamerInfo case; i= 0, This type=300, offset= 0, len=1, method=0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9750#issuecomment-1025720410:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/9750#issuecomment-1025720410,1,['test'],['test']
Testability,"> Yes I approved, with a small question about the test. Could you confirm it's checking for identity with the expected title string and not matching of some sort?. `StrEq` is the one. It has not been used until now in any other tests. That's why I did not find it immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14288#issuecomment-1884550457:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/14288#issuecomment-1884550457,2,['test'],"['test', 'tests']"
Testability,"> Yes I guess 0 should be allowed. Have you run a small test to check if it works ?. I'm just compiling the branch now, will get back to you once I have results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3949#issuecomment-501186794:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/3949#issuecomment-501186794,1,['test'],['test']
Testability,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532584411:277,test,tests,277,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532584411,1,['test'],['tests']
Testability,"> Yes, I agree that we should now focus on the remaining test failures, both in Cling and ROOT. For the ""file name too long"" when building with GCC, I've posted #10387 (we'll have to rebase this PR afterwards and change a number of the new `.str()` calls).; > ; > I also started looking into the slow JIT for RDF, and I noticed that it's completely hanging when ROOT is built with C++17. The stack trace of a stuck `./tree/dataframe/test/dataframe_interface --gtest_filter=RDataFrameInterface.GetFilterNamesFromNode` is; > ; > ```; > #0 0x00007ffff697681d in __lll_lock_wait () from /lib64/libpthread.so.0; > #1 0x00007ffff696fac9 in pthread_mutex_lock () from /lib64/libpthread.so.0; > #2 0x00007fffefd8e953 in __gthread_mutex_lock (__mutex=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux/bits/gthr-default.h:748; > #3 std::mutex::lock (this=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:103; > #4 std::unique_lock<std::mutex>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:267; > #5 std::unique_lock<std::mutex>::unique_lock (__m=..., this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:197; > #6 llvm::orc::ExecutionSession::OL_applyQueryPhase1 (this=this@entry=0xbcb8b0, IPLS=std::unique_ptr<llvm::orc::InProgressLookupState> = {...}, Err=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2295; > #7 0x00007fffefd8c8ec in llvm::orc::ExecutionSession::lookup(llvm::orc::LookupKind, std::vector<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags>, std::allocator<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags> > > const&, llvm::orc::SymbolLookupSet, llvm::orc::SymbolState, llvm::unique_function<void (llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr, llvm::JITEvaluatedSymbol, llvm::De",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,2,['test'],['test']
Testability,"> Yes, as expected many tests are failing now, so we have to decide on a strategy here: Do we want to fix all issues first or merge this one first to make it easier to debug things?. I'd merge it as well. The build will be red for weeks or months, but the shifter should have a look and ping people every once in a while.; Given that it only runs during the night, you could even log in to the node and play with the last nightly build if you cannot reproduce the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1057799612:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1057799612,2,"['log', 'test']","['log', 'tests']"
Testability,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430019305:313,log,log,313,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305,4,['log'],['log']
Testability,"> Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. Just do not use absolute path name when creating file. If you are using constructor:; ```; new TFile(""name.root?reproducible"",""recreate""); ```; `name.root` will be stored in file header.; And it can be reproduced on all nodes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524224760:202,sandbox,sandbox,202,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524224760,1,['sandbox'],['sandbox']
Testability,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-1864488370:405,test,test,405,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-1864488370,1,['test'],['test']
Testability,"> Yes, it appears `XRootDConfig.cmake` is broken in the latest version 5.6.3; I opened [xrootd/xrootd#2142](https://github.com/xrootd/xrootd/pull/2142) to fix it, then we need a new release and an update in EPEL. Or maybe we can apply the fix on top of 5.6.3 already? @ellert. I have created an update for EPEL (xrootd-5.6.3-3) with this fix and a few others.; https://bodhi.fedoraproject.org/updates/?packages=xrootd; It is currently submitted to EPEL testing. If karma is provided by those who can, it will be pushed to stable faster. Without karma the default time in testing is 7 dats.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1840315991:453,test,testing,453,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1840315991,2,['test'],['testing']
Testability,"> Yes, it's true that this class (or formerly two classes) are not covered by unit tests yet (and have never been). But I have some user workflows that I found using this class, and soon after fixing some remaining problems with that workflow I will make unit test out of it. As a proposal for the future, maybe change the order: Refactorings are always safer if there are tests exercising the code paths that are changed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12767#issuecomment-1535978068:83,test,tests,83,https://root.cern,https://github.com/root-project/root/pull/12767#issuecomment-1535978068,3,['test'],"['test', 'tests']"
Testability,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1608173549:132,log,logic,132,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1608173549,1,['log'],['logic']
Testability,"> You should have seen this already with 6.30 though. Is there an explanation why 6.30 did not trigger the error?. Just to comment about 6.30: we didn't look at this release apart from to do a compilation test, so indeed, most likely the issue is there as well as per your expectation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964#issuecomment-2203170942:205,test,test,205,https://root.cern,https://github.com/root-project/root/issues/15964#issuecomment-2203170942,1,['test'],['test']
Testability,"> [ regarding `roottest_root_meta_dictSelection_execAtlasTest2_WILL_FAIL` ]; > ; > However, the test was expected to fail on Windows, but it passed (?) @bellenot. Yes, in progress: https://github.com/root-project/roottest/pull/963",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12785#issuecomment-1538277256:96,test,test,96,https://root.cern,https://github.com/root-project/root/pull/12785#issuecomment-1538277256,1,['test'],['test']
Testability,"> [...] plus `tutorial-roofit-rf408_RDataFrameToRooFit-py` (see #10016), which I find a bit surprising since the stack trace pointed somewhere else... But I'll double-check, maybe we were unlucky enough to completely trip the AddressSanitizer over. Okay, that was a fluke. The test is still failing, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1057884893:277,test,test,277,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1057884893,1,['test'],['test']
Testability,"> [01bb696](https://github.com/root-project/root/commit/01bb6965557fcc63d5d2e535b89f57e025922731) hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was `9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). I think `nbuffers >= 1` in all cases, so we should always have 9 additional bytes beyond what we tell `R__zipMultipleAlgorithm`. > This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). Yes, we have to operate under that assumption. > This patch needs to be backported to as many older releases as possible as it can lead to a memory over-write even in the case of TTree (the compression is being given a memory area smaller than it is and unless the compression algorithm stops before it has over-inflated the object by 28+9 bytes, it might still happens). Yes, I think the compression algorithms stop at the buffer sizes we give them. Unless I'm missing something, this means only RNTuple was affected by this and TTree was fine because of the slightly larger buffers? For now, I've opened backports for 6.30 (https://github.com/root-project/root/pull/14624), 6.28 (https://github.com/root-project/root/pull/14625), and 6.26 (https://github.com/root-project/root/pull/14626). If we find that TTree is also affected, we can (and have to) open more backports. > A a side note, the extra size given by TKey and TBaskets probably should be removed (delta understanding why there was a +8 ""in case object is placed in a deleted gap"". Ok, we can try (in `master`). We have to be careful though, I don't want to introduce more memory errors for writing TTrees...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1933568756:337,test,test,337,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1933568756,1,['test'],['test']
Testability,> [100%] Built target hsimple; > filter.cxx:74:10: fatal error: 'unistd.h' file not found; > #include <unistd.h>; > ^~~~~~~~~~; > [100%] Built target PreparationPyz; > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see.; See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314; The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2082617753:276,log,log,276,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2082617753,1,['log'],['log']
Testability,> [cling] Disable many DynamicLibraryManager test on macOS . Should we open an issue to port (and/or fix) those tests (or a subset at least) to MacOS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293955516:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293955516,2,['test'],"['test', 'tests']"
Testability,> [enable on] (potentially all) . We need to make sure that we still test the environment the users will actually use (i.e `dev=OFF` on each PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2168189602:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2168189602,1,['test'],['test']
Testability,> [tcling] Use the autoload raii autoload object in RegisterModule. NFC . Could you extend the commit log to explain why the change is NFC (despite some of the call being 'conditional' in the old code and not in the new code).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3769#issuecomment-489451947:102,log,log,102,https://root.cern,https://github.com/root-project/root/pull/3769#issuecomment-489451947,1,['log'],['log']
Testability,"> `-Dimt=OFF -Dbuiltin_tbb=OFF`. I tried to add the 2 options you said, you can check the below steps, it still failed. The result look the same as the original error of this issue.; 1. `cmake -G ""Visual Studio 17 2022"" -A ARM64EC -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -Dtesting=ON -Droottest=ON -Droofit=off -Dimt=OFF -Dbuiltin_tbb=OFF ..` ; 2. `msbuild /m /p:Platform=ARM64EC /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild`. error message:; `C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(254,5): error MSB8066: Custom build for 'C:\gitP\root-project\root\build_arm64ec\CMakeFiles\c47203b562f7dfc78de28a6cb0d4e391\Options.inc.rule;C:\gitP\root-project\root\build_arm64ec\CMakeFiles\ef6b5551e87d9b29a1350db42d169b36\ClangDriverOptions.rule;C:\gitP\root-project\root\interpreter\llvm-project\clang\include\clang\Driver\CMakeLists.txt' exited with code -1073741819.`. detailed logs:; [ROOT_Setup_arm64ec.log](https://github.com/user-attachments/files/16309437/ROOT_Setup_arm64ec.log); [ROOT_build_arm64ec.log](https://github.com/user-attachments/files/16309436/ROOT_build_arm64ec.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238657100:945,log,logs,945,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238657100,5,['log'],"['log', 'logs']"
Testability,"> ```; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TBaseClass>alreadyinTClassTable; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TEnumConstant>alreadyinTClassTable; > ```; > ; > The template ROOT::Detail::TTypedIter uses ClassDefInline and the registration of the class (i.e. the call to TClassTable::Add) is triggered by via a function static variable initialization. What these messages indicates (and we see that on Windows also) is that the ""function static variable"" are initialized multiple time.; > ; > Setting a breakpoint on TClassTable::Add with the condition `cname[0] == 'R' && cname[6] == 'D' && cname[24]=='<' && cname[32] == 'E'` will tell you exactly when/why this happens (on Windows, multiple library have identical copies of the functions and they are not ""de-duplicated"" by the linker (i.e. both copies are brought in independently). GDB did not stop there but I can see we have the same symbol in libCore.so and libTree.so (both are weak). These failures might have something to do with the 3 remaining failing tests in cling standalone (@Axel-Naumann is looking into them). Thanks for investigating!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-703223267:1065,test,tests,1065,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-703223267,1,['test'],['tests']
Testability,"> ```; > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE; > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE; > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```; > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""); > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests); > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests); > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""); > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14210#issuecomment-1852160718:414,test,test,414,https://root.cern,https://github.com/root-project/root/issues/14210#issuecomment-1852160718,11,['test'],"['test', 'tests']"
Testability,"> `clingtest` exports many more symbols from `libCling`, for testing purposes (see the code in `interpreter/CMakeLists.txt`). This means our (patched) LLVM and Clang will interfere with other LLVM installations used by dependent libraries. IIRC this can make tests fail!. We will build that version of ROOT only to run clingtest, right? We still will test ROOT the regular way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957#issuecomment-2116926053:61,test,testing,61,https://root.cern,https://github.com/root-project/root/issues/6957#issuecomment-2116926053,3,['test'],"['test', 'testing', 'tests']"
Testability,"> a meta-question might be whether we should veto these tutorials on all but the fastest of our testing platforms, i don't know how many more multi-thread multi-minute tutorials we can add before nightlies and incrementals become noticeably slower. If you label them `longtest`, they are skipped on a lot of machines. The `multicore` e.g. will run them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667198665:96,test,testing,96,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667198665,1,['test'],['testing']
Testability,"> add a ""show timestamp"" option flag to RLogManager, on by default. . It will need to be off by default in roottest (to avoid log file comparison headaches).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6931#issuecomment-740838762:126,log,log,126,https://root.cern,https://github.com/root-project/root/issues/6931#issuecomment-740838762,1,['log'],['log']
Testability,> also we expect this solves cxxmodules ABI incompatibility failing tests. Why would this 'solve' ABI incompatibility? (Wouldn't avoiding a search only 'reduce' the risk the case where a real incompatibility (that needs addressed) is stumbled upon?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1821#issuecomment-378956389:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/1821#issuecomment-378956389,1,['test'],['tests']
Testability,"> although the (pre-existing) behavior seems to be broken/unexpected in case of a tree in directory ""root"" . (Unfortunately) this is not surprising, I bet we never tested that case (but rather mostly tested the TChain case)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10186#issuecomment-1075404663:164,test,tested,164,https://root.cern,https://github.com/root-project/root/pull/10186#issuecomment-1075404663,2,['test'],['tested']
Testability,"> always defining R__LESS_INCLUDES (or, better, removing all the code in the #else parts). By the way, do you know why this define exists? Is there some compiler/platform where compilation breaks if it's not defined?. Per the commit log:; ```; When -Ddev=ON specified, R__LESS_INCLUDES is defined; It will be used to reduce includes which are exposed to the public.; While such changes can have side-effects on user code,; option is off by default.; ```. i.e. the changes of which header files are included where is a code-wise backward incompatible change (that has only light to zero actual benefit to the user), so we want to thread carefully in introducing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2174030643:233,log,log,233,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2174030643,1,['log'],['log']
Testability,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends; - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD; - Remove fgRwLock; - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co); - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code?. [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-610506869:593,test,test,593,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-610506869,7,"['Test', 'test']","['Test', 'test']"
Testability,"> apparently this revealed issues in a couple of tests [here](https://github.com/root-project/root/pull/13460#issuecomment-1679272277). Yes indeed, asking @bellenot for help, I assume it has to do with modules vs rootmap files: The failure in `histhistdrawv7testUnit` looks really scary, `Seq/NoROOTExtension.Read/0` could potentially be solved by renaming the class. I guess it's the first time that these (C++17) tests run on Windows in such fixed environment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1680053538:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1680053538,2,['test'],['tests']
Testability,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?. Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168769018:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168769018,1,['test'],['tests']
Testability,"> are the failed test related to my patch?. No, sorry about that - please ignore them. > Is there something else you want me to change, otherwise could you accept it?. I'd like @pcanal to have the final say here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-599422327:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-599422327,1,['test'],['test']
Testability,> but Mac 12 and Mac 13 are still not happy!. Tests on macs failing due to network problems downloading ROOT files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1961086920:46,Test,Tests,46,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1961086920,1,['Test'],['Tests']
Testability,"> by gSystem->Load. Calling dlopen and dlsim do the same job. Note that the 2 are not completely functionally equivalent. TSystem::Load does 2 additional things:. (a) Load any dependent libraries (as provided by a rootmap files); (b) Check that the version of ROOT used to build the library is the same as the version of ROOT running. (a) is necessary in the case the user is not using explicit linking for their own library. (b) is 'nice' to have to avoid having to debug 'bad' builds. If neither of those features are needed, it ought to be explain why in at least the commit log. Also, it seems that the code may have changed but the commit log has not yet been changed (as the code does not use dlopen or dlsym, at least not directly but seem to use functions from DynamicLibraryManager). > Segfaults in runtime_cxxmodules nightly was caused by recursive "".x"" handling by gSystem->Load. Why is this seen only in the cxxmodule case? . Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394462603:578,log,log,578,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394462603,2,['log'],['log']
Testability,> cannot seem to log on the ubuntu node. Which one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1367141544:17,log,log,17,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1367141544,1,['log'],['log']
Testability,> cmake -GNinja -DCMAKE_BUILD_TYPE=Debug '-DCMAKE_IGNORE_PATH=/usr/local/lib;/usr/local/include;/usr/local/bin' -DCMAKE_INSTALL_PREFIX=/scratch/greenc/test-products/root/v6_26_04b/Linux64bit+3.10-2.17-c14-p3912-debug -Dall:BOOL=OFF -Dasan:BOOL=OFF -Dasserts:BOOL=ON -Dccache:BOOL=OFF -Dclingtest:BOOL=OFF -Dcoverage:BOOL=OFF -Dcxxmodules:BOOL=OFF -Ddev:BOOL=OFF -Ddistcc:BOOL=OFF -Dexceptions:BOOL=ON -Dfail-on-missing:BOOL=ON -Dfortran:BOOL=OFF -Dgminimal:BOOL=ON -Dgnuinstall:BOOL=OFF -Dmemory_termination:BOOL=OFF -Dmemstat:BOOL=OFF -Dminimal:BOOL=OFF -Drootbench:BOOL=OFF -Droottest:BOOL=OFF -Drpath:BOOL=OFF -Druntime_cxxmodules:BOOL=ON -Dshared:BOOL=ON -Dsoversion:BOOL=ON -Dtest_distrd_pyspark:BOOL=OFF -Dtest_distrd_dask:BOOL=OFF -Dtesting:BOOL=OFF -DLLVM_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS:BOOL=ON -Dbuiltin_afterimage:BOOL=OFF -Dbuiltin_cfitsio:BOOL=OFF -Dbuiltin_clang:BOOL=ON -Dbuiltin_cling:BOOL=ON -Dbuiltin_cppzmq:BOOL=OFF -Dbuiltin_davix:BOOL=OFF -Dbuiltin_fftw3:BOOL=OFF -Dbuiltin_freetype:BOOL=OFF -Dbuiltin_ftgl:BOOL=OFF -Dbuiltin_gl2ps:BOOL=OFF -Dbuiltin_glew:BOOL=OFF -Dbuiltin_gsl:BOOL=OFF -Dbuiltin_llvm:BOOL=ON -Dbuiltin_lz4:BOOL=OFF -Dbuiltin_lzma:BOOL=OFF -Dbuiltin_nlohmannjson:BOOL=ON -Dbuiltin_openssl:BOOL=OFF -Dbuiltin_openui5:BOOL=ON -Dbuiltin_pcre:BOOL=OFF -Dbuiltin_tbb:BOOL=OFF -Dbuiltin_unuran:BOOL=OFF -Dbuiltin_vc:BOOL=OFF -Dbuiltin_vdt:BOOL=OFF -Dbuiltin_veccore:BOOL=OFF -Dbuiltin_xrootd:BOOL=OFF -Dbuiltin_xxhash:BOOL=OFF -Dbuiltin_zeromq:BOOL=OFF -Dbuiltin_zlib:BOOL=OFF -Dbuiltin_zstd:BOOL=OFF -DXROOTD_ROOT_DIR=/products/xrootd/v5_4_3a/Linux64bit+3.10-2.17-c14-p3912-debug -Dalien:BOOL=OFF -Darrow:BOOL=OFF -Dasimage:BOOL=ON -Dcefweb:BOOL=OFF -Dclad:BOOL=ON -Dcuda:BOOL=OFF -Dcudnn:BOOL=OFF -Ddaos:BOOL=OFF -Ddataframe:BOOL=ON -Ddavix:BOOL=OFF -Ddcache:BOOL=OFF -Dfcgi:BOOL=OFF -Dfftw3:BOOL=ON -Dfitsio:BOOL=OFF -Dgdml:BOOL=ON -Dgfal:BOOL=OFF -Dgsl_shared:BOOL=ON -Dgviz:BOOL=OFF -Dhttp:BOOL=ON -Dimt:BOOL=ON -Djemalloc:BOOL=OFF -Dmathmore:BOOL=ON -D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1407366966:151,test,test-products,151,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1407366966,1,['test'],['test-products']
Testability,> cms tests passed for production arch (el8_amd64_gcc12) and powerpc. Thanks! And I understand correctly it solves some problems that were there on ppc64le before?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1867511207:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1867511207,1,['test'],['tests']
Testability,> cmssw PR tests look good : [cms-sw#172 (comment)](https://github.com/cms-sw/root/pull/172#issuecomment-1217329810). Thanks a lot @smuzaffar!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1217589201:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1217589201,1,['test'],['tests']
Testability,> cmssw [tests](https://github.com/cms-sw/root/pull/207#issuecomment-2263816398) look good. Thanks Shahzad!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16150#issuecomment-2263887941:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/16150#issuecomment-2263887941,1,['test'],['tests']
Testability,"> cmssw tests also failed due to missing gtest requirement. I guess we can use the builtin gtest?. The cmake cited above only gets called with testing=ON, so this is broken even with builtin gtest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396357797:8,test,tests,8,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396357797,2,['test'],"['testing', 'tests']"
Testability,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863174237:117,test,test,117,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237,2,['test'],['test']
Testability,"> does this warrant a test?. Yes definitely, I already modified the available tests to check the filelist. I can also add a new one to check a filelist with more than one file in it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8637#issuecomment-877254446:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/8637#issuecomment-877254446,2,['test'],"['test', 'tests']"
Testability,"> enabling -Werror everywhere except llvm-facing parts. We don't want `-Werror` by default because there will always be weird platforms that we cannot test, and future compilers may enable other warnings but we don't want to prevent them from building an older release of ROOT. FWIW LLVM sources should explicitly opt out of `-Werror` in our setup. The only place this doesn't work are some ROOT files including Clang headers - I don't have a good idea what to do about that case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173288191:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173288191,1,['test'],['test']
Testability,"> for CMS tests, build directory is not available at runtime. . Aren't the header files available? Aren't you setting ROOT_INCLUDE_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139560146:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139560146,1,['test'],['tests']
Testability,"> has to do with these issues?. Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design?. It is testing a ""natural"" control flow for a REPL:; ```; First Load a bunch of stuff that, in this case, include a forward declaration. Second do:; if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet); load the definition for the entity.; ```; (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: ; https://sft.its.cern.ch/jira/browse/ROOT-7462; and detailed analyis:; https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README; ; So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1756311089:180,test,test,180,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1756311089,7,['test'],"['test', 'testing']"
Testability,> here is the log file which came from running valgrind. I don't find this; could you attach it at https://github.com/root-project/root/issues/12370 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1465680668:14,log,log,14,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1465680668,1,['log'],['log']
Testability,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). ; Binary compare shows no difference.; Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-525010216:127,test,testing,127,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-525010216,2,['test'],['testing']
Testability,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l; 10165751; vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l; 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1625422950:58,log,log,58,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1625422950,3,['log'],['log']
Testability,"> https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84694/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/. This should be solved now, waiting for the next builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5643#issuecomment-638749180:81,test,testReport,81,https://root.cern,https://github.com/root-project/root/pull/5643#issuecomment-638749180,1,['test'],['testReport']
Testability,> https://www.qt.io/download-open-source and when installing unselect all except for qtcreator. There are also offline installers that don't require login. I have done the procedure mentioned here. It create a Qt folder in my home directory with QtCreator inside. But `qhelpgenerator` does not show... seems not really straightforward,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-902720563:149,log,login,149,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902720563,1,['log'],['login']
Testability,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not?. This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it?. I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759717852:177,test,test,177,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759717852,1,['test'],['test']
Testability,"> if I run with ctest --output-on-failure -R roottest-root-dataframe then tests pass. See my comment in the other issue: I did not manage to reproduce the problem outside of ctest and without running multiple tests concurrently -- it also seems that one of the tests ""has"" to be roottest-root-dataframe-test_snapshot_manytasks. > I guess some test dependencies may be missing?. why would a missing dependency make the test _pass_ if it's run alone and fail if it's run together with others?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823937084:74,test,tests,74,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823937084,5,['test'],"['test', 'tests']"
Testability,"> if it is easy to backport this to root 6.26 then I can test it. Hi @smuzaffar, we will not be backporting to ROOT 6.26 which is based on LLVM 9.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940719689:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940719689,1,['test'],['test']
Testability,> if it is easy to backport this to root 6.26 then I can test it. How difficult is to move to 6.30?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940748828:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940748828,1,['test'],['test']
Testability,> if some platforms don't follow the ABI. The Itanium ABI? Windows doesn't implement that. And in principle we shouldn't break support for other ABIs either. So this test is needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-829001991:166,test,test,166,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-829001991,1,['test'],['test']
Testability,> in gdb make sure to do catch throw before running. indeed :). @smuzaffar I want to rebuild ROOT in debug mode (to eventually test the fixes). Which commit and repository was used in that build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815268064:127,test,test,127,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815268064,1,['test'],['test']
Testability,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RDFHelpers.hxx>; #include <memory>; #include <TTreeReader.h>; #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {; public:; using Result_t = int;. private:; std::shared_ptr<Result_t> fValue;; int &fTestVal;. public:; static constexpr int fgRefVal = 42;; SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}; SimpleActionHelper(SimpleActionHelper &&) = default;; SimpleActionHelper(const SimpleActionHelper &) = delete;; std::shared_ptr<int> GetResultPtr() const { return fValue; }; void Initialize() {}; void InitTask(TTreeReader *, unsigned int) {}; template <typename... ColumnTypes>; void Exec(unsigned int, ColumnTypes...); {; }; void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }; std::string GetActionName() { return ""SimpleAction""; }; };. int main(); {; auto exceptionThrower = [](ULong64_t ievt) {; if (ievt == 4) {; throw std::invalid_argument(""Time to throw."");; }; return int(0);; };. int testVal = 123;; std::cout << ""Testing value "" << testVal << std::endl;; SimpleActionHelper helper(testVal);; auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});; auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{; valRes.GetValue();; } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;; }; ```; Then. ```; ./repro_628.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 123; ```; ```; ./repro_danilo_patch.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 42; ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707964693:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707964693,13,"['Test', 'test']","['Testing', 'test', 'testVal']"
Testability,"> is RDataFrame['s test] ready for it?. I have opened PRs that fix the test for master, 6.22 and 6.20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6258#issuecomment-691173178:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/6258#issuecomment-691173178,2,['test'],['test']
Testability,"> is now used instead (see also adc78fa). Avoid using commit hash in commit log (*) (especially since we use rebase) as they are not stable, in particular if/when the commit is back ported. At the very least, I recommend adding (or using instead) the title of the commit in question.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9478#issuecomment-998909863:76,log,log,76,https://root.cern,https://github.com/root-project/root/pull/9478#issuecomment-998909863,1,['log'],['log']
Testability,> jalopezg-git. Thanks for the review. I will address the issues and add test cases in `interpreter/cling/test/` .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1397202437:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1397202437,2,['test'],['test']
Testability,"> let see what if te test will pass. Yes. ; Typically when Jenkins build fails, I have to add new commit to let run builds again - otherwise after `phsft-bot build` message builds aborted very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4151#issuecomment-524287296:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/4151#issuecomment-524287296,1,['test'],['test']
Testability,> let's preload TMVA/TreePlayer/Graf to fix all failing tests that are related to this feature/bug with modules enabled.; > ... This commit can be dropped if we solve on of those problems:. Obviously the removal of this preload is a necessary precursor to making the use of module the default. Do we have a mechanism to 'not' forget to remove it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697#issuecomment-370562114:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/1697#issuecomment-370562114,1,['test'],['tests']
Testability,"> macro fails if `${ROOTSYS}/test` is not in the include path.. games.C seems to do that already in my case, see below:; ```. /opt/root_bld/tutorials/gui $ root -l; root [0] .include; root [1] Int_t st1 = gSystem->Load(""$(ROOTSYS)/test/Aclock"");; root [2] st1; (int) 0; root [3] Int_t st2 = gSystem->Load(""$(ROOTSYS)/test/Hello"");; root [4] Int_t st3 = gSystem->Load(""$(ROOTSYS)/test/Tetris"");; root [5] st2; (int) 0; root [6] st3; (int) 0; root [7] .include; (...); /opt/root_bld/test/; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778230588:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778230588,5,['test'],['test']
Testability,"> now with that config it tries to compile two files from the prev commit which are including tbb/tbb_config.h. That is what happens if I only test CMake configuration, but not the build itself. I'm working on a proper fix, hopefully I can find a header that can be included in all versions of TBB (otherwise we have a chicken-and-egg problem which header to include for finding out the version...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8239#issuecomment-849364317:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/8239#issuecomment-849364317,1,['test'],['test']
Testability,"> ok fair enough. This looks good then. Did you also test going through the `TMethodCall` interfaces?. I think `TMethodCall` uses the TClingCallFunc interface, and if I am not mistaken, it was addressed by this PR: https://github.com/root-project/root/pull/9244.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1511954479:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1511954479,1,['test'],['test']
Testability,> only on Mac ? ok I will check TSVG. The tests are only enabled on Mac,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328299908:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328299908,1,['test'],['tests']
Testability,"> please also add an example with the new signature to the docs of `Sum`, maybe actually using `PtEtaPhiMVector`s since it's 1. really cool and 2. gives users an idea of the possibilities smile. Updated the documentation.; Rearranged the commits to separate the code and test changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903#issuecomment-907023558:271,test,test,271,https://root.cern,https://github.com/root-project/root/pull/8903#issuecomment-907023558,1,['test'],['test']
Testability,> projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker. The Error message are intentional and it would be an improvement to add a check that they are present.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-640717480:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-640717480,1,['test'],['test']
Testability,"> projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential. ```; C:\build\workspace\root-pullrequests-build\root\test\unit_testing_support\ROOTUnitTestSupport.cxx(70): error: Failed; Received unexpected diagnostic of severity 2000 at 'TStreamerInfo::CompareContent' reading 'The following data member of; the on-file layout version 1 of class 'RooSTLRefCountList<RooAbsArg>' differs from ; the in-memory layout version 1:; vector<unsigned long> _refCount; //; vs; vector<unsigned int> _refCount; //'.; ```. The problem stems wrong:; ```; std::vector<std::size_t> _refCount;; ```; where ROOT does not (yet) make the std:*_t type opaque and thus sees different types on different platforms (and `long` is stored with 64 bits, `int` is stored with 32 bits, so here the 2 schema are indeed different). . Using `unsigned long` instead of `std::size_t` should solve the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9374#issuecomment-985770700:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/9374#issuecomment-985770700,2,['test'],['test']
Testability,> projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_datasetspec. This one has been addressed by https://github.com/root-project/root/pull/12025.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12027#issuecomment-1383608515:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/12027#issuecomment-1383608515,1,['test'],['test']
Testability,"> rebase on current master. Sure. > get a list of exact upstream commit hashes that we can apply to https://github.com/root-project/llvm-project/. Will do. Must be noted, some commits are not cherry-picked cleanly. > get a CMSSW test on PowerPC64 (the above test is for x86!). Can you elaborate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1849648331:229,test,test,229,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1849648331,2,['test'],['test']
Testability,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1412394952:514,log,logic,514,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1412394952,1,['log'],['logic']
Testability,"> reuse https://root.cern.ch/doc/master/namespacecling.html#func-members in `to_string`?. To expand a bit on what @Axel-Naumann said:; If you call a C++ function on a dead pointer, gdb will get a signal while executing, and add the stack trace of the call on the top of the current stack trace. It might even start calling another function when trying to pretty-print another object, so the stack trace will get longer.; Instead, if you re-implement member lookup in gdb, gdb will either tell you that it cannot access the memory at the given address or it throws a python exception. In both cases, pretty-printing stops without cluttering the stack trace. @Axel-Naumann:; - Is there a way to have a debug build? I would like to see the test succeed.; - I will try to disable it during release builds before proceeding.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633#issuecomment-479916770:737,test,test,737,https://root.cern,https://github.com/root-project/root/pull/3633#issuecomment-479916770,1,['test'],['test']
Testability,"> run it within ctest. I get the following result when running ctest clingtest-check-cling, but I see no sign that the test under question is being run?. [clingtest.txt](https://github.com/root-project/root/files/14982001/clingtest.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2057328854:119,test,test,119,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2057328854,1,['test'],['test']
Testability,> should we move that to roottest and remove it from ROOT?. I'd rather; - move the tests needing `rmkdepend` from Makefiles to CMake; - then remove `rmkdepend`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2683#issuecomment-424764666:83,test,tests,83,https://root.cern,https://github.com/root-project/root/pull/2683#issuecomment-424764666,1,['test'],['tests']
Testability,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15071#issuecomment-2024991815:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/15071#issuecomment-2024991815,2,['test'],['test']
Testability,> so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled?. I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-619909953:259,test,test,259,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-619909953,1,['test'],['test']
Testability,> so it's only wasting CPU cycles. The idea (of having the stress test run both compiled and interpreted) was to ensure that the code worked in both environment (i.e. that the interpreter is working for the syntax used here) **and** to monitor the performance differential (arguably the later has not been followed through).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656417348:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656417348,1,['test'],['test']
Testability,"> sure @vgvassilev, do you mean a example file in the repo or just an example in the PR message?. It'd be best to have an example test with a fixture. Maybe convert an already existing test to a fixture if appropriate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8722#issuecomment-885097815:130,test,test,130,https://root.cern,https://github.com/root-project/root/pull/8722#issuecomment-885097815,2,['test'],['test']
Testability,"> thanks for the backport, I have started CMSSW tests here https://github.com/cms-sw/root/pull/195. Hi @smuzaffar , thanks for your promptness! We discovered there was a small wrinkle preventing proper compilation in 6.30, I have uploaded an updated commit which should work properly literally a few minutes ago. ~~I just wanted to make sure that the PR on CMSSW takes this latest version of the commits~~. EDIT: I checked on the linked CMSSW PR and it seems the right version of the commit was picked, so should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1893863363:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1893863363,1,['test'],['tests']
Testability,"> thanks, I added the gGL check also. But checking fGLDevice is also potentially useful, right?. Well I am not sure. If you have a use case for that did you test it ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8190#issuecomment-844092139:157,test,test,157,https://root.cern,https://github.com/root-project/root/pull/8190#issuecomment-844092139,1,['test'],['test']
Testability,> that we only include the missing headers . I do not see (from just the patch) this behavior. I see inclusion of all (and only) the input headers. I do not see the 'gather the set of missing header' part. > Some tests are failing with modules such with redefinition errors. Why is reincluding the same header twice leading to errors? Is there a missing code guard somewhere?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1335#issuecomment-344609847:213,test,tests,213,https://root.cern,https://github.com/root-project/root/pull/1335#issuecomment-344609847,1,['test'],['tests']
Testability,"> the 'size' variable is greater than 'maxsize'. . In principle, it is wrong set of arguments. `maxisze` is intend to be allocated memory size. ; But now I add check for such situation. > The old error-prone implementation worked at all my tests :). It was by chance. With old code if one call `SetNull(0)` and then `SetInt(0,0)` was causing segmentation violation. If I understand correct, all other tests fine for you.; If yes, I will merge changes in master. Do you need these fixes in older branches - like 6.22 or 6.20?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-774525353:240,test,tests,240,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774525353,2,['test'],['tests']
Testability,"> the experiments are not trying to parse the output of `.class` / `.Class` in any case. Agreed, I'd expect only our tests to notice format changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10350#issuecomment-1108417298:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/10350#issuecomment-1108417298,1,['test'],['tests']
Testability,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:; ```; diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h; index 2c94343377..c68eec6bbc 100644; --- a/core/meta/inc/TClass.h; +++ b/core/meta/inc/TClass.h; @@ -429,7 +429,7 @@ public:; ROOT::DesFunc_t GetDestructor() const;; ROOT::DelArrFunc_t GetDeleteArray() const;; ClassInfo_t *GetClassInfo() const {; - if (fCanLoadClassInfo && !TestBit(kLoading)); + if (fCanLoadClassInfo); LoadClassInfo();; return fClassInfo;; }; diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx; index 06ef48c017..6e0475a4c1 100644; --- a/core/meta/src/TClass.cxx; +++ b/core/meta/src/TClass.cxx; @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const; ; // Return if another thread already loaded the info; // while we were waiting for the lock; - if (!fCanLoadClassInfo); + if (!fCanLoadClassInfo || TestBit(kLoading)); return;; ; bool autoParse = !gInterpreter->IsAutoParsingSuspended();; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090#issuecomment-2027369620:152,Test,TestBit,152,https://root.cern,https://github.com/root-project/root/issues/15090#issuecomment-2027369620,3,['Test'],['TestBit']
Testability,"> the remaining tests that still fail are [...] which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. Yes, see https://github.com/root-project/root/issues/12455 on Axel and Vassil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1554695866:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1554695866,1,['test'],['tests']
Testability,> those should be ignored in the description... We really want you to install numba if you want to test ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436#issuecomment-993508758:99,test,test,99,https://root.cern,https://github.com/root-project/root/issues/9436#issuecomment-993508758,1,['test'],['test']
Testability,"> turning by default a feature which messes up with the lookup tables. How does it mess things up?. > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532585952:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532585952,2,['test'],['tests']
Testability,"> value->GetAsDouble(); > > Which is: -1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erf2 (18 ms); > > [ RUN ] CladDerivator.erfc1; > > [ OK ] CladDerivator.erfc1 (10 ms); > > [ RUN ] CladDerivator.erfc2; > > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > > 0.83021499484118955; > > value->GetAsDouble(); > > Which is: 1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erfc2 (13 ms); > > ```; > ; > @arora-vidushi, here is some more debug output from the windows machine:; > ; > ```; > C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; > Running main() from C:\Users\vvdebug\source\repos\root\out\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; > Note: Google Test filter = CladDerivator.logx6; > [==========] Running 1 test from 1 test suite.; > [----------] Global test environment set-up.; > [----------] 1 test from CladDerivator; > [ RUN ] CladDerivator.logx6; > (const char *) ""double l6_d2arg0(double x) {; > double _d_x = 1;; > double _d__d_x = 0;; > double _d_x0 = 1;; > clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > _t0 = Log10_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; > ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; > ValueAndPushforward<double, double> _t00 = _t0.value;; > return _d__t0.pushforward;; > }; > ""; > (clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > (*)(double, double, double, double)) Function @0xf1a02d0; > clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > Log10_pushforward_pushforward(double x, double d_x, double _d_x, double _d_d_x) {; > ValueAndPushforward<double, double> _t0 = clad::custom_derivatives::TMath::Log10_pushforward(x, _d_x);; > clad:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1402636544:2247,test,test,2247,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1402636544,1,['test'],['test']
Testability,> we need a unix platform with clang10. On my machine I test with `-Dcxxmodules=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang`. But I have no idea if Jenkins has node with appropriate configuration,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618848281:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618848281,1,['test'],['test']
Testability,"> we only need to make sure that we never have statements spanning more than one line. we control the generation of that code, so that should not happen/tests will break noisily and we can fix them if it happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328#issuecomment-977875623:153,test,tests,153,https://root.cern,https://github.com/root-project/root/pull/9328#issuecomment-977875623,1,['test'],['tests']
Testability,"> well unless we really still have:; > ; > > which creates as TTimer that is somehow lost during the TObjLink creation.; > ; > do we?. Well, that's what I suspect based on the Helgrind log, because Printf creates a TThreadTimer and then it's racing with NewLink:. ![image](https://user-images.githubusercontent.com/10653970/124826897-abb70c80-df75-11eb-9811-3696dbe32965.png). (Side note: the NewLink function appears also in several places in valgrind-root.supp, so that a related memory leak might be hidden.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875923579:185,log,log,185,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875923579,1,['log'],['log']
Testability,> what I want to hear from you is whether the change in log channel name is okay for you:. Fine with me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-738846611:56,log,log,56,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-738846611,1,['log'],['log']
Testability,"> what I want to hear from you is whether the change in log channel name is okay for you:. Yes, one can change names as you propose. Up to now they was used for error messages, where source of problem can be seen anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-738841251:56,log,log,56,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-738841251,1,['log'],['log']
Testability,> what tests would you like to see?. At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6960#issuecomment-747600325:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/6960#issuecomment-747600325,2,['test'],['tests']
Testability,"> will try to report the repr issue separately. Thanks for investing your time here, much appreciated! I still want to debug this test failure here, so please leave this open independently of the progress you're making on the ATLAS side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1547262445:130,test,test,130,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1547262445,1,['test'],['test']
Testability,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713606991:320,test,test,320,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713606991,2,['test'],['test']
Testability,"> 🤔 Just to understand, is it a known real leak or a false positive?. It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1814808988:1051,test,tests,1051,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1814808988,2,['test'],['tests']
Testability,">, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py') at remote 0x7faec0f08c10>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), co=0x7faec0dc55b0, tstate=0xbea650) at Python/pythonrun.c:1221; #17 run_mod (mod=<optimized out>, filename=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:30979,test,test,30979,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['test'],['test']
Testability,">, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py') at remote 0x7faec0f08c10>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), start=0x101, filename='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', fp=0xc827e0) at Python/pythonru",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:35558,test,test,35558,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['test'],['test']
Testability,">0.004), x,y=( 4.7875, 4.5633)	ref: y= 4.673. [Nearest point from ref: j=37	x,y=( 4.7875, 4.673) ]	range=12.699; RooCurve::isIdentical[ 38] Y tolerance exceeded ( 0.0092771>0.004), x,y=( 4.83, 5.1366)	ref: y= 5.2544. [Nearest point from ref: j=38	x,y=( 4.83, 5.2544) ]	range=12.699; RooCurve::isIdentical[ 39] Y tolerance exceeded ( 0.010568>0.004), x,y=( 4.915, 6.3583)	ref: y= 6.4925. [Nearest point from ref: j=39	x,y=( 4.915, 6.4925) ]	range=12.699; RooCurve::isIdentical[ 40] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooCurve::isIdentical[ 41] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooUnitTest ERROR: comparison of object RooCurve::nll_Norm[sigma_g2] fails comparison with counterpart in reference RooPlot rf605_plot2; Test 41 : Profile Likelihood operator............................FAILED; Test 42 : NLL error handling.....................................OK; Test 43 : Fit Result functionality...............................OK; Test 44 : Chi^2 fit to X-Y dataset...............................OK; Test 45 : Efficiency operator p.d.f. 1D..........................OK; Test 46 : Efficiency operator p.d.f. 2D..........................OK; Test 47 : Efficiency product operator p.d.f......................OK; Test 48 : Amplitude sum operator p.d.f...........................OK; Test 49 : Linear morph operator p.d.f............................OK; Test 50 : Histogram based p.d.f.s................................OK; Test 51 : Kernel estimation p.d.f.s..............................OK; Test 52 : B Physics p.d.f.s......................................OK; Test 53 : Automated MC studies...................................OK; Test 54 : MC Study with chi^2 calculator.........................OK; Test 55 : MC Study with param rand. and Z calc...................OK; Test 56 : MC Studies with aux. obs. constrain",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:11117,Test,Test,11117,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['Test'],['Test']
Testability,">; > and XROOTD seems to have built successfully, but there seems to be some other errors. The configure step said that the ROOT version is 6-27-01. [build_out.log](https://github.com/root-project/root/files/8626646/build.log) [build_err.log](https://github.com/root-project/root/files/8626647/build_err.log). @eguiraud seems similar to https://root-forum.cern.ch/t/error-for-installing-root-source-in-ubuntu-22-04/49803/21",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518#issuecomment-1117901009:160,log,log,160,https://root.cern,https://github.com/root-project/root/issues/10518#issuecomment-1117901009,4,['log'],['log']
Testability,">> Also it is just contrary to TPad::Add(). > Not enough reason for me to make a new public method just to provide some vague simmetry. It is. One creates canvas, store image, remove and delete temporary object, create next image or let canvas running.; We did not have such interface up to now - therefore we did not provide such demos. Now it can be possible. >> TPad::AddFirst is not used by this PR, but can appear later. > Again from this description everything sounds internal to ROOT only and not something the user should care about. . No, it can be very well used in tutorials. Manipulating primitives order was not easy before. With such few methods it will be easy. . > Fine, not too big of an issue I guess, still Register or Adopt sound better but that is probably just my own opinion. I prefer to stay in `ROOT6`/`TList` logic and naming used there. `TPad` is just list of primitives and can be considered so in tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162878879:835,log,logic,835,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162878879,1,['log'],['logic']
Testability,">It does not work if I specify sources directly in the ROOT_LINKER_LIBRARY.; Seems to be, ROOT compiler options are not applied for '*.cpp' files. That's odd. Ok, let's keep the object libraries then. If this PR is already in a satisfactory state for you, then I will test locally and once I'm done I will rebase and merge. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365923832:268,test,test,268,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365923832,1,['test'],['test']
Testability,"?? () from /lib/x86_64-linux-gnu/libc.so.6; [229504:internal-dpl-aod-reader]: #2 0x00007fe1969d55bc in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2120; [229504:internal-dpl-aod-reader]: #3 TUnixSystem::StackTrace (this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2411; [229504:internal-dpl-aod-reader]: #4 0x00007fe1968ab27a in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=0x3ab1bb0 ""fExtraBasket == nullptr && \""fExtraBasket should have been set to nullptr by GetFreshBasket\"" violated at line 1523 of `/mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-""...) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/base/src/TErrorDefaultHandler.cxx:174; [229504:internal-dpl-aod-reader]: #5 0x00007fe196962149 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fe198af8752 """", fmt=0x7fff2c9644d0 ""\021\001"", ap=0x7fff2c9644c0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/ubuntu2004_x86-64/GCC-Toolchain/v10.2.0-alice2-1/include/c++/10.2.0/bits/basic_string.h:186; [229504:internal-dpl-aod-reader]: #6 0x00007fe196962b68 in Fatal (location=location; [229504:internal-dpl-aod-reader]: entry=0x7fe198af8752 """", fmt=<optimized out>) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/foundation/src/TError.cxx:249; [229504:internal-dpl-aod-reader]: #7 0x00007fe198a575a2 in TBranch::GetBulkEntries (this=0x15b3670, entr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-913117485:1209,sandbox,sandbox,1209,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-913117485,2,['sandbox'],['sandbox']
Testability,?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5860-ROOT-performance-centos7-multicore-default&date=2020-06-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df102_NanoAODDimuonAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df102_NanoAODDimuonAnalysis/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); - [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/); - [projectroot.test.test_stressroofit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressroofit/); - [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressIOPlugins_xroot/); - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860#issuecomment-643211031:1295,test,testReport,1295,https://root.cern,https://github.com/root-project/root/pull/5860#issuecomment-643211031,13,['test'],"['test', 'testReport']"
Testability,"@ namespace cling {; // Enable incremental processing, which prevents the preprocessor destroying; // the lexer on EOF token.; PP.enableIncrementalProcessing();; -; - m_LookupHelper.reset(new LookupHelper(new Parser(PP, SemaRef,; - /*SkipFunctionBodies*/false,; - /*isTemp*/true), this));; + Parser* TempParser = new Parser(PP, SemaRef,/*SkipFunctionBodies*/false,/*isTemp*/true);; + TempParser->Initialize();; + m_LookupHelper.reset(new LookupHelper(TempParser, this));; if (!m_LookupHelper); return;; ; diff --git a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; index f3d7ec83d3..bbb2c21268 100644; --- a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; @@ -452,10 +452,11 @@ Parser::~Parser() {; ///; void Parser::Initialize() {; // Create the translation unit scope. Install it as the current scope.; + if (!IsTemporary) {; assert(getCurScope() == nullptr && ""A scope is already active?"");; EnterScope(Scope::DeclScope);; Actions.ActOnTranslationUnitScope(getCurScope());; -; + }; // Initialization for Objective-C context sensitive keywords recognition.; // Referenced in Parser::ParseObjCTypeQualifierList.; if (getLangOpts().ObjC) {; @@ -535,10 +536,12 @@ void Parser::Initialize() {; Ident_module = PP.getIdentifierInfo(""module"");; }; ; + if (!IsTemporary) {; Actions.Initialize();; ; // Prime the lexer look-ahead.; ConsumeToken();; + }; }; ; void Parser::LateTemplateParserCleanupCallback(void *P) {; ```. I think the JIT is really overwriting the stack:; ```; ==20514== Invalid read of size 1; ==20514== at 0x4500198: TUrl::SetUrl(char const*, bool) (TUrl.cxx:115); ==20514== by 0x44FFDD7: TUrl::TUrl(char const*, bool) (TUrl.cxx:78); ==20514== by 0x44D635F: TSystem::FindHelper(char const*, void*) (TSystem.cxx:760); ==20514== by 0x46853BF: TUnixSystem::AccessPathName(char const*, EAccessMode) (TUnixSystem.cxx:1532); ==20514== by 0x1BDF028F: ???; ==20514=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-980788230:1367,assert,assert,1367,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-980788230,1,['assert'],['assert']
Testability,"@; #include ""TBufferJSON.h""; #include ""TEnv.h""; ; +#include ""TObject.h""; +; #include <algorithm>; #include <regex>; ; @@ -42,15 +44,15 @@ namespace Experimental {; ; class RBrowserDataCleanup : public TObject {; ; - RBrowserData &fData;; + RBrowserData *fData{nullptr}; //!; ; public:; - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}; + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}; + RBrowserDataCleanup() {} // Needed by ClassDefInline; ; - void RecursiveRemove(TObject *obj) override; - {; - fData.RemoveFromCache(obj);; - }; + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }; +; + ClassDefInline(RBrowserDataCleanup, 1);; };; }; }; @@ -67,7 +69,7 @@ public:; ; RBrowserData::RBrowserData(); {; - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);; + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);; R__LOCKGUARD(gROOTMutex);; gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());; }. ```. And the test gives even more errors then before:. ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023; 1548: @@ -14,5 +14,29 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638467226:1289,test,test,1289,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638467226,1,['test'],['test']
Testability,"@AdvaitDhingra can you provide a complete reproducer? Here is what I get with your `CMakeLists.txt` alone:; ```; C:\Users\bellenot\rootdev\AdvaitDhingra>cmake .; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.17763.; -- The C compiler identification is MSVC 19.24.28319.0; -- The CXX compiler identification is MSVC 19.24.28319.0; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Error at C:/Users/bellenot/build/release/RootMacros.cmake:442 (message):; Cannot find header Event.h to generate dictionary G__Event for. Did you; forget to set the INCLUDE_DIRECTORIES property for the current directory?; Call Stack (most recent call first):; CMakeLists.txt:7 (ROOT_GENERATE_DICTIONARY). -- Configuring incomplete, errors occurred!; See also ""C:/Users/bellenot/rootdev/AdvaitDhingra/CMakeFiles/CMakeOutput.log"".; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982#issuecomment-825601966:1728,log,log,1728,https://root.cern,https://github.com/root-project/root/issues/7982#issuecomment-825601966,1,['log'],['log']
Testability,"@AdvaitDhingra you can also compile ROOT locally and test your changes, instructions are at https://root.cern/install/build_from_source/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-777632928:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-777632928,1,['test'],['test']
Testability,"@ArifAhmed1995 I think you need to focus on making your code compile as the very first thing, because if it doesn't compile we cannot merge it. As I mentioned above, please test both with VecCore+Vc enabled and disabled on your local system. Since you had pushed more changes, I wanted to check if the problems were sorted out, but I see that they are not. I was waiting for at least the compilation to work before adding extra comments, but I will add comments now in any case. Some comments may be repeated from what we have already discussed on mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-405236310:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-405236310,1,['test'],['test']
Testability,"@Axel-Naumann , I have started a PR test here https://github.com/cms-sw/root/pull/157 . It will take few hours before we have the results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8449#issuecomment-862514950:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/8449#issuecomment-862514950,1,['test'],['test']
Testability,"@Axel-Naumann , can you please re-start the tests. Due to Jenkins' upgrade the last run was aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5887#issuecomment-646485164:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/5887#issuecomment-646485164,1,['test'],['tests']
Testability,"@Axel-Naumann , for CMS tests, build directory is not available at runtime. Most of the times build and runtime jenkins jobs run on different machines. Also at build time cmssw external packages ( including `root`) are built on local disk and deployed on /cvmfs for runtime tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139460820:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139460820,2,['test'],['tests']
Testability,"@Axel-Naumann , looks like some latest development in v6.24 branch has fixed the hanging issue. I have tested https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc (without #7767) and this time cmssw build was successful. We get runtime errors now, see the details here https://github.com/cms-sw/cmsdist/pull/6777#issuecomment-811478743 . You can find the crash log https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-a7de73/13897/runTheMatrix-results/135.4_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log. With your changes in #7767 ( on top of https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc ) , things look in much better state. PR tests ( https://github.com/cms-sw/root/pull/153#issuecomment-811570082 ) show no build or run time errors. But we do see some comparison differences for our reconstruction code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-811653152:103,test,tested,103,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-811653152,4,"['log', 'test']","['log', 'tested', 'tests']"
Testability,"@Axel-Naumann , root v.6.24 branch is still broken for us. Testing root commit 0ae9f99 ( which is tip of v6.24 patches branch) generated multiple runtime errors [a] for us. @makortel @Dr15Jones is it something CMSSW related or root is causing this ?; Testing eda45838695204139e372d712b1d72c9d5370160 + https://github.com/cms-sw/root/pull/155/files looks good though [b] . Only difference is the addition commit https://github.com/root-project/root/commit/3480394c02a6335d271f95fcf160274811091155 , do you think 3480394c02a6335d271f95fcf160274811091155 might be causing these crashes?. [a] https://github.com/cms-sw/cmsdist/pull/6787#issuecomment-814302828; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-efd635/14020/addOnTests/pat1/cmsRun__data_cmsbld_jenkins_workspace_ib-run-pr-addon_CMSSW_11_3_ROOT624_X_2021-04-05-2300_src_PhysicsTools_PatAlgos_test_IntegrationTest_cfg.py.log. ```; cmsRun: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_11_3_ROOT624_X_2021-04-05-2300/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. ```. [b] https://github.com/cms-sw/root/pull/155#issuecomment-812869144",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814343554:59,Test,Testing,59,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814343554,5,"['Assert', 'Test', 'log', 'test']","['Assertion', 'Testing', 'log', 'tests']"
Testability,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13653#issuecomment-1750041376:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/13653#issuecomment-1750041376,1,['test'],['tests']
Testability,"@Axel-Naumann , v6.24 fix looks good for CMS . All tests passed https://github.com/cms-sw/root/pull/155#issuecomment-812869144",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-812888256:51,test,tests,51,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-812888256,1,['test'],['tests']
Testability,"@Axel-Naumann , which shell are you currently using, and **nproc** is a GNU core utility which is available default in every Linux distro and shell. If it's not running on your shell I assume you are using a non-Linux machine. ; In mac it's alternative is **sysctl -n hw.logicalcpu**, and in windows, it's **echo %NUMBER_OF_PROCESSORS%**",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5079#issuecomment-597554483:271,log,logicalcpu,271,https://root.cern,https://github.com/root-project/root/pull/5079#issuecomment-597554483,1,['log'],['logicalcpu']
Testability,"@Axel-Naumann , yes, for github actions, it makes sense to fail for every thing which should not happen either it is build or test failure.; My recommendation for not marking the job failed was for Jenkins type CI where a job failure should mean infrastructure issues which Jenkin's admins (or CI test developers) should look in to. Every other failure should be reported to the code developers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307#issuecomment-1543409404:126,test,test,126,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1543409404,2,['test'],['test']
Testability,"@Axel-Naumann . I implement most of your comments. There are two open questions.; 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. ; 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487#issuecomment-415785518:107,log,logic,107,https://root.cern,https://github.com/root-project/root/pull/2487#issuecomment-415785518,1,['log'],['logic']
Testability,"@Axel-Naumann . One can build ROOT with xrootd 5, by many tests are failing afterwards.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-825652269:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-825652269,1,['test'],['tests']
Testability,"@Axel-Naumann 10.14 has 11.3.1, 10.15 has 12.4, and 11 has 12.4 as well. . @vgvassilev Just get bump-root-6.24.00 from git@github.com:chenrui333/homebrew-core.git somehow, I would use the GitHub command line app `gh`, but you can use vanilla git instead if you wish. I've pushed a build that should have useful logs; 10.14 I'm building with runtime modules off, 10.15+ with runtime modules on. So we'll have one of each possible outcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-834487544:311,log,logs,311,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-834487544,1,['log'],['logs']
Testability,"@Axel-Naumann : I have rebuilt ROOT from scratch and attempted my above test case with; ```; LD_PRELOAD=/usr/lib64/libgandiva.so ./test; ```; which still gives me the same error:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; Perhaps preloading individual LLVM libraries works, but with gandiva it certainly doesn't.; So unfortunately this patch is insufficient to solve my problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-570193874:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-570193874,2,['test'],['test']
Testability,"@Axel-Naumann : I think this patch is correct in any case, since the symbols should be hidden.; Unfortunately, it is not enough to solve our problem. My test case from #4668 still yields:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; - The first line `LLVM SYMBOLS ARE EXPOSED....` is because the check in core/base/src/TROOT.cxx is not disabled, so this this is irrelevant. In fact, if your patch would work, this check should be removed.; - The second error `... inconsistency in registered....` however is the same problem we saw before, with the 2 LLVM instances clashing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-565367712:153,test,test,153,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-565367712,1,['test'],['test']
Testability,@Axel-Naumann ; Can you merge it before branching for 6.14; It passes root-test now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1927#issuecomment-384955997:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/1927#issuecomment-384955997,1,['test'],['test']
Testability,@Axel-Naumann ; Do you understand why it fails with many python tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2652#issuecomment-423443397:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/2652#issuecomment-423443397,1,['test'],['tests']
Testability,@Axel-Naumann ; I tested but calling IsLibraryLoaded from IsLoaded didn't work because they are both taking `R__LOCKGUARD(gInterpreterMutex)` and it fails root_aclic_misc_assertROOT7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2128#issuecomment-394353100:18,test,tested,18,https://root.cern,https://github.com/root-project/root/pull/2128#issuecomment-394353100,1,['test'],['tested']
Testability,"@Axel-Naumann ; I think you wanted to comment to #1824 ? Comments are anyway welcome, but I'm cherry-picking commits from other prs which fix failing tests to here to see if they actually fix on server with allmodules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-381993075:150,test,tests,150,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-381993075,1,['test'],['tests']
Testability,"@Axel-Naumann ; ```cmake; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6); # gcc 5 has a bug in that it fails to put its internal -lgcc into the right place when linking.; # We need it to check cpu flags in src/InitUtils.cxx; # Here, we add an explicit link instruction according to the workaround posted here:; # https://bugs.launchpad.net/ubuntu/+source/gcc-5/+bug/1568899; target_link_libraries(RooFitCore PRIVATE -lgcc_s -lgcc); endif(); ```; This is the code in `roofit/roofitcore/CMakeLists.txt` So the linker error is solved if we run this `target_link_libraries` in this machine. I could not run the tests in the machine because `roottest` was `OFF` and when I tried to switch it on I got this error ; ```sh; Failed to find Python module pytest: Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'pytest'; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find py_pytest (missing: PY_PYTEST); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/cmake/modules/RoottestMacros.cmake:1124 (find_package_handle_standard_args); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/python/CMakeLists.txt:8 (find_python_module); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6855#issuecomment-732021171:702,test,tests,702,https://root.cern,https://github.com/root-project/root/issues/6855#issuecomment-732021171,1,['test'],['tests']
Testability,"@Axel-Naumann @amadio ROOTConfig.cmake looks now like this: https://gist.github.com/oshadura/43e0d5de7b25673ab646475c6d9189b8. [oksana@oksana-dellxps builds]$ grep -R ROOT_BINARY_DIR .; ../builds/ROOTConfig.cmake:set(ROOT_BINARY_DIR /home/oksana/CERN_sources/root-cxxmodules/builds/bin); ../builds/CMakeCache.txt:ROOT_BINARY_DIR:STATIC=/home/oksana/CERN_sources/root-cxxmodules/builds. [oksana@oksana-dellxps builds]$ grep -R ROOT_BIN_DIR .; ./ROOTConfig.cmake:set(ROOT_BIN_DIR /home/oksana/CERN_sources/root-cxxmodules/builds/bin); ./ROOTConfig.cmake:# Deprecated value, please don't use it and use ROOT_BIN_DIR instead.; ./ROOTConfig.cmake: find_program(ROOT_${_cpt}_CMD ${_cpt} HINTS ${ROOT_BIN_DIR}); ./test/CMakeLists.txt: set(ROOT_root_CMD ${ROOT_BIN_DIR}/root.exe); ./CMakeCache.txt:ROOT_BIN_DIR:INTERNAL=/home/oksana/CERN_sources/root-cxxmodules/builds/bin; ./installtree/ROOTConfig.cmake:get_filename_component(ROOT_BIN_DIR ""${_thisdir}/../bin"" ABSOLUTE); ./installtree/ROOTConfig.cmake: find_program(ROOT_${_cpt}_CMD ${_cpt} HINTS ${ROOT_BIN_DIR})",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-501662472:707,test,test,707,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-501662472,1,['test'],['test']
Testability,"@Axel-Naumann @bellenot I think I know why `mac11.0/cxx17` is failing.; I see it is requested in list of `all modules` that `pyroot3` should be enabled, while Python3 is not available/installed on machine: ; ```AXEL: all modules = alien;arrow;asimage;asserts;builtin_afterimage;builtin_cfitsio;builtin_davix;builtin_fftw3;builtin_freetype;builtin_ftgl;builtin_gl2ps;builtin_glew;builtin_gsl;builtin_lz4;builtin_lzma;builtin_nlohmannjson;builtin_openssl;builtin_openui5;builtin_pcre;builtin_tbb;builtin_unuran;builtin_vc;builtin_vdt;builtin_veccore;builtin_xrootd;builtin_xxhash;builtin_zlib;builtin_zstd;cefweb;clad;cocoa;cuda;cudnn;daos;dataframe;davix;dcache;dev;distcc;fcgi;fftw3;fitsio;fortran;gdml;gfal;gsl_shared;gviz;http;imt;libcxx;mathmore;minuit2;mlp;monalisa;mpi;mysql;odbc;opengl;oracle;pgsql;pyroot;pyroot2;pyroot3;pyroot_legacy;pythia6;pythia6_nolink;pythia8;qt5web;r;roofit;shadowpw;spectrum;sqlite;ssl;test_distrdf_pyspark;tmva;tmva-cpu;tmva-gpu;tmva-pymva;tmva-rmva;tmva-```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8336#issuecomment-870516897:251,assert,asserts,251,https://root.cern,https://github.com/root-project/root/pull/8336#issuecomment-870516897,1,['assert'],['asserts']
Testability,"@Axel-Naumann @bellenot I'm not familiar enough with the test suite to know if these failed tests are relevant. From looking at [`tutorials/rcanvas/df105.py`](https://github.com/root-project/root/blob/d6104649df2fea76793a4b3d59d9d8dc63130167/tutorials/rcanvas/df105.py), and that you approved this PR, I assume no, but I thought I'd ask if there's anything else that you need me to look at.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10025#issuecomment-1059836360:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/10025#issuecomment-1059836360,2,['test'],"['test', 'tests']"
Testability,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-825474655:44,test,tests,44,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655,5,"['Test', 'log', 'test']","['Test', 'log', 'tests']"
Testability,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14052#issuecomment-1817005601:91,log,log,91,https://root.cern,https://github.com/root-project/root/pull/14052#issuecomment-1817005601,1,['log'],['log']
Testability,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2362#issuecomment-407751760:101,log,logic,101,https://root.cern,https://github.com/root-project/root/pull/2362#issuecomment-407751760,1,['log'],['logic']
Testability,"@Axel-Naumann @pcanal here we go, although I'm 99% sure that we're already exercising the code paths from various other ROOT IO tests, but more can certainly never hurt :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-829917210:128,test,tests,128,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-829917210,1,['test'],['tests']
Testability,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603727173:131,test,test,131,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603727173,1,['test'],['test']
Testability,"@Axel-Naumann As of 2 years ago, it was not working on linux between the JIT and the compiled code. Our test suites may or may not be exercising this, debugging it is hard. If the the C++ standard now says ""typeinfo must work across all compilation unit"" then we are good from that standard on. If not ... well absence of test failures says either we are not testing it either it is fixed. The ""extra"" requirement is because it is ""hard"" to debug (very not obviously related failure, you will first get side-tracked thinking there is some subtle (because valgrind might not complain) memory usage issue).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-812100227:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-812100227,3,['test'],"['test', 'testing']"
Testability,"@Axel-Naumann Hi, it seems I got very similar errors as yesterday. Here is the information.; [build_err.log](https://github.com/root-project/root/files/11328201/build_err.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522648822:104,log,log,104,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522648822,2,['log'],['log']
Testability,"@Axel-Naumann I am not sure I'm using the right spell to disable the failing test case on M1, please let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9991#issuecomment-1055190034:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/9991#issuecomment-1055190034,1,['test'],['test']
Testability,"@Axel-Naumann I am testing it on Mac OS X as well now (last time, to be sure my PR will fix problem)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238#issuecomment-605117936:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/5238#issuecomment-605117936,1,['test'],['testing']
Testability,"@Axel-Naumann I can reproduce failures on my machine...; Here is quick reproducer:; https://github.com/root-project/root/blob/master/tree/treeplayer/test/treeprocmt/treeprocessormt_remotefiles.cxx#L13-L15; ```; root [1] auto fname = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root"";; root [2] auto f = std::unique_ptr<TFile>(TFile::Open(fname));; root [3] f; (std::unique_ptr<TFile, std::default_delete<TFile> > &) std::unique_ptr -> nullptr; root [4]; ```; broken xrootd version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-845206796:149,test,test,149,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-845206796,1,['test'],['test']
Testability,"@Axel-Naumann I discussed the changes with @lmoneta . If the tests are green, this PR is ready to go!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3867#issuecomment-496927419:61,test,tests,61,https://root.cern,https://github.com/root-project/root/pull/3867#issuecomment-496927419,1,['test'],['tests']
Testability,@Axel-Naumann I tested your fix with my CUDA system. The segmentation error is gone and all tests passes. Thanks for fixing it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7433#issuecomment-800217829:16,test,tested,16,https://root.cern,https://github.com/root-project/root/issues/7433#issuecomment-800217829,2,['test'],"['tested', 'tests']"
Testability,@Axel-Naumann I thought everything was ok but then it tells me that these tests fail. Do you know why?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8613#issuecomment-878895895:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/8613#issuecomment-878895895,1,['test'],['tests']
Testability,@Axel-Naumann I updated the commit log to reflect that Cling's issue template is based off of ROOT's issue template.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7815#issuecomment-820437182:35,log,log,35,https://root.cern,https://github.com/root-project/root/pull/7815#issuecomment-820437182,1,['log'],['log']
Testability,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator.; We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-342938316:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-342938316,1,['test'],['tests']
Testability,"@Axel-Naumann I've updated the patch to use `TUrl` and always redirect. I updated the code comment and release notes to match. The way to disable the redirection then will be to set `TFile.CrossProtocolRedirects` to `0` in `rootrc`. Now the behavior should be consistent between plain `TFile::Open` calls and `TChain`. @pcanal I tried moving the code after line 4057 and using `expandedUrl` but it started showing errors like this when using `TChain`:; ```; Error in <TNetXNGFile::Open>: [ERROR] Server responded with an error: [3001] Required argument not present; ```. So I moved it back where it was before and use only the input `url` to `TFile::Open` as is. I tested that this now works both for plain `TFile::Open` calls as well as with `TChain` and the redirection always happens as long as the file being opened is on EOS. The problem was that the `exapandedUrl` sometimes contained only the base EOS management URL, which broke it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1310051645:665,test,tested,665,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1310051645,1,['test'],['tested']
Testability,"@Axel-Naumann Just to make sure: is anything required of me right now or will you review and diagnose the problems yourself when you have the time? If the former, would you please inform me how to get a CERN account which seems to be mandatory in order to access the build logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9288#issuecomment-972831538:273,log,logs,273,https://root.cern,https://github.com/root-project/root/pull/9288#issuecomment-972831538,1,['log'],['logs']
Testability,"@Axel-Naumann Many thanks for the detailed and friendly reply! :+1: . > Do you have a proposal for the latter? We can add a new boolean constructor argument, `failOnUnknownArgs = false` which we set to `true` in ROOT. Indeed, I believe the additional constructor argument is best. ; The only other solution which comes to mind (if it would not be possible to add a parameter) would be to (once more) use magic numbers for the `numOptions` parameter (similar to how `TApplication` ignores `argc` and `argv` if `numOptions==-1`), but that is certainly not a design pattern leading to modern, readable code, so better not spread it more ;-). ; `failOnUnknownArgs` sounds like a great choice of name, it clarifies the intent clearly. . > It would be wonderful to have that as unit test in `core/rint/test` [...]. It seems this does already exist, and has a unit test checking that errors are producted by `TRint` if unrecognitzed options are encountered ;-). Still, it seems I lack sufficient experience with `gtest`, since I don't understand why (for example) `TRint` with unsupported arguments does not `Terminate()` the test — so it's unclear to me how to write a test checking that it does not actually try to `Terminate()` when provided with a to-be-added `failOnUnknownArgs = false`. . In pseudo-steps, I think possible changes / additions to the existing test in `core/rint/test/TRintTests.cxx` to cover the use case as completely as possible could be:; 1. The existing test should be changed to set `failOnUnknownArgs = true` (after that is implemented). ; 2. A second test could be added, not setting `failOnUnknownArgs` (i.e. the default of `false` is used). This test then needs to check that no `stderr` is produced, and `Terminate()` is not called (here I'm unsure how to do these with `gtest`). ; 3. A third test could try to do the following, for complete coverage of the use case:; i. Create a `TRint (let's name it `myApp for simplicity here)`, passing in supported and unsupported option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1064634456:777,test,test,777,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1064634456,6,['test'],['test']
Testability,@Axel-Naumann The failure on ROOT-ubuntu16/nortcxxmod don't seem related to this PR but rather to the llvm 9 update:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobject.h; requested to autoload type TestObj; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobjectderived.h; requested to autoload type TestObjDerived; ```; and similar.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-786308076:210,test,testobject,210,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-786308076,4,"['Test', 'test']","['TestObj', 'TestObjDerived', 'testobject', 'testobjectderived']"
Testability,@Axel-Naumann The first assert should be safe because we directly dereference the pointer one line later. We can also add a `if(Modules) {}` around the other code to double-check.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1036#issuecomment-331438950:24,assert,assert,24,https://root.cern,https://github.com/root-project/root/pull/1036#issuecomment-331438950,1,['assert'],['assert']
Testability,@Axel-Naumann The test failure seems both random and unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9764#issuecomment-1026392407:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9764#issuecomment-1026392407,1,['test'],['test']
Testability,@Axel-Naumann This is great news ! Thank you for this insight.; I would be happy to test it as soon as it is released (or available),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1660303040:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1660303040,1,['test'],['test']
Testability,@Axel-Naumann We reduced the testing matrix to 8 jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6720#issuecomment-720109651:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/6720#issuecomment-720109651,1,['test'],['testing']
Testability,"@Axel-Naumann You said this very nicely. That's basically my questions ;); Or also: How shall we treat such dependencies in tutorial consistently? In tests, we agreed on ""just import and fail"". Here, we still have the option. (Although, we still want to return a non-zero value for the test coverage. That's no question!)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616461627:150,test,tests,150,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616461627,2,['test'],"['test', 'tests']"
Testability,@Axel-Naumann and I came up with a location where the new header should live in: `test/unit_testing_support`. Let us know if you can think of a better place to put it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-629078504:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-629078504,1,['test'],['test']
Testability,"@Axel-Naumann by `This error is currently causing some developments for the LHCb experiment to be on stand-by` I just wanted to point out that this is a problem affecting the software developments of one of the LHC experiments (just in case you increase the priority of them rather than of other general issues). I also agree that the most straight-forward solution to us is changing the names of those functions. However, I have been always surprised that the ROOT interpreter includes the ""dangerous"" `using namespace std;` line, and I wonder if there is a way to avoid that (like via an instruction that can be passed to the interpreter). An important note is that the example above does not entirely reproduce the error that we see. We have run into a situation where `root -l -q test.cpp+` compiles and runs fine (also with `g++`) but `root -l -q test.cpp` doesn't, even in the situation where we include the line `using namespace std;`. I am currently struggling to create a more accurate minimal working example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858441493:784,test,test,784,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858441493,2,['test'],['test']
Testability,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:; `09:35:57 From https://github.com/oshadura/root; 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final; 09:35:57 Auto packing the repository in background for optimum performance.; 09:35:57 See ""git help gc"" for manual housekeeping.; 09:35:57 error: The last gc run reported the following. Please correct the root cause; 09:35:57 and remove .git/gc.log.; 09:35:57 Automatic cleanup will not be performed until the file is removed.; 09:35:57 ; 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-540964530:434,log,log,434,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-540964530,1,['log'],['log']
Testability,"@Axel-Naumann thank you for configuring `liburing`, it looks like the tests ran and passed :) ; http://cdash.cern.ch/testDetails.php?test=2001040&build=11437. I am not sure about the python failures, and think the compiler warnings are maybe from using a newer gcc?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-668746900:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-668746900,3,['test'],"['test', 'testDetails', 'tests']"
Testability,"@Axel-Naumann thanks a lot for debugging! My suspicions were correct, I am building now debug ROOT build and will send PR as soon as possible...Interesting why we didn't catch it in any of the tests...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8155#issuecomment-843800754:193,test,tests,193,https://root.cern,https://github.com/root-project/root/issues/8155#issuecomment-843800754,1,['test'],['tests']
Testability,"@Axel-Naumann thanks having a look at this. . This is new code, so I guess so far we have just been lucky that we haven't created a similar conflict. . While a bit annoying, I think you are right. The most pragmatic workaround will be for us to rename that function. . If you don't mind, I've 2 follow-up questions on this.; - When first trying to debug this, I was having a hard time figuring out what is actually feed to cling. ; Is there a flag I can add to `root -l test.cpp` or `.x test.cpp` to spit out the preprocessed C++? . - What's the reason for the `using namespace std`? Is it possible to disable that for specific calls to root?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858406581:470,test,test,470,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858406581,2,['test'],['test']
Testability,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807#issuecomment-320092642:18,assert,assert,18,https://root.cern,https://github.com/root-project/root/pull/807#issuecomment-320092642,1,['assert'],['assert']
Testability,"@Axel-Naumann the tests on `fedora32` look good, and all the other linux nodes ""failed successfully"" during the configuration search :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-669936949:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-669936949,1,['test'],['tests']
Testability,"@Axel-Naumann yes, she has integrated and tested the changes in her local ROOT. She is now looking at how to deal with several overloads of the same method (I pointed her to `TClass::GetListOfMethodOverloads`). @vgvassilev sure: https://github.com/root-project/roottest/pull/354",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4098#issuecomment-512833634:42,test,tested,42,https://root.cern,https://github.com/root-project/root/pull/4098#issuecomment-512833634,1,['test'],['tested']
Testability,"@Axel-Naumann yes, testing is one of the motivations, in particular continuous testing to prevent future regressions (now we can check against an external implementation, instead of just copying the current values and declaring them ""known-good""). The other reason, and why I think this might provide benefit for users, is performance: The original RANLUX implementation by James (at least its implementation in GSL) needs 40 seconds to sum 1 million numbers at luxury level 3, `gsl_rng_ranlux389` (luxury level 4) takes a bit more than 1 minute. The same sequence takes less than 8 seconds with `RanluxppCompatEngineJamesP[34]`, respectively (due to the LCG, you don't even pay for higher decorrelation!).; The difference is even larger for `std::ranlux48` (used directly, not through `std::uniform_real_distribution` which eats up more than one number per iteration): 2m55s compared to 12 seconds with `RanluxppCompatEngineStdRanlux48`. And because we can generate the same sequence, switching the generator won't change the output of a simulation / analysis / ... (only the interface is slightly different). Plus the users get the possibility to skip in the very same sequence without generating the intermediate numbers. Now we could argue that all users should switch to `RanluxppEngine2048`, which on top of that provides better seeding and even higher decorrelation. On the other hand, the implementations above have been around for some time now and are so widely available (`std::ranlux{24,48}` comes with any C++ compiler) that they will remain used...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383#issuecomment-857732772:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/8383#issuecomment-857732772,2,['test'],['testing']
Testability,"@Axel-Naumann, @pcanal, it is debatable if should make `projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest` work. In [TTabCom](https://github.com/root-project/root/blob/master/core/rint/src/TTabCom.cxx#L458) we explicitly request to iterate over the currently available names. With GMI on if we write `TH1<tab>` we will get TH1{C,D,F,I,K,S} (and not TH1Editor from gui/ged) because `TH1` caused loading of Hist.pcm. If we type `TH<tab>` we will get {THashList,THashTable,THashTableIter}. I am leaning towards fixing the reference file... Do you see another way out?. EDIT1: The same holds of making `projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_asnumpy` work as it does call `gInterpreter->Declare(""TLorentzVector v;"")` where the `TCling::Declare` [promises](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L2936-L2961) that interface to behave as ""a compiler"" -- turning the GMI intentionally off...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-640116570:675,test,test,675,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-640116570,1,['test'],['test']
Testability,"@Axel-Naumann, I tested and it finally works! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1051#issuecomment-331895692:17,test,tested,17,https://root.cern,https://github.com/root-project/root/pull/1051#issuecomment-331895692,1,['test'],['tested']
Testability,"@Axel-Naumann, do we have on any Jenkins nodes OCCI installed?; Is it tested by chance while I only can prove on my single platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7465#issuecomment-796753032:70,test,tested,70,https://root.cern,https://github.com/root-project/root/pull/7465#issuecomment-796753032,1,['test'],['tested']
Testability,"@Axel-Naumann, do you remember the use case or the test we had where this fix helps? Our current understanding is that it is not needed anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11076#issuecomment-1200472596:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/11076#issuecomment-1200472596,1,['test'],['test']
Testability,"@Axel-Naumann, looking at the build logs, it seems to me that there is a problem with the CI system: ""No space left on device"". Could you have a look at it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1509#issuecomment-357617029:36,log,logs,36,https://root.cern,https://github.com/root-project/root/pull/1509#issuecomment-357617029,1,['log'],['logs']
Testability,"@Axel-Naumann, seems that the test is not fixed by this patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2716#issuecomment-425703573:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/2716#issuecomment-425703573,1,['test'],['test']
Testability,"@Axel-Naumann, we did experiment with this when developing the PR. So the performance should be better. We have two options here: a) test it on the same setup as the initial bug (eg afs); b) close the issue as resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774#issuecomment-931943063:133,test,test,133,https://root.cern,https://github.com/root-project/root/issues/7774#issuecomment-931943063,1,['test'],['test']
Testability,@ChristianTackeGSI Thanks! And my question about test mas mostly for @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-801042926:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801042926,1,['test'],['test']
Testability,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809579803:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809579803,1,['test'],['test']
Testability,"@ChuanqiXu9, this looks good on our side. Performance is also within the same ballpark. If I run `/usr/bin/time -v root.exe -l -b -q tutorials/hsimple.C ` I get:. | | master | this pr | this PR w/o [ChuanqiXu9@2467fe7](https://github.com/ChuanqiXu9/root/commit/2467fe73721150e3b70bc17cb36e03507257c6e5); |--------|----------|:-------------:|------:|; user time: | 0.53s | 0.50s| 0.49s |; |rss: | 309436 | 310196 | 310192|. It is surprising that we lose 1MB somewhere between D41416 and your changes... @smuzaffar, can you test this PR against cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1980589145:522,test,test,522,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1980589145,1,['test'],['test']
Testability,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!!; I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. ; Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. ; There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720398708:69,log,logging,69,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720398708,1,['log'],['logging']
Testability,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-769661458:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-769661458,1,['test'],['tests']
Testability,"@HadrienG2 Thank you very much for the very valuable contributions. A small improvement; in general we try to avoid ""merge commit"" whenever possible. (i.e. here the 2 commit should probably have been squashed before merging and/or the log of the 2nd commit be updated to reflect its purpose).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4707#issuecomment-567645257:235,log,log,235,https://root.cern,https://github.com/root-project/root/pull/4707#issuecomment-567645257,1,['log'],['log']
Testability,"@JavierCVilla , very nice. I agree with @bluehood - once this is tested, it can be merged immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2062#issuecomment-391126641:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/2062#issuecomment-391126641,1,['test'],['tested']
Testability,"@LadaOndris : So that's a SWAN issue in that case. I am not a SWAN expert. . In SWAN, Is there any log window showing the ROOT error messages?. @etejedor : to you have an idea ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438501382:99,log,log,99,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438501382,1,['log'],['log']
Testability,"@MarkusFrankATcernch I'm checking this today, I'm still seeing mixes of different features in some commits. Ideally, the different commits will treat completely different features, and a test should be present where possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11868#issuecomment-1346307985:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/11868#issuecomment-1346307985,1,['test'],['test']
Testability,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11115#issuecomment-1206115515:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/11115#issuecomment-1206115515,1,['test'],['test']
Testability,"@MrCarroll we decided to clarify the meaning of this build option further by calling it `test_distrdf_pyspark`. Indeed, checking that pyspark is installed on the system and its dependencies are met at configuration time is needed only if it is foreseen that this feature will be actually used, e.g. when running the respective tests. In general, not all users will be interested in running distributed RDataFrame computations through pyspark, and for those who will the pyspark dependencies will be optional and only needed at runtime, not configuration time (i.e. what happens for a user of pyspark normally). The option is now OFF by default, could you please let me know if your builds run succesfully with this patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7413#issuecomment-793876470:327,test,tests,327,https://root.cern,https://github.com/root-project/root/pull/7413#issuecomment-793876470,1,['test'],['tests']
Testability,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707#issuecomment-719575323:294,test,testing,294,https://root.cern,https://github.com/root-project/root/pull/6707#issuecomment-719575323,1,['test'],['testing']
Testability,"@SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-775706862:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-775706862,2,['test'],['test']
Testability,"@VanyaBelyaev I can't reproduce with latest dev3, does it still fail for you?. I use this `CMakeLists.txt` on lxplus, after sourcing latest dev3:. ```; cmake_minimum_required(VERSION 3.16). project(TestProject). find_package(ROOT 6 CONFIG REQUIRED ); find_package(Python3 3.6.9 COMPONENTS Interpreter Development NumPy); ```. and the output I get for Python3 is:. ```; -- Found Python3: /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-opt/bin/python3.9 (found suitable version ""3.9.6"", minimum required is ""3.6.9"") found components: Interpreter Development NumPy Development.Module Development.Embed ; ```. There was maybe some temporary problem with the NumPy installation in dev3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8942#issuecomment-914281135:198,Test,TestProject,198,https://root.cern,https://github.com/root-project/root/issues/8942#issuecomment-914281135,1,['Test'],['TestProject']
Testability,"@aandvalenzuela @smuzaffar if you have some cycles, can you test this change with CMSSW on AArch64? This should align the configurations with x86_64 to also enable `runtime_cxxmodules` by default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2406939093:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2406939093,1,['test'],['test']
Testability,@aandvalenzuela can you interpret the results we got from your tests for us? Is this PR good to go from cmssw standpoint?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1624861569:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1624861569,1,['test'],['tests']
Testability,@aaronj0 @guitargeek can we do something about this? The tests are still failing for me :anguished:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2378480817:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2378480817,1,['test'],['tests']
Testability,"@agheata : Is this a new feature? If yes, is it urgent for 6.18? Also: wouldn't it be nicer to also have a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3781#issuecomment-490204712:107,test,test,107,https://root.cern,https://github.com/root-project/root/pull/3781#issuecomment-490204712,1,['test'],['test']
Testability,@agheata ; I am a bit hesitant to have one TGeoManager with materials created with different systems of units.... Concerning the comparison:; if PDG == TROOTMaterial and PDG == TGeant4Material then also: TROOTMaterial == TGeant4Material. Clearly both tests must succeed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198041487:251,test,tests,251,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198041487,1,['test'],['tests']
Testability,@agheata we have been able to test the path in 6.24 and everything seemed fine indeed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1246769298:30,test,test,30,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1246769298,1,['test'],['test']
Testability,"@albert-github ; That's a nice idea, and could be something to think about. I think we will anyway to build the whole documentation every night because:; - the various modules refer to each other a lot,; - we want to run all the code available in the doc. We have test suites to validate de software but the documentation is surely an extra one.; - now it takes ""only"" a night so it is still doable to build it daily. If at some point the building becomes unmanageable the approach you suggest might be a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888362590:264,test,test,264,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888362590,1,['test'],['test']
Testability,@alja Can you confirm that all your tests working now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4433#issuecomment-536095739:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/4433#issuecomment-536095739,1,['test'],['tests']
Testability,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. ; With the current master, I don't have the PCH dependency and I have : ; ```; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```; with your PR I have instead: ; ```; sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; Segmentation fault (core dumped); ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1403728768:17,test,tested,17,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1403728768,10,['test'],"['test', 'tested']"
Testability,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. ; Here is output of cmake. ````; [shell] cmake /d/roottest (05.07. 12:23:42) !396 ; -- The C compiler identification is GNU 8.1.1; -- The CXX compiler identification is GNU 8.1.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for bitness: Found 64 bit architecture.; -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") ; -- Scanning subdirectories for tests...; CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):; Unknown CMake command ""ROOT_SHOW_OPTIONS"".; Call Stack (most recent call first):; root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred!; See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2280#issuecomment-402678002:1013,test,tests,1013,https://root.cern,https://github.com/root-project/root/pull/2280#issuecomment-402678002,2,"['log', 'test']","['log', 'tests']"
Testability,@amadio ; As idea: ; Can we provide build option which enables maximal-available c++ standard and root7 when at least c++14 is there? Or simply enable root7 an all platforms where it make sense? ; Otherwise it always a chalenge to test root7 features on Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3831#issuecomment-493590447:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/3831#issuecomment-493590447,2,['test'],['test']
Testability,"@amadio Bertrand helped me to fix Windows side (thanks a lot @bellenot ), tests are finally passing and `root -l -e '#include <Math/CladDerivator.h>` works both in build dir and install dir. I think it is good to go!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3337#issuecomment-460328644:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/3337#issuecomment-460328644,1,['test'],['tests']
Testability,"@amadio I am getting next errors:. -- TEST COMMAND -- ; cd /mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray; /usr/bin/timeout -s USR2 270s /usr/bin/root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gROOT->SetMacroPath(""/mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -q -l -b /mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray/aclicModelWrite.C+; -- BEGIN TEST OUTPUT --; /usr/bin/timeout: failed to run command /usr/bin/root.exe: No such file or directory. ===============================. I am confused, it is because you uninstalled root binaries at fedora node?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502695412:38,TEST,TEST,38,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502695412,2,['TEST'],['TEST']
Testability,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth?. The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-397609468:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-397609468,1,['test'],['test']
Testability,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run.; Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ?; The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine.; ```; 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400992129:272,test,testVectorizedTMath,272,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400992129,6,"['Test', 'test']","['Test', 'test', 'test-GradientFittingUnit', 'testGradientFittingUnit', 'testVectorizedTMath']"
Testability,@amadio I hadn't seen it but I'll keep the test running for a while :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-397582268:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-397582268,1,['test'],['test']
Testability,"@amadio I know there is mac, but seems most of builds were failing with warnings ;( :; ```; /cvmfs/sft.cern.ch/lcg/releases/R/3.2.5-c8cca/x86_64-mac1012-clang90-opt/lib/R/include/R.h:40:10: warning: non-portable path to file '<RConfig.h>'; specified path differs in case from file name on disk [-Wnonportable-include-path]; ```; I cleaned my log accidentally.; It means build was ok?right? just warnings..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-359038581:342,log,log,342,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-359038581,1,['log'],['log']
Testability,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-453330275:176,log,log,176,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-453330275,1,['log'],['log']
Testability,"@amadio Okay, I think it's been resolved now. I'm going through [rootbench](https://github.com/root-project/rootbench) and beginning to write the code for the benchmarks. At first glance there doesn't seem to be benchmarks for the scalar `TMath` functions. I guess they should be added as well including the vectorized ones. Am I right in thinking this ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-422575742:159,benchmark,benchmarks,159,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-422575742,2,['benchmark'],['benchmarks']
Testability,"@amadio Rebased. There was no content from previous PRs in here, but I understand the confusion. To clarify the now rebased ~6~ 8 commits:. - 8cc7dbb adds constructors to KahanSum that are necessary for serializing them and sending over a ZMQ socket.; - 2c35731 fixes up the zmq header installation, which was still being installed, so this is indeed a fixup of previous PRs.; - 359b585 is an optimization of part of MultiProcess. It isn't strictly necessary, but improves performance (I tried it out while trying to fix the bug in this PR), and it was something I wanted to do for a while already, so decided to keep it in.; - ee89d0c turns off building MultiProcess by default, as requested by you, @amadio.; - 84ac86e fixes a few remaining copyright/license headers that were introduced in #8700.; - 38c6de9 fixes some include dir variables in MultiProcess and RooFitZMQ.; - ~78aac0b~ 568ffdf is about building `MultiProcess` on Windows (includes @amadio's earlier review suggestion).; - ~5ab91be 0e21b70~ 1c5084f finally is what this PR is really about: adding the MP-based TestStatistics calculator classes and a README.md file with usage instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-984509014:1078,Test,TestStatistics,1078,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-984509014,1,['Test'],['TestStatistics']
Testability,@amadio Should I continue to add more functions or write the benchmarks for the ones now ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-422266504:61,benchmark,benchmarks,61,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-422266504,1,['benchmark'],['benchmarks']
Testability,"@amadio Thanks!. I have delved a bit into the recent changes, and I think it's this one:; https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833; `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. ; For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:; https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake; and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1815217164:368,log,logo,368,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1815217164,1,['log'],['logo']
Testability,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349219350:98,log,log,98,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349219350,1,['log'],['log']
Testability,@amadio basically I fixed a typo...added a little comment to the commit log.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4066#issuecomment-510083373:72,log,log,72,https://root.cern,https://github.com/root-project/root/pull/4066#issuecomment-510083373,1,['log'],['log']
Testability,"@amadio sorry, I lost your message and yes, I tested it works fine (even in case of root7)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3409#issuecomment-482631192:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/3409#issuecomment-482631192,1,['test'],['tested']
Testability,"@amadio, I don't think that's true. It is my impression that the merge request is built against the latest master (something the build log output supports). So rebuilding a PR _does_ potentially build different code each time. (To clarify, the initial build failure was in `math/vecops/CMakeFiles/VecOps.dir/G__VecOps.cxx.o`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385715531:135,log,log,135,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385715531,1,['log'],['log']
Testability,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3279#issuecomment-455464750:195,test,tests,195,https://root.cern,https://github.com/root-project/root/pull/3279#issuecomment-455464750,5,['test'],"['test', 'tests']"
Testability,"@amadio, what tests are you running for MPI?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371482922:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371482922,1,['test'],['tests']
Testability,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14077#issuecomment-1866781542:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/14077#issuecomment-1866781542,1,['test'],['test']
Testability,"@andresailer reports; ```; ...; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerPulseIOImpl.h; requested to autoload type IOIMPL::TrackerPulseIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerRawDataIOImpl.h; requested to autoload type IOIMPL::TrackerRawDataIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/VertexIOImpl.h; requested to autoload type IOIMPL::VertexIOImpl; Error in <TInterpreter::AutoParse>: Error parsing payload code for class EVENT::LCEvent with content:. #line 1 ""EVENT dictionary payload""; ...; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; ```; and more, http://cdash.cern.ch/testDetails.php?test=16531307&build=211395 from `Test: LCIO_pyLCIO_import_test (Passed)` (cough cough) - this might be pre-existing before the llvm13 upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11921#issuecomment-1357852969:1197,test,testDetails,1197,https://root.cern,https://github.com/root-project/root/pull/11921#issuecomment-1357852969,3,"['Test', 'test']","['Test', 'test', 'testDetails']"
Testability,"@andresailer, could you test this pr: https://github.com/root-project/root/pull/15043",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2017625791:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2017625791,1,['test'],['test']
Testability,"@andresailer, it looks like we have externally built Vc and we do not pass in the location of its header files. IIRC, we had the same issue for the cuda builds and we solved it by passing the include path in the env variable `ROOT_INCLUDE_PATH`. For example, something like that fixes the crash for me: `ROOT_INCLUDE_PATH=/build/sailer/testReprRoot/testLcgcmake/install/dev3/Vc/1.4.2/x86_64-centos7-gcc10-dbg/include/ root.exe -l -b -q `. In order to move forward this issue needs to be fixed on the LCG side. I am cc-ing @peremato as we did such a fix some time ago for the ROOT CUDA builds. I bet he knows where to add it as he already did it once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1025259524:336,test,testReprRoot,336,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1025259524,2,['test'],"['testLcgcmake', 'testReprRoot']"
Testability,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-713688119:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713688119,2,['test'],['test']
Testability,@arizzi Thanks for this patch!; Could you also add a test for this here https://github.com/root-project/root/blob/master/math/vecops/test/vecops_rvec.cxx ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14915#issuecomment-1985287781:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/14915#issuecomment-1985287781,2,['test'],['test']
Testability,"@arpi-r, I reverted your changes before https://root.cern.ch/gitweb/?p=root.git;a=commitdiff;h=2b8011b3e44fdf2463f8c57cc5d799f95704c2da since we found that on nighty builds where was enabled -Dr=ON, tests were failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3635#issuecomment-480166357:199,test,tests,199,https://root.cern,https://github.com/root-project/root/pull/3635#issuecomment-480166357,1,['test'],['tests']
Testability,"@arthur-tsang thanks for your contribution, perhaps you want to re-base to resolve the conflicts and we can test your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/846#issuecomment-321295362:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/846#issuecomment-321295362,1,['test'],['test']
Testability,"@axmat The test is still failing. It works fine on my machine, so maybe it is due to an old protobuf version installed on that machine. I will investigate it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8847#issuecomment-984697187:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/8847#issuecomment-984697187,1,['test'],['test']
Testability,@bastianbeischer Could you please rebase and push again so we can run Jenkins and test this? Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1083#issuecomment-333819707:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/1083#issuecomment-333819707,1,['test'],['test']
Testability,"@bbockelm Before we can merge this, we need to test with both builtin and external lz4, since ROOT is currently broken with the latter (not caught by PR tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/926#issuecomment-326909464:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/926#issuecomment-326909464,2,['test'],"['test', 'tests']"
Testability,@bbockelm I accidentally deleted my previous work last night. But good news is I figured out the issue I was facing when I try to reproduce my work today.; Now everything is working. I uploaded roottest repo in my github and generated the unit test as a commit. My current test simply follows the sample code in https://sft.its.cern.ch/jira/browse/ROOT-7588.; Let me know if something is not correct.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-174810100:244,test,test,244,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-174810100,2,['test'],['test']
Testability,"@bbockelm This test is failing because of your change in the way TBufferFile reallocation functions are passed— you added the ability to pass a pointer to state so that the reallocation function can effectively have an argument. Perhaps this interface could be made backward-compatible by naming the new function pointer type the same as the old one (i.e. without the word ""state"" in its typedef name) and the arguments could take `nullptr` as a default argument for the state. That way, the test could pass without modification. Otherwise, it could pass by a minor change in the test. Then we'd find out what the next bug is. If there is one, of course. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943#issuecomment-329146428:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/943#issuecomment-329146428,3,['test'],['test']
Testability,"@bbockelm we can start to review PR.. I cant reproduce failures on ROOT-performance-centos7-multicore/default both as separate build on node and or even in build directory, I suspect it could be a problem of ""very"" parallel builds (-j56). I will test and let you know..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-503461511:246,test,test,246,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-503461511,1,['test'],['test']
Testability,@behrenhoff Could you please rebase this branch on top of master so that we can test again it before merging? I think I will leave the commits as they are and pick them one by one as they are reviewed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-369193396:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-369193396,1,['test'],['test']
Testability,"@behrenhoff I will merge the commits in more manageable pieces since commits across many files (although logically a good thing) make it difficult to backport things to earlier branches (e.g., from master to v6-12-00-patches). You will, of course, be kept as the author of the changes, I will just rebase and split the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-363414943:105,log,logically,105,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-363414943,1,['log'],['logically']
Testability,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures?. [a]; ```; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13793#issuecomment-1771483502:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/13793#issuecomment-1771483502,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"@bellenot . Actually, it is non-documented functionality. ; And by chance I test it now - when migrating all existing JS code to support future JSROOT v6.; I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6695#issuecomment-714575090:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/6695#issuecomment-714575090,3,['test'],"['test', 'tests']"
Testability,@bellenot ; yes:. -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime.; -- And then fallback to: 'c++'; -- clad=OFF; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872175065:394,Test,Test,394,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872175065,3,['Test'],['Test']
Testability,"@bellenot Do you have any idea why the ""result"" is a nullptr in my test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15071#issuecomment-2025183323:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/15071#issuecomment-2025183323,1,['test'],['test']
Testability,@bellenot I am looking the logs for windows build and it looks like it stuck? (no changes from 10 morning?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8104#issuecomment-833427640:27,log,logs,27,https://root.cern,https://github.com/root-project/root/pull/8104#issuecomment-833427640,1,['log'],['logs']
Testability,@bellenot I do not understand the failures in the tests. But I am sure has nothing to do with the actual proposed changes. Can this be merged to be ready for tonight's LCG builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13946#issuecomment-1781299879:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/13946#issuecomment-1781299879,1,['test'],['tests']
Testability,@bellenot If you want to check the first windows run output: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157152/console. I can not find the test output anywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1276757277:169,test,test,169,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1276757277,1,['test'],['test']
Testability,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1088#issuecomment-333820231:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/1088#issuecomment-333820231,1,['test'],['tests']
Testability,"@bellenot It is a new tests, the feature it tests is ""urgent"", I suppose the fix might be something like:; ```; set(LINUX_CMAKE_CURRENT_SOURCE dos2unixFileName(${CMAKE_CURRENT_SOURCE_DIR})); set(RootExternalIncludes -e "".include ${LINUX_CMAKE_CURRENT_SOURCE}/mwe/include""); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014570964:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014570964,2,['test'],['tests']
Testability,"@bellenot The new test code contains an include path injection which on Windows ends up being:; ```; ... root.exe ... -e '.include C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/include' ....; ```; which comes from the CMake list:; ```; set(RootExternalIncludes -e "".include ${CMAKE_CURRENT_SOURCE_DIR}/mwe/include""); ```; but it does not work on Windows (it works on Linux); ```; rocessing C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx+(0)...; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/workspace/root-pullrequests-build/build/roottest/root/io/issue-7754/combined_cxx.dll; In file included from input_line_9:6:; In file included from C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx:2:; C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/src/SpectrometerChannelID.cc:7:10: fatal error: 'SpectrometerChannelID.hh' file not found; #include ""SpectrometerChannelID.hh""; ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014551071:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014551071,1,['test'],['test']
Testability,"@bellenot The windows failure is due:; ```; 23:43:52 CustomBuild:; 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt; 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date.; 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap; 23:43:52 In file included from input_line_1:1:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:; 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]; 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer.; 23:43:52 ^; 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362; 23:43:52 Exit code 0xc0000409; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2391#issuecomment-409023585:1660,Assert,Assertion,1660,https://root.cern,https://github.com/root-project/root/pull/2391#issuecomment-409023585,1,['Assert'],['Assertion']
Testability,@bellenot What were you testing through the use of Pythia6?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823#issuecomment-2040373869:24,test,testing,24,https://root.cern,https://github.com/root-project/root/pull/14823#issuecomment-2040373869,1,['test'],['testing']
Testability,@bellenot can you have a quick look? The failure on Windows is due to un-related tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11788#issuecomment-1330229156:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/11788#issuecomment-1330229156,1,['test'],['tests']
Testability,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6970#issuecomment-749410153:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/6970#issuecomment-749410153,1,['test'],['test']
Testability,@bellenot not sure if your four lines of code triggering the assertion could become now part of roottest. thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8126#issuecomment-1812298138:61,assert,assertion,61,https://root.cern,https://github.com/root-project/root/issues/8126#issuecomment-1812298138,1,['assert'],['assertion']
Testability,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112196842:782,test,test,782,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842,2,['test'],['test']
Testability,"@bencouturier I've ported this fix to 6.24 (see PR #11303) and noticed other changes not yet backported, so I've put in sync the TGeoMaterial.cxx file from the master to this branch. I've tested it locally and it seems to work properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1234387605:188,test,tested,188,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1234387605,1,['test'],['tested']
Testability,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-822391931:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-822391931,1,['test'],['test']
Testability,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```; TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");; ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608#issuecomment-421982623:299,test,test,299,https://root.cern,https://github.com/root-project/root/pull/2608#issuecomment-421982623,1,['test'],['test']
Testability,@bluehood @dpiparo Just added two tests to `$ROOTSYS/tree/dataframe/test/dataframe_ranges.cxx` instead of `$ROOTSYS/tree/dataframe/test/dataframe_simple.cxx` to avoid running `Range` with implicit multi-threading.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2062#issuecomment-391268541:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/2062#issuecomment-391268541,3,['test'],"['test', 'tests']"
Testability,"@bluehood Ah, okay, no problem. I'm currently adding a test to check that both trees get written, but no, I don't know how to check printed errors. Is a test necessary for such a case? A quick check indicates that this PR only affects the printed error statement, not the saved output.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585259930:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585259930,2,['test'],['test']
Testability,"@bluehood I added tests, as requested. There is currently no test for the multithreading case, however, due to a bug reported [here](https://root-forum.cern.ch/t/snapshot-fails-to-update-ttree-if-multithreading-enabled/37961). Once that is resolved, I can add in the MT test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-585985905:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-585985905,3,['test'],"['test', 'tests']"
Testability,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1103#issuecomment-333875742:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/1103#issuecomment-333875742,1,['test'],['test']
Testability,"@bluehood One might want to overwrite for aesthetic reasons (so that the file is not polluted with outdated cycles) or to save a little memory:; ```python; In [1]: import ROOT. In [2]: df = ROOT.RDataFrame(10).Define('e', 'rdfentry_'). In [3]: df.Snapshot('tUpdate', 'fUpdate.root'); Out[3]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a564e9fe0>. In [4]: snapopts = ROOT.RDF.RSnapshotOptions(). In [5]: snapopts.fMode = 'UPDATE'. In [6]: df.Snapshot('tUpdate', 'fUpdate.root', '', snapopts) # update without overwriting; Out[6]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a574a3c80>. In [7]: df.Snapshot('tOverwrite', 'fOverwrite.root'); Out[7]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a576822d0>. In [8]: snapopts.fOverwrite = True. In [9]: df.Snapshot('tOverwrite', 'fOverwrite.root', '', snapopts) # update and overwrite; Out[9]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a58142590>; ```; ```bash; $ ls -l f*root; -rw-r--r-- 1 michael staff 5.9K Feb 13 11:20 fOverwrite.root; -rw-r--r-- 1 michael staff 6.0K Feb 13 11:19 fUpdate.root; ```; Test coming soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-585845236:1295,Test,Test,1295,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-585845236,1,['Test'],['Test']
Testability,@bluehood Renamed to StdDev and added more tests for corner cases,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2269#issuecomment-401386300:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2269#issuecomment-401386300,1,['test'],['tests']
Testability,"@bluehood Yes, as soon as #2514 is merged I'll add the specific test for Display, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2515#issuecomment-415737205:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/2515#issuecomment-415737205,1,['test'],['test']
Testability,"@bluehood perhaps one test with multiple input files, that exercises the hierarchical task spawning?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143#issuecomment-394742206:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/2143#issuecomment-394742206,1,['test'],['test']
Testability,"@bluehood test added , let's wait for the builds and merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1863#issuecomment-382017922:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/1863#issuecomment-382017922,1,['test'],['test']
Testability,"@cdeil , #1680 was merged; you should be able to extract Minuit trivially now (I don't think packages have been produced yet, though). Look at [math/minuit2/README.md](https://github.com/root-project/root/blob/master/math/minuit2/README.md) and [math/minuit2/DEVELOP.md](https://github.com/root-project/root/blob/master/math/minuit2/DEVELOP.md). If you'd like to use setuptools instead of cmake, see https://github.com/GooFit/GooFit/blob/master/python/Minuit2/setup.py (not continuously tested, may need some modifications). @lmoneta, @amadio do you think it would be a good idea to at least merge 2f320cd ? That's a logical error (the whole file is only about 30 lines). The other change may be okay, but I'm not really sure you couldn't get around it with a const cast in user code, and making a non-mutex/atomic mutable doesn't seem to be ideal to me; but it would be fairly ""safe"". If it needs to be done here, what about making it an atomic then it would be logically correct to make it mutable. https://github.com/root-project/root/blob/9791bc8896da09284c273378fd0054a48732bc22/math/minuit2/src/MinimumBuilder.cxx#L12-L25",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384403343:487,test,tested,487,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384403343,3,"['log', 'test']","['logical', 'logically', 'tested']"
Testability,@cgleggett could you please post a CMake configuration log? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6368#issuecomment-694094893:55,log,log,55,https://root.cern,https://github.com/root-project/root/issues/6368#issuecomment-694094893,1,['log'],['log']
Testability,"@chissg I see in logs: ; ```; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::AMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x30): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::ATMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x70): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] collect2: error: ld returned 1 exit status; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950#issuecomment-745150420:17,log,logs,17,https://root.cern,https://github.com/root-project/root/pull/6950#issuecomment-745150420,1,['log'],['logs']
Testability,"@chrisburr . Hi, Chris. Thank you!. What do you mean the PR is untested? You mean you didn't run the tests before publishing it? Or Do you mean there's no test covering this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1379#issuecomment-349960342:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/1379#issuecomment-349960342,2,['test'],"['test', 'tests']"
Testability,"@chrisburr Did you build ROOT this time to test the fix? Believe me, It's easier to find the problems if you test it locally. You get the complete errors, we both save time and resources and you're not letting our cold machines crush your hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1379#issuecomment-349968443:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/1379#issuecomment-349968443,2,['test'],['test']
Testability,"@couet ,. I think I could fix the problem in CMake but I need more testing. Hope I can finish the tests today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2376799940:67,test,testing,67,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2376799940,2,['test'],"['testing', 'tests']"
Testability,"@couet . I add testing for fixed `GetMinimum()` / `GetMaximum()` methods of `THStack`. I also add tutorial which shows ""pads"" draw option and how it can be used on ""pre-divided"" canvas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931#issuecomment-2190958818:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/15931#issuecomment-2190958818,1,['test'],['testing']
Testability,@couet . This PR introduces new colors. ; TWebCanvas always transfer list of existing colors to the client - and coded it in compact form into `fOper` field of some JSON object. Thats why it changes. > So some old svg tests (o) are failing because of a changed fill attribute:. This need to be investigated. Most probably some of new colors overrides already existing one and therefore fill attributes of some drawing changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328113076:218,test,tests,218,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328113076,1,['test'],['tests']
Testability,@couet ; In the CMake build log I see:; ```; -- Checking internet connectivity...; -- Yes; ```. does this mean an internet connection is required? (would not be nice when just building the documentation).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887573949:28,log,log,28,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887573949,1,['log'],['log']
Testability,"@couet @ferdymercury how did you test `games.C`? it seems to be broken on both Linux and Windows. And your commit doesn't fix anything and the `games.C` macro fails if `${ROOTSYS}/test` is not in the include path..; And note that after fixing the build system, the key press work just fine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778219512:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778219512,2,['test'],['test']
Testability,@couet I think it's ready for first tests on your end (though not ready to be merged yet).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1075460634:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1075460634,1,['test'],['tests']
Testability,"@couet Sorry, but how do you set up a development environment to do the tests?. I try to set up a Debian environment (from a VM) for build but have encountered dependency conflict. Is there something like a CMSENV to use on LXPLUS? Or should I create a CentOS VM and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1074734670:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1074734670,1,['test'],['tests']
Testability,"@couet could you please revert this commit? It's good that we have a test for this problem, we should keep it :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8492#issuecomment-865021695:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/8492#issuecomment-865021695,1,['test'],['test']
Testability,"@couet rerunning PR tests because they will now pick up your new roottest branch making everything pass, ideally!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9472#issuecomment-1007247553:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/9472#issuecomment-1007247553,1,['test'],['tests']
Testability,"@couet you can merge at your convenience as far as I am concerned.; @ellert thanks for the changes you proposed. I have a curiosity: did you encounter any other failure related to dimensions on disk, especially with IO tests, with Fedora 41?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15735#issuecomment-2165518812:219,test,tests,219,https://root.cern,https://github.com/root-project/root/pull/15735#issuecomment-2165518812,1,['test'],['tests']
Testability,"@couet,. that is more or less the solution I came up with. For me a similar fix with the same logic solved the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2377082849:94,log,logic,94,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2377082849,1,['log'],['logic']
Testability,"@dan131riley For the record, you should consider adding here and/or the commit log, the longer explanation of the mechanism of the problem that you sent by email. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1769#issuecomment-374727132:79,log,log,79,https://root.cern,https://github.com/root-project/root/pull/1769#issuecomment-374727132,1,['log'],['log']
Testability,"@davidlange6, can we pick up this PR in the CXXMODULES IB and test if we bring down memory footprint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1178840502:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1178840502,1,['test'],['test']
Testability,@davidrohr the test that this PR removes does *not* test whether the llvm used by libCling has symbols visible or hidden. That's a different tests that we currently don't have (and that I don't believe we need but I might be wrong).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572070165:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572070165,3,['test'],"['test', 'tests']"
Testability,"@dciangot I forgot to ask, I will not be able to access the file in your mini reproducer?; (I am going to try to test it @ UNL but I wanted to ask anyway); ```;  │  ~/C/root-rntuple/builds │   bearer-tokens ?1  root -l https://212.189.205.141:31094//W.root  ✔ │ 4m 29s  │ 16:08:36 . root [0]; Attaching file https://212.189.205.141:31094//W.root as _file0...; Error in <TWebFile::GetHead>: https://212.189.205.141:31094//W.root?: Forbidden (403); Error in <TWebFile::GetFromWeb10>: https://212.189.205.141:31094//W.root?: Forbidden (403); (TFile *) nullptr; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776812312:113,test,test,113,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776812312,1,['test'],['test']
Testability,"@dciangot I opened a new PR https://github.com/root-project/root/pull/7068 (if you will have a chance to test it, please let me know if it works in your env)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-775033324:105,test,test,105,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-775033324,1,['test'],['test']
Testability,@devajithvs can you try enabling the test in `roottest` that was conditional on the fix: https://github.com/root-project/roottest/pull/1118 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15458#issuecomment-2376659546:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/15458#issuecomment-2376659546,1,['test'],['test']
Testability,"@dpiparo , thanks for the backport. CMSSW tests via https://github.com/cms-sw/root/pull/195 for this change look good. I just have opened https://github.com/cms-sw/cmsdist/pull/8949 to integrate latest v6-30-00-patches changes in to CMSSW 14.0.X",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1896205278:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1896205278,1,['test'],['tests']
Testability,"@dpiparo - is it possible to pull up the logs? Unfortunately, the error message says simply the error message is in a different log file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590#issuecomment-304902488:41,log,logs,41,https://root.cern,https://github.com/root-project/root/pull/590#issuecomment-304902488,2,['log'],"['log', 'logs']"
Testability,@dpiparo ; Event benchmark is similar as before. I have not test CMSSW yet since I do not know a correct version of file need to test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-337007981:17,benchmark,benchmark,17,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-337007981,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@dpiparo @bbockelm ,. Hi Danilo,. Based on current cache replacement policy, the cache will be invalidated (set fIsTransferred to kFALSE) immediately once the first event miss occurs. In my current implementation, each task monitors fIsTransferred and return immediately without doing actual unzipping work. But we still need to create tasks corresponding to the number of baskets. I am wondering if we should add task_group.cancel() function into TTaskGroup interface? In that case, the main thread only needs to cancel all tasks once the cache is invalid. . With event simulation benchmark, I did not see too much difference between task_group wait and cancel. But I guess it could be more efficient once the number of baskets in cache buffer becomes larger.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-335903089:582,benchmark,benchmark,582,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-335903089,1,['benchmark'],['benchmark']
Testability,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-406598298:210,test,test,210,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-406598298,1,['test'],['test']
Testability,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2351#issuecomment-409117535:143,assert,asserts,143,https://root.cern,https://github.com/root-project/root/pull/2351#issuecomment-409117535,1,['assert'],['asserts']
Testability,"@dpiparo @hahnjo No amount of changes to the https://github.com/root-project/root/blob/master/.github/workflows/test-result-comment.yml seem to do literally anything on this PR, I even changed the name of the job and that is not reflected, I don't know what to outside merging this PR as it is (removing the debug commits ofc)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14613#issuecomment-1932088999:112,test,test-result-comment,112,https://root.cern,https://github.com/root-project/root/pull/14613#issuecomment-1932088999,1,['test'],['test-result-comment']
Testability,"@dpiparo @vgvassilev ; I've added the test to `Regression.C`. Would you please take a look?. Below is result of the test when this patch is _not_ applied. ```; FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11); ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************; Script:; --; : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C; --; Exit Code: 1. Command Output (stderr):; --; /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input; // CHECK: { 0, 1, 2, 3, 4 }; ^; <stdin>:35:28: note: scanning from here; (PR180::Foo &) @0x10cf6f060; ^; <stdin>:40:114: note: possible intended match here; File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here; ^. Input file: <stdin>; Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:; <<<<<<; .; .; .; 30: Using raw input ; 31: Not using raw input ; 32: (WithUnnamed::Y &) @0x10cf5b000 ; 33: (WithUnnamed::Y &) @0x10cf61000 ; 34: (X) @0x600000f337a0 ; 35: (PR180::Foo &) @0x10cf6f060 ; check:206'0 X error: no match found; 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14968#issuecomment-2012609888:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/14968#issuecomment-2012609888,6,"['TEST', 'test']","['TEST', 'test']"
Testability,@dpiparo Added test in f8fccd52ffcfc059aa5a664404e04c77d15abc99,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2269#issuecomment-401727093:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/2269#issuecomment-401727093,1,['test'],['test']
Testability,"@dpiparo I fixed the conflicts. There should be a test already, copy-cat from `datasource_csv.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371497635:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371497635,1,['test'],['test']
Testability,"@dpiparo I tested this changes on failing architectures, and it shows right behavior for filemerger test (I can send you screenshot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328911713:11,test,tested,11,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328911713,2,['test'],"['test', 'tested']"
Testability,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3242#issuecomment-453761892:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/3242#issuecomment-453761892,2,['test'],"['test', 'tests']"
Testability,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319763124:306,test,testing,306,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319763124,1,['test'],['testing']
Testability,@dpiparo Please merge if you still think this should go in. Jenkins tests passed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2252#issuecomment-424084961:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/2252#issuecomment-424084961,1,['test'],['tests']
Testability,@dpiparo Surely I can add some new tests and a tutorial. I just wanted to put the code here so it could be reviewed and tested with the current tests. I will add the remaining changes and tests soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328139010:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328139010,4,['test'],"['tested', 'tests']"
Testability,"@dpiparo They are Vc warnings. The first one jumps in test-veccore, which I didn't touch, so I'm not sure I can do anything there... @amadio?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1004#issuecomment-330068881:54,test,test-veccore,54,https://root.cern,https://github.com/root-project/root/pull/1004#issuecomment-330068881,1,['test'],['test-veccore']
Testability,"@dpiparo absolutely right! Nice test!; But, if to build ROOT with Optimized build and try exactly the same example, we have next output:; ```; oksana@oksana-ThinkPad-E470:~/CERN_sources/root-opt/builds$ cat ../../test.C ; #ifdef __FAST_MATH__; aaaa; #endif; =========; root [1] .X ../../test.C ; root [2] ; ```; Could it be connected to llvm/clang/cling interpreter? It is actually mentioned in clang code: https://github.com/root-project/root/blob/dc9a26819b6549b51b7bd380be61235edde8f21f/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Clang.cpp#L2403; It makes sense then because for linux+clang fast math build, the flags are: ; ```; ""-O3 -ffast-math ..""; ````; and it work fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-329006796:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-329006796,3,['test'],['test']
Testability,@dpiparo can you review it? It fails again on Windows only (this time more test failing); I checked and the new tutorial runs successfully on the other platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14844#issuecomment-1999750888:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/14844#issuecomment-1999750888,1,['test'],['test']
Testability,"@dpiparo exactly, I tested with the reproducer in the issue with 6.32.06 and the file saving function is back, this might have been fixed in previous version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16550#issuecomment-2380666298:20,test,tested,20,https://root.cern,https://github.com/root-project/root/pull/16550#issuecomment-2380666298,1,['test'],['tested']
Testability,"@dpiparo in filemerger test I am using R__FAST_MATH(```__FAST_MATH__```), to separate tolerances for fast math and normal builds, in case of clang builds everything works fine, but in case of gcc builds it never detect fast-math build, and as a result filemerger test is failing. I rechecked and the reason is that -Ofast is actually for gcc doesn't define ```__FAST_MATH__``` but only -ffast-math.; After this fix filemerger test is working properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328879766:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328879766,3,['test'],['test']
Testability,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153#issuecomment-446283516:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/3153#issuecomment-446283516,1,['test'],['tests']
Testability,"@dpiparo sure. The problem reported was numerical reproducibility between machines, so we probably want a test with a ref file I guess",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390228823:106,test,test,106,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390228823,1,['test'],['test']
Testability,"@dpiparo we are tunning PR with modules, tests which failed in your PR is actually passing in master, please don't mind about them!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2669#issuecomment-424009706:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/2669#issuecomment-424009706,1,['test'],['tests']
Testability,"@dpiparo what would be a good test for the feature? It's hard to ""prove"" that different threads pass different slots",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/982#issuecomment-329256468:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/982#issuecomment-329256468,1,['test'],['test']
Testability,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319727864:107,test,testing,107,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319727864,2,['test'],"['tested', 'testing']"
Testability,"@dpiparo, Fedora 39 is end-of-life in less than a month: https://endoflife.date/fedora. Do we really want to disable the test on all platforms just for that? Personally, I would rather remove Fedora 39, and maybe add Fedora 41 in a few weeks when it comes out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16684#issuecomment-2415215523:121,test,test,121,https://root.cern,https://github.com/root-project/root/pull/16684#issuecomment-2415215523,1,['test'],['test']
Testability,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15099#issuecomment-2028794682:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/15099#issuecomment-2028794682,4,['test'],"['testing', 'tests']"
Testability,"@eguiraud , cmssw test passed, so feel free to integrate it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8449#issuecomment-863522919:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8449#issuecomment-863522919,1,['test'],['test']
Testability,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623958983:375,test,test,375,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983,8,['test'],"['test', 'testDetails', 'tests']"
Testability,"@eguiraud @pcanal if you think this new extended `RFriendInfo` is the right way to go, I will also change the TTreeProcessorMT behaviour when reconstructing friend trees/chains accordingly and will fix the broken tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-817648039:213,test,tests,213,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-817648039,1,['test'],['tests']
Testability,"@eguiraud @vepadulano What do you think about `GetDataSourceInfo`? Look here at the test of the linked PR:. ```cpp; TEST(RDataFrameInterface, GetDataSourceInfo); {; // trivial/empty datasource; ROOT::RDataFrame df1(1);; EXPECT_EQ(df1.GetDataSourceInfo(), ""trivial datasource"");. // ttree/tchain datasource; TTree tree(""tree"", ""tree"");; ROOT::RDataFrame df2(tree);; EXPECT_EQ(df2.GetDataSourceInfo(), ""TTree datasource"");. // others with an actual fDataSource, like csv; auto df3 = ROOT::RDF::MakeCsvDataFrame(""RCsvDS_test_headers.csv"");; EXPECT_EQ(df3.GetDataSourceInfo(), ""RCsv"");; }; ```. Open for discussion is the info returned for the trivial/empty datasource and the TTree/TChain datasource. All others should be tracked by the respective datasources, see the CSV one in the test. And ofc the name of the function is TBD :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7828#issuecomment-817800833:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/7828#issuecomment-817800833,3,"['TEST', 'test']","['TEST', 'test']"
Testability,@eguiraud Can you propose a PR that add RVec and add an assert?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903#issuecomment-821346370:56,assert,assert,56,https://root.cern,https://github.com/root-project/root/issues/7903#issuecomment-821346370,1,['assert'],['assert']
Testability,@eguiraud Does that test fail in other circumstances?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6404#issuecomment-696672543:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/6404#issuecomment-696672543,1,['test'],['test']
Testability,@eguiraud Here only `testActionHelpers` failed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7473#issuecomment-796862681:21,test,testActionHelpers,21,https://root.cern,https://github.com/root-project/root/pull/7473#issuecomment-796862681,1,['test'],['testActionHelpers']
Testability,@eguiraud In https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_nodes.cxx#L76-L79 did you specifically want that warning to be displayed in stdout and not stderr?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-629068384:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-629068384,1,['test'],['test']
Testability,"@eguiraud In my built, this patch is a workaround for the segfault discussed above:. ```patch; diff --git a/math/vecops/inc/ROOT/RVec.hxx b/math/vecops/inc/ROOT/RVec.hxx; index d9adca8..5900743 100644; --- a/math/vecops/inc/ROOT/RVec.hxx; +++ b/math/vecops/inc/ROOT/RVec.hxx; @@ -414,17 +414,6 @@ public:; /// Return a pointer to the vector's buffer, even if empty().; const_pointer data() const { return const_pointer(begin()); }. - reference operator[](size_type idx); - {; - assert(idx < size());; - return begin()[idx];; - }; - const_reference operator[](size_type idx) const; - {; - assert(idx < size());; - return begin()[idx];; - }; -; reference front(); {; assert(!empty());; @@ -1266,7 +1255,21 @@ public:; return *this;; }. - using SmallVectorTemplateCommon<T>::operator[];; + using reference = typename SmallVectorTemplateCommon<T>::reference;; + using const_reference = typename SmallVectorTemplateCommon<T>::const_reference;; + using size_type = typename SmallVectorTemplateCommon<T>::size_type;; + using SmallVectorTemplateCommon<T>::begin;; +; + reference operator[](size_type idx); + {; + assert(idx < size());; + return begin()[idx];; + }; + const_reference operator[](size_type idx) const; + {; + assert(idx < size());; + return begin()[idx];; + }. template <typename V, typename = std::enable_if<std::is_convertible<V, bool>::value>>; RVec operator[](const RVec<V> &conds) const; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-805945230:478,assert,assert,478,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-805945230,5,['assert'],['assert']
Testability,@eguiraud Is the issues in projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_interface pre-existing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692162782:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692162782,1,['test'],['test']
Testability,"@eguiraud It finally compiled without error after using `g++` instead of `gcc`. ```; g++ -g -O1 $(root-config --libs --cflags) -o xAna_monoZ_preselect.o xAna_monoZ_preselect.C; ./xAna_monoZ_preselect.o ""../../../infiles_NCUGlobal/infiles_signal_Mx2-150_Mv-500_Mx1-1_ctau-1/NCUGlobalTuples_13.root"" ""testOutSignal.root""; ```. [massif.out.433729.txt](https://github.com/root-project/root/files/7423308/massif.out.433729.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-952544605:299,test,testOutSignal,299,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-952544605,1,['test'],['testOutSignal']
Testability,"@eguiraud Looks like an issue with the test. The expected typename is the normalized one, `ROOT::VecOps::RVec<std::int32_t>`. Could you adjust the test and rebase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1140881978:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1140881978,2,['test'],['test']
Testability,@eguiraud Oops! That's a typo in `vecops_rvec.cxx`. Sorry for that.; Is there a way to run the tests locally so that I can test it before pushing up the changes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903#issuecomment-907154577:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/8903#issuecomment-907154577,2,['test'],"['test', 'tests']"
Testability,"@eguiraud Thank you for your detailed response!. I currently create some TDirectories representing different stages of seloctions, and write histograms into it. For some reason, I would like to have TTree output also in some of the stages, and for that I need to use the `Snapshot` method. The way I had thought of (haven't tested yet, sorry) would be creating all the directories first and close the file, snapshotting to that file (not sure if the sub-directory could be, specified), and then open it for histogram writing. I have little knowledge about multi-threading, and was just (naïvely) looking for an RDataFrame anology of creating a TTree inside a TDirectory. It simply seemed strange to have to close the file and reopen. If feasible, it would be great if the (official) way to create a snapshot and to store into a certain sub-directory of a TFile, along with the multi-threading consideration, could be documented, so that users switching from the imperative pattern would be easier to understand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225#issuecomment-958037006:324,test,tested,324,https://root.cern,https://github.com/root-project/root/issues/9225#issuecomment-958037006,2,['test'],['tested']
Testability,@eguiraud Thanks for taking a look! There is no specific reason for these checks. I went through the list and tried to select what makes sense. Please suggest changes to the list as you see fit. As for the tests: it would be nice to exclude the Google stuff from clang-tidy but keep our code under scrutiny. Not sure if this can be done though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8773#issuecomment-891015870:206,test,tests,206,https://root.cern,https://github.com/root-project/root/pull/8773#issuecomment-891015870,1,['test'],['tests']
Testability,"@eguiraud Then I'll drop the corresponding test and example code, and use something else (e.g. vector of `std::string`, `std::pair`, `int`, etc.) instead.; It should build afterward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9286#issuecomment-970656016:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/9286#issuecomment-970656016,1,['test'],['test']
Testability,"@eguiraud Why I submit too many PRs, I see very often errors like here:; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/110020/console; And `gtest-roofit-RDataFrameHelpers-test-testActionHelpers` appears very often",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7469#issuecomment-796749033:198,test,test-testActionHelpers,198,https://root.cern,https://github.com/root-project/root/pull/7469#issuecomment-796749033,1,['test'],['test-testActionHelpers']
Testability,"@eguiraud You couldn't see any error in the PR build on Windows, the tests are not yet enabled. It's what I'm trying to fix. 😉",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5612#issuecomment-628193079:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628193079,1,['test'],['tests']
Testability,"@eguiraud You're right, of course, there were a few more spots to fix. It actually helped to make the code more robust for future changes of the sqlite3 library. Note that now there is a single, well-localized `ifdef` to prevent the use of `sqlite3_errstr` on sqlite3 < 3.7.15. I tested this on CentOS 6 with devtoolset 8. As @Axel-Naumann pointed out, there are cling-related issues (occurred when running unit tests) but the issues around `SQliteDS` are resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5882#issuecomment-645246286:280,test,tested,280,https://root.cern,https://github.com/root-project/root/pull/5882#issuecomment-645246286,2,['test'],"['tested', 'tests']"
Testability,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1633988428:105,test,tests,105,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1633988428,2,['test'],"['test', 'tests']"
Testability,@eguiraud there is something else needed to be backported to fix failing tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5505#issuecomment-622344760:73,test,tests,73,https://root.cern,https://github.com/root-project/root/pull/5505#issuecomment-622344760,1,['test'],['tests']
Testability,"@eguiraud this is another idea I had to work around the problem of long functions mixing `std::string_view` and `new`. In my preliminary tests, this improves performance in general (less heap allocations) so it might be worth it in addition to #9328. If that makes sense, I'd like to investigate `std::initializer_list` instead of arrays with a dummy element, but this seems to work for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329#issuecomment-977843229:137,test,tests,137,https://root.cern,https://github.com/root-project/root/pull/9329#issuecomment-977843229,1,['test'],['tests']
Testability,@eguiraud this should solve the issue with the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5406#issuecomment-616828678:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/5406#issuecomment-616828678,1,['test'],['tests']
Testability,@eguiraud would you mind trying your test-script with the current patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-1864333402:37,test,test-script,37,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-1864333402,1,['test'],['test-script']
Testability,"@eguiraud, could you test https://github.com/root-project/root/pull/9404 on your setup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-990170586:21,test,test,21,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-990170586,1,['test'],['test']
Testability,"@eguiraud, thanks for the detailed analysis. Unfortunately this works as designed and I am not sure if we can fix that behavior in a way that is reasonable when running the tests while keeping it working for the rest. If the issue is just for the test suite, I'd propose slitting these tests into subfolders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-849872614:173,test,tests,173,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-849872614,3,['test'],"['test', 'tests']"
Testability,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799#issuecomment-1260855212:69,test,test,69,https://root.cern,https://github.com/root-project/root/issues/10799#issuecomment-1260855212,1,['test'],['test']
Testability,"@ellert It is strange that the uring warning appears only in this unit test. Other unit tests use uring, too, and I would expect all of them to report uring issues consistently. Could you give me the full printout of the failed unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1088357349:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1088357349,3,['test'],"['test', 'tests']"
Testability,"@ellert again, testing on AArch64 would be greatly appreciated! I made sure that the flag makes it to the relevant places (and emits a warning on x86), but I don't think I have an AArch64 system around for easy verification...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12353#issuecomment-1436592205:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/12353#issuecomment-1436592205,1,['test'],['testing']
Testability,"@ellert for me looks good, even though sadly we can't test it in CI! I remember that on aarch we had insignificant file size increase. Can I ask you please to add better explanation in commit (for the history) why tolerance was increased (e.g because of aach64 and ppc64le).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025#issuecomment-507644748:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/4025#issuecomment-507644748,1,['test'],['test']
Testability,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5158#issuecomment-599448870:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5158#issuecomment-599448870,1,['test'],['test']
Testability,"@ellert quick update: We found a PPC64 node to test, and I can reproduce the problem (`malloc(): invalid next size (unsorted)` at the end of a `Debug` build). I will continue to investigate next week. If you want, you could already submit https://github.com/ellert/root/commit/a71528ca1d5af631d49251ad9525f9d6a875ce7d as a PR, even though it doesn't fix the full problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-846080899:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-846080899,1,['test'],['test']
Testability,"@ellert thanks for the report, I'll need to see if I can get access to a AArch64 system to test. In the meantime, could you see if the symbols appear in the executables or one of the shared libraries? Then they would be in the process and Cling *should* automatically find them...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12294#issuecomment-1429274004:91,test,test,91,https://root.cern,https://github.com/root-project/root/issues/12294#issuecomment-1429274004,1,['test'],['test']
Testability,@enirolf Strange that changes in webgui has effect on ntuple PRs. ROOT source code by 95% do not pass clang-format test - especially header files.; Therefore I often ignore this warning during PRs - otherwise header files formatting will be confusing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15313#issuecomment-2074982491:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/15313#issuecomment-2074982491,1,['test'],['test']
Testability,"@etejedor @dpiparo I changed a test-case to use a different input file for the friend and the main TTree.; If I'm not mistaken, it turns out that we never read the friend in this case, we always read the main tree. If it's true, this is a big fat bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1773#issuecomment-375593136:31,test,test-case,31,https://root.cern,https://github.com/root-project/root/pull/1773#issuecomment-375593136,1,['test'],['test-case']
Testability,"@etejedor I took out the commit that assumed entries in `TEntryList` are always ordered, I will open a separate PR with only that commit where we can discuss that particular issue. I also added a commit that moves back the retrieval of the tree name to `TTreeView` construction time, so we still error out early even if the actual `TChain` construction is now done later, at processing time. AFAIK the PR is ready to merge if tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116#issuecomment-394286698:426,test,tests,426,https://root.cern,https://github.com/root-project/root/pull/2116#issuecomment-394286698,1,['test'],['tests']
Testability,"@etejedor I will add a test with multiple files.; I propose to do the refactoring that moves the `TTreeView` members into `TTreeProcessorMT` to avoid duplication in another PR, as the changes would be quite big (working on it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143#issuecomment-394779115:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/2143#issuecomment-394779115,1,['test'],['test']
Testability,@etejedor We still want/need these tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5361#issuecomment-683612350:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/5361#issuecomment-683612350,1,['test'],['tests']
Testability,@etejedor added comments about the pythonization of `TNamed` and `TObject` to the test. i'll do a PR build to check the code again and merge afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2266#issuecomment-405901021:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/2266#issuecomment-405901021,1,['test'],['test']
Testability,"@etejedor and me finally figured out what's the difference between the builds: The problem only arises if building with C++14 which pulls in `ROOT/RNotFn.hxx`, defining `std::Detail`. Because of the implicit `using namespace std;` this ends up conflicting with `namespace Detail` defined in the `root` prompt. FWIW here's the full `backtrace` from a Debug build (which gives less information by default compared to Release because of `assert`s?!):; ```; #0 0x00007ffff648c37f in raise () from /lib64/libc.so.6; #1 0x00007ffff6476db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6476c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff6484a76 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffec1c4bb1 in llvm::isa_impl_cl<clang::TagType, clang::Type const*>::doit (Val=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:105; #5 0x00007fffec1c296e in llvm::isa_impl_wrap<clang::TagType, clang::Type const*, clang::Type const*>::doit (Val=@0x7fffffffaa08: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:132; #6 0x00007fffec1bf2ff in llvm::isa_impl_wrap<clang::TagType, clang::Type const* const, clang::Type const*>::doit (Val=@0x7fffffffaa48: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:123; #7 0x00007fffec1ba2ee in llvm::isa<clang::TagType, clang::Type const*> (Val=@0x7fffffffaa48: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:143; #8 0x00007fffec1b56b5 in llvm::dyn_cast<clang::TagType, clang::Type const> (Val=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:343; #9 0x00007fffec44dae0 in clang::Type::getAs<clang::TagType> (this=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:6858; #10 0x00007fffec46bf1c in TClingClassInfo::Init (this=0x1933310, tag=...) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingClassInfo.cxx:775; #11 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-900036214:435,assert,assert,435,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-900036214,1,['assert'],['assert']
Testability,"@etejedor from my side, this PR is ready to go! Any further tests desired in the unit-test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396483165:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396483165,2,['test'],"['test', 'tests']"
Testability,"@etejedor thanks for taking a look!. 1. correct. making concurrent usage of different RDFs from different threads safe is the topic of the recently created [ROOT-10694](https://sft.its.cern.ch/jira/browse/ROOT-10694); 2. avoiding re-jitting across computation graphs needs #5356 , but the general machinery is exercised by current tests (demonstrated by the current test failures) and tutorials (results I showed in the PPP were on df104, df105, df106). What kind of test would you like to see? (i.e. what should it test exactly?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329#issuecomment-615292186:331,test,tests,331,https://root.cern,https://github.com/root-project/root/pull/5329#issuecomment-615292186,4,['test'],"['test', 'tests']"
Testability,"@ferdymercury @vvolkl . Thank you for your responses!; I followed the advice and built with version 6.30.04 and the master branch. Unfortunately, the results were the same. Attached are the build logs.; [spack-build-out_root-6.30.04.txt](https://github.com/root-project/root/files/14356955/spack-build-out_root-6.30.04.txt); [spack-build-out_root-master.txt](https://github.com/root-project/root/files/14356957/spack-build-out_root-master.txt). Check the cmake configuration and modify [tree/dataframe/test/CMakeLists.txt](https://github.com/root-project/root/blob/master/tree/dataframe/test/CMakeLists.txt#L47) as follows:; ```diff; --- a/tree/dataframe/test/CMakeLists.txt; +++ b/tree/dataframe/test/CMakeLists.txt; @@ -45,6 +45,7 @@; endif(). ROOT_ADD_GTEST(dataframe_datasetspec dataframe_datasetspec.cxx LIBRARIES ROOTDataFrame); +target_include_directories(dataframe_datasetspec BEFORE PRIVATE ${CMAKE_SOURCE_DIR}/builtins/); ROOT_ADD_GTEST(dataframe_display dataframe_display.cxx LIBRARIES ROOTDataFrame); ROOT_ADD_GTEST(dataframe_ranges dataframe_ranges.cxx LIBRARIES ROOTDataFrame); ROOT_ADD_GTEST(dataframe_leaves dataframe_leaves.cxx LIBRARIES ROOTDataFrame); ```. `BEFORE` and `PRIVATE` refer to other descriptions but do not understand their meaning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769#issuecomment-1956212761:196,log,logs,196,https://root.cern,https://github.com/root-project/root/issues/14769#issuecomment-1956212761,5,"['log', 'test']","['logs', 'test']"
Testability,"@ferdymercury Thanks for this contribution! Test failures are unrelated, so let's merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7237#issuecomment-785852474:44,Test,Test,44,https://root.cern,https://github.com/root-project/root/pull/7237#issuecomment-785852474,1,['Test'],['Test']
Testability,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2244858400:245,log,logic,245,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400,2,['log'],['logic']
Testability,"@ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2058386337:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2058386337,1,['test'],['test']
Testability,"@ferdymercury thanks for the links. I fully agree with Axel's proposal of trying to make all ROOT binaries consistent in their argument parsing and make them POSIX (while keeping the legacy `-long` options valid but hidden). Having never used it, I don't have a strong opinion on the CLI11 library yet. On one hand it seems well maintained and tested on all platforms, which is great, and being header-only certainly makes it convenient to use. On the other hand it's quite big and I wonder if we need enough features from it as to justify its size. . In any case I think we should revive the topic and understand if there were any blockers to it or if it was simply not picked up by anyone in the past 3 years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2245114452:344,test,tested,344,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2245114452,2,['test'],['tested']
Testability,"@ferdymercury à propos `roottest-root-hist-h2root`: I think this was clarified by the last round of tests. We see a failure on the GPU platform, which is known and unrelated to your changes. If you agree, I would proceed with the merge of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2446062781:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2446062781,1,['test'],['tests']
Testability,"@ferdymercury, it seems that in the first case it was a debug build while the second was a release build. However, looking at https://github.com/root-project/cling/blob/master/lib/Interpreter/DynamicLookup.cpp#L764-L766, I'm not sure that the assertion is useful, given that it seems to be safe to exit the function if the `CompoundLiteralExpr` node was not built. @vgvassilev, any preferences? Should I remove the `assert()`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8389#issuecomment-948793224:243,assert,assertion,243,https://root.cern,https://github.com/root-project/root/issues/8389#issuecomment-948793224,2,['assert'],"['assert', 'assertion']"
Testability,"@ferdymercury, the test failure on alma8 is real",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16570#issuecomment-2393371037:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/16570#issuecomment-2393371037,1,['test'],['test']
Testability,"@flagarde apologies for not making progress with this in a reasonable time. Would you be able to address the conflict by rebasing? We will then re-run the tests to see what the CMake error is. It might just be a CMake too old; we have bumped the required CMake version to 3.16 in the meantime, so that might have fixed itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8941#issuecomment-1007260850:155,test,tests,155,https://root.cern,https://github.com/root-project/root/pull/8941#issuecomment-1007260850,1,['test'],['tests']
Testability,@fylux what about clang-formatting? Can you add please as a separate commit? Logs are here https://travis-ci.org/root-project/root/jobs/553883729,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-508376676:77,Log,Logs,77,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-508376676,1,['Log'],['Logs']
Testability,@gargvaibhav64 Please check the failing tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3584#issuecomment-486767616:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/3584#issuecomment-486767616,1,['test'],['tests']
Testability,"@georgtroska I cannot reproduce the problem (i.e. it compiles fine on CentOS and Windows). Could you try to add `message(STATUS ""clad = ${clad}"")` in `core/metacling/src/CMakeLists.txt`, at line 93, as shown below:; ```; # We need to paste the content of the cling plugins disabling link symbol optimizations.; set(CLING_PLUGIN_LINK_LIBS); message(STATUS ""clad = ${clad}""); if (clad); ```; and type `cmake .` in the build directory? You should see something like:; ```; -- [...]; -- And then fallback to: 'c++'; -- clad = OFF; -- Performing Test found_stdstringview; -- [...]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872164716:541,Test,Test,541,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872164716,1,['Test'],['Test']
Testability,"@georgtroska I updated the PR with a slightly different test for clad, and added a protection for the linker (even if I don't understand why it still tries to link with `clad=OFF`...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872203301:56,test,test,56,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872203301,1,['test'],['test']
Testability,@gganis Could you check why the test are failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4888#issuecomment-579895834:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/4888#issuecomment-579895834,1,['test'],['test']
Testability,"@goi42 ah #4649 was merged some time ago, I see! I got it confused with #4965, sorry!. So this can go in, but I would like to have a test for the fixed usecase. I don't know how to check that `TFile` printed an Error, do you by chance? I'll ask around :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585258137:133,test,test,133,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585258137,1,['test'],['test']
Testability,"@grimmmyshini no, still red in the nightlies (if anything, it got more likely), for example https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/ and https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/. AddressSanitizer still shows the same problem as last week: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12529#issuecomment-1493862565:232,test,testReport,232,https://root.cern,https://github.com/root-project/root/pull/12529#issuecomment-1493862565,6,['test'],"['test', 'testReport']"
Testability,"@guitargeek , I am trying to test the latest root master changes and notice that cmssw code https://github.com/cms-sw/cmssw/blob/master/PhysicsTools/Utilities/src/SideBandSubtraction.cc#L415 fails due to this change. Should I update cmssw to use something like the following now?; ```; fit_result = ModelPDF->fitTo(*Data, RooCmdArg(""r"", 0));; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747#issuecomment-1031162829:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/9747#issuecomment-1031162829,1,['test'],['test']
Testability,"@guitargeek , cmssw tests via https://github.com/cms-sw/root/pull/205",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507#issuecomment-2000458697:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2000458697,1,['test'],['tests']
Testability,"@guitargeek , latest root master does not build. We get build errors like [a]. Looks like https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooAbsCollection.h#L411-L418 also need cleanup ( note that note master is [6.35](https://github.com/root-project/root/commit/f1edc0f1b26a9ef675c035ba9160a17be2ad69dc) now); ```; In file included from input_line_10:17:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsAnaConvPdf.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsPdf.h:19:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsReal.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooArgList.h:19:; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsCollection.h:417:2: error: ""Please remove this unneeded code.""; #error ""Please remove this unneeded code.""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16821#issuecomment-2458990554:443,test,tests,443,https://root.cern,https://github.com/root-project/root/pull/16821#issuecomment-2458990554,10,['test'],"['testBuildDir', 'tests']"
Testability,"@guitargeek @grimmmyshini any progress on this problem? The test is now failing on many platforms in the nightly builds, and also sometimes in PR builds, I think...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12529#issuecomment-1493838548:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/12529#issuecomment-1493838548,1,['test'],['test']
Testability,@guitargeek Applied all requested review suggestions and rebased into 4 more compact logical commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966#issuecomment-1194204867:85,log,logical,85,https://root.cern,https://github.com/root-project/root/pull/10966#issuecomment-1194204867,1,['log'],['logical']
Testability,"@guitargeek I think these windows issues should be resolved with my most recent commit, at least I ensured that compilation without MultiProcessing enabled gives no errors or warnings. I cannot fully test a windows compilation since I have no windows machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791#issuecomment-1345665219:200,test,test,200,https://root.cern,https://github.com/root-project/root/pull/11791#issuecomment-1345665219,1,['test'],['test']
Testability,"@guitargeek If the class *had* supported I/O before, the situation would be even worse: In general; - You would need to write an instance of the class to a file, and save this file somewhere in the test suite (best achieved by checking out ROOT before all the changes).; - You would need to write a schema evolution rule to convert old data members to new ones (not in this case, since removing).; - You would need to add a test that reads back the old class instance, and tests that the new (in-memory) version is in a consistent state. No harm done here, since you can just revert the one line, but please double check that none of the other PRs destroy I/O capabilities of RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8569#issuecomment-878853266:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/8569#issuecomment-878853266,3,['test'],"['test', 'tests']"
Testability,@guitargeek Maybe commit a comment on how to create the reference file above the test. Sorry that I didn't do that already.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832016284:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832016284,1,['test'],['test']
Testability,@guitargeek Nevermind. I just realized that I can still see the problem when running some of the test :(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2274296567:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2274296567,1,['test'],['test']
Testability,"@guitargeek Thanks for looking into this. I don't see any fixes for this issue, it would require to ""duplicate"" the definition in the class'es ""main"" translation unit, and there are quite a few definitions to go through. Here is an MRE with c++11, but should be identical for c++14:; ```; # root-config --version; 6.24/06; # root.exe --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on Sep 02 2021, 14:20:23; From tags/v6-24-06@v6-24-06; # g++ --version; g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11); Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. # cat test.cxx ; #include <vector>; #include <TChain.h>. int func() {; std::vector<long long> v;; v.push_back(TChain::kBigNumber); // fail; v.push_back(TChain::kBigNumber - 1); // fine; return v.size();; }; # g++ -O0 -std=c++11 `root-config --cflags --libs` test.cxx -o test; /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o: In function `_start':; (.text+0x20): undefined reference to `main'; /tmp/ccxkwRYF.o: In function `func()':; test.cxx:(.text+0x1a): undefined reference to `TChain::kBigNumber'; collect2: error: ld returned 1 exit status; ```. I don't mind if this gets closed with wontfix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9422#issuecomment-991995228:717,test,test,717,https://root.cern,https://github.com/root-project/root/issues/9422#issuecomment-991995228,4,['test'],['test']
Testability,"@guitargeek The build failed in a strange way. Did jenkins build branch `[cling_cmd_history_config](https://github.com/jiangyilism/root/tree/cling_cmd_history_config)` of this pull request? From https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/ and https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/ , It built root master branch cdd1bdf3b46 . Which does not contain my branch/commits . And the failing test [roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/) . seems related to several distrdf changes in master branch recently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1235246485:275,test,testReport,275,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1235246485,3,['test'],"['test', 'testReport']"
Testability,@guitargeek Waiting for test build on mac-beta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16359#issuecomment-2326154917:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/16359#issuecomment-2326154917,1,['test'],['test']
Testability,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202#issuecomment-2091419386:421,test,tests,421,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386,4,"['log', 'test']","['logic', 'tests']"
Testability,@guitargeek can you please take care of `testLikelihoodJob`? That one is failing on `mac13arm/cxx17` since forever...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12832#issuecomment-1637457812:41,test,testLikelihoodJob,41,https://root.cern,https://github.com/root-project/root/issues/12832#issuecomment-1637457812,1,['test'],['testLikelihoodJob']
Testability,"@guitargeek great work! :tada:. There are still two failing tests (`gtest-roofit-roostats-test-testSPlot` and `tutorial-roofit-rf110_normintegration-py`) with the same initial symptoms that this issue was about, a `heap-use-after-free` in `RooAbsCollection::empty()`. Do you want me to open a new issue for the two? (`tutorial-roofit-rf104_classfactory-py` seems to fail for other reasons, not sure...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10009#issuecomment-1218164394:60,test,tests,60,https://root.cern,https://github.com/root-project/root/issues/10009#issuecomment-1218164394,2,['test'],"['test-testSPlot', 'tests']"
Testability,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221#issuecomment-1222045554:89,test,test-testSPlot,89,https://root.cern,https://github.com/root-project/root/issues/11221#issuecomment-1222045554,1,['test'],['test-testSPlot']
Testability,"@guitargeek it seems this generates several segfaults, basically on all plarforms, but only for some tests: do you manage to make sense of those?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15310#issuecomment-2448305785:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/15310#issuecomment-2448305785,1,['test'],['tests']
Testability,"@guitargeek too much time passed and I cannot restart the builds. Do you feel like rebasing so to trigger the tests and then, if satisfied, merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10470#issuecomment-2076545854:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/10470#issuecomment-2076545854,1,['test'],['tests']
Testability,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228#issuecomment-1265166506:268,test,test,268,https://root.cern,https://github.com/root-project/root/pull/11228#issuecomment-1265166506,1,['test'],['test']
Testability,"@guitargeek, can you remind me which was the test case that we had disabled on Windows and we found out that it mostly works now? I thought it was `testRooFuncWrapper.cxx` but I could not find any windows-related ifdefs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1937836211:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1937836211,2,['test'],"['test', 'testRooFuncWrapper']"
Testability,"@gwmyers sorry for the late reply and thank you so much for this contribution :smile: ! I agree with the implementation, I took the liberty of modifying locally your changes also including a test. I would like to push them to your branch to update this PR if you are okay with it, let me know :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15476#issuecomment-2135501212:191,test,test,191,https://root.cern,https://github.com/root-project/root/pull/15476#issuecomment-2135501212,1,['test'],['test']
Testability,"@hageboeck Ok, here:. ```; /usr/bin/cmake3 -DCMAKE_CXX_FLAGS_RELEASE=""foo"" /path/to/src. ...; -- Compiler flags for CMAKE_CXX_FLAGS_RELEASE are not set to ROOT's default values because the variable was explicitely set.; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: linux; -- ROOT Compiler: GNU 4.8.5; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = 'foo'); -- Compiler Flags: -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread foo; ...; ```. I've updated the PR. Does this look good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-822487104:234,Test,Test,234,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-822487104,2,['Test'],['Test']
Testability,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675412995:101,test,test,101,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995,2,['test'],['test']
Testability,@hageboeck do you know if these failures are something expected in projectroot.test.test_stressroostats_minuit2:; ```RooUnitTest ERROR: comparison of value 2.32635 fails comparison with reference 2.408916; Test 34 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Ratio-Of-Profiled-Likelihoods ............. FAILED; RooUnitTest ERROR: comparison of value 2.40892 fails comparison with reference 2.512144; Test 35 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Profile-Likelihood-One-Sided-Discovery .... FAILED```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059#issuecomment-666214454:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/6059#issuecomment-666214454,3,"['Test', 'test']","['Test', 'test']"
Testability,@hageboeck new and improved logic that should fix the test failures -- can you take a look again please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5356#issuecomment-619967582:28,log,logic,28,https://root.cern,https://github.com/root-project/root/pull/5356#issuecomment-619967582,2,"['log', 'test']","['logic', 'test']"
Testability,@hageboeck retesting since Jenkins logs are gone :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-666235299:35,log,logs,35,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-666235299,1,['log'],['logs']
Testability,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5292#issuecomment-609700306:380,assert,asserts,380,https://root.cern,https://github.com/root-project/root/pull/5292#issuecomment-609700306,3,['assert'],"['assertion', 'asserts']"
Testability,"@hahnjo , I have opened https://github.com/cms-sw/root/pull/192 and will start testing it once ppc64le Integration Build (IB) based on ROOT master is available ( hopefully tomorrow morning)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1865265443:79,test,testing,79,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1865265443,1,['test'],['testing']
Testability,"@hahnjo , what do you get when run the following cmmands on lxplus8; ```; > ssh lxplus8; > export SITECONFIG_PATH=/cvmfs/cms-ib.cern.ch/SITECONF/local; > cd /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-20-2300; > eval `scram run -sh`; > cd /tmp/`whoami`; > cmsRun $CMSSW_BASE/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ```; normally it should read the input file from `root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1686034460:344,test,test,344,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1686034460,1,['test'],['test']
Testability,"@hahnjo - could you, please trigger the tests? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1944120342:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1944120342,1,['test'],['tests']
Testability,@hahnjo @devajithvs @vgvassilev I can enable these tests for 2-3 platforms in master: what do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957#issuecomment-2076563483:51,test,tests,51,https://root.cern,https://github.com/root-project/root/issues/6957#issuecomment-2076563483,1,['test'],['tests']
Testability,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1585584886:214,test,tested,214,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886,8,['test'],"['test', 'tested', 'tests']"
Testability,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2379654469:608,test,tests,608,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469,2,['test'],['tests']
Testability,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:; ```; nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root; ```; Failures can be found on CI.; * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613; * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5; Latter comes with a different set of linker errors:; ```; [ 70%] Linking CXX executable src/rootcling_stage1; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':; (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':; (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1674281649:379,log,logs,379,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1674281649,1,['log'],['logs']
Testability,"@hahnjo Thanks for the comment! I can move it there, but do I really need to derive from TRandomEngine? The parent methods are for double Rndm(), which does not seem very useful to me.; This generator is a binary register generator, so rather a quite different structure, and it is not intended to be used as a normal generator, but rather as a test scenario or helper math functions for electronics testing. It also is inherently templated, etc. It returns an array rather than just a number Rndm(). See https://github.com/root-project/root/pull/8798/files#diff-2e848ceefaff2e24c9b2970fb86a8da1d3d00603fc4f48f920421e603198fab2. Wrt tests, I will 'copy' the mentioned tutorial as 'test' once it's clear where this class should go. Thanks for the review!! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798#issuecomment-2078772470:345,test,test,345,https://root.cern,https://github.com/root-project/root/pull/8798#issuecomment-2078772470,8,['test'],"['test', 'testing', 'tests']"
Testability,"@hahnjo `countIncludePaths` is fine to fail with `-Dclingtest=On` - that's exactly what we're trying to catch with this test :-) We could filter a bit (better), maybe? In the end what we want to catch with this test is CMake changes (e.g. during upgrade) or rootcling changes that inject a load of irrelevant / wrong `-I`s. We had an instance of that in the past.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-845925405:120,test,test,120,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-845925405,2,['test'],['test']
Testability,"@hahnjo for `vector<char>` it's all fine, there is actually a test for it [here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/test/stl_vector.py#L18) and it succeeds, meaning that our pythonization for `std::vector` runs fine. The fact that `value_type` for `vector<char>` in Python is the Python string `""char""` is due to another pythonization injected by cppyy itself [here](https://github.com/root-project/root/blob/07932d78211d0ac5fdb198ac2260c35530cb9647/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx#L1159). Simple test:. ```python; >>> import ROOT; >>> a = ROOT.std.vector['char'].value_type; >>> a; 'char'; >>> type(a); <class 'str'>; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11592#issuecomment-1282453903:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/11592#issuecomment-1282453903,3,['test'],['test']
Testability,"@hahnjo hm that's an interesting clue, but then I still don't fully understand why `RooFit::TestStatistics::RooUnbinnedL` would give a different answer, because it also just calls `RooAbsPdf::extendedTerm`, so it should still get the exact same result... Or is the problem that the FMA operation on the different parts of the sum (the likelihood is calculated over multiple event ranges in the test that is failing, which are summed afterwards) has higher rounding errors on non-x86 so that in the end the result indeed differs?. Or, even more problematically, could such FMA operations also cause similar rounding errors on x86 so that EXPECT_EQ indeed becomes impossible (and I just got lucky with the current parameters on x86)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1544370239:92,Test,TestStatistics,92,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1544370239,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,@hahnjo thanks a lot for fix! (and thanks to @mrodozov for reporting and testing!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8239#issuecomment-849566479:73,test,testing,73,https://root.cern,https://github.com/root-project/root/pull/8239#issuecomment-849566479,1,['test'],['testing']
Testability,"@hahnjo that's fair; but I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes.; I tried adding appending `-Wno-error` to the CMakeLists of some directories (like `interpreter`), but it didn't really work (I guess `-Werror` gets added after it so it suppresses the other flag) and even if it did it looks sketchy. Not sure what's the best way to approach this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173375106:76,test,tested,76,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173375106,1,['test'],['tested']
Testability,"@hahnjo there is no stack trace unfortunately, just the assertion failure message. Were you able to reproduce yourself? I can reproduce on both my laptop and desktop machines, Ubuntu and CentOS7 with master, but not e.g. on lxplus. As for the use of `isa_and_nonnull`, @Axel-Naumann can better comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899293659:56,assert,assertion,56,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899293659,1,['assert'],['assertion']
Testability,"@hahnjo, looks like the test failures in #13139 that were fixed by this commit are gone. Any idea why?. @smuzaffar, can we test this PR for cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14777#issuecomment-1954936179:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/14777#issuecomment-1954936179,2,['test'],['test']
Testability,"@hahnjo, thanks for working on this! Could you share some more information about the test failures? . Just like you, I am quite puzzled why that fixes any tests... The only reason that I can think of is we did not properly reverted https://github.com/vgvassilev/clang/commit/fce26074d415c33196632442e344b5c43efba6e2 which does not seem the case... Can you remove the fixup patch to see current failures?. PS: Maybe somehow clad picks up old headers/libraries?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824616694:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824616694,2,['test'],"['test', 'tests']"
Testability,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218522298:20,test,test,20,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218522298,2,['test'],['test']
Testability,"@hahnjo; > I'm not sure if it's a good idea to disguise FreeBSD as Linux by including SetUpLinux, did you evaluate creating a separate SetUpBSD or something like that?. indeed I have thought about it, but laziness took over at this stage since fbsd is apparently similar enough for a first try. I'll separate it out. > Tests should pass on Linux. It's possible that there is some common problem that makes multiple / many tests fail. Probably needs to be looked at in more detail. luckily most tests seem to pass on linux with my branch. The failed ones I think are related to whatever I did not want to install (dependency-wise); On FreeBSD the situation might be very similar since I keep a pretty minimal system. A couple do have me worried though, like the threading stuff and there is a number of std container/wrapper streaming tests that fail (e.g. roottest-root-io-cpp11Containers-forwardList) plus some more IO related stuff, I suspect some different conventions in the linking chain, who knows, a root internals expert might find the issue much faster than I can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1587190402:319,Test,Tests,319,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1587190402,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"@hahnjo; I think the issue is maybe that this test uses:. ```; static UInt_t id = 0;; TTree *data = new TTree(name, name);; data->Branch(""EventNumber"", &id, ""EventNumber/I"");; ```. but later:. ```; Float_t fevNum;; fReader.AddSpectator(""EventNumber"", &fevNum);; tree->SetBranchAddress(""EventNumber"", &fevNum);; ```. In contrast, TestCrossValidationIntVar seems to correctly use two variables to properly read the tree and spectate:. ```; Int_t uid;; Float_t fid;; reader.AddSpectator(""EventNumber"", &fid);; tree->SetBranchAddress(""EventNumber"", &uid);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010#issuecomment-2079405188:46,test,test,46,https://root.cern,https://github.com/root-project/root/issues/10010#issuecomment-2079405188,2,"['Test', 'test']","['TestCrossValidationIntVar', 'test']"
Testability,@henryiii Have you tried using the code after the patch? I remember seeing extra test failures with this patch compared to what we currently have (https://github.com/root-project/root/pull/1689#issuecomment-380143670).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1843#issuecomment-387644314:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/1843#issuecomment-387644314,1,['test'],['test']
Testability,"@henryiii I was about to merge this locally, but when I tested it, I realized that the changes introduced here (porting to use C bindings for MPI, but not only) actually breaks more tests. I think we will have rework the changes and separate the move to C bindings from other functional changes that are currently in the same commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371473009:56,test,tested,56,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371473009,2,['test'],"['tested', 'tests']"
Testability,"@henryiii If you configure ROOT with `-Dtesting=ON -Droottest=ON`, then you can run the tests with `ctest -R minuit2`, but it may also be important to run `ctest -R roostats` (or all tests, really, since some mathcore tests also use Minuit2). However, to see the failures, just the Minuit2 tests are enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371488120:88,test,tests,88,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371488120,4,['test'],['tests']
Testability,"@ianna, this is the implicit conversion from a tuple of arguments: https://github.com/wlav/CPyCppyy/commit/eec92e53af6e8eb0c89fe27332cdc23179059bb7. It is only accepted for C++ functions that are temporaries (const ref, by value, move), whereas returning a proxy object directly works in all cases except moves. In principle I could make both work in all cases, but this seems to be more logical, especially since methods could be overloaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12580#issuecomment-1492017964:388,log,logical,388,https://root.cern,https://github.com/root-project/root/pull/12580#issuecomment-1492017964,1,['log'],['logical']
Testability,"@iarspider Did your tests indicate that this is a regression introduced by that commit specifically, or that this issue was simply not there yet at the time of that commit and it could be any commit since then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1983530703:20,test,tests,20,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983530703,2,['test'],['tests']
Testability,"@ikabadzhov i won't merge this for now. When you have time please check the difference between master, master + this patch and any alternative version you come up with on a dedicated micro-benchmark.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9378#issuecomment-986022674:189,benchmark,benchmark,189,https://root.cern,https://github.com/root-project/root/pull/9378#issuecomment-986022674,1,['benchmark'],['benchmark']
Testability,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2313#issuecomment-412067083:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/2313#issuecomment-412067083,1,['test'],['test']
Testability,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):; ```; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->; 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]; ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2259#issuecomment-401342291:76,log,logs,76,https://root.cern,https://github.com/root-project/root/pull/2259#issuecomment-401342291,3,"['log', 'test']","['logs', 'test']"
Testability,"@jalopezg-git much better, but still not good enough:; ```; C:\root-dev\build\x86\debug_test\tree\ntuple\v7\test>Debug\ntuple_basics.exe; Running main() from C:\root-dev\build\x86\debug_test\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; [==========] Running 18 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.ReconstructModel; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RNTupleSerialize.cxx:1397 in class ROOT::Experimental::RResult<void> __cdecl ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void *,unsigned int,class ROOT::Experimental::RNTupleDescriptorBuilder &)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (3018 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13452#issuecomment-1678063438:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/13452#issuecomment-1678063438,5,['test'],"['test', 'tests']"
Testability,"@jalopezg-r00t I have rebased on top of your changes. (Thanks for the improvements!). Would you mind taking a look? I am not sure on the new logic of replaceCollaborationDiagrams, I have added it as a final-step, but it's not finding it. Also, in my previous version, I had parallelized makeCollaborationDiagrams.sh, see https://github.com/root-project/root/blob/9e1f918b5c0b6eee4ff22155e1f2bdaaf3172bb6/documentation/doxygen/makelibs.sh. I do not see something similar when you call bash makeCollaborationDiagrams without -j. Is this because that step is taken care later by replace? Or could my parallelization be backported into your new script?. Cheers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1180920156:141,log,logic,141,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1180920156,1,['log'],['logic']
Testability,"@jalopezg-r00t I obviously tried with master 😉 ; ```; root [0] int test[]={2,4,6,8,10};; root [1] test[4]; (int) 2; root [2] test[4]=20;; root [3] test[4]; (int) 20; root [4] test[0]; (int) 20; root [5] test; (int [5]) { 20, 4, 6, 8, 10 }; root [6]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1068057569:67,test,test,67,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1068057569,6,['test'],['test']
Testability,"@jalopezg-r00t I'll have to make several tests, `TerminalDisplayWin` is very sensitive to this kind of change, and it might create many side effects...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10078#issuecomment-1062196190:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/10078#issuecomment-1062196190,1,['test'],['tests']
Testability,"@jblomer , we are trying to test latest root master changes in [CMSSW](https://github.com/cms-sw/cmsdist/pull/8973) and our build failed with errors like [a]. Looks like this change is causing cmssw to fail. I guess we need to update cmssw to use `model.GetDefaultEntry()->GetPtr<T>(name)` instead of `model.Get<T>(name)` ... right? What about `addField<T>()` calls?. We also want same cmssw code to work for ROOT 6.26 and above. So should we add some `#if ROOT_VERSION_CODE >= ROOT_VERSION(6,31,0)` blocks ?. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6f60ec/37085/build-logs/PhysicsTools/NanoAOD/log.html; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:38: error: 'class ROOT::Experimental::RNTupleModel' has no member named 'Get'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:42: error: expected primary-expression before 'bool'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc: In member function 'void NanoAODRNTupleOutputModule::CommonEventFields::createFields(ROOT::Experimental::RNTupleModel&)':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:28: error: expected primary-expression before '>' token; 77 | model.AddField<UInt_t>(""run"", &m_run);; | ^; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:30: error: left operand of comma operator has no effect [-Werror=unused-value]; 77 | model.A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14454#issuecomment-1914756475:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/14454#issuecomment-1914756475,4,"['log', 'test']","['log', 'logs', 'test', 'tests']"
Testability,"@jblomer : I added few tests equivalent to the Davix tests (sorry for the lack creativity) and I also took the liberty and modified `root://eospublic.cern.ch//eos/root-eos/xrootd.test` so it is in line with `http://root.cern.ch/files/davix.test`. ```; ctest -I 164,165; Test project /home/simonm/git/root-my/buildtmp; Start 164: gtest-net-davix-test-RRawFileDavix; 1/2 Test #164: gtest-net-davix-test-RRawFileDavix ..... Passed 0.20 sec; Start 165: gtest-net-netxng-test-RRawFileNetXNG; 2/2 Test #165: gtest-net-netxng-test-RRawFileNetXNG ... Passed 0.05 sec; ```. However running the full test suite yielded some failures:. ```; 99% tests passed, 18 tests failed out of 2101. Label Time Summary:; cling = 69.10 sec; longtest = 1541.18 sec; matrix = 0.22 sec; multithreaded = 206.29 sec; python_runtime_deps = 27.45 sec; regression = 68.69 sec; roottest = 69.32 sec; tutorial = 1559.92 sec. Total Test time (real) = 5594.32 sec. The following tests FAILED:; 	 3 - pyunittests-pyroot-dependency-versions (Failed); 	 56 - pyunittests-pyroot-numbadeclare (Failed); 	 57 - test-import-numba (Failed); 	918 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed); 	920 - test-import-pandas (Failed); 	961 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Failed); 	962 - test-import-numba (Failed); 	1219 - roottest-python-JupyROOT-cppcompleter_doctest (Failed); 	1220 - roottest-python-JupyROOT-handlers_doctest (Failed); 	1221 - roottest-python-JupyROOT-utils_doctest (Failed); 	1222 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1223 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1224 - roottest-python-JupyROOT-thread_local_notebook (Failed); 	1225 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 	1226 - roottest-python-JupyROOT-tpython_notebook (Failed); 	1227 - roottest-python-JupyROOT-Cpp_IMT_Canvas_notebook (Failed); 	1444 - roottest-root-html-runMakeIndex (Failed); 	1627 - roottest-root-meta-execTypedefList-auto (Failed); ```. I don't think it's related to the P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-948823698:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-948823698,15,"['Test', 'test']","['Test', 'test', 'test-RRawFileDavix', 'test-RRawFileNetXNG', 'tests']"
Testability,"@jblomer : thanks a lot for your comments, I will address them shortly!; ; >One thing I'd like to discuss before merging is how we can unit test the code. If there is a stable, publicly available XRootD >service with test data, we can use the RRawFileDavix unit test as a blueprint. Otherwise, given that we have access to the xrootd >library, perhaps we can spawn a simple ad-hoc server in another thread. Well, I think one nice thing that we could do is to have an XRootD server with an HTTP plugin exporting same files with both root and HTTP protocols. Then we could simply run all the tests you currently have for the `RRawFileDavix` also for `RRawFileNetXNG`. If you have some stress tests we could even use them to benchmark the two protocols.; Could we use `root.cern.ch` to do this? Otherwise, I can create a small testing service, I would need to see what machine I can get.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-922713482:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-922713482,14,"['benchmark', 'test']","['benchmark', 'test', 'testing', 'tests']"
Testability,"@jblomer @bellenot . `arc4random_buf()` looks like preferable method to get cryptographic random numbers and on newer Linux it provided with `<stdlib.h>`.; But on Mac or Ubuntu or alma it is not a case. ; On some platforms (including Mac) one can use `libbsd` - but again not always.; And finally there is `read_random` function. . Seems to be, one need to test all them one after another with `CHECK_CXX_SOURCE_COMPILES` to be able use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1985724668:357,test,test,357,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985724668,1,['test'],['test']
Testability,"@jblomer I added logging in 1916d13c83. Logged errors look like: ; ```text; [ RUN ] RIoUring.IsAvailable; io_uring is not available; Error initializing io_uring: Invalid argument; At:; ROOT::Internal::RIoUring::RIoUring(size_t) [/home/max/projects/rootdev/root/io/io/inc/ROOT/RIoUring.hxx:31]; ```. I ran into a weird error when I was messing around making the `io_uring_queue_init` fail with crazy ring sizes like 10000 where any other `io_uring_queue_init` calls (even from separate processes!) failed. It's possible there's a leak on our end, but am I pretty sure this is actually a resolved issue on the `liburing` side (https://github.com/axboe/liburing/issues/157). I am running an affected version (5.7.1) so that could be an explanation. I will keep an eye out for this in the future in case it's indeed my fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-664636722:17,log,logging,17,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-664636722,2,"['Log', 'log']","['Logged', 'logging']"
Testability,@jblomer the failure at https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/145821/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_ntuple/ seems real -- we get a different type name for mac 11..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1135499768:104,test,testReport,104,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1135499768,2,['test'],"['test', 'testReport']"
Testability,"@jblomer. > My suggestion would be: own header, Internal namespace. ok, left as is. > and a free factory method in the Internal namespace. With https://github.com/root-project/root/pull/14521, we get `ROOT::Experimental::Internal::CreateRNTupleWriter` - is that sufficient? (I'll need to update the test one that PR is merged). @pcanal. > This is related but different from writing into the file `/dev/null` :). Indeed, `RPageNullSink` avoids the bookkeeping overhead to maintain column ranges and build descriptors (as well as their serialization).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14502#issuecomment-1923386097:299,test,test,299,https://root.cern,https://github.com/root-project/root/pull/14502#issuecomment-1923386097,1,['test'],['test']
Testability,"@jiangyilism, thanks for your patch! Looks reasonable approach to me. Can you add some tests for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1251393324:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1251393324,1,['test'],['tests']
Testability,"@jknedlik: the tests are failing because the new constructor is ambiguous: you should set the 'lurl' as in my example, as second argument, without default:; `; TNetXNGFile(const char *url, const char *lurl, Option_t *mode="""", const char *title="""",Int_t compress=1, Int_t netopt=0, Bool_t parallelopen=kFALSE);; `; otherwise the two constructors are indistinguishable when called at run time.; (My suggestion for two constructors addressed a link time problem, when default values are ignored, making code expecting the old signature to fail linking).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2751#issuecomment-466987840:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/2751#issuecomment-466987840,1,['test'],['tests']
Testability,"@junaire tests *should* be clean in CI builds, as you can see for this PR. Any failures are introduced by the code changes, possibly due to exposing other issues (as was the case here, leading to this fix). And it's not only some obscure platforms, but both macOS and two of the three Linux platforms. But we should discuss this on the PR itself, not here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273026077:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273026077,1,['test'],['tests']
Testability,"@junaire, can you test if this solves also your problems?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272333121:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272333121,1,['test'],['test']
Testability,"@kamahori Jenkins results of tests are not available for people without CERN account, I am sorry for this. Windows failure is not connected with your test, but is actually infrastructure configuration issue (you need to fork https://github.com/root-project/roottest and it will be gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-593975063:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-593975063,2,['test'],"['test', 'tests']"
Testability,"@kamahori no worries about test failures, it is unrelated to your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-603096683:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-603096683,1,['test'],['test']
Testability,@kft I updated the tests to reproduced the issues you reported and everything match your description ... except that I see a success for 'char'. How does it fail for you?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-852418652:19,test,tests,19,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-852418652,1,['test'],['tests']
Testability,"@kgertsenberger ; As you can see, I merged your PR and fix several compiler warnings afterwards - see #4017 ; If you can implement methods for other plugins - it would be grate. ; Even better if one could provide testing in roottest - one could use SQLite, which is very simple to handle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-507209448:213,test,testing,213,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-507209448,2,['test'],['testing']
Testability,@kgertsenberger ; Can you test https://github.com/root-project/root/pull/7134; It also includes two other bugfixes.; Please try statement with binary and without binary data - if it still works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-773455484:26,test,test,26,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773455484,1,['test'],['test']
Testability,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:; ```diff; diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx; index 2a127888a2..9deb3af147 100644; --- a/graf3d/eve7/inc/ROOT/REveElement.hxx; +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx; @@ -16,26 +16,13 @@; #include <ROOT/REveVector.hxx>; #include <ROOT/REveProjectionBases.hxx>; ; +#include <nlohmann/json_fwd.hpp>; +; #include <map>; #include <memory>; ; class TGeoMatrix;; ; -namespace nlohmann {; -template<typename T, typename SFINAE>; -struct adl_serializer;; -; -template <template <typename U, typename V, typename... Args> class ObjectType,; - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,; - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,; - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,; - class BinaryType>; -class basic_json;; -; -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,; - adl_serializer, std::vector<std::uint8_t>>;; -} // namespace nlohmann; -; namespace ROOT {; namespace Experimental {; ; ```; (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218189751:1390,test,tested,1390,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218189751,1,['test'],['tested']
Testability,@krasznaa see https://github.com/root-project/root/blob/master/test/CMakeLists.txt#L409-L445,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1342284321:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1342284321,1,['test'],['test']
Testability,"@ktf @dpiparo The only problem left is a problem with the test itself. When prefetching is enabled requires more than 2Gb of memory and thus fails on 32 bit platforms. I.e @ktf you can use the PR as-is if need be, it shall be merge soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2406192965:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406192965,1,['test'],['test']
Testability,@ktf Can you test the additional commit that I pushed here? This is another API breaking change (new function).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2402197392:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2402197392,1,['test'],['test']
Testability,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2488#issuecomment-413924715:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/2488#issuecomment-413924715,1,['test'],['test']
Testability,"@ktf That's fine. As I said, my comments were to be taken only as suggestions. Hopefully we will get Arrow in the externals soon to be able to test and merge. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-375313056:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-375313056,1,['test'],['test']
Testability,@ktf The only lingering question is whether the char support works (see earlier comment). So closing for the moment but feel free to reopen once you get a chance to test this. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-859662900:165,test,test,165,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-859662900,1,['test'],['test']
Testability,@ktf do you think you could have a look at this? Can we do without including a header from `testing/`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13516#issuecomment-1689929484:92,test,testing,92,https://root.cern,https://github.com/root-project/root/issues/13516#issuecomment-1689929484,1,['test'],['testing']
Testability,"@ktf the `gtest-roofit-roofitcore-test-testLikelihoodJob` test [timed out](https://github.com/root-project/root/runs/30517916480), but I guess it's unrelated...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16505#issuecomment-2373255228:34,test,test-testLikelihoodJob,34,https://root.cern,https://github.com/root-project/root/pull/16505#issuecomment-2373255228,2,['test'],"['test', 'test-testLikelihoodJob']"
Testability,"@ktf this fails quite horribly in CI:; ```; TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.; ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1750151823:258,Assert,Assertion,258,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1750151823,1,['Assert'],['Assertion']
Testability,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```; Grab the image:; $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready; Then:; ; ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin refs/pull/13808/head:reduce-memory-usage; git checkout reduce-memory-usage; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; )```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1791153635:1325,Test,TestResults,1325,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1791153635,1,['Test'],['TestResults']
Testability,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1788545068:53,assert,asserts,53,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1788545068,2,['assert'],"['assertions', 'asserts']"
Testability,"@ktf,. ```; cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'; [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'; [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'; [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'; [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'; [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'; [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'; [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'; [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'; [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'; [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'; [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'; ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1598833198:43,log,log,43,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1598833198,1,['log'],['log']
Testability,@linev ; I have made a test example in https://github.com/alja/EveWebApp running macro collection_proxies_test.C. The file dialog will be used in FireworksWeb to open a data file and save/reload the configuration file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8333#issuecomment-854900524:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/8333#issuecomment-854900524,1,['test'],['test']
Testability,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it..; ```; -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml; ```; So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):; ```; [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test; civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]; (void)pthread_setname_np(pthread_self(), threadName);; ^; 1 warning generated.; example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]; int main(int argc, char **argv); ^; example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]; int main(int argc, char **argv); ^; 2 warnings generated. ```. We will investigate why and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418769386:244,test,testing,244,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418769386,2,['test'],['testing']
Testability,@linev @couet how is the process to fix those tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16372#issuecomment-2331994920:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/16372#issuecomment-2331994920,1,['test'],['tests']
Testability,"@linev @osschar ; I have also changed REveRenderData to store index buffer as unsigned integer. That required change in 9 files. I made test in event_demo.C, calorimeters.C, and geom_cms.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6074#issuecomment-664660003:136,test,test,136,https://root.cern,https://github.com/root-project/root/pull/6074#issuecomment-664660003,1,['test'],['test']
Testability,"@linev I am testing this and will likely merge it today. One thing I noticed is that if I have the regular Qt4 options turned on, the build fails. Is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-367607887:12,test,testing,12,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-367607887,1,['test'],['testing']
Testability,@linev I am testing your PR locally and let you know! Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618864509:12,test,testing,12,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618864509,1,['test'],['testing']
Testability,@linev I found out by testing that multiple connections are possible if I use session key and require auth key is disabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14779#issuecomment-1969627701:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/14779#issuecomment-1969627701,1,['test'],['testing']
Testability,"@linev I wanted to test the changes I made to QtGSI, but I will merge this now and port the examples later. I don't think that there is any problem with the code. Sorry for taking this long.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1663#issuecomment-369579025:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/1663#issuecomment-369579025,1,['test'],['test']
Testability,"@linev PR looks good for me (I think there could be improvements but we can do them afterwords very carefully). I really afraid that this PR is very big, and if we will need to revert something it will be almost impossible. Can it go in ""a smaller pieces""? Other thing can you try to build with full test suite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-606726418:300,test,test,300,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-606726418,1,['test'],['test']
Testability,@linev Please check.; The changes and testing have been done based on FireworksWeb event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15382#issuecomment-2083610317:38,test,testing,38,https://root.cern,https://github.com/root-project/root/pull/15382#issuecomment-2083610317,1,['test'],['testing']
Testability,"@linev Please check; I have tested the changes by checking memory consumption in an automatic loop.; Note, client removal of EveElements is not recursive. The server makes track of all removed ids and streams them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8571#issuecomment-870917716:28,test,tested,28,https://root.cern,https://github.com/root-project/root/pull/8571#issuecomment-870917716,1,['test'],['tested']
Testability,@linev Please look at PR.; This PR contains change for rendering of digits. The only commit it is not related to it is https://github.com/root-project/root/pull/14912/commits/8687719dcb3cf6b0d62147063d6b4d369ca8be17. I have added here a utility function to enable remote multiple connections. It is not used anywhere except in my local test macros.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14912#issuecomment-1984167095:336,test,test,336,https://root.cern,https://github.com/root-project/root/pull/14912#issuecomment-1984167095,1,['test'],['test']
Testability,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6656#issuecomment-710576703:29,test,tested,29,https://root.cern,https://github.com/root-project/root/pull/6656#issuecomment-710576703,1,['test'],['tested']
Testability,"@linev Thanks, but it's already done ^^; I am actually testing my rebase, and will push soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4548#issuecomment-542787781:55,test,testing,55,https://root.cern,https://github.com/root-project/root/pull/4548#issuecomment-542787781,1,['test'],['testing']
Testability,"@linev Thanks, the correction is in the branch now. I did not noticed it because I made a test with only two stacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6807#issuecomment-726989152:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/6807#issuecomment-726989152,1,['test'],['test']
Testability,@linev congratulations for coming up with this fantastic test - we would not have found this issue with out it!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12789#issuecomment-1540005927:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/12789#issuecomment-1540005927,1,['test'],['test']
Testability,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651#issuecomment-1923314212:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923314212,1,['test'],['test']
Testability,@linev could you also add a test along the lines of #13503 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13559#issuecomment-1697326960:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/13559#issuecomment-1697326960,1,['test'],['test']
Testability,@linev it's detecting the warnings in the pull request description. the PR description is dumped in the build log.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316#issuecomment-852964550:110,log,log,110,https://root.cern,https://github.com/root-project/root/pull/8316#issuecomment-852964550,1,['log'],['log']
Testability,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-599254002:158,test,testReport,158,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-599254002,1,['test'],['testReport']
Testability,"@lmoneta , if the tests pass, do you think we are ready to merge the PR (and backport the changes to 6.32)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15078#issuecomment-2036452635:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/15078#issuecomment-2036452635,1,['test'],['tests']
Testability,"@lmoneta , we are [testing](https://github.com/cms-sw/cmsdist/pull/7911) latest [root changes in cmssw](https://github.com/root-project/root/compare/f1e8d0c17d...4c13caa0ac) and we are getting error [a] in `ROOT::Fit::Fitter` code. Could it be related to change in this PR? Note that root master commit f1e8d0c17d works fine. . By the way, the CMSSW code which calls `Fitter::FitFCN` is https://github.com/cms-sw/cmssw/blob/6d2f66057131baacc2fcbdd203588c41c885b42c/RecoPPS/ProtonReconstruction/src/ProtonReconstructionAlgorithm.cc#L269-L281. FYI @[iarspider](https://github.com/iarspider). [a]; ```; #0 0x00002aac70829ae1 in poll () from /lib64/libc.so.6; #1 0x00002aac78b8872f in full_read.constprop () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #2 0x00002aac78b890bc in edm::service::InitRootHandlers::stacktraceFromThread() () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 0x00002aac78b8ba0b in sig_dostack_then_abort () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #4 <signal handler called>; #5 __cxxabiv1::(anonymous namespace)::adjust_pointer<void> (offset=<error reading variable: Cannot access memory at address 0xfffffffffffffff0>, base=0x7ffc4c62b5b0) at ../../../../libstdc++-v3/libsupc++/tinfo.h:65; #6 __cxxabiv1::__dynamic_cast (src_ptr=0x7ffc4c62b5b0, src_type=0x2aac6e5a6df0 <typeinfo for ROOT::Math::IBaseFunctionMultiDimTempl<double>>, dst_type=0x2aac6e5a69f0 <typeinfo for ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData>>, src2dst=0) at ../../../../libstdc++-v3/libsupc++/dyncast.cc:55; #7 0x00002aac6e40b2d0 in ROOT::Fit::Fitter::GetDataFromFCN<ROOT::Fit::BasicFCN<ROOT::Math::IB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650#issuecomment-1149048876:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/10650#issuecomment-1149048876,1,['test'],['testing']
Testability,@lmoneta @kjvbrt it seems to me we are very near to the fix: what is missing to make these tests succeed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14702#issuecomment-1968323629:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/14702#issuecomment-1968323629,1,['test'],['tests']
Testability,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441#issuecomment-410548934:160,test,testing,160,https://root.cern,https://github.com/root-project/root/pull/2441#issuecomment-410548934,1,['test'],['testing']
Testability,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2440#issuecomment-410543401:159,test,testing,159,https://root.cern,https://github.com/root-project/root/pull/2440#issuecomment-410543401,1,['test'],['testing']
Testability,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441#issuecomment-411796242:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/2441#issuecomment-411796242,1,['test'],['tests']
Testability,"@lmoneta Also there are several source files in MathCore, where `R__HAS_MATHMORE` tested and some MathMore includes are used. Once you merge PR - I will try to build my `source_includes` branch again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418#issuecomment-617210588:82,test,tested,82,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617210588,1,['test'],['tested']
Testability,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-724727949:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-724727949,2,['test'],['tests']
Testability,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-723105789:66,log,logging,66,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-723105789,2,"['log', 'test']","['logging', 'tests']"
Testability,"@lmoneta Hi, sorry I just had a very busy month last month.; Could I ask what improvement should I do about the test program?; I will start right away.; Again, sorry for taking so long to come back to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-422611103:112,test,test,112,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-422611103,1,['test'],['test']
Testability,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-770029370:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-770029370,3,['test'],"['test', 'tests']"
Testability,@lmoneta I am using your branch to test with the cmake command:; ```; '/mnt/build/lcgsoft/releases/cmake-3.15.7-Linux-x86_64/bin/cmake' '-DCMAKE_BUILD_TYPE=Release' '-DCMAKE_INSTALL_PREFIX=/build/lcgsoft/releases/dev4cuda/ROOT/fix_cuda14/x86_64-centos7-gcc8-opt' '-Dpython=ON' '-Dpython3=ON' '-Dpython_version=3' '-Dbuiltin_lz4=ON' '-Dbuiltin_pcre=ON' '-Dbuiltin_xxhash=ON' '-Dbuiltin_ftgl=ON' '-Dbuiltin_afterimage=ON' '-Dbuiltin_glew=ON' '-Dbuiltin_unuran=ON' '-Dbuiltin_zstd=ON' '-Dcintex=ON' '-Dcuda=ON' '-Dtmva-gpu=ON' '-DCMAKE_CUDA_STANDARD=14' '-Ddavix=ON' '-Dexceptions=ON' '-Dexplicitlink=ON' '-Dfftw3=ON' '-Dgdml=ON' '-Dgsl_shared=ON' '-Dhttp=ON' '-Dgenvector=ON' '-Dvc=ON' '-Dmathmore=ON' '-Dminuit2=ON' '-Dmysql=ON' '-Dopengl=ON' '-Dpgsql=OFF' '-Dpythia6=OFF' '-Dpythia8=OFF' '-Dreflex=ON' '-Dr=OFF' '-Droofit=ON' '-Dssl=ON' '-Dunuran=ON' '-Dfortran=ON' '-Dxft=ON' '-Dxml=ON' '-Dxrootd=ON' '-Dzlib=ON' '-DCINTMAXSTRUCT=36000' '-DCINTMAXTYPEDEF=36000' '-DCINTLONGLINE=4096' '-Dfail-on-missing=ON' '-Dfitsio=ON' '-Doracle=OFF' '-Dgfal=OFF' '-DCMAKE_CXX_STANDARD=17' '-Ddcache=ON' '-Dgfal=ON' '-DGFAL_DIR=/build/lcgsoft/releases/dev4cuda/Grid/gfal/1.13.0-0/x86_64-centos7-gcc8-opt' '-DSRM_IFCE_DIR=/build/lcgsoft/releases/dev4cuda/Grid/srm-ifce/1.13.0-0/x86_64-centos7-gcc8-opt' '-Doracle=ON' '-DORACLE_HOME=/build/lcgsoft/releases/dev4cuda/oracle/19.3.0.0.0/x86_64-centos7-gcc8-opt' '-GUnix Makefiles' '/build/lcgsoft/root'; ```; And I am getting the following error:; ```; -- Configuring done; CMake Error at cmake/modules/RootMacros.cmake:894 (add_library):; CUDA_STANDARD is set to invalid value '17'; Call Stack (most recent call first):; cmake/modules/RootMacros.cmake:1295 (ROOT_LINKER_LIBRARY); tmva/tmva/CMakeLists.txt:53 (ROOT_STANDARD_LIBRARY_PACKAGE). -- Generating done; ```; Any idea?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598#issuecomment-627358751:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/5598#issuecomment-627358751,1,['test'],['test']
Testability,"@lmoneta I have checked `test-RooFit-MultiProcess-Messenger` on infinite repeat on multiple machines and also on CI, it should be bug free now, so I need a bit more information. What setup are you running on? What is the output of the test before it hangs? Did you check out the branch clean (because I rebased / force pushed everything yesterday, so just a pull may not have fast-forwarded the branch)?. I will remove the Linkdef files. Indeed, the `res` directories are to prevent users from including the MP headers. I may need to do some magic in the next PR where they will need to be included in user facing headers again, but we'll cross that bridge when we get there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979100033:25,test,test-RooFit-MultiProcess-Messenger,25,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979100033,2,['test'],"['test', 'test-RooFit-MultiProcess-Messenger']"
Testability,"@lmoneta I have removed all the second derivative and step size code. As you suspected, it was all unnecessary. Looking back at my logs, it seems I just forgot to clean them up after introducing ExternalInternalGradientCalculator. This, together with the `long double` precision upgrade of the parameter transformation classes, allows for perfect bitwise floating point replication of the gradient calculation outside of Minuit. Thanks for the thorough review!. I also took care of the copyright lines and fixed some additional layout issues. Ready for a final review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369#issuecomment-866827796:131,log,logs,131,https://root.cern,https://github.com/root-project/root/pull/8369#issuecomment-866827796,1,['log'],['logs']
Testability,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-721069405:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-721069405,2,"['log', 'test']","['logging', 'tests']"
Testability,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720057247:27,log,log,27,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720057247,2,"['log', 'test']","['log', 'test']"
Testability,@lmoneta I removed the Linkdef files. Do you have more information on the Messenger test hanging?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979147928:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979147928,1,['test'],['test']
Testability,"@lmoneta I've implemented the conditional tests for the keras method. As well, this commit fixes the py2/py3 compatibility issue for the `find_python_module` function in `RootNewMacros.cmake` (simply a py2-only print statement buried in the code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253523265:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253523265,1,['test'],['tests']
Testability,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-739034972:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-739034972,2,"['assert', 'log']","['assert', 'logging']"
Testability,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-717627738:44,log,logging,44,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-717627738,3,"['Log', 'log']","['Log', 'logging']"
Testability,"@lmoneta There are several tests in mathcore, which are using SpecFunc.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418#issuecomment-617200291:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617200291,1,['test'],['tests']
Testability,"@lmoneta There is only `Makefile` for unuran tests. Seems to be, they are not frequently tested. At least some of them not possible to compile. Probably, one should provide `CMakeLists.txt` file for them and add them to other ROOT tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5751#issuecomment-637296291:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/5751#issuecomment-637296291,3,['test'],"['tested', 'tests']"
Testability,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2163#issuecomment-395468220:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/2163#issuecomment-395468220,1,['test'],['test']
Testability,"@lmoneta all finally compiles and is C++11 compatible - templated lambdas are only from C++14, so I had to improvise. Please have a look at anything I might have missed and you should be able to compile and test for yourself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663171577:207,test,test,207,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663171577,1,['test'],['test']
Testability,@lmoneta and I agreed that testing the interpreted version gives more coverage (testing feature X + interpreter) than the compiled one (testing only feature X). The execution times are very similar.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426#issuecomment-463672689:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/3426#issuecomment-463672689,3,['test'],['testing']
Testability,"@lmoneta because then it makes mathcode 'depend' on RooFit per se. For integration test like this, you should consider putting them in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2016#issuecomment-389191423:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/2016#issuecomment-389191423,1,['test'],['test']
Testability,@lmoneta can I do something to fix this test ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193#issuecomment-788723085:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/7193#issuecomment-788723085,1,['test'],['test']
Testability,"@lmoneta can correct me if I'm wrong, but I think you can just copy `hist/hist/test/test_TH1.cxx` and create `hist/hist/test/test_TH2.cxx`. Alternatively, out-of-source tests are kept at https://github.com/root-project/roottest/tree/master/root/hist",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9481#issuecomment-1005075691:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/9481#issuecomment-1005075691,3,['test'],"['test', 'tests']"
Testability,"@lmoneta cool, thanks - initial work is done, I will test - in the meantime, it would be awesome if you check my math and naming interpretations of parameters, cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-661969172:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-661969172,1,['test'],['test']
Testability,"@lmoneta for future commits, can you please leave an empty line between the subject (first line) and the commit description (starting in line 3)? Having text in the second line makes `git log --oneline` horrible to read because git thinks that the entire commit message is the subject...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9307#issuecomment-977850247:188,log,log,188,https://root.cern,https://github.com/root-project/root/pull/9307#issuecomment-977850247,1,['log'],['log']
Testability,"@lmoneta friendly ping :) I don't the think the failing test are connected to the PR, but I can't see the logs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496#issuecomment-881678640:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/8496#issuecomment-881678640,2,"['log', 'test']","['logs', 'test']"
Testability,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:; ```c++; if (w != 0 && bincontent + w == bincontent); Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-791443564:112,test,test,112,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-791443564,1,['test'],['test']
Testability,"@lmoneta if you've got a test script or something, I can test once I finish. We have CUDA11 and cuDNN 8 on Arch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-661952582:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-661952582,2,['test'],['test']
Testability,"@lmoneta indeed, it looks like `-Droofit_multiprocess=OFF`, `-Dbuiltin_zeromq=OFF` and `-Dbuiltin_cppzmq=OFF` are used, at least on the mac11.0/cxx17 build log. Is there somewhere we can change this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-943650523:156,log,log,156,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-943650523,1,['log'],['log']
Testability,"@lmoneta is going to check where this is tested, and then see whether the new code is a viable replacement. A possible issue could be `TMath::Sin(pol0)` or similar nastiness, where the argument (possibly `fun.GetBody()`?) isn't valid C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1821#issuecomment-389148301:41,test,tested,41,https://root.cern,https://github.com/root-project/root/pull/1821#issuecomment-389148301,1,['test'],['tested']
Testability,@lmoneta test added: I confirmed it fails for master and works with this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7098#issuecomment-770754973:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/7098#issuecomment-770754973,1,['test'],['test']
Testability,"@lmoneta testing as we speak, give me 2 hours",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-671306766:9,test,testing,9,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-671306766,1,['test'],['testing']
Testability,"@lmoneta the logic is a bit different now and it needed to be re-implemented, as cudnn no longer provides equivalent helper algos, nor does it have those enums for preference. I have implemented a backwards compatible solution and reduced some branch complexity. Have a look here - https://github.com/root-project/root/pull/6058/files#diff-5bdcb6011937edc2089e7a0de3c8d62fR343-R400",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-662478612:13,log,logic,13,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-662478612,1,['log'],['logic']
Testability,"@lmoneta, shouldn't we link the whole archive of libVc.a into MathCore? We see some failures such as:; ```; root.exe -q -l -b test/testGenVectorVc.cxx . Processing test/testGenVectorVc.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general14signMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::signMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general13absMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::absMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_16Common10AllBitsSetE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::Common::AllBitsSet; Maybe you need to load the corresponding shared library?; warning: Failed to call `testGenVectorVc()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; ```. Where: ; ```; nm externals/usr/local/lib/libVc.a | grep _ZN4Vc_13SSE9c_general14signMaskDoubleE; 0000000000000580 R _ZN4Vc_13SSE9c_general14signMaskDoubleE; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-890588377:126,test,test,126,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-890588377,5,['test'],"['test', 'testGenVectorVc']"
Testability,"@lmoneta, this is ok to merge! (No test failures related to TMVA, this is true also for slc6/gcc49.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-386228851:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-386228851,1,['test'],['test']
Testability,"@lmoneta, what tests would be required before merging is ok?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254#issuecomment-479962797:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/3254#issuecomment-479962797,1,['test'],['tests']
Testability,"@manolismih Can you please rebase, so we could run tests on CI? Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4440#issuecomment-669056736:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/4440#issuecomment-669056736,1,['test'],['tests']
Testability,"@mario-krueger Thank you this catch! The errors are expected as they are (indirectly) suppose to catch change in the write of histograms; I will address them. However we did not catch this issue. Could you add a test (for example, how you discovered this). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7857#issuecomment-819068105:212,test,test,212,https://root.cern,https://github.com/root-project/root/pull/7857#issuecomment-819068105,1,['test'],['test']
Testability,"@maxgalli `readFcc` fails because `writeFcc` fails. I have no idea what's causing the failure in `writeFcc`, but I assume it's safe to say it's not these changes since the test failed in the exact same way in another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5083#issuecomment-603158050:172,test,test,172,https://root.cern,https://github.com/root-project/root/pull/5083#issuecomment-603158050,1,['test'],['test']
Testability,"@mkrzewic great work! I haven't looked at the changes in detail yet, just at the commits from a high level; for the first one in particular, it would be great to split this into smaller logical pieces. For example, the linking of the `crypt` library looks fairly self-contained. I'm not sure if it's a good idea to disguise FreeBSD as Linux by including `SetUpLinux`, did you evaluate creating a separate `SetUpBSD` or something like that?. > the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert. Looking at `interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h`, it indeed seems to not define `_REENTRANT`. I agree that it needs a separate look, probably not critical for the first support. > actually a lot more tests fail - what is the general state of the test results on the master branch?. Tests should pass on Linux. It's possible that there is some common problem that makes multiple / many tests fail. Probably needs to be looked at in more detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1587040920:186,log,logical,186,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1587040920,6,"['Test', 'log', 'test']","['Tests', 'logical', 'test', 'tests']"
Testability,@mkrzewic thanks for testing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14115#issuecomment-1827915981:21,test,testing,21,https://root.cern,https://github.com/root-project/root/pull/14115#issuecomment-1827915981,1,['test'],['testing']
Testability,@mlassnig it is not related; it's a pre-existing failure. Sorry about that. The tests are green wrt this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352#issuecomment-346401064:80,test,tests,80,https://root.cern,https://github.com/root-project/root/pull/1352#issuecomment-346401064,1,['test'],['tests']
Testability,"@msneubauer ran some tests on OSX 13 and it seems this issue is fixed. Thanks a lot, Mark! Here is what he ran:. ```; cat test_exceptions.C; void test_exceptions() {; try {; std::cout << ""got here\n"";; throw 1;; } catch (...) { }; }; wirelessprv-10-193-242-21:tmp msn$ root.exe -l -b -q -e '.x test_exceptions.C'. got here; ```. This is based on a source build of the root_v6.26.06.source.tar.gz tarball. cc: @hahnjo, @lhames",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-1302531033:21,test,tests,21,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1302531033,1,['test'],['tests']
Testability,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-324712290:180,test,testing,180,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-324712290,1,['test'],['testing']
Testability,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466#issuecomment-624594499:181,test,tests,181,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499,2,['test'],['tests']
Testability,"@odahme Here is a sample of the error output (that are many more of these lines in the full output).; The test failed on all Mac nodes. ```; Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349216512:106,test,test,106,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349216512,3,"['log', 'test']","['logEvalError', 'test']"
Testability,"@olifre I digged a bit more and discovered that as the units were gradually introduced, the interface was not the same from the beginning. So the initial version switching to G4 units by default was v6-19-02 (backported also to v6-18-02) and there the interface to change the unit back to CGS was:; ```; TGeoUnit::setUnitType(TGeoUnit::kTGeoUnits);; ```; The system allowing to set the default unit via TGeoManager was introduced in v6-23-02 (and backported to v6-22-08) and was the same until v6-25-01:; ```; TGeoManager::LockDefaultUnits(false);; TGeoManager::SetDefaultUnits(TGeoManager::kRootUnits);; TGeoManager::LockDefaultUnits(true);; ```; So your logic will work for sure only starting from v6-23-02 included (6-23-01 seems to have the initial style)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9383#issuecomment-988638453:656,log,logic,656,https://root.cern,https://github.com/root-project/root/issues/9383#issuecomment-988638453,1,['log'],['logic']
Testability,"@oshadura . There are also [real failures](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/116051/console) produced by new `root-webgui-ping` test, but I do not see any error output :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829095490:167,test,test,167,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829095490,1,['test'],['test']
Testability,@oshadura @lmoneta Do we understand why the MathCore test fail here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-393168984:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-393168984,1,['test'],['test']
Testability,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb.; I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629#issuecomment-422490016:61,test,testing,61,https://root.cern,https://github.com/root-project/root/pull/2629#issuecomment-422490016,1,['test'],['testing']
Testability,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify.; Now in all places `target_include_directories` specified.; Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-609713006:212,test,tests,212,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-609713006,1,['test'],['tests']
Testability,"@oshadura How can I get the path to the `requirements.txt` in the test? `ROOTSYS` does not really help because it points to the build dir, I would need the path to the source dir.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-616957161:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-616957161,1,['test'],['test']
Testability,"@oshadura Well, then I would have to **really** download a file (that's the only way to get `0` as return code) and then delete it if it is successful. I can do it that way if you prefer (that was my first approach) but I find it a bit too restrictive IMHO...; That was:; ```; #---Try to download a file to check internet connection-----------------------------------------; file(DOWNLOAD https://root.cern/files/test.txt ${CMAKE_CURRENT_BINARY_DIR}/test.txt; TIMEOUT 100 STATUS DOWNLOAD_STATUS; ); # Get the status code from the download status; list(GET DOWNLOAD_STATUS 0 STATUS_CODE); # Check if download was successful.; if(${STATUS_CODE} EQUAL 0); # success: remove the file and reset the NO_CONNECTION flag; file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test.txt); set(NO_CONNECTION FALSE); else(); # failure: set the NO_CONNECTION flag; set(NO_CONNECTION TRUE); endif(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8520#issuecomment-866934563:413,test,test,413,https://root.cern,https://github.com/root-project/root/pull/8520#issuecomment-866934563,3,['test'],['test']
Testability,"@oshadura Yes, I am testing it locally and will merge by hand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1977#issuecomment-386846566:20,test,testing,20,https://root.cern,https://github.com/root-project/root/pull/1977#issuecomment-386846566,1,['test'],['testing']
Testability,@oshadura note that no PR build is testing installation of ROOT afaik,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6054#issuecomment-666239089:35,test,testing,35,https://root.cern,https://github.com/root-project/root/pull/6054#issuecomment-666239089,1,['test'],['testing']
Testability,"@oshadura please let us know of any build system requirements / recommendations you have here, e.g. where to do this config test and how to convey the result (""need -lgcc"") to the linker invocation of `libRooFitCore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6855#issuecomment-731733091:124,test,test,124,https://root.cern,https://github.com/root-project/root/issues/6855#issuecomment-731733091,1,['test'],['test']
Testability,"@oshadura please see my comment, we wrote at the same time. Ok for your request to test on slc6 (please @maxgalli )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5248#issuecomment-605948515:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/5248#issuecomment-605948515,1,['test'],['test']
Testability,"@oshadura that was the first test I didi actually, and it's working perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776821099:29,test,test,29,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776821099,1,['test'],['test']
Testability,"@oshadura yes, the following minimal reproducer runs in 13 seconds on my workstation with built-in LZMA, and in 6 with LZMA installed from system packages. 75% of the runtime is spent in `R__zipLZMA` in the slow case, 48% in the fast case. This patch fixes that runtime difference. (EDIT: plus from the [build log](https://github.com/root-project/root/files/5049830/LZMA-build-out.log) of built-in LZMA you can see no optimization flags are added at the moment). ```cpp; // write_lzma.cpp; #include <ROOT/RDataFrame.hxx> ; #include <TStopwatch.h> ; #include <iostream> ; ; int main() { ; ROOT::RDF::RSnapshotOptions opts; ; opts.fCompressionAlgorithm = ROOT::kLZMA; ; opts.fCompressionLevel = 6; ; opts.fLazy = true; ; auto trigger = ROOT::RDataFrame(50000000).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""}, opts); ; TStopwatch s; ; s.Start(); ; *trigger; ; s.Stop(); ; std::cout << s.RealTime() << std::endl; ; return 0; ; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6144#issuecomment-671236231:310,log,log,310,https://root.cern,https://github.com/root-project/root/pull/6144#issuecomment-671236231,2,['log'],['log']
Testability,"@osschar the problem that it will not work... Having TGLIncludes.h (with #include <GL/glew.h>) make RGL depends on GLEW, and then as a consequence, I need to put graf3d\ftgl (FTGL) depends on RGL. Having this is creating circular dependency:. ```; CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):; ""FTGL"" of type SHARED_LIBRARY; depends on ""RGL"" (weak); ""RGL"" of type SHARED_LIBRARY; depends on ""FTGL"" (weak); At least one of these targets is not a STATIC_LIBRARY. Cyclic dependencies are allowed only among static libraries.; CMake Generate step failed. Build files cannot be regenerated correctly.; make: *** [Makefile:9096: cmake_check_build_system] Error 1; ```. Why it was not visible before because TGLIncludes.h were copied in ${CMAKE_BINARY_DIR}/include/ where it was picked up by whatever ROOT library you were building before. To achieve better modularity this could be fixed, in a way, I am proposing in this PR. -------------------------------------------------------------------------------------; Here is a test PR I opened to show you an error for your proposal: https://github.com/root-project/root/pull/4786; ```; C:\build\workspace\root-pullrequests-build\build\include\TGLIncludes.h(21,10): fatal error C1083: Cannot open include file: 'GL/glew.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\graf3d\ftgl\FTGL.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585676794:1080,test,test,1080,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585676794,1,['test'],['test']
Testability,"@pcanal ""file:"" was prepended for local files. Now the 'tree' related tests on my machine are all successful. Let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4888#issuecomment-579904263:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/4888#issuecomment-579904263,1,['test'],['tests']
Testability,"@pcanal & @Axel-Naumann, I left in all tests ROOT::kZLIB, ROOT::LZMA and etc, to show that user code will not be broken...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-440737839:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-440737839,1,['test'],['tests']
Testability,"@pcanal , I am testing cms root master branch ( https://github.com/cms-sw/root/commits/cms/master/03d7710 ) without the revert of ofending commit (https://github.com/cms-sw/root/commit/f9834e30eaa01b5b8921e69bfe40681092303895 ) , once it is available then hopefully I will be able to provide you the instructions for reproducer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-964896282:15,test,testing,15,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-964896282,1,['test'],['testing']
Testability,"@pcanal , I am trying to test latest root v6-22 patches branch and we also get same failures there https://github.com/cms-sw/cmsdist/pull/6790#issuecomment-814504953",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814603818:25,test,test,25,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814603818,1,['test'],['test']
Testability,"@pcanal , this change is still part of root master and v6-26 branch and it causes runtime failures in cmssw [a]. Is there any plan to revert this for root master and v6-26 branches too?. [a] https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT626_X_2022-01-11-0800/pyRelValMatrixLogs/run/134.807_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2/step2_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2.log#/; ```; cmsRun: /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/997e45a2cab6f1aa8d23229a1e263b28/opt/cmssw/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. A fatal system signal has occurred: abort signal; The following is the call stack containing the origin of the signal. Tue Jan 11 18:56:50 CET 2022; Thread 10 (Thread 0x2b61c6c00700 (LWP 19510) ""cmsRun""):; #0 0x00002b6177e159fd in nanosleep () from /lib64/libc.so.6; #1 0x00002b6177e15894 in sleep () from /lib64/libc.so.6; #2 0x00002b617d88eca0 in sig_pause_for_stacktrace () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 <signal handler called>; #4 0x00002b61752e3570 in check_match () from /lib64/ld-linux-x86-64.so.2; #5 0x00002b61752e3dbb in do_lookup_x () from /lib64/ld-linux-x86-64.so.2; #6 0x00002b61752e409f in _dl_lookup_symbol_x () from /lib64/ld-linux-x86-64.so.2; #7 0x00002b61752e8dee in _dl_fixup () from /lib64/ld-linux-x86-64.so.2; #8 0x00002b61752f09ea in _dl_runtime_resolve_xsave () from /lib64/ld-linux-x86-64.so.2; #9 0x00002b61754a9961 in edm::WaitingTaskList::reset() () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/libFWCoreConcurrency.so; #10 0x00002b61757aa998 in edm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7837#issuecomment-1010312773:226,log,logreader,226,https://root.cern,https://github.com/root-project/root/pull/7837#issuecomment-1010312773,3,"['Assert', 'log']","['Assertion', 'log', 'logreader']"
Testability,"@pcanal , this now has fixed the failing HLT tests in cmssw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10280#issuecomment-1084140980:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/10280#issuecomment-1084140980,1,['test'],['tests']
Testability,"@pcanal , you can reproduce the error by doing the following on cmsdev20-25 VMs. This is based on root master (build in debug mode). ```; cd /build/pcanal; /cvmfs/cms-ci.cern.ch/week1/cms-sw/cmsdist/6788/14005/install.sh; cd CMSSW_11_3_ROOT6_X_2021-04-05-2300; eval `scram run -sh`; export CMS_PATH=/cvmfs/cms-ib.cern.ch; xrdcp root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/store/relval/CMSSW_9_2_2/RelValProdTTbar_13/AODSIM/91X_mcRun2_asymptotic_v3-v1/10000/EEB99F74-DA4D-E711-A41C-0025905A48F2.root .; cp $CMSSW_BASE/src/PhysicsTools/PatAlgos/test/IntegrationTest_cfg.py .; sed -i -e ""s|= *filesRelValProdTTbarAODSIM|= cms.untracked.vstring('file://$CMSSW_BASE/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" IntegrationTest_cfg.py; cmsRun IntegrationTest_cfg.py. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815052660:550,test,test,550,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815052660,1,['test'],['test']
Testability,"@pcanal , you can run the following to reproduce the error https://github.com/root-project/root/issues/7718#issuecomment-814425870. ```; # in cmssw area; cp $CMSSW_BASE/src/TopQuarkAnalysis/TopTools/test/ttJetPartonMatch_cfg.py .; sed -i -e ""s|(relValTTbar)|('file:///afs/cern.ch/user/c/cmsbuild/public/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" ttJetPartonMatch_cfg.py; cmsRun ttJetPartonMatch_cfg.py; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815212145:199,test,test,199,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815212145,1,['test'],['test']
Testability,@pcanal - I believe I have addressed all review comments. I cannot reproduce the failure of `roottest-root-core-execStatusBitsCheck`; it's possible the fact I switched to an `enum class` avoids the underlying bug in that test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327899842:221,test,test,221,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327899842,1,['test'],['test']
Testability,@pcanal - I think I got all the review items from the latest round completed. Let's see how the unit tests go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-333727006:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-333727006,1,['test'],['tests']
Testability,@pcanal - could the failing unit test possibly be related to this? I didn't think file sizes were sensitive to comments in the headers.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-429048950:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-429048950,1,['test'],['test']
Testability,@pcanal - for the failing unit test: why didn't it utilize the corresponding PR in roottest?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775#issuecomment-428998157:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/2775#issuecomment-428998157,1,['test'],['test']
Testability,"@pcanal - release notes updated. I tried to reproduce the above test failure locally, but was unable to. Do you recognize it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-328403186:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-328403186,1,['test'],['test']
Testability,"@pcanal . > Really?; > Or is it just the ""renaming rules"" that solves the problem?. Positive! I tested by removing the renaming rule.; The typedef is `using RooRealProxy = RooTemplateProxy<RooAbsReal>;`. I use this so old classes can keep using `RooRealProxy`, although this is now a specific instance of a template. When reading, if you use for the LinkDef.h:; ```; #pragma link C++ class RooTemplateProxy<RooAbsReal>+; //What it actually is now; ```; You get; ```; Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 1 of class 'RooExponential' differs from ; the in-memory layout version 1:; RooRealProxy x; //; vs; RooTemplateProxy<RooAbsReal> x; //; ```; for *all* old classes in RooFit. However, with; ```; #pragma link C++ class RooRealProxy+; // == RooTemplateProxy<RooAbsReal>; ```; all old classes can remain as they are. Thinking about it, I now came to the conclusion that the schema evolution problem I mentioned to Philippe about two weeks ago is exactly the same problem. The solution is just to mention the ""right"" typedef in LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623954433:96,test,tested,96,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623954433,1,['test'],['tested']
Testability,@pcanal . I add testing for TF1/TF2/TF3 Save() / GetSave() methods.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13949#issuecomment-1781385097:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/13949#issuecomment-1781385097,1,['test'],['testing']
Testability,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). ; I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1688309097:85,log,logical,85,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1688309097,1,['log'],['logical']
Testability,"@pcanal . I replace all C++ macros by templated methods.; At least, it should produce smaller binary - some template methods can be reused.; I also create correspondent tests ; https://github.com/root-project/roottest/pull/118. And why building is failed - have no idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-352064145:169,test,tests,169,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-352064145,1,['test'],['tests']
Testability,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false.; As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`.; ; Actually, it happens already with TDirectoryFile. Just doing:; ```; root [0] auto d = new TDirectoryFile(); (TDirectoryFile *) @0x7ffee3869998; root [1] d->IsOnHeap(); (bool) false; ```; At the same time, creating with some arguments:; ```; root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);; root [6] ddd->IsOnHeap(); (bool) true; ```; Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:; ```; TDirectoryFile() = default;; ```; If I provide dummy implementation - IsOnHeap() works properly.; I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526528035:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526528035,1,['test'],['test']
Testability,@pcanal . Question about roottest.; Is there possibility to disable automatic testing with gcc 4.8.x?; TBufferJSON::FromJSON() always returns **nullptr** on this platform.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-351526529:78,test,testing,78,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-351526529,1,['test'],['testing']
Testability,@pcanal : isn't this failure http://cdash.cern.ch/testDetails.php?test=64373639&build=651127 telling us that the test actually never worked correctly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746#issuecomment-487732368:50,test,testDetails,50,https://root.cern,https://github.com/root-project/root/pull/3746#issuecomment-487732368,3,['test'],"['test', 'testDetails']"
Testability,"@pcanal ; > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?. Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest?. The test suite commit is now here, for your reference:; https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test; (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-814352043:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-814352043,3,['test'],['test']
Testability,"@pcanal ; > This code is for the (very rare this days) case where a TBranch is stored in a different file than its TTree.; I.e. in your use case is; fDirectory != fTree->GetDirectory(); triggered?. Yes!; ```; (gdb) print fDirectory; $3 = (TDirectoryFile *) 0x10af350; (gdb) print fDirectory->GetName(); $5 = 0x10af369 ""test.root"". (gdb) print fTree->GetDirectory(); $4 = (TROOT *) 0x7ffff3fb46a8 <ROOT::Internal::GetROOT1()::alloc>; (gdb) print fTree->GetDirectory()->GetName(); $6 = 0x7ffff3fb46c1 <ROOT::Internal::GetROOT1()::alloc+25> ""root""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6452#issuecomment-699044425:319,test,test,319,https://root.cern,https://github.com/root-project/root/pull/6452#issuecomment-699044425,1,['test'],['test']
Testability,@pcanal ; Could you tell us which io test you have in mind which can benefit ROOT from having rdict?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440604193:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440604193,1,['test'],['test']
Testability,"@pcanal ; Hi Philippe, this failure is not only with modules. Just moving function definition of IPruneTool causes cmsUnload test failure with master, which can be seen in https://github.com/root-project/root/pull/2848 or https://github.com/root-project/root/commit/258d5c41f042dc260adfd24d5d51906a9c326236. This is very weird. Cling is failing to correctly unload AutoParse regardless of whether it has modules or not. I also thought that Cling was only partially removing transaction for AutoParse, but actually AutoParse was stored in one transaction so it wasn't a problem. I think the problem is that Cling is removing ""Names"" of SiStripCluster when unloading AutoParse (which is kind of expected) but then it complains that it doesn't know SiStripCluster even if libStrip.so is loaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435040825:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435040825,1,['test'],['test']
Testability,@pcanal ; I will add special testing into `roottest` once PR merged into master; Basic functionality does not changed - just less checks are performed while json decoding,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3837#issuecomment-493991588:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/3837#issuecomment-493991588,1,['test'],['testing']
Testability,"@pcanal ; One could have used TNamed: I did not think about that. That might not have been enough though: see my comment below.; About the speedup: it is indeed not due to the different container! If there is a difference in runtime between the two, it is undetectable. The difference comes from the fact that the graph built with TDF nodes is sophisticated and the same columns end up being inputs of Filters and Defines. As a result a single column, even holding a long-ish array, ends up being read many times. Given that the proxy is not re-used, deserialisation happened N times, with the associated overhead.; @Axel-Naumann ; About the crashes: I am surprised about so many crashes - checked the TDF tests on ubu16 before creating the PR and only the dataframe_friends test failed. I think that one is understood. The problem is that the same proxy is used for branches with the same name even if they come from two different trees which are friends. To solve this case, a possible solution would consist in hashing (with a map or an unordered_set, to be seen) not only the branch name but also some info about the tree to distinguish the two cases.; About the other crashes, working on those to understand where they are coming from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768#issuecomment-374724166:706,test,tests,706,https://root.cern,https://github.com/root-project/root/pull/1768#issuecomment-374724166,2,['test'],"['test', 'tests']"
Testability,"@pcanal @Axel-Naumann I think I am ready here, TMVA and Windows failure is not connected with changes in this PR. C++ modules has a random failure of projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make. Failure of filemerger test on centos7/clang39 is only reproducible with clang 3.9 (I tried with Yuka to reproduce using clang 7.0.0, we didn't see failure.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889#issuecomment-435137819:242,test,test,242,https://root.cern,https://github.com/root-project/root/pull/2889#issuecomment-435137819,1,['test'],['test']
Testability,"@pcanal @Axel-Naumann The idea was to explicitly take out the relatively complicated conversion step from the tutorials in order to not drive away users. So I think we don't want to add this as another tutorial. Regarding testing, I also don't think this code would test anything specific that is not covered by other tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6096#issuecomment-666366483:222,test,testing,222,https://root.cern,https://github.com/root-project/root/pull/6096#issuecomment-666366483,3,['test'],"['test', 'testing', 'tests']"
Testability,"@pcanal @Axel-Naumann it seems this patch gets rid of an error message we were testing for...?. ```; -- BEGIN OUTDIFF OUTPUT --; --- /home/sftnight/build/workspace/root-pullrequests-build/roottest/root/meta/expressiveErrorMessages.ref	Wed Apr 29 11:19:38 2020; +++ /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/expressiveErrorMessages.log	Thu May 14 11:20:57 2020; @@ -1,7 +1,4 @@; ; -expressiveErrorMessagesdictionarypayload:--:--:error:unknowntypename'bla'; -bla; -^; expressiveErrorMessagesdictionarypayload:--:--:error:expectedunqualified-id; classBexprMsg{};; ^. -- END OUTDIFF OUTPUT --; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5615#issuecomment-628576879:79,test,testing,79,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628576879,2,"['log', 'test']","['log', 'testing']"
Testability,"@pcanal @bbockelm ; The failed test cases seem to be transient failures that were shown as ""Time Out"".; I re-run all the failed tests on my desktop and all of them passed except this one:. [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt]. It is still shown as ""Time Out"" on my desktop. I also tried this particular test with latest upstream root. It can't pass either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-365101355:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-365101355,3,['test'],"['test', 'tests']"
Testability,@pcanal @smuzaffar ; My tests for creating s valid edm::Handle on the sample file are now successful using CMSSW_12_3_X_2022-02-10-1100_FWLITE.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-1039363931:24,test,tests,24,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-1039363931,1,['test'],['tests']
Testability,"@pcanal A second test was added for a different type of scenario (see the commit description). On my local tests, the changes in this PR already cover also the second scenario.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15588#issuecomment-2137338968:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/15588#issuecomment-2137338968,2,['test'],"['test', 'tests']"
Testability,@pcanal After some discussion with @bellenot we decided to disable the tests on windows for now. Tests on other platforms are passing. Could you give your opinion on these changes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1693510512:71,test,tests,71,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1693510512,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"@pcanal As discussed, the estimator for the compressed cluster size is [now](https://github.com/jblomer/root/pull/8703/commits/806637b8a130e4a5a6b599a0b134e9ea0097aae7) the average compression ratio of all so-far written clusters. I also [added](https://github.com/jblomer/root/pull/8703/commits/5a023346d66b58f4c38044544239b71c7856e0b1) a stub checklist for the future RNTuple validation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703#issuecomment-922457940:340,stub,stub,340,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-922457940,1,['stub'],['stub']
Testability,"@pcanal For instance. ```json; {; ""vpx"": [0.208788, -1.70924, 0.955477, 0.162738, 1.77392, -0.243316, -0.857411, 0.714772, 1.05418, -0.153219, -0.366184]; }; ```. ```json; {; ""B_FlightDistance"": 14.4299,; ""B_VertexChi2"": 10.295,; ""H1_PX"": -318.158,; ""H1_PY"": -6407.68,; ""H1_PZ"": 152900,; ""H1_ProbK"": 0.0667207,; ""H1_ProbPi"": 0.685733,; ""H1_Charge"": 1,; ""H1_IPChi2"": 21.3981,; ""H1_isMuon"": 0,; ""H2_PX"": 382.38,; ""H2_PY"": 114.052,; ""H2_PZ"": 6374.15,; ""H2_ProbK"": 0.142381,; ""H2_ProbPi"": 0.906743,; ""H2_Charge"": -1,; ""H2_IPChi2"": 351.338,; ""H2_isMuon"": 0,; ""H3_PX"": -1151.69,; ""H3_PY"": -2406.64,; ""H3_PZ"": 33660.3,; ""H3_ProbK"": 0.946793,; ""H3_ProbPi"": 0.0687876,; ""H3_Charge"": -1,; ""H3_IPChi2"": 587.399,; ""H3_isMuon"": 0; }; ```. ```json; {; ""Muon_pt"": [3.59005, 4.19566],; ""Muon_eta"": [-2.13241, -2.19689],; ""Muon_phi"": [-2.98745, 0.425593],; ""Muon_mass"": [0.105658, 0.105658],; ""Muon_charge"": [-1, -1],; ""nMuon"": 2,; ""run"": 167674,; ""luminosityBlock"": 209; }; ```. There are more examples in `ntpl001_staff.C` and `ntpl002_vector.C` tutorials and in the `ntuple_print` unit test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4847#issuecomment-578721665:1072,test,test,1072,https://root.cern,https://github.com/root-project/root/pull/4847#issuecomment-578721665,1,['test'],['test']
Testability,"@pcanal How should we proceed?; Is it goes in right direction?; If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`?; Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-597828998:125,test,testio,125,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-597828998,2,['test'],['testio']
Testability,@pcanal I assume the addition of those 3 new gtests in tree/dataframe/test/dataframe_interface.cxx is the result of a conflict resolution when backporting. The correct resolution is to leave the tests out (and therefore also the patch to one of the tests that the backported commit would add).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692687765:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692687765,3,['test'],"['test', 'tests']"
Testability,"@pcanal I changed the key for the `dirtodelete` map to include all 3 arguments: parent, name and pathname, as I think it's the only reliable way to know whether we're talking about the same directory or not.; The benchmarks remain basically the same as before and the tests are passing, so I think this could be a good solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16518#issuecomment-2396463160:213,benchmark,benchmarks,213,https://root.cern,https://github.com/root-project/root/pull/16518#issuecomment-2396463160,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,@pcanal I found a specific use case as example and updated the commit log,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663569582:70,log,log,70,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663569582,1,['log'],['log']
Testability,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-455217648:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-455217648,2,['test'],['test']
Testability,"@pcanal I found the problem. It seems that the calls to type->InheritsFrom does some autoloading behind the scenes that leads later to the crash in the tests. Even if originalTest and newTest always yield the same result, the newTest is non-const and thus affects those handful of tests. So not sure how to circumvent this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1991482725:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1991482725,2,['test'],['tests']
Testability,"@pcanal I had been running the master branch for tests and builds all this time, and not my patch branch; that's why its been failing the Jekyll build 😅; It should be ready now. My apologies for the repeated reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1805669398:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1805669398,1,['test'],['tests']
Testability,"@pcanal I saw the `ClingLoadUnloadFile.ConcurrentLoadUnloadOneLibPerThread` test failing on the new CI for this PR, on fedora38 and alma8; could you check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13451#issuecomment-1685044018:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/13451#issuecomment-1685044018,1,['test'],['test']
Testability,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1803962285:10,test,tested,10,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285,6,"['benchmark', 'test']","['benchmark', 'test', 'tested']"
Testability,@pcanal I think you backported too much? the test case that fails in dataframe_interface is a regression test introduced in later versions,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692218371:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692218371,2,['test'],['test']
Testability,@pcanal I trying to verify that happens with failing test `root-tree-chain`.; From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526497965:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526497965,2,"['log', 'test']","['log', 'test']"
Testability,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):; ```valgrind; ==29487== Conditional jump or move depends on uninitialised value(s); ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57); ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95); ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099); ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792); ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842); ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139); ==29487==; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182#issuecomment-396379682:123,test,test,123,https://root.cern,https://github.com/root-project/root/pull/2182#issuecomment-396379682,1,['test'],['test']
Testability,"@pcanal I wrote a testing program on my own. For compression, it basically reads the root file given in your ticket and compress all the trees in it and write out to another file. For decompression, it simply iterates all entries in the compressed file. I used TStopWatch to measure the performance. I did not use TTreePerfStats in my program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-142029158:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-142029158,1,['test'],['testing']
Testability,"@pcanal I'd be okay with adjusting [roottest/root/meta/tclass/execState.C](https://github.com/root-project/roottest/blob/master/root/meta/tclass/execState.C) as follows:; ```diff; int execState() {; int result = 0;; ; - gROOT->ProcessLine(""class Event;"");; + gROOT->Declare(""class Event;"");; TClass *c = TClass::GetClass(""Event""); ; if (TClass::kForwardDeclared != c->GetState()) {; Error(""execState"",""State is %d instead of %d (TClass::kForwardDeclared)"",; ```; which should ""fix"" the test failure. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1027759510:486,test,test,486,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1027759510,1,['test'],['test']
Testability,@pcanal I'll send you the full log by mail and I'll try the; `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`; solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1132#issuecomment-334197434:31,log,log,31,https://root.cern,https://github.com/root-project/root/pull/1132#issuecomment-334197434,1,['log'],['log']
Testability,"@pcanal I've added the requested tests. However, it is failing with the error; ```text; ***Failed Error regular expression found in output. Regex=[FAILED|Error in] 30.74 sec; ```; I'm not sure what's causing this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4649#issuecomment-560429042:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/4649#issuecomment-560429042,1,['test'],['tests']
Testability,@pcanal I've verified that the additional commit corrects the compilation error in the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1706#issuecomment-371241426:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/1706#issuecomment-371241426,1,['test'],['tests']
Testability,"@pcanal Indeed, this still breaks my (more elaborate) integration tests...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2402101784:66,test,tests,66,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2402101784,1,['test'],['tests']
Testability,"@pcanal Redmine is behind a login wall. Could you paste the core of the bug report in this issue, too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8428#issuecomment-875383767:28,log,login,28,https://root.cern,https://github.com/root-project/root/issues/8428#issuecomment-875383767,1,['log'],['login']
Testability,"@pcanal Successfully tested changes locally, ready for review 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1803201756:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1803201756,1,['test'],['tested']
Testability,"@pcanal The TClass test above started failing since your merge. Could you please take a look?; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1321#issuecomment-345203063:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/1321#issuecomment-345203063,1,['test'],['test']
Testability,"@pcanal The implementation is, logically speaking, exactly the same (see `TBufferFile.cxx:Read/WriteDouble32`. ; The main difference is design-wise, for the fact that RNTuple's quantization is:; - not bound to the type of the variable (you can quantize any `float` or `double`, not just a `Double32_t`; - not statically chosen (you can set the value range and the bit width at runtime rather than deciding once and for all via the variable comments). We can discuss in more details, but in my opinion those are the two main points of difference. The implementation itself is trivial and it's akin to `Read/WriteFastArrayDouble32` (but slightly more performant in principle, as it doesn't have to check the min/max/scale factor for each element - they are all the same within a call to Pack/Unpack). . As a last divergence point, `Double32_t` silently clamps the values that fall our of range, while Real32Quant will throw in that situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390#issuecomment-2360136674:31,log,logically,31,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2360136674,1,['log'],['logically']
Testability,"@pcanal The status bit check test seems a bit flaky as it also failed in the [nightlies](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=394075), albeit with a different problem (segfault, not error message).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327865024:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327865024,1,['test'],['test']
Testability,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913; ```; if (TestBit(kDoNotProcess|kAddressSet)) ; ```; It mixtures test of bits from different enum.; One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`; Also logically one could better call `TestBits` and cast to UInt_t like ; ```; if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) ; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13145#issuecomment-1615039632:132,Test,TestBit,132,https://root.cern,https://github.com/root-project/root/pull/13145#issuecomment-1615039632,7,"['Test', 'log', 'test']","['TestBit', 'TestBits', 'logically', 'test']"
Testability,@pcanal This is just a documentatioon update. Can you please decide to merge or not ? ; It is clear the test failures have nothing to do with the PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-458600001:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-458600001,2,['test'],['test']
Testability,"@pcanal This isn't really work in progress, I just wanted to test that the build would pass. Actually, if you think this commit is ok, we can merge this now, but please let me merge it myself locally, otherwise the GPG signature on the commit is lost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/908#issuecomment-325997446:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/908#issuecomment-325997446,1,['test'],['test']
Testability,"@pcanal Tutorials and tests were added, passing on all platforms (windows failure is about the file used in the tutorial being stuck by another process). Let me know what you think, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2345272455:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2345272455,1,['test'],['tests']
Testability,"@pcanal Well, OK, fine, I'll try. But what is the purpose of this test anyway? (seriously)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2910#issuecomment-435490377:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/2910#issuecomment-435490377,1,['test'],['test']
Testability,"@pcanal Well, it might have never worked that way, I'll have to debug it. If it's urgent, feel free to disable those tests on Windows until I have time to debug it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014565377:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014565377,1,['test'],['tests']
Testability,"@pcanal Well, the testing time went down to 11 minutes, skipping the spurious rebuild (re-linking), and we keep the `--repeat until-pass` flag anyway, so to me the benefit is greater than the potential inconsistent builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16744#issuecomment-2438231683:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/16744#issuecomment-2438231683,1,['test'],['testing']
Testability,@pcanal What's that thing about not excluding tests? Should that be our new default? Why isn't this the default?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5316#issuecomment-611060593:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/5316#issuecomment-611060593,1,['test'],['tests']
Testability,@pcanal added logs; [clad-configure-err.log](https://github.com/root-project/root/files/14114750/clad-configure-err.log); [clad-configure-out.log](https://github.com/root-project/root/files/14114751/clad-configure-out.log),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492#issuecomment-1919517114:14,log,logs,14,https://root.cern,https://github.com/root-project/root/issues/14492#issuecomment-1919517114,5,['log'],"['log', 'logs']"
Testability,@pcanal asked if you can rename file from TTree.cxx to testTTreeCompression.cxx or something similar not to confuse with actual TTree.cxx sources. I will add couple of comments to fix small typos.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-600577939:55,test,testTTreeCompression,55,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-600577939,1,['test'],['testTTreeCompression']
Testability,@pcanal can we have a test for this? This sounds pretty terrible to get wrong...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1680765547:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1680765547,1,['test'],['test']
Testability,@pcanal could you restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2281#issuecomment-402749857:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/2281#issuecomment-402749857,1,['test'],['tests']
Testability,"@pcanal does it make sense to also add a test in `roottest` against issue #9017? If not, I trust you (that this patch fixes the issue) ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021#issuecomment-925233035:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/9021#issuecomment-925233035,1,['test'],['test']
Testability,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541685290:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541685290,1,['test'],['test']
Testability,@pcanal gtest added: b872271ba. Multicore test failure above is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671#issuecomment-576257330:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/4671#issuecomment-576257330,1,['test'],['test']
Testability,"@pcanal if that proves feasible, wouldn't it be beneficial to enable some of the flags everywhere instead of having them opt-in? Namely:; - enabling -Werror everywhere except llvm-facing parts; - using lld when possible (of course we still want to keep building with the default linker to test it works - but maybe it should be the exception rather than the rule); - always defining R__LESS_INCLUDES (or, better, removing all the code in the `#else` parts). By the way, do you know why this define exists? Is there some compiler/platform where compilation breaks if it's not defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2172692915:289,test,test,289,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2172692915,1,['test'],['test']
Testability,"@pcanal indeed _with the patch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**; ```; 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] ; 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] ; 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; ```. **Patched TTreeReader**; ```; 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch; 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]; 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]; 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; ```. **Master TTreeReader**; ```; 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455224174:139,benchmark,benchmark,139,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455224174,1,['benchmark'],['benchmark']
Testability,@pcanal it can be that this PR fixes some if not all of the tests that have been introduced in #5603 and that are failing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5721#issuecomment-637360913:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/5721#issuecomment-637360913,1,['test'],['tests']
Testability,"@pcanal it looks like `roottest_root_meta_tclass_issue_6840_emulatePairsTest` fails on `ROOT-debian10-i386-cxx14-Release`:; ```; -- TEST COMMAND -- ; cd /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/tclass/issue-6840; /usr/bin/timeout -s USR2 270s ./emulatePairs; -- BEGIN TEST OUTPUT --; Contains 2; Contains 1; ==> Dumping object at: 0xbf8a7458, class=Contains. Warning in <TStreamerInfo::Build>: Contains: pair<unsigned char,short> has no streamer or dictionary, data member ""fShort"" will not be saved; fShort ->ffffffffbf; fShort.first 1 ; fShort.second 2 ; fSameAs ->ffffffffbf; fSameAs.first 3 Emulation; fSameAs.second ->ffffffffbfEmulation; fSameAs.second.fValue 4 ; ======> EVENT:0; pair. = (Contains*)0xbf8a7458; pair.fShort.first = 49; pair.fShort.second = 2; pair.fSameAs.first = 51; pair.fSameAs.second.fValue = 4; size of pair<char, SameAsShort>: 4; 1; 2; 3; 4; size of pair<char, SameAsShort>: 4; ==> Dumping object at: 0xbf8a7204, class=pair<SameAsShort,short>. first ->ffffffffbfEmulation; first.fValue 11 ; second 12 Emulation; ======> EVENT:0; pair. = (pair<SameAsShort,short>*)0xbf8a7204; pair.first.fValue = 11; pair.second = 12. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/sftnight/build/workspace/root-pullrequests-build/roottest/root/meta/tclass/issue-6840/emulatePairs.ref	Tue Apr 6 21:19:08 2021; +++ /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/tclass/issue-6840/emulatePairsTest.log	Wed Apr 7 11:46:41 2021; @@ -8,7 +8,7 @@; fShort.second2; fSameAspointervalue; fSameAs.first3Emulation; -fSameAs.secondpointervalueEmulation; +fSameAs.secondpointervaluemulation; fSameAs.second.fValue4; ======>EVENT:0; pair.=(Contains*)pointervalue; @@ -24,7 +24,7 @@; sizeofpair<char,SameAsShort>:4; ==>Dumpingobjectat:pointervalue,class=pair<SameAsShort,short>; ; -firstpointervalueEmulation; +firstpointervaluemulation; first.fValue11; second12Emulation; ======>EVENT:0. -- END OUTDIFF OUTPUT --; CMak",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7778#issuecomment-814891055:132,TEST,TEST,132,https://root.cern,https://github.com/root-project/root/pull/7778#issuecomment-814891055,2,['TEST'],['TEST']
Testability,@pcanal thanks for sharing the history of this. What do we do now? Keep the old files as markers that we still need to port these tests to cling/CMake?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-460535784:130,test,tests,130,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-460535784,1,['test'],['tests']
Testability,"@pcanal this `root_io_filemerger_simple_lz4_compr_level1` test often fails on 6.22, is it something to be worried about?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5846#issuecomment-642179531:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/5846#issuecomment-642179531,1,['test'],['test']
Testability,@pcanal what do you think? Shall I just drop the second commit and forget about derived classes? setting load to kTRUE would make many more tests failing. The only other thing I can think of is to unload after load...; Or to modify the failing test .ref,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1992117429:140,test,tests,140,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1992117429,2,['test'],"['test', 'tests']"
Testability,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that.; It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1085#issuecomment-333403070:139,log,logic,139,https://root.cern,https://github.com/root-project/root/pull/1085#issuecomment-333403070,2,"['log', 'test']","['logic', 'tests']"
Testability,"@pcanal, @ferdymercury, this PR caused a regression in a unit test that I see in other PRs, e.g.:; https://github.com/root-project/root/pull/15173",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14818#issuecomment-2043988487:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/14818#issuecomment-2043988487,1,['test'],['test']
Testability,"@pcanal, I am attaching a standalone example of the bug. It can be reproduced with clang and libstd++ 62 (on bot lcgapp-slc6-x86-64-29). You will find the command in test.sh in [reproducer.zip](https://github.com/root-project/root/files/1412573/reproducer.zip).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226#issuecomment-339139185:166,test,test,166,https://root.cern,https://github.com/root-project/root/pull/1226#issuecomment-339139185,1,['test'],['test']
Testability,"@pcanal, I have changed PR to now mess around with the library type any more. I was just worried by these artifacts:; ```; [4.0K] root_install/lib/TestSupport/; └── [4.0K] objects-RelWithDebInfo; └── [4.0K] TestSupport; └── [4.0K] src; └── [435K] TestSupport.cxx.o. 4 directories, 1 file; ```; The subdirectory with the `RelWithDebInfo` made me worried that this library can't be used in dependent projects that use a different build type. But this turned out to be wrong: even if I build my depended project as `Release`, I can use `ROOT_ADD_GTEST` successfully without warnings about missing test support!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16568#issuecomment-2390992175:147,Test,TestSupport,147,https://root.cern,https://github.com/root-project/root/pull/16568#issuecomment-2390992175,4,"['Test', 'test']","['TestSupport', 'test']"
Testability,"@pcanal, Something broke in roottest (things that don't run in the PR), but I don't remember the test names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1700#issuecomment-371167681:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/1700#issuecomment-371167681,1,['test'],['test']
Testability,"@pcanal, could you please address the clang-format complaints?. I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343439485:82,test,testing,82,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343439485,1,['test'],['testing']
Testability,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863121010:126,test,test,126,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010,2,['test'],['test']
Testability,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211#issuecomment-338156028:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/1211#issuecomment-338156028,3,['test'],['test']
Testability,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>; <details>. ```; ctest -R .*callfunc.* ; Test project /build/vvassilev/root-callfunc-master/release; Start 1829: roottest-root-meta-callfunc-assertUnload-auto; 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec; Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto; 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec; Start 1831: roottest-root-meta-callfunc-execResolveAt-auto; 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec; Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto; 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec; Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto; 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* ; Test project /build/vvassilev/root-callfunc-master/release; Start 2217: roottest-root-treeformula-array-make; 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec; Start 2218: roottest-root-treeformula-casting-make; 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec; Start 2219: roottest-root-treeformula-clones-make; 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec; Start 2220: roottest-root-treeformula-depth-make; 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1252723800:190,test,tests,190,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1252723800,12,"['Test', 'assert', 'benchmark', 'test']","['Test', 'assertUnload-auto', 'assertUnloadHelper-auto', 'benchmarks', 'tested', 'tests']"
Testability,"@pcanal, please check the commit log, I think that's good to go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1431049853:33,log,log,33,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1431049853,1,['log'],['log']
Testability,"@pcanal, regarding your requirements:; * I've already run `clang-format` on my laptop. If the CI version behaves differently, I am of course happy to fix further stuff.; * The documentation is on par with `TCsvDS`, given I copied most of it from there. I am happy to improve it further in a subsequent PR.; * The tests are on par with `datasource_csv`, given I simply adapted it to my case. I will of course add more as I experiment more with it myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371615688:313,test,tests,313,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371615688,2,['test'],['tests']
Testability,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-460264298:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-460264298,2,['test'],['test']
Testability,"@pcanal, this patch is not checking existence of header files - see the original description of the PR. This patch was intended to check if a file was modified or not... So cms is a test case of this IMO. I am not sure what you are after here. IIRC, this patch was developed to cover some failures in both cms and root. None of them exist anymore it seems. Are you proposing to continue keeping this patch? If so, the cost of keeping such technical debt is we will have slow llvm upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151381723:182,test,test,182,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151381723,1,['test'],['test']
Testability,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-470414609:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-470414609,1,['test'],['tests']
Testability,"@pcanal, yes I think I got it, in these tests are checked the sizes of ROOT files. I am working on fixes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-393171359:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-393171359,1,['test'],['tests']
Testability,"@pcanal, yes the improvement from using TBB with TReentrantRWLock for gCoreMutex is only 7% in this case, but actually the use of RW locks instead of always write locks in ```TBufferFile::ReadClassBuffer``` is a much bigger improvement (and the comparisons I was showing for the RWLock variants was always on top of this). For a smaller test with only 9.7M events in 19 input files (instead of 513M events in 1000 input files), using; 256 threads and ```ROOT.TTreeProcessorMT.SetMaxTasksPerFilePerWorker(1)``` the numbers are:. ```; Baseline:; Percent of CPU this job got: 397%; Elapsed (wall clock) time (h:mm:ss or m:ss): 24:56.08. + Use read-write locks in TBufferFile::ReadClassBuffer; Percent of CPU this job got: 3971%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.81. + TBBUnique for gCoreMutex; Percent of CPU this job got: 4765%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:16.00; ```. So the use of RW locks in ```TBufferFile::ReadClassBuffer``` is a factor 80 improvement and the improvement of the RWLock with TBB is another 10%",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-749949244:337,test,test,337,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-749949244,1,['test'],['test']
Testability,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-948203246:182,test,test,182,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246,8,['test'],"['test', 'test-bname-for']"
Testability,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-324655539:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-324655539,1,['test'],['tests']
Testability,@petrstepanov : Thank you for the contribution that now is merged!; I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. ; Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780#issuecomment-1192647873:191,log,log,191,https://root.cern,https://github.com/root-project/root/pull/10780#issuecomment-1192647873,2,['log'],['log']
Testability,@phsft-bot Nice bot! Anyone can test it.; I just put a missing part in.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3427#issuecomment-463499239:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/3427#issuecomment-463499239,1,['test'],['test']
Testability,@phsft-bot build (ne more round of tests now that `pcepsft10` is fixed),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8609#issuecomment-874707487:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/8609#issuecomment-874707487,1,['test'],['tests']
Testability,"@phsft-bot build (the tests succeeded before, this is just a final check)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11435#issuecomment-1260704427:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/11435#issuecomment-1260704427,1,['test'],['tests']
Testability,"@phsft-bot build just on ROOT-performance-centos7-multicore/default. Updated the failing test roottest:#509, so just checking on one machine if that worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5599#issuecomment-627306786:89,test,test,89,https://root.cern,https://github.com/root-project/root/pull/5599#issuecomment-627306786,1,['test'],['test']
Testability,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=On. because that test failure was due to a stale old file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404#issuecomment-464078538:102,test,test,102,https://root.cern,https://github.com/root-project/root/pull/3404#issuecomment-464078538,1,['test'],['test']
Testability,"@phsft-bot build just on ROOT-ubuntu18.04/nortcxxmod. (as far as I can tell from inspecting the logs of the other platforms, they actually built and tested fine...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11468#issuecomment-1266612335:96,log,logs,96,https://root.cern,https://github.com/root-project/root/pull/11468#issuecomment-1266612335,2,"['log', 'test']","['logs', 'tested']"
Testability,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435035350:46,test,testKalman,46,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435035350,1,['test'],['testKalman']
Testability,"@phsft-bot build just on mac11.0/cxx17. I think the errored build above timed out before. I'm not sure what happened with the ROOT-debian10-i386/cxx14 build. The build itself was successful, or so it says at the end of the full log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694#issuecomment-905268545:228,log,log,228,https://root.cern,https://github.com/root-project/root/pull/8694#issuecomment-905268545,1,['log'],['log']
Testability,@phsft-bot build just on mac11.0/default because I changed your config and want to test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-733763719:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-733763719,1,['test'],['test']
Testability,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/879#issuecomment-324628541:104,test,testing,104,https://root.cern,https://github.com/root-project/root/pull/879#issuecomment-324628541,1,['test'],['testing']
Testability,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:; >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5284#issuecomment-609021436:82,test,testing,82,https://root.cern,https://github.com/root-project/root/pull/5284#issuecomment-609021436,1,['test'],['testing']
Testability,@phsft-bot build please now that the test has been fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3768#issuecomment-499803889:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/3768#issuecomment-499803889,1,['test'],['test']
Testability,@phsft-bot build to pick up the new test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13532#issuecomment-1692277975:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/13532#issuecomment-1692277975,1,['test'],['test']
Testability,@phsft-bot build with flags -DCMAKE_INSTALL_PREFIX=/test-root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2388#issuecomment-410264748:52,test,test-root,52,https://root.cern,https://github.com/root-project/root/pull/2388#issuecomment-410264748,1,['test'],['test-root']
Testability,@phsft-bot build with flags -Dmemory_termination=ON. The few changes I did should make rootcling pass and we can run tests. Let's see if it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-325136210:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-325136210,1,['test'],['tests']
Testability,"@phsft-bot build!. @jiangyilism, thanks for you PR, can you add some tests for the new functionality under `cling/test`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1229991577:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1229991577,2,['test'],"['test', 'tests']"
Testability,"@phsft-bot build!. @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-396483274:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-396483274,1,['test'],['test']
Testability,@phsft-bot build!. As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1166320454:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1166320454,2,['test'],"['test', 'testcase']"
Testability,"@phsft-bot build!. Could you update the commit message to something like:; ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5223#issuecomment-604382871:229,log,logic,229,https://root.cern,https://github.com/root-project/root/pull/5223#issuecomment-604382871,2,['log'],['logic']
Testability,@phsft-bot build!. Testing the new roottest branch checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2432#issuecomment-425662796:19,Test,Testing,19,https://root.cern,https://github.com/root-project/root/pull/2432#issuecomment-425662796,1,['Test'],['Testing']
Testability,"@phsft-bot build. I think new generators should go via `ROOT::Math::TRandomEngine`, not another `TRandomXYZ`, right @lmoneta? Also would be good to have some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798#issuecomment-900917227:158,test,tests,158,https://root.cern,https://github.com/root-project/root/pull/8798#issuecomment-900917227,1,['test'],['tests']
Testability,"@phsft-bot build. Let's see if the tests are still passing and then merge the PR, which @bellenot already approved. I like the idea of making the timeout configurable :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886#issuecomment-1808868564:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/10886#issuecomment-1808868564,1,['test'],['tests']
Testability,"@phsft-bot build; I can't see any test failures on the dashboard, let's run it again and see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8176#issuecomment-841681475:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/8176#issuecomment-841681475,1,['test'],['test']
Testability,"@pzhristov @ktf If time is of the essence, the PR could in now. Ideally, however, a few things should be included (as part of this PR or a subsequent PR):; * review of the clang-format suggestion; * adding doc for each functions and members in doxygen format; * adding tests either in root.git or roottest.git",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371608424:269,test,tests,269,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371608424,1,['test'],['tests']
Testability,@rdisipio do you have still by chance the ROOT file example from your post https://root-forum.cern.ch/t/ttree-getentrywithindex-error-due-to-cast-long-int-t/28316? That we could convert into a test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2002483047:193,test,test,193,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2002483047,1,['test'],['test']
Testability,@rdschaffer : could you create a VM with an Atlas cert where I could run a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757847578:75,test,test,75,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757847578,1,['test'],['test']
Testability,@rdschaffer : have you tried comparing the full list of shared libs for a failed and successful job? Are there any differences at all? (unfortunately the links to the logs seem to be expired),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-749194685:167,log,logs,167,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-749194685,1,['log'],['logs']
Testability,"@rlalik sorry for such late reply... (I think I just lost it in my to-do list). I think your fix totally make sense for me (cc: @vgvassilev ). Could you please open PR with the proposed changes, we could see if the test suite will be 'green'?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6777#issuecomment-754622314:215,test,test,215,https://root.cern,https://github.com/root-project/root/issues/6777#issuecomment-754622314,1,['test'],['test']
Testability,"@rquaglia90 this is great!. If you have the time, could you add a test of analytic vs numeric integral? It should be sufficient to copy-paste the Johnson test code, and run it for a few parameter points (not many needed) from here:; https://github.com/root-project/root/blob/7b8424497d2c6e5494f8de225c1e2b315a01e6d3/roofit/roofit/test/testRooJohnson.cxx#L101-L182. **EDIT:**; This is doing a similar thing, but it's easier:; https://github.com/root-project/root/blob/master/roofit/roofit/test/testRooBernstein.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9539#issuecomment-1010213645:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/9539#issuecomment-1010213645,6,['test'],"['test', 'testRooBernstein', 'testRooJohnson']"
Testability,"@sawenzel I get your point about thread safety, and agree that even the previous version was thread-unsafe, so I will deal with this later. The current version introduces a rather large critical section in `TGeoParallelWorld::InitSafetyVoxel` that blocks all concurrent threads even if they want to update the cache of different voxels, I would have pushed that lock a bit below where the update of the cache actually happens. But since this does not run in MT mode this is not critical now. Could you also do clang-formatting using ROOT style for the `bvh` part only (The entirety of TGeo is not yet formatted, but we will do it at some point), however the new files should be formatted. I looked and the internal thread pool is actually used for building the BVH in parallel, which is cool, but there may still be some unused headers, such as `sphere.h` - could you cross-check that and remove whatever is not needed?. The compilation errors on Mac are unrelated to your PR. Still, the compilation on alma8 with gcc8.5 fails, although it should not because the standard is set correctly to C++17 and the header <numeric> is included. ; ```; Error: /github/home/ROOT-CI/src/geom/geom/inc/bvh/v2/vec.h:99:17: error: ‘transform_reduce’ is not a member of ‘std’; ```; So @dpiparo what do we do about this since the `gcc` compliance with C++17 is known to be stable only starting with the gcc9 series? Why do we still test gcc8.5 with C++17?. I'll do also some more testing on my side for your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2360336308:1415,test,test,1415,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2360336308,2,['test'],"['test', 'testing']"
Testability,"@serval2412 Would you mind rebasing and pushing, so we can test with latest master? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-361200766:59,test,test,59,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-361200766,1,['test'],['test']
Testability,"@simonmichal Great, thanks! We are still working on getting that test file up on an XRootD endpoint. Will let you know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-941001842:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-941001842,1,['test'],['test']
Testability,@simonmichal There is now `root://eospublic.cern.ch//eos/root-eos/xrootd.test`. You can use it to implement unit tests along the line of the `RRawFileDavix` implementation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-941068698:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-941068698,2,['test'],"['test', 'tests']"
Testability,"@simonmichal so I guess it's not the libraries. What else can we do to debug this?. > I can upload the files of these two logs, if it would help. What's preventing this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757680222:122,log,logs,122,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757680222,1,['log'],['logs']
Testability,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:; ```; #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0; #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0; #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so; #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2381#issuecomment-408680078:1166,test,test,1166,https://root.cern,https://github.com/root-project/root/pull/2381#issuecomment-408680078,1,['test'],['test']
Testability,"@smuzaffar I am still doing something odd. I get:; ```; Begin processing the 1st record. Run 1, Event 2, LumiSection 1 on stream 0 at 07-Apr-2021 21:41:09.524 CEST; cmsRun: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_11_3_ROOT6_X_2021-04-05-2300/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. Thread 1 ""cmsRun"" received signal SIGABRT, Aborted.; 0x00007ffff4ae33d7 in raise () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff4ae33d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff4ae4ac8 in abort () from /lib64/libc.so.6; #2 0x00007ffff4adc1a6 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff4adc252 in __assert_fail () from /lib64/libc.so.6; #4 0x00007ffff7e8fd19 in edm::WaitingTaskList::reset() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreConcurrency.so; #5 0x00007ffff7ce3cbb in edm::Worker::reset() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #6 0x00007ffff7ce2664 in edm::WorkerManager::resetAll() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #7 0x00007ffff7be8df0 in edm::StreamSchedule::processOneStreamAsync<edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2> >(edm::WaitingTaskHolder, edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2>::TransitionInfoType&, edm::ServiceToken const&, bool)::{lambda()#2}::operator()() (); from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #8 0x00007ffff7be9124 in tbb::internal::function_task<edm::StreamSchedule::processOneStreamAsync<edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2> >(edm::WaitingTaskHolder, edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2>::TransitionInfoType&, edm::ServiceToken const&, bool)::{lambda()#3}>::exe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815176998:214,test,tests,214,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815176998,2,"['Assert', 'test']","['Assertion', 'tests']"
Testability,"@smuzaffar is there a chance you can test https://github.com/root-project/root/commit/f7adbd2b04e62a0660245d43f3d411367a8ebebc or later, from v6-28-00-patches? That should fix this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771#issuecomment-1536241915:37,test,test,37,https://root.cern,https://github.com/root-project/root/issues/12771#issuecomment-1536241915,1,['test'],['test']
Testability,"@smuzaffar, I see the tests were rejected on the cmssw side but can you help us understand if something was missing on the ppc64 backend side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1779520018:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1779520018,1,['test'],['tests']
Testability,"@smuzaffar, can you apply this PR in cmssw and see if something breaks?. @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1166450107:188,test,testcase,188,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1166450107,1,['test'],['testcase']
Testability,"@smuzaffar, can you rerun testing of this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2332294846:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2332294846,1,['test'],['testing']
Testability,"@smuzaffar, can you test this PR in cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1229944464:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1229944464,1,['test'],['test']
Testability,"@smuzaffar, can you test this PR on whole cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1135959304:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1135959304,1,['test'],['test']
Testability,"@smuzaffar, can you test this PR within cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1621746306:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621746306,1,['test'],['test']
Testability,"@smuzaffar, can you test with cmssw the current state of this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143531451:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143531451,1,['test'],['test']
Testability,"@smuzaffar, could we test that PR on cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16150#issuecomment-2262729839:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/16150#issuecomment-2262729839,1,['test'],['test']
Testability,"@smuzaffar, could you test this PR for CMSSW as it would likely end up in v6-26 and is in the core of ROOT name resolution mechanism. cc: @davidlange6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1016179176:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1016179176,1,['test'],['test']
Testability,"@smuzaffar, the jenkins link does not open for me. Can you attach the log here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-986093406:70,log,log,70,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-986093406,1,['log'],['log']
Testability,"@smuzaffar, we will probably start moving towards more upstream llvm parts in Cling. These PRs need to be tested on cmssw because of relocation and pcms. Can you test this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2082370049:106,test,tested,106,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2082370049,2,['test'],"['test', 'tested']"
Testability,"@spacelg then there is nothing we can do for the time being. We'll have to wait until the compiler is available for testing. Please ping us when it is available, so we can fix the issue before the public release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336#issuecomment-2154260248:116,test,testing,116,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2154260248,1,['test'],['testing']
Testability,"@srimanob thanks a lot for the details!; I can confirm that #16232 fixes the issue with the reproducers you gave. However, despite it being green on our CI, [one test for cmssw](https://github.com/root-project/root/pull/16232#issuecomment-2299822796) has a failure most likely related to the change.; Unfortunately I have not been able to reproduce the crash and it is blocking us from merging the fix; do you think you could help us come up with a reproducer that we can more easily debug? I believe that once we fix that crash we can finally merge this fix.; Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955#issuecomment-2328081119:162,test,test,162,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-2328081119,1,['test'],['test']
Testability,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1169577022:54,sandbox,sandbox,54,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1169577022,2,['sandbox'],['sandbox']
Testability,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7802#issuecomment-822528404:97,log,logged,97,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404,2,['log'],['logged']
Testability,"@stwunsch ; Is it possible to change prettyprint test from; ```; self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()); to ; self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()); ```; for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-397811291:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-397811291,3,"['assert', 'test']","['assertEqual', 'test']"
Testability,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build?. The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2315#issuecomment-406401682:96,test,tests,96,https://root.cern,https://github.com/root-project/root/pull/2315#issuecomment-406401682,3,['test'],['tests']
Testability,"@stwunsch @maxgalli please have a look, there is also a test for this here: https://github.com/root-project/roottest/pull/486 . @maxgalli please review especially the changes related to multi-python in both commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5334#issuecomment-611432376:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/5334#issuecomment-611432376,1,['test'],['test']
Testability,"@stwunsch I added the tests you mentioned, thanks!. * redefining a redefined column is just fine, it just redefines it again; * redefining columns with the same name in different branches is just fine, as with Defines; * aliasing a Redefined column just works, it's the same as aliasing a Defined column. > Does the original name stay in the list of column names returned by GetColumnNames?. I don't understand the question, the name is always the same and it appears in the output of `GetColumnNames` before and after the redefinition. > Are there other interaction points for the redefined cols? Like the `GetColumnType` op?. I added a test to assert that `GetColumnType` picks up the type of the redefinition rather than the original type. It didn't if the column came from a TTree branch! Now it does. Everything else should work exactly the same as for normal Defines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7384#issuecomment-795450802:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/7384#issuecomment-795450802,3,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,"@stwunsch I am currently waiting on @oshadura on a way to repeat the test, on @eguiraud to react to my reaction, on a review approval and I still have to deal with a warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-692048972:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-692048972,1,['test'],['test']
Testability,"@stwunsch I checked build in Jenkins, it is green (test are still running)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6779#issuecomment-724095429:51,test,test,51,https://root.cern,https://github.com/root-project/root/issues/6779#issuecomment-724095429,1,['test'],['test']
Testability,"@stwunsch I didn't see tutorials running in Jenkins logs, so I will start full build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5108#issuecomment-599428318:52,log,logs,52,https://root.cern,https://github.com/root-project/root/pull/5108#issuecomment-599428318,1,['log'],['logs']
Testability,"@stwunsch Puh, I don't know... Are you using the latest version of TensorBoard? I have tested it on Ubuntu 16.04.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1353#issuecomment-350016291:87,test,tested,87,https://root.cern,https://github.com/root-project/root/pull/1353#issuecomment-350016291,1,['test'],['tested']
Testability,"@stwunsch as discussed, my opinion is that the previous message was user-friendlier than an actual python runtime error, and to increase test coverage it should be enough to change `exit()` to `exit(1)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616458823:137,test,test,137,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616458823,1,['test'],['test']
Testability,@stwunsch merging now so that @amadio can benchmark this using the nightly builds (and because the InvariantMass test passes and I see `InvariantMass` go from 24% to 8% of the runtime with these changes). Please let me know if I should change anything!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4153#issuecomment-518400412:42,benchmark,benchmark,42,https://root.cern,https://github.com/root-project/root/pull/4153#issuecomment-518400412,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@stwunsch test: of course, albeit it was failing rarely for me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-686719525:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-686719525,1,['test'],['test']
Testability,@stwunsch this pythonisation looks great. Is there a way in which we can test it too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2497#issuecomment-414920963:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/2497#issuecomment-414920963,1,['test'],['test']
Testability,"@sudo-panda @vgvassilev FYI after these changes rootbench (https://github.com/root-project/rootbench) is not compiling anymore:; ```; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx: In function ‘void BM_TFormulaPerf(benchmark::State&, const char*, F&&, bool)’:. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:30:13: error: ‘GradientStorage’ is not a member of ‘TFormula’; TFormula::GradientStorage result(Npar);; ^~~~~~~~~~~~~~~. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:38:19: error: ‘result’ was not declared in this scope; eval(h, f, x, result.data());; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8371#issuecomment-903671179:164,benchmark,benchmark,164,https://root.cern,https://github.com/root-project/root/pull/8371#issuecomment-903671179,4,['benchmark'],['benchmark']
Testability,"@surya2191997 can you please include test cases for the forward, backward pass and other functional TCs required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6091#issuecomment-665102654:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/6091#issuecomment-665102654,1,['test'],['test']
Testability,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261#issuecomment-1863067950:110,test,testing,110,https://root.cern,https://github.com/root-project/root/pull/14261#issuecomment-1863067950,1,['test'],['testing']
Testability,"@vepadulano - FYI, I can confirm that the issue is still present in the latest maser branch built with Python 3.12. However, I cannot reproduce a `SystemError` running the test case with pytest. I'm closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602#issuecomment-1941465245:172,test,test,172,https://root.cern,https://github.com/root-project/root/issues/11602#issuecomment-1941465245,1,['test'],['test']
Testability,"@vepadulano - I think, now all the tests should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1944055171:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1944055171,1,['test'],['tests']
Testability,@vepadulano - the RDF Display tests will fail to compare the strings with floats due to different precision between `std::to_string` and `cling::printValue`. I'll leave it to you to decide what you want to do: either update the tests or change the precision when floats are converted to a string.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1943607432:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1943607432,2,['test'],['tests']
Testability,@vepadulano . We do not have detailed graphics tests.; Currently only stressGraphics is used to say that code is not crashing and produce png image is of approximate size.; We need to create test like in jsroot. See https://github.com/linev/jsroot-test; It is set of SVG files which I regenerate every time when jsroot code changes.; And there I can track any single graphical primitive change.; ; Similar should be done for ROOT graphics as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14382#issuecomment-1898768063:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/14382#issuecomment-1898768063,3,['test'],"['test', 'tests']"
Testability,@vepadulano . We do not have testing which can detect title change of the painted axis.; This need to be implemented in roottest. ; There will be student starting in April which will do exactly this - for new web graphics.; Once it is there - we could also provide similar functionality for classical graphics.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14500#issuecomment-1920757715:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/14500#issuecomment-1920757715,1,['test'],['testing']
Testability,"@vepadulano @eguiraud Same story here, what do you think about `GetDataSetInfo`? See the test here:. ```cpp; TEST(RDataFrameInterface, GetDataSetInfo); {; // trivial/empty datasource; ROOT::RDataFrame df1a(1);; EXPECT_EQ(df1a.GetDataSetInfo(), ""1 empty row"");. ROOT::RDataFrame df1b(2);; EXPECT_EQ(df1b.GetDataSetInfo(), ""2 empty rows"");. // ttree/tchain datasource; TTree tree(""some name"", ""some title"");; ROOT::RDataFrame df2(tree);; EXPECT_EQ(df2.GetDataSetInfo(), ""some name"");. // others with an actual fDataSource, like csv; auto df3 = ROOT::RDF::MakeCsvDataFrame(""RCsvDS_test_headers.csv"");; EXPECT_EQ(df3.GetDataSetInfo(), ""not available"");; }; ```. What about the name `GetDataSetInfo`, note the capitalising! What should we return for an `fDataSource`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7829#issuecomment-817817954:89,test,test,89,https://root.cern,https://github.com/root-project/root/issues/7829#issuecomment-817817954,2,"['TEST', 'test']","['TEST', 'test']"
Testability,@vepadulano Can you check why this seemingly straightforward change is making some test fail?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11412#issuecomment-2103302287:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/11412#issuecomment-2103302287,1,['test'],['test']
Testability,@vepadulano Do we have xrootd server permanently running with test file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13559#issuecomment-1697332420:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/13559#issuecomment-1697332420,1,['test'],['test']
Testability,"@vepadulano I forgot if this problem was reproducible on any Mac? On my Mac:; ```;  │  ~/CERN_/root-rntuple/builds │   builtin-xrootd-5.1.0 ?1  ctest -R test-stressIOPlugins-xroot  ✔ │ 16:54:58 ; Test project /Users/oshadura/CERN_sources/root-rntuple/builds; Start 216: test-stressIOPlugins-xroot; 1/1 Test #216: test-stressIOPlugins-xroot ....... Passed 7.80 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 7.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-790721333:158,test,test-stressIOPlugins-xroot,158,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-790721333,8,"['Test', 'test']","['Test', 'test-stressIOPlugins-xroot', 'tests']"
Testability,"@vepadulano My teste went perfectly well, i.e. all broken applications I could get my hands on work again, including tiny labclass codes relying on {{TRint}} and the full analysis framework I once maintained most of my time. ; So indeed I think this can be closed, many thanks for the quick implementation of the fix and tests! :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068326624:15,test,teste,15,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068326624,2,['test'],"['teste', 'tests']"
Testability,"@vepadulano That looks great, many thanks! ; I see the tests don't explicitly test that `TRint` does not call `Terminate()` due to an error, but probably there's no easy way to do so. . I've right now pulled the patch and am recompiling my 6.26.00 installation with it, and will subsequently test several interactive programs (used in lab classes, an analysis framework on top of ROOT, and in some CLI tools) against it and report back. Hope to finish this either late today or tomorrow. From the code changes alone, I don't see what could go wrong — but better test ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068044140:55,test,tests,55,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068044140,4,['test'],"['test', 'tests']"
Testability,@vepadulano everything should be fixed now. I tested on Windows and it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12912#issuecomment-1571590020:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/12912#issuecomment-1571590020,1,['test'],['tested']
Testability,@vepadulano the last commit adds a test and a fix for Tommaso's issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10699#issuecomment-1146087582:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/10699#issuecomment-1146087582,1,['test'],['test']
Testability,@vepadulano the test failures look real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720595438:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720595438,1,['test'],['test']
Testability,"@vepadulano, @lmoneta, sorry for the ping.; I see that some of the tests fail, but as far as I can tell the failures are not related to this PR.; Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1790968724:67,test,tests,67,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1790968724,2,['test'],['tests']
Testability,"@vepadulano, can you run your tests again. With the current changes we support `constexpr` and it should be fast as we do not even try to look for the symbols but we evaluate the initializer instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1866945314:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1866945314,1,['test'],['tests']
Testability,"@vepadulano, there is already a test in upstream cpycppyy: https://github.com/wlav/cppyy/commit/25398e665d157eb7ede8b3f81e18a5ab7c0da555. That's why I didn't add a unit test. So this is actually a more general question: should we duplicate the cppyy tests as ROOT unit tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2262025019:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2262025019,4,['test'],"['test', 'tests']"
Testability,"@vgvassilev , @aandvalenzuela has already started the [tests for aarch64](https://github.com/cms-sw/root/pull/209#issuecomment-2331962555) and looks like latest change has fixed the root build (tests are now building cmssw)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2332305469:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2332305469,2,['test'],['tests']
Testability,"@vgvassilev , CMS tests [passed](https://github.com/cms-sw/root/pull/188#issuecomment-1782229736) this time. CMSSW build step was failing as `rootcling` failed to build dictionary[a] for one of our package ( with boost headers). Anyway, [patching boost](https://github.com/cms-externals/boost/pull/6) fixed the build issue. . [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-0e3c07/35428/build-logs/CondFormats/RunInfo/log.html; ```; >> Building LCG reflex dict from header file src/CondFormats/RunInfo/src/classes.h; In file included from input_line_7:57:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_13_3_ROOT6_X_2023-10-25-2300/src/CondFormats/RunInfo/src/headers.h:1:; In file included from cmssw/src/CondFormats/RunInfo/interface/RunNumber.h:4:; In file included from cmssw/src/CondFormats/Serialization/interface/Serializable.h:18:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/vector.hpp:26:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/nvp.hpp:35:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/split_free.hpp:22:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/serialization.hpp:14:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/strong_typedef.hpp:28:; .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/type_traits/has_nothrow_assign.hpp:65:7: warning: builtin __has_nothrow_assign is deprecated; use __is_nothrow_assignable instead [-Wdeprecated-builtins]; BOOST_HAS_NOTHROW_ASSIGN(T); ....; ....; In file included from input_line_7:57:; In file included from cmssw/src/CondFormats/RunInfo/src/headers.h:1:; In file included from cmssw/src/CondFormats/RunInfo/inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1782483745:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1782483745,6,"['log', 'test']","['log', 'logs', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , CMSSW tests started via https://github.com/cms-sw/root/pull/194",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321#issuecomment-1884917219:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14321#issuecomment-1884917219,1,['test'],['tests']
Testability,"@vgvassilev , I also tested this for our CXXMODULE IBs and most of relvals failed with errors like. https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-d3a1b7/21842/runTheMatrix-results/8.0_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS/step1_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS.log; ```; ----- Begin Fatal Exception 21-Jan-2022 04:35:59 CET-----------------------; An exception of category 'DictionaryNotFound' occurred while; [0] Constructing the EventProcessor; [1] Constructing module: class=BeamHaloProducer label='generator'; [2] Calling ProductRegistryHelper::addToRegistry, checking dictionaries for produced types; Exception Message:; No data dictionary found for the following classes:. map<string,ULong64_t>. Most likely each dictionary was never generated, but it may; be that it was generated in the wrong package. Please add; (or move) the specification '<class name=""whatever""/>' to; the appropriate classes_def.xml file along with any other; information needed there. For example, if this class has any; transient members, you need to specify them in classes_def.xml.; Also include the class header in classes.h. A type listed above might or might not be the same as a; type declared by a producer module with the function 'produces'.; Instead it might be the type of a data member, base class,; wrapped type, or other object needed by a produced type. Below; is some additional information which lists the types declared; to be produced by a producer module that are associated with; the types whose dictionaries were not found:. edm::HepMCProduct. ----- End Fatal Exception -------------------------------------------------; ```. this is a different error than what we get in out CXXMODULE IBs https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/raw/slc7_amd64_gcc10/CMSSW_12_3_CXXMODULE_X_2022-01-19-2300/pyRelValMatrixLogs/run/135.1_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1018294322:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1018294322,3,"['log', 'test']","['log', 'tested']"
Testability,"@vgvassilev , I am testing this change ( along with https://github.com/root-project/root/commit/fb3367fa03e1c8b639e9591b93f6ac5226a80fed ) here https://github.com/cms-sw/root/pull/160/files but root still failed to build for ppc64le ; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-facf87/20984/lcg/root/6.24.07-0d11bea31b2c034ddd6b4c7737d8a373/log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-986033714:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-986033714,2,"['log', 'test']","['log', 'testing']"
Testability,"@vgvassilev , I can start the cmssw tests now, can you please resolve the conflicts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1153129624:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1153129624,1,['test'],['tests']
Testability,"@vgvassilev , I don't understand this problem.; Mathcore should not depend on Vc, we should not add Vc as a static library.; There is maybe some dependency only in the test programs, but in that case we can link then Vc statically when building the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-997930774:168,test,test,168,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-997930774,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/163",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9884#issuecomment-1041275786:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/9884#issuecomment-1041275786,1,['test'],['tests']
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/165",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10193#issuecomment-1074889910:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/10193#issuecomment-1074889910,1,['test'],['tests']
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/185",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1665256213:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1665256213,1,['test'],['tests']
Testability,"@vgvassilev , `-DLLVM_BUILD_TYPE=Debug` did not help much. It failed again with the same error ( see https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25499/external/py3-hepdata-lib/0.8.1-23017aefcaec1f6e033b49c0652b0cd2/log )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154889634:251,log,log,251,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154889634,1,['log'],['log']
Testability,"@vgvassilev , as @makortel mentioned above , you can do something like the following on lxplus to reproduce this build failure ; ```; #Login to lxplus and start cmssw-el8 container; > ssh lxplus; > cd cd /tmp/$(whoami); > source /cvmfs/cms.cern.ch/cmsset_default.sh; > cmssw-el8; # Create CMSSW area using PR artefacts; > /cvmfs/cms-ci.cern.ch/week1/cms-sw/root/208/41293/install.sh; > cd CMSSW_14_2_ROOT6_X_2024-09-03-2300/; > cmsenv; #Build root dict; > scram b -v -j 10 tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332023914:135,Log,Login,135,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332023914,1,['Log'],['Login']
Testability,"@vgvassilev , cms tests failed. Looks like hepdata-lib package, see the build error [here](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-57f21d/29184/external/py3-hepdata-lib/0.10.1-d5a65a50fc66bb6ceb2097b9bc30c480/log); ```; Processing ./v0.10.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module _Builtin_intrinsics; Failed to load module std; Failed to load module libc; python3: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/root-6.27.01/core/metacling/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1324017853:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1324017853,8,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , cms tests passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10245#issuecomment-1082247173:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/10245#issuecomment-1082247173,1,['test'],['tests']
Testability,"@vgvassilev , cmssw [tests looks good](https://github.com/cms-sw/root/pull/206#issuecomment-2083540349). A unit test failure is not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2083704174:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2083704174,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , cmssw build failed during dictionaries generation [a]. I think this mostly happens when cuda code is envolved. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8fe9c7/41033/build-logs/DataFormats/VertexSoA/log.html; ```; 0.	Program arguments: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-a252d5032aa4f9a2fc7dcaab3fac8b9f/bin/rootcling -reflex -f tmp/el8_amd64_gcc12/src/DataFormats/VertexSoA/src/DataFormatsVertexSoA/a/DataFormatsVertexSoA_xr.cc -inlineInputHeader -failOnWarnings -rmf tmp/el8_amd64_gcc12/src/DataFormats/VertexSoA/src/DataFormatsVertexSoA/a/DataFormatsVertexSoA_xr.rootmap -rml libDataFormatsVertexSoA.so -m DataFormatsCommon_xr_rdict.pcm -m DataFormatsProvenance_xr_rdict.pcm -DALPAKA_DEFAULT_HOST_MEMORY_ALIGNMENT=128 -DALPAKA_DISABLE_VENDOR_RNG -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ -DGNU_GCC -D_GNU_SOURCE -DTBB_USE_GLIBCXX_VERSION=120301 -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DTBB_PREVIEW_RESUMABLE_TASKS=1 -DTBB_PREVIEW_TASK_GROUP_EXTENSIONS=1 -DBOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/alpaka/1.1.0-84e4d58fde852e6641ccc23881ba7b1f/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2299822796:221,log,logs,221,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2299822796,4,"['log', 'test']","['log', 'logs', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , cmssw full release tests ( https://github.com/cms-sw/root/pull/169#issuecomment-1136649688 ) looks good. The unit test failing is nit related to root change ( it has been failing for cmssw for a while now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1136804413:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1136804413,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , cmssw tests are failing but not due to this change but due to https://github.com/cms-sw/cmsdist/pull/8928#issuecomment-1885124568",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321#issuecomment-1885125616:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14321#issuecomment-1885125616,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests are now running for https://github.com/cms-sw/root/pull/172",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1216596690:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1216596690,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests are runing via https://github.com/cms-sw/root/pull/208 now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2295885146:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2295885146,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests for latest root master + this change are now running via https://github.com/cms-sw/cmsdist/pull/7558",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1017484401:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1017484401,1,['test'],['tests']
Testability,"@vgvassilev , is it worth to add a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2977#issuecomment-439033985:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/2977#issuecomment-439033985,1,['test'],['test']
Testability,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4331#issuecomment-527766672:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/4331#issuecomment-527766672,1,['test'],['test']
Testability,"@vgvassilev , testing it https://github.com/cms-sw/root/pull/169",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1136021523:14,test,testing,14,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1136021523,1,['test'],['testing']
Testability,"@vgvassilev , this failed to build for cmssw externals e.g. `hepdata-lib` failed to build with [error](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25491/external/py3-hepdata-lib/0.8.1-ec986c2493f655785ae2df5c3741f2df/log); ```; + pip3 install --no-clean --no-deps --no-index --no-build-isolation --no-cache-dir --disable-pip-version-check --user -v hepdata_lib-0.8.1.tar.gz; Using pip 22.0.4 from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/py3-pip/22.0.4-84448601ef6fb03288e044db5008fd92/lib/python3.9/site-packages/pip (python 3.9); Processing ./hepdata_lib-0.8.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/libc.pcm' is out of date and needs to be rebuilt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154135015:253,log,log,253,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154135015,14,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , this looks good ( I have tested it here https://github.com/cms-sw/cmsdist/pull/7445 ) . Can you please back port it to v6.24 branch too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-988190564:39,test,tested,39,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-988190564,1,['test'],['tested']
Testability,"@vgvassilev , this looks good. CMSSW PR tests worked fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10193#issuecomment-1075983950:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/10193#issuecomment-1075983950,1,['test'],['tests']
Testability,"@vgvassilev , though PR tests for https://github.com/cms-sw/root/pull/163 passed ( may be because it was a partial/incremental build of cmssw) but all tests in CMSSW IBs are failing with errors like ; ```; Error in <TCling::LoadPCM>: ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libNet_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/lcg/root/6.27.01-41fc432df04c8b3cb067f93c7cebe91f/lib/libASImageGui_rdict.pcm; ...; ...; terminate called after throwing an instance of 'edm::Exception'; what(): An exception of category 'FatalRootError' occurred.; Additional Info:; [a] Fatal Root Error: @SUB=TCling::LoadPCM; ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libPhysics_rdict.pcm file does not exist; ```. see the full log here https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT6_X_2022-02-20-0000/pyRelValMatrixLogs/run/4.24_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT/step2_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT.log#/ . Somehow `cling` is looking for root pcm files under the CMSSW/bin/arch directory ( this is the directory from where the `cmsRun` executable was picked up)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9884#issuecomment-1046310352:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/9884#issuecomment-1046310352,5,"['log', 'test']","['log', 'logreader', 'tests']"
Testability,"@vgvassilev , we have integrated this in CMSSW ROOT6 IBs and every things looks good. We also see some improvement on the memory usage (on avg 20MB less RSS used during our tests.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1796#issuecomment-380451623:173,test,tests,173,https://root.cern,https://github.com/root-project/root/pull/1796#issuecomment-380451623,1,['test'],['tests']
Testability,"@vgvassilev , you can use `cmsdev40 to cmsdev45` nodes for testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332316114:59,test,testing,59,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332316114,1,['test'],['testing']
Testability,@vgvassilev - I added this patch for tonight's cmssw modules IB for a test...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1180288358:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1180288358,1,['test'],['test']
Testability,"@vgvassilev . > Could you also now try running clingtest as part of the regular ROOT testing procedure? I believe (with minor adjustments) it will work. Sure, but this PR makes this neither easier nor more difficult, nor should it have any other effect :-) We probably want a new build flavor, to make sure that things work both with and without cling-test. I.e. enable cling-test only on some builds. Which ones - one Fedora, one Mac? And I agree we should have this PR tested with cling-test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-844076379:85,test,testing,85,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844076379,5,['test'],"['test', 'tested', 'testing']"
Testability,"@vgvassilev . User CPU time, 2nd run of all tests:. test | opt | non-opt; -----|-----|--------; stressGeometry.cxx | 20.10 | 19.36; stressHistogram.cxx | 16.52 | 15.89; stressGraphics.cxx | 57.68 | 16.13. stressGraphics generates code that's full of virtual function calls. This used to explode; a factor 4 is still terrible but given that this is on the ""awkward"" side of our legacy code likely a price we need to pay.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-970007970:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-970007970,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev @Axel-Naumann Report: no-one called `ASTWriter::getSubmoduleID()`, but I did get the following output:; ```ConsoleSession; FAILED: core/G__Core.cxx lib/Core.pcm /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core/G__Core.cxx /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib/Core.pcm ; cd /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core && /scratch/greenc/test-products/cmake/v3_24_1/Linux64bit+3.10-2.17/bin/cmake -E env LD_LIBRARY_PATH=/scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib:/scratch/greenc/test-products/xrootd/v5_4_3b/Linux64bit+3.10-2.17-c14-p3913-debug/lib:/scratch/greenc/test-products/tbb/v2021_7_0/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib64:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/pythia/v6_4_28u/Linux64bit+3.10-2.17-c14-debug/lib:/scratch/greenc/test-products/postgresql/v14_5/Linux64bit+3.10-2.17-p3913/lib:/scratch/greenc/test-products/openblas/v0_3_21/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/python/v3_9_13/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/sqlite/v3_39_02_00/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/libxml2/v2_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/gsl/v2_7/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib/x86_64-unknown-linux-gnu:/scratch/greenc/test-products/fftw/v3_3_10/Linux64bit+3.10-2.17/lib: /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core/rootcling_stage1/src/rootcling_stage1 -v4 -f G__Core.cxx -cxxmodule -s /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib/libCore.so -excludePath /s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:189,test,test-products,189,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,10,['test'],['test-products']
Testability,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```; python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed.; ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5175#issuecomment-601660312:187,Assert,Assertion,187,https://root.cern,https://github.com/root-project/root/pull/5175#issuecomment-601660312,1,['Assert'],['Assertion']
Testability,"@vgvassilev @Axel-Naumann any clue why this is failing this test? The only outside visible change should be that you now no longer can `do getASTConsumer()` and then cast it to the custom consumer type, but I don't see any point where we do this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/988#issuecomment-329248364:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/988#issuecomment-329248364,1,['test'],['test']
Testability,@vgvassilev @Axel-Naumann what do we do with this one ? ; Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-458597174:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-458597174,1,['test'],['tests']
Testability,"@vgvassilev @davidlange6 , this does not merge any more which causes CXXMODULE CMSSW IBs to fail ( as we use it to patch module IBs) https://cmssdt.cern.ch/SDT/jenkins-artifacts/build-any-ib/CMSSW_11_3_CXXMODULE_X_2021-02-22-1100/slc7_amd64_gcc900/105574/lcg/root/6.23.01-7767a664fb8cb9cd43d25b3eb5127fea/log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-783458823:305,log,log,305,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-783458823,1,['log'],['log']
Testability,"@vgvassilev Can you explain me, why the test cases failed? https://github.com/root-project/root/pull/10593#issuecomment-1128002967. Is it, because the code becomes slower (regression) or is there a bug, which I don't see?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1129005566:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1129005566,1,['test'],['test']
Testability,@vgvassilev Do we actually have any tests that checks that things still work if the files used to produce the pcm (or the pch) are gone and/or not longer accessible? (i.e. the test framework would have to explicitly hides/move/removes some files to achieve this).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1138843195:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1138843195,2,['test'],"['test', 'tests']"
Testability,@vgvassilev FYI:; ```; cd /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core && /scratch/greenc/test-products/cmake/v3_23_2/Linux64bit+3.10-2.17/bin/cmake -E env LD_LIBRARY_PATH=/scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/products/xrootd/v5_4_3a/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/scratch/greenc/test-products/tbb/v2021_5_0b/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib64:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib:/products/pythia/v6_4_28u/Linux64bit+3.10-2.17-c14-debug/lib:/scratch/greenc/test-products/postgresql/v14_4/Linux64bit+3.10-2.17-p3912/lib:/products/openblas/v0_3_20c/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/python/v3_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/sqlite/v3_38_05_00/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/libxml2/v2_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/gsl/v2_7/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib/x86_64-unknown-linux-gnu:/scratch/greenc/test-products/fftw/v3_3_10/Linux64bit+3.10-2.17/lib: /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib/libCore.so -excludePath /scratch/greenc/test-products/root/v6_26_04b/source/root-6.26.04 -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/ginclude -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/externals -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/builtins -writeEmptyRootPCM -m _Built,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1192995322:42,test,test-products,42,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1192995322,10,['test'],['test-products']
Testability,"@vgvassilev I already have a patch, it's currently running on my clang CI instance. I'll open a review once it passes the tests. See: https://teemperor.de/ccir/git:FixVFSinCI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/910#issuecomment-326302267:122,test,tests,122,https://root.cern,https://github.com/root-project/root/pull/910#issuecomment-326302267,1,['test'],['tests']
Testability,@vgvassilev I had sent you instruction to access ppc64le machine. Were you able connect and test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979434914:92,test,test,92,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979434914,1,['test'],['test']
Testability,"@vgvassilev I have no idea how to test it. The CUDA mode is the only situation, which I found, where the function is called with an unresolved path. Does ROOT support unit tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1127905170:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1127905170,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction.; * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager).; * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1717257305:108,test,test,108,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717257305,3,['test'],"['test', 'testing', 'tests']"
Testability,"@vgvassilev I have uploaded a [snapshot image](https://hub.docker.com/layers/greenc/root_10861/build-snapshot/images/sha256-cde089095090f5cd9785cfcc2f2df341b24437b0868d7014b51efb8d3d7ab5ca?context=repo). The shell history will show exactly what was done, and the relevant build log is `/scratch/build-root-v6-28-00-patches-c14-p3913-debug`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1402618462:278,log,log,278,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1402618462,1,['log'],['log']
Testability,"@vgvassilev I see ` In case an identifier is defined in both (eg TMVA::Event and X::Event), the GMI will take priority and load the TMVA module without later allowing the system to look for other candidates.`. Could you explicit in the commit log why an unrelated fully qualified name (`TMVA::Event`) takes precedence over another fully qualified name (`X::Event`) and why this is usually not an issue (i.e. Is there any other cases (other than module vs rootmap) where this could lead to problems?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1014508200:243,log,log,243,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1014508200,1,['log'],['log']
Testability,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11137#issuecomment-1208594790:14,test,tested,14,https://root.cern,https://github.com/root-project/root/pull/11137#issuecomment-1208594790,1,['test'],['tested']
Testability,@vgvassilev I will add test case to roottest!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1174#issuecomment-335806731:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/1174#issuecomment-335806731,1,['test'],['test']
Testability,"@vgvassilev It seems that the changes in this PR provide the same performance as the current master (after the two hotfixes), while supporting leaving the `k*` constants in `TError.h` as `constexpr` so without producing a symbol in `libCore.so`. For `TString::kNPOS` I guess we want to leave the commit there since it was anyway a real fix to a bug. Another problem which is still present in both the current master and even after this PR is that the number of file operations is still quite high, i.e.; ```; 532 newfstatat(3, ; 29 newfstatat(4, ; 10141 newfstatat(AT_FDCWD, ; 546 openat(AT_FDCWD, ; 843 readlink(; ```. which are exactly the same whether current master or this patch. Consider that many of those `newfstatat` calls are spurious and I'm trying to understand where they come from. Take the following as an example; ```; newfstatat(AT_FDCWD, ""/home/vpadulan/programs/rootproject/rootbuild/reduce-symbol-search-release/gui/sessionviewer/input_line_11"", 0x7ffde442f050, 0) = -1 ENOENT (No such file or directory); ```. Note the presence of the `rootbuild` directory, which is the path where I store the ROOT build artifacts, even though I am using ROOT from the install directory. I thought it was something in the machinery of `(T)cling` but so far my tests haven't brought me to any conclusion. Another suspicion is that the path to the build directory is hardcoded somehow in the `.pcm` or in the AST and doesn't get converted to the install directory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1867410890:1265,test,tests,1265,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1867410890,1,['test'],['tests']
Testability,@vgvassilev LGTM so I am testing it and we merge it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5903#issuecomment-666224921:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/5903#issuecomment-666224921,1,['test'],['testing']
Testability,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:421,log,log,421,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,2,['log'],['log']
Testability,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-471684777:265,test,test,265,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-471684777,1,['test'],['test']
Testability,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1432060211:56,log,log,56,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1432060211,3,"['log', 'test']","['log', 'testing']"
Testability,@vgvassilev Of course - the test is older than the patch :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/940#issuecomment-327080833:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/940#issuecomment-327080833,1,['test'],['test']
Testability,"@vgvassilev Seems to be, new errors in roottest appears after this PR?; [Like this one](https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6173/testReport/projectroot.roottest.root.meta.rootcling-modules/module-dep-order/roottest_root_meta_rootcling_modules_module_dep_order_cxxmodules_implicit_build_error/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631384298:170,test,testReport,170,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631384298,1,['test'],['testReport']
Testability,@vgvassilev Test is added. Please help resume github pipeline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1268422584:12,Test,Test,12,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1268422584,1,['Test'],['Test']
Testability,@vgvassilev Thanks for investigation! I am testing if it is fixing a problem for zlib 1.2.11!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1189#issuecomment-336869142:43,test,testing,43,https://root.cern,https://github.com/root-project/root/pull/1189#issuecomment-336869142,1,['test'],['testing']
Testability,"@vgvassilev Thanks for review.; To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603731782:47,log,logical,47,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603731782,1,['log'],['logical']
Testability,@vgvassilev The fix for the CUDA support is ready and all CUDA tests passes. You can find it here: https://github.com/SimeonEhrig/root/commit/b683be20d3e8f08ad6bb8f484bdb2a978a8450cc. It is on the branch [fixCUDAllvm13](https://github.com/SimeonEhrig/root/tree/fixCUDAllvm13) in my root fork.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1196606010:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1196606010,1,['test'],['tests']
Testability,@vgvassilev The installation with LLVM Debug is there now; ```; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3debug/latest/x86_64-el9-gcc13-dbg/setup.sh; $ grep LLVM /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3debug/Sun/ROOT/HEAD/x86_64-el9-gcc13-dbg/logs/ROOT-HEAD-configure.log; -- Building LLVM in 'Debug' mode.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2016721218:260,log,logs,260,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2016721218,2,['log'],"['log', 'logs']"
Testability,@vgvassilev The test now passes on all platforms. Let me know what you think about the commit and if we can merge this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1895295017:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1895295017,1,['test'],['test']
Testability,@vgvassilev What as the purpose of test/CodeUnloading/RunAgainstClangTestSuite ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293947052:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293947052,1,['test'],['test']
Testability,"@vgvassilev as I wrote on Mattermost, this change was particularly written to address Jun's problem. `roottest-root-html-runMakeIndex` is a separate thing that needs addressing anyhow; it's only now visible because all the other failures are gone. FWIW I don't agree that the workarounds (hacks) introduced in https://github.com/root-project/root/pull/10910 are a good way to go, as shown by the many failing tests. The scope of the changes is too big and there are valid reasons to do something with `Decl`s currently being defined, as evidenced by the many failing tests. Adding more conditions will eventually only lead to internally inconsistent states...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272983808:409,test,tests,409,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272983808,2,['test'],['tests']
Testability,"@vgvassilev can you make that a PR / ready to review when it's passing the tests, please? And for our CI infra's occupancy and energy consumption / global warming it actually helps if you could just run roottest on your machine before submitting a PR, at least for non-trivial changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1170218382:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1170218382,1,['test'],['tests']
Testability,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1896037872:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1896037872,1,['test'],['tests']
Testability,"@vgvassilev do you know why the roottest branch from https://github.com/root-project/roottest/pull/235 is not picked up here? Extract from the log:; ```; Checking out Revision 2a4cfad9b3bfb6d868786869689740f643166317 (origin/master); > git config core.sparsecheckout # timeout=10; > git checkout -f 2a4cfad9b3bfb6d868786869689740f643166317; > git branch -a -v --no-abbrev # timeout=10; > git branch -D master # timeout=10; > git checkout -b master 2a4cfad9b3bfb6d868786869689740f643166317; Commit message: ""Adding dependency for slavedict generation on masterdict""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775#issuecomment-429016900:143,log,log,143,https://root.cern,https://github.com/root-project/root/pull/2775#issuecomment-429016900,1,['log'],['log']
Testability,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14972#issuecomment-1998002993:47,test,tests,47,https://root.cern,https://github.com/root-project/root/issues/14972#issuecomment-1998002993,1,['test'],['tests']
Testability,"@vgvassilev how did you address the comment https://github.com/root-project/root/pull/1787#pullrequestreview-106971834 by @pcanal:; > Please make sure that this does not hide a missing feature in GetFullyQualifiedType which is supposed to already have built-in the full qualification. I am collecting a set of tests (failures) of the clang version of `GetFullyQualifiedName`. Adding ""your cases"" to that list might be a way of addressing Philippe's comment. Do you have such test cases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1787#issuecomment-383011266:310,test,tests,310,https://root.cern,https://github.com/root-project/root/pull/1787#issuecomment-383011266,2,['test'],"['test', 'tests']"
Testability,@vgvassilev nice job. The benchmark I have creating hundreds of histos relying on jitting takes w/o this patch 12s and 3s w/ it. For me the code good to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211#issuecomment-338157762:26,benchmark,benchmark,26,https://root.cern,https://github.com/root-project/root/pull/1211#issuecomment-338157762,1,['benchmark'],['benchmark']
Testability,"@vgvassilev not sure what you expect here - gdb doesn't print `StringRef` etc, so maybe a 2 line patch that prints this before asserting would be more constructive?. I've lowered this to ""default priority"" because it likely affects only current libc++ - and that's a very rare environment. We cannot block 6.26/06 because of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1195579174:127,assert,asserting,127,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1195579174,1,['assert'],['asserting']
