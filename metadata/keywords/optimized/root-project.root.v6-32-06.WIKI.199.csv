quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"gh); Scans the value of the user function by varying parameter number \(\mbox{par}\), leaving all other parameters fixed at the current value. If \(\mbox{par}\) is not specified, all variable parameters are scanned in sequence. The number of points \(\mbox{npoints}\) in the scan is 40 by default, and cannot exceed 100. The range of the scan is by default 2 standard deviations on each side of the current best value, but can be specified as from \(\mbox{low}\) to \(\mbox{high}\). After each scan, if a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,; const std::vector\(<\)double\(>\)&, unsigned int); Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:53539,Simpl,SimplexMinimizer,53539,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,"['SIMPL', 'Simpl', 'simpl']","['SIMPLEX', 'SimplexMinimizer', 'simplex']"
Usability,"ghlighted ; Definition at line 315 of file TButton.cxx. ◆ SetGrid(). void TButton::SetGrid ; (; Int_t ; = 1, . Int_t ; = 1 . ). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 45 of file TButton.h. ◆ SetLogx(). void TButton::SetLogx ; (; Int_t ; = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 46 of file TButton.h. ◆ SetLogy(). void TButton::SetLogy ; (; Int_t ; = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 47 of file TButton.h. ◆ SetMethod(). virtual void TButton::SetMethod ; (; const char * ; method). inlinevirtual . Definition at line 48 of file TButton.h. ◆ SetName(). void TButton::SetName ; (; const char * ; name). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 49 of file TButton.h. ◆ Streamer(). void TButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGroupButton. ◆ StreamerNVirtual(). void TButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TButton.h. ◆ x3d(). void TButton::x3d ; (; Option_t * ; type = """"). inlineoverridevirtual . Deprecated: use TPad::GetViewer3D() instead. ; Reimplemented from TPad.; Definition at line 50 of file TButton.h. Member Data Documentation. ◆ fFocused. Bool_t TButton::fFocused. private . If cursor is in... ; Definition at line 21 of file TButton.h. ◆ fFraming. Bool_t TButton::fFraming. private . True if you want a frame to be painted when pressed. ; Definition at line 22 of file TButton.h. ◆ fMethod. TString TButton::fMethod. protected . Method to be executed by this button. ; Definition at line 28 of file TButton.h. Libraries for TButton:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TButton.h; graf2d/gpad/src/TButton.cxx. TButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:61652,Guid,Guide,61652,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,1,['Guid'],['Guide']
Usability,"ght ; Definition at line 161 of file DataSet.h. ◆ fLogger. MsgLogger* TMVA::DataSet::fLogger. mutableprivate . ! message logger ; Definition at line 163 of file DataSet.h. ◆ fResults. std::vector< std::map< TString, Results* > > TMVA::DataSet::fResults. private . ! [train/test/...][method-identifier] ; Definition at line 143 of file DataSet.h. ◆ fSampling. std::vector<Char_t> TMVA::DataSet::fSampling. private . random or importance sampling (not all events are taken) !! Bool_t are stored ( no std::vector<bool> taken for speed (performance) issues ) ; Definition at line 149 of file DataSet.h. ◆ fSamplingEventList. std::vector< std::vector< std::pair< Float_t, Long64_t > > > TMVA::DataSet::fSamplingEventList. mutableprivate . weights and indices for sampling ; Definition at line 152 of file DataSet.h. ◆ fSamplingNEvents. std::vector<Int_t> TMVA::DataSet::fSamplingNEvents. private . number of events which should be sampled ; Definition at line 150 of file DataSet.h. ◆ fSamplingRandom. TRandom3* TMVA::DataSet::fSamplingRandom. private . -> random generator for sampling ; Definition at line 154 of file DataSet.h. ◆ fSamplingSelected. std::vector< std::vector< std::pair< Float_t, Long64_t > > > TMVA::DataSet::fSamplingSelected. mutableprivate . selected events ; Definition at line 153 of file DataSet.h. ◆ fSamplingWeight. std::vector<Float_t> TMVA::DataSet::fSamplingWeight. private . weight change factor [weight is indicating if sampling is random (1.0) or importance (<1.0)] ; Definition at line 151 of file DataSet.h. ◆ fTrainingBlockSize. Long64_t TMVA::DataSet::fTrainingBlockSize. private . block size into which the training dataset is divided ; Definition at line 169 of file DataSet.h. Libraries for TMVA::DataSet:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataSet.h; tmva/tmva/src/DataSet.cxx. TMVADataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:28237,Guid,Guide,28237,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['Guid'],['Guide']
Usability,"ght.Definition TAttPad.cxx:129; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::ChangeLabelvoid ChangeLabel(Int_t labNum=0, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")Define new text attributes for the label number ""labNum"".Definition TAxis.cxx:961; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetLabelFontvoid SetLabelFont(Int_t labelfont)Definition TGaxis.h:105; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetGridxvoid SetGridx(Int_t value=1) overrideDefinition TPad.h:336; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; h1TH1F * h1Definition legend1.C:5; AuthorOlivier Couet ; Definition in file ratioplotOld.C. tutorialshistratioplotOld.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ratioplotOld_8C.html:6605,Guid,Guide,6605,doc/master/ratioplotOld_8C.html,https://root.cern,https://root.cern/doc/master/ratioplotOld_8C.html,1,['Guid'],['Guide']
Usability,ghted events in MC. ; Definition at line 33 of file TFoam.h. ◆ fPrimAcu. Double_t* TFoam::fPrimAcu. protected . [fNoAct] Array of cumulative probability of all active cells ; Definition at line 51 of file TFoam.h. ◆ fPrime. Double_t TFoam::fPrime. protected . Primary integral R' (R=R'<wt>) ; Definition at line 70 of file TFoam.h. ◆ fPseRan. TRandom* TFoam::fPseRan. protected . Pointer to user-defined generator of pseudorandom numbers. ; Definition at line 62 of file TFoam.h. ◆ fRho. TFoamIntegrand* TFoam::fRho. protected . ! Pointer to the user-defined integrand function/distribution ; Definition at line 60 of file TFoam.h. ◆ fRNmax. Int_t TFoam::fRNmax. protected . Maximum No. of the rand. numb. requested at once. ; Definition at line 29 of file TFoam.h. ◆ fRvec. Double_t* TFoam::fRvec. protected . [fRNmax] random number vector from r.n. generator fDim+1 maximum elements ; Definition at line 58 of file TFoam.h. ◆ fSumOve. Double_t TFoam::fSumOve. protected . Total Sum of overweighted events. ; Definition at line 67 of file TFoam.h. ◆ fSumWt. Double_t TFoam::fSumWt. protected . Definition at line 66 of file TFoam.h. ◆ fSumWt2. Double_t TFoam::fSumWt2. protected . Total sum of wt and wt^2. ; Definition at line 66 of file TFoam.h. ◆ fVersion. TString TFoam::fVersion. protected . Actual version of the FOAM like (1.01m) ; Definition at line 25 of file TFoam.h. ◆ fWtMax. Double_t TFoam::fWtMax. protected . Definition at line 69 of file TFoam.h. ◆ fWtMin. Double_t TFoam::fWtMin. protected . Maximum/Minimum MC weight. ; Definition at line 69 of file TFoam.h. ◆ fXdivPRD. TFoamVect** TFoam::fXdivPRD. protected . ! Lists of division values encoded in one vector per direction ; Definition at line 42 of file TFoam.h. Libraries for TFoam:. [legend]; The documentation for this class was generated from the following files:; math/foam/inc/TFoam.h; math/foam/src/TFoam.cxx. TFoam. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:46262,Guid,Guide,46262,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['Guid'],['Guide']
Usability,"ghted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:17618,Clear,Clear,17618,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,29,['Clear'],['Clear']
Usability,"ghted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScene.html:18683,Clear,Clear,18683,doc/master/classTEveScene.html,https://root.cern,https://root.cern/doc/master/classTEveScene.html,1,['Clear'],['Clear']
Usability,"ghts & ; weights, . PassThrough & ; passThrough . ). operator to call the steepest gradient descent algorithm ; implementation of the steepest gradient descent algorithm; entry point to start the minimization procedure; Parameters. fitnessFunction(templated) function which has to be provided. This function is minimized ; weights(templated) a reference to a container of weights. The result of the minimization procedure is returned via this reference (needs to support std::begin and std::end ; passThrough(templated) object which can hold any data which the fitness function needs. This object is not touched by the minimizer; This object is provided to the fitness function when called. Can be used with multithreading (i.e. ""HogWild!"" style); see call in trainCycle ; Definition at line 271 of file NeuralNet.icc. Member Data Documentation. ◆ m_alpha. double TMVA::DNN::Steepest::m_alpha. internal parameter (learningRate) ; Definition at line 371 of file NeuralNet.h. ◆ m_beta. double TMVA::DNN::Steepest::m_beta. internal parameter (momentum) ; Definition at line 372 of file NeuralNet.h. ◆ m_localGradients. std::vector<double> TMVA::DNN::Steepest::m_localGradients. local gradients for reuse in thread. ; Definition at line 376 of file NeuralNet.h. ◆ m_localWeights. std::vector<double> TMVA::DNN::Steepest::m_localWeights. local weights for reuse in thread. ; Definition at line 375 of file NeuralNet.h. ◆ m_prevGradients. std::vector<double> TMVA::DNN::Steepest::m_prevGradients. vector remembers the gradients of the previous step ; Definition at line 373 of file NeuralNet.h. ◆ m_repetitions. size_t TMVA::DNN::Steepest::m_repetitions. Definition at line 337 of file NeuralNet.h. Libraries for TMVA::DNN::Steepest:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/inc/TMVA/NeuralNet.icc. TMVADNNSteepest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html:3772,Guid,Guide,3772,doc/master/classTMVA_1_1DNN_1_1Steepest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html,1,['Guid'],['Guide']
Usability,"ghts () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Static Protected Member Functions; static size_t CalculateNormDim (int axis, size_t c, size_t h, size_t w);  . Private Attributes; Tensor_t fDerivatives;  First fDerivatives of the activations of this layer. ;  ; TDescriptors * fDescriptors = nullptr;  ; Scalar_t fEpsilon;  ; Matrix_t fIVar;  ; Scalar_t fMomentum;  The weight dec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html:7626,learn,learningRate,7626,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,ghts; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 2043 of file TProfile2D.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 31 of file TProfile2D.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 30 of file TProfile2D.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile2D::fBinEntries. protected . Number of entries per bin. ; Definition at line 34 of file TProfile2D.h. ◆ fBinSumw2. TArrayD TProfile2D::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 41 of file TProfile2D.h. ◆ fErrorMode. EErrorType TProfile2D::fErrorMode. protected . Option to compute errors. ; Definition at line 35 of file TProfile2D.h. ◆ fgApproximate. Bool_t TProfile2D::fgApproximate = kFALSE. staticprotected . Bin error approximation option. ; Definition at line 42 of file TProfile2D.h. ◆ fScaling. Bool_t TProfile2D::fScaling. protected . ! True when TProfile2D::Scale is called ; Definition at line 38 of file TProfile2D.h. ◆ fTsumwz. Double_t TProfile2D::fTsumwz. protected . Total Sum of weight*Z. ; Definition at line 39 of file TProfile2D.h. ◆ fTsumwz2. Double_t TProfile2D::fTsumwz2. protected . Total Sum of weight*Z*Z. ; Definition at line 40 of file TProfile2D.h. ◆ fZmax. Double_t TProfile2D::fZmax. protected . Upper limit in Z (if set) ; Definition at line 37 of file TProfile2D.h. ◆ fZmin. Double_t TProfile2D::fZmin. protected . Lower limit in Z (if set) ; Definition at line 36 of file TProfile2D.h. Libraries for TProfile2D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile2D.h; hist/hist/src/TProfile2D.cxx. TProfile2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:108485,Guid,Guide,108485,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['Guid'],['Guide']
Usability,"ging (Bool_t on=kTRUE) override;  Switch on/off merge timer. ;  ; void StopProcess (Bool_t abort, Int_t timeout=-1) override;  Stop process after this event. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void StoreOutput (TList *out) override;  Store received output list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:4635,feedback,feedback,4635,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['feedback'],['feedback']
Usability,"ging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75867,Clear,ClearInputData,75867,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearInputData']
Usability,"gistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75603,Clear,ClearInput,75603,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearInput']
Usability,"given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:49248,clear,clearing,49248,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clearing']
Usability,"given. For example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default the name of the object = title = formula itself. old.SetName(""old""). then, old can be reused in a new expression. TFormula new(""x*old"") is equivalent to: TFormula new(""x*sin(x*(x<0.5 || x>1))""); Up to 4 dimensions are supported (indicated by x, y, z, t) An expression may have 0 parameters or a list of parameters indicated by the sequence [par_number]; A graph showing the logic to compile and analyze a formula is shown in TFormula::Compile and TFormula::Analyze. Once a formula has been compiled, it can be evaluated for a given set of parameters. see graph in TFormula::EvalPar.; This class is the base class for the function classes TF1,TF2 and TF3. It is also used by the ntuple selection mechanism TNtupleFormula.; In version 7 of TFormula, the usage of fOper has been changed to improve the performance of TFormula::EvalPar. Conceptually, fOper was changed from a simple array of Int_t to an array of composite values. For example a 'ylandau(5)' operation used to be encoded as 4105; it is now encoded as (klandau >> kTFOperShift) + 5 Any class inheriting from TFormula and using directly fOper (which is now a private data member), needs to be updated to take this in consideration. The member functions recommended to set and access fOper are: SetAction, GetAction, GetActionParam For more performant access to the information, see the implementation TFormula::EvalPar. CHANGING DEFAULT SETTINGS; When creating complex formula , it may be necessary to increase some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?; This is a frequently asked question. C++ is a strongly typed language. There is no way for TFormula (without recompiling this class) to know about all possible user defined data types. This also apply to the case of a static class function. Because TMath is a special and frequent case, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:2322,simpl,simple,2322,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['simpl'],['simple']
Usability,"gle, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Guidelines for submitting a bug. Introduction; The RootTalk mailing list and forum can be used to pass information of general interest to the ROOT user community or to submit problems that you cannot solve with the information provided in the Documentation. Several thousands users read the list and forum and my provide you with solutions to your problem.; Only if you are convinced that your problem is a real bug of the ROOT software then follow the instructions on how to report a bug with JIRA.; When you submit a bug, please follow these guidelines:. If you submit a problem, always indicate your ROOT version number (e.g. 6.02.00, 5.34.22) and the platform you are running on (e.g. Ubuntu 14 gcc49, SLC6 clang35).; The bug title subject line should clearly identify the problem.; If you use a non recent version of ROOT, try to test your problem with newer version. If this is too difficult, consult the release and development notes to check if your problem has not already been solved.; Try to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:1876,Guid,Guidelines,1876,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,1,['Guid'],['Guidelines']
Usability,"gle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; textangle.C File Reference. Functions; tt Draw ();  ; a DrawArc (0.1, 0.1, 0.2, 0., 45.,""only"");  ; l DrawLine (0.1, 0.1, 0.9, 0.1);  ; m DrawMarker (0.1, 0.1);  ; Ta Range (0, 0, 1, 1);  ; a SetFillStyle (0);  ; a SetLineColor (kBlue);  ; l SetLineColor (kRed);  ; a SetLineStyle (3);  ; m SetMarkerColor (kBlue);  ; m SetMarkerStyle (20);  ; tt SetTextAlign (11);  ; tt SetTextAngle (45);  ; tt SetTextSize (0.1);  . Variables; TArc a;  ; TLine l;  ; TMarker m;  ; auto * t1 = new TLatex(0.3,0.18,""45^{o}"");  ; auto * tt = new TText(0.1,0.1,""Text angle is 45 degrees"");  . Function Documentation. ◆ Draw(). tt Draw ; (; ). ◆ DrawArc(). a DrawArc ; (; 0. ; 1, . 0. ; 1, . 0. ; 2, . 0. ; , . 45. ; , . ""only"" ;  . ). ◆ DrawLine(). l DrawLine ; (; 0. ; 1, . 0. ; 1, . 0. ; 9, . 0. ; 1 . ). ◆ DrawMarker(). m DrawMarker ; (; 0. ; 1, . 0. ; 1 . ). ◆ Range(). Ta Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetFillStyle(). a SetFillStyle ; (; 0 ; ). ◆ SetLineColor() [1/2]. a SetLineColor ; (; kBlue ; ). ◆ SetLineColor() [2/2]. l SetLineColor ; (; kRed ; ). ◆ SetLineStyle(). a SetLineStyle ; (; 3 ; ). ◆ SetMarkerColor(). m SetMarkerColor ; (; kBlue ; ). ◆ SetMarkerStyle(). m SetMarkerStyle ; (; 20 ; ). ◆ SetTextAlign(). tt SetTextAlign ; (; 11 ; ). ◆ SetTextAngle(). tt SetTextAngle ; (; 45 ; ). ◆ SetTextSize(). tt SetTextSize ; (; 0. ; 1). Variable Documentation. ◆ a. TArc a. Definition at line 12 of file textangle.C. ◆ l. TLine l. Definition at line 4 of file textangle.C. ◆ m. TMarker m. Definition at line 8 of file textangle.C. ◆ t1. auto* t1 = new TLatex(0.3,0.18,""45^{o}""). Definition at line 20 of file textangle.C. ◆ tt. auto* tt = new TText(0.1,0.1,""Text angle is 45 degrees""). Definition at line 16 of file textangle.C. corebasedocmacrostextangle.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textangle_8C.html:1955,Guid,Guide,1955,doc/master/textangle_8C.html,https://root.cern,https://root.cern/doc/master/textangle_8C.html,1,['Guid'],['Guide']
Usability,"gleKey; kOverwrite; kWriteDelete; };. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(); Creates recorder and sets its state as INACTIVE. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:9009,Pause,Pause,9009,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,6,['Pause'],"['Pause', 'Pauses']"
Usability,"gleKey; kOverwrite; kWriteDelete; };. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(const TRecorder& ). TRecorder & operator=(const TRecorder& ). Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-05 16:41; This pag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:9107,Pause,Pause,9107,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,2,['Pause'],"['Pause', 'Pauses']"
Usability,"gleton editor dialog; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedEditor* GetFrameCreator(); Returns TGedEditor that currently creates TGedFrames. void SetFrameCreator(TGedEditor* e); Set the TGedEditor that currently creates TGedFrames. TGedEditor(TCanvas* canvas = 0, UInt_t width = 175, UInt_t height = 20); Constructor of graphics editor. ~TGedEditor(); Editor destructor. void Update(TGedFrame* frame = 0); Virtual method that is called on any change in the dependent frames.; This implementation simply calls fPad Modified()/Update(). TGCompositeFrame* GetEditorTab(const char* name); Find or create tab with name. TGedTabInfo* GetEditorTabInfo(const char* name); Find or create tab with name. void CloseWindow(); Called when closed via WM close button. Calls Hide(). void ReinitWorkspace(); Clears windows in editor tab.; Unmap and withdraw currently shown frames and thus prepare for; construction of a new class layout or destruction. void SetGlobal(Bool_t global); Set editor global. void GlobalClosed(); Delete global editor if no canvas exists. void GlobalSetModel(TVirtualPad* , TObject* , Int_t ); Set canvas to global editor. void ConnectToCanvas(TCanvas* c); Connect this editor to the Selected signal of canvas 'c'. void DisconnectFromCanvas(); Disconnect this editor from the Selected signal of fCanvas. void SetCanvas(TCanvas* c); Change connection to another canvas. void SetModel(TVirtualPad* pad, TObject* obj, Int_t event); Activate object editors according to the selected object. void Show(); Show editor. void Hide(); Hide editor. The editor is put into non-active state. void RecursiveRemove(TObject* obj); Remove references to fModel in case the fModel is being deleted.; Deactivate attribute frames if they point to obj. void ActivateEditor(TClass* cl, Bool_t recurse); S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedEditor.html:26935,Clear,Clears,26935,root/html528/TGedEditor.html,https://root.cern,https://root.cern/root/html528/TGedEditor.html,4,['Clear'],['Clears']
Usability,"gnal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static const TList*TProof::GetEnvVars();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:6510,Feedback,Feedback,6510,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Feedback'],['Feedback']
Usability,"gnal_4el); h_sig_4l.Add(signal_2el2mu); ; h_bkg_4l = background_4mu; h_bkg_4l.Add(background_4el); h_bkg_4l.Add(background_2el2mu); ; h_data_4l = data_4mu; h_data_4l.Add(data_4el); h_data_4l.Add(data_2el2mu); ; # Plot aggregated histograms; plot(h_sig_4l, h_bkg_4l, h_data_4l, ""m_{4l} (GeV)"", ""higgs_4l.pdf""); ; ; if __name__ == ""__main__"":; df103_NanoAODHiggsAnalysis(); plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; df103_NanoAODHiggsAnalysisDefinition df103_NanoAODHiggsAnalysis.py:1; DateJuly 2019 ; AuthorsStefan Wunsch (KIT, CERN), Vincenzo Eduardo Padulano (UniMiB, CERN) ; Definition in file df103_NanoAODHiggsAnalysis.py. tutorialsdataframedf103_NanoAODHiggsAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html:18283,Guid,Guide,18283,doc/master/df103__NanoAODHiggsAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html,1,['Guid'],['Guide']
Usability,"gnaled. ;  ; Int_t Wait (Int_t millisec);  If the semaphore value is > 0 then decrement it and carry on, else block. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSemaphore.html:1855,Clear,Clear,1855,doc/master/classTSemaphore.html,https://root.cern,https://root.cern/doc/master/classTSemaphore.html,1,['Clear'],['Clear']
Usability,"gnaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN).Definition TMath.h:910; ROOT::Internal::GetFunctorType< T(F::*)(T *, double *) const >::typeT typeDefinition TF1.h:201; ROOT::Internal::GetFunctorType< T(F::*)(T *, double *)>::typeT typeDefinition TF1.h:196; ROOT::Internal::GetFunctorType< T(F::*)(const T *, const double *) const >::typeT typeDefinition TF1.h:191; ROOT::Internal::GetFunctorType< T(F::*)(const T *, const double *)>::typeT typeDefinition TF1.h:186; ROOT::Internal::GetFunctorTypeInternal class used by TF1 for obtaining the type from a functor out of the set of valid operator() s...Definition TF1.h:181; ROOT::Internal::TF1Builder< const char * >::Buildstatic void Build(TF1 *f, const char *formula)Definition TF1.h:783; ROOT::Internal::TF1BuilderInternal class used by TF1 for defining template specialization for different TF1 constructorsDefinition TF1.h:169; ROOT::Internal::TF1Builder::Buildstatic void Build(TF1 *f, Func func)Definition TF1.h:762; TF1::TF1FunctorPointerImplDefinition TF1.h:313; TF1::TF1FunctorPointerImpl::CloneTF1FunctorPointer * Clone() const overrideDefinition TF1.h:317; TF1::TF1FunctorPointerImpl::fImplROOT::Math::ParamFunctorTempl< T > fImplDefinition TF1.h:318; TF1::TF1FunctorPointerImpl::TF1FunctorPointerImplTF1FunctorPointerImpl(const std::function< T(const T *f, const Double_t *param)> &func)Definition TF1.h:315; TF1::TF1FunctorPointerImpl::~TF1FunctorPointerImpl~TF1FunctorPointerImpl() overrideDefinition TF1.h:316; TF1::TF1FunctorPointerImpl::TF1FunctorPointerImplTF1FunctorPointerImpl(const ROOT::Math::ParamFunctorTempl< T > &func)Definition TF1.h:314; TF1::TF1FunctorPointerDefinition TF1.h:247; TF1::TF1FunctorPointer::~TF1FunctorPointervirtual ~TF1FunctorPointer()Definition TF1.h:248; TF1::TF1FunctorPointer::Clonevirtual TF1FunctorPointer * Clone() const =0; Drawth1 Draw(). histhistincTF1.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:74332,Guid,Guide,74332,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['Guid'],['Guide']
Usability,"gnment operator. ; Definition at line 254 of file TCutG.cxx. ◆ SavePrimitive(). void TCutG::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 356 of file TCutG.cxx. ◆ SetObjectX(). void TCutG::SetObjectX ; (; TObject * ; obj). virtual . Set the X object (and delete the previous one if any). ; Definition at line 384 of file TCutG.cxx. ◆ SetObjectY(). void TCutG::SetObjectY ; (; TObject * ; obj). virtual . Set the Y object (and delete the previous one if any). ; Definition at line 393 of file TCutG.cxx. ◆ SetVarX(). void TCutG::SetVarX ; (; const char * ; varx). virtual . Set X variable. ; Definition at line 402 of file TCutG.cxx. ◆ SetVarY(). void TCutG::SetVarY ; (; const char * ; vary). virtual . Set Y variable. ; Definition at line 412 of file TCutG.cxx. ◆ Streamer(). void TCutG::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TCutG. ; Reimplemented from TObject.; Definition at line 422 of file TCutG.cxx. ◆ StreamerNVirtual(). void TCutG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TCutG.h. Member Data Documentation. ◆ fObjectX. TObject* TCutG::fObjectX. protected . ! pointer to an object corresponding to X ; Definition at line 25 of file TCutG.h. ◆ fObjectY. TObject* TCutG::fObjectY. protected . ! pointer to an object corresponding to Y ; Definition at line 26 of file TCutG.h. ◆ fVarX. TString TCutG::fVarX. protected . X variable. ; Definition at line 23 of file TCutG.h. ◆ fVarY. TString TCutG::fVarY. protected . Y variable. ; Definition at line 24 of file TCutG.h. Libraries for TCutG:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TCutG.h; graf2d/graf/src/TCutG.cxx. TCutG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:40716,Guid,Guide,40716,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['Guid'],['Guide']
Usability,"gnment operator. ;  ; Double_t SetTol (Double_t tol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBK.html:5451,Clear,Clear,5451,doc/master/classTDecompBK.html,https://root.cern,https://root.cern/doc/master/classTDecompBK.html,6,['Clear'],['Clear']
Usability,"gnment operator. ;  ; virtual void SeparateVars (TVectorD &x_in, TVectorD &y_in, TVectorD &z_in, TVectorD &vars_in)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:2214,Clear,Clear,2214,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['Clear'],['Clear']
Usability,"gnum ; (; ); const. Definition at line 1358 of file TClingClassInfo.cxx. ◆ Title(). const char * TClingClassInfo::Title ; (; ). Definition at line 1398 of file TClingClassInfo.cxx. ◆ TmpltName(). const char * TClingClassInfo::TmpltName ; (; ); const. Definition at line 1438 of file TClingClassInfo.cxx. Member Data Documentation. ◆ fDeclFileName. std::string TClingClassInfo::fDeclFileName. private . Definition at line 72 of file TClingClassInfo.h. ◆ fDescend. bool TClingClassInfo::fDescend. private . Definition at line 65 of file TClingClassInfo.h. ◆ fFirstTime. bool TClingClassInfo::fFirstTime. private . Definition at line 64 of file TClingClassInfo.h. ◆ fInterp. cling::Interpreter* TClingClassInfo::fInterp = nullptr. private . Definition at line 63 of file TClingClassInfo.h. ◆ fIsIter. bool TClingClassInfo::fIsIter. private . Definition at line 67 of file TClingClassInfo.h. ◆ fIter. clang::DeclContext::decl_iterator TClingClassInfo::fIter. private . Definition at line 68 of file TClingClassInfo.h. ◆ fIterAll. bool TClingClassInfo::fIterAll. private . Definition at line 66 of file TClingClassInfo.h. ◆ fIterStack. std::vector<clang::DeclContext::decl_iterator> TClingClassInfo::fIterStack. private . Definition at line 70 of file TClingClassInfo.h. ◆ fOffsetCache. llvm::DenseMap<const clang::Decl*, std::pair<ptrdiff_t, OffsetPtrFunc_t> > TClingClassInfo::fOffsetCache. private . Definition at line 75 of file TClingClassInfo.h. ◆ fOffsetCacheMutex. std::mutex TClingClassInfo::fOffsetCacheMutex. private . Definition at line 74 of file TClingClassInfo.h. ◆ fTitle. std::string TClingClassInfo::fTitle. private . Definition at line 71 of file TClingClassInfo.h. ◆ fType. const clang::Type* TClingClassInfo::fType = nullptr. private . Definition at line 69 of file TClingClassInfo.h. core/metacling/src/TClingClassInfo.h; core/metacling/src/TClingClassInfo.cxx. TClingClassInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingClassInfo.html:17734,Guid,Guide,17734,doc/master/classTClingClassInfo.html,https://root.cern,https://root.cern/doc/master/classTClingClassInfo.html,1,['Guid'],['Guide']
Usability,"gr = new TGraph(n,x,y);; gr->SetLineColor(2);; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->SetTitle(""a simple graph"");; gr->GetXaxis()->SetTitle(""X title"");; gr->GetYaxis()->SetTitle(""Y title"");; gr->Draw(""ACP"");; ; // TCanvas::Update() draws the frame, after which one can change it; c1->Update();; c1->GetFrame()->SetBorderSize(12);; c1->Modified();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph.cxx:1566; TGraph::GetYaxisTAxis * GetYaxis() constGet y axis of the graph.Definition TGraph.cxx:1575; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; graphDefinition graph.py:1; AuthorRene Brun ; Definition in file graph.C. tutorialsgraphsgraph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph_8C.html:2420,Guid,Guide,2420,doc/master/graph_8C.html,https://root.cern,https://root.cern/doc/master/graph_8C.html,1,['Guid'],['Guide']
Usability,gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () const { assert (m_hasDropOut); return m_itDropOut; } ///< return the begin of the drop-out information; 624 ; 625 size_t size () const { return m_size; } ///< return the size of the layer; 626 ; 627 private:; 628 ; 629 /*! \brief compute the probabilities from the node values; 630 *; 631 *; 632 */; 633 container_type computeProbabilities () const;; 634 ; 635 private:; 636 ; 637 size_t m_size; ////< layer size; 638 ; 639 const_iterator_type m_itInputBegin; ///< iterator to the first of the nodes in the input node vector; 640 const_iterator_type m_itInputEnd; ///< iterator to the end of the nodes in the input node vector; 641 ; 642 std::vector<double> m_deltas; ///< stores the deltas for the DNN training; 643 std::vector<double> m_valueGradients; ///< stores the gradients of the values (nodes); 644 std::vector<doubl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:21205,clear,clearDropOut,21205,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clearDropOut']
Usability,"gradients_backward, . const Tensor_t & ; activations_backward . ). virtual . Backpropagates the error. ; Must only be called directly at the corresponding call to Forward(...). ; Implements TMVA::DNN::VGeneralLayer< Architecture_t >.; Definition at line 149 of file ReshapeLayer.h. ◆ Forward(). template<typename Architecture_t > . auto TMVA::DNN::TReshapeLayer< Architecture_t >::Forward ; (; Tensor_t & ; input, . bool ; applyDropout = false . ). virtual . The input must be in 3D tensor form with the different matrices corresponding to different events in the batch. ; It transforms the input matrices. ; Implements TMVA::DNN::VGeneralLayer< Architecture_t >.; Definition at line 134 of file ReshapeLayer.h. ◆ isFlattening(). template<typename Architecture_t > . bool TMVA::DNN::TReshapeLayer< Architecture_t >::isFlattening ; (; ); const. inline . TODO Add documentation Does this layer flatten? (necessary for DenseLayer) B x D1 x D2 --> 1 x B x (D1 * D2) ; Definition at line 86 of file ReshapeLayer.h. ◆ Print(). template<typename Architecture_t > . auto TMVA::DNN::TReshapeLayer< Architecture_t >::Print. virtual . Prints the info about the layer. ; Implements TMVA::DNN::VGeneralLayer< Architecture_t >.; Definition at line 169 of file ReshapeLayer.h. ◆ ReadWeightsFromXML(). template<typename Architecture_t > . void TMVA::DNN::TReshapeLayer< Architecture_t >::ReadWeightsFromXML ; (; void * ; parent). virtual . Read the information and the weights about the layer from XML node. ; Implements TMVA::DNN::VGeneralLayer< Architecture_t >.; Definition at line 195 of file ReshapeLayer.h. Member Data Documentation. ◆ fFlattening. template<typename Architecture_t > . bool TMVA::DNN::TReshapeLayer< Architecture_t >::fFlattening. private . Whether the layer is doing flattening. ; Definition at line 48 of file ReshapeLayer.h. tmva/tmva/inc/TMVA/DNN/ReshapeLayer.h. TMVADNNTReshapeLayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:12447,Guid,Guide,12447,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,1,['Guid'],['Guide']
Usability,"gral)Definition SpecFuncMathCore.cxx:103; ROOT::Math::inc_betadouble inc_beta(double x, double a, double b)Calculates the normalized (regularized) incomplete beta function.Definition SpecFuncMathCore.cxx:115; ROOT::Math::erfcdouble erfc(double x)Complementary error function.Definition SpecFuncMathCore.cxx:44; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; ROOT::Math::erfdouble erf(double x)Error function encountered in integrating the normal distribution.Definition SpecFuncMathCore.cxx:59; ROOT::Math::landau_xm1double landau_xm1(double x, double xi=1, double x0=0)First moment (mean) of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:409; ROOT::Math::landau_xm2double landau_xm2(double x, double xi=1, double x0=0)Second moment of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:489; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::expm1double expm1(double x)exp(x) -1 with error cancellation when x is smallDefinition Math.h:110; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::kSqrt2static const double kSqrt2Definition ProbFuncMathCore.cxx:18; ROOT::Math::gaussian_cdf_cdouble gaussian_cdf_c(double x, double sigma=1, double x0=0)Alternative name for same function.Definition ProbFuncMathCore.h:463; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8. mathmathcoresrcProbFuncMathCore.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:28824,Guid,Guide,28824,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['Guid'],['Guide']
Usability,"grams; When you call the Draw method of a histogram ( TH1::Draw ) for the first time, it creates a THistPainter object and saves a pointer to painter as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It allows logarithmic axes (x, y, z) when the CONT drawing option is using. The THistPainter class is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. The choice to give each histogram has its own painter rather than a central singleton painter, allows two histograms to be drawn in two threads without overwriting the painter’s values. When a displayed histogram is filled again, you do not have to call the Draw method again. The image is refreshed the next time the pad is updated. A pad is updated after one of these three actions:. A carriage control on the ROOT command line; A click inside the pad; A call to TPad::Update(). By default, the TH1::Draw clears the pad before drawing the new image of the histogram. You can use the ""SAME"" option to leave the previous display intact and superimpose the new histogram. The same histogram can be drawn with different graphics options in different pads. When a displayed histogram is deleted, its image is automatically removed from the pad. To create a copy of the histogram when drawing it, you can use TH1::DrawClone(). This will clone the histogram and allow you to change and delete the original one without affecting the clone. You can use TH1::DrawNormalized() to draw a normalized copy of a histogram.; TH1 *TH1::DrawNormalized(Option_t *option,Double_t norm) const; A clone of this histogram is normalized to norm and drawn with option. A pointer to the normalized histogram is returned. The contents of the histogram copy are scaled such that the new sum of weights (excluding under and overflow) is equal to norm .; Note that the returned normalized histogram is not added to the list of histograms in the current",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:82469,clear,clears,82469,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clears']
Usability,grator. std::unique_ptr<RooAbsIntegrator> RooNumConvolution::_integrator. mutableprotected . ! Numeric integrator of convolution integrand ; Definition at line 71 of file RooNumConvolution.h. ◆ _origModel. RooRealProxy RooNumConvolution::_origModel. protected . Original resolution model. ; Definition at line 75 of file RooNumConvolution.h. ◆ _origPdf. RooRealProxy RooNumConvolution::_origPdf. protected . Original input PDF. ; Definition at line 74 of file RooNumConvolution.h. ◆ _origVar. RooRealProxy RooNumConvolution::_origVar. protected . Original convolution variable. ; Definition at line 73 of file RooNumConvolution.h. ◆ _ownedClonedModelSet. RooArgSet RooNumConvolution::_ownedClonedModelSet. mutableprotected . Owning set of cloned model components. ; Definition at line 78 of file RooNumConvolution.h. ◆ _ownedClonedPdfSet. RooArgSet RooNumConvolution::_ownedClonedPdfSet. mutableprotected . Owning set of cloned PDF components. ; Definition at line 77 of file RooNumConvolution.h. ◆ _useWindow. bool RooNumConvolution::_useWindow. protected . Switch to activate window convolution. ; Definition at line 89 of file RooNumConvolution.h. ◆ _verboseThresh. Int_t RooNumConvolution::_verboseThresh. protected . Call count threshold for verbose printing. ; Definition at line 93 of file RooNumConvolution.h. ◆ _windowParam. RooListProxy RooNumConvolution::_windowParam. protected . Holder for optional convolution integration window scaling parameter. ; Definition at line 91 of file RooNumConvolution.h. ◆ _windowScale. double RooNumConvolution::_windowScale. protected . Scale factor for window parameter. ; Definition at line 90 of file RooNumConvolution.h. Libraries for RooNumConvolution:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNumConvolution.h; roofit/roofitcore/src/RooNumConvolution.cxx. RooNumConvolution. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:74680,Guid,Guide,74680,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['Guid'],['Guide']
Usability,"grator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); virtual~RooIntegrator2D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator2D.html:1621,Clear,Clear,1621,root/html526/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator2D.html,5,['Clear'],['Clear']
Usability,"gregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_t index); virtual voidTObject::Delete(Option_t* option = """")MENU ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:2174,clear,clearValueDirty,2174,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['clear'],['clearValueDirty']
Usability,"gressBar::fFillType. protected . OPTION={GetMethod=""GetFillType"";SetMethod=""SetFillType"";Items=(kSolidFill=Solid"",kBlockFill=""Block"")} ; Definition at line 33 of file TGProgressBar.h. ◆ fFontStruct. FontStruct_t TGProgressBar::fFontStruct. protected . font used to draw position text ; Definition at line 41 of file TGProgressBar.h. ◆ fFormat. TString TGProgressBar::fFormat. protected . format used to show position not in percent ; Definition at line 35 of file TGProgressBar.h. ◆ fgDefaultFont. const TGFont * TGProgressBar::fgDefaultFont = nullptr. staticprotected . Definition at line 45 of file TGProgressBar.h. ◆ fgDefaultGC. TGGC * TGProgressBar::fgDefaultGC = nullptr. staticprotected . Definition at line 46 of file TGProgressBar.h. ◆ fMax. Float_t TGProgressBar::fMax. protected . logical maximum value (default 100) ; Definition at line 29 of file TGProgressBar.h. ◆ fMin. Float_t TGProgressBar::fMin. protected . logical minimum value (default 0) ; Definition at line 28 of file TGProgressBar.h. ◆ fNormGC. GContext_t TGProgressBar::fNormGC. protected . text drawing graphics context ; Definition at line 40 of file TGProgressBar.h. ◆ fPercent. Bool_t TGProgressBar::fPercent. protected . show position in percent (default true) ; Definition at line 37 of file TGProgressBar.h. ◆ fPos. Float_t TGProgressBar::fPos. protected . logical position [fMin,fMax] ; Definition at line 30 of file TGProgressBar.h. ◆ fPosPix. Int_t TGProgressBar::fPosPix. protected . position of progress bar in pixel coordinates ; Definition at line 31 of file TGProgressBar.h. ◆ fShowPos. Bool_t TGProgressBar::fShowPos. protected . show position value (default false) ; Definition at line 36 of file TGProgressBar.h. Libraries for TGProgressBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGProgressBar.h; gui/gui/src/TGProgressBar.cxx. TGProgressBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:39111,progress bar,progress bar,39111,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,2,"['Guid', 'progress bar']","['Guide', 'progress bar']"
Usability,"ground events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:3150,simpl,simple,3150,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['simpl'],['simple']
Usability,"grouping with calls to; RegularizeBins() specify a 1-dimensional group of bins; RegularizeBins2D() specify a 2-dimensional group of bins. Note, the class TUnfoldDensity provides an automatic setup of complex; regularisation schemes. For ultimate flexibility, the regularisation condition can be set on each; bin individually; -> give kRegModeNone in the constructor and use; RegularizeSize() regularize one bin; RegularizeDerivative() regularize the slope given by two bins; RegularizeCurvature() regularize the curvature given by three bins; AddRegularisationCondition(); define an arbitrary regulatisation condition. Function Members (Methods); public:. virtual~TUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDoUnfold(Double_t tau); Double_tDoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfold.html:8725,Clear,Clear,8725,root/html602/TUnfold.html,https://root.cern,https://root.cern/root/html602/TUnfold.html,2,['Clear'],['Clear']
Usability,"gs - call ShowNormalEveDecorations() to restore them. ; Definition at line 213 of file TEveWindowManager.cxx. ◆ ShowNormalEveDecorations(). void TEveWindowManager::ShowNormalEveDecorations ; (; ). Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ; Definition at line 197 of file TEveWindowManager.cxx. ◆ Streamer(). void TEveWindowManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveWindowManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TEveWindowManager.h. ◆ WindowDeleted(). void TEveWindowManager::WindowDeleted ; (; TEveWindow * ; window). Emit the ""WindowDeleted(TEveWindow*)"" signal. ; Definition at line 119 of file TEveWindowManager.cxx. ◆ WindowDocked(). void TEveWindowManager::WindowDocked ; (; TEveWindow * ; window). Emit the ""WindowDocked(TEveWindow*)"" signal. ; Definition at line 95 of file TEveWindowManager.cxx. ◆ WindowSelected(). void TEveWindowManager::WindowSelected ; (; TEveWindow * ; window). Emit the ""WindowSelected(TEveWindow*)"" signal. ; Definition at line 111 of file TEveWindowManager.cxx. ◆ WindowUndocked(). void TEveWindowManager::WindowUndocked ; (; TEveWindow * ; window). Emit the ""WindowUndocked(TEveWindow*)"" signal. ; Definition at line 103 of file TEveWindowManager.cxx. Member Data Documentation. ◆ fCurrentWindow. TEveWindow* TEveWindowManager::fCurrentWindow. protected . Definition at line 29 of file TEveWindowManager.h. ◆ fDefaultContainer. TEveWindow* TEveWindowManager::fDefaultContainer. protected . Definition at line 30 of file TEveWindowManager.h. Libraries for TEveWindowManager:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindowManager.h; graf3d/eve/src/TEveWindowManager.cxx. TEveWindowManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowManager.html:45595,Guid,Guide,45595,doc/master/classTEveWindowManager.html,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html,1,['Guid'],['Guide']
Usability,"gs and perform raytracing in the pad. ;  ; void RegisterYourself (Option_t *option="""");  Register the volume and all materials/media/matrices/shapes to the manager. ;  ; void Release ();  ; void RemoveNode (TGeoNode *node);  Remove an existing daughter. ;  ; TGeoNode * ReplaceNode (TGeoNode *nodeorig, TGeoShape *newshape=nullptr, TGeoMatrix *newpos=nullptr, TGeoMedium *newmed=nullptr);  Replace an existing daughter with a new volume having the same name but possibly a new shape, position or medium. ;  ; void ReplayCreation (const TGeoVolume *other);  Recreate the content of the other volume without pointer copying. ;  ; void ResetTransparency (Char_t transparency=-1);  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Save geometry having this as top volume as a C++ macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SelectVolume (Bool_t clear=kFALSE);  Select this volume as matching an arbitrary criteria. ;  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAdded ();  ; void SetAsTopVolume ();  Set this volume as the TOP one (the whole geometry starts from here) ;  ; void SetAttVisibility (Bool_t vis);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  Set the current tracking point. ;  ; void SetCylVoxels (Bool_t flag=kTRUE);  ; void SetField (TObject *field);  ; void SetFinder (TGeoPatternFinder *finder);  ; void SetFWExtension (TGeoExtension *ext);  Connect framework defined extension to the volume. ;  ; void SetInvisible ();  ; void SetLineColor (Color_t lcolor) override;  Set the line color. ;  ; void SetLineStyle (Style_t lstyle) override;  Set the line style. ;  ; void SetLineWidth (Width_t lwidth) override;  Set the line width. ;  ; virtual void SetMedium (TGeoMedium *medium);  ; void SetNodes (TObjArray *nodes);  ; void SetNtotal (Int_t ntotal);  ; void SetNumber (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:22110,clear,clear,22110,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,2,['clear'],['clear']
Usability,"gs and perform raytracing in the pad. ;  ; void RegisterYourself (Option_t *option="""");  Register the volume and all materials/media/matrices/shapes to the manager. ;  ; void Release ();  ; void RemoveNode (TGeoNode *node);  Remove an existing daughter. ;  ; TGeoNode * ReplaceNode (TGeoNode *nodeorig, TGeoShape *newshape=nullptr, TGeoMatrix *newpos=nullptr, TGeoMedium *newmed=nullptr);  Replace an existing daughter with a new volume having the same name but possibly a new shape, position or medium. ;  ; void ReplayCreation (const TGeoVolume *other);  Recreate the content of the other volume without pointer copying. ;  ; void ResetTransparency (Char_t transparency=-1);  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Save geometry having this as top volume as a C++ macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SelectVolume (Bool_t clear=kFALSE);  Select this volume as matching an arbitrary criteria. ;  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAdded ();  ; void SetAsTopVolume ();  Set this volume as the TOP one (the whole geometry starts from here) ;  ; void SetAttVisibility (Bool_t vis);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  Set the current tracking point. ;  ; void SetCylVoxels (Bool_t flag=kTRUE);  ; void SetField (TObject *field);  ; void SetFinder (TGeoPatternFinder *finder);  ; void SetFWExtension (TGeoExtension *ext);  Connect framework defined extension to the volume. ;  ; void SetInvisible ();  ; void SetNodes (TObjArray *nodes);  ; void SetNtotal (Int_t ntotal);  ; void SetNumber (Int_t number);  ; void SetOption (const char *option);  Set the current options (none implemented) ;  ; void SetOverlappingCandidate (Bool_t flag);  ; void SetReplicated ();  ; void SetShape (const TGeoShape *shape);  set the shape associated with this volume ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:18583,clear,clear,18583,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['clear'],['clear']
Usability,"gs)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:17929,undo,undo,17929,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,"gs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* uri, const char* = 0); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*GetDataSets(const char* uri = """", const char* = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, const char* ord = ""0""); static const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:6662,Feedback,Feedback,6662,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,1,['Feedback'],['Feedback']
Usability,"gs->AddEdge(n1,n6);; gs->AddEdge(n2,n5);; gs->AddEdge(n3,n6);; gs->AddEdge(n4,n5);; ; TCanvas *c = new TCanvas(""c"",""c"",800,600);; c->SetFillColor(38);; gs->Draw();; return c;; #else; return new TCanvas(""c"",""c"",800,600);; #endif; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; kViolet@ kVioletDefinition Rtypes.h:67; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct.Definition TGraphEdge.h:25; TGraphNodeA graph node object which can be added in a TGraphStruct.Definition TGraphNode.h:27; TGraphStructThe Graph Structure is an interface to the graphviz package.Definition TGraphStruct.h:24; TGraphStruct::AddNodevoid AddNode(TGraphNode *node)Add the node ""node"" in this TGraphStruct.Definition TGraphStruct.cxx:114; TGraphStruct::Drawvoid Draw(Option_t *option="""") overrideDraw the graph.Definition TGraphStruct.cxx:158; TGraphStruct::AddEdgevoid AddEdge(TGraphEdge *edge)Add the edge ""edge"" in this TGraphStruct.Definition TGraphStruct.cxx:88; NoteFor this to work, ROOT has to be compiled with gviz ON ; AuthorOlivier Couet ; Definition in file graphstruct.C. tutorialsgraphsgraphstruct.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphstruct_8C.html:3566,Guid,Guide,3566,doc/master/graphstruct_8C.html,https://root.cern,https://root.cern/doc/master/graphstruct_8C.html,1,['Guid'],['Guide']
Usability,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:22565,Learn,LearningRate,22565,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,18,"['Learn', 'learn']","['LearningRate', 'learning']"
Usability,"gs; }; 87 ; 88 /**; 89 get the vector of parameter settings (non-const method); 90 */; 91 std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() { return fSettings; }; 92 ; 93 /**; 94 number of parameters settings; 95 */; 96 unsigned int NPar() const { return fSettings.size(); }; 97 ; 98 /**; 99 return a vector of stored parameter values (i.e initial fit parameters); 100 */; 101 std::vector<double> ParamsValues() const;; 102 ; 103 ; 104 /**; 105 set the parameter settings from a model function.; 106 Create always new parameter setting list from a given model function; 107 */; 108 template <class T>; 109 void CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl<T> &func) {; 110 // initialize from model function; 111 // set the parameters values from the function; 112 unsigned int npar = func.NPar();; 113 const double *begin = func.Parameters();; 114 if (!begin) {; 115 fSettings = std::vector<ParameterSettings>(npar);; 116 return;; 117 }; 118 ; 119 fSettings.clear();; 120 fSettings.reserve(npar);; 121 const double *end = begin + npar;; 122 unsigned int i = 0;; 123 for (const double *ipar = begin; ipar != end; ++ipar) {; 124 double val = *ipar;; 125 double step = 0.3 * fabs(val); // step size is 30% of par value; 126 // double step = 2.0*fabs(val); // step size is 30% of par value; 127 if (val == 0) step = 0.3;; 128 ; 129 fSettings.push_back(ParameterSettings(func.ParameterName(i), val, step));; 130#ifdef DEBUG; 131 std::cout << ""FitConfig: add parameter "" << func.ParameterName(i) << "" val = "" << val << std::endl;; 132#endif; 133 i++;; 134 }; 135 }; 136 ; 137 /**; 138 set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list.; 139 */; 140 void SetParamsSettings(unsigned int npar, const double * params, const double * vstep = nullptr);; 141 ; 142 /*; 143 Set the parameter settings from a vector ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:3104,clear,clear,3104,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['clear'],['clear']
Usability,"gth()) {; 270 out += ""\n<![CDATA[ { "" + fCode + "" ]]>\n "";; 271 } else if (fReadFuncPtr) {; 272 // Can we guess?; 273 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 274 } else if (fReadRawFuncPtr) {; 275 // Can we guess?; 276 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 277 }; 278 } else {; 279 if (fCode.Length()) {; 280 out += ""code=\""{"" + fCode + ""}\"" "";; 281 } else if (fReadFuncPtr) {; 282 // Can we guess?; 283 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 284 } else if (fReadRawFuncPtr) {; 285 // Can we guess?; 286 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 287 }; 288 }; 289 if (xmlform) {; 290 out += end;; 291 }; 292}; 293 ; 294////////////////////////////////////////////////////////////////////////////////; 295/// Zero out this rule object.; 296 ; 297void TSchemaRule::Clear( const char * /* option */); 298{; 299 fVersion.Clear();; 300 fChecksum.Clear();; 301 fSourceClass.Clear();; 302 fTarget.Clear();; 303 fSource.Clear();; 304 fInclude.Clear();; 305 fCode.Clear();; 306 fAttributes.Clear();; 307 fReadRawFuncPtr = nullptr;; 308 fReadFuncPtr = nullptr;; 309 fRuleType = kNone;; 310 delete fVersionVect; fVersionVect = nullptr;; 311 delete fChecksumVect; fChecksumVect = nullptr;; 312 delete fTargetVect; fTargetVect = nullptr;; 313 delete fSourceVect; fSourceVect = nullptr;; 314 delete fIncludeVect; fIncludeVect = nullptr;; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Set the content fot this object from the rule; 319/// See TClass::AddRule for details on the syntax.; 320 ; 321Bool_t TSchemaRule::SetFromRule( const char *rule ); 322{; 323 //-----------------------------------------------------------------------; 324 // Parse the rule and check it's validity; 325 /////////////////////////////////////////////////////////////////////////////; 326 ; 327 ROOT::Internal::MembersMap_t rule_values;; 328 ; 329 std::string error_string;; 330 if( !ROOT::ParseRule(rule, rule_values, erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:9559,Clear,Clear,9559,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,"gth()-2) = '*';; 1036 type.erase(type.length()-1);; 1037 }; 1038 prototype += type;; 1039 }; 1040 ; 1041 prototype = ""("" + prototype + "")"";; 1042 return true;; 1043 }; 1044 else {; 1045 ShowWarning(""can't convert Decl to FunctionDecl"","""");; 1046 return false;; 1047 }; 1048}; 1049 ; 1050////////////////////////////////////////////////////////////////////////////////; 1051 ; 1052void RScanner::Scan(const clang::ASTContext &C); 1053{; 1054 fSourceManager = &C.getSourceManager();; 1055 ; 1056// if (fVerboseLevel >= 3) fSelectionRules.PrintSelectionRules();; 1057 ; 1058 if (fVerboseLevel > 0 && fSelectionRules.GetHasFileNameRule()) {; 1059 std::cout<<""File name detected""<<std::endl;; 1060 }; 1061 ; 1062 if (fScanType == EScanType::kTwoPasses); 1063 TraverseDecl(C.getTranslationUnitDecl());; 1064 ; 1065 fFirstPass=false;; 1066 fselectedRecordDecls.clear();; 1067 fSelectedEnums.clear();; 1068 fSelectedTypedefs.clear();; 1069 fSelectedVariables.clear();; 1070 fSelectedFunctions.clear();; 1071 TraverseDecl(C.getTranslationUnitDecl());; 1072 ; 1073 // The RecursiveASTVisitor uses range-based for; we must not modify the AST; 1074 // during iteration / visitation. Instead, buffer the lookups that could; 1075 // potentially create new template specializations, and handle them here:; 1076 AddDelayedAnnotatedRecordDecls();; 1077}; 1078 ; 1079 ; 1080////////////////////////////////////////////////////////////////////////////////; 1081/// Set the callback to the RecordDecl and return the previous one.; 1082 ; 1083RScanner::DeclCallback RScanner::SetRecordDeclCallback(RScanner::DeclCallback callback); 1084{; 1085 DeclCallback old = fRecordDeclCallback;; 1086 fRecordDeclCallback = callback;; 1087 return old;; 1088}; IntToStrstd::string IntToStr(int num)Definition Scanner.cxx:161; APIntToLonglong APIntToLong(const llvm::APInt &num)Definition Scanner.cxx:147; gInterpcling::Interpreter * gInterp; AddSpacestd::string AddSpace(const std::string &txt)Definition Scanner.cxx:266; APIntToSizes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:36883,clear,clear,36883,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['clear'],['clear']
Usability,"gth; Double_tTGeoBBox::fDZZ half-length; Double_tTGeoPcon::fDphiphi range; Bool_tTGeoPcon::fFullPhi! Full phi range flag; TStringTNamed::fNameobject identifier; Int_tfNedgesnumber of edges (at least one) ; Int_tTGeoPcon::fNznumber of z planes (at least two); Double_tTGeoBBox::fOrigin[3]box origin; Double_tTGeoPcon::fPhi1lower phi limit (converted to [0,2*pi); Double_t*TGeoPcon::fRmax[fNz] pointer to array of outer radii ; Double_t*TGeoPcon::fRmin[fNz] pointer to array of inner radii ; Double_tTGeoPcon::fS1! Sine of phi1; Double_tTGeoPcon::fS2! Sine of phi1+dphi; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; Double_tTGeoPcon::fSm! Sine of (phi1+phi2)/2; vector<ThreadData_t*>fThreadData! Navigation data per thread; Int_tfThreadSize! Size for the navigation data array; TStringTNamed::fTitleobject title; Double_t*TGeoPcon::fZ[fNz] pointer to array of Z planes positions . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void CreateThreadData(Int_t nthreads); Create thread data for n threads max. TGeoPgon(); dummy ctor. TGeoPgon(Double_t phi, Double_t dphi, Int_t nedges, Int_t nz); Default constructor. TGeoPgon(const char* name, Double_t phi, Double_t dphi, Int_t nedges, Int_t nz); Default constructor. TGeoPgon(Double_t* params); Default constructor in GEANT3 style; param[0] = phi1; param[1] = dphi; param[2] = nedges; param[3] = nz. param[4] = z1; param[5] = Rmin1; param[6] = Rmax1. ~TGeoPgon(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box for a polygone; Check if the sections are in increasing Z order. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape; check total z range. Double_t DistFromInside(const Double_t* point, const Double_t* dir, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPgon.html:15323,Clear,ClearThreadData,15323,root/html534/TGeoPgon.html,https://root.cern,https://root.cern/root/html534/TGeoPgon.html,1,['Clear'],['ClearThreadData']
Usability,"guraly printed; this can be useful when processing very large datasets, an operation which can take a very long time.; If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2 all files marked as 'staged' are still open or touched); Return code kTRUE the file appears newly staged kFALSE otherwise; changed is true if the fileinfo is modified touched is true if the file is open and read disappeared is true if the file is marked staged but actually not staged ; Definition at line 1414 of file TDataSetManager.cxx. ◆ Class(). static TClass * TDataSetManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 158 of file TDataSetManager.h. ◆ ClearCache(). Int_t TDataSetManager::ClearCache ; (; const char * ; uri). virtual . Clear cached information matching uri. ; Reimplemented in TDataSetManagerFile.; Definition at line 786 of file TDataSetManager.cxx. ◆ CreateUri(). TString TDataSetManager::CreateUri ; (; const char * ; dsGroup = 0, . const char * ; dsUser = 0, . const char * ; dsName = 0, . const char * ; dsTree = 0 . ). static . Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]', The optional dsObjPath can be in the form [subdir/]objname]'. ; Definition at line 805 of file TDataSetManager.cxx. ◆ DeclFileName(). static const char * TDataSetManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 158 of file TDataSetManager.h. ◆ ExistsDataSet(). Bool_t TDataSetManager::ExistsDataSet ; (; const char * ; uri). virtual . Checks if the indicated dataset exits. ; Reimplemented in TDataSetManagerFile.; Definition at line 439 of file TDataSetManager.cxx. ◆ FillMetaData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:21355,Clear,ClearCache,21355,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Clear'],['ClearCache']
Usability,"gxwork[1] = xhigh;; 1638 gywork[1] = yhigh;; 1639 ComputeLogs(2, optionZ);; 1640 if (gyworkl[0] < gPad->GetUymin()) gyworkl[0] = gPad->GetUymin();; 1641 if (gyworkl[1] < gPad->GetUymin()) continue;; 1642 if (gyworkl[1] > gPad->GetUymax()) gyworkl[1] = gPad->GetUymax();; 1643 if (gyworkl[0] > gPad->GetUymax()) continue;; 1644 ; 1645 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1646 }; 1647 } else {; 1648 for (i=1;i<=npoints;i++) {; 1649 xhigh = x[i-1];; 1650 ylow = y[i-1] - dbar;; 1651 yhigh = y[i-1] + dbar;; 1652 xlow = TMath::Max((Double_t)0, gPad->GetUxmin());; 1653 gxwork[0] = xlow;; 1654 gywork[0] = ylow;; 1655 gxwork[1] = xhigh;; 1656 gywork[1] = yhigh;; 1657 ComputeLogs(2, optionZ);; 1658 gPad->PaintBox(gxworkl[0],gyworkl[0],gxworkl[1],gyworkl[1]);; 1659 }; 1660 }; 1661 theGraph->SetFillColor(FillSave);; 1662 theGraph->TAttFill::Modify();; 1663 }; 1664 gPad->ResetBit(TGraph::kClipFrame);; 1665 ; 1666 gxwork.clear();; 1667 gywork.clear();; 1668 gxworkl.clear();; 1669 gyworkl.clear();; 1670}; 1671 ; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// This is a service method used by `THistPainter`; 1675/// to paint 1D histograms. It is not used to paint TGraph.; 1676///; 1677/// Input parameters:; 1678///; 1679/// - npoints : Number of points in X or in Y.; 1680/// - x[npoints] or x[0] : x coordinates or (xmin,xmax).; 1681/// - y[npoints] or y[0] : y coordinates or (ymin,ymax).; 1682/// - chopt : Option.; 1683///; 1684/// The aspect of the histogram is done according to the value of the chopt.; 1685///; 1686/// | Option | Description |; 1687/// |--------|-----------------------------------------------------------------|; 1688/// |""R"" | Graph is drawn horizontally, parallel to X axis. (default is vertically, parallel to Y axis).If option R is selected the user must give 2 values for Y (y[0]=YMIN and y[1]=YMAX) or N values for X, one for each channel. Otherwise the user must give, N values for Y, one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:60424,clear,clear,60424,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"h = std::numeric_limits<double>::quiet_NaN(), . const std::vector< double > & ; nSigmas = {0, 1, 2, -1, -2, std::numeric_limits<double>::quiet_NaN()}, . double ; relUncert = 0.1 . ). Definition at line 225 of file xRooHypoSpace.cxx. ◆ scan() [3/3]. int ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace::scan ; (; const char * ; type = ""cls"", . const std::vector< double > & ; nSigmas = {0, 1, 2, -1, -2, std::numeric_limits<double>::quiet_NaN()}, . double ; relUncert = 0.1 . ). inline . Definition at line 330 of file xRooNLLVar.h. ◆ toArgs(). RooArgList xRooNLLVar::xRooHypoSpace::toArgs ; (; const char * ; str). staticprivate . Definition at line 148 of file xRooHypoSpace.cxx. Friends And Related Symbol Documentation. ◆ xRooNLLVar. friend class xRooNLLVar. friend . Definition at line 285 of file xRooNLLVar.h. Member Data Documentation. ◆ fNlls. std::map<std::shared_ptr<xRooNode>, std::shared_ptr<xRooNLLVar> > ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace::fNlls. private . Definition at line 366 of file xRooNLLVar.h. ◆ fPars. std::shared_ptr<RooArgSet> ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace::fPars. private . Definition at line 364 of file xRooNLLVar.h. ◆ fPdfs. std::set<std::pair<std::shared_ptr<RooArgList>, std::shared_ptr<xRooNode> > > ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace::fPdfs. private . Definition at line 368 of file xRooNLLVar.h. ◆ fTestStatType. xRooFit::Asymptotics::PLLType ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace::fTestStatType = xRooFit::Asymptotics::Unknown. private . Definition at line 363 of file xRooNLLVar.h. Libraries for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. [legend]; The documentation for this class was generated from the following files:; roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h; roofit/xroofit/src/xRooHypoSpace.cxx. ROOTExperimentalXRooFitxRooNLLVarxRooHypoSpace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:25602,Guid,Guide,25602,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,1,['Guid'],['Guide']
Usability,"h a TSelector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROOT features (e.g. PROOF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:1024,Guid,Guides,1024,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['Guid'],['Guides']
Usability,"h as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use the TBranch constructor.; The TTree::Branch method has several signatures. The branch type differs by what is stored in it. A branch can hold an entire object, a list of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, check if it is in $ROOTSYS/test. If it is, copy it to your own area. If it is not there, you have to build it by typing make in $ROOTSYS/test.; 12.9 Adding a Branch to Hold a List of Variables; As in the very first example (cernstaff.root.root) the data we want to save is a list of simple variables, such as integers or floats. In this case, we use the following TTree::Branch signature:; tree->Branch(""Ev_Branch"",&event,; ""temp/F:ntrack/I:nseg:nvtex:flag/i"");; The first parameter is the branch name.; The second parameter is the address from which the first variable is to be read. In the code above, “event” is a structure with one float and three integers and one unsigned integer. You should not assume that the compiler aligns the elements of a structure without gaps. To avoid alignment problems, you need to use structures with same length members. If your structure does not qualify, you need to create one branch for each element of the structure.; The leaf name is NOT used to pick the variable out of the structure, but is only used as the name for the leaf. This means that the list of variables needs to be in a structure in the order described in the third parameter.; This third parameter is a string describing the leaf list. Each leaf has a name and a type separate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:537702,simpl,simple,537702,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"h boost.python (with pyste; standalone it is a non-starter) and SWIG is that you need to run a separate tool to create and compile bindings. On top, these bindings are compiled against a specific version of Python, making for a distribution headache (just see the non-pickup of Python3 because of this problem). Compare: dictionaries are already available for all the most important classes in experiments, the EDM, because they are generated for I/O needs. They also do not depend on Python, and thus not on any specific version (only PyROOT does). Besides the obvious ease of use, there is also the benefit of lower memory footprints by not replicating structures. (For that matter, PyROOT creates bindings lazily, the others do not.); Other problems we've had, are that boost.python is very, very slow and only in ""keeping alive"" mode since 2004 or so. Pyste is based on gccxml, so no C++11 there, and has seen no major updates since 2005. SWIG is much, much better in both regards, but not up to snuff: it plain and simply can not parse our header files. The way around that, is to write .i files, but as you can imagine, that duplication is not nice for maintenance. Worse, the developers of individual packages need to do this work, and not every C++ developer has Python, let alone SWIG, experience.; Then there's PyPy. All existing binding generator tools (including PyROOT) rely on CPython internals, or at least on the Python C-API. That does not jive with PyPy as it has for example a garbage collector instead of reference counting. Through some heroics, it does expose a Python C-API, but it's slow as it interferes (blocks, really) the just-in-time compiler. Therefore, within PyPy, there are two new approaches: cffi for C and cppyy for C++. Both are part of the standard PyPy releases. There is also already a PyROOT version for the latter (see: http://root.cern.ch/drupal/content/pypyroot).; Cheers,; Wim. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:7738,simpl,simply,7738,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simply']
Usability,"h can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fCatchedKind;  ; RWebWindow * fWindow {nullptr};  . Inheritance diagram for ROOT::RBrowserCatchedWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserCatchedWidget(). ROOT::RBrowserCatchedWidget::RBrowserCatchedWidget ; (; const std::string & ; name, . RWebWindow * ; win, . const std::string & ; kind . ). inline . Definition at line 251 of file RBrowser.cxx. Member Function Documentation. ◆ GetKind(). std::string ROOT::RBrowserCatchedWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 243 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserCatchedWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 247 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserCatchedWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 245 of file RBrowser.cxx. ◆ IsValid(). bool ROOT::RBrowserCatchedWidget::IsValid ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 249 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserCatchedWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 241 of file RBrowser.cxx. Member Data Documentation. ◆ fCatchedKind. std::string ROOT::RBrowserCatchedWidget::fCatchedKind. Definition at line 239 of file RBrowser.cxx. ◆ fWindow. RWebWindow* ROOT::RBrowserCatchedWidget::fWindow {nullptr}. Definition at line 238 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserCatchedWidget. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserCatchedWidget.html:3082,Guid,Guide,3082,doc/master/classROOT_1_1RBrowserCatchedWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserCatchedWidget.html,1,['Guid'],['Guide']
Usability,"h command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:2020,Undo,Undo,2020,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,24,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"h for gifencode.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ARGS(alist)   ();  ; #define BITS   12 /* largest code size */;  ; #define HSIZE   5003 /* hash table size */;  ; #define put_byte(A)   (*put_b)((byte)(A)); Nbyte++;  ; #define SHIFT   4 /* shift for hashing */;  ; #define THELIMIT   4096 /* NEVER generate this */;  . Typedefs; typedef unsigned char byte;  . Functions; static void char_flush ();  ; static void char_init ();  ; static void char_out ();  ; static void char_out (int c);  ; long GIFencode (int Width, int Height, int Ncol, R, G, B, ScLine, void *get_scline, pb);  ; static void output ();  ; static void output (int code);  ; static void put_short ();  ; static void put_short (int word);  . Variables; static int a_count;  ; static char accum [256];  ; static int BitsPixel;  ; static int ClearCode;  ; static int CodeTab [5003];  ; static unsigned long cur_accum;  ; static int cur_bits;  ; static int CurCodeSize;  ; static int CurMaxCode;  ; static int EOFCode;  ; static int FreeCode;  ; static long HashTab [5003];  ; static int IniCodeSize;  ; static unsigned long masks [];  ; static long Nbyte;  ; static void(* put_b )();  . Macro Definition Documentation. ◆ ARGS. #define ARGS; (;  ; alist);    (). Definition at line 10 of file gifencode.c. ◆ BITS. #define BITS   12 /* largest code size */. Definition at line 13 of file gifencode.c. ◆ HSIZE. #define HSIZE   5003 /* hash table size */. Definition at line 15 of file gifencode.c. ◆ put_byte. #define put_byte; (;  ; A);    (*put_b)((byte)(A)); Nbyte++. Definition at line 18 of file gifencode.c. ◆ SHIFT. #define SHIFT   4 /* shift for hashing */. Definition at line 16 of file gifencode.c. ◆ THELIMIT. #define THELIMIT   4096 /* NEVER generate this */. Definition at line 14 of file gifencode.c. Typedef Documentation. ◆ byte. typedef unsigned char byte. Definition at line 20 of file gifencode.c. Function Documentation. ◆ char_flush(). static void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html:1175,Clear,ClearCode,1175,doc/master/win32gdk_2src_2gifencode_8c.html,https://root.cern,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html,2,['Clear'],['ClearCode']
Usability,"h input objects; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTProofPlayer::fMaxDrawQueriesMax number of Draw queries kept; TList*TProofPlayer::fOutputlist with output objects; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofPlayer.h 36592 2010-11-11 10:43:17Z ganis $ » Last generated: 2010-12-08 16:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerSlave.html:15039,feedback,feedback,15039,root/html528/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html528/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,"h input objects; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTProofPlayer::fMaxDrawQueriesMax number of Draw queries kept; TList*TProofPlayer::fOutputlist with output objects; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofPlayer.h 39442 2011-05-27 09:13:25Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerSlave.html:15166,feedback,feedback,15166,root/html530/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html530/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,"h input objects; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTProofPlayer::fMaxDrawQueriesMax number of Draw queries kept; TList*TProofPlayer::fOutputlist with output objects; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofPlayer.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofPlayerSlave.html:15166,feedback,feedback,15166,root/html532/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html532/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,"h mode. ; Reimplemented from RooAbsReal.; Definition at line 121 of file RooRatio.cxx. ◆ evaluate(). double RooRatio::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 114 of file RooRatio.cxx. ◆ IsA(). TClass * RooRatio::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 44 of file RooRatio.h. ◆ Streamer(). void RooRatio::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRatio::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file RooRatio.h. ◆ translate(). void RooRatio::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 127 of file RooRatio.cxx. Member Data Documentation. ◆ _denominator. RooRealProxy RooRatio::_denominator. protected . Definition at line 42 of file RooRatio.h. ◆ _numerator. RooRealProxy RooRatio::_numerator. protected . Definition at line 41 of file RooRatio.h. Libraries for RooRatio:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRatio.h; roofit/roofitcore/src/Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:63534,simpl,simple,63534,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['simpl'],['simple']
Usability,"h neuron calculate its delta by back propagation ; Definition at line 1328 of file MethodMLP.cxx. ◆ Class(). static TClass * TMVA::MethodMLP::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodMLP::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodMLP::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 219 of file MethodMLP.h. ◆ ComputeDEDw(). void TMVA::MethodMLP::ComputeDEDw ; (; ). private . Definition at line 697 of file MethodMLP.cxx. ◆ ComputeEstimator(). Double_t TMVA::MethodMLP::ComputeEstimator ; (; std::vector< Double_t > & ; parameters). this function is called by GeneticANN for GA optimization ; Definition at line 1393 of file MethodMLP.cxx. ◆ DecaySynapseWeights(). void TMVA::MethodMLP::DecaySynapseWeights ; (; Bool_t ; lateEpoch). private . decay synapse weights in last 10 epochs, lower learning rate even more to find a good minimum ; Definition at line 1208 of file MethodMLP.cxx. ◆ DeclareOptions(). void TMVA::MethodMLP::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. TrainingMethod <string> Training method available values are:; BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs; BPMode <string> Back-propagation learning mode available values are:; sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events . Reimplemented from TMVA::MethodANNBase.; Definition at line 195 of file MethodMLP.cxx. ◆ DeclFileName(). static const char * TMVA::MethodMLP::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:41348,learn,learning,41348,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,"h object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg) const; Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name) const; Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. TIterator* MakeIterator(Bool_t dir = kTRUE) const; Return an iterator over this list. RooLinkedListIter iterator(Bool_t dir = kTRUE) const; Return an iterator over this list. void Sort(Bool_t ascend = kTRUE); Sort elements of this list according to their; TObject::Compare() ranking via a simple; bubble sort algorithm. void swapWithNext(RooLinkedListElem* elem); Swap given to elements in the linked list. Auxiliary function for Sort(). void Streamer(TBuffer& b); Custom streaming handling schema evolution w.r.t past implementations. Int_t getHashTableSize() const; Return size of hash table. Int_t GetSize() const; { return _size ; }. void Add(TObject* arg); { Add(arg,1) ; }. TObject* First() const. const char* GetName() const; { return _name.Data() ; }. void SetName(const char* name); { _name = name ; }. » Last changed: Sat Oct 9 06:58:32 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLinkedList.html:8806,simpl,simple,8806,root/html528/RooLinkedList.html,https://root.cern,https://root.cern/root/html528/RooLinkedList.html,1,['simpl'],['simple']
Usability,"h of; the mark is w, height is h and the type of the mark is determined by the; parameter type. void Slice(Double_t xr, Double_t yr, Double_t xs, Double_t ys, TLine* line); Calculates screen coordinates of the line given by two; nodes for contours display mode. The line is given by two points; xr, yr, xs, ys. Finally it draws the line. void CopyEnvelope(Double_t xr, Double_t xs, Double_t yr, Double_t ys); Copies envelope vector, which ensures hidden surface removal for the; contours display mode. void Paint(Option_t* option); Paints histogram according to preset parameters. ; Visualization; Goal: to present 2-dimensional spectra in suitable visual form; This package has several display mode groups and display modes, which can be; employed for the presentation of 2-dimensional histograms; Display modes groups:. kModeGroupSimple - it covers simple display modes using one; color only; kModeGroupLight - in this group the shading is carried out; according to the position of the fictive; light source; kModeGroupHeight - in this group the shading is carried out; according to the channel contents; kModeGroupLightHeight - combination of two previous shading; algorithms. One can control the weight; between both algorithms. Display modes:. kDisplayModePoints, ; kDisplayModeGrid, ; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible ef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:16454,simpl,simple,16454,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['simpl'],['simple']
Usability,"h packet ; TObjArrayfMonitoringWriters!Monitoring engines; TH1D*fNodeHist!histogram of slaves per file serving node; Long64_tfNumEvents!total number of events to be processed; TList*fOutput!Saved pointer to the output list ; TH1D*fPacketsHist!histogram of packets processed per slave; TPerfEvent*fPerfEvent!TPerfEvent used to fill tree; TH2D*fProcTimeHist!histogram of real time spent processing packets; Int_tfSlaves!number of active slaves; Long64_tfTotBytesRead!total bytes read on all slaves; Double_tfTotCpuTime!total cpu time of all slaves; Long64_tfTotEvents!total number of events processed; TTree*fTrace!TTree with trace events; TTimeStampfTzero!start time of this run; static Long_tfgResMemMax! Max resident memory used by this process; static Long_tfgVirtMemMax! Max virtual memory used by this process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPerfStats(TList* input, TList* output); Normal constructor. void SimpleEvent(TVirtualPerfStats::EEventType type); Simple event. void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead); Packet event.; See WriteQueryLog for the descripition of the structure sent for monitoring; when fMonitorPerPacket is kTRUE. void FileEvent(const char* slave, const char* slavename, const char* nodename, const char* filename, Bool_t isStart); File event. void FileOpenEvent(TFile* file, const char* filename, Double_t start); Open file event. void FileReadEvent(TFile* file, Int_t len, Double_t start); Read file event. void FileUnzipEvent(TFile* file, Long64_t pos, Double_t start, Int_t complen, Int_t objlen); Record TTree file unzip event.; start is the TimeStamp before unzip; pos is where in the file the compressed buffer came from; complen is the length of the compressed buffer; objlen is the length of the de-compressed buffer. void RateEvent(Double_t proctime, Double_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPerfStats.html:8159,Simpl,SimpleEvent,8159,root/html530/TPerfStats.html,https://root.cern,https://root.cern/root/html530/TPerfStats.html,2,['Simpl'],"['Simple', 'SimpleEvent']"
Usability,"h performance, but sometimes it gets in the way of writing simple code that manages RDF objects. Luckily, every RDF object can be converted to the generic RNode type. This tutorial shows how to take advantage of RNode to easily manipulate RDataFrames.; ; /// A generic function that takes an RDF object and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; f1TF1 * f1Definition legend1.C:11; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df025__RNode_8C.html:1310,simpl,simple,1310,doc/master/df025__RNode_8C.html,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html,1,['simpl'],['simple']
Usability,"h reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets. ;  ; Long64_t GetBytesRead () const;  ; Int_t GetClientProtocol () const;  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; virtual TFileCollection * GetDataSet (const char *dataset, const char *optStr="""");  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; virtual TMap * GetDataSets (const char *uri="""", const char *optStr="""");  Lists all datasets that match given uri. ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; virtual TList * GetListOfQueries (Option_t *opt="""");  Ask the master for the list of queries. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of quer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:8714,feedback,feedback,8714,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['feedback'],['feedback']
Usability,"h shares its weights with another TNet instance. . ◆ AddLayer() [2/3]. template<typename Architecture_t , typename Layer_t = TLayer<Architecture_t>> . template<typename SharedLayer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::AddLayer ; (; SharedLayer_t & ; layer). inline . Definition at line 247 of file Net.h. ◆ AddLayer() [3/3]. template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::AddLayer ; (; size_t ; width, . EActivationFunction ; f, . Scalar_t ; dropoutProbability = 1.0 . ). Add a layer of the given size to the neural net. ; Definition at line 225 of file Net.h. ◆ Backward(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Backward ; (; const Matrix_t & ; X, . const Matrix_t & ; Y, . const Matrix_t & ; weights . ). inline . Compute the weight gradients in the net from the given training samples X and training labels Y. ; Definition at line 285 of file Net.h. ◆ Clear(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Clear. Remove all layers from the network. ; Definition at line 239 of file Net.h. ◆ CreateClone(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TNet< Architecture_t, Layer_t >::CreateClone ; (; size_t ; batchSize). Create a clone that uses the same weight and biases matrices but potentially a difference batch size. ; Definition at line 212 of file Net.h. ◆ Forward(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Forward ; (; Matrix_t & ; X, . bool ; applyDropout = false . ). inline . Forward a given input through the neural net. ; Computes all layer activations up to the output layer ; Definition at line 273 of file Net.h. ◆ GetBatchSize(). template<typename Architecture_t , typename Layer_t = TLayer<Architecture_t>> . size_t TMVA::DNN::TNet< Architecture_t, Layer_t >::GetBatchSize ; (; ); c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:8450,Clear,Clear,8450,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['Clear'],['Clear']
Usability,"h size = 100 Loss function = C; Layer 0 DENSE Layer: ( Input = 256 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 1 BATCH NORM Layer: Input/Output = ( 100 , 100 , 1 ) Norm dim = 100 axis = -1; ; Layer 2 DENSE Layer: ( Input = 100 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 3 BATCH NORM Layer: Input/Output = ( 100 , 100 , 1 ) Norm dim = 100 axis = -1; ; Layer 4 DENSE Layer: ( Input = 100 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 5 BATCH NORM Layer: Input/Output = ( 100 , 100 , 1 ) Norm dim = 100 axis = -1; ; Layer 6 DENSE Layer: ( Input = 100 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 7 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 119.005; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.881238 0.852851 0.181896 0.0160504 7235.64 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.658204 0.827727 0.182292 0.0161751 7223.84 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.58547 0.792475 0.182478 0.0158424 7201.32 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.508772 0.760461 0.18258 0.0158465 7197.11 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.445197 0.705323 0.183204 0.015935 7174.07 0; : 6 | 0.409018 0.708257 0.18274 0.0151517 7160.42 1; : 7 | 0.369062 0.747523 0.18295 0.0151377 7150.84 2; : 8 | 0.31294 0.740134 0.183339 0.015769 7161.2 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:11258,Learn,Learning,11258,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"h that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 372 of file RooCategory.cxx. ◆ addToRange() [2/2]. void RooCategory::addToRange ; (; const char * ; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that categories inside a dataset and their counterparts on the outside will both see a modification of the range. ; Definition at line 321 of file RooCategory.cxx. ◆ clone(). TObject * RooCategory::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooCategory.h. ◆ DeclFileName(). static const char * RooCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 141 of file RooCategory.h. ◆ defineType() [1/2]. bool RooCategory::defineType ; (; const std::string & ; label). Define a state with given name. ; The lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:55025,clear,clear,55025,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['clear'],['clear']
Usability,"h the file TProof::kCpBin must be set in cpopt; the default is copy everything. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 6799 of file TProof.cxx. ◆ Class(). static TClass * TProof::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProof::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProof::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 1073 of file TProof.h. ◆ CleanGDirectory(). void TProof::CleanGDirectory ; (; TList * ; ol). private . Remove links to objects in list 'ol' from gDirectory. ; Definition at line 3046 of file TProof.cxx. ◆ CleanupSession(). Int_t TProof::CleanupSession ; (; const char * ; sessiontag). Send cleanup request for the session specified by tag. ; Definition at line 6092 of file TProof.cxx. ◆ ClearCache(). void TProof::ClearCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:74329,Clear,ClearCache,74329,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearCache']
Usability,"h the prior to obtain the posterior function ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:7992,simpl,simple,7992,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability,"h""; 24 ; 25class TH2PolyBin: public TObject{; 26 ; 27public:; 28 TH2PolyBin();; 29 TH2PolyBin(TObject *poly, Int_t bin_number);; 30 ~TH2PolyBin() override;; 31 ; 32 void ClearContent(){fContent = 0;}; 33 void Fill(Double_t w) {fContent = fContent+w; SetChanged(true);}; 34 Double_t GetArea();; 35 Double_t GetContent() const{return fContent;}; 36 Bool_t GetChanged() const{return fChanged;}; 37 Int_t GetBinNumber() const {return fNumber;}; 38 TObject *GetPolygon() const {return fPoly;}; 39 Double_t GetXMax();; 40 Double_t GetXMin();; 41 Double_t GetYMax();; 42 Double_t GetYMin();; 43 Bool_t IsInside(Double_t x, Double_t y) const;; 44 void SetChanged(Bool_t flag){fChanged = flag;}; 45 void SetContent(Double_t content){fContent = content; SetChanged(true);}; 46 ; 47protected:; 48 Bool_t fChanged; ///< For the 3D Painter; 49 Int_t fNumber; ///< Bin number of the bin in TH2Poly; 50 TObject *fPoly; ///< Object holding the polygon definition; 51 Double_t fArea; ///< Bin area; 52 Double_t fContent; ///< Bin content; 53 Double_t fXmin; ///< X minimum value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8h_source.html:1110,Clear,ClearContent,1110,doc/master/TH2Poly_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8h_source.html,1,['Clear'],['ClearContent']
Usability,"h""; 26 ; 27#include <iterator>; 28 ; 29class TObjArrayIter;; 30 ; 31class TObjArray : public TSeqCollection {; 32 ; 33friend class TObjArrayIter;; 34friend class TClonesArray;; 35 ; 36protected:; 37 TObject **fCont; //!Array contents; 38 Int_t fLowerBound; //Lower bound of the array; 39 Int_t fLast; //Last element in array containing an object; 40 ; 41 Bool_t BoundsOk(const char *where, Int_t at) const;; 42 void Init(Int_t s, Int_t lowerBound);; 43 Bool_t OutOfBoundsError(const char *where, Int_t i) const;; 44 Int_t GetAbsLast() const;; 45 ; 46public:; 47 typedef TObjArrayIter Iterator_t;; 48 ; 49 TObjArray(Int_t s = TCollection::kInitCapacity, Int_t lowerBound = 0);; 50 TObjArray(const TObjArray &a);; 51 virtual ~TObjArray();; 52 TObjArray& operator=(const TObjArray&);; 53 void Clear(Option_t *option="""") override;; 54 virtual void Compress();; 55 void Delete(Option_t *option="""") override;; 56 virtual void Expand(Int_t newSize); // expand or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8h_source.html:1834,Clear,Clear,1834,doc/master/TObjArray_8h_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8h_source.html,1,['Clear'],['Clear']
Usability,"h""; 26 ; 27class TDirectory;; 28class TCollection;; 29 ; 30 ; 31class TEventList : public TNamed {; 32 ; 33protected:; 34 Int_t fN; ///< Number of elements in the list; 35 Int_t fSize; ///< Size of array; 36 Int_t fDelta; ///< Increment size; 37 bool fReapply; ///< If true, TTree::Draw will 'reapply' the original cut; 38 Long64_t *fList; ///<[fN]Array of elements; 39 TDirectory *fDirectory; ///<! Pointer to directory holding this tree; 40 ; 41public:; 42 TEventList();; 43 TEventList(const char *name, const char *title="""",Int_t initsize=0, Int_t delta = 0);; 44 TEventList(const TEventList &list);; 45 ~TEventList() override;; 46 virtual void Add(const TEventList *list);; 47 void Clear(Option_t *option="""") override {Reset(option);}; 48 virtual bool Contains(Long64_t entry);; 49 virtual bool ContainsRange(Long64_t entrymin, Long64_t entrymax);; 50 virtual void DirectoryAutoAdd(TDirectory *);; 51 virtual void Enter(Long64_t entry);; 52 TDirectory *GetDirectory() const {return fDirectory;}; 53 virtual Long64_t GetEntry(Int_t inde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEventList_8h_source.html:1648,Clear,Clear,1648,doc/master/TEventList_8h_source.html,https://root.cern,https://root.cern/doc/master/TEventList_8h_source.html,1,['Clear'],['Clear']
Usability,"h(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tBranch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual Int_tBranch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); virtual TBranch*Branch(const char* name, void* address, const char* leaflist, Int_t bufsize); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeSQL.html:2143,Clear,Clear,2143,root/html528/TTreeSQL.html,https://root.cern,https://root.cern/root/html528/TTreeSQL.html,4,['Clear'],['Clear']
Usability,"h);  Display the content associated with the redirection described by the opaque handle 'h'. ;  ; virtual TString SplitAclicMode (const char *filename, TString &mode, TString &args, TString &io) const;  This method split a filename of the form: ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Syslog (ELogLevel level, const char *mess);  Send mess to syslog daemon. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:22094,Clear,Clear,22094,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['Clear'],['Clear']
Usability,"h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Horizontal progress bar constructor. ;  ;  ~TGHProgressBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a horizontal progress bar as a C++ statement(s) on output stream out. ;  ; void ShowPosition (Bool_t set=kTRUE, Bool_t percent=kTRUE, const char *format=""%.2f"");  Show postion text, either in percent or formatted according format. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:1916,progress bar,progress bar,1916,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,1,['progress bar'],['progress bar']
Usability,"h. Public Member Functions;  TMinuit2TraceObject (int parNumber=-1);  ;  ~TMinuit2TraceObject () override;  ; void Init (const ROOT::Minuit2::MnUserParameterState &state) override;  ; TClass * IsA () const override;  ; void operator() (int i, const ROOT::Minuit2::MinimumState &state) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Minuit2::MnTraceObject;  MnTraceObject (int parNumber=-1);  ; virtual ~MnTraceObject ();  ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit2TraceObject.html:1309,Clear,Clear,1309,doc/master/classTMinuit2TraceObject.html,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html,1,['Clear'],['Clear']
Usability,"h. ◆ DeclFileName(). static const char * TProofDrawListOfPolyMarkers3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 301 of file TProofDraw.h. ◆ DefVar(). void TProofDrawListOfPolyMarkers3D::DefVar ; (; ). inlineoverrideprotectedvirtual . Implements TProofDraw.; Definition at line 294 of file TProofDraw.h. ◆ DoFill(). void TProofDrawListOfPolyMarkers3D::DoFill ; (; Long64_t ; entry, . Double_t ; w, . const Double_t * ; v . ). overrideprotectedvirtual . Fills the scatter plot with the given values. ; Implements TProofDraw.; Definition at line 2102 of file TProofDraw.cxx. ◆ IsA(). TClass * TProofDrawListOfPolyMarkers3D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofDraw.; Definition at line 301 of file TProofDraw.h. ◆ SlaveBegin(). void TProofDrawListOfPolyMarkers3D::SlaveBegin ; (; TTree * ; tree). overridevirtual . See TProofDraw::SlaveBegin(). ; Reimplemented from TProofDraw.; Definition at line 2070 of file TProofDraw.cxx. ◆ Streamer(). void TProofDrawListOfPolyMarkers3D::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofDraw. ◆ StreamerNVirtual(). void TProofDrawListOfPolyMarkers3D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 301 of file TProofDraw.h. ◆ Terminate(). void TProofDrawListOfPolyMarkers3D::Terminate ; (; void ; ). overridevirtual . See TProofDraw::Terminate(). ; Reimplemented from TProofDraw.; Definition at line 2112 of file TProofDraw.cxx. Member Data Documentation. ◆ fPoints. TProofVectorContainer<Point4D_t>* TProofDrawListOfPolyMarkers3D::fPoints. protected . Definition at line 292 of file TProofDraw.h. proof/proofplayer/inc/TProofDraw.h; proof/proofplayer/src/TProofDraw.cxx. TProofDrawListOfPolyMarkers3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html:17216,Guid,Guide,17216,doc/master/classTProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html,1,['Guid'],['Guide']
Usability,"h. ◆ SetY(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . PositionVector2D< CoordSystem, Tag > & ROOT::Math::PositionVector2D< CoordSystem, Tag >::SetY ; (; Scalar ; a). inline . Change Y - Cartesian2D coordinates only. ; Definition at line 227 of file PositionVector2D.h. ◆ X(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::PositionVector2D< CoordSystem, Tag >::X ; (; ); const. inline . Cartesian X, converting if necessary from internal coordinate system. ; Definition at line 188 of file PositionVector2D.h. ◆ x(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::PositionVector2D< CoordSystem, Tag >::x ; (; ); const. inline . Definition at line 332 of file PositionVector2D.h. ◆ Y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::PositionVector2D< CoordSystem, Tag >::Y ; (; ); const. inline . Cartesian Y, converting if necessary from internal coordinate system. ; Definition at line 193 of file PositionVector2D.h. ◆ y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::PositionVector2D< CoordSystem, Tag >::y ; (; ); const. inline . Definition at line 333 of file PositionVector2D.h. Member Data Documentation. ◆ fCoordinates. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . CoordSystem ROOT::Math::PositionVector2D< CoordSystem, Tag >::fCoordinates. private . Definition at line 340 of file PositionVector2D.h. ◆ fDimension. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . constexpr unsigned int ROOT::Math::PositionVector2D< CoordSystem, Tag >::fDimension = CoordinateType::Dimension. staticconstexprprivate . Definition at line 341 of file PositionVector2D.h. math/genvector/inc/Math/GenVector/PositionVector2D.h. ROOTMathPositionVector2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector2D.html:21243,Guid,Guide,21243,doc/master/classROOT_1_1Math_1_1PositionVector2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PositionVector2D.html,1,['Guid'],['Guide']
Usability,h. ◆ XX(). Double_t TRotation::XX ; (; ); const. inline . Definition at line 190 of file TRotation.h. ◆ XY(). Double_t TRotation::XY ; (; ); const. inline . Definition at line 191 of file TRotation.h. ◆ XZ(). Double_t TRotation::XZ ; (; ); const. inline . Definition at line 192 of file TRotation.h. ◆ YX(). Double_t TRotation::YX ; (; ); const. inline . Definition at line 193 of file TRotation.h. ◆ YY(). Double_t TRotation::YY ; (; ); const. inline . Definition at line 194 of file TRotation.h. ◆ YZ(). Double_t TRotation::YZ ; (; ); const. inline . Definition at line 195 of file TRotation.h. ◆ ZX(). Double_t TRotation::ZX ; (; ); const. inline . Definition at line 196 of file TRotation.h. ◆ ZY(). Double_t TRotation::ZY ; (; ); const. inline . Definition at line 197 of file TRotation.h. ◆ ZZ(). Double_t TRotation::ZZ ; (; ); const. inline . Definition at line 198 of file TRotation.h. Member Data Documentation. ◆ fxx. Double_t TRotation::fxx. protected . Definition at line 182 of file TRotation.h. ◆ fxy. Double_t TRotation::fxy. protected . Definition at line 182 of file TRotation.h. ◆ fxz. Double_t TRotation::fxz. protected . Definition at line 182 of file TRotation.h. ◆ fyx. Double_t TRotation::fyx. protected . Definition at line 182 of file TRotation.h. ◆ fyy. Double_t TRotation::fyy. protected . Definition at line 182 of file TRotation.h. ◆ fyz. Double_t TRotation::fyz. protected . Definition at line 182 of file TRotation.h. ◆ fzx. Double_t TRotation::fzx. protected . Definition at line 182 of file TRotation.h. ◆ fzy. Double_t TRotation::fzy. protected . Definition at line 182 of file TRotation.h. ◆ fzz. Double_t TRotation::fzz. protected . Definition at line 182 of file TRotation.h. Libraries for TRotation:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TRotation.h; math/physics/src/TRotation.cxx. TRotation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:30920,Guid,Guide,30920,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['Guid'],['Guide']
Usability,"h. ◆ stringAttributes(). const std::map< std::string, std::string > & RooAbsArg::stringAttributes ; (; ); const. inline . Definition at line 321 of file RooAbsArg.h. ◆ substituteServer(). void RooAbsArg::substituteServer ; (; RooAbsArg * ; oldServer, . RooAbsArg * ; newServer . ). private . Set by the RooFitDriver for this arg to retrieve its result in the run context. ; Private helper function for RooAbsArg::redirectServers().; *‍/ ; Definition at line 1116 of file RooAbsArg.cxx. ◆ syncCache(). virtual void RooAbsArg::syncCache ; (; const RooArgSet * ; nset = nullptr). protectedpure virtual . Implemented in RooStringVar, RooAbsCategory, RooAbsReal, and RooErrorVar. ◆ transientAttributes(). const std::set< std::string > & RooAbsArg::transientAttributes ; (; ); const. inline . Definition at line 329 of file RooAbsArg.h. ◆ translate(). void RooAbsArg::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. virtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooLognormal, RooParamHistFunc, RooPoisson, RooPolynomial, RooUniform, RooAddition, RooAddPdf, RooConstraintSum, RooConstVar, RooEfficiency, RooEffProd, RooExtendPdf, RooFormulaVar, RooGenericPdf, RooHistFunc, RooHistPdf, RooPolyVar, RooProduct, RooRatio, RooRealIntegral, RooR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:102126,simpl,simple,102126,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['simpl'],['simple']
Usability,"h. ◆ unit(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . DisplacementVector2D ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::unit ; (; ); const. inline . Definition at line 389 of file DisplacementVector2D.h. ◆ X(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::X ; (; ); const. inline . Cartesian X, converting if necessary from internal coordinate system. ; Definition at line 206 of file DisplacementVector2D.h. ◆ x(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::x ; (; ); const. inline . Definition at line 384 of file DisplacementVector2D.h. ◆ Y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::Y ; (; ); const. inline . Cartesian Y, converting if necessary from internal coordinate system. ; Definition at line 211 of file DisplacementVector2D.h. ◆ y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::y ; (; ); const. inline . Definition at line 385 of file DisplacementVector2D.h. Member Data Documentation. ◆ fCoordinates. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . CoordSystem ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::fCoordinates. private . Definition at line 394 of file DisplacementVector2D.h. ◆ fDimension. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . constexpr unsigned int ROOT::Math::DisplacementVector2D< CoordSystem, Tag >::fDimension = CoordinateType::Dimension. staticconstexprprivate . Definition at line 395 of file DisplacementVector2D.h. math/genvector/inc/Math/GenVector/DisplacementVector2D.h. ROOTMathDisplacementVector2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html:25127,Guid,Guide,25127,doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector2D.html,1,['Guid'],['Guide']
Usability,"h.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172919,learn,learn,172919,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['learn'],['learn']
Usability,"h1*-*-; *-* =============================. this = this*h1. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH1D * ProjectionX(const char* name = ""_px"", Option_t* option = ""e"") const; Project this profile into a 1-D histogram along X*-*-; *-* =================================================. The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; otherwise (default) it will be equal to GetBinContent(bin); if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH1D using the 2-nd value as a weight.; This makes sense only for profile filled with weights =1. If not, the error of the; projected histogram obtained with this option will not be correct. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this profile grouping ngroup bins together*-*-*-*-; *-* ================================================; -case 1 xbins=0; if newname is not blank a new temporary profile hnew is created.; else the current profile is modified (default); The parameter ngroup indicates ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:38819,simpl,simply,38819,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,3,['simpl'],['simply']
Usability,"h1->SetBarWidth(3);; h1->SetFillStyle(0);; h1->SetFillColor(kGray);; h1->SetLineColor(kBlue);; h1->GetYaxis()->SetTitle(""time"");; h1->GetXaxis()->SetTitle(""probability density"");; ; c1->cd(1);; h1->Draw(""violiny(112000000)"");; c1->cd(2);; auto h2 = (TH2I*)h1->Clone(""h2"");; h2->SetBarWidth(0.8);; h2->DrawCopy(""candley2"");; }; kGray@ kGrayDefinition Rtypes.h:65; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorGeorg Troska ; Definition in file candledecay.C. tutorialshistcandledecay.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/candledecay_8C.html:2532,Guid,Guide,2532,doc/master/candledecay_8C.html,https://root.cern,https://root.cern/doc/master/candledecay_8C.html,1,['Guid'],['Guide']
Usability,"h2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char *name) const override;  search object named name in the list of functions ;  ; TObject * FindObject (const TObject *obj) const override;  search object obj in the list of functions ;  ; virtual TFitResultPtr Fit (const char *formula, Option_t *option="""", Option_t *goption="""");  Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ;  ; virtual TFitResultPtr Fit (TF2 *f2, Option_t *option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:12645,Clear,Clear,12645,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,3,['Clear'],['Clear']
Usability,"h:104; TH1::GetStatOverflowsBehaviourBool_t GetStatOverflowsBehaviour() constDefinition TH1.h:152; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TH1::SetEntriesvirtual void SetEntries(Double_t n)Definition TH1.h:391; TH1::fTsumwxDouble_t fTsumwxTotal Sum of weight*X.Definition TH1.h:98; THLimitsFinder::GetLimitsFinderstatic THLimitsFinder * GetLimitsFinder()Return pointer to the current finder.Definition THLimitsFinder.cxx:153; THLimitsFinder::FindGoodLimitsvirtual Int_t FindGoodLimits(TH1 *h, Double_t xmin, Double_t xmax)Compute the best axis limits for the X axis.Definition THLimitsFinder.cxx:53; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition THashList.cxx:189; TIterDefinition TCollection.h:235; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:76262,Clear,Clearvoid,76262,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"h:182; TSpline3::EvalDouble_t Eval(Double_t x) const overrideEval this spline at x.Definition TSpline.cxx:786; TSplineBase class for spline implementation containing the Draw/Paint methods.Definition TSpline.h:31; TSpline::Evalvirtual Double_t Eval(Double_t x) const =0; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::AtoiInt_t Atoi() constReturn integer value of string.Definition TString.cxx:1988; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::AtofDouble_t Atof() constReturn floating-point value contained in string.Definition TString.cxx:2054; TString::IsFloatBool_t IsFloat() constReturns kTRUE if string contains a floating point or integer number.Definition TString.cxx:1858; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::ReplaceTString & Replace(Ssiz_t pos, Ssiz_t n, const char *s)Definition TString.h:694; TString::Dataconst char * Data() constDefinition TString.h:376; TString::IsDigitBool_t IsDigit() constReturns true if all characters in string are digits (0-9) or white spaces, i.e.Definition TString.cxx:1830; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:133975,Clear,Clearvoid,133975,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"h:273; TIter::NextTObject * Next()Definition TCollection.h:251; TIter::Resetvoid Reset()Definition TCollection.h:254; TIter::operator++TIter & operator++()Definition TCollection.h:255; TIter::TIterTIter(TIterator *it)Definition TCollection.h:246; TIter::operator=TIter & operator=(const TIter &rhs)Assigning an TIter to another.Definition TCollection.cxx:789; TIter::TIterTIter(const TCollection *col, Bool_t dir=kIterForward)Definition TCollection.h:244; TIter::fIteratorTIterator * fIteratorDefinition TCollection.h:238; TIteratorIterator abstract base class.Definition TIterator.h:30; TIterator::Resetvirtual void Reset()=0; TIterator::Nextvirtual TObject * Next()=0; TIterator::GetOptionvirtual Option_t * GetOption() constDefinition TIterator.h:40; TIterator::GetCollectionvirtual const TCollection * GetCollection() const =0; TObjectTableThis class registers all instances of TObject and its derived classes in a hash table.Definition TObjectTable.h:35; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TPRegexpDefinition TPRegexp.h:36; TStringBasic string class.Definition TString.h:139; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; int; ROOT::Internal::ContaineeInheritsFrombool ContaineeInheritsFrom(TClass *cl, TClass *base)Return true if 'cl' inherits from 'base'.Definition TCollection.cxx:831; ROOT::Internal::EmptyCollectionconst TCollection & EmptyCollection()Return an empty collection for use with nullptr TRangeCast.Definition TCollection.cxx:822; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Drawth1 Draw(). corecontincTCollection.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:27399,Guid,Guide,27399,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['Guid'],['Guide']
Usability,"h:29; whatstatic const char * whatDefinition stlLoader.cc:5; AlternateTupleIntDoubleAscDefinition TCling.cxx:3912; AlternateTupleIntDoubleAsc::_1Double_t _1Definition TCling.cxx:3914; AlternateTupleIntDoubleAsc::_0Int_t _0Definition TCling.cxx:3913; AlternateTupleIntDoubleDesDefinition TCling.cxx:3918; AlternateTupleIntDoubleDes::_0Int_t _0Definition TCling.cxx:3920; AlternateTupleIntDoubleDes::_1Double_t _1Definition TCling.cxx:3919; FileStat_tDefinition TSystem.h:122; FileStat_t::fModeInt_t fModeDefinition TSystem.h:125; ProcInfo_tDefinition TSystem.h:196; ProcInfo_t::fMemVirtualLong_t fMemVirtualDefinition TSystem.h:200; ProcInfo_t::fMemResidentLong_t fMemResidentDefinition TSystem.h:199; ROOT::Internal::ParsingStateRAIIRAII used to store Parser, Sema, Preprocessor state for recursive parsing.Definition ClingRAII.h:22; TClassEdit::TSplitTypeDefinition TClassEdit.h:138; TClassEdit::TSplitType::fElementsstd::vector< std::string > fElementsDefinition TClassEdit.h:141; TClassEdit::TSplitType::ShortTypevoid ShortType(std::string &answer, int mode)Return the absolute type of typeDesc into the string answ.Definition TClassEdit.cxx:250; TCling::MutexStateAndRecurseCountDeltaDefinition TCling.h:167; TCling::MutexStateAndRecurseCount::fStatestd::unique_ptr< ROOT::TVirtualRWMutex::State > fStateState of gCoreMutex when the first interpreter-related function was invoked.Definition TCling.h:157; TCling::MutexStateAndRecurseCount::fRecurseCountInt_t fRecurseCountInterpreter-related functions will push the ""entry"" lock state to *this.Definition TCling.h:162; TInterpreter::CallFuncIFacePtr_tDefinition TInterpreter.h:82; TMemFile::ZeroCopyView_tA read-only memory range which we do not control.Definition TMemFile.h:23; ValueDefinition functioncalls.h:15; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; outputstatic void output(). coremetaclingsrcTCling.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:493348,Guid,Guide,493348,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Guid'],['Guide']
Usability,"h:37; RooUniformFlat p.d.f.Definition RooUniform.h:24; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPave::SetBorderSizevirtual void SetBorderSize(Int_t bordersize=4)Sets the border size of the TPave box and shadow.Definition TPave.h:77; TVirtualPad::Drawvoid Draw(Option_t *option="""") override=0Default Draw method for all objects.; ptTPaveText * ptDefinition entrylist_figure1.C:7; RooFit::ParametersRooCmdArg Parameters(const RooArgSet &params)Definition RooGlobalFunc.cxx:787; RooFit::ConditionalRooCmdArg Conditional(const RooArgSet &pdfSet, const RooArgSet &depSet, bool depsAreCond=false)Definition RooGlobalFunc.cxx:805; RooFit::ComponentsRooCmdArg Components(Args_t &&... argsOrArgSet)Definition RooGlobalFunc.h:128; RooFit::MarkerColorRooCmdArg MarkerColor(Color_t color)Definition RooGlobalFunc.cxx:352; RooFit::VisualizeErrorRooCmdArg VisualizeError(const RooDataSet &paramData, double Z=1)Definition RooGlobalFunc.cxx:300; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:10156,Clear,Clearvoid,10156,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TF11-Dim function classDefinition TF1.h:233; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::GetPolargramTGraphPolargram * GetPolargram()Definition TGraphPolar.h:39; TGraphPolar::Drawvoid Draw(Option_t *options="""") overrideDraw TGraphPolar.Definition TGraphPolar.cxx:100; TGraphPolargram::SetRangePolarvoid SetRangePolar(Double_t tmin, Double_t tmax)Allows to change range Polar.Definition TGraphPolargram.cxx:876; TGraphPolargram::SetTwoPivoid SetTwoPi()Set range from 0 to 2*pi.Definition TGraphPolargram.cxx:947; TGraphPolargram::SetNdivPolarvoid SetNdivPolar(Int_t Ndiv=508)Set the number of Polar divisions: enter a number ij with 0<i<99 and 0<j<99.Definition TGraphPolargram.cxx:775; TGraphPolargram::SetToRadianvoid SetToRadian()The Polar circle is labelled using radian.Definition TGraphPolargram.cxx:936; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; ROOT::VecOps::cosRVec< PromoteType< T > > cos(const RVec< T > &v)Definition RVec.hxx:1852; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorOlivier Couet ; Definition in file graphpolar.C. tutorialsgraphsgraphpolar.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphpolar_8C.html:5422,Guid,Guide,5422,doc/master/graphpolar_8C.html,https://root.cern,https://root.cern/doc/master/graphpolar_8C.html,1,['Guid'],['Guide']
Usability,h::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result from the last estimation. ; Definition at line 225 of file GaussIntegrator.h. ◆ fUsedOnce. bool ROOT::Math::GaussIntegrator::fUsedOnce. protected . Bool value to check if the function was at least called once. ; Definition at line 224 of file GaussIntegrator.h. Libraries for ROOT::Math::GaussIntegrator:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GaussIntegrator.h; math/mathcore/src/GaussIntegrator.cxx. ROOTMathGaussIntegrator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:13753,Guid,Guide,13753,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['Guid'],['Guide']
Usability,"h::RotationY::RotationYRotationY()Default constructor (identity rotation)Definition RotationY.h:57; ROOT::Math::RotationY::fCosScalar fCosDefinition RotationY.h:225; ROOT::Math::RotationY::CosAngleScalar CosAngle() constDefinition RotationY.h:111; ROOT::Math::RotationY::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition RotationY.h:176; ROOT::Math::RotationY::operator()DisplacementVector3D< CoordSystem, U > operator()(const DisplacementVector3D< CoordSystem, U > &v) constRotation operation on a displacement vector in any coordinate system.Definition RotationY.h:129; ROOT::Math::RotationY::RotationYRotationY(Scalar angle)Construct from an angle.Definition RotationY.h:62; ROOT::Math::RotationY::InverseRotationY Inverse() constReturn inverse of a rotation.Definition RotationY.h:189; ROOT::Math::RotationY::SinAngleScalar SinAngle() constSine or Cosine of the rotation angle.Definition RotationY.h:110; ROOT::Math::RotationY::Rectifyvoid Rectify()Rectify makes sure the angle is in (-pi,pi].Definition RotationY.h:74; ROOT::Math::RotationY::operator==bool operator==(const RotationY &rhs) constEquality/inequality operators.Definition RotationY.h:213; ROOT::Math::RotationY::operator!=bool operator!=(const RotationY &rhs) constDefinition RotationY.h:217; R; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorincMathGenVectorRotationY.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2RotationY_8h_source.html:12122,Guid,Guide,12122,doc/master/GenVector_2RotationY_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2RotationY_8h_source.html,1,['Guid'],['Guide']
Usability,"h; TParallelCoordRange.h; TParallelCoordVar.h; TParallelCoord.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TStyle.h; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetHistogramHeightvoid SetHistogramHeight(Double_t h=0)Set the height of the bar histogram.Definition TParallelCoordVar.cxx:892; TParallelCoordVar::Drawvoid Draw(Option_t *option="""") overrideDraw the axis.Definition TParallelCoordVar.cxx:150; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::SetLineColorvoid SetLineColor(Color_t col)Definition TParallelCoord.h:127; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; AuthorsTimur Pocheptsov, Olivier Couet ; Definition in file parallelcoordtrans.C. tutorialsglparallelcoordtrans.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html:6898,Guid,Guide,6898,doc/master/gl_2parallelcoordtrans_8C.html,https://root.cern,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html,1,['Guid'],['Guide']
Usability,"hDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:7080,Clear,Clear,7080,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['Clear'],['Clear']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:4086,clear,clearValueDirty,4086,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:3186,clear,clearValueDirty,3186,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,2,['clear'],['clearValueDirty']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDecay.html:2590,clear,clearValueDirty,2590,root/html526/RooDecay.html,https://root.cern,https://root.cern/root/html526/RooDecay.html,1,['clear'],['clearValueDirty']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:2892,clear,clearValueDirty,2892,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,4,['clear'],['clearValueDirty']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBDecay.html:2790,clear,clearValueDirty,2790,root/html526/RooBDecay.html,https://root.cern,https://root.cern/root/html526/RooBDecay.html,1,['clear'],['clearValueDirty']
Usability,"hDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgusBG.html:2614,clear,clearValueDirty,2614,root/html526/RooArgusBG.html,https://root.cern,https://root.cern/root/html526/RooArgusBG.html,49,['clear'],['clearValueDirty']
Usability,"hNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4804,clear,clearValueDirty,4804,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['clear'],['clearValueDirty']
Usability,"hPolargram::Initvoid Init()Initialize some of the fields of TGraphPolargram.Definition TGraphPolargram.cxx:327; TGraphPolargram::fRadialTextSizeDouble_t fRadialTextSizeDefinition TGraphPolargram.h:34; TGraphPolargram::GetTickpolarSizeDouble_t GetTickpolarSize()Definition TGraphPolargram.h:79; TGraphPolargram::SetPolarOffsetvoid SetPolarOffset(Double_t PolarOffset=0.04)Set the labels offset.Definition TGraphPolargram.cxx:832; TGraphPolargram::fGradBool_t fGradDefinition TGraphPolargram.h:25; TGraphPolargram::SetTwoPivoid SetTwoPi()Set range from 0 to 2*pi.Definition TGraphPolargram.cxx:947; TGraphPolargram::FindTextAngleDouble_t FindTextAngle(Double_t theta)Determine the orientation of the polar labels according to their angle.Definition TGraphPolargram.cxx:307; TGraphPolargram::SetRadialLabelColorvoid SetRadialLabelColor(Color_t tcolorradial=1)Set radial labels color.Definition TGraphPolargram.cxx:841; TGraphPolargram::PaintCirclevoid PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta)This is simplified from TEllipse::PaintEllipse.Definition TGraphPolargram.cxx:373; TGraphPolargram::SetRangeRadialvoid SetRangeRadial(Double_t rmin, Double_t rmax)Set the radial range.Definition TGraphPolargram.cxx:894; TGraphPolargram::fRadianBool_t fRadianDefinition TGraphPolargram.h:23; TGraphPolargram::SetTickpolarSizevoid SetTickpolarSize(Double_t tickpolarsize=0.02)Set polar ticks size.Definition TGraphPolargram.cxx:906; TGraphPolargram::SetAxisAnglevoid SetAxisAngle(Double_t angle=0)Set axis angle.Definition TGraphPolargram.cxx:765; TGraphPolargram::SetToDegreevoid SetToDegree()The Polar circle is labelled using degree.Definition TGraphPolargram.cxx:914; TGraphPolargram::SetNdivPolarvoid SetNdivPolar(Int_t Ndiv=508)Set the number of Polar divisions: enter a number ij with 0<i<99 and 0<j<99.Definition TGraphPolargram.cxx:775; TGraphPolargram::fNdivRadInt_t fNdivRadNumber of radial divisions.Definition TGraphPolargram.h:46; TGraphPolar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html:37248,simpl,simplified,37248,doc/master/TGraphPolargram_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html,1,['simpl'],['simplified']
Usability,hRecursiveRemoveConsistency::RecursiveRemove ; (; TObject * ; obj). inlineoverridevirtual . Recursively remove this object from a list. ; Typically implemented by classes that can contain multiple references to a same object. ; Reimplemented from TObject.; Definition at line 79 of file TCheckHashRecursiveRemoveConsistency.h. ◆ SlowRemove(). void ROOT::Internal::TCheckHashRecursiveRemoveConsistency::SlowRemove ; (; TObject * ; obj). inline . Definition at line 102 of file TCheckHashRecursiveRemoveConsistency.h. ◆ Streamer(). void ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Streamer ; (; TBuffer & ; R__b). inlineoverridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 245 of file TCheckHashRecursiveRemoveConsistency.h. ◆ StreamerNVirtual(). void ROOT::Internal::TCheckHashRecursiveRemoveConsistency::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 245 of file TCheckHashRecursiveRemoveConsistency.h. ◆ VerifyRecursiveRemove() [1/2]. bool ROOT::Internal::TCheckHashRecursiveRemoveConsistency::VerifyRecursiveRemove ; (; const char * ; classname). inline . Definition at line 164 of file TCheckHashRecursiveRemoveConsistency.h. ◆ VerifyRecursiveRemove() [2/2]. bool ROOT::Internal::TCheckHashRecursiveRemoveConsistency::VerifyRecursiveRemove ; (; TClass & ; classRef). inline . Definition at line 205 of file TCheckHashRecursiveRemoveConsistency.h. Member Data Documentation. ◆ fCont. std::list<Value> ROOT::Internal::TCheckHashRecursiveRemoveConsistency::fCont. Definition at line 46 of file TCheckHashRecursiveRemoveConsistency.h. ◆ fMutex. std::mutex ROOT::Internal::TCheckHashRecursiveRemoveConsistency::fMutex. Definition at line 47 of file TCheckHashRecursiveRemoveConsistency.h. core/meta/src/TCheckHashRecursiveRemoveConsistency.h. ROOTInternalTCheckHashRecursiveRemoveConsistency. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:16027,Guid,Guide,16027,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,1,['Guid'],['Guide']
Usability,"hSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; int; unsigned int; ROOT::Internal::MembersMap_tstd::map< std::string, std::string > MembersMap_tDefinition TSchemaType.h:20; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::WriteReadRuleFuncvoid WriteReadRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for Read rule, the function name is being written to rule[""funcname""].Definition RConversionRuleParser.cxx:655; ROOT::WriteReadRawRuleFuncvoid WriteReadRawRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""...Definition RConversionRuleParser.cxx:708; ROOT::ParseRulebool ParseRule(std::string rule, ROOT::Internal::MembersMap_t &result, std::string &error_string)Parse the schema rule as specified in the LinkDef file.Definition RConversionRuleParser.cxx:103; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854; TMVA::nullnull_t< F > null()Definition DataSetFactory.h:110. coremetasrcTSchemaRule.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:50421,Guid,Guide,50421,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Guid'],['Guide']
Usability,"hTable implements a hash table to store TObject's.Definition THashTable.h:35; TInterpreter::SuspendAutoParsingDefinition TInterpreter.h:111; TInterpreter::TypeInfo_Initvirtual void TypeInfo_Init(TypeInfo_t *, const char *) constDefinition TInterpreter.h:528; TInterpreter::TypeInfo_Deletevirtual void TypeInfo_Delete(TypeInfo_t *) constDefinition TInterpreter.h:524; TInterpreter::TypeInfo_Factoryvirtual TypeInfo_t * TypeInfo_Factory() constDefinition TInterpreter.h:525; TInterpreter::TypeInfo_Propertyvirtual Long_t TypeInfo_Property(TypeInfo_t *) constDefinition TInterpreter.h:531; TInterpreter::TypeInfo_Sizevirtual int TypeInfo_Size(TypeInfo_t *) constDefinition TInterpreter.h:533; TInterpreter::TypeInfo_IsValidvirtual Bool_t TypeInfo_IsValid(TypeInfo_t *) constDefinition TInterpreter.h:529; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TStreamerInfoActions::TActionSequenceDefinition TStreamerInfoActions.h:177; TStreamerInfoActions::TActionSequence::CreateReadMemberWiseActionsstatic TActionSequence * CreateReadMemberWiseActions(TVirtualStreamerInfo *info, TVirtualCollectionProxy &proxy)Create the bundle of the actions necessary for the streaming memberwise of the content described by '...Definition TStreamerInfoActions.cxx:3886; TStreamerInfoActions::TActionSequence::CreateWriteMemberWiseActionsstatic TActionSequence * CreateWriteMemberWiseActions(TVirtualStreamerInfo *info, TVirtualCollectionProxy &proxy)Create the bundle of the actions necessary for the streaming memberwise of the content described by '...Definition TStreamerInfoA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:90081,Clear,Clearvoid,90081,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"hText.h. ◆ operator=(). TMathText & TMathText::operator= ; (; const TMathText & ; rhs). protected . TMathText Painter. ; Assignment operator. ; Definition at line 380 of file TMathText.cxx. ◆ Paint(). void TMathText::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint text. ; Reimplemented from TObject.; Definition at line 556 of file TMathText.cxx. ◆ PaintMathText(). void TMathText::PaintMathText ; (; Double_t ; x, . Double_t ; y, . Double_t ; angle, . Double_t ; size, . const char * ; text . ). virtual . Paint text (used by Paint()). ; Definition at line 577 of file TMathText.cxx. ◆ Render(). void TMathText::Render ; (; const Double_t ; x, . const Double_t ; y, . const Double_t ; size, . const Double_t ; angle, . const Char_t * ; t, . const Int_t ; length . ). protected . Render the text. ; Definition at line 407 of file TMathText.cxx. ◆ SavePrimitive(). void TMathText::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 676 of file TMathText.cxx. ◆ Streamer(). void TMathText::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMathText::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TMathText.h. Friends And Related Symbol Documentation. ◆ TMathTextRenderer. friend class TMathTextRenderer. friend . Definition at line 22 of file TMathText.h. Member Data Documentation. ◆ fRenderer. TMathTextRenderer* TMathText::fRenderer {nullptr}. protected . Definition at line 24 of file TMathText.h. Libraries for TMathText:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TMathText.h; graf2d/graf/src/TMathText.cxx. TMathText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathText.html:28763,Guid,Guide,28763,doc/master/classTMathText.html,https://root.cern,https://root.cern/doc/master/classTMathText.html,1,['Guid'],['Guide']
Usability,"hading according to channels counts-; // PICTURE2_MODE_GROUP_HEIGHT, modes of combination of; // shading according to light and to channels counts-; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT); int display_mode; // spectrum display mode (points, grid, contours, bars, x_lines,; // y_lines, bars_x, bars_y, needles, surface, triangles); int z_scale; // z scale (linear, log, sqrt); int nodesx; // number of nodes in x dimension of grid; int nodesy; // number of nodes in y dimension of grid; int count_reg; // width between contours, applies only for contours display mode; int alfa; // angles of display,alfa+beta must be less or equal to 90, alpha- angle; // between base line of Canvas and left lower edge of picture picture; // base plane; int beta; // angle between base line of Canvas and right lower edge of picture base plane; int view_angle; // rotation angle of the view, it can be 0, 90, 180, 270 degrees; int levels; // # of color levels for rainbowed display modes, it does not apply for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighboring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // displa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:73014,simpl,simple,73014,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"hading according to channels counts-; // PICTURE2_MODE_GROUP_HEIGHT, modes of combination of; // shading according to light and to channels counts-; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT); int display_mode; // spectrum display mode (points, grid, contours, bars, x_lines,; // y_lines, bars_x, bars_y, needles, surface, triangles); int z_scale; // z scale (linear, log, sqrt); int nodesx; // number of nodes in x dimension of grid; int nodesy; // number of nodes in y dimension of grid; int count_reg; // width between contours, applies only for contours display mode; int alfa; // angles of display,alfa+beta must be less or equal to 90, alpha- angle; // between base line of Canvas and left lower edge of picture picture; // base plane; int beta; // angle between base line of Canvas and right lower edge of picture base plane; int view_angle; // rotation angle of the view, it can be 0, 90, 180, 270 degrees; int levels; // # of color levels for rainbowed display modes, it does not apply for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighbouring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:72022,simpl,simple,72022,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"hange both values simultaneously press the mouse button near to the slider center. To change pointer value press the mouse on the pointer and drag it to the desired position.; fSlider = new TGTripleHSlider(parent,100,kDoubleScaleBoth,kSLD_ID,; kHorizontalFrame);; parent->AddFrame(fSlider,new TGLayoutHints(kLHintsExpandX,5,5,5,5));; fSlider->SetConstrained(kTRUE);; fSlider->SetRange(rmin, rmax);; fSlider->SetPosition(pmin, pmax);; fSlider ->SetPointerPosition(pvalue);; 25.8.10 Progress Bars; A progress bar is a widget that shows that an operation is in progress and how much time is left. It is a long rectangular bar, initially empty, that fills with a color as a process is being performed. The filled-in area indicates the percentage of the process that has been completed. You should use this widget for waits exceeding one minute. For a very time consuming operation it is better to break the operation into subtasks and provide a progress bar for each of them. A progress bar may be oriented horizontally or vertically. The horizontally oriented progress bar fills with a color from left to right; the vertically oriented - from bottom to top. A percent complete message provides an indication of the completed part of the process. It is a good practice to include some descriptive text of the process to keep users informed and entertained while they are waiting for process completion.; The picture below shows the progress bars you can create using the classes TGProgressBar, TGHProgressBar, and TGHProgressBar.; // vertical frame with three horizontal progressive bars; TGVerticalFrame *vframe = new TGVerticalFrame(fMain, 10, 10);; fHProg1 = new TGHProgressBar(vframe,TGProgressBar::kStandard,300);; fHProg1->ShowPosition();; fHProg1->SetBarColor(""yellow"");; fHProg2 = new TGHProgressBar(vframe,TGProgressBar::kFancy,300);; fHProg2->SetBarColor(""lightblue"");; fHProg2->ShowPosition(kTRUE,kFALSE,""%.0f events"");; fHProg3 = new TGHProgressBar(vframe,TGProgressBar::kStandard,300);; fHPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1208165,progress bar,progress bar,1208165,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['progress bar'],['progress bar']
Usability,"hangeServer(RooAbsArg &server, bool valueProp, bool shapeProp)RooAbsArg; CheckedHash()TObjectinline; checkObservables(const RooArgSet *nset) constRooAbsArgvirtual; chi2FitTo(RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})RooAbsRealvirtual; chi2FitTo(RooDataHist &data, const RooLinkedList &cmdList)RooAbsRealvirtual; chi2FitTo(RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})RooAbsRealvirtual; chi2FitTo(RooDataSet &xydata, const RooLinkedList &cmdList)RooAbsRealvirtual; Class()RooAbsPdfstatic; Class_Name()RooAbsPdfstatic; Class_Version()RooAbsPdfinlinestatic; ClassName() constTObjectvirtual; cleanBranchName() constRooAbsArgprotected; Clear(Option_t *option="""") overrideTNamedvirtual; clearEvalErrorLog()RooAbsRealstatic; clearShapeDirty() constRooAbsArginlineprotected; clearValueAndShapeDirty() constRooAbsArginlineprotected; clearValueDirty() constRooAbsArginlineprotected; clients() constRooAbsArginline; Clone(const char *newname=nullptr) const overrideRooAbsArginlinevirtual; clone(const char *newname=nullptr) const =0RooAbsArgpure virtual; cloneTree(const char *newname=nullptr) constRooAbsArgvirtual; CollectErrors enum valueRooAbsReal; Compare(const TObject *other) const overrideRooAbsArgvirtual; compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideRooAbsPdfvirtual; ConfigChange enum valueRooAbsArg; constRooAbsArg; constRooAbsArg; ConstOpCode enum nameRooAbsArg; constOptimizeTestStatistic(ConstOpCode opcode, bool doAlsoTrackingOpt=true)RooAbsArgvirtual; ContentsOption enum nameRooPrintable; Copy(TObject &named) const overrideTNamedvirtual; copyCache(const RooAbsArg *source, boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:5928,Clear,Clear,5928,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,1,['Clear'],['Clear']
Usability,"hanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector. ◆ Print(). void TSelEventGen::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 486 of file TSelEventGen.cxx. ◆ Process(). Bool_t TSelEventGen::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 326 of file TSelEventGen.cxx. ◆ SetInputList(). void TSelEventGen::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 68 of file TSelEventGen.h. ◆ SetObject(). void TSelEventGen::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 67 of file TSelEventGen.h. ◆ SetOption(). void TSelEventGen::SetOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 66 of file TSelEventGen.h. ◆ SlaveBegin(). void TSelEventGen::SlaveBegin ; (; TTree * ; tree). overridevirtual . The SlaveBegin() function is called after the Begin() function. ; When running with PROOF SlaveBegin() is called on each slave server. The tree argument is deprecated (on PROOF 0 is passed). ; Reimplemented from TSelector.; Definition at line 89 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:17599,simpl,simple,17599,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['simpl'],['simple']
Usability,"hanism. `TCanvas::Highlighted()` is similar; 3094`TCanvas::Picked()`; 3095 ; 3096- when selected object (histogram as a whole) is different from previous; 3097then emit `Picked()` signal; 3098- when selected (highlighted) bin from histogram is different from previous; 3099then emit `Highlighted()` signal; 3100 ; 3101Any user function (or functions) has to be defined; 3102`UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)`.; 3103In example (see below) has name `PrintInfo()`. All parameters of user; 3104function are taken from; 3105 ; 3106 void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); 3107 ; 3108- `pad` is pointer to pad with highlighted histogram; 3109- `obj` is pointer to highlighted histogram; 3110- `x` is highlighted x bin for 1D histogram; 3111- `y` is highlighted y bin for 2D histogram (for 1D histogram not in use); 3112 ; 3113Example how to create a connection from any `TCanvas` object to a user; 3114`UserFunction()` slot (see also `TQObject::Connect()` for additional info); 3115 ; 3116 TQObject::Connect(""TCanvas"", ""Highlighted(TVirtualPad*,TObject*,Int_t,Int_t)"",; 3117 0, 0, ""UserFunction(TVirtualPad*,TObject*,Int_t,Int_t)"");; 3118 ; 3119or use non-static ""simplified"" function; 3120`TCanvas::HighlightConnect(const char *slot)`; 3121 ; 3122 c1->HighlightConnect(""UserFunction(TVirtualPad*,TObject*,Int_t,Int_t)"");; 3123 ; 3124NOTE the signal and slot string must have a form; 3125""(TVirtualPad*,TObject*,Int_t,Int_t)""; 3126 ; 3127 root [0] .x $ROOTSYS/tutorials/hsimple.C; 3128 root [1] hpx->SetHighlight(kTRUE); 3129 root [2] .x hlprint.C; 3130 ; 3131file `hlprint.C`; 3132~~~ {.cpp}; 3133void PrintInfo(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); 3134{; 3135 auto h = (TH1F *)obj;; 3136 if (!h->IsHighlight()) // after highlight disabled; 3137 h->SetTitle(""highlight disable"");; 3138 else; 3139 h->SetTitle(TString::Format(""bin[%03d] (%5.2f) content %g"", x,; 3140 h->GetBinCenter(x), h->GetBinContent(x)));; 3141 pad->Updat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:123630,simpl,simplified,123630,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simplified']
Usability,"hanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor.; Collections; In THashList and THashTable, GetListForObject now returns a pointer to const as modifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:4941,clear,clearly,4941,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['clear'],['clearly']
Usability,"har *buf, int *pLoc, std::ostream &out);  What to do when tab is pressed. ;  ; const char * WorkingDirectory () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:10128,Clear,Clear,10128,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,3,['Clear'],['Clear']
Usability,"har *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:3003,undo,undo,3003,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"har *distribution=nullptr, const char *projectionMode=nullptr, TGraph **lCurvePlot=nullptr, TSpline **logTauXPlot=nullptr, TSpline **logTauYPlot=nullptr);  scan a function wrt tau and determine the minimum ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TUnfoldSys;  TUnfoldSys (const TH2 *hist_A, EHistMap histmap, ERegMode regmode=kRegModeSize, EConstraint constraint=kEConstraintArea);  set up response matrix A, uncorrelated uncertainties of A and regularisation scheme ;  ;  TUnfoldSys (void);  only for use by root streamer or derived classes ;  ;  ~TUnfoldSys (void) override;  ; void AddSysError (const TH2 *sysError, const char *name, EHistMap histmap, ESysErrMode mode);  Specify a correlated systematic uncertainty. ;  ; void GetBackground (TH1 *bgr, const char *bgrSource=nullptr, const Int_t *binMap=nullptr, Int_t includeError=3, Bool_t clearHist=kTRUE) const;  get background into a histogram ;  ; TSortedList * GetBgrSources (void) const;  Get a new list of all background sources. ;  ; Double_t GetChi2Sys (void);  calculate total chi**2 including all systematic errors ;  ; Bool_t GetDeltaSysBackgroundScale (TH1 *delta, const char *source, const Int_t *binMap=nullptr);  correlated one-sigma shifts from background normalisation uncertainty ;  ; Bool_t GetDeltaSysSource (TH1 *hist_delta, const char *source, const Int_t *binMap=nullptr);  correlated one-sigma shifts correspinding to a given systematic uncertainty ;  ; Bool_t GetDeltaSysTau (TH1 *delta, const Int_t *binMap=nullptr);  correlated one-sigma shifts from shifting tau ;  ; void GetEmatrixInput (TH2 *ematrix, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance matrix contribution from input measurement uncertainties ;  ; void GetEmatrixSysBackgroundScale (TH2 *ematrix, const char *source, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance contri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:14732,clear,clearHist,14732,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['clear'],['clearHist']
Usability,"har *envFile, const char *plugin=nullptr) const;  Write in the specified environment config file the plugin records. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPluginManager.html:6429,Clear,Clear,6429,doc/master/classTPluginManager.html,https://root.cern,https://root.cern/doc/master/classTPluginManager.html,1,['Clear'],['Clear']
Usability,"har *name,const char *expression); -; *-* and write your own constructor; -; *-* MyClass::MyClass(const char *name,const char *expression) : TFormula(); -; *-* which has to call the TFormula default constructor and whose implementation; *-* should be similar to the implementation of the normal TFormula constructor; -; *-* This is necessary because the normal TFormula constructor call indirectly; *-* the virtual member functions Analyze, DefaultString, DefaultValue; *-* and DefaultVariable.; -; -. Bool_t CheckOperands(Int_t operation, Int_t& err); Check whether the operand at 'oper-1' is compatible with the operation at 'oper'. Bool_t CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); Check whether the operands at 'leftoper' and 'oper-1' are compatible with the operation at 'oper'. Bool_t StringToNumber(Int_t code); Try to 'demote' a string into an array bytes. If this is not possible,; return false. void Clear(Option_t* option = """"); Resets the objects*-*-; *-* ==================; -; *-* Resets the object to its state before compilation.; -. void ClearFormula(Option_t* option = """"); Resets the objects*-*-; *-* ==================; -; *-* Resets the object to its state before compilation.; -. Int_t Compile(const char* expression = """"); -*-*-*-*-*Compile expression already stored in fTitle; *-* ===========================================; -; *-* Loop on all subexpressions of formula stored in fTitle; -; *-* If you overload this member function, you also HAVE TO; *-* never call the constructor:; -; *-* TFormula::TFormula(const char *name,const char *expression); -; *-* and write your own constructor; -; *-* MyClass::MyClass(const char *name,const char *expression) : TFormula(); -; *-* which has to call the TFormula default constructor and whose implementation; *-* should be similar to the implementation of the normal TFormula constructor; -; *-* This is necessary because the normal TFormula constructor call indirectly; *-* the virtual member functions A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:21542,Clear,Clear,21542,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['Clear'],['Clear']
Usability,"har *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual void UpdateFormulaLeaves ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualTreePlayer.html:4646,Clear,Clear,4646,doc/master/classTVirtualTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html,1,['Clear'],['Clear']
Usability,"har *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TWebCanvasTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TWebCanvasTimer(). TWebCanvasTimer::TWebCanvasTimer ; (; TWebCanvas & ; canv). inline . Definition at line 73 of file TWebCanvas.cxx. Member Function Documentation. ◆ IsSlow(). Bool_t TWebCanvasTimer::IsSlow ; (; ); const. inline . Definition at line 75 of file TWebCanvas.cxx. ◆ SetSlow(). void TWebCanvasTimer::SetSlow ; (; Bool_t ; slow = kTRUE). inline . Definition at line 76 of file TWebCanvas.cxx. ◆ Timeout(). void TWebCanvasTimer::Timeout ; (; ). inlineoverridevirtual . used to send control messages to clients ; Reimplemented from TTimer.; Definition at line 84 of file TWebCanvas.cxx. Member Data Documentation. ◆ fCanv. TWebCanvas& TWebCanvasTimer::fCanv. private . Definition at line 68 of file TWebCanvas.cxx. ◆ fProcessing. Bool_t TWebCanvasTimer::fProcessing {kFALSE}. private . Definition at line 69 of file TWebCanvas.cxx. ◆ fSlow. Bool_t TWebCanvasTimer::fSlow {kFALSE}. private . Definition at line 70 of file TWebCanvas.cxx. ◆ fSlowCnt. Int_t TWebCanvasTimer::fSlowCnt {0}. private . Definition at line 71 of file TWebCanvas.cxx. gui/webgui6/src/TWebCanvas.cxx. TWebCanvasTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvasTimer.html:18512,Guid,Guide,18512,doc/master/classTWebCanvasTimer.html,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html,1,['Guid'],['Guide']
Usability,"har *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:25692,Clear,Clear,25692,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,15,['Clear'],['Clear']
Usability,"har * ; path). overridevirtual . Check if the file defined by 'path' is ready to be used. ; Reimplemented from TFileStager.; Definition at line 50 of file TNetFileStager.cxx. ◆ IsValid(). Bool_t TNetFileStager::IsValid ; (; ); const. inlineoverridevirtual . Reimplemented from TFileStager.; Definition at line 44 of file TNetFileStager.h. ◆ Locate(). Int_t TNetFileStager::Locate ; (; const char * ; path, . TString & ; endpath . ). overridevirtual . Get actual end-point url for a path Returns 0 in case of success and 1 if any error occured. ; Reimplemented from TFileStager.; Definition at line 101 of file TNetFileStager.cxx. ◆ Matches(). Bool_t TNetFileStager::Matches ; (; const char * ; s). overridevirtual . Returns kTRUE if stager 's' is compatible with current stager. ; Avoids multiple instantiations of the potentially the same TNetSystem. ; Reimplemented from TFileStager.; Definition at line 125 of file TNetFileStager.cxx. ◆ Print(). void TNetFileStager::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print basic info about this stager. ; Reimplemented from TNamed.; Definition at line 92 of file TNetFileStager.cxx. ◆ Streamer(). void TNetFileStager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileStager. ◆ StreamerNVirtual(). void TNetFileStager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TNetFileStager.h. Member Data Documentation. ◆ fPrefix. TString TNetFileStager::fPrefix. private . Definition at line 31 of file TNetFileStager.h. ◆ fSystem. TNetSystem* TNetFileStager::fSystem. private . Definition at line 32 of file TNetFileStager.h. Libraries for TNetFileStager:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TNetFileStager.h; net/net/src/TNetFileStager.cxx. TNetFileStager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:16273,Guid,Guide,16273,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['Guid'],['Guide']
Usability,"har * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object befor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:4330,undo,undo,4330,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"har dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; R; ROOT::Internal::SHA256::sha256_updatevoid sha256_update(sha256_t *p, const unsigned char *data, size_t size)Definition RSha256.hxx:224; ROOT::Internal::SHA256::sha256_transformstatic void sha256_transform(uint32_t *state, const uint32_t *data)Definition RSha256.hxx:158; ROOT::Internal::SHA256::sha256_write_byte_blockstatic void sha256_write_byte_block(sha256_t *p)Definition RSha256.hxx:214; ROOT::Internal::SHA256::Kstatic const uint32_t K[64]Definition RSha256.hxx:148; ROOT::Internal::SHA256::sha256_finalvoid sha256_final(sha256_t *p, unsigned char *digest)Definition RSha256.hxx:238; ROOT::Internal::SHA256::sha256_initvoid sha256_init(sha256_t *p)Definition RSha256.hxx:75; ROOT::Internal::SHA256::sha256_hashvoid sha256_hash(unsigned char *buf, const unsigned char *data, size_t size); ROOT::Internal::Sha256void Sha256(const unsigned char *data, int len, ULong64_t *fDigest)Definition RSha256.hxx:267; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::SHA256::sha256_tDefinition RSha256.hxx:60; ROOT::Internal::SHA256::sha256_t::bufferunsigned char buffer[64]Definition RSha256.hxx:63; ROOT::Internal::SHA256::sha256_t::stateuint32_t state[8]Definition RSha256.hxx:61; ROOT::Internal::SHA256::sha256_t::countuint64_t countDefinition RSha256.hxx:62. corefoundationresROOTRSha256.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RSha256_8hxx_source.html:11669,Guid,Guide,11669,doc/v632/RSha256_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html,1,['Guid'],['Guide']
Usability,"har* method) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1C.html:1732,Clear,Clear,1732,root/html528/TH1C.html,https://root.cern,https://root.cern/root/html528/TH1C.html,3,['Clear'],['Clear']
Usability,"har* method) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2C.html:2074,Clear,Clear,2074,root/html528/TH2C.html,https://root.cern,https://root.cern/root/html528/TH2C.html,3,['Clear'],['Clear']
Usability,"har* method) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3C.html:1944,Clear,Clear,1944,root/html528/TH3C.html,https://root.cern,https://root.cern/root/html528/TH3C.html,3,['Clear'],['Clear']
Usability,"har* name = 0, const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = kSunkenFrame|kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual~TRootEmbeddedCanvas(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCanvas::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdoptCanvas(TCanvas* c); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGCanvas::ClearViewPort(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootEmbeddedCanvas.html:1506,Clear,ClearViewPort,1506,root/html528/TRootEmbeddedCanvas.html,https://root.cern,https://root.cern/root/html528/TRootEmbeddedCanvas.html,4,['Clear'],['ClearViewPort']
Usability,"har* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* vare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookTree.html:3693,Clear,Clear,3693,root/html602/THbookTree.html,https://root.cern,https://root.cern/root/html602/THbookTree.html,2,['Clear'],['Clear']
Usability,"har* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual voidTGTextView::Clear(Option_t* = """"); virtual voidTGTextView::Clicked(const char* word)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Bool_tTGTextView::Copy(); basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTGTextView::DataChanged()SIGNAL ; virtual voidTGTextView::DataDropped(const char* fname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:2184,Clear,Clear,2184,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,1,['Clear'],['Clear']
Usability,"har* title = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE); virtual~TNetXNGFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFile.html:1516,Clear,Clear,1516,root/html534/TNetXNGFile.html,https://root.cern,https://root.cern/root/html534/TNetXNGFile.html,1,['Clear'],['Clear']
Usability,"har*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; TVirtualGLPainter&TVirtualGLPainter::operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. virtual voidDeInitGL() const; voidDrawDefaultPlot() const; voidDrawMaplePlot() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidDrawToSelectionBuffer() const; Bool_tHasSections() const; virtual voidInitGL() const; voidSetSurfaceColor() const. Data Members; public:. enum ETF3Style { kDefault; kMaple0; kMaple1; kMaple2; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLTF3Painter.html:1395,Clear,ClearBuffers,1395,root/html528/TGLTF3Painter.html,https://root.cern,https://root.cern/root/html528/TGLTF3Painter.html,1,['Clear'],['ClearBuffers']
Usability,"har_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerLite.html:4620,Feedback,Feedback,4620,root/html528/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html528/TProofPlayerLite.html,4,['Feedback'],['Feedback']
Usability,"har_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerSuperMaster.html:5155,Feedback,Feedback,5155,root/html528/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html528/TProofPlayerSuperMaster.html,4,['Feedback'],['Feedback']
Usability,"hared_ptr< RFileDialog > Embed(const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args)Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the c...Definition RFileDialog.cxx:437; ROOT::RFileDialog::SetCallbackvoid SetCallback(RFileDialogCallback_t callback)Assign callback.Definition RFileDialog.cxx:101; ROOT::RFileDialog::fBrowsableRBrowserData fBrowsable! central browsing elementDefinition RFileDialog.hxx:55; ROOT::RFileDialog::fTitlestd::string fTitle! title, when not specified default will be usedDefinition RFileDialog.hxx:54; ROOT::RFileDialog::IsCompletedbool IsCompleted() constDefinition RFileDialog.hxx:111; ROOT::RFileDialog::SendInitMsgvoid SendInitMsg(unsigned connid)Sends initial message to the client.Definition RFileDialog.cxx:229; ROOT::RFileDialog::GetTypeconst EDialogTypes & GetType() constDefinition RFileDialog.hxx:86; ROOT::RFileDialog::SetWorkingPathvoid SetWorkingPath(const std::string &)Change current working path of file dialog If dialog already shown, change will be immediately applie...Definition RFileDialog.cxx:337; ROOT::RFileDialog::~RFileDialogvirtual ~RFileDialog()destructorDefinition RFileDialog.cxx:90; ROOT::RFileDialog::fSelectstd::string fSelect! result of file selectionDefinition RFileDialog.hxx:63; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::MacOSX::DetailsDefinition TMacOSXSystem.h:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RFileDialogCallback_tstd::function< void(const std::string &)> RFileDialogCallback_tfunction signature for file dialog call-backs argument is selected file nameDefinition RFileDialog.hxx:36. guibrowserv7incROOTRFileDialog.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RFileDialog_8hxx_source.html:11741,Guid,Guide,11741,doc/v632/RFileDialog_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html,1,['Guid'],['Guide']
Usability,"hart; data.plotOn(frame4, DrawOption=""B"", DataError=None, XErrorSize=0, FillColor=""kGray""); ; # Function plotting styles; # -----------------------------------------------; ; # Change line color to red; gauss.plotOn(frame1, LineColor=""r""); ; # Change line style to dashed; gauss.plotOn(frame2, LineStyle=""--""); ; # Filled shapes in green color; gauss.plotOn(frame3, MoveToBack=True, DrawOption=""F"", FillColor=""kOrange""); ; #; gauss.plotOn(frame4, Range=(-8, 3), LineColor=""m""); ; c = ROOT.TCanvas(""rf107_plotstyles"", ""rf107_plotstyles"", 800, 800); c.Divide(2, 2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.6); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.6); frame3.Draw(); c.cd(4); ROOT.gPad.SetLeftMargin(0.15); frame4.GetYaxis().SetTitleOffset(1.6); frame4.Draw(); ; c.SaveAs(""rf107_plotstyles.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(gauss) only plotting range [-8,3], curve is normalized to data in given range; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'plotRange' created with bounds [-8,3]; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf107_plotstyles.py. tutorialsroofitrf107_plotstyles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf107__plotstyles_8py.html:3499,Guid,Guide,3499,doc/master/rf107__plotstyles_8py.html,https://root.cern,https://root.cern/doc/master/rf107__plotstyles_8py.html,1,['Guid'],['Guide']
Usability,"harts. ROOT; » HIST; » HIST; » THnT<unsigned int>. class THnT<unsigned int>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<unsigned int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_int_.html:1020,Clear,Clear,1020,root/html602/THnT_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_int_.html,2,['Clear'],['Clear']
Usability,"has been set and the Tree is written to a file, it is not necessary to specify the option again when reading, unless you want to set the opposite mode. . Reimplemented from TBranch.; Definition at line 517 of file TBranchObject.cxx. ◆ SetBasketSize(). void TBranchObject::SetBasketSize ; (; Int_t ; buffsize). overridevirtual . Reset basket size for all subbranches of this branch. ; Reimplemented from TBranch.; Definition at line 531 of file TBranchObject.cxx. ◆ SetupAddresses(). void TBranchObject::SetupAddresses ; (; ). overridevirtual . – If the branch address is not set, we set all addresses starting with the top level parent branch. ; This is required to be done in order for GetOffset to be correct and for GetEntry to run. ; Reimplemented from TBranch.; Definition at line 594 of file TBranchObject.cxx. ◆ Streamer(). void TBranchObject::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TBranchObject. ; Reimplemented from TBranch.; Definition at line 545 of file TBranchObject.cxx. ◆ StreamerNVirtual(). void TBranchObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TBranchObject.h. ◆ UpdateAddress(). void TBranchObject::UpdateAddress ; (; ). overridevirtual . Update branch addresses if a new object was created. ; Reimplemented from TBranch.; Definition at line 615 of file TBranchObject.cxx. Member Data Documentation. ◆ fClassName. TString TBranchObject::fClassName. protected . Class name of referenced object. ; Definition at line 42 of file TBranchObject.h. ◆ fOldObject. TObject* TBranchObject::fOldObject. protected . !Pointer to old object ; Definition at line 43 of file TBranchObject.h. Libraries for TBranchObject:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchObject.h; tree/tree/src/TBranchObject.cxx. TBranchObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:36817,Guid,Guide,36817,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['Guid'],['Guide']
Usability,"hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddBefore(const TObject* before, TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function.; If and only if 'before' is in the same bucket as obj, obj is added; in front of 'before' within the bucket's list. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name. Uses the hash value returned by the; TString::Hash() after converting name to a TString. TObject * FindObject(const TObject* obj) const; Find object using its hash value (returned by its Hash() member). TList * GetListForObject(const char* name) const; Return the TList corresponding to object's name based hash value.; One can iter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:9846,Clear,Clear,9846,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,3,['Clear'],['Clear']
Usability,"hat it has one daughter. Of course, the gas has some container also, but let us keeps it like that for the sake of simplicity. Since we did not supply the third argument, the wire will be positioned with an identity transformation inside the chamber.; Overlapping Volumes; Positioning volumes that does not overlap their neighbors nor extrude their container is sometimes quite strong constraint. Having a limited set of geometric shapes might force sometimes overlaps. Since overlapping is contradictory to containment, a point belonging to an overlapping region will naturally belong to all overlapping partners. The answer provided by the modeller to ""Where am I?"" is no longer deterministic if there is no priority assigned.; There are two ways out provided by the modeller in such cases and we will illustrate them by examples. Suppose we have 2 crossing tubes that we have to describe. Such a structure cannot be decomposed in a containment schema. This is a typical example of simple structure that can be handled by using composite shapes. What we have to do is to define as shapes the inner and outer parts of the tubes (tubes having Rmin=0,Rmax=inner/outer radius), then to make a composite:; C = (Tub1out+Tub2out)-(Tub1in+Tub2in); On the other hand, if we have an EM calorimeter having a honeycomb structure, Boolean combinations do not help anymore. Here the problem is that we usually have a very large number of cells that are naturally belonging to the same container. This result in a very flat and slow structure for that particular container, which we would very much want to avoid by introducing additional levels in depth. We can describe the basic cell as a hexahedron that we can represent by using a polygon primitive shape. Instead of putting one by one all cells in the same container, we can define rows of such elements, fitting in box-shaped containers. Then we can put row-beside-row inside the container, making life much easier for its navigation algorithms. The problem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:37632,simpl,simple,37632,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"hat the; expression eprim2 is very close to 0 (rounding problems) or 0.; - The algorithm is modified/protected for the case; when a TProfile2D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile2D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. void LabelsDeflate(Option_t* axis = ""X""); Reduce the number of bins for this axis to the number of bins having a label. void LabelsInflate(Option_t* axis = ""X""); Double the number of bins for axis.; Refill histogram; This function is called by TAxis::FindBin(const char *label). void LabelsOption(Option_t* option = ""h"", Option_t* axis = ""X""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the axes,; compute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:37682,simpl,simply,37682,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,6,['simpl'],['simply']
Usability,"hat will soon be pointing to this TDirectory object.Definition TDirectory.cxx:1385; TDirectory::WriteDirHeadervirtual void WriteDirHeader()Definition TDirectory.h:302; TDirectory::WriteObjectstd::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)Write an object with proper type checking.Definition TDirectory.h:282; TDirectory::SizeofInt_t Sizeof() const overrideReturn size of the TNamed part of the TObject.Definition TDirectory.h:263; TDirectory::TDirectoryTDirectory()Directory default constructor.Definition TDirectory.cxx:53; TDirectory::DecodeNameCyclestatic void DecodeNameCycle(const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0)Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"".Definition TDirectory.cxx:1301; TDirectory::Cdstatic Bool_t Cd(const char *path)Change current directory to ""path"".Definition TDirectory.cxx:603; TDirectory::Clearvoid Clear(Option_t *option="""") overrideDelete all objects from a Directory list.Definition TDirectory.cxx:634; TDirectory::WriteTObjectvirtual Int_t WriteTObject(const TObject *obj, const char *name=nullptr, Option_t *="""", Int_t=0)Write an object with proper type checking.Definition TDirectory.cxx:1400; TDirectory::Addvirtual void Add(TObject *obj, Bool_t replace=kFALSE)Definition TDirectory.h:183; TDirectory::WriteObjectAnyvirtual Int_t WriteObjectAny(const void *, const char *, const char *, Option_t *="""", Int_t=0)Definition TDirectory.h:300; TDirectory::GetFilevirtual TFile * GetFile() constDefinition TDirectory.h:220; TDirectory::FindObjectTObject * FindObject(const char *name) const overrideFind object by name in the list of memory objects.Definition TDirectory.cxx:784; TDirectory::Buildvirtual void Build(TFile *motherFile=nullptr, TDirectory *motherDir=nullptr)Definition TDirectory.h:186; TDirectory::Printvoid Print(Option_t *option="""") const overridePrint all objects in the directory.Definition TDirectory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:23867,Clear,Clearvoid,23867,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"he 1st Leaf named name in any Branch of this Tree or any branch in the list of fri...Definition TTree.cxx:6098; TTree::fTotBytesLong64_t fTotBytesTotal number of bytes in all branches before compression.Definition TTree.h:86; TTree::FlushBasketsvirtual Int_t FlushBaskets(bool create_cluster=true) constWrite to disk all the basket that have not yet been individually written and create an event cluster ...Definition TTree.cxx:5129; TTree::GetDefaultEntryOffsetLenInt_t GetDefaultEntryOffsetLen() constDefinition TTree.h:459; TTree::fMaxClusterRangeInt_t fMaxClusterRange! Memory allocated for the cluster range.Definition TTree.h:96; TTree::Showvirtual void Show(Long64_t entry=-1, Int_t lenmax=20)Print values of all active leaves for entry.Definition TTree.cxx:9385; TTree::fEventListTEventList * fEventList! Pointer to event selection list (if one)Definition TTree.h:125; TTree::GetAutoSavevirtual Long64_t GetAutoSave() constDefinition TTree.h:448; TTree::StopCacheLearningPhasevirtual Int_t StopCacheLearningPhase()Stop the cache learning phase.Definition TTree.cxx:9474; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::fSortedBranchesstd::vector< std::pair< Long64_t, TBranch * > > fSortedBranches! Branches to be processed in parallel when IMT is on, sorted by average task timeDefinition TTree.h:144; TTree::SetCircularvirtual void SetCircular(Long64_t maxEntries)Enable/Disable circularity for this tree.Definition TTree.cxx:8892; TTree::GetEstimatevirtual Long64_t GetEstimate() constDefinition TTree.h:507; TTree::GetDebugMaxLong64_t GetDebugMax() constDefinition TTree.h:460; TTree::fSavedBytesLong64_t fSavedBytesNumber of autosaved bytes.Definition TTree.h:88; TTree::AddBranchToCachevirtual Int_t AddBranchToCache(const char *bname, bool subbranches=false)Add branch with name bname to the Tree cache.Definition TTree.cxx:1059; TTree::GetMedianClusterSizeLong64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:56085,learn,learning,56085,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['learn'],['learning']
Usability,"he Bayesian procedure. The calculator computes given the model the posterior distribution and estimates the credible interval from the given function. ; Definition at line 37 of file BayesianCalculator.h. Public Member Functions;  BayesianCalculator ();  constructor ;  ;  BayesianCalculator (RooAbsData &data, ModelConfig &model);  Constructor from a data set and a ModelConfig model pdf, poi and nuisances will be taken from the ModelConfig. ;  ;  BayesianCalculator (RooAbsData &data, RooAbsPdf &pdf, const RooArgSet &POI, RooAbsPdf &priorPdf, const RooArgSet *nuisanceParameters=nullptr);  Constructor from data set, model pdf, parameter of interests and prior pdf If nuisance parameters are given they will be integrated according either to the prior or their constraint term included in the model. ;  ;  ~BayesianCalculator () override;  destructor ;  ; double ConfidenceLevel () const override;  Get the Confidence level for the test. ;  ; void ForceNuisancePdf (RooAbsPdf &pdf);  ; SimpleInterval * GetInterval () const override;  compute the interval. ;  ; double GetMode () const;  return the mode (most probable value of the posterior function) ;  ; RooAbsReal * GetPosteriorFunction () const;  return posterior function (object is managed by the BayesianCalculator class) ;  ; TH1 * GetPosteriorHistogram () const;  return the approximate posterior as histogram (TH1 object). Note the object is managed by the BayesianCalculator class ;  ; RooAbsPdf * GetPosteriorPdf () const;  return posterior pdf (object is managed by the user) ;  ; RooPlot * GetPosteriorPlot (bool norm=false, double precision=0.01) const;  get the plot with option to get it normalized ;  ; TClass * IsA () const override;  ; void SetBrfPrecision (double precision);  set the precision of the Root Finder ;  ; virtual void SetConditionalObservables (const RooArgSet &set);  set the conditional observables which will be used when creating the NLL so the pdf's will not be normalized on the conditional observables wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:3820,Simpl,SimpleInterval,3820,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Simpl'],['SimpleInterval']
Usability,"he Brent method to minimize one-dimensional function. An interval containing the function minimum must be provided. Here is an example where we define the function to minimize as a lambda function (requires C++11). The function to minimize must be given to the class implementing the algorithm as a ROOT::Math::IBaseFunctionOneDim object.; ROOT::Math::Functor1D func( [](double x){ return 1 + -4*x + 1*x*x; } );. ROOT::Math::BrentMinimizer1D bm;; bm.SetFunction(func, -10,10);; bm.Minimize(10,0,0);; cout << ""Minimum: f("" << bm.XMinimum() << "") = "" <<bm.FValMinimum() << endl;; Note that when setting the function to minimize, one needs to provide the interval range to find the minimum. In the Minimize call, the maximum number of function calls, the relative and absolute tolerance must be provided.; 13.10.1.2 ROOT::Math::GSLMInimizer1D; This class wraps two different methods from the GSL. The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. The algorithm can be chosen as a different enumeration in the constructor: * ROOT::Math::Minim1D::kBRENT for the Brent algorithm (default) * ROOT::Math::Minim1D::kGOLDENSECTION for the golden section algorithm; // this makes class with the default Brent algorithm; ROOT::Math::GSLMinimizer1D minBrent;; // this make the class with the Golden Section algorithm; ROOT::Math::GSLMinimizer1D minGold(ROOT::Math::Minim1D::kGOLDENSECTION);; The interface to set the function and to minimize is the same as in the case of the BrentMinimizer1D.; 13.10.1.3 Using the TF1 class; It is possible to perform the one-dimensional minimization/maximization of a function by using directly the function class in ROOT, TF1 of the Hist library. The minmization is implemented in TF1 using the BrentMInimizer1D and available with the class member functions * TF1::GetMinimum/TF1::GetMaximum to find the function ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:715971,simpl,simplest,715971,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"he Double_t argument det is supplied, the matrix determinant is calculated. A.InvertFast(&det); TMatrixX; like Invert but for matrices i =(6x6)a faster but less accurate Cramer algorithm is used. A.Rank1Update(v,alpha); TMatrixX; Perform with vector v a rank 1 operation on the matrix: \(A = A + \alpha.\nu.\nu^T\). A.RandomizePD(alpha,beta,seed)`; TMatrixX; \(A_{ij} = (\beta-\alpha)\bigcup(0,1)+\alpha\) a random symmetric positive-definite matrix is generated with elements uniformly distributed between \(\alpha\) and \(\beta\). Output TMatrixX indicates that the returned matrix is of the same type as A, being TMatrixD, TMatrixDSym or TMatrixDSparse. Next table shows miscellaneous operations for TMatrixD. Format; Output; Description. A.Rank1Update(v1,v2,alpha); TMatrixD; Perform with vector v1 and v2, a rank 1 operation on the matrix: \(A = A + \alpha.\nu.\nu2^T\). 14.5 Matrix Views; Another way to access matrix elements is through the matrix-view classes, TMatrixDRow, TMatrixDColumn, TMatrixDDiag and TMatrixDSub (each has also a const version which is obtained by simply appending const to the class name). These classes create a reference to the underlying matrix, so no memory management is involved. The next table shows how the classes access different parts of the matrix:. class; view. TMatrixDRow const(X,i) TMatrixDRow(X,i); \[ \left(\begin{array}{ccccc}; x_{00} & & & & x_{0n} \\; & & & & \\; x_{i0} & ... & x_{ij} & ... & x_{in} \\; & & & & \\; x_{n0} & & & & x_{nn}; \end{array}\right)\]. TMatrixDColumn const(X,j) TMatrixDColumn(X,j); \[ \left(\begin{array}{ccccc}; x_{00} & & x_{0j} & & x_{0n} \\; & & ... & & \\; & & x_{ij} & & \\; & & ... & & \\; x_{n0} & & x_{nj} & & x_{nn}; \end{array}\right)\]. TMatrixDDiag const(X) TMatrixDDiag(X); \[ \left(\begin{array}{ccccc}; x_{00} & & & & x_{0n} \\; & ... & & & \\; & & ... & & \\; & & & ... & \\; x_{n0} & & & & x_{nn}; \end{array}\right)\]. TMatrixDSub const(X,i,l,j,k) TMatrixDSub(X,i,l,j,k); \[ \left(\begin{array}{ccccc}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:783968,simpl,simply,783968,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"he RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:7869,simpl,simple,7869,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['simpl'],['simple']
Usability,"he STOP button; 114from the bottom-left; 115You can toggle recording of the current command in the history file by; 116checking the Rec button from the top-right; 117 ; 118### Context menus; 119 ; 120 You can activate context menus by right-clicking on items or inside the; 121right panel.; 122 ; 123Context menus for mapped items from the left tree-type list :; 124 The items from the left that are provided with context menus are tree and; 125branch items. You can directly activate the *MENU* marked methods of TTree; 126from this menu.; 127 ; 128Context menu for the right panel:; 129 ; 130 A general context menu is activated if the user right-clicks the right panel.; 131 ; 132 Commands are :; 133 - EmptyAll : clears the content of all expressions;; 134 - ExecuteCommand : execute a ROOT command;; 135 - MakeSelector : equivalent of TTree::MakeSelector();; 136 - NewExpression : add an expression item in the right panel;; 137 - Process : equivalent of TTree::Process();; 138 - SaveSource : save the current session as a C++ macro;; 139 - SetScanFileName : define a name for the file where TTree::Scan command; 140 is redirected when the `<Scan>` button is checked;; 141 - SetTreeName : open a new tree with this name in the viewer;; 142 ; 143 A specific context menu is activated if expressions/leaves are right-clicked.; 144 ; 145 Commands are :; 146 - Draw : draw a histogram for this item;; 147 - EditExpression : pops-up the expression editor;; 148 - Empty : empty the name and alias of this item;; 149 - RemoveItem : removes clicked item from the list;; 150 - Scan : scan this expression;; 151 - SetExpression : edit name and alias for this item by hand;; 152 ; 153Starting the viewer; 154 ; 155 1. From the TBrowser: Select a tree in the TBrowser, then call the; 156 StartViewer() method from its context menu (right-click on the tree).; 157 2. From the command line: Start a ROOT session in the directory where you have; 158 your tree. You will need first to load the library for TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:6927,clear,clears,6927,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['clear'],['clears']
Usability,"he Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14; TClassEdit::Initvoid Init(TClassEdit::TInterpreterLookupHelper *helper)Definition TClassEdit.cxx:171; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorPhilippe Canal from original h1analysis.C by Rene Brun ; Definition in file h1analysisProxy.C. tutorialstreeh1analysisProxy.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8C.html:15849,Guid,Guide,15849,doc/master/h1analysisProxy_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html,1,['Guid'],['Guide']
Usability,"he axis, to set the min/max in z.; 3.8.2.14 The SPEC Option; The “SPEC” option offers a large set of options/attributes to visualize 2D histograms thanks to “operators” following the “SPEC” keyword. For example, to draw the 2-D histogram h2 using all default attributes except the viewing angles, one can do:; h2->Draw(""SPEC a(30,30,0)"");; The operators’ names are case insensitive (i.e. one can use “a” or “A”) and their parameters are separated by coma “,”. Operators can be put in any order in the option and must be separated by a space "" "". No space characters should be put in an operator. All the available operators are described below.; The way how a 2D histogram will be painted is controlled by two parameters: the “Display modes groups” and the “Display Modes”. “Display modes groups” can take the following values:. 0 = Simple - simple display modes using one color only; 1 = Light - the shading is carried out according to the position of the fictive light source; 2 = Height - the shading is carried out according to the channel contents; 3 = LightHeight - combination of two previous shading algorithms (one can control the weight between both algorithms). “Display modes” can take the following values:. 1 = Points; 2 = Grid; 3 = Contours; 4 = Bars; 5 = LinesX; 6 = LinesY; 7 = BarsX; 8 = BarsY; 9 = Needles; 10 = Surface; 11 = Triangles. These parameters can be set by using the “dm” operator in the option.; h2->Draw(""SPEC dm(1,2)"");; The above example draws the histogram using the “Light Display mode group” and the “Grid Display mode”. The following tables summarize all the possible combinations of both groups:. Points; Grid; Contours; Bars; LinesX; LinesY. Simple; x; x; x; x; x; x. Light; x; x. x; x. Height; x; x; x; x; x; x. LightHeight; x; x. x; x. BarsX; BarsY; Needles; Surface; Triangles. Simple; x; x; x. x. Light. x; x. Height; x; x. x; x. LightHeight. x; x. The “Pen Attributes” can be changed using pa(color,style,width). Next example sets line color to 2, line ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:101657,Simpl,Simple,101657,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"he bin. ; Definition at line 297 of file TH2Poly.cxx. ◆ AddBinToPartition(). void TH2Poly::AddBinToPartition ; (; TH2PolyBin * ; bin). protected . Adds the input bin into the partition cell matrix. ; This method is called in AddBin() and ChangePartition(). ; Definition at line 443 of file TH2Poly.cxx. ◆ ChangePartition(). void TH2Poly::ChangePartition ; (; Int_t ; n, . Int_t ; m . ). Changes the number of partition cells in the histogram. ; Deletes the old partition and constructs a new one. ; Definition at line 515 of file TH2Poly.cxx. ◆ Class(). static TClass * TH2Poly::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH2Poly::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH2Poly::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TH2Poly.h. ◆ ClearBinContents(). void TH2Poly::ClearBinContents ; (; ). Clears the contents of all bins in the histogram. ; Definition at line 566 of file TH2Poly.cxx. ◆ Clone(). TObject * TH2Poly::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TH1.; Definition at line 554 of file TH2Poly.cxx. ◆ ComputeIntegral(). Double_t TH2Poly::ComputeIntegral ; (; Bool_t ; ). overridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH1.; Definition at line 1728 of file TH2Poly.cxx. ◆ Copy(). void TH2Poly::Copy ; (; TObject & ; newth2p); const. overridevirtual . Copy function for TH2Poly. ; Reimplemented from TH2.; Definition at line 212 of file TH2Poly.cxx. ◆ CreateBin(). TH2PolyBin * TH2Poly::CreateBin ; (; TObject * ; poly). virtual . Create appropriate histogram bin. ; e.g. TH2Poly creates TH2PolyBin, TProfile2Poly creates TProfile2PolyBin This is done so that TH2Poly::AddBin does not have to be duplicated, but only create needs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:69379,Clear,Clears,69379,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['Clear'],['Clears']
Usability,"he cache ;  ; Long64_t fEntryMax {1};  ! last entry in the cache ;  ; Long64_t fEntryMin {0};  ! first entry in the cache ;  ; Long64_t fEntryNext {-1};  ! next entry number where cache must be filled ;  ; Int_t fFillTimes {0};  ! how many times we can fill the current buffer ;  ; bool fFirstBuffer {true};  ! true if first buffer is used for prefetching ;  ; Long64_t fFirstEntry {-1};  ! save the value of the first entry ;  ; Long64_t fFirstMiss {-1};  ! set to the event # of the first miss. ;  ; bool fFirstTime {true};  ! save the fact that we processes the first entry ;  ; bool fIsLearning {true};  ! true if cache is in learning mode ;  ; bool fIsManual {false};  ! true if cache is StopLearningPhase was used ;  ; Long64_t fLastMiss {-1};  ! set to the event # of the last miss. ;  ; bool fLearnPrefilling {false};  ! true if we are in the process of executing LearnPrefill ;  ; std::unique_ptr< MissCache > fMissCache;  ! Cache contents for misses ;  ; Int_t fNbranches {0};  ! Number of branches in the cache ;  ; Long64_t fNextClusterStart {-1};  ! End+1 of the cluster(s) where the current content was picked out ;  ; Int_t fNMissReadMiss {0};  Number of blocks read and not found in either cache. ;  ; Int_t fNMissReadOk {0};  Number of blocks read, not found in the primary cache, and found in the secondary cache. ;  ; Int_t fNMissReadPref {0};  Number of blocks read into the secondary (""miss"") cache. ;  ; Int_t fNReadMiss {0};  Number of blocks read and not found in the cache. ;  ; Int_t fNReadOk {0};  Number of blocks read and found in the cache. ;  ; Int_t fNReadPref {0};  Number of blocks that were prefetched. ;  ; bool fOneTime {false};  ! used in the learning phase ;  ; bool fOptimizeMisses {false};  ! true if we should optimize cache misses. ;  ; EPrefillType fPrefillType;  Whether a pre-filling is enabled (and if applicable which type) ;  ; bool fReadDirectionSet {false};  ! read direction established ;  ; bool fReverseRead {false};  ! reading in reverse mode ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:28616,Learn,LearnPrefill,28616,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,4,['Learn'],['LearnPrefill']
Usability,"he cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:19145,Learn,Learn,19145,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['Learn'],['Learn']
Usability,"he cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:21011,Learn,Learn,21011,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['Learn'],['Learn']
Usability,"he cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. TTree * GetOwner() const; return the owner of this cache. TTree * GetTree() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCache.html:21853,Learn,Learn,21853,root/html532/TTreeCache.html,https://root.cern,https://root.cern/root/html532/TTreeCache.html,1,['Learn'],['Learn']
Usability,"he clip current to see the effect.; 9.13.2.6 Manipulators; Manipulators are GUI ‘widgets’ or controls attached to a 3D object in the viewer, allowing a direct manipulation of the object’s geometry. There are three manipulators for the three basic geometries transformations. In each case, the manipulator consists of three components, one for each local axis of the object, shown in standard colors: red (X), green (Y) and blue (Z). GL Viewer object manipulators. Activate the manipulator by moving the mouse over one of these components (which turns yellow to indicate active state). Click with left mouse and drag this active component to perform the manipulation. Toggle between the manipulator types using the ‘x’, ‘c’, ‘v’ keys while the mouse cursor is above the manipulator. Note: Manipulators cannot be controlled via the API at present.; 9.13.2.7 Guides; Guides are visual aids drawn into the viewer world. Controls for these are under the “Guides” tab:; Viewer Controls Pane Guides Tab; Axes show the world (global) frame coordinatedirections: X (red), Y (green) and Z (blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbitrary position. Enable / disable the drawing with ‘Show’ checkbox. Enter X/Y/Z position in the edit boxes to set pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:396736,Guid,Guides,396736,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guides']
Usability,"he constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:14384,learn,learning,14384,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"he current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:22051,learn,learning,22051,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['learn'],['learning']
Usability,"he deletion ot update the list itself.; 1107 ; 1108 static TObject harmless;; 1109 TObjLink *cursor = files->FirstLink();; 1110 while (cursor) {; 1111 Content *dir = static_cast<Content*>( cursor->GetObject() );; 1112 if (dir) {; 1113 // In order for the iterator to stay valid, we must; 1114 // prevent the removal of the object (dir) from the list; 1115 // (which is done in TFile::Close). We can also can not; 1116 // just move to the next iterator since the Close might; 1117 // also (indirectly) remove that file.; 1118 // So we SetObject to a harmless value, so that 'dir'; 1119 // is not seen as part of the list.; 1120 // We will later, remove all the object (see files->Clear(); 1121 cursor->SetObject(&harmless); // this must not be zero otherwise things go wrong.; 1122 // See related comment at the files->Clear(""nodelete"");; 1123 dir->Close(""nodelete"");; 1124 // Put it back; 1125 cursor->SetObject(dir);; 1126 }; 1127 cursor = cursor->Next();; 1128 };; 1129 // Now were done, clear the list but do not delete the objects as; 1130 // they have been moved to the list of closed objects and must be; 1131 // deleted from there in order to avoid a double delete from a; 1132 // use objects (on the interpreter stack).; 1133 files->Clear(""nodelete"");; 1134 }; 1135 ; 1136 static void R__ListSlowDeleteContent(TList *files); 1137 {; 1138 // Routine to delete the content of list of files using the 'slow' techniques; 1139 ; 1140 static TObject harmless;; 1141 TObjLink *cursor = files->FirstLink();; 1142 while (cursor) {; 1143 TDirectory *dir = dynamic_cast<TDirectory*>( cursor->GetObject() );; 1144 if (dir) {; 1145 // In order for the iterator to stay valid, we must; 1146 // prevent the removal of the object (dir) from the list; 1147 // (which is done in TFile::Close). We can also can not; 1148 // just move to the next iterator since the Close might; 1149 // also (indirectly) remove that file.; 1150 // So we SetObject to a harmless value, so that 'dir'; 1151 // is not seen as part o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:43854,Clear,Clear,43854,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"he edges of the neighbouring triangles can be smoothed (shaded). If desired the display of the shadow can be painted as well. The function does not apply for kModeGroupSimple display modes group.; Possible values for shading are:. kNotShaded; kShaded. Possible values for shadow are:. kShadowsNotPainted; kShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. . Light modes group, display mode = surface, 64 x 64 channels, shaded, with shadow.; Function: TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid, kDisplayModeLinesX >and kDisplayModeLinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier smoothing.; Function: TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode. One can change the width between horizontal slices and thus their density. Default value: width=50. . Simple modes group, display mode = contours, 64 x 64 channels. Width between slices was set to 30.; Function: TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the weight between both shading algorithm. The function does not apply for other display modes groups. Default value is: weight=0.5. . Light - height modes group, display mode = surface, 64 x 64 channels. The weight between both shading algorithms is set to 0.7.; Function: TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display channel marks. One can control the color as well a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:40299,Simpl,Simple,40299,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"he end of one batch in a vector of Pattern ; Definition at line 234 of file NeuralNet.h. Public Types; typedef std::vector< Pattern >::const_iterator const_iterator;  . Public Member Functions;  Batch (typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd);  ; const_iterator begin () const;  ; const_iterator end () const;  ; size_t size () const;  . Private Attributes; const_iterator m_itBegin;  iterator denoting the beginning of the batch ;  ; const_iterator m_itEnd;  iterator denoting the end of the batch ;  . #include <TMVA/NeuralNet.h>; Member Typedef Documentation. ◆ const_iterator. typedef std::vector<Pattern>::const_iterator TMVA::DNN::Batch::const_iterator. Definition at line 237 of file NeuralNet.h. Constructor & Destructor Documentation. ◆ Batch(). TMVA::DNN::Batch::Batch ; (; typename std::vector< Pattern >::const_iterator ; itBegin, . typename std::vector< Pattern >::const_iterator ; itEnd . ). inline . Definition at line 239 of file NeuralNet.h. Member Function Documentation. ◆ begin(). const_iterator TMVA::DNN::Batch::begin ; (; ); const. inline . Definition at line 244 of file NeuralNet.h. ◆ end(). const_iterator TMVA::DNN::Batch::end ; (; ); const. inline . Definition at line 245 of file NeuralNet.h. ◆ size(). size_t TMVA::DNN::Batch::size ; (; ); const. inline . Definition at line 247 of file NeuralNet.h. Member Data Documentation. ◆ m_itBegin. const_iterator TMVA::DNN::Batch::m_itBegin. private . iterator denoting the beginning of the batch ; Definition at line 250 of file NeuralNet.h. ◆ m_itEnd. const_iterator TMVA::DNN::Batch::m_itEnd. private . iterator denoting the end of the batch ; Definition at line 251 of file NeuralNet.h. Libraries for TMVA::DNN::Batch:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/NeuralNet.h. TMVADNNBatch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Batch.html:2281,Guid,Guide,2281,doc/master/classTMVA_1_1DNN_1_1Batch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Batch.html,1,['Guid'],['Guide']
Usability,"he entry.; If not cached just call DirectDraw() for normal non DL cached drawing. void DrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; Draw the logical shape in highlight mode.; If lvl argument is less than 0 (-1 by default), the index into color-set; is taken from the physical shape itself. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Virtual method called-back after a secondary selection hit; is recorded (see TGLViewer::HandleButton(), Ctrl-Button1).; The ptr argument holds the GL pick-record of the closest hit. This base-class implementation simply prints out the result. void InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; Invoke popup menu or our bound external TObject (if any), using passed; 'menu' object, at location 'x' 'y'. Bool_t IgnoreSizeForOfInterest() const; Return true if size of this shape should be ignored when determining if; the object should be drawn. In this base-class we simply return state of; static flag fgIgnoreSizeForCameraInterest. Several sub-classes override this virtual function. Bool_t GetIgnoreSizeForCameraInterest(); Get state of static fgIgnoreSizeForCameraInterest flag.; When this is true all objects, also very small, will be drawn by GL. void SetIgnoreSizeForCameraInterest(Bool_t isfci); Set state of static fgIgnoreSizeForCameraInterest flag. TGLLogicalShape& operator=(const TGLLogicalShape& ). UInt_t Ref() const; Physical shape reference-counting, replica management. { return fRef; }. void StrongRef(Bool_t strong) const; { fRefStrong = strong; }. const TGLPhysicalShape* GetFirstPhysical() const; { return fFirstPhysical; }. TObject* ID() const; { return fExternalObj; }. TObject* GetExternal() const; { return fExternalObj; }. TGLScene* GetScene() const; { return fScene; }. void UpdateBoundingBox(); {}. UInt_t DLOffset(Short_t ) const; { return 0; }. ELODAxes SupportedLODAxes() const; { return kLODAxesNone; }. void DirectDraw(TGLRnrCtx& rnrCtx) const. Bool_t Kee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLogicalShape.html:8176,simpl,simply,8176,root/html534/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html534/TGLLogicalShape.html,1,['simpl'],['simply']
Usability,"he entry.; If not cached just call DirectDraw() for normal non DL cached drawing. void DrawHighlight(TGLRnrCtx& rnrCtx, const TGLPhysicalShape* pshp, Int_t lvl = -1) const; Draw the logical shape in highlight mode.; If lvl argument is less than 0 (-1 by default), the index into color-set; is taken from the physical shape itself. void ProcessSelection(TGLRnrCtx& rnrCtx, TGLSelectRecord& rec); Virtual method called-back after a secondary selection hit; is recorded (see TGLViewer::HandleButton(), Ctrl-Button1).; The ptr argument holds the GL pick-record of the closest hit. This base-class implementation simply prints out the result. void InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; Invoke popup menu or our bound external TObject (if any), using passed; 'menu' object, at location 'x' 'y'. Bool_t IgnoreSizeForOfInterest() const; Return true if size of this shape should be ignored when determining if; the object should be drawn. In this base-class we simply return state of; static flag fgIgnoreSizeForCameraInterest. Several sub-classes override this virtual function. Bool_t GetIgnoreSizeForCameraInterest(); Get state of static fgIgnoreSizeForCameraInterest flag.; When this is true all objects, also very small, will be drawn by GL. void SetIgnoreSizeForCameraInterest(Bool_t isfci); Set state of static fgIgnoreSizeForCameraInterest flag. TGLLogicalShape(const TGLLogicalShape& ). TGLLogicalShape& operator=(const TGLLogicalShape& ). UInt_t Ref() const; Physical shape reference-counting, replica management. { return fRef; }. void StrongRef(Bool_t strong) const; { fRefStrong = strong; }. const TGLPhysicalShape* GetFirstPhysical() const; { return fFirstPhysical; }. TObject* ID() const; { return fExternalObj; }. TObject* GetExternal() const; { return fExternalObj; }. TGLScene* GetScene() const; { return fScene; }. void UpdateBoundingBox(); {}. UInt_t DLOffset(Short_t ) const; { return 0; }. ELODAxes SupportedLODAxes() const; { return kLODAxesNone; }. void Direc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLogicalShape.html:8627,simpl,simply,8627,root/html602/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html602/TGLLogicalShape.html,2,['simpl'],['simply']
Usability,he filters applied ;  tdf004_cutFlowReport.pyThis tutorial shows how to get information about the efficiency of the filters applied ;  tdf005_fillAnyObject.C This tutorial shows how to fill any object the class of which exposes a Fill method ;  tdf006_ranges.C This tutorial shows how to express the concept of ranges when working with the TDataFrame ;  tdf006_ranges.py This tutorial shows how to express the concept of ranges when working with the TDataFrame ;  tdf007_snapshot.C This tutorial shows how to write out datasets in ROOT formatusing the TDataFrame ;  tdf007_snapshot.py This tutorial shows how to write out datasets in ROOT formatusing the TDataFrame ;  tdf008_createDataSetFromScratch.C This tutorial shows how to create a dataset from scratch with TDataFrame ;  tdf008_createDataSetFromScratch.py This tutorial shows how to create a dataset from scratch with TDataFrame ;  tdf009_FromScratchVSTTree.C This tutorial illustrates how simpler it can be to use a TDataFrame to create a dataset with respect to the usage of the TTree interfaces ;  tdf010_trivialDataSource.C This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf010_trivialDataSource.py This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf011_ROOTDataSource.C This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf011_ROOTDataSource.py This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf012_DefinesAndFiltersAsStrings.C ;  tdf012_DefinesAndFiltersAsStrings.py ;  tdf013_InspectAnalysis.C Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot ;  tdf014_CSVDataSource.C This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf014_CSVDataSource.py This tutorial illustrates how use the TDataFrame in combination with a TDataSource ;  tdf101_h1Analysis,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:97912,simpl,simpler,97912,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simpler']
Usability,"he first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table; Note: This is a base class. If one fears it is not safe; ----- to allow ""void *"" one may potect the end-user code; providing a derived class with the appropriated type; of the parameters. void BuildSorter(TString& colName, Int_t firstRow, Int_t numberRows). BuildSorter backs TTableSorter ctor. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside of [], only a single integer number allowed !; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:16398,simpl,simpleArray,16398,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['simpl'],['simpleArray']
Usability,"he fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:45469,simpl,simple,45469,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['simpl'],['simple']
Usability,"he full entry per each packet ; TH1D*fNodeHist!histogram of slaves per file serving node; Long64_tfNumEvents!total number of events to be processed; TList*fOutput!Saved pointer to the output list ; TH1D*fPacketsHist!histogram of packets processed per slave; TPerfEvent*fPerfEvent!TPerfEvent used to fill tree; TH2D*fProcTimeHist!histogram of real time spent processing packets; Int_tfSlaves!number of active slaves; Long64_tfTotBytesRead!total bytes read on all slaves; Double_tfTotCpuTime!total cpu time of all slaves; Long64_tfTotEvents!total number of events processed; TTree*fTrace!TTree with trace events; TTimeStampfTzero!start time of this run; static Long_tfgResMemMax! Max resident memory used by this process; static Long_tfgVirtMemMax! Max virtual memory used by this process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPerfStats(TList* input, TList* output); Normal constructor. ~TPerfStats(); Destructor. void SimpleEvent(TVirtualPerfStats::EEventType type); Simple event. void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead); Packet event.; See WriteQueryLog for the descripition of the structure sent for monitoring; when fMonitorPerPacket is kTRUE. void FileEvent(const char* slave, const char* slavename, const char* nodename, const char* filename, Bool_t isStart); File event. void FileOpenEvent(TFile* file, const char* filename, Double_t start); Open file event. void FileReadEvent(TFile* file, Int_t len, Double_t start); Read file event. void FileUnzipEvent(TFile* file, Long64_t pos, Double_t start, Int_t complen, Int_t objlen); Record TTree file unzip event.; start is the TimeStamp before unzip; pos is where in the file the compressed buffer came from; complen is the length of the compressed buffer; objlen is the length of the de-compressed buffer. void RateEvent(Double_t proctime, Double_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPerfStats.html:8222,Simpl,SimpleEvent,8222,root/html532/TPerfStats.html,https://root.cern,https://root.cern/root/html532/TPerfStats.html,2,['Simpl'],"['Simple', 'SimpleEvent']"
Usability,"he histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness; of the histogram along x, y or z axis; Note, that since third and fourth moment are not calculated; at the fill time, skewness and its standard error are computed bin by bin. Double_t GetKurtosis(Int_t axis = 1) const; For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis.; Kurtosis(gaussian(0, 1)) = 0.; For axis =11, 12 or 13 returns the approximate standard error of kurtosis; of the histogram along x, y or z axis; Note, that since third and fourth moment are not calculated; at the fill time, kurtosis and its standard error are computed bin by bin. void GetStats(Double_t* stats) const; fill the array stats from the contents of this histogram; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. Note that the mean value/RMS is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. void ResetStats(); Reset the statistics including the number of entries; and replace with values calculates from bin content; The number of entries is set to the total bin content or (in case of weighted histogram); to number of effective entries. Double_t GetSumOfWeights() const; -*-*-*-*-*-*Return the sum of weights excluding under/overflows*-*-*-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:104796,simpl,simply,104796,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['simpl'],['simply']
Usability,"he hot key is an underlined character in a button label that shows the assigned keyboard mnemonic for its choice. A button that prompts more information for users has the label generally followed by ellipsis (…). As we saw the hot strings “&Draw” and “&Exit” define the text labels “Draw” and “Exit” and keyboard mnemonics Alt+D, Alt+E for their selection. The letter D and E appear underlined on the screen. All text buttons should have a unique shortcut key with the exception of OK and Cancel.; These buttons are usually placed within a window to provide fast access to frequently used or critical commands. They help in situations where a command is not available through the menu bar. You already know that a command string can be passed in the text button via the constructor:; TGTextButton(const TGWindow *p, const char *s, const char *cmd,; Int_t id, GContext_t norm, FontStruct_t font,; UInt_t options);; A button label can be changed by SetText(new_label). There are important guidelines to be followed about a button label. The text has to provide a meaningful description of the performed action. The single-word label should be used whenever possible, only two-three words for clarity, if necessary. Do not number labels. Always follow all platform presentation and usage guidelines for standard button functions. Let’s remember a few standard names and definitions of well known buttons:; OK - any changed information in a window is accepted and the window is closed;; Cancel - closes window without implementing submitted changes;; Reset- resets defaults and cancels any changed information that has not be submitted;; Apply - any changed information is accepted and again displayed in the window that remains open;; Close - closes the window;; Help - opens online Help.; Below are examples of text buttons. Note the two placement methods. The first example should be used when there are one to three command buttons; the second one when there are more than three buttons. Picture butt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1178102,guid,guidelines,1178102,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guidelines']
Usability,he main pdf ; Definition at line 116 of file ProposalHelper.h. ◆ fOwnsPdfProp. bool RooStats::ProposalHelper::fOwnsPdfProp = true. protected . whether we own the PdfProposal; equivalent to: !(whether we have returned it in GetProposalFunction) ; Definition at line 114 of file ProposalHelper.h. ◆ fOwnsVars. bool RooStats::ProposalHelper::fOwnsVars = false. protected . whether we own fVars ; Definition at line 118 of file ProposalHelper.h. ◆ fPdf. RooAbsPdf* RooStats::ProposalHelper::fPdf = nullptr. protected . the main proposal density function ; Definition at line 103 of file ProposalHelper.h. ◆ fPdfProp. PdfProposal* RooStats::ProposalHelper::fPdfProp = nullptr. protected . the PdfProposal we are (probably) going to return ; Definition at line 108 of file ProposalHelper.h. ◆ fSigmaRangeDivisor. double RooStats::ProposalHelper::fSigmaRangeDivisor. protected . range divisor to get sigma for each variable ; Definition at line 111 of file ProposalHelper.h. ◆ fUniformPdf. RooAbsPdf* RooStats::ProposalHelper::fUniformPdf = nullptr. protected . uniform proposal dens. func. ; Definition at line 105 of file ProposalHelper.h. ◆ fUniFrac. double RooStats::ProposalHelper::fUniFrac = -1. protected . what fraction of the PDF integral is uniform ; Definition at line 112 of file ProposalHelper.h. ◆ fUseUpdates. bool RooStats::ProposalHelper::fUseUpdates = false. protected . whether to set updates for proposal params in PdfProposal ; Definition at line 119 of file ProposalHelper.h. ◆ fVars. RooArgList* RooStats::ProposalHelper::fVars = nullptr. protected . the RooRealVars to generate proposals for ; Definition at line 109 of file ProposalHelper.h. Libraries for RooStats::ProposalHelper:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/ProposalHelper.h; roofit/roostats/src/ProposalHelper.cxx. RooStatsProposalHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html:21200,Guid,Guide,21200,doc/master/classRooStats_1_1ProposalHelper.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html,1,['Guid'],['Guide']
Usability,"he map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefTable.html:9494,GUID,GUID,9494,root/html528/TRefTable.html,https://root.cern,https://root.cern/root/html528/TRefTable.html,6,['GUID'],['GUID']
Usability,"he method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TASInputHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TASInputHandler(). TASInputHandler::TASInputHandler ; (; TApplicationServer * ; s, . Int_t ; fd . ). inline . Definition at line 118 of file TApplicationServer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TASInputHandler::Notify ; (; ). overridevirtual . Handle this input. ; Implements TSysEvtHandler.; Definition at line 127 of file TApplicationServer.cxx. ◆ ReadNotify(). Bool_t TASInputHandler::ReadNotify ; (; ). inlineoverridevirtual . Notify when something can be read from the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 121 of file TApplicationServer.cxx. Member Data Documentation. ◆ fServ. TApplicationServer* TASInputHandler::fServ. private . Definition at line 116 of file TApplicationServer.cxx. net/net/src/TApplicationServer.cxx. TASInputHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASInputHandler.html:17494,Guid,Guide,17494,doc/master/classTASInputHandler.html,https://root.cern,https://root.cern/doc/master/classTASInputHandler.html,1,['Guid'],['Guide']
Usability,"he minimizer can be set using the static method of the MinimizerOptions class; 464 ; 465Double_t TF2::GetMinimum(Double_t *x) const; 466{; 467 return FindMinMax(x, false);; 468}; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Return maximum value of the function; 472/// See TF2::GetMinimum; 473 ; 474Double_t TF2::GetMaximum(Double_t *x) const; 475{; 476 return FindMinMax(x, true);; 477}; 478 ; 479 ; 480////////////////////////////////////////////////////////////////////////////////; 481/// Redefines TObject::GetObjectInfo.; 482///; 483/// Displays the function value; 484/// corresponding to cursor position px,py; 485 ; 486char *TF2::GetObjectInfo(Int_t px, Int_t py) const; 487{; 488 const char *snull = """";; 489 if (!gPad) return (char*)snull;; 490 static char info[64];; 491 Double_t x = gPad->PadtoX(gPad->AbsPixeltoX(px));; 492 Double_t y = gPad->PadtoY(gPad->AbsPixeltoY(py));; 493 const char *drawOption = GetDrawOption();; 494 Double_t uxmin,uxmax;; 495 Double_t uymin,uymax;; 496 if (gPad->GetView() || strncmp(drawOption,""cont"",4) == 0; 497 || strncmp(drawOption,""CONT"",4) == 0) {; 498 uxmin=gPad->GetUxmin();; 499 uxmax=gPad->GetUxmax();; 500 x = fXmin +(fXmax-fXmin)*(x-uxmin)/(uxmax-uxmin);; 501 uymin=gPad->GetUymin();; 502 uymax=gPad->GetUymax();; 503 y = fYmin +(fYmax-fYmin)*(y-uymin)/(uymax-uymin);; 504 }; 505 snprintf(info,64,""(x=%g, y=%g, f=%.18g)"",x,y,((TF2*)this)->Eval(x,y));; 506 return info;; 507}; 508 ; 509////////////////////////////////////////////////////////////////////////////////; 510/// Return a random number following this function shape; 511 ; 512Double_t TF2::GetRandom(TRandom *, Option_t *); 513{; 514 Error(""GetRandom"",""cannot be called for TF2/3, use GetRandom2/3 instead"");; 515 return 0; // not yet implemented; 516}; 517 ; 518////////////////////////////////////////////////////////////////////////////////; 519/// Return a random number following this function shape; 520 ; 521 ; 522Double_t TF2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:17237,ux,uxmin,17237,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,6,['ux'],"['uxmax', 'uxmax-uxmin', 'uxmin']"
Usability,"he minimum ;  . Protected Attributes; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/Minimizer.h>. Inheritance diagram for ROOT::Math::Minimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Minimizer() [1/3]. ROOT::Math::Minimizer::Minimizer ; (; ). inline . Default constructor. ; Definition at line 124 of file Minimizer.h. ◆ ~Minimizer(). virtual ROOT::Math::Minimizer::~Minimizer ; (; ). inlinevirtual . Destructor (no operations). ; Definition at line 127 of file Minimizer.h. ◆ Minimizer() [2/3]. ROOT::Math::Minimizer::Minimizer ; (; Minimizer const & ; ). delete . ◆ Minimizer() [3/3]. ROOT::Math::Minimizer::Minimizer ; (; Minimizer && ; ). delete . Member Function Documentation. ◆ Clear(). virtual void ROOT::Math::Minimizer::Clear ; (; ). inlinevirtual . reset for consecutive minimization - implement if needed ; Reimplemented in ROOT::Math::GeneticMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 136 of file Minimizer.h. ◆ Contour(). bool ROOT::Math::Minimizer::Contour ; (; unsigned int ; ivar, . unsigned int ; jvar, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). virtual . find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 211 of file Minimizer.cxx. ◆ Correlation(). virtual double ROOT::Math::Minimizer::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. inlinevirtual . return correlation coefficient between variable i and j. ; If the variable is fixed or const the return value is zero ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer.; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:14351,Clear,Clear,14351,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['Clear'],['Clear']
Usability,"he misses; When this mode is enabled, the memory dedicated to the cache can increase by at most a factor two in the case of cache miss. Additionally, on the first miss of an event, we must iterate through all the ""active branches"" for the miss cache and find the correct basket. This can be potentially a CPU-expensive operation compared to, e.g., the latency of a SSD. This is why the miss cache is currently disabled by default. Example usages of TTreeCache; A few use cases are discussed below. A cache may be created with automatic sizing when a TTree is used:; In some applications, e.g. central processing workflows of experiments, the list of branches to read is known a priori. For these cases, the TTreeCache can be instructed about the branches which will be read via explicit calls to the TTree or TTreeCache interfaces. In less streamlined applications such as analysis, predicting the branches which will be read can be difficult. In such cases, ROOT I/O flags used branches automatically when a branch buffer is read during the learning phase.; In the examples below, portions of analysis code are shown. The few statements involving the TreeCache are marked with //<<<. ROOT::RDataFrame and TTreeReader Examples; If you use RDataFrame or TTreeReader, the system will automatically cache the best set of branches: no action is required by the user. TTree::Draw Example; The TreeCache is automatically used by TTree::Draw. The method knows which branches are used in the query and it puts automatically these branches in the cache. The entry range is also inferred automatically. TTree::Process and TSelectors Examples; The user must enable the cache and tell the system which branches to cache and also specify the entry range. It is important to specify the entry range in case only a subset of the events is processed to avoid wasteful caching.; Reading all branches; TTree *T;; f->GetObject(T, ""mytree"");; auto nentries = T->GetEntries();; auto cachesize = 10000000U; // 10 MBytes; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:6098,learn,learning,6098,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"he name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:18462,Clear,Clear,18462,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,3,['Clear'],['Clear']
Usability,"he name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGFile.html:17155,Clear,Clear,17155,doc/master/classTNetXNGFile.html,https://root.cern,https://root.cern/doc/master/classTNetXNGFile.html,5,['Clear'],['Clear']
Usability,"he name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:20184,Clear,Clear,20184,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,9,['Clear'],['Clear']
Usability,"he name signal ; Definition at line 235 of file DataSetInfo.h. ◆ fSpectators. std::vector<VariableInfo> TMVA::DataSetInfo::fSpectators. private . list of spectators expressions/internal names ; Definition at line 214 of file DataSetInfo.h. ◆ fSplitOptions. TString TMVA::DataSetInfo::fSplitOptions. private . Definition at line 223 of file DataSetInfo.h. ◆ fTargets. std::vector<VariableInfo> TMVA::DataSetInfo::fTargets. private . list of targets expressions/internal names ; Definition at line 213 of file DataSetInfo.h. ◆ fTargetsForMulticlass. std::vector<Float_t>* TMVA::DataSetInfo::fTargetsForMulticlass. private . -> all targets 0 except the one with index==classNumber ; Definition at line 237 of file DataSetInfo.h. ◆ fTestingSumBackgrWeights. Double_t TMVA::DataSetInfo::fTestingSumBackgrWeights. private . Definition at line 228 of file DataSetInfo.h. ◆ fTestingSumSignalWeights. Double_t TMVA::DataSetInfo::fTestingSumSignalWeights. private . Definition at line 227 of file DataSetInfo.h. ◆ fTrainingSumBackgrWeights. Double_t TMVA::DataSetInfo::fTrainingSumBackgrWeights. private . Definition at line 226 of file DataSetInfo.h. ◆ fTrainingSumSignalWeights. Double_t TMVA::DataSetInfo::fTrainingSumSignalWeights. private . Definition at line 225 of file DataSetInfo.h. ◆ fVarArrays. std::map<TString, int> TMVA::DataSetInfo::fVarArrays. private . Definition at line 217 of file DataSetInfo.h. ◆ fVariables. std::vector<VariableInfo> TMVA::DataSetInfo::fVariables. private . list of variable expressions/internal names ; Definition at line 212 of file DataSetInfo.h. ◆ fVerbose. Bool_t TMVA::DataSetInfo::fVerbose. private . Verbosity. ; Definition at line 233 of file DataSetInfo.h. Libraries for TMVA::DataSetInfo:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataSetInfo.h; tmva/tmva/src/DataSetInfo.cxx. TMVADataSetInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html:34148,Guid,Guide,34148,doc/master/classTMVA_1_1DataSetInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html,1,['Guid'],['Guide']
Usability,"he next are some rules to remember:. name = * means all, but don’t remove the subdirectories; cycle =* means all cycles (memory and file); cycle ="""" means apply to a memory object; cycle = 9999 also means apply to a memory object; namecycle = """" means the same as namecycle =“T*”; namecycle = T* delete subdirectories. For example to delete a directory from a file, you must specify the directory cycle:; root[] f->Delete(""Wed011003;1""); Some other examples of namecycle format are:. foo:delete the object named foo from memory; foo;1: delete the cycle 1 of the object named foo from the file; foo;*: delete all cycles of foo from the file and also from memory; *;2: delete all objects with cycle number 2 from the file; *;*: delete all objects from memory and from the file; T*;*: delete all objects from memory and from the file including all subdirectories. 11.3 Streamers; To follow the discussion on Streamers, you need to know what a simple data type is. A variable is of a simple data type if it cannot be decomposed into other types. Examples of simple data types are longs, shorts, floats, and chars. In contrast, a variable is of a composite data type if it can be decomposed. For example, classes, structures, and arrays are composite types. Simple types are also called primitive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classes, the Streamercalls the Streamerof the parent classes. It moves up the inheritance tree ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:465569,simpl,simple,465569,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"he nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60509,simpl,simply,60509,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simply']
Usability,"he nominal_hx; 1053ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1054 ; 1055// the event loop runs here, upon first access to any of the results or varied results:; 1056hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1057hx[""pt:down""].Draw(""SAME"");; 1058hx[""pt:up""].Draw(""SAME"");; 1059~~~; 1060 ; 1061A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1062as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1063this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1064to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1065""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1066 ; 1067Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1068the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1069calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1070 ; 1071There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1072not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1073complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1074_nominal_ value in input.; 1075 ; 1076#### Varying multiple columns in lockstep; 1077 ; 1078In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1079""in lockstep"":; 1080 ; 1081~~~{.python}; 1082df.Vary([""pt"", ""eta""],; 1083 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1084 variat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:62189,simpl,simply,62189,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simply']
Usability,"he number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:31610,simpl,simple,31610,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html:7329,Clear,ClearFunctions,7329,root/html530/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMultiRootFinder.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"he number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMultiRootFinder.h 38726 2011-04-04 14:05:51Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html:7329,Clear,ClearFunctions,7329,root/html532/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMultiRootFinder.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"he number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:13273,feedback,feedback,13273,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,7,['feedback'],['feedback']
Usability,"he remote player. Returns kFALSE. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(Bool_t savememvalues = kFALSE); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); Update automatic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the cache. Int_t GetLearnEntries(); Return the number of entries in the l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:20973,feedback,feedback,20973,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,2,['feedback'],['feedback']
Usability,"he screen. The global visible level put a limitation on the maximum applied depth. Combined with visibility settings per volume, these can tune quite well what should appear on the screen. However, there are situations when users want to see a volume branch displayed down to the maximum depth, keeping at the same time a limitation or even suppressing others. In order to accomplish that, one should use the volume attribute: ""Visible daughters"". By default, all daughters of all volumes are displayed if there is no limitation related with their level depth with respect to the top drawn volume. Ray Tracing; Ray tracing is a quite known drawing technique based on tracking rays from the eye position through all pixels of a view port device. The pixel color is derived from the properties of the first crossed surface, according some illumination model and material optical properties. While there are currently existing quite sophisticated ray tracing models, TGeo is currently using a very simple approach where the light source is matching the eye position (no shadows or back-tracing of the reflected ray). In future we are considering providing a base class in order to be able to derive more complex models.; Due to the fact that the number of rays that have to be tracked matches the size in pixels of the pad, the time required by this algorithm is proportional to the pad size. On the other hand, the speed is quite acceptable for the default ROOT pad size and the images produced by using this technique have high quality. Since the algorithm is practically using all navigation features, producing ray-traced pictures is also a geometry validation check. Ray tracing can be activated at volume level as the normal Draw(). Ray-traced view in a pad; myVolume->Raytrace(); Once ray-tracing a view, this can be zoomed or rotated as a usual one. Objects on the screen are no longer highlighted when picking the vertices but the corresponding volumes is still accessible.; Clipping Ray-traced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:112599,simpl,simple,112599,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"he sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 std::unique_ptr<Internal::RPageSink> sink,; 85 const RNTupleWriteOptions &options);; 86 ; 87public:; 88 /// Throws an exception if the model is null.; 89 static std::unique_ptr<RNTupleWriter> Recreate(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 90 std::string_view storage,; 91 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 92 static std::unique_ptr<RNTupleWriter>; 93 Recreate(std::initializer_list<std::pair<std::string_view, std::string_view>> fields, std::string_view ntupleName,; 94 std::string_view storage, const RNTupleWriteOptions &options = RNTupleWriteOptions());; 95 /// Throws an exception if the model is null.; 96 static std::unique_ptr<RNTupleWriter> Append(std::unique_ptr<RNTupleModel> model, std::string_view ntupleName,; 97 TFile &file,; 98 const RNTupleWriteOptions &options = RNTupleWriteOptions());; 99 RNTupleWriter(const RNTupleWriter &) = delete;; 100 RNTupleWriter &operator=(const RNTupleWriter &) = delete;; 101 ~RNTupleWriter();; 102 ; 103 /// The simplest user interface if the default entry that comes with the ntuple model is used.; 104 /// \return The number of uncompressed bytes written.; 105 std::size_t Fill() { return fFillContext.Fill(fFillContext.fModel->GetDefaultEntry()); }; 106 /// Multiple entries can have been instantiated from the ntuple model. This method will perform; 107 /// a light check whether the entry comes from the ntuple's own model.; 108 /// \return The number of uncompressed bytes written.; 109 std::size_t Fill(REntry &entry) { return fFillContext.Fill(entry); }; 110 /// Fill an entry into this ntuple, but don't commit the cluster. The calling code must pass an RNTupleFillStatus; 111 /// and check RNTupleFillStatus::ShouldFlushCluster.; 112 void FillNoFlush(REntry &entry, RNTupleFillStatus &status) { fFillContext.FillNoFlush(entry, status); }; 113 /// Flush column data, pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:4603,simpl,simplest,4603,doc/master/RNTupleWriter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html,1,['simpl'],['simplest']
Usability,"he subdirectories; cycle =* means all cycles (memory and file); cycle ="""" means apply to a memory object; cycle = 9999 also means apply to a memory object; namecycle = """" means the same as namecycle =“T*”; namecycle = T* delete subdirectories. For example to delete a directory from a file, you must specify the directory cycle:; root[] f->Delete(""Wed011003;1""); Some other examples of namecycle format are:. foo:delete the object named foo from memory; foo;1: delete the cycle 1 of the object named foo from the file; foo;*: delete all cycles of foo from the file and also from memory; *;2: delete all objects with cycle number 2 from the file; *;*: delete all objects from memory and from the file; T*;*: delete all objects from memory and from the file including all subdirectories. 11.3 Streamers; To follow the discussion on Streamers, you need to know what a simple data type is. A variable is of a simple data type if it cannot be decomposed into other types. Examples of simple data types are longs, shorts, floats, and chars. In contrast, a variable is of a composite data type if it can be decomposed. For example, classes, structures, and arrays are composite types. Simple types are also called primitive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classes, the Streamercalls the Streamerof the parent classes. It moves up the inheritance tree until it reaches an ancestor without a parent. To serialize the object dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:465643,simpl,simple,465643,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"he time offset is the one that will be used by all graphs.; // If one changes it, it will be changed even on the graphs already defined; gStyle->SetTimeOffset(script_time);; ; auto ct = new TCanvas(""ct"",""Time on axis"",10,10,700,900);; ct->Divide(1,3);; ; int i;; ; //### Build a signal: noisy damped sine; // Time interval: 30 minutes; ; gStyle->SetTitleH(0.08);; float noise;; auto ht = new TH1F(""ht"",""Love at first sight"",3000,0.,2000.);; for (i=1;i<3000;i++) {; noise = gRandom->Gaus(0,120);; if (i>700) {; noise += 1000*sin((i-700)*6.28/30)*exp((double)(700-i)/300);; }; ht->SetBinContent(i,noise);; }; ct->cd(1);; ht->SetLineColor(2);; ht->GetXaxis()->SetLabelSize(0.05);; ht->Draw();; // Sets time on the X axis; // The time used is the one set as time offset added to the value; // of the axis. This is converted into day/month/year hour:min:sec and; // a reasonable tick interval value is chosen.; ht->GetXaxis()->SetTimeDisplay(1);; ; //### Build a simple graph beginning at a different time; // Time interval: 5 seconds; ; float x[100], t[100];; for (i=0;i<100;i++) {; x[i] = sin(i*4*3.1415926/50)*exp(-(double)i/20);; t[i] = 6000+(double)i/20;; }; auto gt = new TGraph(100,t,x);; gt->SetTitle(""Politics"");; ct->cd(2);; gt->SetLineColor(5);; gt->SetLineWidth(2);; gt->Draw(""AL"");; gt->GetXaxis()->SetLabelSize(0.05);; // Sets time on the X axis; gt->GetXaxis()->SetTimeDisplay(1);; gPad->Modified();; ; //### Build a second simple graph for a very long time interval; // Time interval: a few years; ; auto gt2 = new TGraph();; TDatime dateBegin(2000,1,1,0,0,0);; for (i=0;i<10;i++) {; TDatime datePnt(2000 + i,1,1,0,0,0);; gt2->AddPoint(datePnt.Convert() - dateBegin.Convert(), 100 + gRandom->Gaus(500,100)*i);; }; gt2->SetTitle(""Number of monkeys on the moon"");; ct->cd(3);; gt2->SetMarkerColor(4);; gt2->SetMarkerStyle(29);; gt2->SetMarkerSize(1.3);; gt2->Draw(""AP"");; gt2->GetXaxis()->SetLabelSize(0.04);; gt2->GetXaxis()->SetNdivisions(10);; // Sets time on the X axis; gt2->GetXaxis()-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis_8C.html:2014,simpl,simple,2014,doc/master/timeonaxis_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis_8C.html,2,['simpl'],['simple']
Usability,"he titles of the internal histograms are set to ""title + (total)""; or ""title + (passed)"" respectively.; - It is possible to label the axis of the histograms as usual (see; TH1::SetTitle). Example: Setting the title to ""My Efficiency"" and label the axis. pEff->SetTitle(""My Efficiency;x label;eff"");. Bool_t SetTotalEvents(Int_t bin, Int_t events); sets the number of total events in the given global bin. returns ""true"" if the number of total events has been updated; otherwise ""false"" ist returned. Note: - requires: fPassedHistogram->GetBinContent(bin) <= events. Bool_t SetTotalHistogram(const TH1& rTotal, Option_t* opt); sets the histogram containing all events. The given histogram is cloned and stored internally as histogram containing; all events. The given histogram has to be consistent with the current; fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fTotalHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fPassedHistogram is replaced by a; consistent one (with respect to rTotal) as well. void SetUseWeightedEvents(). void SetWeight(Double_t weight); sets the global weight for this TEfficiency object. Note: - weight has to be positive ( > 0). Double_t Wilson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Wilson interval. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. void Add(const TEfficiency& rEff). {*this += rEff;}. Double_t GetBetaAlpha(Int_t bin = -1) const; use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEfficiency.html:65601,clear,cleared,65601,root/html532/TEfficiency.html,https://root.cern,https://root.cern/root/html532/TEfficiency.html,1,['clear'],['cleared']
Usability,"he titles of the internal histograms are set to ""title + (total)""; or ""title + (passed)"" respectively.; - It is possible to label the axis of the histograms as usual (see; TH1::SetTitle). Example: Setting the title to ""My Efficiency"" and label the axis. pEff->SetTitle(""My Efficiency;x label;eff"");. Bool_t SetTotalEvents(Int_t bin, Int_t events); sets the number of total events in the given global bin. returns ""true"" if the number of total events has been updated; otherwise ""false"" ist returned. Note: - requires: fPassedHistogram->GetBinContent(bin) <= events. Bool_t SetTotalHistogram(const TH1& rTotal, Option_t* opt); sets the histogram containing all events. The given histogram is cloned and stored internally as histogram containing; all events. The given histogram has to be consistent with the current; fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fTotalHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fPassedHistogram is replaced by a; consistent one (with respect to rTotal) as well. void SetUseWeightedEvents(). void SetWeight(Double_t weight); sets the global weight for this TEfficiency object. Note: - weight has to be positive ( > 0). Double_t Wilson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Wilson interval. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. void Add(const TEfficiency& rEff); {*this += rEff;}. Double_t GetBetaAlpha(Int_t bin = -1) const; use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:69482,clear,cleared,69482,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,2,['clear'],['cleared']
Usability,"he titles of the internal histograms are set to ""title + (total)""; or ""title + (passed)"" respectively.; - It is possible to label the axis of the histograms as usual (see; TH1::SetTitle). Example: Setting the title to ""My Efficiency"" and label the axis. pEff->SetTitle(""My Efficiency;x label;eff"");. Bool_t SetTotalEvents(Int_t bin, Int_t events); sets the number of total events in the given global bin. returns ""true"" if the number of total events has been updated; otherwise ""false"" ist returned. Note: - requires: fPassedHistogram->GetBinContent(bin) <= events. Bool_t SetTotalHistogram(const TH1& rTotal, Option_t* opt); sets the histogram containing all events. The given histogram is cloned and stored internally as histogram containing; all events. The given histogram has to be consistent with the current; fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fTotalHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fPassedHistogram is replaced by a; consistent one (with respect to rTotal) as well. void SetUseWeightedEvents(). void SetWeight(Double_t weight); sets the global weight for this TEfficiency object. Note: - weight has to be positive ( > 0). Double_t Wilson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Wilson interval. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. void Add(const TEfficiency& rEff); {*this += rEff;}. void Browse(TBrowser* ); {Draw();}. Double_t Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEfficiency.html:70472,clear,cleared,70472,root/html604/TEfficiency.html,https://root.cern,https://root.cern/root/html604/TEfficiency.html,1,['clear'],['cleared']
Usability,"he titles of the internal histograms are set to ""title + (total)""; or ""title + (passed)"" respectively.; - It is possible to label the axis of the histograms as usual (see; TH1::SetTitle). Example: Setting the title to ""My Efficiency"" and label the axis. pEff->SetTitle(""My Efficiency;x label;eff"");. Bool_t SetTotalEvents(Int_t bin, Int_t events); sets the number of total events in the given global bin. returns ""true"" if the number of total events has been updated; otherwise ""false"" ist returned. Note: - requires: fPassedHistogram->GetBinContent(bin) <= events. Bool_t SetTotalHistogram(const TH1& rTotal, Option_t* opt); sets the histogram containing all events. The given histogram is cloned and stored internally as histogram containing; all events. The given histogram has to be consistent with the current; fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fTotalHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fPassedHistogram is replaced by a; consistent one (with respect to rTotal) as well. void SetWeight(Double_t weight); sets the global weight for this TEfficiency object. Note: - weight has to be positive ( > 0). Double_t Wilson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); calculates the boundaries for the frequentist Wilson interval. Input: - total : number of total events; - passed: 0 <= number of passed events <= total; - level : confidence level; - bUpper: true - upper boundary is returned; false - lower boundary is returned. calculation:. void Add(const TEfficiency& rEff). {*this += rEff;}. Double_t GetBetaAlpha(Int_t bin = -1) const; use trick of -1 to return global",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:63189,clear,cleared,63189,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,2,['clear'],['cleared']
Usability,"he transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:4482,Clear,Clear,4482,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['Clear'],['Clear']
Usability,"he tree to find the node matching ""event"". TMVA::BinarySearchTreeNode* Search(TMVA::Event* , TMVA::Node* ) const; Private, recursive, function for searching. Double_t GetSumOfWeights(Int_t theType) const; return the sum of event (node) weights. Double_t GetSumOfWeights(Int_t theType) const; return the sum of event (node) weights. Double_t Fill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); create the search tree from the event collection; using ONLY the variables specified in ""theVars"". Double_t Fill(const vector<TMVA::Event*>& events, Int_t theType = -1); create the search tree from the events in a TTree; using ALL the variables specified included in the Event. void NormalizeTree(vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator , vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator , UInt_t ). void NormalizeTree(); Normalisation of tree. void Clear(TMVA::Node* n = 0); clear nodes. Double_t SearchVolume(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0); search the whole tree and add up all weigths of events that; lie within the given voluem. Double_t SearchVolume(TMVA::Node* , TMVA::Volume* , Int_t , vector<const TMVA::BinarySearchTreeNode*>* events); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* Creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinarySearchTree.html:6489,Clear,Clear,6489,root/html528/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinarySearchTree.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"he tree to find the node matching ""event"". TMVA::BinarySearchTreeNode* Search(TMVA::Event* , TMVA::Node* ) const; Private, recursive, function for searching. Double_t GetSumOfWeights(Int_t theType) const; return the sum of event (node) weights. Double_t GetSumOfWeights(Int_t theType) const; return the sum of event (node) weights. Double_t Fill(const vector<TMVA::Event*>& events, const vector<Int_t>& theVars, Int_t theType = -1); create the search tree from the event collection; using ONLY the variables specified in ""theVars"". Double_t Fill(const vector<TMVA::Event*>& events, Int_t theType = -1); create the search tree from the events in a TTree; using ALL the variables specified included in the Event. void NormalizeTree(vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator , vector<pair<double,const TMVA::Event*>,allocator<pair<double,const TMVA::Event*> > >::iterator , UInt_t ). void NormalizeTree(); Normalisation of tree. void Clear(TMVA::Node* n = 0); clear nodes. Double_t SearchVolume(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0); search the whole tree and add up all weigths of events that; lie within the given voluem. Double_t SearchVolume(TMVA::Node* , TMVA::Volume* , Int_t , vector<const TMVA::BinarySearchTreeNode*>* events); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume. Bool_t InVolume(const vector<Float_t>& , TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0, Int_t signalClass = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__BinarySearchTree.html:6512,Clear,Clear,6512,root/html530/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html530/TMVA__BinarySearchTree.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"he two data members of this class contain important information about X11/Win32 window identifier and the connection to the host’s graphics system. Every GUI element, which derives from TGObject has access to the TGClient via the data member fClient of TGObject. TGClient creates the connection with the host’s graphics system and sets up the complete graphics system for all widgets.; 25.5.2 TGWidget; The widgets base class TGWidget is typically used as a mix-in class via multiple inheritances. Its properties are available for all deriving widgets: TGButton, TGComboBox, TGTab, TGColorPalette, TGColorPick, TGDoubleSlider, TGListTree, TGNumberEntry, TGScrollBar, TGShutterItem, TGTextEntry, TGSlider, TGListBox, TGView.; This class has four data members keeping information about the widget id - important for event processing, the window which handles the widget’s events, the widget status flags and the assigned command (if there is any). The general properties of TGWidget are specified by SetFlags(Int_t flags) and ClearFlags(Int_t flags) methods. The status flags are: kWidgetWantFocus, kWidgetHasFocus, and kWidgetIsEnabled. The method Associate(const TGWindow* w) - sets the window which handles the widget events. SetCommand(const char* command) - sets the command to be executed. The command string can be gathering via GetCommand() method. For example, the third parameter in TGTextButton constructor can be omitted and set later in your program, i.e. instead of:; TGTextButton *exit = new TGTextButton(hframe,""&Exit"",; ""gApplication->Terminate()"");; You will have the following the two lines:; TGTextButton *exit = new TGTextButton(hframe,""&Exit"");; exit->SetCommand(""gApplication->Terminate()"");; The method IsEnabled() - returns kTRUE if the widget has flag kWidgetIsEnabled and it accepts user events. This method is very important for creating a good user interface because it allows you to disable or enable a widget depending on the situation of your application. As a standard a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1148240,Clear,ClearFlags,1148240,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['ClearFlags']
Usability,"he type of the rule. ; Definition at line 764 of file TSchemaRule.cxx. ◆ GetSource(). const TObjArray * TSchemaRule::GetSource ; (; ); const. Get the list of source members as a TObjArray of TNamed object, with the name being the member name and the title being its type. ; Definition at line 560 of file TSchemaRule.cxx. ◆ GetSourceClass(). const char * TSchemaRule::GetSourceClass ; (; ); const. Get the source class of this rule (i.e. the onfile class). ; Definition at line 466 of file TSchemaRule.cxx. ◆ GetTarget(). const TObjArray * TSchemaRule::GetTarget ; (; ); const. Get the target data members of this rule (i.e. the in memory data member). ; Definition at line 520 of file TSchemaRule.cxx. ◆ GetTargetClass(). const char * TSchemaRule::GetTargetClass ; (; ); const. Get the targte class of this rule (i.e. the in memory class). ; Definition at line 484 of file TSchemaRule.cxx. ◆ GetTargetString(). const char * TSchemaRule::GetTargetString ; (; ); const. Get the target data members of this rule as a simple string (i.e. the in memory data member). ; Definition at line 512 of file TSchemaRule.cxx. ◆ GetVersion(). const char * TSchemaRule::GetVersion ; (; ); const. Get the version string. ; Definition at line 393 of file TSchemaRule.cxx. ◆ HasSource(). Bool_t TSchemaRule::HasSource ; (; const TString & ; source); const. Return true if one of the rule's data member source is 'source'. ; Definition at line 690 of file TSchemaRule.cxx. ◆ HasTarget(). Bool_t TSchemaRule::HasTarget ; (; const TString & ; target); const. Return true if one of the rule's data member target is 'target'. ; Definition at line 672 of file TSchemaRule.cxx. ◆ IsA(). TClass * ROOT::TSchemaRule::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 120 of file TSchemaRule.h. ◆ IsAliasRule(). Bool_t TSchemaRule::IsAliasRule ; (; ); const. Return kTRUE if the rule is a strict renaming of one of the data member of the class. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:20667,simpl,simple,20667,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['simpl'],['simple']
Usability,"he values contained in the other arguments merged into itself. This is a convenience overload introduced for the ROOT Python API.; Example usage: // mv1, mv2 are std::unique_ptr<RMergeableVariations<TH1D>>; ROOT::Detail::RDF::MergeValues(*mv1, *mv2);; const auto &keys = mv1->GetKeys(); // Names of the variations; // Do stuff with the variations; for(const auto &key: keys){; const auto &histo = mv1->GetVariation(key); // Varied histogram; std::cout << histo.GetEntries() << ""\n"";; }. Definition at line 795 of file RMergeableValue.hxx. ◆ MergeValues() [3/3]. template<typename T , typename... Ts> . std::unique_ptr< RMergeableValue< T > > ROOT::Detail::RDF::MergeValues ; (; std::unique_ptr< RMergeableValue< T > > ; OutputMergeable, . std::unique_ptr< RMergeableValue< Ts > >... ; InputMergeables . ). Merge multiple RMergeableValue objects into one. ; Parameters. [in]OutputMergeableThe mergeable object where all the information will be aggregated. ; [in]InputMergeablesOther mergeables containing the partial results. . ReturnsAn RMergeableValue holding the aggregated value wrapped in an std::unique_ptr.; This is the recommended way of merging multiple RMergeableValue objects. This overload takes ownership of the mergeables and gives back to the user a mergeable with the aggregated information. All the mergeables with the partial results get destroyed in the process.; Example usage: using namespace ROOT::Detail::RDF;; // mh1, mh2, mh3 are std::unique_ptr<RMergeableValue<TH1D>>; auto mergedptr = MergeValues(std::move(mh1), std::move(mh2), std::move(mh3));; const auto &mergedhisto = mergedptr->GetValue(); // Final merged histogram; // Do stuff with it; mergedhisto.Draw();. Definition at line 727 of file RMergeableValue.hxx. ◆ RDFLogChannel(). ROOT::Experimental::RLogChannel & ROOT::Detail::RDF::RDFLogChannel ; (; ). Definition at line 37 of file RDFUtils.cxx. ROOTDetailRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:12992,Guid,Guide,12992,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html,1,['Guid'],['Guide']
Usability,"he weights. The weights are chosen randomly \n \; 1551 such that the variance of the values of the nodes is preserved for each layer. \n \; 1552 - XAVIERUNIFORM \n \; 1553 The same as XAVIER, but with uniformly distributed weights instead of gaussian weights \n \; 1554 - LAYERSIZE \n \; 1555 Random values scaled by the layer size \n \; 1556 \n \; 1557 \""TrainingStrategy\"" \n \; 1558 - example: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5|LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFraction=0.0,DropRepetitions=5\"" \n \; 1559 - explanation: two stacked training settings separated by \""|\"" \n \; 1560 . first training setting: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5\"" \n \; 1561 . second training setting : \""LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the next one \n \; 1569 . ConvergenceSteps : \n \; 1570 Assume that convergence is reached after \""ConvergenceSteps\"" cycles where no improvement \n \; 1571 of the error on the test samples has been found. (Mind that only at each \""TestRepetitions\"" \n \; 1572 cycle the test samples are evaluated and thus the convergence is checked) \n \; 1573 . BatchSize \n \; 1574 Size of the mini-batches. \n \; 1575 . TestRepetitions \n \; 1576 Perform testing the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:58316,Learn,LearningRate,58316,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Learn'],['LearningRate']
Usability,"heManager<RooAbsCacheElement>::wireCache(). Data Members; protected:. Bool_t_allowOptimize; static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndex! Last slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSize! Maximum size; vector<RooNormSetCache>RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; vector<RooAbsCacheElement*>RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen!; RooArgSet*_optCacheObservables! current optCacheObservables; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_size! Actual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 2, Bool_t clearCacheOnServerRedirect = kTRUE, Bool_t allowOptimize = kFALSE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooObjCacheManager.html:4115,clear,clearCacheOnServerRedirect,4115,root/html602/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html602/RooObjCacheManager.html,2,['clear'],['clearCacheOnServerRedirect']
Usability,"heck if name is in the list of Tree/Branch leaves. ; This member function redefines the function in ROOT::v5::TFormula If a leaf has a name corresponding to the argument name, then returns a new code.; A TTreeFormula may contain more than one variable. For each variable referenced, the pointers to the corresponding branch and leaf is stored in the object arrays fBranches and fLeaves.; name can be :; Leaf_Name (simple variable or data member of a ClonesArray); Branch_Name.Leaf_Name; Branch_Name.Method_Name; Leaf_Name[index]; Branch_Name.Leaf_Name[index]; Branch_Name.Leaf_Name[index1]; Branch_Name.Leaf_Name[][index2]; Branch_Name.Leaf_Name[index1][index2]. New additions:; Branch_Name.Leaf_Name[OtherLeaf_Name]; Branch_Name.Datamember_Name; '.' can be replaced by '->'; and. Branch_Name[index1].Leaf_Name[index2]; Leaf_name[index].Action().OtherAction(param); Leaf_name[index].Action()[val].OtherAction(param). The expected returned values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized, or is too long, or tree does not exist.; >=0 : the name has been recognized, return the internal code for this name. . Reimplemented from ROOT::v5::TFormula.; Definition at line 2698 of file TTreeFormula.cxx. ◆ EvalClass() [1/2]. TClass * TTreeFormula::EvalClass ; (; ); const. virtual . Evaluate the class of this treeformula. ; If the 'value' of this formula is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3597 of file TTreeFormula.cxx. ◆ EvalClass() [2/2]. TClass * TTreeFormula::EvalClass ; (; Int_t ; oper); const. protectedvirtual . Evaluate the class of the operation oper. ; If the 'value' in the requested operation is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3610 of file TTreeFormula.cxx. ◆ EvalInstance() [1/2]. template<typename T > . T TTreeFormula::EvalInstance ; (; Int_t ; instance = 0, . const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:36343,usab,usable,36343,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['usab'],['usable']
Usability,"heckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TCefTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TCefTimer(). TCefTimer::TCefTimer ; (; Long_t ; milliSec, . Bool_t ; mode . ). inline . Definition at line 35 of file RCefWebDisplayHandle.cxx. Member Function Documentation. ◆ Timeout(). void TCefTimer::Timeout ; (; ). inlineoverridevirtual . Reimplemented from TTimer.; Definition at line 36 of file RCefWebDisplayHandle.cxx. gui/cefdisplay/src/RCefWebDisplayHandle.cxx. TCefTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCefTimer.html:17539,Guid,Guide,17539,doc/master/classTCefTimer.html,https://root.cern,https://root.cern/doc/master/classTCefTimer.html,1,['Guid'],['Guide']
Usability,"heckMemUsage ; (; Long64_t & ; mfreq, . Bool_t & ; w80r, . Bool_t & ; w80v, . TString & ; wmsg . ). protected . Check the memory usage, if requested. ; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or resident limits are depassed. ; Definition at line 1512 of file TProofPlayer.cxx. ◆ Class(). static TClass * TProofPlayer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 228 of file TProofPlayer.h. ◆ ClearInput(). void TProofPlayer::ClearInput ; (; ). overridevirtual . Clear input list. ; Implements TVirtualProofPlayer.; Definition at line 468 of file TProofPlayer.cxx. ◆ CreateDrawFeedback(). TDrawFeedback * TProofPlayer::CreateDrawFeedback ; (; TProof * ; p). overridevirtual . Draw feedback creation proxy. ; When accessed via TProof avoids link dependency on libProofPlayer. ; Implements TVirtualProofPlayer.; Definition at line 733 of file TProofPlayer.cxx. ◆ DeclFileName(). static const char * TProofPlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 228 of file TProofPlayer.h. ◆ DeleteDrawFeedback(). void TProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). overridevirtual . Delete draw feedback object. ; Implements TVirtualProofPlayer.; Definition at line 750 of file TProofPlayer.cxx. ◆ DrawCanvas(). Int_t TProofPlayer::DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:27087,feedback,feedback,27087,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"heckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidTBufferFile::operator=(const TBufferFile&); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElement(TStreamerEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferXML.html:19134,simpl,simple,19134,root/html530/TBufferXML.html,https://root.cern,https://root.cern/root/html530/TBufferXML.html,3,['simpl'],['simple']
Usability,"heckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety); 243{; 244 fChecker->CheckPoint(x, y, z, option, safety);; 245}; 246 ; 247////////////////////////////////////////////////////////////////////////////////; 248/// Test for shape navigation methods. Summary for test numbers:; 249/// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; 250/// directions randomly in cos(theta). Compute DistFromInside and move the; 251/// point with bigger distance. Compute DistFromOutside back from new point.; 252/// Plot d-(d1+d2); 253 ; 254void TGeoPainter::CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option); 255{; 256 fChecker->CheckShape(shape, testNo, nsamples, option);; 257}; 258 ; 259////////////////////////////////////////////////////////////////////////////////; 260/// Clear the list of visible volumes; 261/// reset the kVisOnScreen bit for volumes previously in the list; 262 ; 263void TGeoPainter::ClearVisibleVolumes(); 264{; 265 if (!fVisVolumes); 266 return;; 267 TIter next(fVisVolumes);; 268 TGeoVolume *vol;; 269 while ((vol = (TGeoVolume *)next())) {; 270 vol->ResetAttBit(TGeoAtt::kVisOnScreen);; 271 }; 272 fVisVolumes->Clear();; 273}; 274 ; 275////////////////////////////////////////////////////////////////////////////////; 276/// Define 100 colors with increasing light intensities for each basic color (1-7); 277/// Register these colors at indexes starting with 1000.; 278 ; 279void TGeoPainter::DefineColors() const; 280{; 281 static Int_t color = 0;; 282 if (!color) {; 283 TColor::InitializeColors();; 284 for (auto icol = 1; icol < 10; ++icol); 285 color = GetColor(icol, 0.5);; 286 }; 287}; 288 ; 289////////////////////////////////////////////////////////////////////////////////; 290/// Get index of a base color with given light intensity (0,1); 291 ; 292Int_t TGeoPainter::GetColor(Int_t base, Float_t light) const; 293{; 294 using IntMap_t = std::map<Int_t, Int_t>;; 295 constexpr Int_t ncolors = 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:8852,Clear,Clear,8852,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,3,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"heckcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of approach from point px,py to a volume. void DefaultAngles(); Set default angles for the current view. void DefaultColors(); Set default volume colors according to tracking media. Int_t CountNodes(TGeoVolume* vol, Int_t level) const; Count number of visible nodes down to a given level. Int_t CountVisibleNodes(); Count total number of visible nodes. void CheckEdit(); Check if Ged library is loaded and load geometry editor classe. void EditGeometry(Option_t* option = """"); Start the geometry editor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPainter.html:14664,Clear,ClearVisibleVolumes,14664,root/html530/TGeoPainter.html,https://root.cern,https://root.cern/root/html530/TGeoPainter.html,6,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"hed covariance matrix (NxN); shared_ptr<ROOT::Fit::FitData>fFitData! data of the fit; shared_ptr<ROOT::Fit::Fitter>fFitter! pointer to fitter object; ROOT::Math::Minimizer*fMinimizer; ROOT::Math::IParamMultiFunction*fModelFunc; ROOT::Math::IMultiGenFunction*fObjFunc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBackCompFitter(); Constructur needed by TVirtualFitter interface. Same behavior as default constructor.; initialize setting name and the global pointer. TBackCompFitter(const shared_ptr<ROOT::Fit::Fitter>& fitter, const shared_ptr<ROOT::Fit::FitData>& data); constructor used after having fit using directly ROOT::Fit::Fitter; will create a dummy fitter copying configuration and parameter settings. ~TBackCompFitter(); destructor - delete the managed objects. Double_t Chisquare(Int_t npar, Double_t* params) const; do chisquare calculations in case of likelihood fits; do evaluation a the minimum only. void Clear(Option_t* option = """"); clear resources for consecutive fits. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); execute the command (Fortran Minuit compatible interface). bool ValidParameterIndex(int ipar) const; check if ipar is a valid parameter index. void FixParameter(Int_t ipar); fix the paramter; std::cout<<""FixParameter""<<std::endl;. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.94999999999999996); Computes confidence intervals at level cl. Default is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBackCompFitter.html:13351,Clear,Clear,13351,root/html604/TBackCompFitter.html,https://root.cern,https://root.cern/root/html604/TBackCompFitter.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"hed"", ""moment morphing"", ""L""); legend1.Draw(); ; if single_canvas:; c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); else:; c.SaveAs(""rf615_plot_1.png""); c = ROOT.TCanvas("""", """", 600, 600); ; frame2.Draw(); ; legend2 = ROOT.TLegend(0.53, 0.73, 0.87, 0.87); legend2.SetFillColor(ROOT.kWhite); legend2.SetLineColor(ROOT.kWhite); legend2.SetTextSize(0.04); legend2.AddEntry(""learned_ratio"", ""learned (SBI)"", ""L""); legend2.AddEntry(""exact"", ""true ratio"", ""L""); legend2.Draw(); ; if not single_canvas:; c.SaveAs(""rf615_plot_2.png""); ; # Compute the minimum via minuit and display the results; for nll in [nll_gauss, nllr_learned, nll_morph]:; minimizer = ROOT.RooMinimizer(nll); minimizer.setErrorLevel(0.5) # Adjust the error level in the minimization to work with likelihoods; minimizer.setPrintLevel(-1); minimizer.minimize(""Minuit2""); result = minimizer.save(); ROOT.SetOwnership(result, True); result.Print(); ; del nll_morph; del nllr_learned; del nll_gauss; del workspace; ; import sys; ; # Hack to bypass ClearProxiedObjects(); del sys.modules[""libROOTPythonizations""]; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; ; RooWorkspace() contents; ; variables; ---------; (mu,x); ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:9727,Clear,ClearProxiedObjects,9727,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['Clear'],['ClearProxiedObjects']
Usability,hen new data are given. ; Definition at line 207 of file TKDE.h. ◆ fPDF. TF1* TKDE::fPDF. private . Definition at line 193 of file TKDE.h. ◆ fRho. Double_t TKDE::fRho. private . Adjustment factor for sigma. ; Definition at line 220 of file TKDE.h. ◆ fSettedOptions. std::vector<Bool_t> TKDE::fSettedOptions. private . User input options flag. ; Definition at line 230 of file TKDE.h. ◆ fSigma. Double_t TKDE::fSigma. private . Data std deviation. ; Definition at line 216 of file TKDE.h. ◆ fSigmaRob. Double_t TKDE::fSigmaRob. private . Data std deviation (robust estimation) ; Definition at line 217 of file TKDE.h. ◆ fSumOfCounts. Double_t TKDE::fSumOfCounts. private . Data sum of weights. ; Definition at line 212 of file TKDE.h. ◆ fUpperPDF. TF1* TKDE::fUpperPDF. private . Output Kernel Density Estimation PDF function. ; Definition at line 194 of file TKDE.h. ◆ fUseBins. Bool_t TKDE::fUseBins. private . Definition at line 206 of file TKDE.h. ◆ fUseBinsNEvents. UInt_t TKDE::fUseBinsNEvents. private . If the algorithm is allowed to use automatic (relaxed) binning this is the minimum number of events to do so. ; Definition at line 213 of file TKDE.h. ◆ fUseMinMaxFromData. Bool_t TKDE::fUseMinMaxFromData. private . Flag top control if min and max must be used from data. ; Definition at line 208 of file TKDE.h. ◆ fUseMirroring. Bool_t TKDE::fUseMirroring. private . Definition at line 205 of file TKDE.h. ◆ fWeightSize. Double_t TKDE::fWeightSize. private . Caches the weight size. ; Definition at line 223 of file TKDE.h. ◆ fXMax. Double_t TKDE::fXMax. private . Data maximum value. ; Definition at line 219 of file TKDE.h. ◆ fXMin. Double_t TKDE::fXMin. private . Data minimum value. ; Definition at line 218 of file TKDE.h. Libraries for TKDE:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TKDE.h; hist/hist/src/TKDE.cxx. TKDE. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDE.html:41779,Guid,Guide,41779,doc/master/classTKDE.html,https://root.cern,https://root.cern/doc/master/classTKDE.html,1,['Guid'],['Guide']
Usability,"hen used to display the final difference between background and signal events. The figure “The neural net output” shows this plot. The neural net output. As it can be seen, this is a quite efficient technique. As mentioned earlier, neural networks are also used for fitting function. For some application with a cylindrical symmetry, a magnetic field simulation gives as output the angular component of the potential vector A, as well as the radial and z components of the B field.; One wants to fit those distributions with a function in order to plug them into the Geant simulation code. Polynomial fits could be tried, but it seems difficult to reach the desired precision over the full range. One could also use a spline interpolation between known points. In all cases, the resulting field would not be C-infinite.; An example of output (for Br) is shown. First the initial function can be seen as the target. Then, the resulting (normalized) neural net output. In order to ease the learning, the “normalize output” was used here. The initial amplitude can be recovered by multiplying by the original RMS and then shifting by the original mean. The original and the neural net for Br. 6 A Little C++. This chapter introduces you to some useful insights into C++, to allow you to use some of the most advanced features in ROOT. It is in no case a full course in C++.; 6.1 Classes, Methods and Constructors; C++ extends C with the notion of a class. If you’re used to structures in C, a class is a struct that is a group of related variables, which is extended with functions and routines specific to this structure (class). What is the interest? Consider a struct that is defined this way:; struct Line {; float x1;; float y1;; float x2;; float y2;; }; This structure represents a line to be drawn in a graphical window. (x1,y1) are the coordinates of the first point, (x2,y2) the coordinates of the second point. In the standard C, if you want to draw effectively such a line, you first have to d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:241395,learn,learning,241395,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learning']
Usability,"her with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; }. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; }. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; }. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; }. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-03-14 16:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofProgressStatus.html:8595,learn,learnTime,8595,root/html534/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html534/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"her with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; }. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; }. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; }. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; }. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressStatus.html:9222,learn,learnTime,9222,root/html604/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"her with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; }. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; }. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; }. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; }. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressStatus.html:9222,learn,learnTime,9222,root/html602/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html602/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"her. They interact and allow method calls of other object’s methods. The idea is simple: any object can send out (emit) a signal in certain situations saying that something happened. This is all it does to communicate and it does not know whether anything is interested in this information. On the other side there might be an object waiting for that signal and ready to react to it. This object disposes of special instruments to listen to the sent out signals. To have a communication we need a message transmission between the objects. In this simple example we use signals and slots. The code of the method TGButton::Clicked() is:; virtual void Clicked() { Emit(""Clicked()""); } // *SIGNAL*; I.e. any button emits the signal Clicked() any time someone clicks on it. As you can see this method is virtual and could be overridden if you need to. In our simple example we call the Connect() method to connect the Clicked() signal of Draw button with MyMainFrame::DoDraw():; draw->Connect(""Clicked()"",""MyMainFrame"",this,""DoDraw()"");; In the same way we can connect to the signal Clicked() of the Exit button with the system call gApplication->Terminate(0). We declare a new slot DoExit(), implement it to invoke the termination call and associate this slot with the signal Clicked() of the Exit button.; The code of example.C can be changed as follows:; public:; ...; void DoExit(); // a new slot is added; }; void MyMainFrame::DoExit() {; gApplication->Terminate(0);; }; MyMainFrame::MyMainFrame(const TGWindow *p,UInt_t w,UInt_t h) {; ...; TGTextButton *exit = new TGTextButton(hframe,""&Exit "");; // connects signal Clicked() with slot DoExit(); exit->Connect(""Clicked()"",""MyMainFrame"",this,""DoExit()"");; ...; }; Here is an abstract view of the signal/slots connections in example.C:. To benefit from this mechanism your classes must inherit from TQObject or otherwise the class definition must start with RQ_OBJECT(""ClassName"")macro. This macro allows the signals/slots communication mechanism to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1164378,simpl,simple,1164378,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Manuals. Title; Quick Link; All Links. RooFit; Manual (pdf) / Quick Start Guide (pdf); other formats. HTTP Server; 6 Series (html); all versions. JSROOT; 6 Series (html); all versions. CERNLib; (pdf); -. Minuit; (pdf); -. Minuit2; 6 Series (html); all formats and series. TSpectrum; 6 Series (html); all formats and series. TMVA; 6 Series (pdf); other links. PROOF; Drupal Book; other resources. VMC; Drupal Book; -. In a Nutshell. Title; Link. Input and Output; Drupal. Trees in 5 steps; Drupal. Interpreter; Drupal Book. Cling; Drupal Book. Math Libraries; Drupal Book. 2D-graphics; Drupal Book. 3D-graphics; Drupal Book. RooFit in 20 Minutes; Drupal. The ROOT GUI Classes; Drupal. Introduction to Cint;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:1914,Guid,Guides,1914,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['Guid'],['Guides']
Usability,"herefore it is not recommended to use it in new long-term production code. But, depending on the context, using TTask might still be a valid solution. More...;  ; class  TTime;  Basic time type with millisecond precision. More...;  ; class  TTimer;  Handles synchronous and a-synchronous timer events. More...;  ; class  TTimeStamp;  The TTimeStamp encapsulates seconds and ns since EPOCH. More...;  ; class  TUri;  This class represents a RFC 3986 compatible URI. More...;  ; class  TUrl;  This class represents a WWW compatible URL. More...;  ; class  TUUID;  This class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). More...;  ; class  TVersionCheck;  Used to check if the shared library or plugin is compatible with the current version of ROOT. More...;  ; class  TVirtualFFT;  TVirtualFFT is an interface class for Fast Fourier Transforms. More...;  ; class  TVirtualMapFile;  Abstract base class for TMapFile. More...;  ; class  TVirtualMonitoring;  Provides the interface for externel Monitoring. More...;  ; class  TVirtualMutex;  This class implements a mutex interface. More...;  ; class  TVirtualPad;  TVirtualPad is an abstract base class for the Pad and Canvas classes. More...;  ; class  TVirtualPadEditor;  Abstract base class used by ROOT graphics editor. More...;  ; class  TVirtualPadPainter;  To make it possible to use GL for 2D graphic in a TPad/TCanvas. More...;  ; class  TVirtualPerfStats;  Provides the interface for the PROOF internal performance measurement and event tracing. More...;  ; class  TVirtualPS;  TVirtualPS is an abstract interface to Postscript, PDF, SVG. More...;  ; class  TVirtualViewer3D;  Abstract 3D shapes viewer. More...;  ; class  TVirtualX;  Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:9726,Guid,Guide,9726,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['Guid'],['Guide']
Usability,"heritance diagram for TProofProgressMemoryPlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofProgressMemoryPlot(). TProofProgressMemoryPlot::TProofProgressMemoryPlot ; (; TProofProgressDialog * ; d, . Int_t ; w = 700, . Int_t ; h = 300 . ). Main constructor. ; Definition at line 54 of file TProofProgressMemoryPlot.cxx. ◆ ~TProofProgressMemoryPlot(). TProofProgressMemoryPlot::~TProofProgressMemoryPlot ; (; ). override . Destructor. ; Definition at line 121 of file TProofProgressMemoryPlot.cxx. Member Function Documentation. ◆ BuildLogList(). TGListBox * TProofProgressMemoryPlot::BuildLogList ; (; TGFrame * ; parent). protected . Build the list of workers. ; For this, extract the logs and take the names of TProofLogElements ; Definition at line 145 of file TProofProgressMemoryPlot.cxx. ◆ Clear(). void TProofProgressMemoryPlot::Clear ; (; Option_t * ; = nullptr). overridevirtual . Clear the canvases. ; Reimplemented from TObject.; Definition at line 181 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlot(). TGraph * TProofProgressMemoryPlot::DoAveragePlot ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . Create the average plots. ; Definition at line 381 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlotOld(). TGraph * TProofProgressMemoryPlot::DoAveragePlotOld ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . ◆ DoMasterPlot(). TGraph * TProofProgressMemoryPlot::DoMasterPlot ; (; TProofLogElem * ; ple). protected . a master or submaster log display without meaningful labels for now ; Definition at line 609 of file TProofProgressMemoryPlot.cxx. ◆ DoPlot(). void TProofProgressMemoryPlot::DoPlot ; (; ). Draw the plot from the logs. ; Definition at line 192 of file TProofProgressMemoryPlot.cxx. ◆ DoWorkerPlot(). TGraph * TProofProgressMemoryPlot::DoWorkerPlot ; (; TProofLogElem * ; ple). protected . Make a memory consumption graph for a worker. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:37978,Clear,Clear,37978,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['Clear'],['Clear']
Usability,"herited Members; Includes; Libraries. Function documentation; TGeoManager(); Default constructor. TGeoManager(const char* name, const char* title); Constructor. void Init(); Initialize manager class. TGeoManager(const TGeoManager& ); copy constructor. TGeoManager& operator=(const TGeoManager& ); assignment operator. ~TGeoManager(); Destructor. Int_t AddMaterial(const TGeoMaterial* material); Add a material to the list. Returns index of the material in list. Int_t AddOverlap(const TNamed* ovlp); Add an illegal overlap/extrusion to the list. Int_t AddTransformation(const TGeoMatrix* matrix); Add a matrix to the list. Returns index of the matrix in list. Int_t AddShape(const TGeoShape* shape); Add a shape to the list. Returns index of the shape in list. Int_t AddTrack(Int_t id, Int_t pdgcode, TObject* particle = 0); Add a track to the list of tracks. Use this for primaries only. For secondaries,; add them to the parent track. The method create objects that are registered; to the analysis manager but have to be cleaned-up by the user via ClearTracks(). Int_t AddTrack(TVirtualGeoTrack* track); Add a track to the list of tracks. TVirtualGeoTrack * MakeTrack(Int_t id, Int_t pdgcode, TObject* particle); Makes a primary track but do not attach it to the list of tracks. The track; can be attached as daughter to another one with TVirtualGeoTrack::AddTrack. Int_t AddVolume(TGeoVolume* volume); Add a volume to the list. Returns index of the volume in list. Int_t AddNavigator(TGeoNavigator* navigator); Add a navigator in the list of navigators. If it is the first one make it; current navigator. Bool_t SetCurrentNavigator(Int_t index); Switch to another navigator. void Browse(TBrowser* b); Describe how to browse this object. void Edit(Option_t* option = """"); Append a pad for this geometry. void SetVisibility(TObject* obj, Bool_t vis); Set visibility for a volume. void BombTranslation(const Double_t* tr, Double_t* bombtr); Get the new 'bombed' translation vector according current e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:36574,Clear,ClearTracks,36574,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,2,['Clear'],['ClearTracks']
Usability,"herited Members; Includes; Libraries. Function documentation; TGeoManager(); Default constructor. TGeoManager(const char* name, const char* title); Constructor. void Init(); Initialize manager class. TGeoManager(const TGeoManager& ); copy constructor. TGeoManager& operator=(const TGeoManager& ); assignment operator. ~TGeoManager(); Destructor. Int_t AddMaterial(const TGeoMaterial* material); Add a material to the list. Returns index of the material in list. Int_t AddOverlap(const TNamed* ovlp); Add an illegal overlap/extrusion to the list. Int_t AddTransformation(const TGeoMatrix* matrix); Add a matrix to the list. Returns index of the matrix in list. Int_t AddShape(const TGeoShape* shape); Add a shape to the list. Returns index of the shape in list. Int_t AddTrack(Int_t id, Int_t pdgcode, TObject* particle = 0); Add a track to the list of tracks. Use this for primaries only. For secondaries,; add them to the parent track. The method create objects that are registered; to the analysis manager but have to be cleaned-up by the user via ClearTracks(). Int_t AddTrack(TVirtualGeoTrack* track); Add a track to the list of tracks. TVirtualGeoTrack * MakeTrack(Int_t id, Int_t pdgcode, TObject* particle); Makes a primary track but do not attach it to the list of tracks. The track; can be attached as daughter to another one with TVirtualGeoTrack::AddTrack. Int_t AddVolume(TGeoVolume* volume); Add a volume to the list. Returns index of the volume in list. TGeoNavigator * AddNavigator(); Add a navigator in the list of navigators. If it is the first one make it; current navigator. TGeoNavigator * GetCurrentNavigator() const; Returns current navigator for the calling thread. TGeoNavigatorArray * GetListOfNavigators() const; Get list of navigators for the calling thread. Bool_t SetCurrentNavigator(Int_t index); Switch to another existing navigator for the calling thread. void SetNavigatorsLock(Bool_t flag); Set the lock for navigators. void ClearNavigators(); Clear all navigators. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:37994,Clear,ClearTracks,37994,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['Clear'],['ClearTracks']
Usability,"herited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/WrappedFunction.h>. Inheritance diagram for ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ WrappedMemFunction(). template<typename FuncObj , typename MemFuncPtr > . ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >::WrappedMemFunction ; (; FuncObj & ; obj, . MemFuncPtr ; memFn . ). inline . construct from the pointer to the object and the member function ; Definition at line 103 of file WrappedFunction.h. Member Function Documentation. ◆ Clone(). template<typename FuncObj , typename MemFuncPtr > . WrappedMemFunction * ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >::Clone ; (; ); const. inlineoverridevirtual . clone (required by the interface) ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 111 of file WrappedFunction.h. ◆ DoEval(). template<typename FuncObj , typename MemFuncPtr > . double ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . implementation of the evaluation function. Must be implemented by derived classes ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 118 of file WrappedFunction.h. Member Data Documentation. ◆ fMemFunc. template<typename FuncObj , typename MemFuncPtr > . MemFuncPtr ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >::fMemFunc. private . Definition at line 124 of file WrappedFunction.h. ◆ fObj. template<typename FuncObj , typename MemFuncPtr > . FuncObj* ROOT::Math::WrappedMemFunction< FuncObj, MemFuncPtr >::fObj. private . Definition at line 123 of file WrappedFunction.h. math/mathcore/inc/Math/WrappedFunction.h. ROOTMathWrappedMemFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html:3616,Guid,Guide,3616,doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemFunction.html,1,['Guid'],['Guide']
Usability,"herited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TIdleTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIdleTimer(). TIdleTimer::TIdleTimer ; (; Long_t ; ms). inline . Definition at line 62 of file TApplication.cxx. Member Function Documentation. ◆ Notify(). Bool_t TIdleTimer::Notify ; (; ). overridevirtual . Notify handler. ; Implements TSysEvtHandler.; Definition at line 69 of file TApplication.cxx. core/base/src/TApplication.cxx. TIdleTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTimer.html:17526,Guid,Guide,17526,doc/master/classTIdleTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html,1,['Guid'],['Guide']
Usability,"hese points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 617 of file TGeoShapeAssembly.cxx. ◆ SavePrimitive(). void TGeoShapeAssembly::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at line 542 of file TGeoShapeAssembly.cxx. ◆ SetPoints() [1/2]. void TGeoShapeAssembly::SetPoints ; (; Double_t * ; points); const. overridevirtual . No mesh for assemblies. ; Reimplemented from TGeoBBox.; Definition at line 547 of file TGeoShapeAssembly.cxx. ◆ SetPoints() [2/2]. void TGeoShapeAssembly::SetPoints ; (; Float_t * ; points); const. overridevirtual . No mesh for assemblies. ; Reimplemented from TGeoBBox.; Definition at line 555 of file TGeoShapeAssembly.cxx. ◆ SetSegsAndPols(). void TGeoShapeAssembly::SetSegsAndPols ; (; TBuffer3D & ; buff); const. overridevirtual . Fill TBuffer3D structure for segments and polygons. ; Reimplemented from TGeoBBox.; Definition at line 467 of file TGeoShapeAssembly.cxx. ◆ Streamer(). void TGeoShapeAssembly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoShapeAssembly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TGeoShapeAssembly.h. Member Data Documentation. ◆ fBBoxOK. Bool_t TGeoShapeAssembly::fBBoxOK. protected . Definition at line 23 of file TGeoShapeAssembly.h. ◆ fVolume. TGeoVolumeAssembly* TGeoShapeAssembly::fVolume. protected . Definition at line 22 of file TGeoShapeAssembly.h. Libraries for TGeoShapeAssembly:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoShapeAssembly.h; geom/geom/src/TGeoShapeAssembly.cxx. TGeoShapeAssembly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShapeAssembly.html:32749,Guid,Guide,32749,doc/master/classTGeoShapeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoShapeAssembly.html,1,['Guid'],['Guide']
Usability,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:28370,simpl,simply,28370,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simply']
Usability,"hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definition at line 76 of file RGeomData.hxx. ◆ matr. std::vector<float> ROOT::RGeomNode::matr. matrix for the node, can have reduced number of elements ; Definition at line 73 of file RGeomData.hxx. ◆ nfaces. int ROOT::RGeomNode::nfaces {0}. ! number of shape faces ; Definition at line 75 of file RGeomData.hxx. ◆ opacity. float ROOT::RGeomNode::opacity {1.}. ! opacity of the color ; Definition at line 78 of file RGeomData.hxx. ◆ useflag. bool ROOT::RGeomNode::useflag {false}. ! extra flag, used for selection ; Definition at line 77 of file RGeomData.hxx. ◆ vol. double ROOT::RGeomNode::vol {0}. ! volume estimation ; Definition at line 74 of file RGeomData.hxx. Libraries for ROOT::RGeomNode:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNode.html:3118,Guid,Guide,3118,doc/master/classROOT_1_1RGeomNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html,1,['Guid'],['Guide']
Usability,"hi);; 230 double py = pt * std::sin(phi);; 231 double pz = pt * (1. / (std::tan(2*std::atan(std::exp(-eta)))));; 232 ; 233 // printf(""Event::MakeParticles %2d: pt=%.2f, eta=%.2f, phi=%.2f\n"", i, pt, eta, phi);; 234 auto particle = new TParticle(0, 0, 0, 0, 0, 0,; 235 px, py, pz, std::sqrt(px*px + py*py + pz*pz + 80*80),; 236 0, 0, 0, 0 );; 237 ; 238 int pdg = 11 * (r.Integer(2) > 0 ? 1 : -1);; 239 particle->SetPdgCode(pdg);; 240 ; 241 list->Add(particle);; 242 }; 243 fListData.push_back(list);; 244 }; 245 ; 246 void MakeRecHits(int N); 247 {; 248 TRandom &r = *gRandom;; 249 r.SetSeed(0);; 250 TList* list = new TList();; 251 list->SetName(""RecHits"");; 252 ; 253 for (int i = 1; i <= N; ++i); 254 {; 255 float pt = r.Uniform(0.5, 10);; 256 float x = r.Uniform(-200, 200);; 257 float y = r.Uniform(-200, 200);; 258 float z = r.Uniform(-500, 500);; 259 auto rechit = new RecHit(pt, x, y, z);; 260 list->Add(rechit);; 261 }; 262 fListData.push_back(list);; 263 }; 264 ; 265 void Clear(); 266 {; 267 for (auto &l : fListData); 268 delete l;; 269 fListData.clear();; 270 }; 271 ; 272 void Create(); 273 {; 274 Clear();; 275 MakeJets(4);; 276 MakeParticles(100);; 277 MakeRecHits(20);; 278 ; 279 // refill calo data from jet list; 280 TList* jlist = fListData[0];; 281 TList* elist = new TList();; 282 elist->SetName(""ECAL"");; 283 fListData.push_back(elist);; 284 TList* hlist = new TList();; 285 hlist->SetName(""HCAL"");; 286 fListData.push_back(hlist);; 287 for (int i = 0; i <= jlist->GetLast(); ++i) {; 288 const Jet* j = (Jet*)jlist->At(i);; 289 float offX = j->Eta();; 290 float offY = j->Phi() > TMath::Pi() ? j->Phi() - TMath::TwoPi() : j->Phi();; 291 for (int k=0; k<20; ++k) {; 292 double x, y, v;; 293 x = gRandom->Uniform(-j->GetEtaSize(), j->GetEtaSize());; 294 y = gRandom->Uniform(-j->GetPhiSize(),j->GetPhiSize());; 295 v = j->Pt();; 296 auto etower = new RCaloTower(offX + x, offY + y, v + gRandom->Uniform(2,3));; 297 elist->Add(etower);; 298 auto htower = new RCaloTower(offX + x, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:8675,Clear,Clear,8675,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,1,['Clear'],['Clear']
Usability,"hi2Sys(); Bool_tGetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; voidGetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); Double_tTUnfold::GetEpsMatrix() const; voidTUnfold::GetFoldedOutput(TH1* folded, const Int_t* binMap = 0) const; virtual const char*TObject::GetIconName() const; voidTUnfold::GetInput(TH1* inputData, const Int_t* binMap = 0) const; voidTUnfold::GetInputInverseEmatrix(TH2* ematrix); voidTUnfold::GetL(TH2* l) const; virtual Double_tTUnfold::GetLcurveX() const; virtual Double_tTUnfold::GetLcurveY() const; voidTUnfold::GetLsquared(TH2* lsquared) const; virtual const char*TObject::GetName() const; Int_tTUnfold::GetNdf() const; voidTUnfold::GetNormalisationVector(TH1* s, const Int_t* binMap = 0) const; Int_tTUnfold::GetNpar() const; Int_tTUnfold::GetNr() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidTUnfold::GetOutput(TH1* output, const Int_t* binMap = 0) const; voidTUnfold::GetProbabilityMatrix(TH2* A, TUnf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:6454,clear,clearEmat,6454,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['clear'],['clearEmat']
Usability,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:18160,clear,cleared,18160,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,2,['clear'],['cleared']
Usability,"hifts of each source). unfold.GetDeltaSysBackgroundScale(bgr1shifts,""bgr1"");; unfold.GetDeltaSysBackgroundScale(bgr2shifts,""bgr2"");; unfold.GetDeltaSysSource(sys1shifts,""syserror1"");; unfold.GetDeltaSysSource(sys2shifts,""syserror2"");. retreive errors from uncorrelated sources; In the example, there are four sources of uncorrelated error; * the input vector (statistical errors of the data); * the input matrix histA (Monte Carlo statistical errors); * the errors on bgr1 (Monte Carlo statistical errors); * the errors on bgr2 (Monte Carlo statistical errors); These errors are returned as error matrices. unfold.GetEmatrixInput(stat_error);; unfold.GetEmatrixSysUncorr(uncorr_sys);; unfold.GetEmatrixSysBackgroundUncorr(bgr1uncorr,""bgr1"");; unfold.GetEmatrixSysBackgroundUncorr(bgr2uncorr,""bgr2"");. Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the .GetEmatrixXXX methods is set to kFALSE, the; histogram is not cleared, but the error matrix is simply added.; Example: add all errors from background subtraction. unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr1"",0,kTRUE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr1"",0,kFALSE);; unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr2"",0,kFALSE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr2"",0,kFALSE);. There is a special function to get the total error:; unfold.GetEmatrixTotal(err_total);. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintNone); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:5065,clear,cleared,5065,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,"['clear', 'simpl']","['cleared', 'simply']"
Usability,"hild, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidChangeTab(Int_t tabIndex, Bool_t emit = kTRUE); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGTab(const TGTab&); TGTab&operator=(const TGTab&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTab.html:16668,Clear,ClearFlags,16668,root/html528/TGTab.html,https://root.cern,https://root.cern/root/html528/TGTab.html,4,['Clear'],['ClearFlags']
Usability,"hildFrame, . Pixel_t ; back = GetDefaultFrameBackground() . ). constructor ; Definition at line 40 of file TG3DLine.cxx. Member Function Documentation. ◆ Class(). static TClass * TGHorizontal3DLine::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGHorizontal3DLine::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGHorizontal3DLine::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 29 of file TG3DLine.h. ◆ DeclFileName(). static const char * TGHorizontal3DLine::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 29 of file TG3DLine.h. ◆ DrawBorder(). void TGHorizontal3DLine::DrawBorder ; (; ). overridevirtual . draw border ; Reimplemented from TGFrame.; Definition at line 51 of file TG3DLine.cxx. ◆ IsA(). TClass * TGHorizontal3DLine::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 29 of file TG3DLine.h. ◆ SavePrimitive(). void TGHorizontal3DLine::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an vertical 3D line as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 62 of file TG3DLine.cxx. ◆ Streamer(). void TGHorizontal3DLine::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGHorizontal3DLine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 29 of file TG3DLine.h. Libraries for TGHorizontal3DLine:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TG3DLine.h; gui/gui/src/TG3DLine.cxx. TGHorizontal3DLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontal3DLine.html:29180,Guid,Guide,29180,doc/master/classTGHorizontal3DLine.html,https://root.cern,https://root.cern/doc/master/classTGHorizontal3DLine.html,1,['Guid'],['Guide']
Usability,"hildFrame, Pixel_t back = GetDefaultFrameBackground()); TGLabel(const TGWindow* p = 0, const char* text = 0, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGLabel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidChangeText(const char* newText)MENU ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); virtual voidDisable(Bool_t on = kTRUE)TOGGLE GETTER ; Bool_tTQOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLabel.html:1496,Clear,Clear,1496,root/html528/TGLabel.html,https://root.cern,https://root.cern/root/html528/TGLabel.html,4,['Clear'],['Clear']
Usability,"hing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/clingutils/res/TClingUtils.h>. Inheritance diagram for ROOT::TMetaUtils::TClingLookupHelper:. This browser is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:1214,simpl,simple,1214,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,1,['simpl'],['simple']
Usability,"his TreeFileMap. ;  ; virtual void DrawObject ();  Draw object at the mouse position. ;  ; virtual void DumpObject ();  Dump object at the mouse position. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual void InspectObject ();  Inspect object at the mouse position. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint this TFileDrawMap. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:3899,Clear,Clear,3899,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,1,['Clear'],['Clear']
Usability,"his class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); Save the partial results of this query to a dedicated file under the user; data directory. The file name has the form; <session_tag>.q<query_seq_num>.root; The file pat and the file are created if not existing already.; Only objects in the outputlist not being TProofOutputFile are saved.; The packets list 'packets' is saved if given.; Trees not attached to any file are attached to the open file.; If 'queryend' is kTRUE evrything is written out (TTrees included).; The actual saving action is controlled by 'force' and by fSavePartialResults; fSaveResultsPerPacket:. fSavePartialResults = kFALSE/kTRUE no-saving/saving; fSaveResultsPerPacket = kFALSE/kTRUE save-per-query/save-per-packet. The function CheckMemUsage sets fSavePartialResults = 1 if fSaveMemThreshold > 0 and; ProcInfo_t::fMemResident >= fSaveMemThreshold: from that point on partial results; are always saved and expens",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:17841,feedback,feedback,17841,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"his class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); Update automatic binning parameters for give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:16482,feedback,feedback,16482,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"his class)THnC, THnT<Char_t>. Function Members (Methods); public:. THnT<char>(); THnT<char>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<char>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_char_.html:2219,Clear,Clear,2219,root/html534/THnT_char_.html,https://root.cern,https://root.cern/root/html534/THnT_char_.html,1,['Clear'],['Clear']
Usability,"his class)THnL, THnT<Long_t>. Function Members (Methods); public:. THnT<long>(); THnT<long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_long_.html:2219,Clear,Clear,2219,root/html534/THnT_long_.html,https://root.cern,https://root.cern/root/html534/THnT_long_.html,1,['Clear'],['Clear']
Usability,"his complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:59534,simpl,simple,59534,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"his method to implement an ""abstract"" method that you don't; want to leave purely abstract. void MayNotUse(const char* method) const; Use this method to signal that a method (defined in a base class); may not be called in a derived class (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TObject.h 34221 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObject.html:18553,Clear,Clear,18553,root/html528/TObject.html,https://root.cern,https://root.cern/root/html528/TObject.html,1,['Clear'],['Clear']
Usability,"his object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings ("""").",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:19234,Clear,ClearProjectedList,19234,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,3,['Clear'],['ClearProjectedList']
Usability,"his object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:45581,clear,clearEvalErrorLog,45581,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,6,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"his point you can use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to build automatically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:32283,simpl,simple,32283,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,1,['simpl'],['simple']
Usability,"histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0). * * *. b(bezier) set the Bezier smoothing.; For Simple display modes group and for Grid, LinesX and LinesY display; modes one can smooth data using Bezier smoothing algorithm. The function; does not apply for other display modes groups and display modes. Possible; values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0). * * *. cw(width) set the contour width.; This function applies only for the Contours display mode. One can change; the width between horizontal slices and thus their density.; Default value: cw(50). * * *. lhw(weight) set the light height weight.; For LightHeight display modes group one can change the weight between; both shading algorithms. The function does not apply for other display; modes groups. Default value is lhw(0.5). * * *. cm(enable,color,width,height,style) allows to draw a marker on each node.; In addition to the surface drawn using any above given algorithm one can; display channel marks. One can control the color as well as the width,; height (in pixels) and the style of the marks. The parameter enable can; be set to. 0 = Channel mark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:42212,Simpl,Simple,42212,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"hitecture_t >::SetInputDepth ; (; size_t ; inputDepth). inline . Definition at line 218 of file GeneralLayer.h. ◆ SetInputHeight(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputHeight ; (; size_t ; inputHeight). inline . Definition at line 219 of file GeneralLayer.h. ◆ SetInputWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputWidth ; (; size_t ; inputWidth). inline . Definition at line 220 of file GeneralLayer.h. ◆ SetIsTraining(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetIsTraining ; (; bool ; isTraining). inline . Definition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25278,learn,learningRate,25278,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,1,['learn'],['learningRate']
Usability,"hm . Definition at line 7347 of file TSpectrum2Painter.cxx. ◆ GetColorIncrements(). void TSpectrum2Painter::GetColorIncrements ; (; Double_t & ; r, . Double_t & ; g, . Double_t & ; b . ). Gets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7357 of file TSpectrum2Painter.cxx. ◆ GetContourWidth(). void TSpectrum2Painter::GetContourWidth ; (; Int_t & ; width). Gets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7403 of file TSpectrum2Painter.cxx. ◆ GetDisplayMode(). void TSpectrum2Painter::GetDisplayMode ; (; Int_t & ; modeGroup, . Int_t & ; displayMode . ). Gets display group mode and display mode: -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. ; Definition at line 7287 of file TSpectrum2Painter.cxx. ◆ GetLightHeightWeight(). void TSpectrum2Painter::GetLightHeightWeight ; (; Double_t & ; weight). Gets weight between shading according to fictive light source and according to channels counts: . weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group . Definition at line 7413 of file TSpectrum2Painter.cxx. ◆ GetLightPosition(). void TSpectrum2Painter::GetLightPosition ; (; Int_t & ; x, . Int_t & ; y, . Int_t & ; z . ). Gets position of fictive light source in 3D space: . x, y, z . Definition at line 7369 of file TSpectrum2Painter.cxx. ◆ GetNodes(). void TSpectrum2Pai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:28532,simpl,simple,28532,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"hm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 69 of file GSLMultiFitFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 86 of file GSLMultiFitFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 73 of file GSLMultiFitFunctionAdapter.h. ◆ FDf(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::FDf ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f, . gsl_matrix * ; h . ). inlinestatic . evaluate derivative and function at the same time ; Definition at line 103 of file GSLMultiFitFunctionAdapter.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiFitFunctionAdapter.h. ROOTMathGSLMultiFitFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html:2513,Guid,Guide,2513,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,1,['Guid'],['Guide']
Usability,"hms. Display modes:. kDisplayModePoints,; kDisplayModeGrid,; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes grou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:32880,Simpl,Simple,32880,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"hod for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStyle::SetStatYvoid SetStatY(Float_t y=0)Definition TStyle.h:398; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::SetGridvirtual void SetGrid(Int_t valuex=1, Int_t valuey=1)=0; TVirtualPad::Updatevirtual void Update()=0; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; t1auto * t1Definition textangle.C:20; AuthorLorenzo Moneta ; Definition in file minuit2FitBench2D.C. tutorialsfitminuit2FitBench2D.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2FitBench2D_8C.html:7156,Guid,Guide,7156,doc/master/minuit2FitBench2D_8C.html,https://root.cern,https://root.cern/doc/master/minuit2FitBench2D_8C.html,1,['Guid'],['Guide']
Usability,"hod must be overridden when a class wants to print itself. ;  ; void RemoveActive (TFileStat *file);  ; void Reset ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html:2371,Clear,Clear,2371,doc/master/classTPacketizerAdaptive_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html,2,['Clear'],['Clear']
Usability,"hod name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROOT::RTreeDrawInvokeTimer::fViewer. Definition at line 88 of file RTreeViewer.cxx. tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeDrawInvokeTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:18056,Guid,Guide,18056,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,1,['Guid'],['Guide']
Usability,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidvector<long>::assign(initializer_list<vector<long>::value_type> __l); voidvector<long>::assign(vector<unsigned int>::size_type __n, const vector<long>::value_type& __val); vector<long>::referencevector<long>::at(vector<unsigned int>::size_type __n); vector<long>::const_referencevector<long>::at(vector<unsigned int>::size_type __n) const; vector<long>::referencevector<long>::back(); vector<long>::const_referencevector<long>::back() const; TTable::iteratorBegin(); TTable::iteratorBegin() const; vector<long>::iteratorvector<long>::begin(); vector<long>::const_iteratorvector<long>::begin() const; virtual voidTObject::Browse(TBrowser* b); vector<unsigned int>::size_typevector<long>::capacity() const; vector<long>::const_iteratorvector<long>::cbegin() const; vector<long>::const_iteratorvector<long>::cend() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidvector<long>::clear(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; vector<long>::const_reverse_iteratorvector<long>::crbegin() const; vector<long>::const_reverse_iteratorvector<long>::crend() const; long*vector<long>::data(); const long*vector<long>::data() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; boolvector<long>::empty() const; TTable::iteratorEnd(); TTable::iteratorEnd() const; vector<long>::iteratorvector<long>::end(); vector<long>::const_iteratorvector<long>::end() const; vector<long>::iteratorvector<long>::erase(vector<long>::iterator __positi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTableMap.html:2474,clear,clear,2474,root/html604/TTableMap.html,https://root.cern,https://root.cern/root/html604/TTableMap.html,1,['clear'],['clear']
Usability,"hodBase.; Implemented in TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, and TMVA::MethodRXGB. ◆ Streamer(). virtual void TMVA::RMethodBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::RMethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file RMethodBase.h. ◆ Train(). virtual void TMVA::RMethodBase::Train ; (; ). pure virtual . Implements TMVA::MethodBase.; Implemented in TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, and TMVA::MethodRXGB. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 50 of file RMethodBase.h. Member Data Documentation. ◆ fDfSpectators. ROOT::R::TRDataFrame TMVA::RMethodBase::fDfSpectators. protected . Definition at line 97 of file RMethodBase.h. ◆ fDfTest. ROOT::R::TRDataFrame TMVA::RMethodBase::fDfTest. protected . Definition at line 92 of file RMethodBase.h. ◆ fDfTrain. ROOT::R::TRDataFrame TMVA::RMethodBase::fDfTrain. protected . Definition at line 91 of file RMethodBase.h. ◆ fFactorTest. std::vector<std::string> TMVA::RMethodBase::fFactorTest. protected . Definition at line 96 of file RMethodBase.h. ◆ fFactorTrain. std::vector<std::string> TMVA::RMethodBase::fFactorTrain. protected . Definition at line 95 of file RMethodBase.h. ◆ fWeightTest. TVectorD TMVA::RMethodBase::fWeightTest. protected . Definition at line 94 of file RMethodBase.h. ◆ fWeightTrain. TVectorD TMVA::RMethodBase::fWeightTrain. protected . Definition at line 93 of file RMethodBase.h. ◆ r. ROOT::R::TRInterface& TMVA::RMethodBase::r. protected . Definition at line 52 of file RMethodBase.h. Libraries for TMVA::RMethodBase:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/RMethodBase.h; tmva/rmva/src/RMethodBase.cxx. TMVARMethodBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html:33868,Guid,Guide,33868,doc/master/classTMVA_1_1RMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html,1,['Guid'],['Guide']
Usability,"hods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TPopupDelayTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPopupDelayTimer(). TPopupDelayTimer::TPopupDelayTimer ; (; TGPopupMenu * ; p, . Long_t ; ms . ). inline . Definition at line 102 of file TGMenu.cxx. Member Function Documentation. ◆ Notify(). Bool_t TPopupDelayTimer::Notify ; (; ). overridevirtual . Notify when timer times out and reset the timer. ; Implements TSysEvtHandler.; Definition at line 109 of file TGMenu.cxx. Member Data Documentation. ◆ fPopup. TGPopupMenu* TPopupDelayTimer::fPopup. private . Definition at line 100 of file TGMenu.cxx. gui/gui/src/TGMenu.cxx. TPopupDelayTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPopupDelayTimer.html:17858,Guid,Guide,17858,doc/master/classTPopupDelayTimer.html,https://root.cern,https://root.cern/doc/master/classTPopupDelayTimer.html,1,['Guid'],['Guide']
Usability,"hoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:7157,simpl,simple,7157,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['simpl'],['simple']
Usability,"hoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:7374,simpl,simple,7374,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,5,['simpl'],['simple']
Usability,"hor: Martin Nicolay 22/11/1988 */; 3 ; 4/******************************************************************************; 5Copyright (C) 2006 Martin Nicolay <m.nicolay@osm-gmbh.de>; 6 ; 7This library is free software; you can redistribute it and/or; 8modify it under the terms of the GNU Lesser General Public; 9License as published by the Free Software Foundation; either; 10version 2.1 of the License, or (at your option) any later; 11version.; 12 ; 13This library is distributed in the hope that it will be useful,; 14but WITHOUT ANY WARRANTY; without even the implied warranty of; 15MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; 16GNU Lesser General Public License for more details.; 17 ; 18You should have received a copy of the GNU Lesser General Public; 19License along with this library; if not, write to the Free; 20Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,; 21MA 02110-1301 USA; 22******************************************************************************/; 23 ; 24/*******************************************************************************; 25* *; 26* Simple RSA public key code. *; 27* Adaptation in library for ROOT by G. Ganis, July 2003 *; 28* (gerardo.ganis@cern.ch) *; 29* *; 30*******************************************************************************/; 31 ; 32#include <stdio.h>; 33#include <string.h>; 34#include <ctype.h>; 35#include <stdlib.h>; 36#include <errno.h>; 37 ; 38#include ""rsaaux.h""; 39#include ""rsalib.h""; 40 ; 41static int g_clear_siz; /* clear-text blocksize */; 42static int g_enc_siz; /* encoded blocksize */; 43 /* g_clear_siz < g_enc_siz */; 44 ; 45int gLog = 0;; 46int kMAXT = 100;; 47 ; 48rsa_NUMBER rsa_genprim(int len, int prob); 49{; 50 rsa_NUMBER a_three,a_four;; 51 rsa_NUMBER prim;; 52 int i;; 53 ; 54 a_add( &a_one, &a_two, &a_three );; 55 a_add( &a_two, &a_two, &a_four );; 56 ; 57 /* This is done elsewhere to allow different initialization of; 58 rand seed (GGa - Sep 15, 2003) */; 59 /* init_rnd()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rsalib_8cxx_source.html:1319,Simpl,Simple,1319,doc/master/rsalib_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rsalib_8cxx_source.html,1,['Simpl'],['Simple']
Usability,hort per channel. Maximum bin content = 32767; TH2I : histograms with one int per channel. Maximum bin content = 2147483647; TH2L : histograms with one long64 per channel. Maximum bin content = 9223372036854775807; TH2F : histograms with one float per channel. Maximum precision 7 digits; TH2D : histograms with one double per channel. Maximum precision 14 digits. 3-D histograms:; TH3C : histograms with one byte per channel. Maximum bin content = 127; TH3S : histograms with one short per channel. Maximum bin content = 32767; TH3I : histograms with one int per channel. Maximum bin content = 2147483647; TH3L : histograms with one long64 per channel. Maximum bin content = 9223372036854775807; TH3F : histograms with one float per channel. Maximum precision 7 digits; TH3D : histograms with one double per channel. Maximum precision 14 digits. See also:; The Chapter about the Histogram classes in the Users Guide; The Chapter about Fitting Histogram in the Users Guide; How to use the Histogram classes; How to Merge files with histograms and Trees; How to Fit Histograms; How to Fit find peaks in histograms; How to convert Hbook/PAW files to ROOT . Modules;  Painting classes;  ;  Histogram classes.;  ;  Graph classes.;  ;  Function classes.;  ;  ROOT 7 histogram classes.;  ;  Advanced spectra processing classes.;  ;  TUnfold classes;  . Classes; class  TBackCompFitter;  Backward compatible implementation of TVirtualFitter. More...;  ; class  TBinomialEfficiencyFitter;  Binomial fitter for the division of two histograms. More...;  ; class  TConfidenceLevel;  Class to compute 95% CL limits. More...;  ; class  TEfficiency;  Class to handle efficiency histograms. More...;  ; class  TFitResult;  Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. More...;  ; class  TFormula;  The Formula class. More...;  ; class  ROOT::v5::TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  ROOT::v5::TFormulaPrimitive;  The Formula Primitive,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Hist.html:1787,Guid,Guide,1787,doc/master/group__Hist.html,https://root.cern,https://root.cern/doc/master/group__Hist.html,2,['Guid'],['Guide']
Usability,"hr_calc = ROOT.RooFormulaVar(""lhr_calc"", ""x[0] / x[1]"", [ws[""gauss""], ws[""uniform""]]); ; # Define the 'analytical' negative logarithmic likelihood ratio; nll_gauss = ws[""gauss""].createNLL(ws[""obs_data""]); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", lhr_learned, True); ; nllr_learned = pdf_learned.createNLL(ws[""obs_data""]); ; # Plot the learned and analytical summed negativelogarithmic likelihood; frame1 = mu_vars[0].frame(; Title=""NLL of SBI vs. Morphing;#mu_{1};NLL"",; Range=(mu_observed[0] - 1, mu_observed[0] + 1),; ); nll_gauss.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+1"", Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+2"", Name=""morph""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); ; ; # Declare a helper function in ROOT to dereference unique_ptr; ROOT.gInterpreter.Declare(; """"""; RooAbsArg &my_deref(std::unique_ptr<RooAbsArg> const& ptr) { return *ptr; }; """"""; ); ; # Choose normalization set for lhr_calc to plot over; norm_set = ROOT.RooArgSet(x_vars); lhr_calc_final_ptr = ROOT.RooFit.Detail.compileForNormSet(lhr_calc, norm_set); lhr_calc_final = ROOT.my_deref(lhr_calc_final_ptr); lhr_calc_final.recursiveRedirectServers(norm_set); ; # Plot the likelihood ratio functions; frame2 = x_vars[0].frame(Title=""Likelihood ratio r(x_{1}|#mu_{1}=2.5);x_{1};p_{gauss}/p_{uniform}""); lhr_learned.plotOn(frame2, LineColor=""kP6Blue"", Name=""learned_ratio""); lhr_calc_final.plotOn(frame2, LineColor=""kP6Blue+1"", Name=""exact""); ; # Write the plots into one canvas to show, or into separate canvases for saving.; single_canvas = True; ; c = ROOT.TCanvas("""", """", 1200 if single_canvas else 600, 600); if single_canvas:; c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:9681,learn,learned,9681,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,1,['learn'],['learned']
Usability,"hreadsMapIt_tThreadsMap_t::const_iterator ThreadsMapIt_tDefinition TGeoManager.h:115; TGeoManager::fMatrixTransformBool_t fMatrixTransformflag that the list of physical nodes has to be drawnDefinition TGeoManager.h:87; TGeoManager::SetVisibilityvoid SetVisibility(TObject *obj, Bool_t vis)Set visibility for a volume.Definition TGeoManager.cxx:1060; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::fMatrixReflectionBool_t fMatrixReflectionflag for using GL matrixDefinition TGeoManager.h:88; TGeoManager::SetAlignableEntryTGeoPNEntry * SetAlignableEntry(const char *unique_name, const char *path, Int_t uid=-1)Creates an alignable object with unique name corresponding to a path and adds it to the list of align...Definition TGeoManager.cxx:3342; TGeoManager::GetLevelInt_t GetLevel() constDefinition TGeoManager.h:507; TGeoManager::ClearShapevoid ClearShape(const TGeoShape *shape)Remove a shape from the list of shapes.Definition TGeoManager.cxx:1617; TGeoManager::ModifiedPadvoid ModifiedPad() constSend ""Modified"" signal to painter.Definition TGeoManager.cxx:3151; TGeoManager::GetStepDouble_t GetStep() constDefinition TGeoManager.h:386; TGeoManager::GetCldirconst Double_t * GetCldir() constDefinition TGeoManager.h:505; TGeoManager::GetCurrentMatrixTGeoHMatrix * GetCurrentMatrix() constDefinition TGeoManager.h:496; TGeoManager::operator=TGeoManager & operator=(const TGeoManager &)=delete; TGeoManager::BombTranslationvoid BombTranslation(const Double_t *tr, Double_t *bombtr)Get the new 'bombed' translation vector according current exploded view mode.Definition TGeoManager.cxx:1078; TGeoManager::fCurrentNavigatorTGeoNavigator * fCurrentNavigatorLock existing navigators.Definition TGeoManager.h:123; TGeoManager::LockDefaultUnitsstatic Bool_t LockDefaultUnits(Bool_t new_value)Definition TGeoManager.cxx:4307; TGeoManager::fMaxVisNodesInt_t fMaxVisNodesD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:72241,Clear,ClearShapevoid,72241,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Clear'],"['ClearShape', 'ClearShapevoid']"
Usability,"hrough an entire window. This is nothing else than the notion of inheritance. The TPad class is the parent of the TCanvas class. In ROOT, most objects derive from a base class TObject. This class has a virtual method Draw() such as all objects are supposed to be able to be “drawn”. If several canvases are defined, there is only one active at a time. One draws an object in the active canvas by using the statement:; object.Draw(); This instructs the object “object” to draw itself. If no canvas is opened, a default one (named “c1”) is created. In the next example, the first statement defines a function and the second one draws it. A default canvas is created since there was no opened one. You should see the picture as shown in the next figure.; root[] TF1 f1(""func1"",""sin(x)/x"",0,10); root[] f1.Draw(); <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. A canvas with drawing. The following components comprise the canvas window:. Menu bar - contains main menus for global operations with files, print, clear canvas, inspect, etc.; Tool bar - has buttons for global and drawing operations; such as arrow, ellipse, latex, pad, etc.; Canvas - an area to draw objects.; Status bar - displays descriptive messages about the selected object.; Editor frame - responds dynamically and presents the user interface according to the selected object in the canvas. 2.3.1 Main Menus and Toolbar; At the top of the canvas window are File, Edit, View, Options, Inspect, Classes and Help menus.; 2.3.1.1 File Menu. New Canvas: creates a new canvas window in the current ROOT session.; Open…: popup a dialog to open a file.; Close Canvas: close the canvas window.; Save: save the drawing of the current canvas in a format selectable from the submenu. The current canvas name is used as a file name for various formats such as PostScript, GIF, JPEG, C macro file, root file.; Save As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the cur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:36764,clear,clear,36764,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,"hrough; # the ""TPython"" class. Note the use of ""raw strings.""; to_run = 'exec(open(\'{}\').read())'; ; ; bar.AddButton( 'Help on Demos', r'TPython::Exec( ""' + to_run.format('demoshelp.py') + '"" );', 'Click Here For Help on Running the Demos' ); bar.AddButton( 'browser', r'TPython::Exec( ""b = ROOT.TBrowser()"" );', 'Start the ROOT browser' ); bar.AddButton( 'framework', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/framework.py') + '"" );', 'An Example of Object Oriented User Interface' ); bar.AddButton( 'first', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/first.py') + '"" );', 'An Example of Slide with Root' ); bar.AddButton( 'hsimple', r'TPython::Exec( ""' + to_run.format('hsimple.py') + '"" );', 'Creating histograms/Ntuples on file', ""button"" ); bar.AddButton( 'hsum', r'TPython::Exec( ""' + to_run.format('hsum.py') + '"" );', 'Filling Histograms and Some Graphics Options' ); bar.AddButton( 'formula1', r'TPython::Exec( ""' + to_run.format('formula1.py') + '"" );', 'Simple Formula and Functions' ); bar.AddButton( 'surfaces', r'TPython::Exec( ""' + to_run.format('surfaces.py') + '"" );', 'Surface Drawing Options' ); bar.AddButton( 'fillrandom', r'TPython::Exec( ""' + to_run.format('fillrandom.py') + '"" );','Histograms with Random Numbers from a Function' ); bar.AddButton( 'fit1', r'TPython::Exec( ""' + to_run.format('fit1.py') + '"" );', 'A Simple Fitting Example' ); bar.AddButton( 'multifit', r'TPython::Exec( ""' + to_run.format('multifit.py') + '"" );', 'Fitting in Subranges of Histograms' ); bar.AddButton( 'h1draw', r'TPython::Exec( ""' + to_run.format('h1ReadAndDraw.py') + '"" );', 'Drawing Options for 1D Histograms' ); bar.AddButton( 'graph', r'TPython::Exec( ""' + to_run.format('graph.py') + '"" );', 'Example of a Simple Graph' ); bar.AddButton( 'gerrors', r'TPython::Exec( ""' + to_run.format('gerrors.py') + '"" );', 'Example of a Graph with Error Bars' ); bar.AddButton( 'tornado', r'TPython::Exec( ""' + to_run.format('tornado.py') + '"" );', 'Examples of 3-D PolyMark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demo_8py.html:1860,Simpl,Simple,1860,doc/master/demo_8py.html,https://root.cern,https://root.cern/doc/master/demo_8py.html,1,['Simpl'],['Simple']
Usability,"hs.%s[i];\n"",element->GetArrayLength(),ename,ename);; 3489 } else if (element->GetArrayDim() >= 2) {; 3490 fprintf(file,"" for (Int_t i=0;i<%d;i++) reinterpret_cast<%s *>(%s"", element->GetArrayLength(), element->GetTypeName(), ename);; 3491 fprintf(file,"")[i] = reinterpret_cast<%s const *>(rhs.%s)[i];\n"", element->GetTypeName(), ename);; 3492 }; 3493 } else if (element->GetType() == TVirtualStreamerInfo::kSTLp) {; 3494 if (!defMod) { fprintf(file,"" %s &modrhs = const_cast<%s &>( rhs );\n"",protoname.Data(),protoname.Data()); defMod = kTRUE; };; 3495 fprintf(file,"" modrhs.%s = 0;\n"",ename);; 3496 } else if (element->GetType() == TVirtualStreamerInfo::kSTL) {; 3497 if (!defMod) {; 3498 fprintf(file,"" %s &modrhs = const_cast<%s &>( rhs );\n"",protoname.Data(),protoname.Data()); defMod = kTRUE;; 3499 }; 3500 TClass *cle = element->GetClassPointer();; 3501 TVirtualCollectionProxy *proxy = cle ? element->GetClassPointer()->GetCollectionProxy() : 0;; 3502 std::string method_name = ""clear"";; 3503 if (!element->TestBit(TStreamerElement::kDoNotDelete) && proxy && (((TStreamerSTL*)element)->GetSTLtype() == ROOT::kSTLbitset)) {; 3504 method_name = ""reset"";; 3505 }; 3506 if (element->IsBase()) {; 3507 fprintf(file,"" modrhs.%s();\n"", method_name.c_str());; 3508 } else {; 3509 fprintf(file,"" modrhs.%s.%s();\n"",ename, method_name.c_str());; 3510 }; 3511 }; 3512 }; 3513 }; 3514}; 3515 ; 3516////////////////////////////////////////////////////////////////////////////////; 3517/// Write down the body of the 'move' constructor.; 3518 ; 3519static void R__WriteMoveConstructorBody(FILE *file, const TString &protoname, TIter &next); 3520{; 3521 TStreamerElement *element = 0;; 3522 next.Reset();; 3523 Bool_t atstart = kTRUE;; 3524 while ((element = (TStreamerElement*)next())) {; 3525 if (element->IsBase()) {; 3526 if (atstart) { fprintf(file,"" : ""); atstart = kFALSE; }; 3527 else fprintf(file,"" , "");; 3528 fprintf(file, ""%s(const_cast<%s &>( rhs ))\n"", element->GetName(),protoname.Data());; 35",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:141953,clear,clear,141953,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"ht (C) 1995-2003, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <cstring>; 13#include <iostream>; 14 ; 15#include ""TROOT.h""; 16#include ""TGraphBentErrors.h""; 17#include ""TMath.h""; 18#include ""TVirtualPad.h""; 19#include ""TH1.h""; 20#include ""TF1.h""; 21 ; 22ClassImp(TGraphBentErrors);; 23 ; 24 ; 25////////////////////////////////////////////////////////////////////////////////; 26 ; 27/** \class TGraphBentErrors; 28 \ingroup Graphs; 29A TGraphBentErrors is a TGraph with bent, asymmetric error bars.; 30 ; 31The TGraphBentErrors painting is performed thanks to the TGraphPainter; 32class. All details about the various painting options are given in this class.; 33 ; 34The picture below gives an example:; 35Begin_Macro(source); 36{; 37 auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; 38 const Int_t n = 10;; 39 Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; 40 Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; 41 Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; 42 Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; 43 Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; 44 Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; 45 Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 46 Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; 47 Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; 48 Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; 49 auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; 50 gr->SetTitle(""TGraphBentErrors Example"");; 51 gr->SetMarkerColor(4);; 52 gr->SetMarkerStyle(21);; 53 gr->Draw(""ALP"");; 54}; 55End_Macro; 56*/; 57 ; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:1355,Simpl,Simple,1355,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"htGraph == theGraph) distanceOld = distance;; 1159}; 1160 ; 1161 ; 1162////////////////////////////////////////////////////////////////////////////////; 1163/// Paint highlight point as TMarker object (open circle); 1164 ; 1165void TGraphPainter::PaintHighlightPoint(TGraph *theGraph, Option_t * /*option*/); 1166{; 1167 // call from PaintGraphSimple; 1168 ; 1169 if ((!theGraph->IsHighlight()) || (gHighlightGraph != theGraph)) return;; 1170 ; 1171 Double_t hx, hy;; 1172 if (theGraph->GetPoint(gHighlightPoint, hx, hy) == -1) {; 1173 // special case, e.g. after interactive remove last point; 1174 if (gHighlightMarker) gHighlightMarker.reset(nullptr);; 1175 return;; 1176 }; 1177 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 1178 Double_t uxmin = gPad->GetUxmin();; 1179 Double_t uxmax = gPad->GetUxmax();; 1180 Double_t uymin = gPad->GetUymin();; 1181 Double_t uymax = gPad->GetUymax();; 1182 if (gPad->GetLogx()) {; 1183 uxmin = TMath::Power(10.0, uxmin);; 1184 uxmax = TMath::Power(10.0, uxmax);; 1185 }; 1186 if (gPad->GetLogy()) {; 1187 uymin = TMath::Power(10.0, uymin);; 1188 uymax = TMath::Power(10.0, uymax);; 1189 }; 1190 if ((hx < uxmin) || (hx > uxmax)) return;; 1191 if ((hy < uymin) || (hy > uymax)) return;; 1192 ; 1193 if (!gHighlightMarker) {; 1194 gHighlightMarker = std::make_unique<TMarker>(hx, hy, 24);; 1195 gHighlightMarker->SetBit(kCannotPick);; 1196 }; 1197 gHighlightMarker->SetX(hx);; 1198 gHighlightMarker->SetY(hy);; 1199 gHighlightMarker->SetMarkerSize(theGraph->GetMarkerSize()*2.0);; 1200 if (gHighlightMarker->GetMarkerSize() < 1.0) gHighlightMarker->SetMarkerSize(1.0); // always visible; 1201 gHighlightMarker->SetMarkerColor(theGraph->GetMarkerColor());; 1202 gHighlightMarker->Paint();; 1203 // Info(""PaintHighlightPoint"", ""graph: %p\tpoint: %d"",; 1204 // (void *)gHighlightGraph, gHighlightPoint);; 1205}; 1206 ; 1207 ; 1208////////////////////////////////////////////////////////////////////////////////; 1209/// Paint a any kind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:43539,ux,uxmin,43539,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,hts. ; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag = false the structure is deleted ; Reimplemented from TH1.; Definition at line 1379 of file TProfile3D.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 31 of file TProfile3D.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 30 of file TProfile3D.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile3D::fBinEntries. protected . Number of entries per bin. ; Definition at line 34 of file TProfile3D.h. ◆ fBinSumw2. TArrayD TProfile3D::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 41 of file TProfile3D.h. ◆ fErrorMode. EErrorType TProfile3D::fErrorMode. protected . Option to compute errors. ; Definition at line 35 of file TProfile3D.h. ◆ fgApproximate. Bool_t TProfile3D::fgApproximate = kFALSE. staticprotected . Bin error approximation option. ; Definition at line 42 of file TProfile3D.h. ◆ fScaling. Bool_t TProfile3D::fScaling. protected . ! True when TProfile3D::Scale is called ; Definition at line 38 of file TProfile3D.h. ◆ fTmax. Double_t TProfile3D::fTmax. protected . Upper limit in T (if set) ; Definition at line 37 of file TProfile3D.h. ◆ fTmin. Double_t TProfile3D::fTmin. protected . Lower limit in T (if set) ; Definition at line 36 of file TProfile3D.h. ◆ fTsumwt. Double_t TProfile3D::fTsumwt. protected . Total Sum of weight*T. ; Definition at line 39 of file TProfile3D.h. ◆ fTsumwt2. Double_t TProfile3D::fTsumwt2. protected . Total Sum of weight*T*T. ; Definition at line 40 of file TProfile3D.h. Libraries for TProfile3D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile3D.h; hist/hist/src/TProfile3D.cxx. TProfile3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:106587,Guid,Guide,106587,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['Guid'],['Guide']
Usability,"hxx>; #include <string_view>; #include <cstdint>; #include <functional>; #include <memory>; #include <string>; #include <unordered_map>; #include <unordered_set>; #include <utility>. Include dependency graph for RNTupleModel.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleModel::NameWithDescription_t;  A wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField() More...;  ; class  ROOT::Experimental::RNTupleModel;  The RNTupleModel encapulates the schema of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  ROOT::Experimental::Internal::RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  ROOT::Experimental::RNTupleModel::RUpdater;  A model is usually immutable after passing it to an RNTupleWriter. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Internal;  . Functions; RFieldZero & ROOT::Experimental::Internal::GetFieldZeroOfModel (RNTupleModel &model);  ; RProjectedFields & ROOT::Experimental::Internal::GetProjectedFieldsOfModel (RNTupleModel &model);  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2018-10-04 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleModel.hxx. treentuplev7incROOTRNTupleModel.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleModel_8hxx.html:2164,Feedback,Feedback,2164,doc/master/RNTupleModel_8hxx.html,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx.html,2,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,"i);; TBranch::GetEntryvirtual Int_t GetEntry(Long64_t entry=0, Int_t getall=0)Read all leaves of entry and return total number of bytes read.Definition TBranch.cxx:1706; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented in TChain.; Definition at line 8529 of file TTree.cxx. ◆ SetBranchStyle(). void TTree::SetBranchStyle ; (; Int_t ; style = 1). static . Set the current branch style. ; (static function). style = 0 old Branch; style = 1 new Bronch . Definition at line 8660 of file TTree.cxx. ◆ SetCacheEntryRange(). Int_t TTree::SetCacheEntryRange ; (; Long64_t ; first, . Long64_t ; last . ). virtual . interface to TTreeCache to set the cache entry range ; Returns:; 0 entry range set; -1 on error . Definition at line 8821 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8855 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:207483,learn,learning,207483,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['learn'],['learning']
Usability,"i);; TBranch::GetEntryvirtual Int_t GetEntry(Long64_t entry=0, Int_t getall=0)Read all leaves of entry and return total number of bytes read.Definition TBranch.cxx:1706; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented in TChain.; Definition at line 8534 of file TTree.cxx. ◆ SetBranchStyle(). void TTree::SetBranchStyle ; (; Int_t ; style = 1). static . Set the current branch style. ; (static function). style = 0 old Branch; style = 1 new Bronch . Definition at line 8665 of file TTree.cxx. ◆ SetCacheEntryRange(). Int_t TTree::SetCacheEntryRange ; (; Long64_t ; first, . Long64_t ; last . ). virtual . interface to TTreeCache to set the cache entry range ; Returns:; 0 entry range set; -1 on error . Definition at line 8831 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8865 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). The cacheSize might be clamped, see TFileCacheRead::SetBufferSize; Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8683 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:209974,learn,learning,209974,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['learn'],['learning']
Usability,"i, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:29346,simpl,simple,29346,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"i.cxx. ◆ ChangeWindowAttributes(). void TGX11::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Change window attributes. ; Reimplemented from TVirtualX.; Definition at line 1698 of file GX11Gui.cxx. ◆ CheckEvent(). Bool_t TGX11::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 1753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:57877,Clear,ClearArea,57877,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['ClearArea']
Usability,"i.e.Definition TObjArray.cxx:523; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::kZombie@ kZombieobject ctor failedDefinition TObject.h:83; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetListOfLeavesvirtual TObjArray * GetListOfLeaves()Definition TTree.h:529; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find leaf..Definition TTree.cxx:4916; int; unsigned int; TLeaf::LeafCountValuesDefinition TLeaf.h:66; TLeaf::LeafCountValues::fValuesCounts_t fValuesDefinition TLeaf.h:67; TLeaf::LeafCountValues::fStartEntryLong64_t fStartEntry! entry number of corresponding to element 0 of the vector.Definition TLeaf.h:68. treetreesrcTLeaf.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLeaf_8cxx_source.html:25146,Guid,Guide,25146,doc/master/TLeaf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLeaf_8cxx_source.html,1,['Guid'],['Guide']
Usability,"i.h. ◆ fNpar. Int_t TFumili::fNpar. private . fNpar - number of parameters ; Definition at line 19 of file TFumili.h. ◆ fNstepDec. Int_t TFumili::fNstepDec. private . fNstepDec - maximum number of step decreasing counter ; Definition at line 20 of file TFumili.h. ◆ fNumericDerivatives. Bool_t TFumili::fNumericDerivatives. private . Definition at line 32 of file TFumili.h. ◆ fParamError. Double_t* TFumili::fParamError. private . [fMaxParam] Parameter errors ; Definition at line 39 of file TFumili.h. ◆ fPL. Double_t* TFumili::fPL. private . [fMaxParam] Limits for parameters step. If <0, then parameter is fixed ; Definition at line 46 of file TFumili.h. ◆ fPL0. Double_t* TFumili::fPL0. private . [fMaxParam] Step initial bounds ; Definition at line 45 of file TFumili.h. ◆ fR. Double_t* TFumili::fR. private . [fMaxParam] Correlation factors ; Definition at line 52 of file TFumili.h. ◆ fRP. Double_t TFumili::fRP. private . Precision of fit ( machine zero on CDC 6000) quite old yeh? ; Definition at line 59 of file TFumili.h. ◆ fS. Double_t TFumili::fS. private . fS - objective function value (return) ; Definition at line 57 of file TFumili.h. ◆ fSumLog. Double_t* TFumili::fSumLog. private . [fNlog] ; Definition at line 40 of file TFumili.h. ◆ fWARN. Bool_t TFumili::fWARN. private . warnings ; Definition at line 29 of file TFumili.h. ◆ fZ. Double_t* TFumili::fZ. private . [fMaxParam2] Inverse fZ0 matrix - covariance matrix ; Definition at line 37 of file TFumili.h. ◆ fZ0. Double_t* TFumili::fZ0. private . [fMaxParam2] Matrix of approximate second derivatives of objective function This matrix is diagonal and always contain only variable parameter's derivatives ; Definition at line 34 of file TFumili.h. Libraries for TFumili:. [legend]; The documentation for this class was generated from the following files:; math/fumili/inc/TFumili.h; math/fumili/src/TFumili.cxx. TFumili. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:44466,Guid,Guide,44466,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['Guid'],['Guide']
Usability,"i1) .... cos(fPhil+fDphi1); Float_tfDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfRmaxellipse semi-axis in X outside; Float_tfRminellipse semi-axis in X inside; Double_t*fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBE(); TUBE shape default constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect = 1); TUBE shape normal constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz); TUBE shape ""simplified"" constructor. TTUBE(const TTUBE& ); copy constructor. TTUBE& operator=(const TTUBE& ); assignement operator. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBE(); TUBE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetNumberOfDivisions(Int_t ndiv); Set number of divisions used to draw this tube. void SetPoints(Double_t* points) const; Create TUBE points. void SetSegsAndPols(TBuffer3D& buffer) const; Set segments and polygons. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void Streamer(TBuffer& ); Stream an object of class TTUBE. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetDz() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTUBE.html:9085,simpl,simplified,9085,root/html534/TTUBE.html,https://root.cern,https://root.cern/root/html534/TTUBE.html,1,['simpl'],['simplified']
Usability,"i1) .... cos(fPhil+fDphi1); Float_tfDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfRmaxellipse semi-axis in X outside; Float_tfRminellipse semi-axis in X inside; Double_t*fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTUBE(); TUBE shape default constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect = 1); TUBE shape normal constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz); TUBE shape ""simplified"" constructor. TTUBE(const TTUBE& ); copy constructor. TTUBE& operator=(const TTUBE& ); assignement operator. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBE(); TUBE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetNumberOfDivisions(Int_t ndiv); Set number of divisions used to draw this tube. void SetPoints(Double_t* points) const; Create TUBE points. void SetSegsAndPols(TBuffer3D& buffer) const; Set segments and polygons. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void Streamer(TBuffer& b); Stream an object of class TTUBE. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetDz() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTUBE.html:8851,simpl,simplified,8851,root/html528/TTUBE.html,https://root.cern,https://root.cern/root/html528/TTUBE.html,3,['simpl'],['simplified']
Usability,"i; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TSPHE. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& ); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPHE.html:9967,simpl,simplified,9967,root/html602/TSPHE.html,https://root.cern,https://root.cern/root/html602/TSPHE.html,2,['simpl'],['simplified']
Usability,"iDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGradFunction(const TPyMultiGradFunction& src); TPyMultiGradFunction&operator=(const TPyMultiGradFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. TPyMultiGenFunction* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Mon Nov 29 18:57:57 2010 » Last generated: 2010-11-29 18:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPyMultiGradFunction.html:1683,Simpl,Simply,1683,root/html528/TPyMultiGradFunction.html,https://root.cern,https://root.cern/root/html528/TPyMultiGradFunction.html,5,['Simpl'],['Simply']
Usability,iFree functions for multidimensional functions needed bby UNURAN ;  CUnuranRngUnuranRng class for interface ROOT random generators to Unuran ;  CUserGroup_t;  CVecTVecDouble;  CVecVecDouble;  CWindowAttributes_t;  C<X11Drawable>;  C<X11Window >;  CXColor_tDescription of a X11 color ;  CXHandleErr_t;  CXHandleIn_t;  CXPClientArchiveRequest;  CXPClientInterruptRequest;  CXPClientLoginRequest;  CXPClientProofRequest;  CXPClientReadbufRequest;  CXPClientRequest;  CXPClientSendRcvRequest;  CXpdAdminCpCmd;  CXpdClientSessions;  CXpdEnv;  CXpdGroupEff_t;  CXpdGroupGlobal_t;  CXpdManagerCron_t;  CXpdMsg;  CXpdObject;  CXpdObjectQ;  CXpdSrvMgrCreateCnt;  CXpdSrvMgrCreateGuard;  CXrdClientAbsUnsolMsgHandler;  CXrdClientCacheInterval;  ►CXrdClientConn;  CSessionIDInfo;  ►CXrdClientConnectionMgr;  CCndVarInfo;  CXrdClientEnv;  CXrdClientID;  CXrdClientInputBuffer;  CXrdClientLogConnection;  CXrdClientMessage;  CXrdClientPhyConnection;  CXrdClientPhyConnLocker;  CXrdClientReadCache;  CXrdClientReadCacheItem;  CXrdClientSock;  CXrdClientSockConnectParms;  CXrdClientUnsolMsgSender;  CXrdClientUrlInfo;  ►CXrdClientVector;  Cmyindex;  ►CXrdPoll;  CPipeData;  CXrdProofConn;  CXrdProofdAdmin;  CXrdProofdAux;  CXrdProofdClient;  CXrdProofdClientMgr;  CXrdProofdConfig;  CXrdProofdDirective;  CXrdProofdDSInfo;  CXrdProofdFile;  CXrdProofdManager;  CXrdProofdMultiStr;  CXrdProofdMultiStrToken;  CXrdProofdNetMgr;  CXrdProofdPInfo;  CXrdProofdPipe;  CXrdProofdPriority;  CXrdProofdPriorityMgr;  CXrdProofdProofServ;  CXrdProofdProofServMgr;  CXrdProofdProtocol;  CXrdProofdResponse;  CXrdProofdSandbox;  CXrdProofdSessionEntry;  CXrdProofGI;  CXrdProofGroup;  CXrdProofGroupMember;  CXrdProofGroupMgr;  CXrdProofPhyConn;  CXrdProofQuery;  CXrdProofSched;  CXrdProofSessionInfo;  CXrdProofUI;  CXrdProofWorker;  CXrdROOT;  CXrdROOTMgr;  CXrdSrvBuffer;  CXrdSysPriv;  CXrdSysPrivGuard;  CXShapeEvent. ROOT 6.12/07 - Reference Guide Generated on Sat Sep 29 2018 23:44:45 (GVA Time) using Doxygen 1.8.13. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:220341,Guid,Guide,220341,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['Guid'],['Guide']
Usability,iMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 162 of file TFumiliMinimizer.h. ◆ X(). const double * TFumiliMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 90 of file TFumiliMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TFumiliMinimizer::fCovar. private . Definition at line 151 of file TFumiliMinimizer.h. ◆ fDim. unsigned int TFumiliMinimizer::fDim. private . Definition at line 145 of file TFumiliMinimizer.h. ◆ fEdm. double TFumiliMinimizer::fEdm. private . Definition at line 148 of file TFumiliMinimizer.h. ◆ fErrors. std::vector<double> TFumiliMinimizer::fErrors. private . Definition at line 150 of file TFumiliMinimizer.h. ◆ fFumili. TFumili* TFumiliMinimizer::fFumili. private . Definition at line 153 of file TFumiliMinimizer.h. ◆ fgFumili. TFumili * TFumiliMinimizer::fgFumili = nullptr. staticprivate . Definition at line 160 of file TFumiliMinimizer.h. ◆ fgFunc. ROOT::Math::FitMethodFunction * TFumiliMinimizer::fgFunc = nullptr. staticprivate . Definition at line 157 of file TFumiliMinimizer.h. ◆ fgGradFunc. ROOT::Math::FitMethodGradFunction * TFumiliMinimizer::fgGradFunc = nullptr. staticprivate . Definition at line 158 of file TFumiliMinimizer.h. ◆ fMinVal. double TFumiliMinimizer::fMinVal. private . Definition at line 147 of file TFumiliMinimizer.h. ◆ fNFree. unsigned int TFumiliMinimizer::fNFree. private . Definition at line 146 of file TFumiliMinimizer.h. ◆ fParams. std::vector<double> TFumiliMinimizer::fParams. private . Definition at line 149 of file TFumiliMinimizer.h. Libraries for TFumiliMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/fumili/inc/TFumiliMinimizer.h; math/fumili/src/TFumiliMinimizer.cxx. TFumiliMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:19414,Guid,Guide,19414,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,1,['Guid'],['Guide']
Usability,"iVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Analytical integral known over all observables. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Fri Dec 2 14:26:53 2011 » Last generated: 2011-12-02 14:26; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:43751,Clear,Clear,43751,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"i] * a[i + k * idim];; 85 a[jii] += a[j + (k + 1) * idim] * a[k + 1 + ii];; 86 } // for k; 87 a[i + ji] = -a[iii] * (a[i - 1 + ji] * a[iimi] + s31);; 88 a[jii] *= -1;; 89 } // for j; 90 a[iimi] = -a[iii] * (a[i - 1 + imi] * a[iimi]);; 91 a[i - 1 + ii] *= -1;; 92 } // for i; 93 } // if n!=2; 94 ; 95 nm1 = n - 1;; 96 for (i = 1; i <= nm1; ++i) {; 97 const unsigned int ii = i * idim;; 98 nmi = n - i;; 99 for (j = 1; j <= i; ++j) {; 100 const unsigned int ji = j * idim;; 101 const unsigned int iji = i + ji;; 102 for (k = 1; k <= nmi; ++k) {; 103 a[iji] += a[i + k + ji] * a[i + (i + k) * idim];; 104 } // for k; 105 } // for j; 106 ; 107 for (j = 1; j <= nmi; ++j) {; 108 const unsigned int ji = j * idim;; 109 s34 = 0.;; 110 for (k = j; k <= nmi; ++k) {; 111 s34 += a[i + k + ii + ji] * a[i + (i + k) * idim];; 112 } // for k; 113 a[i + ii + ji] = s34;; 114 } // for j; 115 } // for i; 116 ; 117 nxch = ir[n];; 118 if (nxch == 0) {; 119 return true;; 120 }; 121 ; 122 for (m = 1; m <= nxch; ++m) {; 123 k = nxch - m + 1;; 124 ij = ir[k];; 125 i = ij / 4096;; 126 j = ij % 4096;; 127 const unsigned int ii = i * idim;; 128 const unsigned int ji = j * idim;; 129 for (k = 1; k <= n; ++k) {; 130 ti = a[k + ii];; 131 a[k + ii] = a[k + ji];; 132 a[k + ji] = ti;; 133 } // for k; 134 } // for m; 135 ; 136 return true;; 137} // Dfinv; 138 ; 139 ; 140 } // namespace Math; 141 ; 142} // namespace ROOT; 143 ; 144 ; 145 ; 146#endif /* ROOT_Math_Dfinv */; a#define a(i)Definition RSha256.hxx:99; TMatrixT< Double_t >; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::Dfinvbool Dfinv(Matrix &rhs, unsigned int *ir)Dfinv.Definition Dfinv.h:47; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathsmatrixincMathDfinv.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Dfinv_8h_source.html:4190,Guid,Guide,4190,doc/master/Dfinv_8h_source.html,https://root.cern,https://root.cern/doc/master/Dfinv_8h_source.html,1,['Guid'],['Guide']
Usability,"i]); continue;; ; const char *rnn_type = rnn_types[i].c_str();; ; /// define the inputlayout string for RNN; /// the input data should be organize as following:; //// input layout for RNN: time x ndim; ; TString inputLayoutString = TString::Format(""InputLayout=%d|%d"", ntime, ninput);; ; /// Define RNN layer layout; /// it should be LayerType (RNN or LSTM or GRU) | number of units | number of inputs | time steps | remember output (typically no=0 | return full sequence; TString rnnLayout = TString::Format(""%s|10|%d|%d|0|1"", rnn_type, ninput, ntime);; ; /// add after RNN a reshape layer (needed top flatten the output) and a dense layer with 64 units and a last one; /// Note the last layer is linear because when using Crossentropy a Sigmoid is applied already; TString layoutString = TString(""Layout="") + rnnLayout + TString("",RESHAPE|FLAT,DENSE|64|TANH,LINEAR"");; ; /// Defining Training strategies. Different training strings can be concatenate. Use however only one; TString trainingString1 = TString::Format(""LearningRate=1e-3,Momentum=0.0,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=%d,TestRepetitions=1,""; ""WeightDecay=1e-2,Regularization=None,MaxEpochs=%d,""; ""Optimizer=ADAM,DropConfig=0.0+0.+0.+0."",; batchSize,maxepochs);; ; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString += trainingString1; // + ""|"" + trainingString2; ; /// Define the full RNN Noption string adding the final options for all network; TString rnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234"");; ; rnnOptions.Append("":"");; rnnOptions.Append(inputLayoutString);; rnnOptions.Append("":"");; rnnOptions.Append(layoutString);; rnnOptions.Append("":"");; rnnOptions.Append(trainingStrategyString);; rnnOptions.Append("":"");; rnnOptions.Append(TString::Format(""Architecture=%s"", archString.Data()));; ; TString rnnName = ""TMVA_"" + TString(rnn_type);; factory->BookMethod(dataloader, TMVA::Types::kDL, rnnName,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:65813,Learn,LearningRate,65813,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"iable graphics context is returned. If rw is true a new modifiable graphics context is returned. ; Definition at line 987 of file TGGC.cxx. ◆ IsA(). TClass * TGGCPool::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 139 of file TGGC.h. ◆ MatchGC(). Int_t TGGCPool::MatchGC ; (; const TGGC * ; gc, . GCValues_t * ; values . ). private . Try to find matching graphics context. ; On success returns the amount of matching bits (which may be zero if masks have no common bits), -1 on failure (when there are common bits but not a single match). ; Definition at line 1039 of file TGGC.cxx. ◆ operator=(). TGGCPool & TGGCPool::operator= ; (; const TGGCPool & ; gp). inlineprotected . Definition at line 116 of file TGGC.h. ◆ Print(). void TGGCPool::Print ; (; Option_t * ; option = """"); const. overridevirtual . List all graphics contexts in the pool. ; Reimplemented from TObject.; Definition at line 1161 of file TGGC.cxx. ◆ Streamer(). void TGGCPool::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGGCPool::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TGGC.h. ◆ UpdateGC(). void TGGCPool::UpdateGC ; (; TGGC * ; gc, . GCValues_t * ; values . ). private . Update graphics context with the values spcified in values->fMask. ; Definition at line 1153 of file TGGC.cxx. Friends And Related Symbol Documentation. ◆ TGGC. friend class TGGC. friend . Definition at line 105 of file TGGC.h. Member Data Documentation. ◆ fList. THashTable* TGGCPool::fList. private . Definition at line 108 of file TGGC.h. Libraries for TGGCPool:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGGC.h; gui/gui/src/TGGC.cxx. TGGCPool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGCPool.html:16294,Guid,Guide,16294,doc/master/classTGGCPool.html,https://root.cern,https://root.cern/doc/master/classTGGCPool.html,1,['Guid'],['Guide']
Usability,"iable that can be changed from the outside.Definition RooRealVar.h:37; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TTextBase class for several text objects.Definition TText.h:22; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; arrowDefinition RArrowDS.hxx:17; rf106_plotdecorationDefinition rf106_plotdecoration.py:1; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf106_plotdecoration.C. tutorialsroofitrf106_plotdecoration.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf106__plotdecoration_8C.html:5814,Guid,Guide,5814,doc/master/rf106__plotdecoration_8C.html,https://root.cern,https://root.cern/doc/master/rf106__plotdecoration_8C.html,1,['Guid'],['Guide']
Usability,"iableInfo(i).GetExpression());; 333 firstArrayVar = kFALSE;; 334 firstArrayVarIndex = i;; 335 ; 336 Log() << kINFO << ""Using variable "" << dsi.GetVariableInfo(i).GetInternalName() <<; 337 "" from array expression "" << dsi.GetVariableInfo(i).GetExpression() << "" of size "" << arraySize << Endl;; 338 }; 339 fInputTableFormulas.push_back(std::make_pair(ttf, (Int_t) i-firstArrayVarIndex));; 340 if (int(i)-firstArrayVarIndex == arraySize-1 ) {; 341 // I am the last element of the array; 342 firstArrayVar = kTRUE;; 343 firstArrayVarIndex = -1;; 344 Log() << kDEBUG << ""Using Last variable from array : "" << dsi.GetVariableInfo(i).GetInternalName() << Endl;; 345 }; 346 }; 347 ; 348 }; 349 ; 350 //; 351 // targets; 352 //; 353 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform regression targets"" << Endl;; 354 for (formIt = fTargetFormulas.begin(), formItEnd = fTargetFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 355 fTargetFormulas.clear();; 356 for (UInt_t i=0; i<dsi.GetNTargets(); i++) {; 357 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetTargetInfo(i).GetInternalName().Data() ),; 358 dsi.GetTargetInfo(i).GetExpression().Data(), tr );; 359 CheckTTreeFormula( ttf, dsi.GetTargetInfo(i).GetExpression(), hasDollar );; 360 fTargetFormulas.push_back( ttf );; 361 }; 362 ; 363 //; 364 // spectators; 365 //; 366 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform spectator variables"" << Endl;; 367 for (formIt = fSpectatorFormulas.begin(), formItEnd = fSpectatorFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 368 fSpectatorFormulas.clear();; 369 for (UInt_t i=0; i<dsi.GetNSpectators(); i++) {; 370 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetSpectatorInfo(i).GetInternalName().Data() ),; 371 dsi.GetSpectatorInfo(i).GetExpression().Data(), tr );; 372 CheckTTreeFormula( ttf, dsi.GetSpectatorInfo(i).GetExpression(), hasDollar );; 373 fSpectatorFormulas.push_back( ttf );;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:14248,clear,clear,14248,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['clear'],['clear']
Usability,"iagrams. More...;  ; class  TCurlyLine;  Implements curly or wavy polylines used to draw Feynman diagrams. More...;  ; class  TCutG;  Graphical cut class. More...;  ; class  TDiamond;  Draw a Diamond. More...;  ; class  TEllipse;  Draw Ellipses. More...;  ; class  TFrame;  Define a Frame. More...;  ; class  TGaxis;  The axis painter class. More...;  ; class  TGraphPolar;  To draw a polar graph. More...;  ; class  TGraphPolargram;  To draw polar axis. More...;  ; class  TGraphQQ;  This class allows to draw quantile-quantile plots. More...;  ; class  TImage;  An abstract interface to image processing library. More...;  ; class  TImagePalette;  A class to define a conversion from pixel values to pixel color. More...;  ; class  TLatex;  To draw Mathematical Formula. More...;  ; class  TLegend;  This class displays a legend box (TPaveText) containing several legend entries. More...;  ; class  TLegendEntry;  Storage class for one entry of a TLegend. More...;  ; class  TLine;  Use the TLine constructor to create a simple line. More...;  ; class  TLink;  Special TText object used to show hyperlinks. More...;  ; class  TMarker;  Manages Markers. More...;  ; class  TMathText;  To draw TeX Mathematical Formula. More...;  ; class  TPaletteEditor;  Edit the palette via a GUI. More...;  ; class  TPave;  A TBox with a bordersize and a shadow option. More...;  ; class  TPaveLabel;  A Pave (see TPave) with a text centered in the Pave. More...;  ; class  TPaveStats;  The histogram statistics painter class. More...;  ; class  TPavesText;  A PaveText (see TPaveText) with several stacked paves. More...;  ; class  TPaveText;  A Pave (see TPave) with text, lines or/and boxes inside. More...;  ; class  TPie;  Draw a Pie Chart,. More...;  ; class  TPieSlice;  A slice of a piechart, see the TPie class. More...;  ; class  TPoints;  2-D graphics point (world coordinates). More...;  ; class  TPolyLine;  Defined by an array on N points in a 2-D space. More...;  ; class  TText;  Base class for se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__BasicGraphics.html:1669,simpl,simple,1669,doc/master/group__BasicGraphics.html,https://root.cern,https://root.cern/doc/master/group__BasicGraphics.html,1,['simpl'],['simple']
Usability,"ial value; Double32_t*fPointValue[fNsp][0,3] a special quantity for some point.; Float_tfPxX component of the momentum; Float_tfPyY component of the momentum; Float_tfPzZ component of the momentum; Float_tfRandomA random track quantity; TBitsfTriggerBitsBits triggered by this track.; Short_tfValidValidity criterion; Double32_tfVertex[3][-30,30,16] Track vertex position; Float16_tfXfirstX coordinate of the first point; Float16_tfXlastX coordinate of the last point; Float16_tfYfirstY coordinate of the first point; Float16_tfYlastY coordinate of the last point; Float16_tfZfirstZ coordinate of the first point; Float16_tfZlastZ coordinate of the last point. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Track(const Track& orig); Copy a track object. Track(Float_t random); Create a track object.; Note that in this example, data members do not have any physical meaning. void Clear(Option_t* option = """"). Track(); { fPointValue = 0; }. virtual ~Track(); {Clear();}. Float_t GetPx() const; { return fPx; }. Float_t GetPy() const; { return fPy; }. Float_t GetPz() const; { return fPz; }. Float_t GetPt() const; { return TMath::Sqrt(fPx*fPx + fPy*fPy); }. Float_t GetRandom() const; { return fRandom; }. Float_t GetBx() const; { return fBx; }. Float_t GetBy() const; { return fBy; }. Float_t GetMass2() const; { return fMass2; }. Float_t GetMeanCharge() const; { return fMeanCharge; }. Float_t GetXfirst() const; { return fXfirst; }. Float_t GetXlast() const; { return fXlast; }. Float_t GetYfirst() const; { return fYfirst; }. Float_t GetYlast() const; { return fYlast; }. Float_t GetZfirst() const; { return fZfirst; }. Float_t GetZlast() const; { return fZlast; }. Double32_t GetCharge() const; { return fCharge; }. Double32_t GetVertex(Int_t i = 0); {return (i<3)?fVertex[i]:0;}. Int_t GetNpoint() const; { return fNpoint; }. TBits& GetTriggerBits(); { return fTriggerBits; }. Short_t GetValid() const; { return fValid; }. void SetValid(Int_t valid ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Track.html:9789,Clear,Clear,9789,root/html528/Track.html,https://root.cern,https://root.cern/root/html528/Track.html,1,['Clear'],['Clear']
Usability,"ial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.14/05 - Reference Guide Generated on Fri Nov 2 2018 11:01:30 (GVA Time) using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:167314,Guid,Guide,167314,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['Guid'],['Guide']
Usability,"ialSelector.C | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the ROOT 6 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:1008,Guid,Guides,1008,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,1,['Guid'],['Guides']
Usability,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:5270,guid,guide,5270,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['guid'],['guide']
Usability,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirtual (TBuffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:4627,guid,guide,4627,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['guid'],['guide']
Usability,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:3264,guid,guide,3264,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['guid'],['guide']
Usability,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:7897,guid,guide,7897,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,2,['guid'],['guide']
Usability,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:3856,guid,guide,3856,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['guid'],['guide']
Usability,"ials » PyRoot tutorials. Detailed Description; Tornado example. ; . ; from ROOT import TCanvas, TView, TPolyMarker3D, TPaveText; from ROOT import gROOT, gBenchmark; from math import cos, sin, pi; ; gBenchmark.Start( 'tornado' ); ; d = 16; numberOfPoints = 200; numberOfCircles = 40; ; # create and open a canvas; sky = TCanvas( 'sky', 'Tornado', 300, 10, 700, 500 ); sky.SetFillColor( 14 ); ; # creating view; view = TView.CreateView(); rng = numberOfCircles * d; view.SetRange( 0, 0, 0, 4.0*rng, 2.0*rng, rng ); ; polymarkers = []; for j in range( d, numberOfCircles * d, d ):; ; # create a PolyMarker3D; pm3d = TPolyMarker3D( numberOfPoints ); ; # set points; for i in range( 1, numberOfPoints ) :; csin = sin( 2*pi / numberOfPoints * i ) + 1; ccos = cos( 2*pi / numberOfPoints * i ) + 1; esin = sin( 2*pi / (numberOfCircles*d) * j ) + 1; x = j * ( csin + esin );; y = j * ccos;; z = j;; pm3d.SetPoint( i, x, y, z );; ; # set marker size, color & style; pm3d.SetMarkerSize( 1 ); pm3d.SetMarkerColor( 2 + ( d == ( j & d ) ) ); pm3d.SetMarkerStyle( 3 ); ; # draw; pm3d.Draw(); ; # save a reference; polymarkers.append( pm3d ); ; gBenchmark.Show( 'tornado' ); ; ct = gBenchmark.GetCpuTime( 'tornado' ); timeStr = 'Execution time: %g sec.' % ct; ; text = TPaveText( 0.1, 0.81, 0.9, 0.97 ); text.SetFillColor( 42 ); text.AddText( 'PyROOT example: tornado.py' ); text.AddText( timeStr ); text.Draw(); ; sky.Update(); TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TView::CreateViewstatic TView * CreateView(Int_t system=1, const Double_t *rmin=nullptr, const Double_t *rmax=nullptr)Create a concrete default 3-d view via the plug-in manager.Definition TView.cxx:27; AuthorWim Lavrijsen ; Definition in file tornado.py. tutorialspyroottornado.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tornado_8py.html:2096,Guid,Guide,2096,doc/master/tornado_8py.html,https://root.cern,https://root.cern/doc/master/tornado_8py.html,1,['Guid'],['Guide']
Usability,ian coordinates ; Definition at line 267 of file Cylindrical3D.h. ◆ SetZ(). template<class T > . void ROOT::Math::Cylindrical3D< T >::SetZ ; (; T ; zz). inline . set the z coordinate value keeping rho and phi constant ; Definition at line 151 of file Cylindrical3D.h. ◆ Theta(). template<class T > . Scalar ROOT::Math::Cylindrical3D< T >::Theta ; (; ); const. inline . Definition at line 131 of file Cylindrical3D.h. ◆ X(). template<class T > . Scalar ROOT::Math::Cylindrical3D< T >::X ; (; ); const. inline . Definition at line 125 of file Cylindrical3D.h. ◆ x(). template<class T > . T ROOT::Math::Cylindrical3D< T >::x ; (; ); const. inline . Definition at line 215 of file Cylindrical3D.h. ◆ Y(). template<class T > . Scalar ROOT::Math::Cylindrical3D< T >::Y ; (; ); const. inline . Definition at line 126 of file Cylindrical3D.h. ◆ y(). template<class T > . T ROOT::Math::Cylindrical3D< T >::y ; (; ); const. inline . Definition at line 216 of file Cylindrical3D.h. ◆ Z(). template<class T > . Scalar ROOT::Math::Cylindrical3D< T >::Z ; (; ); const. inline . Definition at line 123 of file Cylindrical3D.h. ◆ z(). template<class T > . T ROOT::Math::Cylindrical3D< T >::z ; (; ); const. inline . Definition at line 217 of file Cylindrical3D.h. Member Data Documentation. ◆ Dimension. template<class T > . constexpr unsigned int ROOT::Math::Cylindrical3D< T >::Dimension = 3U. staticconstexpr . Definition at line 47 of file Cylindrical3D.h. ◆ fPhi. template<class T > . T ROOT::Math::Cylindrical3D< T >::fPhi. private . Definition at line 244 of file Cylindrical3D.h. ◆ fRho. template<class T > . T ROOT::Math::Cylindrical3D< T >::fRho. private . Definition at line 242 of file Cylindrical3D.h. ◆ fZ. template<class T > . T ROOT::Math::Cylindrical3D< T >::fZ. private . Definition at line 243 of file Cylindrical3D.h. math/genvector/inc/Math/GenVector/Cylindrical3D.h. ROOTMathCylindrical3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Cylindrical3D.html:10485,Guid,Guide,10485,doc/master/classROOT_1_1Math_1_1Cylindrical3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Cylindrical3D.html,1,['Guid'],['Guide']
Usability,"ian with mean=0 and sigma=1. ;  ; virtual void ReadRandom (const char *filename);  Reads saved random generator status from filename. ;  ; virtual void Sphere (Double_t &x, Double_t &y, Double_t &z, Double_t r);  Generates random vectors, uniformly distributed over the surface of a sphere of given radius. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Uniform (Double_t x1, Double_t x2);  Returns a uniform deviate on the interval (x1, x2). ;  ; virtual Double_t Uniform (Double_t x1=1);  Returns a uniform deviate on the interval (0, x1). ;  ; virtual void WriteRandom (const char *filename) const;  Writes random generator status to filename. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom1.html:5033,Clear,Clear,5033,doc/master/classTRandom1.html,https://root.cern,https://root.cern/doc/master/classTRandom1.html,4,['Clear'],['Clear']
Usability,"iance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitting:; When the fitting function is linear (contains the ++ sign) or the fitting function is a polynomial, a linear fitter is initialised. To create a linear function, use the following syntax: linear parts separated by ++ sign. Example: to fit the parameters of the function p0*x + p1*sin(x), you can create a TF1 object as TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; For such a TF1 you don't have to set the initial conditions and the linear fitter is used. Going via the linear fitter for functions, linear in parameters, gives a considerable advantage in speed. When using the linear fitting it is also possible to perform a robust fitting with the Least Trimmed Square (LTS) regression algorithm, by using the fit option ROB. See the tutorial fitLinearRobust.C. Notes on TGraph/TGraphErrors Fitting:. By using the ""effective variance"" method a simple linear regression becomes a non-linear case, which takes several iterations instead of 0 as in the linear case.; The effective variance technique assumes that there is no correlation between the x and y coordinate.; The standard chi2 (least square) method without error in the coordinates (x) can be forced by using option ""EX0""; The linear fitter doesn't take into account the errors in x. When fitting a TGraphErrors with a linear functions the errors in x will not be considered. If errors in x are important, use option ""F"" for linear function fitting.; When fitting a TGraph (i.e. no errors associated with each point), a correction is applied to the errors on the parameters with the following formula: parameter_error *= sqrt(chisquare/(ndf-1)). General Fitting documentation; See in TH1::Fit for the documentation of; Fit Result; Fit Status; Fit Statistics Box; Fitting in a Range; Setting Initial Conditions . Definition at line 1231 of file TGraph.cxx. ◆ FitPanel(). void TGraph::FitPanel ; (; ). virtual . Display a GUI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:51827,simpl,simple,51827,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['simpl'],['simple']
Usability,"iate Analysis | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 6. Multivariate Analysis. Multiple Variables; The muon trigger should fire more likely for higher muon momenta - let's check th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/6-multivariate-analysis.html:1014,Guid,Guides,1014,d/6-multivariate-analysis.html,https://root.cern,https://root.cern/d/6-multivariate-analysis.html,1,['Guid'],['Guides']
Usability,"iated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Thu Sep 23 19:59:34 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExpensiveObjectCache.html:8054,clear,clearObj,8054,root/html528/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html528/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"iated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Tue Jun 30 14:32:46 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExpensiveObjectCache.html:8628,clear,clearObj,8628,root/html602/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html602/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"iated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Tue Mar 10 17:16:31 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooExpensiveObjectCache.html:8142,clear,clearObj,8142,root/html534/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html534/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"ibing current object ; Reimplemented from TObject.; Definition at line 39 of file TDOMParser.h. ◆ operator=(). TDOMParser & TDOMParser::operator= ; (; const TDOMParser & ; ). privatedelete . ◆ ParseBuffer(). Int_t TDOMParser::ParseBuffer ; (; const char * ; buffer, . Int_t ; len . ). overridevirtual . It parses a buffer, much like ParseFile(). ; Implements TXMLParser.; Definition at line 94 of file TDOMParser.cxx. ◆ ParseContext(). Int_t TDOMParser::ParseContext ; (; ). private . Creates a XML document for the parser. ; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. . Definition at line 117 of file TDOMParser.cxx. ◆ ParseFile(). Int_t TDOMParser::ParseFile ; (; const char * ; filename). overridevirtual . Parse the XML file where filename is the XML file name. ; It will create a TXMLDocument if the file is parsed without any error. It returns parse code error in case of parse error, see TXMLParser. ; Implements TXMLParser.; Definition at line 70 of file TDOMParser.cxx. ◆ ReleaseUnderlying(). void TDOMParser::ReleaseUnderlying ; (; ). overridevirtual . Release any existing document. ; Reimplemented from TXMLParser.; Definition at line 52 of file TDOMParser.cxx. ◆ Streamer(). void TDOMParser::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDOMParser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TDOMParser.h. Member Data Documentation. ◆ fTXMLDoc. TXMLDocument* TDOMParser::fTXMLDoc. private . xmlDoc ; Definition at line 23 of file TDOMParser.h. Libraries for TDOMParser:. [legend]; The documentation for this class was generated from the following files:; io/xmlparser/inc/TDOMParser.h; io/xmlparser/src/TDOMParser.cxx. TDOMParser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:20512,Guid,Guide,20512,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['Guid'],['Guide']
Usability,"ibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:2561,simpl,simple,2561,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,2,['simpl'],['simple']
Usability,"ibraries. In this case we want to be helpful and output a; 2802/// list of the unresolved symbols. So if the loading of the created shared; 2803/// library fails, we will try to build a executable that contains the; 2804/// script. The linker should then output a list of missing symbols.; 2805///; 2806/// To support this we provide a TSystem::SetMakeExe() function, that sets the; 2807/// directive telling how to create an executable. The loader will need; 2808/// to be informed of all the libraries available. The information about; 2809/// the libraries that has been loaded by .L and TSystem::Load() is accessible; 2810/// to the script compiler. However, the information about; 2811/// the libraries that have been selected at link time by the application; 2812/// builder (like the root libraries for root.exe) are not available and need; 2813/// to be explicitly listed in fLinkedLibs (either by default or by a call to; 2814/// TSystem::SetLinkedLibs()).; 2815///; 2816/// To simplify customization we could also add to the .rootrc support for the; 2817/// variables; 2818/// ~~~ {.cpp}; 2819/// Unix.*.Root.IncludePath: -I$ROOTSYS/include; 2820/// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; 2821///; 2822/// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; 2823/// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; 2824/// ~~~; 2825/// And also support for MakeSharedLibs() and MakeExe().; 2826///; 2827/// (the ... have to be replaced by the actual values and are here only to; 2828/// shorten this comment).; 2829///; 2830/// Note that the default behavior is to remove libraries when closing ROOT,; 2831/// ie TSystem::CleanCompiledMacros() is called in the TROOT destructor.; 2832/// The default behavior of .L script.C+ is the opposite one, leaving things; 2833/// after closing, without removing. In other words, .L always passes the 'k'; 2834/// option behind the scenes.; 2835 ; 2836int TSystem::CompileMacro(const char *filename, Option_t *opt,; 2837 const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:93069,simpl,simplify,93069,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['simpl'],['simplify']
Usability,"ibutes; int first {0};  first child to request ;  ; bool hidden {false};  show hidden files ;  ; int lastcycle {0};  show only last cycle, -1 - off, 0 - not change, +1 on, ;  ; int number {0};  number of childs to request, 0 - all childs ;  ; std::vector< std::string > path;  requested path ;  ; std::string regex;  applied regex ;  ; bool reload {false};  force items reload ;  ; bool reverse {false};  reverse item order ;  ; std::string sort;  kind of sorting ;  . #include <ROOT/RBrowserRequest.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserRequest::first {0}. first child to request ; Definition at line 29 of file RBrowserRequest.hxx. ◆ hidden. bool ROOT::RBrowserRequest::hidden {false}. show hidden files ; Definition at line 33 of file RBrowserRequest.hxx. ◆ lastcycle. int ROOT::RBrowserRequest::lastcycle {0}. show only last cycle, -1 - off, 0 - not change, +1 on, ; Definition at line 35 of file RBrowserRequest.hxx. ◆ number. int ROOT::RBrowserRequest::number {0}. number of childs to request, 0 - all childs ; Definition at line 30 of file RBrowserRequest.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserRequest::path. requested path ; Definition at line 28 of file RBrowserRequest.hxx. ◆ regex. std::string ROOT::RBrowserRequest::regex. applied regex ; Definition at line 36 of file RBrowserRequest.hxx. ◆ reload. bool ROOT::RBrowserRequest::reload {false}. force items reload ; Definition at line 34 of file RBrowserRequest.hxx. ◆ reverse. bool ROOT::RBrowserRequest::reverse {false}. reverse item order ; Definition at line 32 of file RBrowserRequest.hxx. ◆ sort. std::string ROOT::RBrowserRequest::sort. kind of sorting ; Definition at line 31 of file RBrowserRequest.hxx. Libraries for ROOT::RBrowserRequest:. [legend]; The documentation for this class was generated from the following file:; gui/browserv7/inc/ROOT/RBrowserRequest.hxx. ROOTRBrowserRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserRequest.html:2306,Guid,Guide,2306,doc/master/classROOT_1_1RBrowserRequest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserRequest.html,1,['Guid'],['Guide']
Usability,"ibutesvirtual void SaveTextAttributes(std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1)Save text attributes as C++ statement(s) on output stream out.Definition TAttText.cxx:373; TAttText::GetTextSizePercentvirtual Float_t GetTextSizePercent(Float_t size)Return the text in percent of the pad size.Definition TAttText.cxx:310; TAttText::fTextAlignShort_t fTextAlignText alignment.Definition TAttText.h:23; TAttText::Copyvoid Copy(TAttText &atttext) constCopy this text attributes to a new TAttText.Definition TAttText.cxx:294; TAttText::ResetAttTextvirtual void ResetAttText(Option_t *toption="""")Reset this text attributes to default values.Definition TAttText.cxx:361; TAttText::fTextSizeFloat_t fTextSizeText size.Definition TAttText.h:22; TColor::SaveColorstatic Bool_t SaveColor(std::ostream &out, Int_t ci)Save a color with index > 228 as a C++ statement(s) on output stream out.Definition TColor.cxx:2543; TColor::GetColorTransparentstatic Int_t GetColorTransparent(Int_t color, Float_t a)Static function: Returns the transparent color number corresponding to n.Definition TColor.cxx:2174; TVirtualPadEditor::UpdateTextAttributesstatic void UpdateTextAttributes(Int_t align, Float_t angle, Int_t col, Int_t font, Float_t tsize)Update text attributes via the pad editor.Definition TVirtualPadEditor.cxx:140; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::GetSelectedPadvirtual TVirtualPad * GetSelectedPad() const =0; TVirtualPad::GetY1virtual Double_t GetY1() const =0; TVirtualPad::AbsPixeltoYvirtual Double_t AbsPixeltoY(Int_t py)=0; TVirtualPad::GetY2virtual Double_t GetY2() const =0; int; unsigned int; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. corebasesrcTAttText.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:19080,Guid,Guide,19080,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ibution *samplDist=nullptr);  ; void SetLogXaxis (bool lx);  changes plot to log scale on x axis ;  ; void SetLogYaxis (bool ly);  changes plot to log scale on y axis ;  ; void SetMarkerColor (Color_t color, const SamplingDistribution *samplDist=nullptr);  ; void SetMarkerSize (Size_t size, const SamplingDistribution *samplDist=nullptr);  ; void SetMarkerStyle (Style_t style, const SamplingDistribution *samplDist=nullptr);  ; void SetXRange (double mi, double ma);  change x range ;  ; void SetYRange (double mi, double ma);  change y range ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html:4653,Clear,Clear,4653,doc/master/classRooStats_1_1HypoTestPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html,2,['Clear'],['Clear']
Usability,"ic . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionExport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TRFunctionExport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionExport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TRFunctionExport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionExport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file TRFunctionExport.h. ◆ SetFunction(). template<class T > . void ROOT::R::TRFunctionExport::SetFunction ; (; T ; fun). inline . function to assign function to export, template method that supports a lot of function's prototypes ; Parameters. funsupported function to be wrapped by Rcpp . Definition at line 178 of file TRFunctionExport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionExport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionExport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file TRFunctionExport.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionExport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 141 of file TRFunctionExport.h. Member Data Documentation. ◆ f. TRInternalFunction* ROOT::R::TRFunctionExport::f. protected . Definition at line 144 of file TRFunctionExport.h. Libraries for ROOT::R::TRFunctionExport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionExport.h; bindings/r/src/TRFunctionExport.cxx. ROOTRTRFunctionExport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:18175,Guid,Guide,18175,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html,1,['Guid'],['Guide']
Usability,"ic . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamEventDensity::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file PDEFoamEventDensity.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamEventDensity::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file PDEFoamEventDensity.h. ◆ Density(). Double_t TMVA::PDEFoamEventDensity::Density ; (; std::vector< Double_t > & ; xev, . Double_t & ; event_density . ). virtual . This function is needed during the foam buildup. ; It returns the event density within the range-searching volume (specified by fBox).; Parameters:. xev - event vector (in [fXmin,fXmax]) to place the box at; event_density - here the event density is stored. Returns:; Number of events (event weights), which were found in the range-searching volume at point 'xev', divided by the box volume. ; Implements TMVA::PDEFoamDensityBase.; Definition at line 101 of file PDEFoamEventDensity.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamEventDensity::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDensityBase.; Definition at line 55 of file PDEFoamEventDensity.h. ◆ Streamer(). virtual void TMVA::PDEFoamEventDensity::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDensityBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamEventDensity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file PDEFoamEventDensity.h. Libraries for TMVA::PDEFoamEventDensity:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamEventDensity.h; tmva/tmva/src/PDEFoamEventDensity.cxx. TMVAPDEFoamEventDensity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEventDensity.html:14543,Guid,Guide,14543,doc/master/classTMVA_1_1PDEFoamEventDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEventDensity.html,1,['Guid'],['Guide']
Usability,"ic Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:44124,clear,clearCacheObject,44124,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,2,['clear'],['clearCacheObject']
Usability,"ic Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTEveStraightLineSet::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScalableStraightLineSet.html:2939,Clear,Clear,2939,root/html528/TEveScalableStraightLineSet.html,https://root.cern,https://root.cern/root/html528/TEveScalableStraightLineSet.html,1,['Clear'],['Clear']
Usability,"ic Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Conne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveStraightLineSet.html:2977,Clear,Clear,2977,root/html528/TEveStraightLineSet.html,https://root.cern,https://root.cern/root/html528/TEveStraightLineSet.html,6,['Clear'],['Clear']
Usability,"ic Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTEveStraightLineSet::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveStraightLineSetProjected.html:2963,Clear,Clear,2963,root/html528/TEveStraightLineSetProjected.html,https://root.cern,https://root.cern/root/html528/TEveStraightLineSetProjected.html,11,['Clear'],['Clear']
Usability,"ic Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoNodeEditor.html:22708,undo,undoing,22708,root/html604/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html604/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ic Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNodeEditor.html:22708,undo,undoing,22708,root/html602/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ic Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::VariableImportance Class ReferenceTMVA. . Definition at line 44 of file VariableImportance.h. Public Member Functions;  VariableImportance (DataLoader *loader);  ;  ~VariableImportance ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; const VariableImportanceResult & GetResults () const;  ; VIType GetType ();  ; virtual TClass * IsA () const;  ; void SetType (VIType type);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:1232,learn,learning,1232,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['learn'],['learning']
Usability,"ic Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::unique_ptr< RooAbsPdf > create (RooAbsPdf &pdf, RooAbsData const &data, double precision);  Creates a wrapping RooBinSamplingPdf if appropriate. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:59875,clear,clearEvalErrorLog,59875,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"ic Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclIdToTClass::CountElementsWithKey ; (; const key_type & ; key). inline . Definition at line 453 of file TClass.cxx. ◆ Find(). equal_range ROOT::TMapDeclIdToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 457 of file TClass.cxx. ◆ Remove(). void ROOT::TMapDeclIdToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 462 of file TClass.cxx. Member Data Documentation. ◆ fMap. DeclIdMap_t ROOT::TMapDeclIdToTClass::fMap. private . Definition at line 444 of file TClass.cxx. core/meta/src/TClass.cxx. ROOTTMapDeclIdToTClass. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html:2593,Guid,Guide,2593,doc/v632/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html,1,['Guid'],['Guide']
Usability,"ic Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCombiTransEditor.html:22298,undo,undoing,22298,root/html534/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html534/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"ic Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for fileDesc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ fileDesc(). fileDesc::fileDesc ; (; const char * ; n, . const char * ; o, . Long_t ; t, . const char * ; d . ). inline . Definition at line 745 of file TProofBench.cxx. Member Function Documentation. ◆ Compare(). Int_t fileDesc::Compare ; (; const TObject * ; obj); const. inlineoverridevirtual . Compare abstract method. ; Must be overridden if a class wants to be able to compare itself with other objects. Must return -1 if this is smaller than obj, 0 if objects are equal and 1 if this is larger than obj. ; Reimplemented from TObject.; Definition at line 747 of file TProofBench.cxx. Member Data Documentation. ◆ fDesc. TString fileDesc::fDesc. Definition at line 744 of file TProofBench.cxx. ◆ fMtime. Long_t fileDesc::fMtime. Definition at line 743 of file TProofBench.cxx. proof/proofbench/src/TProofBench.cxx. fileDesc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classfileDesc.html:11825,Guid,Guide,11825,doc/master/classfileDesc.html,https://root.cern,https://root.cern/doc/master/classfileDesc.html,1,['Guid'],['Guide']
Usability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  ; TString SecToText (Double_t, Bool_t) const;  pretty string output ;  . Private Attributes; Bool_t fColourfulOutput;  flag for use of colors ;  ; MsgLogger * fLogger;  ! the output logger ;  ; Int_t fNcounts;  reference number of ""counts"" ;  ; Bool_t fOutputToFile;  ; TString fPrefix;  prefix for outputs ;  ; Int_t fPreviousProgress;  ; TString fPreviousTimeEstimate;  ; Int_t fProgressBarStringLength;  . Static Private Attributes; static const TString fgClassName = ""Timer"";  used for output ;  ; static const Int_t fgNbins = 16;  number of bins in progress bar ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:12506,progress bar,progress bar,12506,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['progress bar'],['progress bar']
Usability,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TBreakLineCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBreakLineCom(). TBreakLineCom::TBreakLineCom ; (; TGTextEdit * ; te). inline . Definition at line 139 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TBreakLineCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 145 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TBreakLineCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBreakLineCom.html:10780,Guid,Guide,10780,doc/master/classTBreakLineCom.html,https://root.cern,https://root.cern/doc/master/classTBreakLineCom.html,1,['Guid'],['Guide']
Usability,"ic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleInterval.html:7788,Simpl,SimpleInterval,7788,root/html604/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleInterval.html,2,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7788,Simpl,SimpleInterval,7788,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::Getenvvirtual const char * Getenv(const char *env)Get environment variable.Definition TSystem.cxx:1665; TSystem::ConcatFileNamevirtual char * ConcatFileName(const char *dir, const char *name)Concatenate a directory and a file name. User must delete returned string.Definition TSystem.cxx:1071; TSystem::Renamevirtual int Rename(const char *from, const char *to)Rename a file.Definition TSystem.cxx:1350; TSystem::WorkingDirectoryvirtual const char * WorkingDirectory()Return working directory.Definition TSystem.cxx:871; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TWriteEnvParserDefinition TEnv.cxx:242; TWriteEnvParser::KeyValuevoid KeyValue(const TString &name, const TString &value, const TString &type) overrideWrite resources out to a new file.Definition TEnv.cxx:256; TWriteEnvParser::Charvoid Char(Int_t c) overrideDefinition TEnv.cxx:250; TWriteEnvParser::TWriteEnvParserTWriteEnvParser(TEnv *e, FILE *f, FILE *of)Definition TEnv.cxx:248; TWriteEnvParser::fOfpFILE * fOfpDefinition TEnv.cxx:245; bool; double; int; nconst Int_t nDefinition legend1.C:16; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; v@ vDefinition rootcling_impl.cxx:3699; BoolNameTable_tDefinition TEnv.cxx:86; BoolNameTable_t::fValueInt_t fValueDefinition TEnv.cxx:88; BoolNameTable_t::fNameconst char * fNameDefinition TEnv.cxx:87; lTLine lDefinition textangle.C:4. corebasesrcTEnv.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:33055,Guid,Guide,33055,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ic Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGVProgressBar.html:20452,Simpl,Simple,20452,root/html534/TGVProgressBar.html,https://root.cern,https://root.cern/root/html534/TGVProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"ic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14010,learn,learnt,14010,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,2,['learn'],"['learning', 'learnt']"
Usability,"ic const char * TMVA::GeneticGenes::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::GeneticGenes::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file GeneticGenes.h. ◆ DeclFileName(). static const char * TMVA::GeneticGenes::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file GeneticGenes.h. ◆ GetFactors(). std::vector< Double_t > & TMVA::GeneticGenes::GetFactors ; (; ). inline . Definition at line 49 of file GeneticGenes.h. ◆ GetFitness(). Double_t TMVA::GeneticGenes::GetFitness ; (; ); const. inline . Definition at line 52 of file GeneticGenes.h. ◆ IsA(). virtual TClass * TMVA::GeneticGenes::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 61 of file GeneticGenes.h. ◆ SetFitness(). void TMVA::GeneticGenes::SetFitness ; (; Double_t ; fitness). inline . Definition at line 51 of file GeneticGenes.h. ◆ Streamer(). virtual void TMVA::GeneticGenes::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::GeneticGenes::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file GeneticGenes.h. Friends And Related Symbol Documentation. ◆ operator<. Bool_t operator< ; (; const GeneticGenes & ; , . const GeneticGenes & ;  . ). friend . Member Data Documentation. ◆ fFactors. std::vector<Double_t> TMVA::GeneticGenes::fFactors. private . Definition at line 58 of file GeneticGenes.h. ◆ fFitness. Double_t TMVA::GeneticGenes::fFitness. private . Definition at line 59 of file GeneticGenes.h. Libraries for TMVA::GeneticGenes:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticGenes.h; tmva/tmva/src/GeneticGenes.cxx. TMVAGeneticGenes. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html:3773,Guid,Guide,3773,doc/master/classTMVA_1_1GeneticGenes.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html,1,['Guid'],['Guide']
Usability,ic constexpr Version_t TEveRecV0::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 220 of file TEveVSDStructs.h. ◆ DeclFileName(). static const char * TEveRecV0::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 220 of file TEveVSDStructs.h. ◆ IsA(). TClass * TEveRecV0::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 220 of file TEveVSDStructs.h. ◆ Streamer(). void TEveRecV0::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveRecV0::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 220 of file TEveVSDStructs.h. Member Data Documentation. ◆ fDLabel. Int_t TEveRecV0::fDLabel[2]. Definition at line 213 of file TEveVSDStructs.h. ◆ fLabel. Int_t TEveRecV0::fLabel. Definition at line 211 of file TEveVSDStructs.h. ◆ fPdg. Int_t TEveRecV0::fPdg. Definition at line 212 of file TEveVSDStructs.h. ◆ fPNeg. TEveVector TEveRecV0::fPNeg. Definition at line 203 of file TEveVSDStructs.h. ◆ fPPos. TEveVector TEveRecV0::fPPos. Definition at line 205 of file TEveVSDStructs.h. ◆ fStatus. Int_t TEveRecV0::fStatus. Definition at line 200 of file TEveVSDStructs.h. ◆ fV0Birth. TEveVector TEveRecV0::fV0Birth. Definition at line 208 of file TEveVSDStructs.h. ◆ fVCa. TEveVector TEveRecV0::fVCa. Definition at line 207 of file TEveVSDStructs.h. ◆ fVNeg. TEveVector TEveRecV0::fVNeg. Definition at line 202 of file TEveVSDStructs.h. ◆ fVPos. TEveVector TEveRecV0::fVPos. Definition at line 204 of file TEveVSDStructs.h. Libraries for TEveRecV0:. [legend]; The documentation for this class was generated from the following file:; graf3d/eve/inc/TEveVSDStructs.h. TEveRecV0. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecV0.html:12603,Guid,Guide,12603,doc/master/classTEveRecV0.html,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html,1,['Guid'],['Guide']
Usability,"ic player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.CDrawing a fine tank, using ROOT geometry class ;  xtruDraw.CDraw a ""representative"" TXTRU shape ;  xtruSamples.CDraw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  ► gl;  customcolorgl.h;  glbox.CDisplay a 3D histogram using GL (box option) ;  gldemos.CMenu for running GL demos ;  glh3c.CDisplay a 3D histogram using GL (box option) ;  glparametric.CShow rendering of parametric surfaces ;  glparametrics2.CShow rendering of parametric surfaces ;  glrose.CRender a TF2 looking like a rose ;  glsurfaces.CVarious surfaces rendered with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:110263,simpl,simple,110263,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"ic:. virtual~TF2(); voidTObject::AbstractMethod(const char* method) const; static voidTF1::AbsValue(Bool_t reject = kTRUE); virtual voidTFormula::Analyze(const char* schain, Int_t& err, Int_t offset = 0); virtual Bool_tTFormula::AnalyzeFunction(TString& chaine, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTF1::Browse(TBrowser* b); static voidTF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0E-11); virtual Double_tTF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); virtual Double_tCentralMoment2(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon = 9.9999999999999995E-7); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidCopy(TObject& f2) const; virtual Double_tCovariance2XY(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon = 9.9999999999999995E-7); virtual TH1*CreateHistogram(); virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tTFormula::DefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTF1::Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative3(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; static Double_tTF1::DerivativeError(); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF2.html:1419,Clear,Clear,1419,root/html602/TF2.html,https://root.cern,https://root.cern/root/html602/TF2.html,1,['Clear'],['Clear']
Usability,"ic:; 37 virtual TIterator &operator=(const TIterator &) = 0;; 38 virtual ~TIterator() { }; 39 virtual const TCollection *GetCollection() const = 0;; 40 virtual Option_t *GetOption() const { return """"; }; 41 virtual TObject *Next() = 0;; 42 virtual void Reset() = 0;; 43 TObject *operator()() { return Next(); }; 44 virtual Bool_t operator!=(const TIterator &) const;; 45 Bool_t operator==(const TIterator & other) const { return !(*this != other); }; 46 virtual TObject *operator*() const;; 47 ; 48 ClassDef(TIterator,0) //Iterator abstract base class; 49};; 50 ; 51#endif; Bool_tbool Bool_tDefinition RtypesCore.h:63; Option_tconst char Option_tDefinition RtypesCore.h:66; Rtypes.h; ClassDef#define ClassDef(name, id)Definition Rtypes.h:342; TCollectionCollection abstract base class.Definition TCollection.h:65; TIteratorIterator abstract base class.Definition TIterator.h:30; TIterator::operator()TObject * operator()()Definition TIterator.h:43; TIterator::Resetvirtual void Reset()=0; TIterator::operator==Bool_t operator==(const TIterator &other) constDefinition TIterator.h:45; TIterator::~TIteratorvirtual ~TIterator()Definition TIterator.h:38; TIterator::operator!=virtual Bool_t operator!=(const TIterator &) constCompare two iterator objects.Definition TIterator.cxx:28; TIterator::Nextvirtual TObject * Next()=0; TIterator::TIteratorTIterator(const TIterator &)Definition TIterator.h:34; TIterator::GetOptionvirtual Option_t * GetOption() constDefinition TIterator.h:40; TIterator::operator*virtual TObject * operator*() constReturn current object or nullptr.Definition TIterator.cxx:39; TIterator::operator=virtual TIterator & operator=(const TIterator &)=0; TIterator::GetCollectionvirtual const TCollection * GetCollection() const =0; TIterator::TIteratorTIterator()Definition TIterator.h:33; TObjectMother of all ROOT objects.Definition TObject.h:41; bool. corecontincTIterator.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIterator_8h_source.html:3105,Guid,Guide,3105,doc/master/TIterator_8h_source.html,https://root.cern,https://root.cern/doc/master/TIterator_8h_source.html,1,['Guid'],['Guide']
Usability,"icLooper::GenericReadstatic Int_t GenericRead(TBuffer &buf, void *, const void *, const TLoopConfiguration *loopconf, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2530; TStreamerInfoActions::GenericLooper::SimpleReadFloat16static void SimpleReadFloat16(TBuffer &buf, void *addr)Definition TStreamerInfoActions.cxx:2550; TStreamerInfoActions::GenericLooper::ReadNumericalCollectionstatic Int_t ReadNumericalCollection(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2564; TStreamerInfoActions::GenericLooper::GenericWritestatic Int_t GenericWrite(TBuffer &buf, void *, const void *, const TLoopConfiguration *loopconf, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2537; TStreamerInfoActions::GenericLooper::ReadCollectionBasicTypestatic Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2615; TStreamerInfoActions::GenericLooper::SimpleReadstatic void SimpleRead(TBuffer &buf, void *addr)Definition TStreamerInfoActions.cxx:2545; TStreamerInfoActions::GenericLooper::ReadActionstatic Int_t ReadAction(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2365; TStreamerInfoActions::GenericLooper::SimpleReadDouble32static void SimpleReadDouble32(TBuffer &buf, void *addr)Definition TStreamerInfoActions.cxx:2555; TStreamerInfoActions::GenericLooper::ReadCollectionDouble32static Int_t ReadCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2607; TStreamerInfoActions::NoFactorMarkerDefinition TStreamerInfoActions.cxx:63; TStreamerInfoActions::NoFactorMarker::Value_tFrom Value_tDefinition TStreamerInfoActions.cxx:64; TStreamerInfoActions::TBitsConfigurationDefinition TStreamerInfoActions.cxx:149; TStreamerInfoActions::TBitsConfiguration::AddToOffsetvoid AddToOffset(Int_t delta) overrideDefinition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:269277,Simpl,SimpleReadstatic,269277,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['Simpl'],"['SimpleRead', 'SimpleReadstatic']"
Usability,"icRelu(). template<typename AReal = Float_t> . void TMVA::DNN::TCpu< AFloat >::SymmetricRelu ; (; Tensor_t & ; B). static . Definition at line 173 of file ActivationFunctions.hxx. ◆ SymmetricReluDerivative(). template<typename AReal = Float_t> . void TMVA::DNN::TCpu< AFloat >::SymmetricReluDerivative ; (; Tensor_t & ; B, . const Tensor_t & ; A . ). static . Definition at line 181 of file ActivationFunctions.hxx. ◆ Tanh(). template<typename AReal = Float_t> . void TMVA::DNN::TCpu< AFloat >::Tanh ; (; Tensor_t & ; B). static . Definition at line 102 of file ActivationFunctions.hxx. ◆ TanhDerivative(). template<typename AReal = Float_t> . void TMVA::DNN::TCpu< AFloat >::TanhDerivative ; (; Tensor_t & ; B, . const Tensor_t & ; A . ). static . Definition at line 110 of file ActivationFunctions.hxx. ◆ TransposeMultiply(). template<typename AReal > . void TMVA::DNN::TCpu< AReal >::TransposeMultiply ; (; Matrix_t & ; output, . const Matrix_t & ; input, . const Matrix_t & ; Weights, . Scalar_t ; alpha = 1.0, . Scalar_t ; beta = 0. . ). static . Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. ; Definition at line 77 of file Arithmetic.hxx. Member Data Documentation. ◆ fgRandomGen. template<typename AFloat_t > . TRandom * TMVA::DNN::TCpu< AFloat_t >::fgRandomGen = nullptr. staticprivate . Definition at line 67 of file Cpu.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h; tmva/tmva/src/DNN/Architectures/Cpu/ActivationFunctions.hxx; tmva/tmva/src/DNN/Architectures/Cpu/Arithmetic.hxx; tmva/tmva/src/DNN/Architectures/Cpu/Initialization.hxx; tmva/tmva/src/DNN/Architectures/Cpu/LossFunctions.hxx; tmva/tmva/src/DNN/Architectures/Cpu/OutputFunctions.hxx; tmva/tmva/src/DNN/Architectures/Cpu/Propagation.hxx; tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.hxx; tmva/tmva/src/DNN/Architectures/Cpu/Regularization.hxx. TMVADNNTCpu. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:69866,Guid,Guide,69866,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,1,['Guid'],['Guide']
Usability,"ic_cast<TEnum *>(selEnum)->GetConstants()) {; 1730 if (!listOfGlobals->FindObject(enumConstant)) {; 1731 listOfGlobals->Add(enumConstant);; 1732 }; 1733 }; 1734 } else {; 1735 // This enum is in a namespace. A TClass entry is bootstrapped if; 1736 // none exists yet and the enum is added to it; 1737 TClass *nsTClassEntry = TClass::GetClass(enumScope);; 1738 if (!nsTClassEntry) {; 1739 nsTClassEntry = new TClass(enumScope, 0, TClass::kNamespaceForMeta, true);; 1740 }; 1741 auto listOfEnums = nsTClassEntry->fEnums.load();; 1742 if (!listOfEnums) {; 1743 if ((kIsClass | kIsStruct | kIsUnion) & nsTClassEntry->Property()) {; 1744 // For this case, the list will be immutable once constructed; 1745 // (i.e. in this case, by the end of this routine).; 1746 listOfEnums = nsTClassEntry->fEnums = new TListOfEnums(nsTClassEntry);; 1747 } else {; 1748 // namespaces can have enums added to them; 1749 listOfEnums = nsTClassEntry->fEnums = new TListOfEnumsWithLock(nsTClassEntry);; 1750 }; 1751 }; 1752 if (listOfEnums && !listOfEnums->THashList::FindObject(enumName)) {; 1753 ((TEnum *)selEnum)->SetClass(nsTClassEntry);; 1754 listOfEnums->Add(selEnum);; 1755 }; 1756 }; 1757 }; 1758 enums->Clear();; 1759 delete enums;; 1760 }; 1761 ; 1762 pcmFile.GetObject(""__ProtoClasses"", protoClasses);; 1763 ; 1764 if (protoClasses) {; 1765 for (auto obj : *protoClasses) {; 1766 TProtoClass *proto = (TProtoClass *)obj;; 1767 TClassTable::Add(proto);; 1768 }; 1769 // Now that all TClass-es know how to set them up we can update; 1770 // existing TClasses, which might cause the creation of e.g. TBaseClass; 1771 // objects which in turn requires the creation of TClasses, that could; 1772 // come from the PCH, but maybe later in the loop. Instead of resolving; 1773 // a dependency graph the addition to the TClassTable above allows us; 1774 // to create these dependent TClasses as needed below.; 1775 for (auto proto : *protoClasses) {; 1776 if (TClass *existingCl = (TClass *)gROOT->GetListOfClasses()->Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:66069,Clear,Clear,66069,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ical User Interface; 10 Folders and Tasks; 11 Input/Output; 12 Trees; 13 Math Libraries in ROOT; 14 Linear Algebra in ROOT; 15 Adding a Class; 16 Collection Classes; 17 Physics Vectors; 18 The Geometry Package; 19 Python Interface; 20 The Tutorials and Tests; 21 Example Analysis; 22 Networking; 23 Threads; 24 PROOF: Parallel Processing; 25 Writing a Graphical User Interface; 26 The Signal/Slot Communication Mechanism; 27 Automatic HTML Documentation; 28 Appendix A: Install and Build ROOT. WARNING: This documentation is not maintained anymore. Some part might be obsolete or wrong, some part might be missing but still some valuable information can be found there. Instead please refer to the ROOT Reference Guide and the ROOT Manual. If you think some information should be imported in the ROOT Reference Guide or in the ROOT Manual, please post your request to the ROOT Forum or via a Github Issue. Preface; In late 1994, we decided to learn and investigate Object Oriented programming and C++ to better judge the suitability of these relatively new techniques for scientific programming. We knew that there is no better way to learn a new programming environment than to use it to write a program that can solve a real problem. After a few weeks, we had our first histogramming package in C++. A few weeks later we had a rewrite of the same package using the, at that time, very new template features of C++. Again, a few weeks later we had another rewrite of the package without templates since we could only compile the version with templates on one single platform using a specific compiler. Finally, after about four months we had a histogramming package that was faster and more efficient than the well-known FORTRAN based HBOOK histogramming package. This gave us enough confidence in the new technologies to decide to continue the development. Thus was born ROOT. Since its first public release at the end of 1995, ROOT has enjoyed an ever-increasing popularity. Currently it is being ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1164,learn,learn,1164,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learn']
Usability,"ically sets 'mvf=1'; it is still possible to set 'mvf=11'; to save results after each packet. The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:51063,feedback,feedback,51063,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['feedback'],['feedback']
Usability,"ically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:1365,learn,learning,1365,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,3,['learn'],['learning']
Usability,ication of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:155769,simpl,simple,155769,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,ication.; Definition at line 41 of file TApplicationImp.h. ◆ Iconify(). virtual void TApplicationImp::Iconify ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 42 of file TApplicationImp.h. ◆ Init(). virtual void TApplicationImp::Init ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 44 of file TApplicationImp.h. ◆ IsA(). virtual TClass * TApplicationImp::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 50 of file TApplicationImp.h. ◆ IsCmdThread(). virtual Bool_t TApplicationImp::IsCmdThread ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 43 of file TApplicationImp.h. ◆ Lower(). virtual void TApplicationImp::Lower ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 47 of file TApplicationImp.h. ◆ Open(). virtual void TApplicationImp::Open ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 45 of file TApplicationImp.h. ◆ Raise(). virtual void TApplicationImp::Raise ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 46 of file TApplicationImp.h. ◆ Show(). virtual void TApplicationImp::Show ; (; ). inlinevirtual . Reimplemented in TRootApplication.; Definition at line 40 of file TApplicationImp.h. ◆ Streamer(). virtual void TApplicationImp::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TApplicationImp::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TApplicationImp.h. Member Data Documentation. ◆ fApplicationName. TString TApplicationImp::fApplicationName. protected . Definition at line 32 of file TApplicationImp.h. Libraries for TApplicationImp:. [legend]; The documentation for this class was generated from the following file:; core/gui/inc/TApplicationImp.h. TApplicationImp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationImp.html:4943,Guid,Guide,4943,doc/master/classTApplicationImp.html,https://root.cern,https://root.cern/doc/master/classTApplicationImp.html,1,['Guid'],['Guide']
Usability,"icconstexpr . ReturnsVersion of this class ; Definition at line 47 of file TSQLResult.h. ◆ Close(). virtual void TSQLResult::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLResult, TODBCResult, TPgSQLResult, TSQLiteResult, and TTreeResult. ◆ DeclFileName(). static const char * TSQLResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TSQLResult.h. ◆ GetFieldCount(). virtual Int_t TSQLResult::GetFieldCount ; (; ). pure virtual . Implemented in TMySQLResult, TODBCResult, TPgSQLResult, TSQLiteResult, and TTreeResult. ◆ GetFieldName(). virtual const char * TSQLResult::GetFieldName ; (; Int_t ; field). pure virtual . Implemented in TMySQLResult, TODBCResult, TPgSQLResult, TSQLiteResult, and TTreeResult. ◆ GetRowCount(). virtual Int_t TSQLResult::GetRowCount ; (; ); const. inlinevirtual . Reimplemented in TSQLiteResult.; Definition at line 44 of file TSQLResult.h. ◆ IsA(). TClass * TSQLResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 47 of file TSQLResult.h. ◆ Next(). virtual TSQLRow * TSQLResult::Next ; (; ). pure virtual . Implemented in TMySQLResult, TODBCResult, TPgSQLResult, TSQLiteResult, and TTreeResult. ◆ Streamer(). void TSQLResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSQLResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TSQLResult.h. Member Data Documentation. ◆ fRowCount. Int_t TSQLResult::fRowCount. protected . Definition at line 34 of file TSQLResult.h. Libraries for TSQLResult:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TSQLResult.h. TSQLResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLResult.html:12779,Guid,Guide,12779,doc/master/classTSQLResult.html,https://root.cern,https://root.cern/doc/master/classTSQLResult.html,1,['Guid'],['Guide']
Usability,"ice.h. ◆ SavePrimitive(). void TPieSlice::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; opts = """" . ). overridevirtual . Save as C++ macro, used directly from TPie. ; Reimplemented from TObject.; Definition at line 88 of file TPieSlice.cxx. ◆ SetIsActive(). void TPieSlice::SetIsActive ; (; Bool_t ; is). inline . Definition at line 40 of file TPieSlice.h. ◆ SetRadiusOffset(). void TPieSlice::SetRadiusOffset ; (; Double_t ; val). Set the radial offset of this slice. ; Definition at line 105 of file TPieSlice.cxx. ◆ SetValue(). void TPieSlice::SetValue ; (; Double_t ; val). Set the value for this slice. ; Negative values are changed with its absolute value. ; Definition at line 115 of file TPieSlice.cxx. ◆ Streamer(). void TPieSlice::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TPieSlice::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TPieSlice.h. Friends And Related Symbol Documentation. ◆ TPie. friend class TPie. friend . Definition at line 20 of file TPieSlice.h. Member Data Documentation. ◆ fIsActive. Bool_t TPieSlice::fIsActive. private . ! True if is the slice under the mouse pointer ; Definition at line 23 of file TPieSlice.h. ◆ fPie. TPie* TPieSlice::fPie {nullptr}. protected . The TPie object that contain this slice. ; Definition at line 26 of file TPieSlice.h. ◆ fRadiusOffset. Double_t TPieSlice::fRadiusOffset. protected . offset from the center of the pie ; Definition at line 28 of file TPieSlice.h. ◆ fValue. Double_t TPieSlice::fValue. protected . value value of this slice ; Definition at line 27 of file TPieSlice.h. Libraries for TPieSlice:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPieSlice.h; graf2d/graf/src/TPieSlice.cxx. TPieSlice. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPieSlice.html:19548,Guid,Guide,19548,doc/master/classTPieSlice.html,https://root.cern,https://root.cern/doc/master/classTPieSlice.html,1,['Guid'],['Guide']
Usability,"ich is obtained from inverting the cumulative posterior distribution. This calculator works then only for model with a single parameter of interest. The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function. The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT. See the MCMCCalculator for model with multiple parameters of interest.; The interface allows one to construct the class by passing the data set, probability density function for the model, the prior functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by scanning the posterior function in the given number of points. The first method is in general faster but it requires an integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be less robust.; The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using the GetPosteriorPlot method.; The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of this meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:1811,Simpl,SimpleInterval,1811,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Simpl'],['SimpleInterval']
Usability,"ics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:2964,Clear,ClearWindow,2964,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,4,['Clear'],"['Clear', 'ClearWindow']"
Usability,"ics due to filled weight ""w"",. ;  ; void Init (const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis, Int_t chunkSize=1024 *16);  Initialize axes and name. ;  ; THnBase & operator= (const THnBase &other);  ; THnBase & operator= (THnBase &&other);  ; Bool_t PrintBin (Long64_t idx, Int_t *coord, Option_t *options) const;  Print one bin. ;  ; TObject * ProjectionAny (Int_t ndim, const Int_t *dim, Bool_t wantNDim, Option_t *option="""") const;  Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ;  ; THnBase * RebinBase (const Int_t *group) const;  Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ;  ; THnBase * RebinBase (Int_t group) const;  Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ;  ; void ResetBase (Option_t *option="""");  Clear the histogram. ;  ; void UpdateXStat (const Double_t *x, Double_t w=1.);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  THnSparse (const THnSparse &)=delete;  ; THnSparse & operator= (const THnSparse &)=delete;  . Private Attributes; TObjArray fBinContent;  Array of THnSparseArrayChunk. ;  ; TExMap fBins;  ! Filled bins ;  ; TExMap fBinsContinued;  ! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1) ;  ; Int_t fChunkSize;  Number of entries for each chunk. ;  ; THnSparseCompactBinCoord * fCompactCoord;  ! Compact coordinate ;  ; Long64_t fFilledBins;  Number of filled bins. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsisten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:26189,Clear,Clear,26189,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['Clear'],['Clear']
Usability,"ics due to filled weight ""w"",. ;  ; void Init (const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis, Int_t chunkSize=1024 *16);  Initialize axes and name. ;  ; THnBase & operator= (const THnBase &other);  ; THnBase & operator= (THnBase &&other);  ; Bool_t PrintBin (Long64_t idx, Int_t *coord, Option_t *options) const;  Print one bin. ;  ; TObject * ProjectionAny (Int_t ndim, const Int_t *dim, Bool_t wantNDim, Option_t *option="""") const;  Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ;  ; THnBase * RebinBase (const Int_t *group) const;  Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ;  ; THnBase * RebinBase (Int_t group) const;  Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ;  ; void ResetBase (Option_t *option="""");  Clear the histogram. ;  ; void UpdateXStat (const Double_t *x, Double_t w=1.);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from THnBase; static THnBase * CreateHnAny (const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THn / THnSparse object from a histogram deriving from TH1. ;  ; static THnBase * CreateHnAny (const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly converting THn <-> THnSparse. ;  ;  Protected Attributes inherited from THnBase; TObjArray fAxes;  Axes of the histogram. ;  ; TObjArray fBrowsables;  ! Browser-helpers for each axis ;  ; Double_t fEntries;  Number of entries, spread over chunks. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:24380,Clear,Clear,24380,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['Clear'],['Clear']
Usability,"ics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset). const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Mon Dec 7 13:45:55 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:47558,intuit,intuitively,47558,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['intuit'],['intuitively']
Usability,"ictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed proper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:22703,usab,usable,22703,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['usab'],['usable']
Usability,"icular case where volume families are used is when we want; that a volume positioned inside a container to match one ore more container; limits. Suppose we want to position the same box inside 2 different volumes; and we want the Z size to match the one of each container:. TGeoVolume *container1 = gGeoManager->MakeBox(""C1"", imed, 10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"", imed, 10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; container1->AddNode(pvol, 1);; container2->AddNode(pvol, 1);. Note that the third parameter of PVOL is negative, which does not make sense; as half-length on Z. This is interpreted as: when positioned, create a box; replacing all invalid parameters with the corresponding dimensions of the; container. This is also internally handled by the TGeoVolumeMulti class, which; does not need to be instantiated by users. Dividing volumes. Volumes can be divided according a pattern. The most simple division can; be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take; the most simple case: we would like to divide a box in N equal slices along X; coordinate, representing a new volume family. Supposing we already have created; the initial box, this can be done like:. TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);. where SLICE is the name of the new family representing all slices and 1 is the; slicing axis. The meaning of the axis index is the following: for all volumes; having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; In fact, the division operation has the same effect as positioning volumes; in a given order inside the divided container - the advantage being that the; navigation in such a structure is much faster. When a volume is divided, a; volume family corresponding to the slices is created. In case all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:13029,simpl,simple,13029,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simple']
Usability,"icular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:7496,Simpl,SimpleInterval,7496,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,2,['Simpl'],['SimpleInterval']
Usability,"icular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1672,learn,learning,1672,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,['learn'],['learning']
Usability,"id *arg=nullptr, EPriority pri=kNormalPriority);  Create a thread. ;  ; virtual ~TThread ();  Cleanup the thread. ;  ; void Delete (Option_t *option="""") override;  Delete this object. ;  ; Long_t GetId () const;  ; EPriority GetPriority () const;  ; EState GetState () const;  ; TClass * IsA () const override;  ; Long_t Join (void **ret=nullptr);  Join this thread. ;  ; Int_t Kill ();  Kill this thread. ;  ; Int_t Run (void *arg=nullptr, const int affinity=-1);  Start the thread. ;  ; void SetPriority (EPriority pri);  Set thread priority. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:3364,Clear,Clear,3364,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['Clear'],['Clear']
Usability,"id *parent)=0Read the information and the weights about the layer from XML node.; TMVA::DNN::VGeneralLayer::UpdateBiasGradientsvoid UpdateBiasGradients(const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate)Updates the bias gradients, given some other weight gradients and learning rate.Definition GeneralLayer.h:448; TMVA::DNN::VGeneralLayer::SetBatchSizevoid SetBatchSize(size_t batchSize)Setters.Definition GeneralLayer.h:217; TMVA::DNN::VGeneralLayer::CopyWeightsvoid CopyWeights(const std::vector< Matrix_t > &otherWeights)Copies the weights provided as an input.Definition GeneralLayer.h:458; TMVA::DNN::VGeneralLayer::fBatchSizesize_t fBatchSizeBatch size used for training and evaluation.Definition GeneralLayer.h:59; TMVA::DNN::VGeneralLayer::AddWeightsXMLTovirtual void AddWeightsXMLTo(void *parent)=0Writes the information and the weights about the layer in an XML node.; TMVA::DNN::VGeneralLayer::UpdateWeightsvoid UpdateWeights(const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate)Updates the weights, given the gradients and the learning rate,.Definition GeneralLayer.h:418; TMVA::DNN::VGeneralLayer::Matrix_ttypename Architecture_t::Matrix_t Matrix_tDefinition GeneralLayer.h:54; TMVA::DNN::VGeneralLayer::GetBiasGradientsconst std::vector< Matrix_t > & GetBiasGradients() constDefinition GeneralLayer.h:190; TMVA::DNN::VGeneralLayer::SetInputDepthvoid SetInputDepth(size_t inputDepth)Definition GeneralLayer.h:218; TMVA::DNN::VGeneralLayer::GetWeightsconst std::vector< Matrix_t > & GetWeights() constDefinition GeneralLayer.h:172; TMVA::DNN::VGeneralLayer::GetDepthsize_t GetDepth() constDefinition GeneralLayer.h:167; TMVA::DNN::VGeneralLayer::GetWeightsstd::vector< Matrix_t > & GetWeights()Definition GeneralLayer.h:173; TMVA::DNN::VGeneralLayer::fWidthsize_t fWidthThe width of this layer.Definition GeneralLayer.h:67; TMVA::DNN::VGeneralLayer::fInitEInitialization fInitThe initialization method.Definition GeneralLayer.h:80; TMVA::DNN:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:30194,learn,learningRate,30194,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"id *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TQCommand.h>. Inheritance diagram for TQCommand:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQCommand() [1/3]. TQCommand::TQCommand ; (; const char * ; clname = nullptr, . void * ; obj = nullptr, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; clname - class name.; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments:; if either clname or obj is NULL that means that redo/undo is function; to specify default arguments for redo/undo method/function '=' must precede to argument value. Example: TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case undo parameter can be omitted.; Example: TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. Definition at line 168 of file TQCommand.cxx. ◆ TQCommand() [2/3]. TQCommand::TQCommand ; (; TObject * ; obj, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments: to specify default arguments for redo/undo method/function '=' must precede to argument value.; Example: TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case ""undo"" can parameter be omitted.; Example: TQCommand(gPad, ""SetFillStyle(Style_t)"");. Definition at line 199 of file TQCommand.cxx. ◆ TQCommand() [3/3]. TQCommand::TQCommand ; (; const TQCommand & ; com). Copy constructor. ; Definition at line 209 of file TQCommand.cxx. ◆ ~TQComma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:32405,undo,undo,32405,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"id * ; wghtnode). virtual . Implements TMVA::MethodBase.; Definition at line 551 of file MethodKNN.cxx. ◆ Streamer(). virtual void TMVA::MethodKNN::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodKNN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 143 of file MethodKNN.h. ◆ Train(). void TMVA::MethodKNN::Train ; (; void ; ). virtual . kNN training ; Implements TMVA::MethodBase.; Definition at line 234 of file MethodKNN.cxx. ◆ WriteWeightsToStream(). void TMVA::MethodKNN::WriteWeightsToStream ; (; TFile & ; rf); const. save weights to ROOT file ; Definition at line 678 of file MethodKNN.cxx. Member Data Documentation. ◆ fBalanceDepth. Int_t TMVA::MethodKNN::fBalanceDepth. private . number of binary tree levels used for balancing tree ; Definition at line 124 of file MethodKNN.h. ◆ fEvent. kNN::EventVec TMVA::MethodKNN::fEvent. private . ! (untouched) events used for learning ; Definition at line 136 of file MethodKNN.h. ◆ fKernel. TString TMVA::MethodKNN::fKernel. private . =""Gaus"",""Poln"" - kernel type for smoothing ; Definition at line 129 of file MethodKNN.h. ◆ fLDA. LDA TMVA::MethodKNN::fLDA. private . ! Experimental feature for local knn analysis ; Definition at line 138 of file MethodKNN.h. ◆ fModule. kNN::ModulekNN* TMVA::MethodKNN::fModule. private . ! module where all work is done ; Definition at line 121 of file MethodKNN.h. ◆ fnkNN. Int_t TMVA::MethodKNN::fnkNN. private . number of k-nearest neighbors ; Definition at line 123 of file MethodKNN.h. ◆ fScaleFrac. Float_t TMVA::MethodKNN::fScaleFrac. private . fraction of events used to compute variable width ; Definition at line 126 of file MethodKNN.h. ◆ fSigmaFact. Float_t TMVA::MethodKNN::fSigmaFact. private . scale factor for Gaussian sigma in Gaus. kernel ; Definition at line 127 of file MethodKNN.h. ◆ fSumOfWeightsB. Double_t TMVA::MethodKNN::fSumOfWeightsB. private . sum-of-weights for backgrou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html:36982,learn,learning,36982,doc/master/classTMVA_1_1MethodKNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html,1,['learn'],['learning']
Usability,"id DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject* selected); Report name and title of primitive below the cursor. This function is called when the option ""Event Status""; in the canvas menu ""Options"" is selected. void EditorBar(); Get editor bar. void EmbedInto(Int_t winid, Int_t ww, Int_t wh); Embedded a canvas into a TRootEmbeddedCanvas. This method is only called; via TRootEmbeddedCanvas::AdoptCanvas. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); Generate kMouseEnter and kMouseLeave events depending on the previously; selected object and the currently selected object. Does nothing if the; selected object does not change. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function must be implemented to realize the action; corresponding to the mouse click on the object in the canvas. Only handle mouse motion events in TCanvas, all other events are; ignored for the time being. void FeedbackMode(Bool_t set); Turn rubberband feedback mode on or off. void Flush(); Flush canvas buffers. void UseCurrentStyle(); Force a copy of current style for all objects in canvas. Int_t GetWindowTopX(); Returns current top x position of window on screen. Int_t GetWindowTopY(); Returns current top y position of window on screen. void HandleInput(EEventType button, Int_t x, Int_t y); Handle Input Events. Handle input events, like button up/down in current canvas. Bool_t IsFolder() const; Is folder ?. void ls(Option_t* option = """") const; List all pads. TCanvas * MakeDefCanvas(); Static function to build a default canvas. void MoveOpaque(Int_t set = 1); Set option to move objects/pads in a canvas. if set = 1 (default) graphics objects are moved in opaque mode; = 0 only the outline of objects is drawn when moving them; The option opaque produces the best effect. It requires however a; a reasonably fast workstation or response time. void Paint(Option_t* option = """"); Paint canvas. TPad * Pick(Int_t px, Int_t py, TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:39549,Feedback,FeedbackMode,39549,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,14,"['Feedback', 'feedback']","['FeedbackMode', 'feedback']"
Usability,"id RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41969,clear,clear,41969,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"id RooMinimizer::setRecoverFromNaNStrength ; (; double ; strength). Try to recover from invalid function values. ; When invalid function values are encountered, a penalty term is returned to the minimiser to make it back off. This sets the strength of this penalty. NoteA strength of zero is equivalent to a constant penalty (= the gradient vanishes, ROOT < 6.24). Positive values lead to a gradient pointing away from the undefined regions. Use ~10 to force the minimiser away from invalid function values. ; Definition at line 802 of file RooMinimizer.cxx. ◆ setStrategy(). void RooMinimizer::setStrategy ; (; int ; istrat). Change MINUIT strategy to istrat. ; Accepted codes are 0,1,2 and represent MINUIT strategies for dealing most efficiently with fast FCNs (0), expensive FCNs (2) and 'intermediate' FCNs (1) ; Definition at line 189 of file RooMinimizer.cxx. ◆ setVerbose(). void RooMinimizer::setVerbose ; (; bool ; flag = true). inline . Definition at line 153 of file RooMinimizer.h. ◆ simplex(). int RooMinimizer::simplex ; (; ). Execute SIMPLEX. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 453 of file RooMinimizer.cxx. ◆ Streamer(). void RooMinimizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 247 of file RooMinimizer.h. ◆ update(). bool RooMinimizer::update ; (; bool ; isValid). private . Definition at line 1100 of file RooMinimizer.cxx. ◆ updateErrors(). void RooMinimizer::updateErrors ; (; ). private . Definition at line 1129 of file RooMinimizer.cxx. ◆ updateFitConfig(). void RooMinimizer::updateFitConfig ; (; ). private . Definition at line 1013 of file RooMinimizer.cxx. ◆ updateMinimizerOptions(). bool RooMinimizer::updateMi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:29552,simpl,simplex,29552,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['simpl'],['simplex']
Usability,"id SavePrimitive(std::ostream &out, Option_t *option = """") override;; 133 void SetBatch(Bool_t batch=kTRUE) override;; 134 ; 135private:; 136 TPad(const TPad &pad) = delete;; 137 TPad &operator=(const TPad &rhs) = delete;; 138 ; 139 void CopyBackgroundPixmap(Int_t x, Int_t y);; 140 void CopyBackgroundPixmaps(TPad *start, TPad *stop, Int_t x, Int_t y);; 141 void DrawDist(Rectangle_t aBBox, Rectangle_t bBBox, char mode);; 142 ; 143 Bool_t Collide(Int_t i, Int_t j, Int_t w, Int_t h);; 144 void FillCollideGrid(TObject *o);; 145 void FillCollideGridTBox(TObject *o);; 146 void FillCollideGridTFrame(TObject *o);; 147 void FillCollideGridTGraph(TObject *o);; 148 void FillCollideGridTH1(TObject *o);; 149 void LineNotFree(Int_t x1, Int_t x2, Int_t y1, Int_t y2);; 150 ; 151public:; 152 // TPad status bits; 153 enum {; 154 kFraming = BIT(6), ///< Frame is requested; 155 kHori = BIT(9), ///< Pad is horizontal; 156 kClipFrame = BIT(10), ///< Clip on frame; 157 kPrintingPS = BIT(11), ///< PS Printing; 158 kCannotMove = BIT(12), ///< Fixed position; 159 kClearAfterCR = BIT(14) ///< Clear after CR; 160 };; 161 ; 162 TPad();; 163 TPad(const char *name, const char *title, Double_t xlow,; 164 Double_t ylow, Double_t xup, Double_t yup,; 165 Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2);; 166 ~TPad() override;; 167 void AbsCoordinates(Bool_t set) override { fAbsCoord = set; }; 168 Double_t AbsPixeltoX(Int_t px) override { return fAbsPixeltoXk + px*fPixeltoX; }; 169 Double_t AbsPixeltoY(Int_t py) override { return fAbsPixeltoYk + py*fPixeltoY; }; 170 virtual void AbsPixeltoXY(Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);; 171 void Add(TObject *obj, Option_t *opt = """", Bool_t modified = kTRUE) override;; 172 void AddFirst(TObject *obj, Option_t *opt = """", Bool_t modified = kTRUE) override;; 173 void AddExec(const char *name, const char *command) override;; 174 virtual void AutoExec();; 175 void Browse(TBrowser *b) override;; 176 TLegend *BuildLegend(Double_t x1=0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:7517,Clear,Clear,7517,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['Clear'],['Clear']
Usability,"id SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStreamerInfoActions::TActionSequenceDefinition TStreamerInfoActions.h:177; TStreamerInfoActions::TActionSequence::SequenceGetter_tSequencePtr(*)(TStreamerInfo *info, TVirtualCollectionProxy *collectionProxy, TClass *originalClass) SequenceGetter_tDefinition TStreamerInfoActions.h:185; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetMakeClassInt_t GetMakeClass() constDefinition TTree.h:535; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; TVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators.Definition TVirtualCollectionIterators.h:26; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionPtrIteratorsDefinition TVirtualCollectionIterators.h:195; double; int; unsigned int; TStreamerInfoActions::TIDsstd::vector< TIDNode > TIDsDefinition TStreamerInfoActions.h:138; ROOT::RCompressionSetting::EAlgorithm::kInherit@ kInheritSome objects use this value to denote that the compression algorithm should be inherited from the par...Definition Compression.h:91. treetreeincTBranchElement.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8h_source.html:42982,Guid,Guide,42982,doc/master/TBranchElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8h_source.html,1,['Guid'],['Guide']
Usability,"id SetFitFormat(const char *format=""5.4g"")Change (i.e. set) the format for printing fit parameters in statistics box.Definition TPaveStats.cxx:291; TPaveStats::GetOptFitInt_t GetOptFit() constReturn the fit option.Definition TPaveStats.cxx:262; TPaveStats::SetParentvoid SetParent(TObject *obj) overrideDefinition TPaveStats.h:52; TPaveStats::SetOptFitvoid SetOptFit(Int_t fit=1)Set the fit option.Definition TPaveStats.cxx:299; TPaveStats::GetStatFormatvirtual const char * GetStatFormat() constDefinition TPaveStats.h:36; TPaveStats::Paintvoid Paint(Option_t *option="""") overridePaint the pave stat.Definition TPaveStats.cxx:325; TPaveStats::Classstatic TClass * Class(); TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Classstatic TClass * Class(); TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPaveText::Paintvoid Paint(Option_t *option="""") overridePaint this pavetext with its current attributes.Definition TPaveText.cxx:419; TPaveText::GetLinevirtual TText * GetLine(Int_t number) constGet Pointer to line number in this pavetext.Definition TPaveText.cxx:284; TPave::GetNameconst char * GetName() const overrideReturns name of object.Definition TPave.h:56; TPave::SetNamevirtual void SetName(const char *name="""")Definition TPave.h:79; TPave::SetBorderSizevirtual void SetBorderSize(Int_t bordersize=4)Sets the border size of the TPave box and shadow.Definition TPave.h:77; TPave::GetX1NDCDouble_t GetX1NDC() constDefinition TPave.h:59; TPave::SetX2NDCvirtual void SetX2NDC(Double_t x2)Definition TPave.h:83; TPickerStackGuardDefinition TVirtualPad.h:297; TPoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:485260,Clear,Clearvoid,485260,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"id SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::DrawFrameTH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") overrideDraw an empty pad frame with X and Y axis.Definition TPad.cxx:1678; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::SetLogyvoid SetLogy(Int_t value=1) overrideSet Lin/Log scale for Y.Definition TPad.cxx:6100; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::GetFrameTFrame * GetFrame() overrideGet frame.Definition TPad.cxx:2955; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPad::SetLogxvoid SetLogx(Int_t value=1) overrideSet Lin/Log scale for X.Definition TPad.cxx:6086; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TText.cxx:823; c1return c1Definition legend1.C:41; grTGraphErrors * grDefinition legend1.C:25; I#define I(x, y, z); graphDefinition graph.py:1; zdemoDefinition zdemo.py:1; t1auto * t1Definition textangle.C:20; AuthorsMichael Tokarev, Elena Potrebenikova (JINR Dubna) ; Definition in file zdemo.C. tutorialsgraphszdemo.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8C.html:11087,Guid,Guide,11087,doc/master/zdemo_8C.html,https://root.cern,https://root.cern/doc/master/zdemo_8C.html,1,['Guid'],['Guide']
Usability,"id TAttAxis::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TAttAxis. ; Reimplemented in TEveProjectionAxes, and TAxis.; Definition at line 336 of file TAttAxis.cxx. ◆ StreamerNVirtual(). void TAttAxis::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TAttAxis.h. Member Data Documentation. ◆ fAxisColor. Color_t TAttAxis::fAxisColor. protected . Color of the line axis. ; Definition at line 21 of file TAttAxis.h. ◆ fLabelColor. Color_t TAttAxis::fLabelColor. protected . Color of labels. ; Definition at line 22 of file TAttAxis.h. ◆ fLabelFont. Style_t TAttAxis::fLabelFont. protected . Font for labels. ; Definition at line 23 of file TAttAxis.h. ◆ fLabelOffset. Float_t TAttAxis::fLabelOffset. protected . Offset of labels. ; Definition at line 24 of file TAttAxis.h. ◆ fLabelSize. Float_t TAttAxis::fLabelSize. protected . Size of labels. ; Definition at line 25 of file TAttAxis.h. ◆ fNdivisions. Int_t TAttAxis::fNdivisions. protected . Number of divisions(10000*n3 + 100*n2 + n1) ; Definition at line 20 of file TAttAxis.h. ◆ fTickLength. Float_t TAttAxis::fTickLength. protected . Length of tick marks. ; Definition at line 26 of file TAttAxis.h. ◆ fTitleColor. Color_t TAttAxis::fTitleColor. protected . Color of axis title. ; Definition at line 29 of file TAttAxis.h. ◆ fTitleFont. Style_t TAttAxis::fTitleFont. protected . Font for axis title. ; Definition at line 30 of file TAttAxis.h. ◆ fTitleOffset. Float_t TAttAxis::fTitleOffset. protected . Offset of axis title. ; Definition at line 27 of file TAttAxis.h. ◆ fTitleSize. Float_t TAttAxis::fTitleSize. protected . Size of axis title. ; Definition at line 28 of file TAttAxis.h. Libraries for TAttAxis:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TAttAxis.h; core/base/src/TAttAxis.cxx. TAttAxis. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttAxis.html:13661,Guid,Guide,13661,doc/master/classTAttAxis.html,https://root.cern,https://root.cern/doc/master/classTAttAxis.html,1,['Guid'],['Guide']
Usability,"id TDocMacroDirective::DeleteOutput ; (; ); const. inlineoverridevirtual . Reimplemented from TDocDirective.; Definition at line 115 of file TDocDirective.h. ◆ GetEndTag(). const char * TDocMacroDirective::GetEndTag ; (; ); const. inlineoverridevirtual . Implements TDocDirective.; Definition at line 112 of file TDocDirective.h. ◆ GetResult(). Bool_t TDocMacroDirective::GetResult ; (; TString & ; result). overridevirtual . Get the result (i.e. ; an HTML img tag) for the macro invocation. If fShowSource is set, a second tab will be created which shows the source. ; Implements TDocDirective.; Definition at line 430 of file TDocDirective.cxx. ◆ IsA(). TClass * TDocMacroDirective::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDocDirective.; Definition at line 119 of file TDocDirective.h. ◆ Streamer(). void TDocMacroDirective::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDocDirective. ◆ StreamerNVirtual(). void TDocMacroDirective::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 119 of file TDocDirective.h. ◆ SubProcess(). void TDocMacroDirective::SubProcess ; (; const TString & ; what, . const TString & ; out . ). static . Definition at line 258 of file TDocDirective.cxx. Member Data Documentation. ◆ fIsFilename. Bool_t TDocMacroDirective::fIsFilename. private . Definition at line 100 of file TDocDirective.h. ◆ fMacro. TMacro* TDocMacroDirective::fMacro. private . Definition at line 97 of file TDocDirective.h. ◆ fNeedGraphics. Bool_t TDocMacroDirective::fNeedGraphics. private . Definition at line 98 of file TDocDirective.h. ◆ fShowSource. Bool_t TDocMacroDirective::fShowSource. private . Definition at line 99 of file TDocDirective.h. html/inc/TDocDirective.h; html/src/TDocDirective.cxx. TDocMacroDirective. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMacroDirective.html:17166,Guid,Guide,17166,doc/master/classTDocMacroDirective.html,https://root.cern,https://root.cern/doc/master/classTDocMacroDirective.html,1,['Guid'],['Guide']
Usability,id TMVA::TSynapse::SetLearningRate ; (; Double_t ; rate). inline . Definition at line 56 of file TSynapse.h. ◆ SetPostNeuron(). void TMVA::TSynapse::SetPostNeuron ; (; TNeuron * ; post). inline . Definition at line 68 of file TSynapse.h. ◆ SetPreNeuron(). void TMVA::TSynapse::SetPreNeuron ; (; TNeuron * ; pre). inline . Definition at line 65 of file TSynapse.h. ◆ SetWeight(). void TMVA::TSynapse::SetWeight ; (; Double_t ; weight). set synapse weight ; Definition at line 68 of file TSynapse.cxx. ◆ Streamer(). virtual void TMVA::TSynapse::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TSynapse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 101 of file TSynapse.h. Member Data Documentation. ◆ fCount. Int_t TMVA::TSynapse::fCount. private . number of updates contributing to error field ; Definition at line 95 of file TSynapse.h. ◆ fDEDw. Double_t TMVA::TSynapse::fDEDw. private . sum of deltas ; Definition at line 94 of file TSynapse.h. ◆ fDelta. Double_t TMVA::TSynapse::fDelta. private . local error field ; Definition at line 93 of file TSynapse.h. ◆ fLearnRate. Double_t TMVA::TSynapse::fLearnRate. private . learning rate parameter ; Definition at line 92 of file TSynapse.h. ◆ fPostNeuron. TNeuron* TMVA::TSynapse::fPostNeuron. private . pointer to post-neuron ; Definition at line 97 of file TSynapse.h. ◆ fPreNeuron. TNeuron* TMVA::TSynapse::fPreNeuron. private . pointer to pre-neuron ; Definition at line 96 of file TSynapse.h. ◆ fWeight. Double_t TMVA::TSynapse::fWeight. private . weight of the synapse ; Definition at line 91 of file TSynapse.h. Libraries for TMVA::TSynapse:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TSynapse.h; tmva/tmva/src/TSynapse.cxx. TMVATSynapse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSynapse.html:15216,learn,learning,15216,doc/master/classTMVA_1_1TSynapse.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSynapse.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,"id TQCommand::SetArgs ; (; Int_t ; narg, .  ; ... . ). virtual . Set do/redo and undo parameters. ; The format is SetArgs(number_of_params, redo_params, undo_params); Example: move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position ; Definition at line 465 of file TQCommand.cxx. ◆ SetName(). void TQCommand::SetName ; (; const char * ; name). virtual . Sets name of the command. ; Definition at line 832 of file TQCommand.cxx. ◆ SetRedoArgs(). void TQCommand::SetRedoArgs ; (; Int_t ; narg, .  ; ... . ). virtual . Set redo parameters. ; The format is SetRedoArgs(number_of_params, params); Example: move_command->SetRedoArgs(2, 100, 100);. Definition at line 508 of file TQCommand.cxx. ◆ SetTitle(). void TQCommand::SetTitle ; (; const char * ; title). virtual . Sets description of the command. ; Definition at line 840 of file TQCommand.cxx. ◆ SetUndoArgs(). void TQCommand::SetUndoArgs ; (; Int_t ; narg, .  ; ... . ). virtual . Set undo parameters. ; The format is SetUndoArgs(number_of_params, params); Example: move_command->SetUndoArgs(2, 200, 200);. Definition at line 542 of file TQCommand.cxx. ◆ Streamer(). void TQCommand::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TList.; Reimplemented in TQUndoManager. ◆ StreamerNVirtual(). void TQCommand::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TQCommand.h. ◆ Undo(). void TQCommand::Undo ; (; Option_t * ; option = """"). virtual . Un-execute all merged commands and the command. ; Merged commands are executed in reverse order. ; Reimplemented in TQUndoManager.; Definition at line 626 of file TQCommand.cxx. Friends And Related Symbol Documentation. ◆ TQUndoManager. friend class TQUndoManager. friend . Definition at line 29 of file TQCommand.h. Member Data Documentation. ◆ fName. TString TQCommand::fName. protected . Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:43522,undo,undo,43522,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"id);; 2004 Int_t ind = pidslist->IndexOf(pid);; 2005 pid->SetUniqueID((UInt_t)ind);; 2006 }; 2007 ; 2008 return pid;; 2009}; 2010 ; 2011 ; 2012////////////////////////////////////////////////////////////////////////////////; 2013/// Attempt to recover file if not correctly closed; 2014///; 2015/// The function returns the number of keys that have been recovered.; 2016/// If no keys can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72383,usab,usable,72383,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['usab'],['usable']
Usability,"id)TObjectvirtual; SetWritable(Bool_t)TDirectoryinlinevirtual; SharedGDirectory_t typedefTDirectoryprotected; Sizeof() const overrideTDirectoryinlinevirtual; Streamer(TBuffer &) overrideTDirectoryvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TDirectoryinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TContextTDirectoryfriend; TDirectory(const TDirectory &directory)=deleteTDirectoryprotected; TDirectory()TDirectory; TDirectory(const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr)TDirectory; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnregisterContext(TContext *ctxt)TDirectoryprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) overrideTDirectoryinlinevirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) const overrideTDirectoryinlinevirtual; WriteDirHeader()TDirectoryinlinevirtual; WriteKeys()TDirectoryinlinevirtual; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObjectAny(const void *, const char *, const char *, Option_t *="""", Int_t=0)TDirectoryinlinevirtual; WriteObjectAny(const void *, const TClass *, const char *, Option_t *="""", Int_t=0)TDirectoryinlinevirtual; WriteTObject(const TObject *obj, const char *name=nullptr, Option_t *="""", Int_t=0)TDirectoryvirtual; ~TDirectory()TDirectoryvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory-members.html:10869,Guid,Guide,10869,doc/master/classTDirectory-members.html,https://root.cern,https://root.cern/doc/master/classTDirectory-members.html,1,['Guid'],['Guide']
Usability,"id, Bool_t sel);  Select / deselect the entry with the specified id. ;  ; virtual void SetListBox (TGListBox *lb);  ; virtual void SetMultipleSelections (Bool_t multi);  Enables and disables multiple selections of entries. ;  ; void SetVsbPosition (Int_t newPos) override;  Set new vertical scroll bar position. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGContainer;  TGContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  TGContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  ~TGContainer () override;  Delete canvas container. ;  ; virtual void AdjustPosition ();  Move content to position of highlighted/activated frame. ;  ; virtual void ClearViewPort ();  Clear view port and redraw full content. ;  ; virtual void Clicked (TGFrame *f, Int_t btn);  Emit Clicked() signal. ;  ; virtual void Clicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; virtual void CurrentChanged (Int_t x, Int_t y);  Emit signal when current position changed. ;  ; virtual void CurrentChanged (TGFrame *f);  Emit signal when current selected frame changed. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn);  Emit DoubleClicked() signal. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit DoubleClicked() signal. ;  ; virtual void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw a region of container in viewport. ;  ; virtual void End (Bool_t select=kFALSE);  Move to the bottom-right corner of container. ;  ; virtual TGFrameElement * FindFrame (Int_t x, Int_t y, Bool_t exclude=kTRUE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const char *name);  Find frame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBContainer.html:3755,Clear,ClearViewPort,3755,doc/master/classTGLBContainer.html,https://root.cern,https://root.cern/doc/master/classTGLBContainer.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"idActivateWorker(const char* ord); voidAddChain(TChain* chain); Int_tAddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidAddEnvVar(const char* name, const char* value); voidAddFeedback(const char* name); Int_tAddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidAddInput(TObject* obj); voidAddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tArchive(Int_t query, const char* url); Int_tArchive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); voidcd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidClearFeedback(); voidClearInput(); voidClearInputData(TObject* obj = 0); voidClearInputData(const char* name); Int_tClearPackage(const char* package); Int_tClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); voidCloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:1839,Clear,Clear,1839,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['Clear'],['Clear']
Usability,"idRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:2592,Clear,Clear,2592,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,1,['Clear'],['Clear']
Usability,"idRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:2592,Clear,Clear,2592,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,1,['Clear'],['Clear']
Usability,"idRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Roo2DKeysPdf.html:2592,Clear,Clear,2592,root/html530/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html530/Roo2DKeysPdf.html,1,['Clear'],['Clear']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3140,clear,clearEvalErrorLog,3140,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2629,clear,clearEvalErrorLog,2629,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:2931,clear,clearEvalErrorLog,2931,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2829,clear,clearEvalErrorLog,2829,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2653,clear,clearEvalErrorLog,2653,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4125,clear,clearEvalErrorLog,4125,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3225,clear,clearEvalErrorLog,3225,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3225,clear,clearEvalErrorLog,3225,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2629,clear,clearEvalErrorLog,2629,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,2,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:2931,clear,clearEvalErrorLog,2931,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2829,clear,clearEvalErrorLog,2829,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBDecay.html:2829,clear,clearEvalErrorLog,2829,root/html530/RooBDecay.html,https://root.cern,https://root.cern/root/html530/RooBDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2653,clear,clearEvalErrorLog,2653,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['clear'],['clearEvalErrorLog']
Usability,"idRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3178,clear,clearEvalErrorLog,3178,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['clear'],['clearEvalErrorLog']
Usability,"idTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tCanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTriangleSet.html:2500,Clear,ClearProjectedList,2500,root/html530/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html530/TEveTriangleSet.html,5,['Clear'],['ClearProjectedList']
Usability,"idTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidTGMdiWinResizer::DrawBox(Int_t x, Int_t y, UInt_t width, UInt_t height); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTGMdiWinResizer::MoveResizeIt(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiCornerWinResizer.html:13979,Clear,ClearFlags,13979,root/html528/TGMdiCornerWinResizer.html,https://root.cern,https://root.cern/root/html528/TGMdiCornerWinResizer.html,12,['Clear'],['ClearFlags']
Usability,"idTGLVContainer::AddItem(TGLVEntry* item); virtual TGFileItem*AddRemoteFile(TObject* obj, const TGPicture* ipic = 0, const TGPicture* ilpic = 0); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidChangeDirectory(const char* path); virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContainer::CurrentChanged(Int_t x, Int_t y)SIGNAL ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileContainer.html:2015,Clear,ClearViewPort,2015,root/html528/TGFileContainer.html,https://root.cern,https://root.cern/root/html528/TGFileContainer.html,6,['Clear'],['ClearViewPort']
Usability,"idTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindowPack.html:2345,Clear,ClearProjectedList,2345,root/html530/TEveWindowPack.html,https://root.cern,https://root.cern/root/html530/TEveWindowPack.html,10,['Clear'],['ClearProjectedList']
Usability,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10894,clear,clear,10894,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,3,['clear'],['clear']
Usability,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10982,clear,clear,10982,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,1,['clear'],['clear']
Usability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:633,Clear,Clear,633,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofProgressMemoryPlot Class ReferenceGUI » Session Viewer. ; This class implements a dialog, used to display the memory footprint on the proof workers and master. ; For the workers, memory is plotted as a function of number of events processed. For the master, it is plotted as a function of number of objects merged ; Definition at line 28 of file TProofProgressMemoryPlot.h. Public Member Functions;  TProofProgressMemoryPlot (TProofProgressDialog *d, Int_t w=700, Int_t h=300);  Main constructor. ;  ;  ~TProofProgressMemoryPlot () override;  Destructor. ;  ; void Clear (Option_t *=nullptr) override;  Clear the canvases. ;  ; void DoPlot ();  Draw the plot from the logs. ;  ; void Select (Int_t id);  actions of select all/clear all button ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:989,clear,clear,989,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleReader_8C.html:1769,simpl,simple,1769,doc/master/hsimpleReader_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ide;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void printName (std::ostream &os) const override;  Print binning name. ;  ; void printTitle (std::ostream &os) const override;  Print binning title. ;  ; void printValue (std::ostream &os) const override;  Print binning value, i.e the bin boundary positions. ;  ; virtual void setMax (double xhi);  Change upper bound to xhi. ;  ; virtual void setMin (double xlo);  Change lower bound to xlo. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamBinning.html:5059,Clear,Clear,5059,doc/master/classRooParamBinning.html,https://root.cern,https://root.cern/doc/master/classRooParamBinning.html,1,['Clear'],['Clear']
Usability,"ide;  Resize off screen device. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  Select manipulator. ;  ; void SelectOffScreenDevice (Int_t devInd) override;  Selects off-screen device to make it accessible by gVirtualX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTX11GLManager.html:3287,Clear,Clear,3287,doc/master/classTX11GLManager.html,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html,1,['Clear'],['Clear']
Usability,"ideEmit signals.Definition TGButton.cxx:1262; TGCheckButton::SetStatevoid SetState(EButtonState state, Bool_t emit=kFALSE) overrideSet check button state.Definition TGButton.cxx:1250; TGCheckButton::fPrevStateEButtonState fPrevStateprevious check button stateDefinition TGButton.h:272; TGCheckButton::DoRedrawvoid DoRedraw() overrideDraw the check button widget.Definition TGButton.cxx:1437; TGCheckButton::fDisOffconst TGPicture * fDisOffbutton disabled and was OFF pictureDefinition TGButton.h:276; TGCheckButton::fDisOnconst TGPicture * fDisOnbutton disabled and was ON pictureDefinition TGButton.h:275; TGCheckButton::GetDefaultSizeTGDimension GetDefaultSize() const overridedefault sizeDefinition TGButton.cxx:1236; TGCheckButton::PSetStatevoid PSetState(EButtonState state, Bool_t emit)Set check button state.Definition TGButton.cxx:1273; TGDimensionDefinition TGDimension.h:18; TGFontEncapsulate fonts used in the GUI system.Definition TGFont.h:140; TGFrameA subclasses of TGWindow, and is used as base class for some simple widgets (buttons,...Definition TGFrame.h:80; TGGCEncapsulate a graphics context used in the low level graphics.Definition TGGC.h:22; TGHotStringTGHotString is a string with a ""hot"" character underlined.Definition TGString.h:42; TGPictureButtonYield an action as soon as it is clicked.Definition TGButton.h:228; TGPictureButton::SetPicturevirtual void SetPicture(const TGPicture *new_pic)Change a picture in a picture button.Definition TGButton.cxx:1040; TGPictureButton::CreateDisabledPicturevirtual void CreateDisabledPicture()Creates disabled picture.Definition TGButton.cxx:1108; TGPictureButton::GetDisabledPictureconst TGPicture * GetDisabledPicture() constDefinition TGButton.h:257; TGPictureButton::SetDisabledPicturevirtual void SetDisabledPicture(const TGPicture *pic)Changes disabled picture.Definition TGButton.cxx:1135; TGPictureButton::GetPictureconst TGPicture * GetPicture() constDefinition TGButton.h:256; TGPictureButton::SavePrimitivevoid SavePrimiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGButton_8h_source.html:28090,simpl,simple,28090,doc/master/TGButton_8h_source.html,https://root.cern,https://root.cern/doc/master/TGButton_8h_source.html,1,['simpl'],['simple']
Usability,"ideprotectedvirtual . Implements TProofDraw.; Definition at line 150 of file TProofDraw.h. ◆ DoFill(). void TProofDrawEntryList::DoFill ; (; Long64_t ; entry, . Double_t ; w, . const Double_t * ; v . ). overrideprotectedvirtual . Fills the eventlist with given values. ; Implements TProofDraw.; Definition at line 1050 of file TProofDraw.cxx. ◆ Init(). void TProofDrawEntryList::Init ; (; TTree * ; tree). overridevirtual . See TProofDraw::Init(). ; Reimplemented from TProofDraw.; Definition at line 1008 of file TProofDraw.cxx. ◆ IsA(). TClass * TProofDrawEntryList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofDraw.; Definition at line 161 of file TProofDraw.h. ◆ SlaveBegin(). void TProofDrawEntryList::SlaveBegin ; (; TTree * ; tree). overridevirtual . See TProofDraw::SlaveBegin(). ; Reimplemented from TProofDraw.; Definition at line 1019 of file TProofDraw.cxx. ◆ SlaveTerminate(). void TProofDrawEntryList::SlaveTerminate ; (; void ; ). overridevirtual . See TProofDraw::SlaveTerminate(). ; Reimplemented from TProofDraw.; Definition at line 1058 of file TProofDraw.cxx. ◆ Streamer(). void TProofDrawEntryList::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofDraw. ◆ StreamerNVirtual(). void TProofDrawEntryList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 161 of file TProofDraw.h. ◆ Terminate(). void TProofDrawEntryList::Terminate ; (; void ; ). overridevirtual . See TProofDraw::Terminate(). ; Reimplemented from TProofDraw.; Definition at line 1067 of file TProofDraw.cxx. Member Data Documentation. ◆ fElist. TEntryList* TProofDrawEntryList::fElist. protected . Definition at line 147 of file TProofDraw.h. proof/proofplayer/inc/TProofDraw.h; proof/proofplayer/src/TProofDraw.cxx. TProofDrawEntryList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEntryList.html:17425,Guid,Guide,17425,doc/master/classTProofDrawEntryList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEntryList.html,1,['Guid'],['Guide']
Usability,"idevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Reimplemented in TGTreeLBEntry, TGTextLBEntry, and TGLineLBEntry.; Definition at line 44 of file TGListBox.h. ◆ IsActive(). Bool_t TGLBEntry::IsActive ; (; ); const. inlineoverridevirtual . Reimplemented from TGFrame.; Definition at line 41 of file TGListBox.h. ◆ SetBackgroundColor(). void TGLBEntry::SetBackgroundColor ; (; Pixel_t ; back). inlineoverridevirtual . Set background color (override from TGWindow base class). ; Same effect as ChangeBackground(). ; Reimplemented from TGFrame.; Definition at line 42 of file TGListBox.h. ◆ Streamer(). void TGLBEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame.; Reimplemented in TGTreeLBEntry, TGTextLBEntry, and TGLineLBEntry. ◆ StreamerNVirtual(). void TGLBEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TGListBox.h. ◆ Toggle(). void TGLBEntry::Toggle ; (; ). virtual . Toggle active state of listbox entry. ; Definition at line 123 of file TGListBox.cxx. ◆ Update(). virtual void TGLBEntry::Update ; (; TGLBEntry * ; ). inlinevirtual . Reimplemented in TGTreeLBEntry, TGTextLBEntry, TGLineLBEntry, and TGIconLBEntry.; Definition at line 39 of file TGListBox.h. Member Data Documentation. ◆ fActive. Bool_t TGLBEntry::fActive. protected . true if entry is active ; Definition at line 29 of file TGListBox.h. ◆ fBkcolor. Pixel_t TGLBEntry::fBkcolor. protected . entry background color ; Definition at line 28 of file TGListBox.h. ◆ fEntryId. Int_t TGLBEntry::fEntryId. protected . message id of listbox entry ; Definition at line 27 of file TGListBox.h. Libraries for TGLBEntry:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListBox.h; gui/gui/src/TGListBox.cxx. TGLBEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBEntry.html:30888,Guid,Guide,30888,doc/master/classTGLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGLBEntry.html,1,['Guid'],['Guide']
Usability,"idget id, style.; and the signal: MarkerSelected(Style_t marker) ; Definition at line 37 of file TGedMarkerSelect.h. Public Member Functions;  TGedMarkerSelect (const TGWindow *p, Style_t markerStyle, Int_t id);  Create and show marker popup window. ;  ;  ~TGedMarkerSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetMarkerStyle () const;  ; virtual void MarkerSelected (Style_t marker=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetMarkerStyle (Style_t pattern);  Set marker. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  ~TGCheckButton () override;  Delete a check button. ;  ; Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedMarkerSelect.html:1553,Clear,Clear,1553,doc/master/classTGedMarkerSelect.html,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html,1,['Clear'],['Clear']
Usability,"idget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidTGedSelect::DrawTriangle(GContext_t gc, Int_t x, Int_t y); virtual voidTGCheckButton::EmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTGCheckButton::Init(); voidTObject::MakeZombie(); voidTGCheckButton::PSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedMarkerSelect.html:17237,Clear,ClearFlags,17237,root/html602/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html602/TGedMarkerSelect.html,4,['Clear'],['ClearFlags']
Usability,"idleing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * WorkingDirectory () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:5905,Clear,Clear,5905,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['Clear'],['Clear']
Usability,"idth increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); Create the undocked (transient) frame. ~TGUndockedFrame(); Delete undocked frame. Puts back dockable frame in its original container. void FixSize(); Fix the size of the undocked frame so it cannot be changed via the WM. void CloseWindow(); Close undocked frame (called via WM close button). TGUndockedFrame(const TGUndockedFrame& ). TGUndockedFrame& operator=(const TGUndockedFrame& ). » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGUndockedFrame.html:22162,undo,undocked,22162,root/html528/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html528/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,"idth increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); Create the undocked (transient) frame. ~TGUndockedFrame(); Delete undocked frame. Puts back dockable frame in its original container. void FixSize(); Fix the size of the undocked frame so it cannot be changed via the WM. void CloseWindow(); Close undocked frame (called via WM close button). TGUndockedFrame(const TGUndockedFrame& ). TGUndockedFrame& operator=(const TGUndockedFrame& ). » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2011-07-04 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGUndockedFrame.html:22315,undo,undocked,22315,root/html530/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html530/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,"idth increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); Create the undocked (transient) frame. ~TGUndockedFrame(); Delete undocked frame. Puts back dockable frame in its original container. void FixSize(); Fix the size of the undocked frame so it cannot be changed via the WM. void CloseWindow(); Close undocked frame (called via WM close button). TGUndockedFrame(const TGUndockedFrame& ). TGUndockedFrame& operator=(const TGUndockedFrame& ). » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGUndockedFrame.html:22315,undo,undocked,22315,root/html532/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html532/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,"iduals"" of at least ""improvement"" ; this gives a simple measure of if the estimator of the MLP is converging and no major improvement is to be expected. ; Definition at line 66 of file ConvergenceTest.cxx. ◆ Progress(). Float_t TMVA::ConvergenceTest::Progress ; (; ). returns a float from 0 (just started) to 1 (finished) ; Definition at line 91 of file ConvergenceTest.cxx. ◆ ResetConvergenceCounter(). void TMVA::ConvergenceTest::ResetConvergenceCounter ; (; ). inline . Definition at line 58 of file ConvergenceTest.h. ◆ SetConvergenceParameters(). void TMVA::ConvergenceTest::SetConvergenceParameters ; (; Int_t ; steps, . Double_t ; improvement . ). inline . Definition at line 54 of file ConvergenceTest.h. ◆ SetCurrentValue(). void TMVA::ConvergenceTest::SetCurrentValue ; (; Float_t ; value). inline . Definition at line 56 of file ConvergenceTest.h. ◆ SpeedControl(). Float_t TMVA::ConvergenceTest::SpeedControl ; (; UInt_t ; ofSteps). this function provides the ability to change the learning rate according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the rate of improvement has to be calculated. using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the learning rate if we are in a difficult ""territory"" of the phase-space. ; Definition at line 112 of file ConvergenceTest.cxx. Member Data Documentation. ◆ fBestResult. Float_t TMVA::ConvergenceTest::fBestResult. private . Definition at line 81 of file ConvergenceTest.h. ◆ fConvValue. Float_t TMVA::ConvergenceTest::fConvValue. private . ! the best ""fitness"" value ; Definition at line 76 of file ConvergenceTest.h. ◆ fCounter. Int_t TMVA::ConvergenceTest::fCounter. private . ! counts the number of steps without improvement ; Definition at line 75 of file ConvergenceTest.h. ◆ fCurrentValue. Float_t TMVA::ConvergenceTest::fCurrentValue. protected . ! cur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html:3498,learn,learning,3498,doc/master/classTMVA_1_1ConvergenceTest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html,1,['learn'],['learning']
Usability,"idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TDataMember object files. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a enum just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; TEnum * GetObject (const char *) const override;  Return an object from the list of enums if and only if is has already been loaded in the list. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:1901,Clear,Clear,1901,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['Clear'],['Clear']
Usability,"id DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGHtml.h>. Inheritance diagram for TGHtmlImage:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlImage() [1/2]. TGHtmlImage::TGHtmlImage ; (; const TGHtmlImage & ; ). privatedelete . ◆ TGHtmlImage() [2/2]. TGHtmlImage::TGHtmlImage ; (; TGHtml * ; htm, . const char * ; url, . const char * ; width, . const char * ; height . ). ctor. ; Definition at line 53 of file TGHtmlImage.cxx. ◆ ~TGHtmlImage(). TGHtmlImage::~TGHtmlImage ; (; ). override . dtor. ; Definition at line 71 of file TGHtmlImage.cxx. Member Function Documentation. ◆ operator=(). TGHtmlImage & TGHtmlImage::operator= ; (; const TGHtmlImage & ; ). privatedelete . Member Data Documentation. ◆ fH. Html_32_t TGHtmlImage::fH. Definition at line 521 of file TGHtml.h. ◆ fHtml. TGHtml* TGHtmlImage::fHtml. Definition at line 518 of file TGHtml.h. ◆ fImage. TImage* TGHtmlImage::fImage. Definition at line 519 of file TGHtml.h. ◆ fPList. TGHtmlImageMarkup* TGHtmlImage::fPList. Definition at line 525 of file TGHtml.h. ◆ fPNext. TGHtmlImage* TGHtmlImage::fPNext. Definition at line 524 of file TGHtml.h. ◆ fTimer. TTimer* TGHtmlImage::fTimer. Definition at line 527 of file TGHtml.h. ◆ fW. Html_32_t TGHtmlImage::fW. Definition at line 520 of file TGHtml.h. ◆ fZHeight. char * TGHtmlImage::fZHeight. Definition at line 523 of file TGHtml.h. ◆ fZUrl. char* TGHtmlImage::fZUrl. Definition at line 522 of file TGHtml.h. ◆ fZWidth. char* TGHtmlImage::fZWidth. Definition at line 523 of file TGHtml.h. Libraries for TGHtmlImage:. [legend]; The documentation for this class was generated from the following files:; gui/guihtml/inc/TGHtml.h; gui/guihtml/src/TGHtmlImage.cxx. TGHtmlImage. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlImage.html:11742,Guid,Guide,11742,doc/master/classTGHtmlImage.html,https://root.cern,https://root.cern/doc/master/classTGHtmlImage.html,1,['Guid'],['Guide']
Usability,"id Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectorObject.html:1519,Clear,Clear,1519,doc/master/classTInspectorObject.html,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html,1,['Clear'],['Clear']
Usability,"id SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (Int_t st);  ; void SetUrl (const char *url);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:5365,Clear,Clear,5365,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['Clear'],['Clear']
Usability,"id SetIOFeatures (TIOFeatures &features);  ; virtual bool SetMakeClass (bool decomposeObj=true);  Set the branch in a mode where the object are decomposed (Also known as MakeClass mode). ;  ; virtual void SetObject (void *objadd);  Set object this branch is pointing to. ;  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool SupportsBulkRead () const;  Returns true if this branch supports bulk IO, false otherwise. ;  ; virtual void UpdateFile ();  Refresh the value of fDirectory (i.e. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:10598,Clear,Clear,10598,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['Clear'],['Clear']
Usability,"id SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void SetWeight (Double_t w=1, Option_t *option="""");  Set tree weight. ;  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:41636,learn,learning,41636,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['learn'],['learning']
Usability,"id SetTitleSize (Float_t size=0.02, Option_t *axis=""X"");  ; void SetTitleStyle (Style_t style=1001);  ; void SetTitleTextColor (Color_t color=1);  ; void SetTitleW (Float_t w=0);  ; void SetTitleX (Float_t x=0);  ; void SetTitleXOffset (Float_t offset=1);  ; void SetTitleXSize (Float_t size=0.02);  ; void SetTitleY (Float_t y=0.985);  ; void SetTitleYOffset (Float_t offset=1);  ; void SetTitleYSize (Float_t size=0.02);  ; void SetViolinScaled (Bool_t on=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleEditor ();  ; void ToggleEventStatus ();  ; void ToggleToolBar ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:19648,Clear,Clear,19648,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['Clear'],['Clear']
Usability,"id SetWebDisplay (const char *webdisplay="""");  Specify where web graphics shall be rendered. ;  ; void Streamer (TBuffer &) override;  TDirectory Streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Time (Int_t casetime=1);  ; Int_t Timer () const;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual Int_t AppendKey (TKey *);  ; virtual void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr);  ; virtual Bool_t cd ();  Change current directory to ""this"" directory. ;  ; virtual Bool_t cd (const char *path);  Change current directory to ""this"" directory or to the directory described by the path if given one. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE);  Clone an object. ;  ; virtual void Close (Option_t *option="""");  Delete all objects from memory and directory structure itself. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; void Delete (const char *namecycle="""") override;  Delete Objects or/and keys in a directory. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual TKey * FindKey (const char *) const;  ; virtual TKey * FindKeyAny (const char *) const;  ; virtual TObject * Get (const char *namecycle);  Return pointer to object identified by namecycle. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual Int_t GetBufferSize () const;  ; virtual TDirectory * GetDirectory (const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:14071,Clear,Clear,14071,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,2,['Clear'],['Clear']
Usability,"id Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:2783,Clear,Clear,2783,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['Clear'],['Clear']
Usability,"id Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:6910,Clear,Clear,6910,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['Clear'],['Clear']
Usability,"id StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateMatrix (Int_t, TGeoHMatrix &) const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternFinder.html:4048,Clear,Clear,4048,doc/master/classTGeoPatternFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html,1,['Clear'],['Clear']
Usability,"id TextChanged (const char *text=nullptr) override;  Text has changed message. ;  ;  Public Member Functions inherited from TGTextEntry;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of right side. ;  ; virtual void CursorOutUp ();  This signal is emitted when cursor is going out of upper side. ;  ; void CursorRight (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor rightwards one or more characters. ;  ; void CursorWordBackward (Bool_t mark=kFALSE);  Moves the cursor one word to the left. ;  ; void CursorWordForward (Bool_t mark=kFALSE);  Moves the cursor one word to the right. ;  ; void Cut ();  Copies the marked text to the clipboard and deletes it, if there is any. ;  ; void Del ();  Deletes the character on the right side of the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:4609,Clear,Clear,4609,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,2,['Clear'],"['Clear', 'Clears']"
Usability,"ied TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:16955,Feedback,Feedback,16955,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,6,['Feedback'],['Feedback']
Usability,"ied entries; *-* ===========================================. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; table.Draw(""x"",cut1+cut2+cut3);. TCutG object with ""CUTG"" name can be created via the graphics editor. TH1 * Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); *-*-*-*-*-*Draw expression varexp for specified entries; *-* ===========================================. varexp is an expression of the general form e1:e2:e3; where e1,etc is a C++ expression referencing a combination of the TTable columns; One can use two extra meta variable ""i$"" and ""n$"" along with the table; column names.; i$ is to involve the current row number; n$ refers the total num,ber of rows of this table provided by TTable::GetNRows(). Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x); = i$:sqrt(x) 2-Dim dsitribution of i versus sqrt(x[i]); = phep[0]:sqrt(phep[3]) 2-Dim dsitribution of phep[0] versus sqrt(phep[3]). Note that the variables e1, e2 or e3 may contain a boolean expression as well.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. selection is a C++ expression with a combination of the columns.; The value corresponding to the selection expression is used as a weight; to fill the histogram.; If the expression includes only boolean operations, the result; is 0 or 1. If the result is 0, the histogram is not filled.; In general, the expression may be of the form:. value*(boolean expression). if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2 && 6 < i$ && i$ < n$""; selection2 = ""(x+y)*(sqrt(z)>3.2""; selection3 = ""signal*(log(signal)>1.2)""; selection1 returns a weigth = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTable.html:20233,simpl,simplest,20233,root/html528/TTable.html,https://root.cern,https://root.cern/root/html528/TTable.html,6,['simpl'],['simplest']
Usability,"ied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset). const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Mon Dec 7 13:45:56 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:47043,intuit,intuitively,47043,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['intuit'],['intuitively']
Usability,"ied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The ""Undo"" button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the ""Undo"" does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable. Creation of New Objects; As described above, all geometry object creators are accessible within the geometry manager editor frame. Generally, if the new object that needs to be created does not depend on other objects, it will be built with a set of default parameters. This is the case for all shapes (except composite shapes) and matrices. For all the other objects the interface forces the selection of components before creating the object. Editing Volumes; Volumes are hierarchical components in the geometry, therefore their editor is more complex. It provides the following functionalities:. General. This category allows changing the name of the volume and selecting other shape or medium among existing ones.; Daughters. The category allows removing existing daughter nodes or adding new ones. The button ""Position"" allows editing the positioning matrix of a given node. Setting volume properties and modifying volume hierarchy. Visualization. This category allow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:141881,undo,undoable,141881,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['undo'],['undoable']
Usability,"ied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The “Undo” button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the “Undo” does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable.; 18.11.4 Creation of New Objects; As described above, all geometry object creators are accessible within the geometry manager editor frame. Generally, if the new object that needs to be created does not depend on other objects, it will be built with a set of default parameters. This is the case for all shapes (except composite shapes) and matrices. For all the other objects the interface forces the selection of components before creating the object.; 18.11.5 Editing Volumes; Volumes are hierarchical components in the geometry, therefore their editor is more complex. It provides the following functionalities:. General. This category allows changing the name of the volume and selecting other shape or medium among existing ones.; Daughters. The category allows removing existing daughter nodes or adding new ones. The button “Position” allows editing the positioning matrix of a given node. . Visualization. This category allows changing the visibility of the edite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1037458,undo,undoable,1037458,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['undo'],['undoable']
Usability,iency of the filters applied ;  df004_cutFlowReport.pyThis tutorial shows how to get information about the efficiency of the filters applied ;  df005_fillAnyObject.C This tutorial shows how to fill any object the class of which exposes a Fill method ;  df006_ranges.C This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df006_ranges.py This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df007_snapshot.C This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df007_snapshot.py This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df008_createDataSetFromScratch.C This tutorial shows how to create a dataset from scratch with RDataFrame ;  df008_createDataSetFromScratch.py This tutorial shows how to create a dataset from scratch with RDataFrame ;  df009_FromScratchVSTTree.C This tutorial illustrates how simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces ;  df010_trivialDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df010_trivialDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df012_DefinesAndFiltersAsStrings.C ;  df012_DefinesAndFiltersAsStrings.py ;  df013_InspectAnalysis.C Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot ;  df014_CSVDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df014_CSVDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df015_LazyDataSource.C Thi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:99030,simpl,simpler,99030,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simpler']
Usability,"iend TMVA::MethodCrossValidation::CrossValidation. private . Definition at line 40 of file MethodCrossValidation.h. ◆ fEncapsulatedMethodName. TString TMVA::MethodCrossValidation::fEncapsulatedMethodName. private . Definition at line 101 of file MethodCrossValidation.h. ◆ fEncapsulatedMethods. std::vector<MethodBase *> TMVA::MethodCrossValidation::fEncapsulatedMethods. private . Definition at line 112 of file MethodCrossValidation.h. ◆ fEncapsulatedMethodTypeName. TString TMVA::MethodCrossValidation::fEncapsulatedMethodTypeName. private . Definition at line 102 of file MethodCrossValidation.h. ◆ fEventToFoldMapping. std::map<const TMVA::Event *, UInt_t> TMVA::MethodCrossValidation::fEventToFoldMapping. private . Definition at line 117 of file MethodCrossValidation.h. ◆ fMulticlassValues. std::vector<Float_t> TMVA::MethodCrossValidation::fMulticlassValues. private . Definition at line 109 of file MethodCrossValidation.h. ◆ fNumFolds. UInt_t TMVA::MethodCrossValidation::fNumFolds. private . Definition at line 103 of file MethodCrossValidation.h. ◆ fOutputEnsembling. TString TMVA::MethodCrossValidation::fOutputEnsembling. private . Definition at line 104 of file MethodCrossValidation.h. ◆ fRegressionValues. std::vector<Float_t> TMVA::MethodCrossValidation::fRegressionValues. private . Definition at line 110 of file MethodCrossValidation.h. ◆ fSplitExpr. std::unique_ptr<CvSplitKFoldsExpr> TMVA::MethodCrossValidation::fSplitExpr. private . Definition at line 107 of file MethodCrossValidation.h. ◆ fSplitExprString. TString TMVA::MethodCrossValidation::fSplitExprString. private . Definition at line 106 of file MethodCrossValidation.h. Libraries for TMVA::MethodCrossValidation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodCrossValidation.h; tmva/tmva/src/MethodCrossValidation.cxx. TMVAMethodCrossValidation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:38073,Guid,Guide,38073,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,1,['Guid'],['Guide']
Usability,"ientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). » Last changed: Sat Oct 9 22:38:27 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:40771,clear,clearValueDirty,40771,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,2,['clear'],"['clearShapeDirty', 'clearValueDirty']"
Usability,"ier(float* working_space, Int_t num, Int_t hartley, Int_t direction, Int_t zt_clear). AUXILIARY FUNCION. This function calculates Fourier based transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -hartley-1 if it is Hartley transform, 0 othewise; -direction-forward or inverse transform. void BitReverseHaar(float* working_space, Int_t shift, Int_t num, Int_t start). AUXILIARY FUNCION. This function carries out bir-reverse reordering for Haar transform; Function parameters:; -working_space-pointer to vector of processed data; -shift-shift of position of processing; -start-initial position of processed data; -num-length of processed data. int GeneralExe(float* working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates generalized (mixed) transforms of different degrees; Function parameters:; -working_space-pointer to vector of transformed data; -zt_clear-flag to clear imaginary data before staring; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). int GeneralInv(float* working_space, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates inverse generalized (mixed) transforms; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). void Transform(const float* source, float* destVector). ONE-DIMENSIONAL TRANSFORM FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters.; Transformed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:10461,clear,clear,10461,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,4,['clear'],['clear']
Usability,"ierarchy.Definition TROOT.cxx:2895; TROOT::DecreaseDirLevelstatic Int_t DecreaseDirLevel()Decrease the indentation level for ls().Definition TROOT.cxx:2746; TRegexpRegular expression class.Definition TRegexp.h:31; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::kBoth@ kBothDefinition TString.h:276; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TUUID::Streamervirtual void Streamer(TBuffer &); bool; int; unsigned int; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; ROOT::kExactMatch@ kExactMatchDefinition TDictionary.h:162; slashTCanvas * slash()Definition slash.C:1; Drawth1 Draw(); mTMarker mDefinition textangle.C:8. corebasesrcTDirectory.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:73325,Guid,Guide,73325,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 56 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription& ROOT::RGeomHierarchy::fDesc. protected . ! geometry description, shared with external ; Definition at line 30 of file RGeomHierarchy.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RGeomHierarchy::fWebWindow. protected . ! web window to show geometry ; Definition at line 31 of file RGeomHierarchy.hxx. Libraries for ROOT::RGeomHierarchy:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeomHierarchy.hxx; geom/webviewer/src/RGeomHierarchy.cxx. ROOTRGeomHierarchy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:3689,Guid,Guide,3689,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['Guid'],['Guide']
Usability,"ies and just a few entries per cluster, or to limit the number of tasks spawned when a very large number of files and workers is used. ; Definition at line 541 of file TTreeProcessorMT.cxx. Member Data Documentation. ◆ fEntryList. TEntryList ROOT::TTreeProcessorMT::fEntryList. private . User-defined selection of entry numbers to be processed, empty if none was provided. ; Definition at line 84 of file TTreeProcessorMT.hxx. ◆ fFileNames. const std::vector<std::string> ROOT::TTreeProcessorMT::fFileNames. private . Names of the files. ; Definition at line 81 of file TTreeProcessorMT.hxx. ◆ fFriendInfo. ROOT::TreeUtils::RFriendInfo ROOT::TTreeProcessorMT::fFriendInfo. private . Definition at line 85 of file TTreeProcessorMT.hxx. ◆ fGlobalRange. std::pair<Long64_t, Long64_t> ROOT::TTreeProcessorMT::fGlobalRange {0, std::numeric_limits<Long64_t>::max()}. private . Definition at line 95 of file TTreeProcessorMT.hxx. ◆ fgTasksPerWorkerHint. unsigned int ROOT::TTreeProcessorMT::fgTasksPerWorkerHint = 10U. staticprivate . Definition at line 93 of file TTreeProcessorMT.hxx. ◆ fPool. ROOT::TThreadExecutor ROOT::TTreeProcessorMT::fPool. private . ! Thread pool for processing. ; Definition at line 86 of file TTreeProcessorMT.hxx. ◆ fTreeNames. const std::vector<std::string> ROOT::TTreeProcessorMT::fTreeNames. private . TTree names (always same size and ordering as fFileNames) ; Definition at line 82 of file TTreeProcessorMT.hxx. ◆ fTreeView. ROOT::TThreadedObject<ROOT::Internal::TTreeView> ROOT::TTreeProcessorMT::fTreeView {TNumSlots{ROOT::GetThreadPoolSize()}}. private . Thread-local TreeViews. ; Definition at line 90 of file TTreeProcessorMT.hxx. Libraries for ROOT::TTreeProcessorMT:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/ROOT/TTreeProcessorMT.hxx; tree/treeplayer/src/TTreeProcessorMT.cxx. ROOTTTreeProcessorMT. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:9078,Guid,Guide,9078,doc/v632/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html,1,['Guid'],['Guide']
Usability,"ies column lower-bound index. SetColIndexArray (Int_t *data); for sparse matrices, set the column index. The array data should contains at least fNelems entries. SetSparseIndex (Int_t nelems new); allocate memory for a sparse map of nelems_new elements and copy (if exists) at most nelems_new matrix elements over to the new structure. SetSparseIndex (const TMatrixDBase &a); copy the sparse map from matrix a Note that this can be a dense matrix!. SetSparseIndexAB (const TMatrixDSparse &a, const TMatrixDSparse &b); set the sparse map to the same of the map of matrix a and b. The second half of the table is only relevant for sparse matrices. These methods define the sparse structure. It should be clear that a call to any of these methods has to be followed by a SetMatrixArray (…) which will supply the matrix data, see the next chapter “Creating and Filling a Matrix”.; 14.3 Creating and Filling a Matrix; The matrix constructors are listed in the next table. In the simplest ones, only the number of rows and columns is given. In a slightly more elaborate version, one can define the row and column index range. Finally, one can also define the matrix data in the constructor. In Matrix Operators and Methods we will encounter more fancy constructors that will allow arithmetic operations. TMatrixD(Int_t nrows,Int_t ncols); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb); TMatrixD(Int_t nrows,Int_t ncols,const Double_t *data, Option_t option= """"); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb,; const Double_t *data,Option_t *option=""""). TMatrixDSym(Int_t nrows); TMatrixDSym(Int_t row_lwb,Int_t row_upb); TMatrixDSym(Int_t nrows,const Double_t *data,Option_t *option=""""); TMatrixDSym(Int_t row_lwb,Int_t row_upb,const Double_t *data, Option_t *opt=""""). TMatrixDSparse(Int_t nrows,Int_t ncols); TMatrixDSparse(Int_t row_lwb,Int_t row_upb,Int_t col_lwb, Int_t col_upb ); TMatrixDSparse(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb,; Int_t nr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:775040,simpl,simplest,775040,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"ies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 3012 of file TGCocoa.mm. ◆ ChangeProperties(). void TGCocoa::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX.; Definition at line 3859 of file TGCocoa.mm. ◆ ChangeProperty(). void TGCocoa::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX.; Definition at line 3816 of file TGCocoa.mm. ◆ ChangeWindowAttributes(). void TGCocoa::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX.; Definition at line 1006 of file TGCocoa.mm. ◆ CheckEvent(). Bool_t TGCocoa::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is it fills in the event str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:55711,simpl,simply,55711,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['simpl'],['simply']
Usability,"ies. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. Entry& operator=(const RooMappedCategory& ). » Last changed: Tue Jun 2 15:32:03 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMappedCategory.html:25576,intuit,intuitively,25576,root/html604/RooMappedCategory.html,https://root.cern,https://root.cern/root/html604/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"ies; When building your own executable you will have to link against the libraries that contain the classes you use. The ROOT reference guide states the library a class is reference guide defined in. Almost all relevant classes can be found in libraries returned by root-config -glibs; the graphics libraries are retuned by root-config --libs. These commands are commonly used in Makefiles. Using root-config instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.; A batch program that does not have a graphic display, which creates, fills, and saves histograms and trees, only needs to link the core libraries (libCore, libRIO), libHist and libTree. If ROOT needs access to other libraries, it loads them dynamically. For example, if the TreeViewer is used, libTreePlayer and all libraries libTreePlayer depends on are loaded also. The dependent libraries are shown in the ROOT reference guide’s library dependency graph. The difference between reference guide libHist and libHistPainter is that the former needs to be explicitly linked and the latter will be loaded automatically at runtime when ROOT needs it, by means of the Plugin Manager. plugin manager; In the Figure 1-2, the libraries represented by green boxes outside of the core are loaded via the plugin manager plugin manager or equivalent techniques, while the white ones are not. Of course, if one wants to access a plugin library directly, it has to be explicitly linked. An example of a plugin library is libMinuit. To create and fill histograms you need to link libHist.so. If the code has a call to fit the histogram, the “fitter” will dynamically load libMinuit if it is not yet loaded.; 1.6.2.3 Plugins: Runtime Library Dependencies for Linking; plugin manager The Plugin Manager TPluginManager allows postponing library dependencies to runtime: a plugin library will only be loaded when it is needed. Non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:22531,guid,guide,22531,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"iewer.cxx. ◆ Progress() [1/3]. void TSessionQueryFrame::Progress ; (; Long64_t ; total, . Long64_t ; processed . ). Update progress bar and status labels. ; Definition at line 2615 of file TSessionViewer.cxx. ◆ Progress() [2/3]. void TSessionQueryFrame::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti . ). inline . Definition at line 428 of file TSessionViewer.h. ◆ Progress() [3/3]. void TSessionQueryFrame::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti, . Int_t ; actw, . Int_t ; tses, . Float_t ; eses . ). New version of Progress (just forward to the old version for the time being). ; Definition at line 2733 of file TSessionViewer.cxx. ◆ ProgressLocal(). void TSessionQueryFrame::ProgressLocal ; (; Long64_t ; total, . Long64_t ; processed . ). Update progress bar and status labels. ; Definition at line 2745 of file TSessionViewer.cxx. ◆ ResetProgressDialog(). void TSessionQueryFrame::ResetProgressDialog ; (; const char * ; selec, . Int_t ; files, . Long64_t ; first, . Long64_t ; entries . ). Reset progress frame information fields. ; Definition at line 2905 of file TSessionViewer.cxx. ◆ Streamer(). void TSessionQueryFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TSessionQueryFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 448 of file TSessionViewer.h. ◆ UpdateButtons(). void TSessionQueryFrame::UpdateButtons ; (; TQueryDescription * ; desc). Update buttons state for the current query status. ; Definition at line 3229 of file TSessionViewer.cxx. ◆ UpdateHistos(). void TSessionQueryFrame::UpdateHistos ; (; TList * ; objs). Update feedback histograms. ; Definition at line 2572 of file T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:37302,progress bar,progress bar,37302,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"iewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The view",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:958,simpl,simple,958,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['simpl'],['simple']
Usability,"if (basket) continue;; 2319 basket = GetFreshBasket(i, nullptr);; 2320 if (fBasketBytes[i] == 0) {; 2321 fBasketBytes[i] = basket->ReadBasketBytes(fBasketSeek[i],file);; 2322 }; 2323 Int_t badread = basket->ReadBasketBuffers(fBasketSeek[i],fBasketBytes[i],file);; 2324 if (badread) {; 2325 Error(""Loadbaskets"",""Error while reading basket buffer %d of branch %s"",i,GetName());; 2326 return -1;; 2327 }; 2328 ++fNBaskets;; 2329 fBaskets.AddAt(basket,i);; 2330 nimported++;; 2331 }; 2332 return nimported;; 2333}; 2334 ; 2335////////////////////////////////////////////////////////////////////////////////; 2336/// Print TBranch parameters; 2337///; 2338/// If options contains ""basketsInfo"" print the entry number, location and size; 2339/// of each baskets.; 2340 ; 2341void TBranch::Print(Option_t *option) const; 2342{; 2343 const int kLINEND = 77;; 2344 Float_t cx = 1;; 2345 ; 2346 TString titleContent(GetTitle());; 2347 if ( titleContent == GetName() ) {; 2348 titleContent.Clear();; 2349 }; 2350 ; 2351 if (fLeaves.GetEntries() == 1) {; 2352 if (titleContent.Length()>=2 && titleContent[titleContent.Length()-2]=='/' && isalpha(titleContent[titleContent.Length()-1])) {; 2353 // The type is already encoded. Nothing to do.; 2354 } else {; 2355 TLeaf *leaf = (TLeaf*)fLeaves.UncheckedAt(0);; 2356 if (titleContent.Length()) {; 2357 titleContent.Prepend("" "");; 2358 }; 2359 // titleContent.Append(""type: "");; 2360 titleContent.Prepend(leaf->GetTypeName());; 2361 }; 2362 }; 2363 Int_t titleLength = titleContent.Length();; 2364 ; 2365 Int_t aLength = titleLength + strlen(GetName());; 2366 aLength += (aLength / 54 + 1) * 80 + 100;; 2367 if (aLength < 200) aLength = 200;; 2368 char *bline = new char[aLength];; 2369 ; 2370 Long64_t totBytes = GetTotalSize();; 2371 if (fZipBytes) cx = (fTotBytes+0.00001)/fZipBytes;; 2372 if (titleLength) snprintf(bline,aLength,""*Br%5d :%-9s : %-54s *"",fgCount,GetName(),titleContent.Data());; 2373 else snprintf(bline,aLength,""*Br%5d :%-9s : %-54s *"",fgCount,G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:85113,Clear,Clear,85113,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Clear'],['Clear']
Usability,"if (gyworkl[ip] != ywmin) {; 2013 point2 = ip;; 2014 break;; 2015 }; 2016 }; 2017 nbpoints = point2-point1+1;; 2018 } else {; 2019 // if the 1st or last bin are not on the pad limits the; 2020 // the two vertical lines on the edges are added.; 2021 if (gxwork[0] > gPad->GetUxmin()) { nbpoints++; point1 = 0; }; 2022 if (gxwork[nbpoints] < gPad->GetUxmax()) nbpoints++;; 2023 }; 2024 ; 2025 gPad->PaintPolyLine(nbpoints,gxworkl.data() + point1, gyworkl.data() + point1, noClip);; 2026 continue;; 2027 }; 2028 } //endfor (i=first; i<=last;i++); 2029 } else {; 2030 gywork[0] = wmin;; 2031 if (!optionOne) gxwork[0] = TMath::Max((Double_t)0,gPad->GetUxmin());; 2032 else gxwork[0] = gPad->GetUxmin();; 2033 xwmin = gxwork[0];; 2034 npt = 2;; 2035 for (i=first; i<=last;i++) {; 2036 if (!optionBins) {; 2037 gywork[npt-1] = gywork[npt-2];; 2038 gywork[npt] = wmin+((i-first+1)*delta);; 2039 } else {; 2040 yi1 = y[i]; yi = y[i-1];; 2041 if (yi1 < yi) {; 2042 if (i != last) Error(where, ""Y must be in increasing order"");; 2043 else Error(where, ""Y must have N+1 values with option N"");; 2044 goto do_cleanup;; 2045 }; 2046 gywork[npt-1] = y[i-1]; gywork[npt] = y[i];; 2047 }; 2048 gxwork[npt-1] = x[i-1]; gxwork[npt] = x[i-1];; 2049 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 2050 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 2051 if (i == last) {; 2052 gywork[npt-1] = gywork[npt-2];; 2053 gxwork[npt-1] = xwmin;; 2054 ComputeLogs(npt, optionZ);; 2055 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data(),noClip);; 2056 continue;; 2057 }; 2058 } //endfor (i=first; i<=last;i++); 2059 }; 2060 }; 2061 ; 2062 // Draw the histogram with a smooth Curve.; 2063 // The smoothing is done by the method Smooth(); 2064 ; 2065 if (optionCurve) {; 2066 if (!optionFill) {; 2067 drawtype = 1;; 2068 } else {; 2069 if (!optionOne) drawtype = 2;; 2070 else drawtype = 3;; 2071 }; 2072 if (!optionRot) {; 2073 npt = 0;; 2074 for (i=first; i<=last;i++)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:75381,ux,uxmin-rounding,75381,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin-rounding']"
Usability,"iffer.Definition THttpServer.cxx:1463; THttpServer::SetJSROOTvoid SetJSROOT(const char *location)Set location of JSROOT to use with the server.Definition THttpServer.cxx:355; THttpServer::fMutexstd::mutex fMutex! mutex to protect list with argumentsDefinition THttpServer.h:57; THttpServer::fDefaultPagestd::string fDefaultPage! file name for default page nameDefinition THttpServer.h:50; THttpServer::UnregisterWSvoid UnregisterWS(std::shared_ptr< THttpWSHandler > ws)Unregister WS handler.Definition THttpServer.cxx:1272; THttpServer::GetMimeTypestatic const char * GetMimeType(const char *path)Guess mime type base on file extension.Definition THttpServer.cxx:1479; THttpServer::GetSnifferTRootSniffer * GetSniffer() constreturns pointer on objects snifferDefinition THttpServer.h:89; THttpServer::ReplaceJSROOTLinksvoid ReplaceJSROOTLinks(std::shared_ptr< THttpCallArg > &arg, const std::string &version="""")Replaces all references like ""jsrootsys/..."" or other pre-configured pathes.Definition THttpServer.cxx:847; THttpServer::fTerminatedBool_t fTerminated! termination flag, disables all requests processingDefinition THttpServer.h:37; THttpServer::SetTopNamevoid SetTopName(const char *top)set name of top item in objects hierarchyDefinition THttpServer.h:127; THttpServer::Restrictvoid Restrict(const char *path, const char *options)Restrict access to specified object.Definition THttpServer.cxx:1386; THttpTimerDefinition THttpServer.cxx:42; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TRootSnifferSniffer of ROOT objects, data provider for THttpServer.Definition TRootSniffer.h:115; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool. nethttpincTHttpServer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8h_source.html:21466,Guid,Guide,21466,doc/master/THttpServer_8h_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8h_source.html,1,['Guid'],['Guide']
Usability,"ifferent package as long as it implements the required signatures. One such vector type is CLHEP's Hep3Vector:; XYZVector v1(1,2,3);; RhoEtaPhiVector r2(v1);; CLHEP::Hep3Vector q(1,2,3);; XYZVector v3(q); qfloat * qDefinition THbookFile.cxx:89; v3@ v3Definition rootcling_impl.cxx:3703. Arithmetic Operations; The following operations are possible between vector classes, even of different coordinate system types:; v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; a#define a(i)Definition RSha256.hxx:99; v2@ v2Definition rootcling_impl.cxx:3702; Note that the multiplication between two vectors using the operator * is not supported because it is ambiguous. Other Methods; The vector classes support methods for:. computation of the dot product via Dot(),; computation of the cross product via Cross(),; construction of a unit vector via Unit(). Transformations; The transformations are modeled using simple (non-template) classes, using double as the scalar type to avoid too large numerical errors. The transformations are grouped in Rotations (in 3 dimensions), Lorentz transformations. Each group has several members which may model physically equivalent transformations but with different internal representations. Transformation classes can operate on all type of vectors using the operator() or the operator * and the transformations can also be combined via the operator *. In more detail the transformations available are:. 3D Rotations. ROOT::Math::Rotation3D, rotation described by a 3x3 matrix of doubles; ROOT::Math::EulerAngles rotation described by the three Euler angles (phi, theta and psi) following the GoldStein definition.; ROOT::Math::RotationZYX rotation described by three angles defining a rotation first along the Z axis, then along the rotated Y' axis and then along the rotated X'' axis.; ROOT::Math::AxisAngle, rotation described by a vector (axis) and an angle; ROOT::Math::Quaternion, rotatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GenVector.html:7371,simpl,simple,7371,doc/master/group__GenVector.html,https://root.cern,https://root.cern/doc/master/group__GenVector.html,1,['simpl'],['simple']
Usability,"ifies the type of tick marks on the axis.; If tx = gPad->GetTickx() and ty = gPad->GetTicky() then:. tx = 1; tick marks on top side are drawn (inside); tx = 2; tick marks and labels on top side are drawn; ty = 1; tick marks on right side are drawn (inside); ty = 2; tick marks and labels on right side are drawn. By default only the left Y axis and X bottom axis are drawn; (tx = ty = 0); TPad::SetTicks(tx,ty) allows to set these options.; See also The TAxis functions to set specific axis attributes.; In case multiple color filled histograms are drawn on the same pad, the fill; area may hide the axis tick marks. One can force a redraw of the axis over all; the histograms by calling:. gPad->RedrawAxis();. Giving titles to the X, Y and Z axis. h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");. The histogram title and the axis titles can be any TLatex string.; The titles are part of the persistent histogram.; The option ""SAME""; By default, when an histogram is drawn, the current pad is cleared before; drawing. In order to keep the previous drawing and draw on top of it the; option ""SAME"" should be use. The histogram drawn with the option; ""SAME"" uses the coordinates system available in the current pad. This option can be used alone or combined with any valid drawing option but; some combinations must be use with care.; Limitations. It does not work when; combined with the ""LEGO"" and ""SURF"" options unless the; histogram plotted with the option ""SAME"" has exactly the same; ranges on the X, Y and Z axis as the currently drawn histogram. To superimpose; lego plots histograms' stacks should be used. Superimposing two histograms with different scales in the same pad; The following example creates two histograms, the second histogram is the bins; integral of the first one. It shows a procedure to draw the two histograms in; the same pad and it draws the scale of the second histogram using a new vertical; axis on the right side. See also the tutor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:12541,clear,cleared,12541,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,6,['clear'],['cleared']
Usability,"ifyDataType (const char *tname, Bool_t errormsg=kTRUE);  checks if data type corresponds to that stored in raw table ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLObjectData.html:2933,Clear,Clear,2933,doc/master/classTSQLObjectData.html,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html,1,['Clear'],['Clear']
Usability,"ig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->GetName() : 0 ; }. const RooAbsReal& integrand() const; { return _function.arg() ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealIntegral.html:37016,intuit,intuitively,37016,root/html528/RooRealIntegral.html,https://root.cern,https://root.cern/root/html528/RooRealIntegral.html,1,['intuit'],['intuitively']
Usability,"ig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this interal is cached if it is (partially numeric). void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:36306,intuit,intuitively,36306,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,1,['intuit'],['intuitively']
Usability,"ig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRealIntegral.html:37141,intuit,intuitively,37141,root/html530/RooRealIntegral.html,https://root.cern,https://root.cern/root/html530/RooRealIntegral.html,1,['intuit'],['intuitively']
Usability,"ig->fOffset, config);; 1765 }; 1766 ; 1767 *(To*)( ((char*)iter) ) = (To)temp;; 1768 }; 1769 return 0;; 1770 }; 1771 };; 1772 ; 1773 template <typename From, typename To>; 1774 struct ConvertBasicType<WithFactorMarker<From>,To> {; 1775 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1776 {; 1777 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1778 TConfWithFactor *conf = (TConfWithFactor *)config;; 1779 From temp;; 1780 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1781 iter = (char*)iter + config->fOffset;; 1782 end = (char*)end + config->fOffset;; 1783 for(; iter != end; iter = (char*)iter + incr ) {; 1784 buf.ReadWithFactor(&temp, conf->fFactor, conf->fXmin);; 1785 *(To*)( ((char*)iter) ) = (To)temp;; 1786 }; 1787 return 0;; 1788 }; 1789 };; 1790 ; 1791 template <typename From, typename To>; 1792 struct ConvertBasicType<NoFactorMarker<From>,To> {; 1793 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1794 {; 1795 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1796 TConfNoFactor *conf = (TConfNoFactor *)config;; 1797 From temp;; 1798 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1799 iter = (char*)iter + config->fOffset;; 1800 end = (char*)end + config->fOffset;; 1801 for(; iter != end; iter = (char*)iter + incr ) {; 1802 buf.ReadWithNbits(&temp, conf->fNbits);; 1803 *(To*)( ((char*)iter) ) = (To)temp;; 1804 }; 1805 return 0;; 1806 }; 1807 };; 1808 ; 1809 template <typename T>; 1810 static INLINE_TEMPLATE_ARGS Int_t WriteBasicType(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1811 {; 1812 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1813 iter = (char*)iter + config->fOffset;; 1814 end = (char*)end + c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:74708,Simpl,Simple,74708,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"ighlighted() is similar TCanvas::Picked(). when selected object (histogram as a whole) is different from previous then emit Picked() signal; when selected (highlighted) bin from histogram is different from previous then emit Highlighted() signal. Any user function (or functions) has to be defined UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y). In example (see below) has name PrintInfo(). All parameters of user function are taken from void TCanvas::Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y). pad is pointer to pad with highlighted histogram; obj is pointer to highlighted histogram; x is highlighted x bin for 1D histogram; y is highlighted y bin for 2D histogram (for 1D histogram not in use). Example how to create a connection from any TCanvas object to a user UserFunction() slot (see also TQObject::Connect() for additional info) TQObject::Connect(""TCanvas"", ""Highlighted(TVirtualPad*,TObject*,Int_t,Int_t)"",; 0, 0, ""UserFunction(TVirtualPad*,TObject*,Int_t,Int_t)"");; or use non-static ""simplified"" function TCanvas::HighlightConnect(const char *slot) c1->HighlightConnect(""UserFunction(TVirtualPad*,TObject*,Int_t,Int_t)"");; NOTE the signal and slot string must have a form ""(TVirtualPad*,TObject*,Int_t,Int_t)"" root [0] .x $ROOTSYS/tutorials/hsimple.C; root [1] hpx->SetHighlight(kTRUE); root [2] .x hlprint.C; file hlprint.C void PrintInfo(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); {; auto h = (TH1F *)obj;; if (!h->IsHighlight()) // after highlight disabled; h->SetTitle(""highlight disable"");; else; h->SetTitle(TString::Format(""bin[%03d] (%5.2f) content %g"", x,; h->GetBinCenter(x), h->GetBinContent(x)));; pad->Update();; }; ; void hlprint(); {; if (!gPad) return;; gPad->GetCanvas()->HighlightConnect(""PrintInfo(TVirtualPad*,TObject*,Int_t,Int_t)"");; }; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:130728,simpl,simplified,130728,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simplified']
Usability,"ight pad, do c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad points to the current pad. One can use gPad to set attributes of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with: TPad subpad = (TPad)pad->GetPad(subpadnumber); ; Implements TVirtualPad.; Definition at line 693 of file TPad.cxx. ◆ Class(). static TClass * TPad::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPad::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPad::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 419 of file TPad.h. ◆ Clear(). void TPad::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all pad primitives. ; If the bit kClearAfterCR has been set for this pad, the Clear function will execute only after having pressed a CarriageReturn Set the bit with mypad->SetBit(TPad::kClearAfterCR) ; Implements TVirtualPad.; Definition at line 722 of file TPad.cxx. ◆ Clip() [1/2]. Int_t TPad::Clip ; (; Double_t * ; x, . Double_t * ; y, . Double_t ; xclipl, . Double_t ; yclipb, . Double_t ; xclipr, . Double_t ; yclipt . ). overridevirtual . Clipping routine: Cohen Sutherland algorithm. ; - If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. Parameters. [in,out]x[],y[]Segment coordinates (2 points) ; [in]xclipl,yclipb,xclipr,ycliptClipping boundary . Implements TVirtualPad.; Definition at line 830 of file TPad.cxx. ◆ Clip() [2/2]. Int_t TPad::Clip ; (; Float_t * ; x, . Float_t * ; y, . Float_t ; xclipl, . Float_t ; yclipb, . Float_t ; xclipr, . Float_t ; yclipt . ). virtual . Clipping routine: Cohen Sutherland algorithm. . If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:61043,Clear,Clear,61043,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Clear'],['Clear']
Usability,"ightBin"", ""histo: %p '%s'\txbin: %d, ybin: %d"",; 3895 // (void *)fH, fH->GetName(), fXHighlightBin, fYHighlightBin);; 3896 ; 3897 // paint highlight bin as box (recursive calls PaintHighlightBin); 3898 gPad->Modified(kTRUE);; 3899 gPad->Update();; 3900 ; 3901 // emit Highlighted() signal; 3902 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, fH, fXHighlightBin, fYHighlightBin);; 3903}; 3904 ; 3905////////////////////////////////////////////////////////////////////////////////; 3906/// Paint highlight bin as TBox object; 3907 ; 3908void THistPainter::PaintHighlightBin(Option_t * /*option*/); 3909{; 3910 // call from PaintTitle; 3911 ; 3912 if (!fH->IsHighlight()) return;; 3913 ; 3914 Double_t uxmin = gPad->GetUxmin();; 3915 Double_t uxmax = gPad->GetUxmax();; 3916 Double_t uymin = gPad->GetUymin();; 3917 Double_t uymax = gPad->GetUymax();; 3918 if (gPad->GetLogx()) {; 3919 uxmin = TMath::Power(10.0, uxmin);; 3920 uxmax = TMath::Power(10.0, uxmax);; 3921 }; 3922 if (gPad->GetLogy()) {; 3923 uymin = TMath::Power(10.0, uymin);; 3924 uymax = TMath::Power(10.0, uymax);; 3925 }; 3926 ; 3927 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 3928 Double_t hcenter;; 3929 if (gPad->IsVertical()) {; 3930 hcenter = fXaxis->GetBinCenter(fXHighlightBin);; 3931 if ((hcenter < uxmin) || (hcenter > uxmax)) return;; 3932 } else {; 3933 hcenter = fYaxis->GetBinCenter(fXHighlightBin);; 3934 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3935 }; 3936 if (fH->GetDimension() == 2) {; 3937 hcenter = fYaxis->GetBinCenter(fYHighlightBin);; 3938 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3939 }; 3940 ; 3941 // paint X highlight bin (for 1D or 2D); 3942 Double_t hbx1, hbx2, hby1, hby2;; 3943 if (gPad->IsVertical()) {; 3944 hbx1 = fXaxis->GetBinLowEdge(fXHighlightBin);; 3945 hbx2 = fXaxis->GetBinUpEdge(fXHighlightBin);; 3946 hby1 = uymin;; 3947 hby2 = uymax;; 3948 } else {; 3949 hbx1 = uxmin;; 3950 hbx2 = uxmax;; 3951 hby1 = fYaxis->GetBinLowEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:151918,ux,uxmax,151918,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"ightGradientsAt (size_t i);  ; const Matrix_t & GetWeightGradientsAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeights ();  ; const std::vector< Matrix_t > & GetWeights () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:5893,learn,learningRate,5893,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"ights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:18001,simpl,simple,18001,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,"ights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; $w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)$. with. $\Delta w_{ij}(t) = - \eta(\d e_p / \d w_{ij} +; \delta) + \epsilon \Deltaw_{ij}(t-1)$; The parameters for this method are Eta, EtaDecay, Delta and; Epsilon.; Steepest descent with fixed step size; (batch learning): It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the; Polak-Ribiere updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Conjugate gradients with the; Fletcher-Reeves updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Broyden, Fletcher, Goldfarb, Shanno; (BFGS) method: Implies the computation of a NxN matr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:4793,learn,learning,4793,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,ignal(). void TSignalHandler::HandleDelayedSignal ; (; ). inline . Definition at line 152 of file TSysEvtHandler.h. ◆ IsA(). TClass * TSignalHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 149 of file TSysEvtHandler.h. ◆ IsAsync(). Bool_t TSignalHandler::IsAsync ; (; ); const. inline . Definition at line 144 of file TSysEvtHandler.h. ◆ IsSync(). Bool_t TSignalHandler::IsSync ; (; ); const. inline . Definition at line 143 of file TSysEvtHandler.h. ◆ Notify(). Bool_t TSignalHandler::Notify ; (; ). overridevirtual . Notify when signal occurs. ; Implements TSysEvtHandler.; Definition at line 159 of file TSysEvtHandler.cxx. ◆ Remove(). void TSignalHandler::Remove ; (; ). overridevirtual . Remove signal handler from system signal handler list. ; Implements TSysEvtHandler.; Definition at line 179 of file TSysEvtHandler.cxx. ◆ SetSignal(). void TSignalHandler::SetSignal ; (; ESignals ; sig). inline . Definition at line 142 of file TSysEvtHandler.h. ◆ Streamer(). void TSignalHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSignalHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file TSysEvtHandler.h. Member Data Documentation. ◆ fDelay. Int_t TSignalHandler::fDelay. protected . Definition at line 132 of file TSysEvtHandler.h. ◆ fSignal. ESignals TSignalHandler::fSignal. protected . Definition at line 130 of file TSysEvtHandler.h. ◆ fSync. Bool_t TSignalHandler::fSync. protected . Definition at line 131 of file TSysEvtHandler.h. Libraries for TSignalHandler:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TSysEvtHandler.h; core/base/src/TSysEvtHandler.cxx. TSignalHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSignalHandler.html:19201,Guid,Guide,19201,doc/master/classTSignalHandler.html,https://root.cern,https://root.cern/doc/master/classTSignalHandler.html,1,['Guid'],['Guide']
Usability,"ignal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLocal.html:5106,FeedBack,FeedBackCanvas,5106,root/html602/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLocal.html,4,['FeedBack'],['FeedBackCanvas']
Usability,"ignal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void LoadGraphicsLibs ();  Load shared libs necessary for graphics. ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; virtual Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr);  Process the content of a line starting with "".R"" (already stripped-off) The format is. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Static Protected Member Functions; static void Close (TApplication *app);  Static function used to close a remote application. ;  ; static TApplication * Open (const char *url, Int_t debug, const char *script);  Static fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:18046,guid,guide,18046,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['guid'],['guide']
Usability,"ignal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLColorSet & GetDefaultColorSet ();  Returns reference to the default color-set. ;  ; static Bool_t IsUsingDefaultColorSetForNewViewers ();  Returns the value of the static flag that determines if new viewers should use the default color-set. ;  ; static void SetAxisLabelScale (Float_t als);  Sets static scaling facor that allows simple guide axies to have label values scaled relative to actual scene dimensions. ;  ; static void UseDefaultColorSetForNewViewers (Bool_t x);  Sets static flag that determines if new viewers should use the default color-set. ;  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:27759,simpl,simple,27759,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"ignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelection.html:2395,Clear,ClearStamps,2395,root/html528/TEveSelection.html,https://root.cern,https://root.cern/root/html528/TEveSelection.html,2,['Clear'],['ClearStamps']
Usability,"igned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options ; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance ; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDimOptions.html:2438,Clear,ClearExtra,2438,root/html528/ROOT__Math__IntegratorOneDimOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDimOptions.html,4,['Clear'],['ClearExtra']
Usability,"ignments. Creating functions and p.d.f.s. MyPdf::g(x,m,s) - Create p.d.f or function of type MyPdf with name g with argument x,m,s; Interpretation and number of arguments are mapped to the constructor arguments of the class; (after the name and title). MyPdf(x,m,s) - As above, but with an implicitly defined (unique) object name. Creating sets and lists (to be used as inputs above). {a,b,c} - Create RooArgSet or RooArgList (as determined by context) from given contents. Objects that are not created, are assumed to exist in the workspace; Object creation expressions as shown above can be nested, e.g. one can do. RooGaussian::g(x[-10,10],m[0],3). to create a p.d.f and its variables in one go. This nesting can be applied recursively e.g. SUM::model( f[0.5,0,1] * RooGaussian::g( x[-10,10], m[0], 3] ),; RooChebychev::c( x, {a0[0.1],a1[0.2],a2[-0.3]} )). creates the sum of a Gaussian and a Chebychev and all its variables. A seperate series of operator meta-type exists to simplify the construction of composite expressions; meta-types in all capitals (SUM) create p.d.f.s, meta types in lower case (sum) create; functions. SUM::name(f1*pdf1,f2*pdf2,pdf3] -- Create sum p.d.f name with value f1*pdf1+f2*pdf2+(1-f1-f2)*pdf3; RSUM::name(f1*pdf1,f2*pdf2,pdf3] -- Create recursive sum p.d.f. name with value f1*pdf1 + (1-f1)(f2*pdf2 + (1-f2)pdf3); ASUM::name(f1*amp1,f2*amp2,amp3] -- Create sum p.d.f. name with value f1*amp1+f2*amp2+(1-f1-f2)*amp3 where amplX are amplitudes of type RooAbsReal; sum::name(a1,a2,a3] -- Create sum function with value a1+a2+a3; sum::name(a1*b1,a2*b2,a3*b 3] -- Create sum function with value a1*b1+a2*b2+a3*b3. PROD::name(pdf1,pdf2] -- Create product of p.d.f with 'name' with given input p.d.fs; PROD::name(pdf1|x,pdf2] -- Create product of conditional p.d.f. pdf1 given x and pdf2; prod::name(a,b,c] -- Create production function with value a*b*c. SIMUL::name(cat,a=pdf1,b=pdf2] -- Create simultaneous p.d.f index category cat. Make pdf1 to state a, pdf2 to state b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:13530,simpl,simplify,13530,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,7,['simpl'],['simplify']
Usability,"igurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void CalculateMulticlassValues (const TMVA::Event *&evt, std::vector< Double_t > &parameters, std::vector< Float_t > &values);  calculate the values for multiclass ;  ; void ClearAll ();  delete and clear all class members ;  ; void CreateFormula ();  translate formula string into TFormula, and parameter string into par ranges ;  ; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; Double_t InterpretFormula (const Event *, std::vector< Double_t >::iterator begin, std::vector< Double_t >::iterator end);  formula interpretation ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  display fit parameters check maximum length of variable name ;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  . Private Attributes; std::vector< Double_t > fBestPars;  the pars that optimise (minimise) the estimator ;  ; TString fConverger;  fit method uses fConverger as intermediate step to converge into local minimas ;  ; IFitterTarget * fConvergerFitter;  intermediate fitter ;  ; TString fFitMethod;  estimator optimisation method ;  ; FitterBase * fFitter;  the fitter used in the training ;  ; TFormula * fFormula;  the discrimination function ;  ; TString fFormulaStringP;  string with function ;  ; TString fFormulaStringT;  string with function ;  ; UInt_t fNPars;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:26847,Clear,ClearAll,26847,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,2,"['Clear', 'clear']","['ClearAll', 'clear']"
Usability,"iguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Count number of faces for the shape. ; Definition at line 937 of file RGeomData.cxx. ◆ FindNodeId(). int RGeomDescription::FindNodeId ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:13085,Clear,Clear,13085,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['Clear']
Usability,"ihoodFCN &rhs)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; PoissonLikelihoodFCN(const PoissonLikelihoodFCN &f)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; T typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; Type() constROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Type_t typedefROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >; UpdateNCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; UseSumOfWeights()ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; UseSumOfWeightSquare(bool on=true)ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inline; ~BasicFCN()ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotectedvirtual; ~BasicFitMethodFunction() overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; ~PoissonLikelihoodFCN()ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html:5880,Guid,Guide,5880,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN-members.html,1,['Guid'],['Guide']
Usability,"ikelihood using internal constrains in p.d.f; GlobalObservables(const RooArgSet&) -- Define the set of normalization observables to be used for the constraint terms.; If none are specified the constrained parameters are used; ExternalConstraints(const RooArgSet& ) -- Include given external constraints to likelihood; Offset(Bool_t) -- Offset likelihood by initial value (so that starting value of FCN in minuit is zero). This; can improve numeric stability in simultaneously fits with components with large likelihood values. Options to control flow of fit procedure. Minimizer(type,algo) -- Choose minimization package and algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer; interface, but others can be specified (through RooMinimizer interface). Select OldMinuit to use; MINUIT through the old RooMinuit interface. Type Algorithm; ------ ---------; OldMinuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit2 migrad, simplex, minimize, scan; GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; GSLSimAn -. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Optimize(Bool_t flag) -- Activate constant term optimization of test statistic during minimization (on by default); Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, off by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. SumW2Error(Bool_t flag) -- Apply correa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:56969,simpl,simplex,56969,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,15,['simpl'],['simplex']
Usability,"ikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:7179,simpl,simply,7179,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['simpl'],['simply']
Usability,"ikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetAlwaysReuseNLL(Bool_t flag). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:2352,Simpl,SimpleLikelihoodRatioTestStat,2352,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"ildLegend(Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") overrideBuild a legend from the graphical objects in the pad.Definition TPad.cxx:555; TPad::Pickvirtual TPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj)Search for an object at pixel position px,py.Definition TPad.cxx:4657; TPad::Updatevoid Update() overrideUpdate pad.Definition TPad.cxx:2935; TPad::SetNumbervirtual void SetNumber(Int_t number)Definition TPad.h:342; TPad::fNumberInt_t fNumberpad number identifierDefinition TPad.h:88; TPad::PaintFillAreaNDCvoid PaintFillAreaNDC(Int_t n, Double_t *x, Double_t *y, Option_t *option="""") overridePaint fill area in CurrentPad NDC coordinates.Definition TPad.cxx:4065; TPad::PixeltoXDouble_t PixeltoX(Int_t px) overrideConvert pixel to X coordinate.Definition TPad.cxx:7388; TPad::fAbsPixeltoXkDouble_t fAbsPixeltoXkConversion coefficient for absolute pixel to X World.Definition TPad.h:55; TPad::Clearvoid Clear(Option_t *option="""") overrideDelete all pad primitives.Definition TPad.cxx:722; TPad::YtoPixelInt_t YtoPixel(Double_t y) const overrideConvert Y coordinate to pixel.Definition TPad.cxx:7510; TPad::GetTickxInt_t GetTickx() const overrideDefinition TPad.h:238; TPad::PaintLinevoid PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overridePaint line in CurrentPad World coordinates.Definition TPad.cxx:4313; TPad::GetGLDeviceInt_t GetGLDevice() overrideGet GL device.Definition TPad.cxx:7238; TPad::fAspectRatioDouble_t fAspectRatioratio of w/h in case of fixed ratioDefinition TPad.h:82; TPad::RecordPavevirtual void RecordPave(const TObject *obj)Emit RecordPave() signal.Definition TPad.cxx:7246; TPad::PaintBorderPSvoid PaintBorderPS(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) overridePaint a frame border with Postscript.Definition TPad.cxx:3740; TPad::fUymaxDouble_t fUymaxMaximum value on the Y axis.Definition TPad.h:77; TPad::SetLogyvoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:301924,Clear,Clearvoid,301924,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ile *GetCurrentFile() const;; 459 Int_t GetDefaultEntryOffsetLen() const {return fDefaultEntryOffsetLen;}; 460 Long64_t GetDebugMax() const { return fDebugMax; }; 461 Long64_t GetDebugMin() const { return fDebugMin; }; 462 TDirectory *GetDirectory() const { return fDirectory; }; 463 virtual Long64_t GetEntries() const { return fEntries; }; 464 virtual Long64_t GetEntries(const char *selection);; 465 /// Return a number greater or equal to the total number of entries in the; 466 /// dataset.; 467 ///; 468 /// \note If you are interested in the total number of entries in a TChain,; 469 /// this function will give that number once the last file of the chain; 470 /// is opened. In general, using this instead of GetEntries will avoid; 471 /// opening all files in the chain which could be very costly for very; 472 /// large number of files stored at a remote location.; 473 ///; 474 /// The logic depends on whether the dataset is a TTree or a TChain. In the; 475 /// first case, it simply returns the total number of entries in the tree. In; 476 /// the latter case, it depends on which point of the processing of the chain; 477 /// this function is called. During most of the chain processing, this; 478 /// function will return TTree::kMaxEntries. When the chain arrives at the; 479 /// last file, then the function will return the accumulated total number of; 480 /// entries in the whole chain. A notable use case where this function; 481 /// becomes quite useful is when writing the following for loop to traverse; 482 /// the entries in the dataset:; 483 ///; 484 /// \code{.cpp}; 485 /// for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; 486 /// // Do something with the event in the dataset; 487 /// }; 488 /// \endcode; 489 ///; 490 /// In the example above, independently on whether the dataset is a TTree or; 491 /// a TChain, the GetEntriesFast call will provide the correct stopping; 492 /// condition for the loop (i.e. the total number of entries). In the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:25301,simpl,simply,25301,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simply']
Usability,"ile Chi2FCN.h. ◆ operator=(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . Chi2FCN & ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::operator= ; (; const Chi2FCN< DerivFunType, ModelFunType > & ; rhs). inline . Assignment operator. ; Definition at line 97 of file Chi2FCN.h. ◆ SetNFitPoints(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual void ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::SetNFitPoints ; (; unsigned int ; n); const. inlineprotectedvirtual . set number of fit points (need to be called in const methods, make it const) ; Definition at line 137 of file Chi2FCN.h. ◆ Type(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseObjFunction::Type_t ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::Type ; (; ); const. inlinevirtual . get type of fit method function ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 131 of file Chi2FCN.h. Member Data Documentation. ◆ fExecutionPolicy. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ::ROOT::EExecutionPolicy ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::fExecutionPolicy. private . Definition at line 162 of file Chi2FCN.h. ◆ fGrad. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . std::vector<double> ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::fGrad. mutableprivate . for derivatives ; Definition at line 161 of file Chi2FCN.h. ◆ fNEffPoints. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . unsigned int ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >::fNEffPoints. mutableprivate . number of effective points used in the fit ; Definition at line 159 of file Chi2FCN.h. math/mathcore/inc/Fit/Chi2FCN.h. ROOTFitChi2FCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html:12416,Guid,Guide,12416,doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Chi2FCN.html,1,['Guid'],['Guide']
Usability,ile DataLoader.h. ◆ TBatch() [2/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; const TBatch< AArchitecture > & ; ). default . ◆ TBatch() [3/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; TBatch< AArchitecture > && ; ). default . Member Function Documentation. ◆ GetInput(). template<typename AArchitecture > . Matrix_t & TMVA::DNN::TBatch< AArchitecture >::GetInput ; (; ). inline . Return the matrix representing the input data. ; Definition at line 72 of file DataLoader.h. ◆ GetOutput(). template<typename AArchitecture > . Matrix_t & TMVA::DNN::TBatch< AArchitecture >::GetOutput ; (; ). inline . Return the matrix representing the output data. ; Definition at line 74 of file DataLoader.h. ◆ GetWeights(). template<typename AArchitecture > . Matrix_t & TMVA::DNN::TBatch< AArchitecture >::GetWeights ; (; ). inline . Return the matrix holding the event weights. ; Definition at line 76 of file DataLoader.h. ◆ operator=() [1/2]. template<typename AArchitecture > . TBatch & TMVA::DNN::TBatch< AArchitecture >::operator= ; (; const TBatch< AArchitecture > & ; ). default . ◆ operator=() [2/2]. template<typename AArchitecture > . TBatch & TMVA::DNN::TBatch< AArchitecture >::operator= ; (; TBatch< AArchitecture > && ; ). default . Member Data Documentation. ◆ fInputMatrix. template<typename AArchitecture > . Matrix_t TMVA::DNN::TBatch< AArchitecture >::fInputMatrix. private . Definition at line 60 of file DataLoader.h. ◆ fOutputMatrix. template<typename AArchitecture > . Matrix_t TMVA::DNN::TBatch< AArchitecture >::fOutputMatrix. private . Definition at line 61 of file DataLoader.h. ◆ fWeightMatrix. template<typename AArchitecture > . Matrix_t TMVA::DNN::TBatch< AArchitecture >::fWeightMatrix. private . Definition at line 62 of file DataLoader.h. tmva/tmva/inc/TMVA/DNN/DataLoader.h. TMVADNNTBatch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatch.html:3783,Guid,Guide,3783,doc/master/classTMVA_1_1DNN_1_1TBatch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatch.html,1,['Guid'],['Guide']
Usability,"ile HeatmapAnalyzer.cxx. ◆ ~HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::~HeatmapAnalyzer ; (; ). default . Member Function Documentation. ◆ analyze(). std::unique_ptr< TH2I > RooFit::MultiProcess::HeatmapAnalyzer::analyze ; (; int ; analyzed_gradient). This method is the main functionality in this class. ; It does the heavy lifting of matching duration timestamps to tasks and partition evaluations. Parameters. [in]analyzed_gradientGradient to analyze. For example, setting to 1 analyzes the first gradient (ordered by time) in the logs. . Definition at line 144 of file HeatmapAnalyzer.cxx. ◆ getMetadata(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getMetadata ; (; ). Definition at line 226 of file HeatmapAnalyzer.cxx. ◆ getPartitionNames(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getPartitionNames ; (; ). Definition at line 221 of file HeatmapAnalyzer.cxx. ◆ getTaskNames(). std::vector< std::string > const RooFit::MultiProcess::HeatmapAnalyzer::getTaskNames ; (; ). Definition at line 216 of file HeatmapAnalyzer.cxx. Member Data Documentation. ◆ eval_partitions_names_. std::vector<std::string> RooFit::MultiProcess::HeatmapAnalyzer::eval_partitions_names_. private . Definition at line 51 of file HeatmapAnalyzer.h. ◆ jsonData_. std::unique_ptr<Detail::HeatmapAnalyzerJsonData> RooFit::MultiProcess::HeatmapAnalyzer::jsonData_. private . Definition at line 49 of file HeatmapAnalyzer.h. ◆ matrix_. TH2I RooFit::MultiProcess::HeatmapAnalyzer::matrix_. private . Definition at line 48 of file HeatmapAnalyzer.h. ◆ tasks_names_. std::vector<std::string> RooFit::MultiProcess::HeatmapAnalyzer::tasks_names_. private . Definition at line 50 of file HeatmapAnalyzer.h. roofit/multiprocess/inc/RooFit/MultiProcess/HeatmapAnalyzer.h; roofit/multiprocess/src/HeatmapAnalyzer.cxx. RooFitMultiProcessHeatmapAnalyzer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:4300,Guid,Guide,4300,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,1,['Guid'],['Guide']
Usability,"ile Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50683,simpl,simplifies,50683,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simplifies']
Usability,"ile Measurement.h. ◆ SetExportOnly(). void RooStats::HistFactory::Measurement::SetExportOnly ; (; bool ; ExportOnly). Do not produce any plots or tables, just save the model. ; Deprecated:Will be removed in ROOT 6.36. ExportOnly() == true is the default since ROOT 6.34 and it can't be disabled anymore in 6.36. . ◆ SetFunctionObjects(). void RooStats::HistFactory::Measurement::SetFunctionObjects ; (; std::vector< RooStats::HistFactory::PreprocessFunction > ; objects). inline . Definition at line 75 of file Measurement.h. ◆ SetLumi(). void RooStats::HistFactory::Measurement::SetLumi ; (; double ; Lumi). inline . set integrated luminosity used to normalise histograms (if NormalizeByTheory is true for this sample) ; Definition at line 87 of file Measurement.h. ◆ SetLumiRelErr(). void RooStats::HistFactory::Measurement::SetLumiRelErr ; (; double ; RelErr). inline . set relative uncertainty on luminosity ; Definition at line 89 of file Measurement.h. ◆ SetOutputFilePrefix(). void RooStats::HistFactory::Measurement::SetOutputFilePrefix ; (; const std::string & ; prefix). inline . set output prefix ; Definition at line 42 of file Measurement.h. ◆ SetParamValue(). void RooStats::HistFactory::Measurement::SetParamValue ; (; const std::string & ; param, . double ; value . ). Set a parameter to a specific value (And optionally fix it) ; Set parameter of the model to given value. ; Definition at line 87 of file Measurement.cxx. ◆ SetPOI(). void RooStats::HistFactory::Measurement::SetPOI ; (; const std::string & ; POI). inline . insert PoI at beginning of vector of PoIs ; Definition at line 47 of file Measurement.h. Libraries for RooStats::HistFactory::Measurement:. [legend]; The documentation for this class was generated from the following files:; roofit/histfactory/inc/RooStats/HistFactory/Measurement.h; roofit/histfactory/src/Measurement.cxx. RooStatsHistFactoryMeasurement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:21121,Guid,Guide,21121,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Guid'],['Guide']
Usability,"ile RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 268 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for this class was generated from the following files:; tree/webviewer/inc/ROOT/RTreeViewer.hxx; tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeViewer. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:9721,Guid,Guide,9721,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['Guid'],['Guide']
Usability,"ile Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Enumerations ; RNTupleReader.hxx File ReferenceNTuple-related classes | ROOT7 classes. #include <ROOT/RConfig.hxx>; #include <ROOT/RError.hxx>; #include <ROOT/RNTupleDescriptor.hxx>; #include <ROOT/RNTupleMetrics.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleReadOptions.hxx>; #include <ROOT/RNTupleUtil.hxx>; #include <ROOT/RNTupleView.hxx>; #include <ROOT/RPageStorage.hxx>; #include <ROOT/RSpan.hxx>; #include <iostream>; #include <iterator>; #include <memory>; #include <string>; #include <string_view>. Include dependency graph for RNTupleReader.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::RNTupleReader::RIterator;  ; class  ROOT::Experimental::RNTupleReader;  An RNTuple that is used to read data from storage. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  . Enumerations; enum class  ROOT::Experimental::ENTupleInfo { ROOT::Experimental::kSummary; , ROOT::Experimental::kStorageDetails; , ROOT::Experimental::kMetrics; };  Listing of the different options that can be printed by RNTupleReader::GetInfo() More...;  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2024-02-20 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleReader.hxx. treentuplev7incROOTRNTupleReader.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8hxx.html:1848,Feedback,Feedback,1848,doc/master/RNTupleReader_8hxx.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8hxx.html,2,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,"ile RooLognormal.h. ◆ getShapeK(). RooAbsReal const & RooLognormal::getShapeK ; (; ); const. inline . Get the shape parameter. ; Definition at line 42 of file RooLognormal.h. ◆ getX(). RooAbsReal const & RooLognormal::getX ; (; ); const. inline . Get the x variable. ; Definition at line 36 of file RooLognormal.h. ◆ IsA(). TClass * RooLognormal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 57 of file RooLognormal.h. ◆ Streamer(). void RooLognormal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooLognormal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file RooLognormal.h. ◆ translate(). void RooLognormal::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 85 of file RooLognormal.cxx. ◆ useStandardParametrization(). bool RooLognormal::useStandardParametrization ; (; ); const. inline . Definition at line 44 of file RooLognormal.h. Member Data Documentation. ◆ _useStandardParametrization. bool RooLognormal::_useStandardParametrization = false. protected . Definition at line 50 of file RooLognormal.h. ◆ k. RooRealProxy RooLognormal::k. protected . the shape parameter, exp(sigma) ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:80536,simpl,simple,80536,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['simpl'],['simple']
Usability,"ile TAxisModLab.cxx. ◆ SetAngle(). void TAxisModLab::SetAngle ; (; Double_t ; a = -1.). Set modified label angle. ; Definition at line 59 of file TAxisModLab.cxx. ◆ SetColor(). void TAxisModLab::SetColor ; (; Int_t ; c = -1). Set modified label color. ; Definition at line 83 of file TAxisModLab.cxx. ◆ SetFont(). void TAxisModLab::SetFont ; (; Int_t ; f = -1). Set modified label font. ; Definition at line 91 of file TAxisModLab.cxx. ◆ SetLabNum(). void TAxisModLab::SetLabNum ; (; Int_t ; n = 0). Set modified label number. ; Definition at line 42 of file TAxisModLab.cxx. ◆ SetLabValue(). void TAxisModLab::SetLabValue ; (; Double_t ; v = 0.). Set modified label value. ; Definition at line 50 of file TAxisModLab.cxx. ◆ SetSize(). void TAxisModLab::SetSize ; (; Double_t ; s = -1.). Set modified label size. ; Definition at line 67 of file TAxisModLab.cxx. ◆ SetText(). void TAxisModLab::SetText ; (; TString ; t = """"). Set modified label text. ; Definition at line 99 of file TAxisModLab.cxx. ◆ Streamer(). void TAxisModLab::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TAxisModLab::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TAxisModLab.h. Member Data Documentation. ◆ fLabNum. Int_t TAxisModLab::fLabNum. private . Label number. ; Definition at line 24 of file TAxisModLab.h. ◆ fLabText. TString TAxisModLab::fLabText. private . Alternative label text. ; Definition at line 26 of file TAxisModLab.h. ◆ fLabValue. Double_t TAxisModLab::fLabValue. private . Label value, used when label number is 0. ; Definition at line 25 of file TAxisModLab.h. Libraries for TAxisModLab:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TAxisModLab.h; hist/hist/src/TAxisModLab.cxx. TAxisModLab. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxisModLab.html:17222,Guid,Guide,17222,doc/master/classTAxisModLab.html,https://root.cern,https://root.cern/doc/master/classTAxisModLab.html,1,['Guid'],['Guide']
Usability,ile TEveRGBAPalette.h. ◆ fInterpolate. Bool_t TEveRGBAPalette::fInterpolate. protected . Definition at line 48 of file TEveRGBAPalette.h. ◆ fLowLimit. Int_t TEveRGBAPalette::fLowLimit. protected . Definition at line 42 of file TEveRGBAPalette.h. ◆ fMaxVal. Int_t TEveRGBAPalette::fMaxVal. protected . Definition at line 45 of file TEveRGBAPalette.h. ◆ fMinVal. Int_t TEveRGBAPalette::fMinVal. protected . Definition at line 44 of file TEveRGBAPalette.h. ◆ fNBins. Int_t TEveRGBAPalette::fNBins. mutableprotected . Definition at line 61 of file TEveRGBAPalette.h. ◆ fOverColor. Color_t TEveRGBAPalette::fOverColor. protected . Definition at line 58 of file TEveRGBAPalette.h. ◆ fOverflowAction. Int_t TEveRGBAPalette::fOverflowAction. protected . Definition at line 52 of file TEveRGBAPalette.h. ◆ fOverRGBA. UChar_t TEveRGBAPalette::fOverRGBA[4]. protected . Definition at line 59 of file TEveRGBAPalette.h. ◆ fShowDefValue. Bool_t TEveRGBAPalette::fShowDefValue. protected . Definition at line 49 of file TEveRGBAPalette.h. ◆ fUIc. Double_t TEveRGBAPalette::fUIc. protected . Definition at line 40 of file TEveRGBAPalette.h. ◆ fUIDoubleRep. Bool_t TEveRGBAPalette::fUIDoubleRep. protected . Definition at line 47 of file TEveRGBAPalette.h. ◆ fUIf. Double_t TEveRGBAPalette::fUIf. protected . Definition at line 39 of file TEveRGBAPalette.h. ◆ fUnderColor. Color_t TEveRGBAPalette::fUnderColor. protected . Definition at line 56 of file TEveRGBAPalette.h. ◆ fUnderflowAction. Int_t TEveRGBAPalette::fUnderflowAction. protected . Definition at line 51 of file TEveRGBAPalette.h. ◆ fUnderRGBA. UChar_t TEveRGBAPalette::fUnderRGBA[4]. protected . Definition at line 57 of file TEveRGBAPalette.h. Libraries for TEveRGBAPalette:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveRGBAPalette.h; graf3d/eve/src/TEveRGBAPalette.cxx. TEveRGBAPalette. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:34127,Guid,Guide,34127,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Guid'],['Guide']
Usability,"ile TFileCollection.cxx. ◆ Streamer(). void TFileCollection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TFileCollection.h. ◆ Update(). Int_t TFileCollection::Update ; (; Long64_t ; avgsize = -1). Update accumulated information about the elements of the collection (e.g. ; fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize' bytes when the size info is not available. Also updates the meta data information by summarizing the meta data of the contained objects. Return -1 in case of any failure, 0 if the total size is exact, 1 if incomplete, 2 if complete but (at least partially) estimated. ; Definition at line 312 of file TFileCollection.cxx. Member Data Documentation. ◆ fDefaultTree. TString TFileCollection::fDefaultTree. private . Definition at line 45 of file TFileCollection.h. ◆ fList. THashList* TFileCollection::fList. private . Definition at line 42 of file TFileCollection.h. ◆ fMetaDataList. TList* TFileCollection::fMetaDataList. private . Definition at line 43 of file TFileCollection.h. ◆ fNCorruptFiles. Long64_t TFileCollection::fNCorruptFiles. private . Definition at line 50 of file TFileCollection.h. ◆ fNFiles. Long64_t TFileCollection::fNFiles. private . Definition at line 47 of file TFileCollection.h. ◆ fNStagedFiles. Long64_t TFileCollection::fNStagedFiles. private . Definition at line 49 of file TFileCollection.h. ◆ fTotalSize. Long64_t TFileCollection::fTotalSize. private . Definition at line 46 of file TFileCollection.h. Libraries for TFileCollection:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TFileCollection.h; core/base/src/TFileCollection.cxx. TFileCollection. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:26834,Guid,Guide,26834,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['Guid'],['Guide']
Usability,"ile TFractionFitter.h. ◆ fIntegralData. Double_t TFractionFitter::fIntegralData. protected . ""data"" histogram content integral over allowed fit range ; Definition at line 103 of file TFractionFitter.h. ◆ fIntegralMCs. Double_t* TFractionFitter::fIntegralMCs. protected . Same for template histograms (weights not taken into account) ; Definition at line 104 of file TFractionFitter.h. ◆ fLowLimitX. Int_t TFractionFitter::fLowLimitX. protected . First bin in X dimension. ; Definition at line 84 of file TFractionFitter.h. ◆ fLowLimitY. Int_t TFractionFitter::fLowLimitY. protected . First bin in Y dimension. ; Definition at line 86 of file TFractionFitter.h. ◆ fLowLimitZ. Int_t TFractionFitter::fLowLimitZ. protected . First bin in Z dimension. ; Definition at line 88 of file TFractionFitter.h. ◆ fMCs. TObjArray TFractionFitter::fMCs. protected . Array of pointers to template histograms. ; Definition at line 101 of file TFractionFitter.h. ◆ fNDF. Int_t TFractionFitter::fNDF. protected . Number of degrees of freedom in the fit. ; Definition at line 93 of file TFractionFitter.h. ◆ fNpar. Int_t TFractionFitter::fNpar. protected . number of fit parameters ; Definition at line 110 of file TFractionFitter.h. ◆ fNpfits. Int_t TFractionFitter::fNpfits. protected . Number of points used in the fit. ; Definition at line 92 of file TFractionFitter.h. ◆ fPlot. TH1* TFractionFitter::fPlot. protected . Pointer to histogram containing summed template predictions. ; Definition at line 106 of file TFractionFitter.h. ◆ fWeights. TObjArray TFractionFitter::fWeights. protected . Array of pointers to corresponding weight factors (may be null) ; Definition at line 102 of file TFractionFitter.h. Libraries for TFractionFitter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TFractionFitter.h; hist/hist/src/TFractionFitter.cxx. TFractionFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:36961,Guid,Guide,36961,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['Guid'],['Guide']
Usability,"ile TGTextEdit.cxx. Public Member Functions;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:1224,Clear,Clear,1224,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['Clear'],['Clear']
Usability,"ile TNeuronInput.h. ◆ ~TNeuronInput(). virtual TMVA::TNeuronInput::~TNeuronInput ; (; ). inlinevirtual . Definition at line 47 of file TNeuronInput.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInput::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInput::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TNeuronInput::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file TNeuronInput.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInput::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file TNeuronInput.h. ◆ GetInput(). virtual Double_t TMVA::TNeuronInput::GetInput ; (; const TNeuron * ; neuron); const. pure virtual . Implemented in TMVA::TNeuronInputAbs, TMVA::TNeuronInputSqSum, and TMVA::TNeuronInputSum. ◆ GetName(). virtual TString TMVA::TNeuronInput::GetName ; (; ). pure virtual . Implemented in TMVA::TNeuronInputAbs, TMVA::TNeuronInputSqSum, and TMVA::TNeuronInputSum. ◆ IsA(). virtual TClass * TMVA::TNeuronInput::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::TNeuronInputAbs, TMVA::TNeuronInputSqSum, and TMVA::TNeuronInputSum.; Definition at line 55 of file TNeuronInput.h. ◆ Streamer(). virtual void TMVA::TNeuronInput::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::TNeuronInputAbs, TMVA::TNeuronInputSqSum, and TMVA::TNeuronInputSum. ◆ StreamerNVirtual(). void TMVA::TNeuronInput::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TNeuronInput.h. The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TNeuronInput.h. TMVATNeuronInput. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInput.html:3100,Guid,Guide,3100,doc/master/classTMVA_1_1TNeuronInput.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInput.html,1,['Guid'],['Guide']
Usability,"ile TProofPlayer.h. ◆ Progress() [4/6]. void TProofPlayerSuperMaster::Progress ; (; TSlave * ; sl, . Long64_t ; total, . Long64_t ; processed . ). overridevirtual . Report progress. ; Reimplemented from TProofPlayerRemote.; Definition at line 4680 of file TProofPlayer.cxx. ◆ Progress() [5/6]. void TProofPlayerSuperMaster::Progress ; (; TSlave * ; sl, . Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti . ). overridevirtual . Report progress. ; Reimplemented from TProofPlayerRemote.; Definition at line 4700 of file TProofPlayer.cxx. ◆ Progress() [6/6]. void TProofPlayerSuperMaster::Progress ; (; TSlave * ; sl, . TProofProgressInfo * ; pi . ). overridevirtual . Progress signal. ; Reimplemented from TProofPlayerRemote.; Definition at line 4761 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayerSuperMaster::SetupFeedback ; (; ). overrideprotectedvirtual . Setup reporting of feedback objects and progress messages. ; Reimplemented from TProofPlayerRemote.; Definition at line 4892 of file TProofPlayer.cxx. ◆ Streamer(). void TProofPlayerSuperMaster::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayerRemote. ◆ StreamerNVirtual(). void TProofPlayerSuperMaster::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 442 of file TProofPlayer.h. Member Data Documentation. ◆ fReturnFeedback. Bool_t TProofPlayerSuperMaster::fReturnFeedback. private . Definition at line 409 of file TProofPlayer.h. ◆ fSlaveActW. TArrayI TProofPlayerSuperMaster::fSlaveActW. private . Definition at line 405 of file TProofPlayer.h. ◆ fSlaveBytesRead. TArrayL64 TProofPlayerSuperMaster::fSlaveBytesRead. private . Definition at line 400 of file TProofPlayer.h. ◆ fSlaveEffS. TArrayF TProofPlayerSuperMaster::fSlaveEffS. private . Definition at line 407 of file TProofPlayer.h. ◆ fSlaveEvtRti. TArrayF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:30741,feedback,feedback,30741,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['feedback'],['feedback']
Usability,"ile TQCommand.cxx. ◆ CanCompress(). Bool_t TQCommand::CanCompress ; (; TQCommand * ; c); const. virtual . By default, commands can be compressed if they are: . equal; setter commands. More complicated commands might want to override this function. ; Definition at line 387 of file TQCommand.cxx. ◆ CanMerge(). Bool_t TQCommand::CanMerge ; (; TQCommand * ; c); const. virtual . Two commands can be merged if they can be composed into a single command (Macro command). ; To allow merging commands user might override this function. ; Definition at line 314 of file TQCommand.cxx. ◆ CanRedo(). Bool_t TQCommand::CanRedo ; (; ); const. virtual . Returns kTRUE if Redo action is possible, kFALSE if it's not. ; By default, only single sequential redo action is possible. ; Reimplemented in TQUndoManager.; Definition at line 571 of file TQCommand.cxx. ◆ CanUndo(). Bool_t TQCommand::CanUndo ; (; ); const. virtual . Returns kTRUE if Undo action is possible, kFALSE if it's not. ; By default, only single trial undo action is possible. ; Reimplemented in TQUndoManager.; Definition at line 580 of file TQCommand.cxx. ◆ Class(). static TClass * TQCommand::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TQCommand::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TQCommand::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 98 of file TQCommand.h. ◆ Compress(). void TQCommand::Compress ; (; TQCommand * ; c). virtual . Compress command. ; Compression is analogous to arithmetic ""addition operation"".; Note:; The compressed command will be deleted.; Execution Compress method invokes Redo action with new redo arguments inherited from compressed command. More complicated commands might want to override this function. ; Definition at line 402 of file TQCommand.cxx. ◆ DeclFileName(). static const char * TQCommand::DeclFileName ; (; ). inlinestatic . Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:35113,undo,undo,35113,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"ile containing the class declaration ; Definition at line 228 of file TProofPlayer.h. ◆ DeleteDrawFeedback(). void TProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). overridevirtual . Delete draw feedback object. ; Implements TVirtualProofPlayer.; Definition at line 750 of file TProofPlayer.cxx. ◆ DrawCanvas(). Int_t TProofPlayer::DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 1658 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayer::Feedback ; (; TList * ; objs). overridevirtual . Set feedback list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 724 of file TProofPlayer.cxx. ◆ FeedBackCanvas(). void TProofPlayer::FeedBackCanvas ; (; const char * ; name, . Bool_t ; create . ). Create/destroy a named canvas for feedback. ; Definition at line 1765 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayer::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1571 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayer::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:28368,Feedback,Feedback,28368,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['Feedback'],['Feedback']
Usability,"ile(const TFile &)=deleteTFileprivate; TFile()TFile; TFile(const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFile; TFilePrefetchTFilefriend; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnregisterContext(TContext *ctxt)TDirectoryprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideTFilevirtual; Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const overrideTFilevirtual; WriteBuffer(const char *buf, Int_t len)TFilevirtual; WriteBufferViaCache(const char *buf, Int_t len)TFileprotected; WriteDirHeader() overrideTDirectoryFilevirtual; WriteFree()TFilevirtual; WriteHeader()TFilevirtual; WriteKeys() overrideTDirectoryFilevirtual; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObjectAny(const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; WriteObjectAny(const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; WriteProcessID(TProcessID *pid)TFilevirtual; WriteStreamerInfo()TFilevirtual; WriteTObject(const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; ~TDirectory()TDirectoryvirtual; ~TDirectoryFile() overrideTDirectoryFile; ~TFile() overrideTFile; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile-members.html:21761,Guid,Guide,21761,doc/master/classTFile-members.html,https://root.cern,https://root.cern/doc/master/classTFile-members.html,1,['Guid'],['Guide']
Usability,"ile-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteInt_t Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimple_8C.html:6266,simpl,simple,6266,doc/master/hsimple_8C.html,https://root.cern,https://root.cern/doc/master/hsimple_8C.html,1,['simpl'],['simple']
Usability,"ile.C, the file will be interpreted. If filename is of the form file.C++, the file file.C will be compiled and dynamically loaded. The corresponding binary file and shared library will be deleted at the end of the function. If filename is of the form file.C+, the file file.C will be compiled and dynamically loaded. At next call, if file.C is older than file.o and file.so, the file.C is not compiled, only file.so is loaded.; The static function returns a pointer to a TSelector object ; Definition at line 142 of file TSelector.cxx. ◆ GetStatus(). virtual Long64_t TSelector::GetStatus ; (; ); const. inlinevirtual . Definition at line 58 of file TSelector.h. ◆ ImportOutput(). void TSelector::ImportOutput ; (; TList * ; output). virtual . Imports the content of 'output' in the internal output list. ; Existing content in the output list is discarded (unless found also in 'output'). In particular, if 'output' is nullptr or empty, reset the internal list. On return, the content of 'output' is cleared to avoid double deletion issues. (The caller is responsible of 'output' as container: its content is transferred under the selector ownership). ; Definition at line 270 of file TSelector.cxx. ◆ Init(). virtual void TSelector::Init ; (; TTree * ; ). inlinevirtual . Reimplemented in TSelVerifyDataSet, TSelHandleDataSet, TProofDraw, TProofDrawHist, TProofDrawEventList, TProofDrawEntryList, TProofDrawProfile, TProofDrawProfile2D, h1analysisTreeReader, TSelEvent, TSelEventGen, TProofDrawGraph, TProofDrawPolyMarker3D, RooProofDriverSelector, TSelectorEntries, and h1analysis.; Definition at line 53 of file TSelector.h. ◆ IsA(). TClass * TSelector::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSelVerifyDataSet, TSelEvent, TSelEventGen, TSelHandleDataSet, TSelHist, TSelectorDraw, and TSelectorEntries.; Definition at line 79 of file TSelector.h. ◆ IsStandardDraw(). bool TSelector::IsStandardDraw ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:19056,clear,cleared,19056,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['clear'],['cleared']
Usability,"ile1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Eff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:78186,progress bar,progress bar,78186,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,4,['progress bar'],['progress bar']
Usability,"ileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void FadeView (Float_t alpha);  Draw a rectangle (background color and given alpha) across the whole viewport. ;  ; void InitGL ();  Initialise GL state. ;  ; void MakeCurrent () const;  Make GL context current. ;  ; void PostDraw ();  Perform GL work which must be done after each draw. ;  ; void PreDraw ();  Perform GL work which must be done before each draw. ;  ; void SetupCameras (Bool_t reset);  Setup cameras for current bounding box. ;  ; void SetupClipObject () override;  allow simple guide axes labels to be scaled relative to scene units ;  ; void SetViewport (const TGLRect &vp);  ; void SetViewport (Int_t x, Int_t y, Int_t width, Int_t height);  Set viewer viewport (window area) with bottom/left at (x,y), with dimensions 'width'/'height'. ;  ; void SwapBuffers () const;  Swap GL buffers. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGLViewerBase; SceneInfoList_i FindScene (TGLSceneBase *scene);  Find scene-info corresponding to scene. ;  ; void SubRenderScenes (SubRender_foo render_foo);  Call sub-rendering function render_foo on all currently visible scenes. ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGLAutoRotator * fAutoRotator;  ; Bool_t fAxesDepthTest;  axes type ;  ; Int_t fAxesType;  smooth line edge rendering ;  ; TGLCameraOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:31160,simpl,simple,31160,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"iles ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75454,Clear,ClearFeedback,75454,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearFeedback']
Usability,"iles and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75732,Clear,ClearInputData,75732,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearInputData']
Usability,"ile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TFile, TParallelMergingFile, TDirectoryFile, TCollection, TMap, and TTree.; Definition at line 858 of file TObject.cxx. Friends And Related Symbol Documentation. ◆ ROOT::Internal::DeleteChangesMemoryImpl. bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). friend . ◆ TClonesArray. friend class TClonesArray. friend . Definition at line 240 of file TObject.h. Member Data Documentation. ◆ fBits. UInt_t TObject::fBits. private . bit field status word ; Definition at line 45 of file TObject.h. ◆ fgDtorOnly. Longptr_t TObject::fgDtorOnly = 0. staticprivate . object for which to call dtor only (i.e. no delete) ; Definition at line 47 of file TObject.h. ◆ fgObjectStat. Bool_t TObject::fgObjectStat = kTRUE. staticprivate . if true keep track of objects in TObjectTable ; Definition at line 48 of file TObject.h. ◆ fUniqueID. UInt_t TObject::fUniqueID. private . object unique identifier ; Definition at line 44 of file TObject.h. core/base/inc/TObject.h; core/base/src/TObject.cxx. TObject. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:12:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:121111,Guid,Guide,121111,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['Guid'],['Guide']
Usability,"ill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfRmaxellipse semi-axis in X outside; Float_tfRminellipse semi-axis in X inside; Double_t*fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TTUBE. ←. TCONE. TELTU. THYPE. TTUBS; ←. TCONS. TCTUB. Function documentation; TTUBE(); TUBE shape default constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect = 1); TUBE shape normal constructor. TTUBE(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz); TUBE shape ""simplified"" constructor. TTUBE(const TTUBE& ); copy constructor. TTUBE& operator=(const TTUBE& ); assignement operator. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBE(); TUBE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetNumberOfDivisions(Int_t ndiv); Set number of divisions used to draw this tube. void SetPoints(Double_t* points) const; Create TUBE points. void SetSegsAndPols(TBuffer3D& buffer) const; Set segments and polygons. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void Streamer(TBuffer& ); Stream an object of class TTUBE. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetDz() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTUBE.html:9654,simpl,simplified,9654,root/html602/TTUBE.html,https://root.cern,https://root.cern/root/html602/TTUBE.html,2,['simpl'],['simplified']
Usability,"ill be created for each element of this collection. In case a collection element is a TClonesArray, the special Tree constructor; for TClonesArray is called.; The collection itself cannot be a TClonesArray. The function returns the total number of branches created. If name is given, all branch names will be prefixed with name_. IMPORTANT NOTE1: This function should not be called with splitlevel < 1. IMPORTANT NOTE2: The branches created by this function will have names; corresponding to the collection or object names. It is important; to give names to collections to avoid misleading branch names or; identical branch names. By default collections have a name equal to; the corresponding class name, e.g. the default name for a TList is ""TList"". And in general in any cases two or more master branches contain subbranches; with identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. Example--------------------------------------------------------------:. {; TTree T(""T"",""test list"");; TList *list = new TList();. TObjArray *a1 = new TObjArray();; a1->SetName(""a1"");; list->Add(a1);; TH1F *ha1a = new TH1F(""ha1a"",""ha1"",100,0,1);; TH1F *ha1b = new TH1F(""ha1b"",""ha1"",100,0,1);; a1->Add(ha1a);; a1->Add(ha1b);; TObjArray *b1 = new TObjArray();; b1->SetName(""b1"");; list->Add(b1);; TH1F *hb1a = new TH1F(""hb1a"",""hb1"",100,0,1);; TH1F *hb1b = new TH1F(""hb1b"",""hb1"",100,0,1);; b1->Add(hb1a);; b1->Add(hb1b);. TObjArray *a2 = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:46658,simpl,simply,46658,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['simpl'],['simply']
Usability,"ill be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. Howev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:63283,feedback,feedback,63283,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['feedback'],['feedback']
Usability,"ill be no result produced; 1097by applying multiple systematic variations at the same time.; 1098For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1099""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1100 ; 1101~~~{.cpp}; 1102auto df = _df.Vary(""pt"",; 1103 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1104 {""down"", ""up""}); 1105 .Vary(""eta"",; 1106 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1107 {""eta""},; 1108 2);; 1109 ; 1110auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1111auto all_hs = VariationsFor(nom_h);; 1112all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1113~~~; 1114 ; 1115Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1116shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1117 ; 1118\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1119 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1120 programming model will be streamlined in future versions.; 1121 ; 1122\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1123 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1124 ; 1125See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1126for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1127 ; 1128\anchor rnode; 1129### RDataFrame objects as function arguments and return values; 1130RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1131functions and to return them from functions. Howev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:64963,feedback,feedback,64963,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['feedback'],['feedback']
Usability,"ill be written as a single line containing the written values of each observable in the order they were declared in the dataset and separated by whitespaces ; Definition at line 1557 of file RooDataSet.cxx. ◆ write() [2/2]. bool RooDataSet::write ; (; std::ostream & ; ofs); const. Write the contents of this dataset to the stream. ; Each event will be written as a single line containing the written values of each observable in the order they were declared in the dataset and separated by whitespaces ; Definition at line 1577 of file RooDataSet.cxx. Friends And Related Symbol Documentation. ◆ RooProdGenContext. friend class RooProdGenContext. friend . Definition at line 122 of file RooDataSet.h. Member Data Documentation. ◆ _doWeightErrorCheck. bool RooDataSet::_doWeightErrorCheck {true}. private . ! When adding events with weights, check that weights can actually be stored. ; Definition at line 139 of file RooDataSet.h. ◆ _errorMsgCount. unsigned short RooDataSet::_errorMsgCount {0}. private . ! Counter to silence error messages when filling dataset. ; Definition at line 138 of file RooDataSet.h. ◆ _sumW2Buffer. std::unique_ptr<std::vector<double> > RooDataSet::_sumW2Buffer. mutableprivate . ! Buffer for sumW2 in case a batch of values is requested. ; Definition at line 141 of file RooDataSet.h. ◆ _varsNoWgt. RooArgSet RooDataSet::_varsNoWgt. protected . Vars without weight variable. ; Definition at line 130 of file RooDataSet.h. ◆ _wgtVar. RooRealVar* RooDataSet::_wgtVar = nullptr. protected . Pointer to weight variable (if set) ; Definition at line 131 of file RooDataSet.h. Libraries for RooDataSet:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooDataSet.h; roofit/roofitcore/src/RooDataSet.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:61489,Guid,Guide,61489,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['Guid'],['Guide']
Usability,"ill return the name of the last clicked button.; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; . Definition at line 26 of file TControlBar.h. Public Types; enum  { kVertical = 1; , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:1904,simpl,simple,1904,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['simpl'],['simple']
Usability,"ill"")); 2345 volume->SetFillColor(val);; 2346 if (chatt.Contains(""seen"")); 2347 volume->SetVisibility(val);; 2348 }; 2349 if (!ivo) {; 2350 Warning(""SetVolumeAttribute"", ""volume: %s does not exist"", name);; 2351 }; 2352}; 2353 ; 2354////////////////////////////////////////////////////////////////////////////////; 2355/// Set factors that will ""bomb"" all translations in cartesian and cylindrical coordinates.; 2356 ; 2357void TGeoManager::SetBombFactors(Double_t bombx, Double_t bomby, Double_t bombz, Double_t bombr); 2358{; 2359 if (fPainter); 2360 fPainter->SetBombFactors(bombx, bomby, bombz, bombr);; 2361}; 2362 ; 2363////////////////////////////////////////////////////////////////////////////////; 2364/// Set a user-defined shape as clipping for ray tracing.; 2365 ; 2366void TGeoManager::SetClippingShape(TGeoShape *shape); 2367{; 2368 TVirtualGeoPainter *painter = GetGeomPainter();; 2369 if (shape) {; 2370 if (fClippingShape && (fClippingShape != shape)); 2371 ClearShape(fClippingShape);; 2372 fClippingShape = shape;; 2373 }; 2374 painter->SetClippingShape(shape);; 2375}; 2376 ; 2377////////////////////////////////////////////////////////////////////////////////; 2378/// set the maximum number of visible nodes.; 2379 ; 2380void TGeoManager::SetMaxVisNodes(Int_t maxnodes); 2381{; 2382 fMaxVisNodes = maxnodes;; 2383 if (maxnodes > 0 && fgVerboseLevel > 0); 2384 Info(""SetMaxVisNodes"", ""Automatic visible depth for %d visible nodes"", maxnodes);; 2385 if (!fPainter); 2386 return;; 2387 fPainter->CountVisibleNodes();; 2388 Int_t level = fPainter->GetVisLevel();; 2389 if (level != fVisLevel); 2390 fVisLevel = level;; 2391}; 2392 ; 2393////////////////////////////////////////////////////////////////////////////////; 2394/// make top volume visible on screen; 2395 ; 2396void TGeoManager::SetTopVisible(Bool_t vis); 2397{; 2398 GetGeomPainter();; 2399 fPainter->SetTopVisible(vis);; 2400}; 2401 ; 2402//////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:85042,Clear,ClearShape,85042,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearShape']
Usability,"ill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TH1(const TH1 &)=deleteTH1private; TH1()TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1protected; TH1I()TH1I; TH1I(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1I; TH1I(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1I; TH1I(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1I; TH1I(const TH1I &h1i)TH1I; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)TH1static; UpdateBinContent(Int_t bin, Double_t content) overrideTH1Iinlineprotectedvirtual; UseCurrentStyle() overrideTH1virtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteArray(TBuffer &b, const TArray *a)TArraystatic; ~TArray()TArrayinlinevirtual; ~TArrayI()TArrayIvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TH1() overrideTH1; ~TH1I() overrideTH1I; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I-members.html:24940,Guid,Guide,24940,doc/master/classTH1I-members.html,https://root.cern,https://root.cern/doc/master/classTH1I-members.html,1,['Guid'],['Guide']
Usability,"illRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::GetRandom can be used to return a random number distributed according to the contents of a histogram. Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use the Clone() function. This makes an identical copy of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:17050,usab,usable,17050,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['usab'],['usable']
Usability,"im; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfAllowDirectiveswhether directives are to be interpreted; Bool_tfCheckForMethodwhether to check the current line for a method; TStringfClassDescrTagtag for finding the class description; enum(anonymous)fClassDocStatewhether we found the class description; TStringfCommentcurrent comment; Bool_tfCommentAtBOLat the beginning of the current line, fParseContext contained kComment; TClass*fCurrentClasscurrent class context of sources being parsed; TStringfCurrentFilecurrent source / header file name; TStringfCurrentMethodTagname_idx of the currently parsed method; TStringfCurrentModulecurrent module context of sources being parsed; TListfDataMembers[6]data members (by access, plus enums); Int_tfDirectiveCountindex of directive for current method; TListfDirectiveHandlershandler for doc directives (TDocDirective objects); TDocParser::EDocContextfDocContextcurrent context of parsed sources for documenting; TDocOutput*fDocOutputTDocOutput invoking us; set<UInt_t>fExtraLinesWithAnchorlines that need an additional anchor; TStringfFirstClassDocfirst class-doc found - per file, taken if fLastClassDoc is empty; THtml*fHtmlTHtml object using us; TStringfLastClassDoclast class-doc found - becomes class doc at ClassImp or first method; TStringfLineCommentcurrent line with links and directives for doc; UInt_tfLineNocurrent line number; Long_tfLineNumbersource line number; TStringfLineRawcurrent line; TStringfLineSourcecurrent line with links; TStringfLineStrippedcurrent line without surrounding spaces; map<string,Int_t>fMethodCountsnumber of undocumented overloads; THashListfMethods[3]methods as TMethodWrapper objects (by access); list<UInt_t>fParseContextcurrent context of parsed sources; TClass*fRecentClassrecently seen class context of sources being parsed, e.g. for Convert(); TStringfSourceInfo[5]author, last changed, ...; TStringfSourceInfoTags[5]tags for source inf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocParser.html:11158,undo,undocumented,11158,root/html602/TDocParser.html,https://root.cern,https://root.cern/root/html602/TDocParser.html,2,['undo'],['undocumented']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<double>(); virtual TMatrixTBase<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<double>&Apply(const TElementActionT<double>& action); virtual TMatrixTBase<double>&Apply(const TElementPosActionT<double>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTBase_double_.html:6950,simpl,simple,6950,root/html602/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTBase_double_.html,2,['simpl'],['simple']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<float>(); virtual TMatrixTBase<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<float>&Apply(const TElementActionT<float>& action); virtual TMatrixTBase<float>&Apply(const TElementPosActionT<float>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTBase_float_.html:6947,simpl,simple,6947,root/html602/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixTBase_float_.html,2,['simpl'],['simple']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. This class is also known as (typedefs to this class)TMatrixDBase, TMatrixTBase<Double_t>. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<double>(); virtual TMatrixTBase<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<double>&Apply(const TElementActionT<double>& action); virtual TMatrixTBase<double>&Apply(const TElementPosActio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_double_.html:6950,simpl,simple,6950,root/html528/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_double_.html,3,['simpl'],['simple']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. This class is also known as (typedefs to this class)TMatrixFBase, TMatrixTBase<Float_t>. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<float>(); virtual TMatrixTBase<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<float>&Apply(const TElementActionT<float>& action); virtual TMatrixTBase<float>&Apply(const TElementPosActionT<flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_float_.html:6947,simpl,simple,6947,root/html528/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_float_.html,2,['simpl'],['simple']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. This class is also known as (typedefs to this class)TMatrixTBase<Double_t>, TMatrixDBase. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<double>(); virtual TMatrixTBase<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<double>&Apply(const TElementActionT<double>& action); virtual TMatrixTBase<double>&Apply(const TElementPosActio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixTBase_double_.html:6950,simpl,simple,6950,root/html532/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html532/TMatrixTBase_double_.html,1,['simpl'],['simple']
Usability,"imal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. This class is also known as (typedefs to this class)TMatrixTBase<Float_t>, TMatrixFBase. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<float>(); virtual TMatrixTBase<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<float>&Apply(const TElementActionT<float>& action); virtual TMatrixTBase<float>&Apply(const TElementPosActionT<flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixTBase_float_.html:6947,simpl,simple,6947,root/html530/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html530/TMatrixTBase_float_.html,2,['simpl'],['simple']
Usability,"imate(tree->GetEntries()+1); // same as tree->SetEstimate(-1);; You must call SetEstimate if the expected number of selected rows; you need to look at is greater than 1000000. You can use the option ""goff"" to turn off the graphics output; of TTree::Draw in the above example. Automatic interface to TTree::Draw via the TTreeViewer. A complete graphical interface to this function is implemented; in the class TTreeViewer.; To start the TTreeViewer, three possibilities:; - select TTree context menu item ""StartViewer""; - type the command ""TTreeViewer TV(treeName)""; - execute statement ""tree->StartViewer();"". void DropBaskets(); Remove some baskets from memory. void DropBuffers(Int_t nbytes); Drop branch buffers to accommodate nbytes below MaxVirtualsize. Int_t Fill(); Fill all branches. This function loops on all the branches of this tree. For; each branch, it copies to the branch buffer (basket) the current; values of the leaves data types. If a leaf is a simple data type,; a simple conversion to a machine independent format has to be done. This machine independent version of the data is copied into a; basket (each branch has its own basket). When a basket is full; (32k worth of data by default), it is then optionally compressed; and written to disk (this operation is also called committing or; 'flushing' the basket). The committed baskets are then; immediately removed from memory. The function returns the number of bytes committed to the; individual branches. If a write error occurs, the number of bytes returned is -1. If no data are written, because, e.g., the branch is disabled,; the number of bytes returned is 0. The baskets are flushed and the Tree header saved at regular intervals. At regular intervals, when the amount of data written so far is; greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; This makes future reading faster as it guarantees that baskets belonging to nearby; entries will be on the same disk region.; When the first c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:89926,simpl,simple,89926,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['simpl'],['simple']
Usability,"ime Date and time 950130 124559; TDecayChannel Class describing a particle decay channel; TDecompBK Matrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictionary ABC defining interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBoxSet Collection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds); each primitive can be assigned a signal value and a TRef.; TEveBoxSetGL GL-renderer for TEveBoxSet class.; TEveBrowser Specialization of TRootBrowser for Eve.; TEveCalo2D Class for visualization of projected calorimeter event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:54492,feedback,feedback,54492,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['feedback'],['feedback']
Usability,"ime the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear()ed during the job several times. Deleting a TClonesArray is a double waste. Not only you do not avoid memory fragmentation, but you worsen it because the TClonesArray itself is a rather heavy structure, and there is quite some code in the destructor, so you have more memory fragmentation and slower code. NOTE 2; When investigating misuse of TClonesArray, please make sure of the following:. Use Clear() or Clear(""C"") instead of Delete(). This will improve program execution time.; TClonesArray object classes containing pointers allocate memory. To avoid causing memory leaks, special Clear(""C"") must be used for clearing TClonesArray. When option ""C"" is specified, ROOT automatically executes the Clear() method (by default it is empty contained in TObject). This method must be overridden in the relevant TClonesArray object class, implementing the reset procedure for pointer objects.; If the objects are added using the placement new then the Clear must deallocate the memory.; If the objects are added using TClonesArray::ConstructedAt then the heap-based memory can stay allocated and reused as the constructor is not called for already constructed/added object.; To reduce memory fragmentation, please make sure that the TClonesArrays are not destroyed and created on every event. They must only be constructed/destructed at the beginning/end of the run. . Definition at line 29 of file TClonesArray.h. Public Types; enum  EStatusBits { kBypassStreamer = (1ULL << ( 12 )); , kForgetBits = (1ULL << ( 15 )); };  Saved copies of pointers to objects. More...;  ;  Public Types inherited from TObjArray; typedef TObjArrayIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:4315,Clear,Clear,4315,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"ime9[21],vars_time9[22],vars_time9[23],vars_time9[24],vars_time9[25],vars_time9[26],vars_time9[27],vars_time9[28],vars_time9[29],; prepared DATA LOADER ; Factory : Booking method: ␛[1mTMVA_LSTM␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""10|30"" [The Layout of the input]; : Layout: ""LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:6086,Learn,LearningRate,6086,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"imental::RCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RCanvas Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; A window's topmost RPad. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2015-07-08 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 47 of file RCanvas.hxx. Public Member Functions;  RCanvas ();  Create a temporary RCanvas; for long-lived ones please use Create(). ;  ;  ~RCanvas () override=default;  ; template<class PANEL > ; bool AddPanel (std::shared_ptr< PANEL > &panel);  Insert panel into the canvas, canvas should be shown at this moment. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; void ClearShown ();  clear IsShown() flag ;  ; void ClearUpdated ();  clear IsUpdated() flag ;  ; std::string CreateJSON ();  Provide JSON which can be used for offline display. ;  ; const RCanvas * GetCanvas () const override;  Access to the top-most canvas, if any (const version). ;  ; RCanvas * GetCanvas () override;  Access to the top-most canvas, if any (non-const version). ;  ; int GetHeight () const;  Get canvas height. ;  ; uint64_t GetModified () const;  Get modify counter. ;  ; const std::string & GetTitle () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas display",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:968,Clear,ClearOnClose,968,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,2,"['Clear', 'clear']","['ClearOnClose', 'cleared']"
Usability,imer. protected . Definition at line 94 of file TProofPlayer.h. ◆ fProgressStatus. TProofProgressStatus* TProofPlayer::fProgressStatus. protected . Definition at line 77 of file TProofPlayer.h. ◆ fQuery. TQueryResult* TProofPlayer::fQuery. protected . Definition at line 84 of file TProofPlayer.h. ◆ fQueryResults. TList* TProofPlayer::fQueryResults. protected . Events processed in this run. ; Definition at line 83 of file TProofPlayer.h. ◆ fReadBytesRun. Long64_t TProofPlayer::fReadBytesRun. protected . Definition at line 79 of file TProofPlayer.h. ◆ fReadCallsRun. Long64_t TProofPlayer::fReadCallsRun. protected . Bytes read in this run. ; Definition at line 80 of file TProofPlayer.h. ◆ fSaveMemThreshold. Long_t TProofPlayer::fSaveMemThreshold. protected . Definition at line 99 of file TProofPlayer.h. ◆ fSavePartialResults. Bool_t TProofPlayer::fSavePartialResults. protected . Definition at line 100 of file TProofPlayer.h. ◆ fSaveResultsPerPacket. Bool_t TProofPlayer::fSaveResultsPerPacket. protected . Definition at line 101 of file TProofPlayer.h. ◆ fSelector. TSelector* TProofPlayer::fSelector. protected . Definition at line 68 of file TProofPlayer.h. ◆ fSelectorClass. TClass* TProofPlayer::fSelectorClass. protected . kTRUE when fSelector has been created locally ; Definition at line 70 of file TProofPlayer.h. ◆ fSelStatus. TStatus* TProofPlayer::fSelStatus. protected . iterator on events or objects ; Definition at line 74 of file TProofPlayer.h. ◆ fStopTimer. TTimer* TProofPlayer::fStopTimer. protected . Definition at line 89 of file TProofPlayer.h. ◆ fStopTimerMtx. std::mutex TProofPlayer::fStopTimerMtx. protected . Definition at line 90 of file TProofPlayer.h. ◆ fTotalEvents. Long64_t TProofPlayer::fTotalEvents. protected . Definition at line 76 of file TProofPlayer.h. proof/proofplayer/inc/TProofPlayer.h; proof/proofplayer/src/TProofPlayer.cxx. TProofPlayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:16 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:48510,Guid,Guide,48510,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['Guid'],['Guide']
Usability,"imin=0, Double_t phimax=360)Make in one step a volume pointing to a sphere shape with given medium.Definition TGeoManager.cxx:3186; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; AuthorDong Ryeol Lee (leedr.nosp@m.2580.nosp@m.@hanm.nosp@m.ail..nosp@m.net), Dept. of Physics, Univ. of Seoul ; Definition in file station2.C. tutorialsgeomstation2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/station2_8C.html:38177,Guid,Guide,38177,doc/master/station2_8C.html,https://root.cern,https://root.cern/doc/master/station2_8C.html,1,['Guid'],['Guide']
Usability,"imize \(\chi^2 = g^2(\vec\theta)\) where g is arbitrary function.; Approximate value is:; \[; {\frac{\partial^2\chi^2}{\partial\theta_i\partial\theta_k}}\approx Z_{ik}=; \sum^n_{j=1}{\frac{1}{\sigma^2_j}}{\frac{\partial f_j}{\theta_i}}; {\frac{\partial f_j}{\theta_k}}; \]; Then the equations for parameter increments are:; \[; \left(\frac{\partial\chi^2}{\partial\theta_i}\right)_; {\vec\theta={\vec\theta}^0} +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) =; 0, \qquad i=1\ldots m; \]; Remarkable feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form:; \[ \theta_i^{min}\le\theta_i\le\theta^{max}_i\]; They form parallelepiped \(P\) (\(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument.; 5.12 Neural Networks; 5.12.1 Introduction; Neural Networks are used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are image analysis, financial movements’ predictions and analysis, or sales forecast and product shipping optimization. In particles physics neural networks are mainly used for classification tasks (signal over background discrimination). A vast majority of commonly used neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package, which remains one of the fastest tools for neural networks studies.; 5.12.2 The MLP; The multilayer perceptron is a simple feed-forward network with the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:229992,simpl,simple,229992,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,imizer.; Definition at line 54 of file TLinearMinimizer.h. ◆ Streamer(). virtual void TLinearMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TLinearMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 126 of file TLinearMinimizer.h. ◆ X(). const double * TLinearMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 69 of file TLinearMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TLinearMinimizer::fCovar. private . Definition at line 121 of file TLinearMinimizer.h. ◆ fDim. unsigned int TLinearMinimizer::fDim. private . Definition at line 116 of file TLinearMinimizer.h. ◆ fErrors. std::vector<double> TLinearMinimizer::fErrors. private . Definition at line 120 of file TLinearMinimizer.h. ◆ fFitter. TLinearFitter* TLinearMinimizer::fFitter. private . Definition at line 124 of file TLinearMinimizer.h. ◆ fMinVal. double TLinearMinimizer::fMinVal. private . Definition at line 118 of file TLinearMinimizer.h. ◆ fNFree. unsigned int TLinearMinimizer::fNFree. private . Definition at line 117 of file TLinearMinimizer.h. ◆ fObjFunc. const ROOT::Math::IMultiGradFunction* TLinearMinimizer::fObjFunc. private . Definition at line 123 of file TLinearMinimizer.h. ◆ fParams. std::vector<double> TLinearMinimizer::fParams. private . Definition at line 119 of file TLinearMinimizer.h. ◆ fRobust. bool TLinearMinimizer::fRobust. private . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; Definition at line 115 of file TLinearMinimizer.h. Libraries for TLinearMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/minuit/inc/TLinearMinimizer.h; math/minuit/src/TLinearMinimizer.cxx. TLinearMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:18204,Guid,Guide,18204,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,1,['Guid'],['Guide']
Usability,"imizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 134.849, estimated distance to minimum: 2.11658e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 5.0000e-01 6.4987e-01 +/- 1.21e-01 <none>; m 0.0000e+00 7.1824e-01 +/- 4.97e-01 <none>; s 2.0000e+00 2.1880e+00 +/- 4.61e-01 <none>; ; ; RooFitResult: minimized FCN value: 133.901, estimated distance to minimum: 5.96672e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 6.4987e-01 7.3784e-01 +/- 7.53e-02 <none>; m 7.1824e-01 6.6350e-01 +/- 5.04e-01 <none>; s 2.1880e+00 2.3885e+00 +/- 4.95e-01 <none>; ; ; RooFitResult: minimized FCN value: 137.195, estimated distance to minimum: 0.000153955; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 7.3784e-01 3.6215e-01 +/- 8.17e-02 <none>; m 6.6350e-01 7.0071e-01 +/- 5.88e-01 <none>; s 2.3885e+00 1.6987e+00 +/- 4.78e-01 <none>; ; fit result without constraint (data generated at f=0.5); fit result with internal constraint (data generated at f=0.5, is f=0.8+/-0.2); fit result with (another) external constraint (data generated at f=0.5, is f=0.2+/-0.1); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf604_constraints.py. tutorialsroofitrf604_constraints.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf604__constraints_8py.html:6197,Guid,Guide,6197,doc/master/rf604__constraints_8py.html,https://root.cern,https://root.cern/doc/master/rf604__constraints_8py.html,1,['Guid'],['Guide']
Usability,"imp = 0, Option_t* opt = """"); TBrowser(const char* name, TObject* obj, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); TBrowser(const char* name, void* obj, TClass* cl, const char* objname, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); TBrowser(const char* name, void* obj, TClass* cl, const char* objname, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual~TBrowser(); voidTObject::AbstractMethod(const char* method) const; voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); voidAdd(void* obj, TClass* cl, const char* name = 0, Int_t check = -1); voidAddCheckBox(TObject* obj, Bool_t check = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBrowseObject(TObject* obj); voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(TObject* obj = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = 1, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); voidExecuteDefaultAction(TObject* obj); virtual voidTObject::ExecuteEvent(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowser.html:2435,Clear,Clear,2435,root/html526/TBrowser.html,https://root.cern,https://root.cern/root/html526/TBrowser.html,5,['Clear'],['Clear']
Usability,"impleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:14327,Simpl,SimpleInterval,14327,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"impleInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimpleInterval() [1/3]. SimpleInterval::SimpleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:14086,Simpl,SimpleInterval,14086,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"implemented by derived classes ;  . Private Attributes; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::Functor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Functor1D() [1/3]. ROOT::Math::Functor1D::Functor1D ; (; ). default . Default constructor. . ◆ Functor1D() [2/3]. ROOT::Math::Functor1D::Functor1D ; (; std::function< double(double)> const & ; f). inline . Construct from a callable object with the right signature implementing double operator() (double x). ; Definition at line 104 of file Functor.h. ◆ Functor1D() [3/3]. template<class PtrObj , typename MemFn > . ROOT::Math::Functor1D::Functor1D ; (; const PtrObj & ; p, . MemFn ; memFn . ). inline . Definition at line 108 of file Functor.h. Member Function Documentation. ◆ Clone(). Functor1D * ROOT::Math::Functor1D::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class will implement their version of the private DoClone method. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 111 of file Functor.h. ◆ DoEval(). double ROOT::Math::Functor1D::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . implementation of the evaluation function. Must be implemented by derived classes ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 115 of file Functor.h. Member Data Documentation. ◆ fFunc. std::function<double(double)> ROOT::Math::Functor1D::fFunc. private . Definition at line 119 of file Functor.h. Libraries for ROOT::Math::Functor1D:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/Functor.h. ROOTMathFunctor1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html:3553,Guid,Guide,3553,doc/master/classROOT_1_1Math_1_1Functor1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor1D.html,1,['Guid'],['Guide']
Usability,"implemented from RooAbsReal.; Definition at line 108 of file RooCBShape.cxx. ◆ IsA(). TClass * RooCBShape::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 62 of file RooCBShape.h. ◆ maxVal(). double RooCBShape::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Definition at line 120 of file RooCBShape.cxx. ◆ Streamer(). void RooCBShape::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooCBShape::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooCBShape.h. ◆ translate(). void RooCBShape::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 67 of file RooCBShape.cxx. Member Data Documentation. ◆ alpha. RooRealProxy RooCBShape::alpha. protected . Definition at line 52 of file RooCBShape.h. ◆ m. RooRealProxy RooCBShape::m. protected . Definition at line 49 of file RooCBShape.h. ◆ m0. RooRealProxy RooCBShape::m0. protected . Definition at line 50 of file RooCBShape.h. ◆ n. RooRealProxy RooCBShape::n. protected . Definition at line 53 of file RooCBShape.h. ◆ sigma. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:78418,simpl,simple,78418,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['simpl'],['simple']
Usability,"implemented from TVirtualMonitoringWriter.; Definition at line 54 of file RTreeViewer.cxx. ◆ SendInfoUser(). bool ROOT::RTreeDrawMonitoring::SendInfoUser ; (; const char * ; = nullptr). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 55 of file RTreeViewer.cxx. ◆ SendParameters(). bool ROOT::RTreeDrawMonitoring::SendParameters ; (; TList * ; , . const char * ; = nullptr . ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 53 of file RTreeViewer.cxx. ◆ SendProcessingProgress(). bool ROOT::RTreeDrawMonitoring::SendProcessingProgress ; (; Double_t ; nevent, . Double_t ; , . bool ; = false . ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 66 of file RTreeViewer.cxx. ◆ SendProcessingStatus(). bool ROOT::RTreeDrawMonitoring::SendProcessingStatus ; (; const char * ; , . bool ; = false . ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 65 of file RTreeViewer.cxx. ◆ SetLogLevel(). void ROOT::RTreeDrawMonitoring::SetLogLevel ; (; const char * ; = ""WARNING""). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 81 of file RTreeViewer.cxx. ◆ Verbose(). void ROOT::RTreeDrawMonitoring::Verbose ; (; bool ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 82 of file RTreeViewer.cxx. Member Data Documentation. ◆ fLastProgressSendTm. long long ROOT::RTreeDrawMonitoring::fLastProgressSendTm {0}. private . Definition at line 39 of file RTreeViewer.cxx. ◆ fPeriod. Int_t ROOT::RTreeDrawMonitoring::fPeriod {100}. private . Definition at line 38 of file RTreeViewer.cxx. ◆ fViewer. RTreeViewer& ROOT::RTreeDrawMonitoring::fViewer. private . Definition at line 40 of file RTreeViewer.cxx. tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeDrawMonitoring. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:16319,Guid,Guide,16319,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,1,['Guid'],['Guide']
Usability,"imum = theGraph->GetHistogram()->GetYaxis()->GetXmin();; 1349 theGraph->GetHistogram()->SetMinimum(minimum);; 1350 }; 1351 if (maximum == -1111) {; 1352 maximum = theGraph->GetHistogram()->GetYaxis()->GetXmax();; 1353 theGraph->GetHistogram()->SetMaximum(maximum);; 1354 }; 1355 uxmin = gPad->PadtoX(rwxmin);; 1356 uxmax = gPad->PadtoX(rwxmax);; 1357 } else {; 1358 ; 1359 theGraph->ComputeRange(rwxmin, rwymin, rwxmax, rwymax); //this is redefined in TGraphErrors; 1360 ; 1361 if (rwxmin == rwxmax) rwxmax += 1.;; 1362 if (rwymin == rwymax) rwymax += 1.;; 1363 dx = 0.1*(rwxmax-rwxmin);; 1364 dy = 0.1*(rwymax-rwymin);; 1365 uxmin = rwxmin - dx;; 1366 uxmax = rwxmax + dx;; 1367 minimum = rwymin - dy;; 1368 maximum = rwymax + dy;; 1369 }; 1370 if (theGraph->GetMinimum() != -1111) rwymin = minimum = theGraph->GetMinimum();; 1371 if (theGraph->GetMaximum() != -1111) rwymax = maximum = theGraph->GetMaximum();; 1372 if (uxmin < 0 && rwxmin >= 0) uxmin = 0.9*rwxmin;; 1373 if (uxmax > 0 && rwxmax <= 0) {; 1374 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1375 else uxmax = 0;; 1376 }; 1377 if (minimum < 0 && rwymin >= 0) minimum = 0.9*rwymin;; 1378 if (maximum > 0 && rwymax <= 0) {; 1379 //if(gPad->GetLogy()) maximum = 1.1*rwymax;; 1380 //else maximum = 0;; 1381 }; 1382 if (minimum <= 0 && gPad->GetLogy()) minimum = 0.001*maximum;; 1383 if (uxmin <= 0 && gPad->GetLogx()) {; 1384 if (uxmax > 1000) uxmin = 1;; 1385 else uxmin = 0.001*uxmax;; 1386 }; 1387 rwymin = minimum;; 1388 rwymax = maximum;; 1389 ; 1390 // Create a temporary histogram and fill each bin with the; 1391 // function value.; 1392 char chopth[8] = "" "";; 1393 if (strstr(chopt,""x+"")) strncat(chopth, ""x+"",3);; 1394 if (strstr(chopt,""y+"")) strncat(chopth, ""y+"",3);; 1395 if (optionIAxis) strncat(chopth, ""A"",2);; 1396 if (!theGraph->GetHistogram()) {; 1397 // the graph is created with at least as many bins as there are; 1398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:50703,ux,uxmax,50703,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],['uxmax']
Usability,"imum value for the counter so far ;  ; std::deque< Short_t > fSuccessList;  to calculate the improvement-speed ;  . #include <TMVA/ConvergenceTest.h>. Inheritance diagram for TMVA::ConvergenceTest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ConvergenceTest(). TMVA::ConvergenceTest::ConvergenceTest ; (; ). constructor ; Definition at line 40 of file ConvergenceTest.cxx. ◆ ~ConvergenceTest(). TMVA::ConvergenceTest::~ConvergenceTest ; (; ). destructor ; Definition at line 55 of file ConvergenceTest.cxx. Member Function Documentation. ◆ GetCurrentValue(). Float_t TMVA::ConvergenceTest::GetCurrentValue ; (; ). inline . Definition at line 57 of file ConvergenceTest.h. ◆ HasConverged(). Bool_t TMVA::ConvergenceTest::HasConverged ; (; Bool_t ; withinConvergenceBand = kFALSE). gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ; this gives a simple measure of if the estimator of the MLP is converging and no major improvement is to be expected. ; Definition at line 66 of file ConvergenceTest.cxx. ◆ Progress(). Float_t TMVA::ConvergenceTest::Progress ; (; ). returns a float from 0 (just started) to 1 (finished) ; Definition at line 91 of file ConvergenceTest.cxx. ◆ ResetConvergenceCounter(). void TMVA::ConvergenceTest::ResetConvergenceCounter ; (; ). inline . Definition at line 58 of file ConvergenceTest.h. ◆ SetConvergenceParameters(). void TMVA::ConvergenceTest::SetConvergenceParameters ; (; Int_t ; steps, . Double_t ; improvement . ). inline . Definition at line 54 of file ConvergenceTest.h. ◆ SetCurrentValue(). void TMVA::ConvergenceTest::SetCurrentValue ; (; Float_t ; value). inline . Definition at line 56 of file ConvergenceTest.h. ◆ SpeedControl(). Float_t TMVA::ConvergenceTest::SpeedControl ; (; UInt_t ; ofSteps). this function provides the ability to change the learning rate according to the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html:2553,simpl,simple,2553,doc/master/classTMVA_1_1ConvergenceTest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html,1,['simpl'],['simple']
Usability,"in Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:7930,simpl,simple,7930,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability,"in a Selector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelector derived clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:1017,Guid,Guides,1017,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['Guid'],['Guides']
Usability,"in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ;  ; Int_t DownloadPackage (const char *par, const char *dstdir=0);  Download a PROOF archive (PAR file) from the master package repository. ;  ; Long64_t DrawSelect (const char *dsetname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Execute the specified drawing action on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7980,feedback,feedback,7980,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['feedback'],['feedback']
Usability,"in history stack; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; UInt_tfLimitmaximum number of commands can be located in stack; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TList*fLogBooklisting of all actions during execution; Bool_tfLoggingkTRUE if logging is ON; Int_tTQCommand::fNRargsnumber of redo arguments; Int_tTQCommand::fNUargsnumber of undo arguments; TStringTQCommand::fNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tTQCommand::fNewDeletekTRUE if Redo/Undo methods are new/delete; void*TQCommand::fObjectobject to which undo/redo actions applied; TQConnection*TQCommand::fRedodo/redo action; Long_t*TQCommand::fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQCommand::fStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:17658,Undo,Undo,17658,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,16,"['Undo', 'undo']","['Undo', 'undo', 'undoing']"
Usability,"in particular get the type). ;  ; void SetQuickLoad (bool quick);  ; virtual void SetTree (TTree *tree);  ; void Streamer (TBuffer &) override;  Stream an object of class TTreeFormula. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves ();  This function is called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from ROOT::v5::TFormula;  TFormula ();  Formula default constructor. ;  ;  TFormula (const char *name, const char *formula);  Normal Formula constructor. ;  ;  TFormula (const TFormula &formula);  Default constructor. ;  ;  ~TFormula () override;  Formula default destructor. ;  ; virtual void Analyze (const char *schain, Int_t &err, Int_t offset=0);  Analyze a sub-expression in one formula. ;  ; virtual Bool_t AnalyzeFunction (TString &chaine, Int_t &err, Int_t offset=0);  Check if the chain as function call. ;  ; void Clear (Option_t *option="""") override;  Resets the objects. ;  ; virtual Int_t Compile (const char *expression="""");  Compile expression already stored in fTitle. ;  ; void Copy (TObject &formula) const override;  Copy this formula. ;  ; virtual char * DefinedString (Int_t code);  Return address of string corresponding to special code. ;  ; virtual Double_t DefinedValue (Int_t code);  Return value corresponding to special code. ;  ; virtual Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  Evaluate this formula. ;  ; virtual Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr);  ; virtual Double_t EvalParOld (const Double_t *x, const Double_t *params=nullptr);  Evaluate this formula. ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  Reconstruct the formula expression from the internal TFormula member variables. ;  ; virtual const TObject * GetLinearPart (Int_t i);  Return linear part. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:5600,Clear,Clear,5600,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Clear'],['Clear']
Usability,"in terms of a list of RooAbsReal coefficients.Definition RooPolyVar.h:25; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; RooFit::YVarRooCmdArg YVar(const RooAbsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:846; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf305_condcorrprodDefinition rf305_condcorrprod.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y); [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on y integrates over variables (x); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf305_condcorrprod.C. tutorialsroofitrf305_condcorrprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf305__condcorrprod_8C.html:5857,Guid,Guide,5857,doc/master/rf305__condcorrprod_8C.html,https://root.cern,https://root.cern/doc/master/rf305__condcorrprod_8C.html,1,['Guid'],['Guide']
Usability,"in the corresponding popup menu. It should also have a defined character as its unique access key. The second parameter is the popup menu we would like to add. The third one is an object of TGLayoutHints type that defines how the menu title will be laid out in the menu bar. In our example the File and Test menus will be laid out to the left of the menu bar with 4 pixels distance in between, the Help menu - will be laid out to the right.; The menu classes provide a very flexible menu system: you can enable, disable, add or remove menu items dynamically. The method HideEntry(menuID) hides the menu entry (the entry will not be shown in the popup menu). To enable a hidden entry you should call EnableEntry(menuID) method. By default all entries are enabled. The method DisableEntry(menuID) helps you to disable a menu entry - it will appear in sunken relieve. The DeleteEntry(menuID) method will delete the specified entry from the menu.; A few words about the menu design. A menu should be kept consistent and simple. All related items need to be in a popup menu. The cascade menus should be used judiciously. Try to limit them to one, maximum two levels.; There are some rules for naming the menu objects:. Define unique names within a menu; Use capitalized one-word names allowing the quick scan of the menu; Define unique access key for any menu item; Indicate by ellipsis (…) after the title with no space when a menu item will pop-up a dialog box. The proper kind of graphical menus is a critical point to every application success and depends of three main factors:. number of presented items in the menu; how often the menu is used; how often the menu contents may change. 25.8.5 Toolbar. A toolbar (TGToolBar) is a composite frame that contains TGPictureButtonobjects. It provides an easy and fast access to most frequently used commands or options across multiple application screens. Also, it invokes easily a sub application within an application. All its functions can be obtained by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1194105,simpl,simple,1194105,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"in the same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw(). {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }. Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture. {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanvas(""c1"");; TPostScript *ps = new TPostScript(""file.ps"",112);; c1->Divide(2,1);; // picture 1; ps->NewPage();; c1->cd(1);; hpx->Draw();; c1->cd(2);; hprof->Draw();; c1->Update();; // picture 2; ps->NewPage();; c1->cd(1);; hpxpy->Draw();; c1->cd(2);; ntuple->Draw(""px"");; c1->Update();; ps->Close();; // invoke Postscript viewer; gSystem->Exec(""gs file.ps"");; }. Making several pictures in the same Postscript file: case 3; This is the recommended way. If the Postscript file name finishes with; ""("", the file remains opened (it is not closed). If the Postscript file name; finishes with "")"" and the file has been opened with ""("", the file is closed.; Example:. {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); // write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); // canvas is added t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPostScript.html:4483,clear,clear,4483,root/html528/TPostScript.html,https://root.cern,https://root.cern/root/html528/TPostScript.html,6,['clear'],['clear']
Usability,"in this object, making it look like this object computed that value. ;  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:20722,Clear,Clear,20722,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,1,['Clear'],['Clear']
Usability,"in(0.15); hh_data.GetZaxis().SetTitleOffset(1.4); hh_data.Draw(""box""); c1.cd(4); ROOT.gPad.SetLeftMargin(0.15); hh_pdf.GetZaxis().SetTitleOffset(2.5); hh_pdf.Draw(""cont3""); c1.SaveAs(""rf309_2dimplot.png""); ; c2 = ROOT.TCanvas(""rf309_3dimplot"", ""rf309_3dimplot"", 800, 400); c2.Divide(2); c2.cd(1); ROOT.gPad.SetLeftMargin(0.15); hh_data3.GetZaxis().SetTitleOffset(1.4); hh_data3.Draw(""lego""); c2.cd(2); ROOT.gPad.SetLeftMargin(0.15); hh_pdf3.GetZaxis().SetTitleOffset(1.4); hh_pdf3.Draw(""iso""); c2.SaveAs(""rf309_3dimplot.png""); [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf309_ndimplot.py. tutorialsroofitrf309_ndimplot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf309__ndimplot_8py.html:4722,Guid,Guide,4722,doc/master/rf309__ndimplot_8py.html,https://root.cern,https://root.cern/doc/master/rf309__ndimplot_8py.html,1,['Guid'],['Guide']
Usability,"in(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Add a new bin to the histogram. The bin shape is a rectangle.; It returns the bin number of the bin in the histogram. Bool_t Add(const TH1* h1, Double_t c1); Performs the operation: this = this + c1*h1. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. Bool_t Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); Replace contents of this histogram by the addition of h1 and h2. void AddBinToPartition(TH2PolyBin* bin); Adds the input bin into the partition cell matrix. This method is called; in AddBin() and ChangePartition(). void ChangePartition(Int_t n, Int_t m); Changes the number of partition cells in the histogram.; Deletes the old partition and constructs a new one. TObject* Clone(const char* newname = """") const; Make a complete copy of the underlying object. If 'newname' is set,; the copy's name will be set to that name. void ClearBinContents(); Clears the contents of all bins in the histogram. void Reset(Option_t* option); Reset this histogram: contents, errors, etc. Int_t FindBin(Double_t x, Double_t y, Double_t z = 0); Returns the bin number of the bin at the given coordinate. -1 to -9 are; the overflow and underflow bins. overflow bin -5 is the unbinned areas in; the histogram (also called ""the sea""). The third parameter can be left; blank.; The overflow/underflow bins are:. -1 | -2 | -3. -4 | -5 | -6. -7 | -8 | -9. where -5 means is the ""sea"" bin (i.e. unbinned areas). Int_t Fill(Double_t x, Double_t y); Increment the bin containing (x,y) by 1.; Uses the partitioning algorithm. Int_t Fill(Double_t x, Double_t y, Double_t w); Increment the bin containing (x,y) by w.; Uses the partitioning algorithm. Int_t Fill(const char* name, Double_t w); Increment the bin named ""name"" by w. void FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); Fills a 2-D histogram with an array of values and weights. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Poly.html:35781,Clear,ClearBinContents,35781,root/html602/TH2Poly.html,https://root.cern,https://root.cern/root/html602/TH2Poly.html,4,['Clear'],"['ClearBinContents', 'Clears']"
Usability,"in) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to differen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51846,simpl,simple,51846,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"in) in multi-thread runs.; 943 ; 944\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 945a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 946~~~{.cpp}; 947ROOT::EnableImplicitMT(i); 948~~~; 949replacing `i` with the number of CPUs/slots that were allocated for this job.; 950 ; 951### Thread-safety of user-defined expressions; 952RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 953User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 954will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 955 ; 956Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 957expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 958which eliminates all risks of race conditions.; 959 ; 960In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 961offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 962will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 963concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 964where `slot` will be a number between 0 and `GetNSlots() - 1`.; 965In other words, within a slot, computation runs sequentially and events are processed sequentially.; 966Note that the same slot might be associated to differen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:53486,simpl,simple,53486,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"in,Xmax,""X"");; Create a new volume by dividing an existing one (GEANT3 like).; Divides MOTHER into NDIV divisions called NAME along axis IAXIS starting at coordinate value START and having size STEP. The created volumes will have tracking media ID=NUMED (if NUMED=0 -> same media as MOTHER).; The behavior of the division operation can be triggered using OPTION (case insensitive):. Ndivide all range in NDIV cells (same effect as STEP<=0) (GSDVN in G3); NXdivide range starting with START in NDIV cells (GSDVN2 in G3); Sdivide all range with given STEP; NDIV is computed and divisions will be centered in full range (same effect as NDIV<=0) (GSDVS, GSDVT in G3); SXsame as DVS, but from START position (GSDVS2, GSDVT2 in G3). 18.4.2.10 Volume Assemblies; In general, geometry contains structures of positioned volumes that have to be grouped and handled together, for different possible reasons. One of these is that the structure has to be replicated in several parts of the geometry, or it may simply happen that they really represent a single object, too complex to be described by a primitive shape.; Usually handling structures like these can be easily done by positioning all components in the same container volume, then positioning the container itself. However, there are many practical cases when defining such a container is not straightforward or even possible without generating overlaps with the rest of the geometry. There are few ways out of this:. Defining the container for the structure as “overlapping” (see also "" Overlapping Volumes ""); Representing the container as a composite shape - the Boolean union of all components (see also "" Composite Shapes ""); Using an assembly volume - this will be described in the following. The first two approaches have the disadvantage of penalizing the navigation performance with a factor increasing more than linear of the number of components in the structure. The best solution is the third one because it uses all volume-related navigat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:958226,simpl,simply,958226,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"in32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TLine.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TTree.h; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TClonesArray::BypassStreamervoid BypassStreamer(Bool_t bypass=kTRUE)When the kBypassStreamer bit is set, the automatically generated Streamer can call directly TClass::W...Definition TClonesArray.cxx:321; TClonesArray::Clearvoid Clear(Option_t *option="""") overrideClear the clones array.Definition TClonesArray.cxx:420; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::GetY1Double_t GetY1() constDefinition TLine.h:52; TLine::GetX2Double_t GetX2() constDefinition TLine.h:51; TLine::GetX1Double_t GetX1() constDefinition TLine.h:50; TLine::GetY2Double_t GetY2() constDefinition TLine.h:53; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:3934,Clear,Clearvoid,3934,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"in;; 214 ((TF2&)obj).fYmax = fYmax;; 215 ((TF2&)obj).fNpy = fNpy;; 216 fContour.Copy(((TF2&)obj).fContour);; 217}; 218 ; 219////////////////////////////////////////////////////////////////////////////////; 220/// Compute distance from point px,py to a function; 221///; 222/// \param[in] px x position; 223/// \param[in] py y position; 224///; 225/// Compute the closest distance of approach from point px,py to this function.; 226/// The distance is computed in pixels units.; 227 ; 228Int_t TF2::DistancetoPrimitive(Int_t px, Int_t py); 229{; 230 if (!fHistogram) return 9999;; 231 Int_t distance = fHistogram->DistancetoPrimitive(px,py);; 232 if (distance <= 1) return distance;; 233 ; 234 Double_t x = gPad->PadtoX(gPad->AbsPixeltoX(px));; 235 Double_t y = gPad->PadtoY(gPad->AbsPixeltoY(py));; 236 const char *drawOption = GetDrawOption();; 237 Double_t uxmin,uxmax;; 238 Double_t uymin,uymax;; 239 if (gPad->GetView() || strncmp(drawOption,""cont"",4) == 0; 240 || strncmp(drawOption,""CONT"",4) == 0) {; 241 uxmin=gPad->GetUxmin();; 242 uxmax=gPad->GetUxmax();; 243 x = fXmin +(fXmax-fXmin)*(x-uxmin)/(uxmax-uxmin);; 244 uymin=gPad->GetUymin();; 245 uymax=gPad->GetUymax();; 246 y = fYmin +(fYmax-fYmin)*(y-uymin)/(uymax-uymin);; 247 }; 248 if (x < fXmin || x > fXmax) return distance;; 249 if (y < fYmin || y > fYmax) return distance;; 250 return 0;; 251}; 252 ; 253////////////////////////////////////////////////////////////////////////////////; 254/// Draw this function with its current attributes; 255///; 256/// NB. You must use DrawCopy if you want to draw several times the same; 257/// function in the current canvas.; 258 ; 259void TF2::Draw(Option_t *option); 260{; 261 TString opt = option;; 262 opt.ToLower();; 263 if (gPad && !opt.Contains(""same"")) gPad->Clear();; 264 ; 265 AppendPad(option);; 266}; 267 ; 268////////////////////////////////////////////////////////////////////////////////; 269/// Draw a copy of this function with its current attributes-*; 270///; 271/// This func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:7306,ux,uxmin,7306,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,6,['ux'],"['uxmax', 'uxmax-uxmin', 'uxmin']"
Usability,"inContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& obj) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1K.html:2233,Clear,Clear,2233,root/html602/TH1K.html,https://root.cern,https://root.cern/root/html602/TH1K.html,2,['Clear'],['Clear']
Usability,"inMap: see method GetEmatrix(); see PrepareSysError(). void GetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); calculate systematic shift from tau variation; ematrix: output; binMap: see method GetEmatrix(). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given source; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); propagate error matrix vyy to the result; vyy: error matrix on input data fY; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); get total error including statistical error; ematrix: output; binMap: see method GetEmatrix(). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:25735,clear,clearEmat,25735,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['clear'],"['clear', 'clearEmat']"
Usability,inVolume = 1.0;; 632 for ( unsigned int j = 0; j < fDim; j++ ); 633 {; 634 binVolume *= ( xup[j] - xlow[j] );; 635 }; 636 ; 637 // store the minimum bin volume found as reference for future normalizations; 638 if ( fNPoints == 1 ); 639 fRefVolume = binVolume;; 640 else if ( binVolume < fRefVolume ); 641 fRefVolume = binVolume;; 642 }; 643 ; 644 ; 645 void BinData::InitDataVector (); 646 {; 647 fData.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 648 fDataPtr = fData.empty() ? nullptr : &fData.front();; 649 }; 650 ; 651 void BinData::InitializeErrors(); 652 {; 653 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 654 kAsymError == fErrorType || kNoError == fErrorType );; 655 ; 656 if ( fpTmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.cl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:20496,clear,clear,20496,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnset. private . Verbosity of this channel. By default, use the global verbosity. ; Definition at line 106 of file RLogger.hxx. core/foundation/inc/ROOT/RLogger.hxx. ROOTExperimentalRLogChannel. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:3731,Guid,Guide,3731,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,1,['Guid'],['Guide']
Usability,"include <TGProgressBar.h>. Inheritance diagram for TGProgressBar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkProgressBarStandardWidth ; kProgressBarTextWidth ; kBlockSize ; kBlockSpace . Definition at line 24 of file TGProgressBar.h. ◆ EBarType. enum TGProgressBar::EBarType. EnumeratorkStandard ; kFancy . Definition at line 22 of file TGProgressBar.h. ◆ EFillType. enum TGProgressBar::EFillType. EnumeratorkSolidFill ; kBlockFill . Definition at line 23 of file TGProgressBar.h. Constructor & Destructor Documentation. ◆ TGProgressBar(). TGProgressBar::TGProgressBar ; (; const TGWindow * ; p, . UInt_t ; w, . UInt_t ; h, . Pixel_t ; back = GetWhitePixel(), . Pixel_t ; barcolor = GetDefaultSelectedBackground(), . GContext_t ; norm = GetDefaultGC()(), . FontStruct_t ; font = GetDefaultFontStruct(), . UInt_t ; options = kDoubleBorder | kSunkenFrame . ). Create progress bar. ; Definition at line 42 of file TGProgressBar.cxx. ◆ ~TGProgressBar(). TGProgressBar::~TGProgressBar ; (; ). inlineoverride . Definition at line 58 of file TGProgressBar.h. Member Function Documentation. ◆ Class(). static TClass * TGProgressBar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGProgressBar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGProgressBar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file TGProgressBar.h. ◆ DeclFileName(). static const char * TGProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 90 of file TGProgressBar.h. ◆ DoRedraw(). void TGProgressBar::DoRedraw ; (; ). overrideprotectedpure virtual . Redraw the frame. ; Reimplemented from TGFrame.; Implemented in TGHProgressBar, and TGVProgressBar. ◆ Format(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:31084,progress bar,progress bar,31084,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,"include <TSystem.h>; Constructor & Destructor Documentation. ◆ ProcInfo_t(). ProcInfo_t::ProcInfo_t ; (; ). inline . Definition at line 201 of file TSystem.h. ◆ ~ProcInfo_t(). ProcInfo_t::~ProcInfo_t ; (; ). virtual . Definition at line 75 of file TSystem.cxx. Member Function Documentation. ◆ Class(). static TClass * ProcInfo_t::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ProcInfo_t::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ProcInfo_t::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 204 of file TSystem.h. ◆ DeclFileName(). static const char * ProcInfo_t::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 204 of file TSystem.h. ◆ IsA(). virtual TClass * ProcInfo_t::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 204 of file TSystem.h. ◆ Streamer(). virtual void ProcInfo_t::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void ProcInfo_t::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 204 of file TSystem.h. Member Data Documentation. ◆ fCpuSys. Float_t ProcInfo_t::fCpuSys. Definition at line 198 of file TSystem.h. ◆ fCpuUser. Float_t ProcInfo_t::fCpuUser. Definition at line 197 of file TSystem.h. ◆ fMemResident. Long_t ProcInfo_t::fMemResident. Definition at line 199 of file TSystem.h. ◆ fMemVirtual. Long_t ProcInfo_t::fMemVirtual. Definition at line 200 of file TSystem.h. Collaboration diagram for ProcInfo_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following files:; core/base/inc/TSystem.h; core/base/src/TSystem.cxx. ProcInfo_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structProcInfo__t.html:2741,Guid,Guide,2741,doc/master/structProcInfo__t.html,https://root.cern,https://root.cern/doc/master/structProcInfo__t.html,1,['Guid'],['Guide']
Usability,"indObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TSpectrum::Unfoldingconst char * Unfolding(Double_t *source, const Double_t **respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost)One-dimensional unfolding function.Definition TSpectrum.cxx:1882. Definition at line 1882 of file TSpectrum.cxx. Member Data Documentation. ◆ fgAverageWindow. Int_t TSpectrum::fgAverageWindow = 3. staticprotected . Average window of searched peaks. ; Definition at line 32 of file TSpectrum.h. ◆ fgIterations. Int_t TSpectrum::fgIterations = 3. staticprotected . Maximum number of decon iterations (default=3) ; Definition at line 33 of file TSpectrum.h. ◆ fHistogram. TH1* TSpectrum::fHistogram. protected . resulting histogram ; Definition at line 31 of file TSpectrum.h. ◆ fMaxPeaks. Int_t TSpectrum::fMaxPeaks. protected . Maximum number of peaks to be found. ; Definition at line 25 of file TSpectrum.h. ◆ fNPeaks. Int_t TSpectrum::fNPeaks. protected . number of peaks found ; Definition at line 26 of file TSpectrum.h. ◆ fPosition. Double_t* TSpectrum::fPosition. protected . [fNPeaks] array of current peak positions ; Definition at line 27 of file TSpectrum.h. ◆ fPositionX. Double_t* TSpectrum::fPositionX. protected . [fNPeaks] X position of peaks ; Definition at line 28 of file TSpectrum.h. ◆ fPositionY. Double_t* TSpectrum::fPositionY. protected . [fNPeaks] Y position of peaks ; Definition at line 29 of file TSpectrum.h. ◆ fResolution. Double_t TSpectrum::fResolution. protected . NOT USED resolution of the neighboring peaks ; Definition at line 30 of file TSpectrum.h. Libraries for TSpectrum:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum.h; hist/spectrum/src/TSpectrum.cxx. TSpectrum. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:74536,Guid,Guide,74536,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['Guid'],['Guide']
Usability,"indVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4587,Clear,Clear,4587,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['Clear'],['Clear']
Usability,"inder.h:131; ROOT::Math::BrentRootFinder::SetDefaultNpxstatic void SetDefaultNpx(int npx)set number of default Npx used at construction time (when SetNpx is not called) Default value is 100Definition BrentRootFinder.cxx:37; ROOT::Math::BrentRootFinder::Nameconst char * Name() const overrideReturn name of root finder algorithm (""BrentRootFinder"").Definition BrentRootFinder.cxx:62; ROOT::Math::BrentRootFinder::SetDefaultNSearchstatic void SetDefaultNSearch(int n)set number of times the bracketing search in combination with is done to find a good interval Default...Definition BrentRootFinder.cxx:39; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::BrentMethods::MinimStepdouble MinimStep(const IGenFunction *f, int type, double &xmin, double &xmax, double fy, int npx=100, bool useLog=false)Grid search implementation, used to bracket the minimum and later use Brent's method with the bracket...Definition BrentMethods.cxx:28; ROOT::Math::BrentMethods::MinimBrentdouble MinimBrent(const IGenFunction *f, int type, double &xmin, double &xmax, double xmiddle, double fy, bool &ok, int &niter, double epsabs=1.E-8, double epsrel=1.E-10, int maxiter=100)Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a c...Definition BrentMethods.cxx:130; ROOT::Math::gDefaultNpxstatic int gDefaultNpxDefinition BrentMinimizer1D.cxx:29; ROOT::Math::gDefaultNSearchstatic int gDefaultNSearchDefinition BrentMinimizer1D.cxx:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcBrentRootFinder.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BrentRootFinder_8cxx_source.html:7230,Guid,Guide,7230,doc/master/BrentRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BrentRootFinder_8cxx_source.html,1,['Guid'],['Guide']
Usability,inder::fNsliceX. protected . Definition at line 58 of file TGeoVoxelFinder.h. ◆ fNsliceY. Int_t* TGeoVoxelFinder::fNsliceY. protected . Definition at line 59 of file TGeoVoxelFinder.h. ◆ fNsliceZ. Int_t* TGeoVoxelFinder::fNsliceZ. protected . Definition at line 60 of file TGeoVoxelFinder.h. ◆ fNx. Int_t TGeoVoxelFinder::fNx. protected . Definition at line 41 of file TGeoVoxelFinder.h. ◆ fNy. Int_t TGeoVoxelFinder::fNy. protected . Definition at line 42 of file TGeoVoxelFinder.h. ◆ fNz. Int_t TGeoVoxelFinder::fNz. protected . Definition at line 43 of file TGeoVoxelFinder.h. ◆ fOBx. Int_t* TGeoVoxelFinder::fOBx. protected . Definition at line 49 of file TGeoVoxelFinder.h. ◆ fOBy. Int_t* TGeoVoxelFinder::fOBy. protected . Definition at line 50 of file TGeoVoxelFinder.h. ◆ fOBz. Int_t* TGeoVoxelFinder::fOBz. protected . Definition at line 51 of file TGeoVoxelFinder.h. ◆ fOEx. Int_t* TGeoVoxelFinder::fOEx. protected . Definition at line 52 of file TGeoVoxelFinder.h. ◆ fOEy. Int_t* TGeoVoxelFinder::fOEy. protected . Definition at line 53 of file TGeoVoxelFinder.h. ◆ fOEz. Int_t* TGeoVoxelFinder::fOEz. protected . Definition at line 54 of file TGeoVoxelFinder.h. ◆ fPriority. Int_t TGeoVoxelFinder::fPriority[3]. protected . Definition at line 44 of file TGeoVoxelFinder.h. ◆ fVolume. TGeoVolume* TGeoVoxelFinder::fVolume. protected . Definition at line 29 of file TGeoVoxelFinder.h. ◆ fXb. Double_t* TGeoVoxelFinder::fXb. protected . Definition at line 46 of file TGeoVoxelFinder.h. ◆ fYb. Double_t* TGeoVoxelFinder::fYb. protected . Definition at line 47 of file TGeoVoxelFinder.h. ◆ fZb. Double_t* TGeoVoxelFinder::fZb. protected . Definition at line 48 of file TGeoVoxelFinder.h. Libraries for TGeoVoxelFinder:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoVoxelFinder.h; geom/geom/src/TGeoVoxelFinder.cxx. TGeoVoxelFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVoxelFinder.html:31153,Guid,Guide,31153,doc/master/classTGeoVoxelFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoVoxelFinder.html,1,['Guid'],['Guide']
Usability,"index : 0 name : Regression; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; : Rebuilding Dataset datasetreg; : Building event vectors for type 2 Regression; : Dataset[datasetreg] : create input formulas for tree TreeR; DataSetFactory : [datasetreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 1000; : Regression -- testing events : 9000; : Regression -- training and testing events: 10000; : ; DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking method: ␛[1mKNN␛[0m; : ; Factory : Booking method: ␛[1mLD␛[0m; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture=CPU:Layout=TANH|50,TANH|50,TANH|50,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture=CPU:Layout=TANH|50,TANH|50,TANH|50,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:2302,Learn,LearningRate,2302,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Learn'],['LearningRate']
Usability,"index should be <= %d"", fNpoints);; 1758 return;; 1759 }; 1760 ; 1761 if (ipoint == fNpoints) {; 1762 SetPoint(ipoint, x, y);; 1763 return;; 1764 }; 1765 ; 1766 Double_t **ps = ExpandAndCopy(fNpoints + 1, ipoint);; 1767 CopyAndRelease(ps, ipoint, fNpoints++, ipoint + 1);; 1768 ; 1769 // To avoid redefinitions in descendant classes; 1770 FillZero(ipoint, ipoint + 1);; 1771 ; 1772 fX[ipoint] = x;; 1773 fY[ipoint] = y;; 1774}; 1775 ; 1776 ; 1777////////////////////////////////////////////////////////////////////////////////; 1778/// Integrate the TGraph data within a given (index) range.; 1779/// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; 1780/// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; 1781/// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; 1782/// with the first one. It is clear that the order of the point is essential in defining the polygon.; 1783/// Also note that the segments should not intersect.; 1784///; 1785/// NB:; 1786/// - if last=-1 (default) last is set to the last point.; 1787/// - if (first <0) the first point (0) is taken.; 1788///; 1789/// ### Method:; 1790///; 1791/// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; 1792/// you have to deal with. The most evident solution would be to divide the polygon in triangles and; 1793/// calculate the surface of them. But this can quickly become complicated as you will have to test; 1794/// every segments of every triangles and check if they are intersecting with a current polygon's; 1795/// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; 1796///; 1797/// ### The solution (implemented by R.Brun); 1798/// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; 1799/// segments don't intersect.; 1800",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:63798,clear,clear,63798,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['clear'],['clear']
Usability,"indow.cxx:736; ROOT::RWebWindow::HasConnectionbool HasConnection(unsigned connid=0, bool only_active=true) constreturns true if specified connection id existsDefinition RWebWindow.cxx:1413; ROOT::RWebWindow::GetWidthunsigned GetWidth() constreturns configured window width (0 - default) actual window width can be differentDefinition RWebWindow.hxx:278; ROOT::RWebWindow::fWindowThrdstd::thread fWindowThrd! special thread for that windowDefinition RWebWindow.hxx:163; ROOT::RWebWindow::ProvideQueueEntryvoid ProvideQueueEntry(unsigned connid, EQueueEntryKind kind, std::string &&arg)Provide data to user callback User callback must be executed in the window thread.Definition RWebWindow.cxx:421; ROOT::RWebWindow::HasKeybool HasKey(const std::string &key, bool also_newkey=false) constReturns true if provided key value already exists (in processes map or in existing connections) In sp...Definition RWebWindow.cxx:558; ROOT::RWebWindow::CompleteWSSendvoid CompleteWSSend(unsigned wsid)Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be start...Definition RWebWindow.cxx:1088; ROOT::RWebWindow::IsUseCurrentDirbool IsUseCurrentDir() constreturns true if window can access local files via currentdir/ path of http serverDefinition RWebWindow.hxx:328; ROOT::RWebWindow::fUseServerThreadsbool fUseServerThreads! indicates that server thread is using, no special window threadDefinition RWebWindow.hxx:142; ROOT::RWebWindow::FindHeadlessConnectionunsigned FindHeadlessConnection()Returns connection id of window running in headless mode This can be special connection which may run...Definition RWebWindow.cxx:221; ROOT::RWebWindow::WaitForTimedint WaitForTimed(WebWindowWaitFunc_t check)Waits until provided check function or lambdas returns non-zero value Check function has following si...Definition RWebWindow.cxx:1803; ROOT::RWebWindow::fProcessMTbool fProcessMT! if window event processing performed in dedicated threadDefinition RWebWindow.hxx:144; ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:41805,Clear,Clear,41805,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['Clear'],['Clear']
Usability,"indow.cxx:737; ROOT::RWebWindow::HasConnectionbool HasConnection(unsigned connid=0, bool only_active=true) constreturns true if specified connection id existsDefinition RWebWindow.cxx:1455; ROOT::RWebWindow::GetWidthunsigned GetWidth() constreturns configured window width (0 - default) actual window width can be differentDefinition RWebWindow.hxx:281; ROOT::RWebWindow::fWindowThrdstd::thread fWindowThrd! special thread for that windowDefinition RWebWindow.hxx:166; ROOT::RWebWindow::ProvideQueueEntryvoid ProvideQueueEntry(unsigned connid, EQueueEntryKind kind, std::string &&arg)Provide data to user callback User callback must be executed in the window thread.Definition RWebWindow.cxx:422; ROOT::RWebWindow::HasKeybool HasKey(const std::string &key, bool also_newkey=false) constReturns true if provided key value already exists (in processes map or in existing connections) In sp...Definition RWebWindow.cxx:559; ROOT::RWebWindow::CompleteWSSendvoid CompleteWSSend(unsigned wsid)Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be start...Definition RWebWindow.cxx:1121; ROOT::RWebWindow::IsUseCurrentDirbool IsUseCurrentDir() constreturns true if window can access local files via currentdir/ path of http serverDefinition RWebWindow.hxx:331; ROOT::RWebWindow::fUseServerThreadsbool fUseServerThreads! indicates that server thread is using, no special window threadDefinition RWebWindow.hxx:145; ROOT::RWebWindow::FindHeadlessConnectionunsigned FindHeadlessConnection()Returns connection id of window running in headless mode This can be special connection which may run...Definition RWebWindow.cxx:221; ROOT::RWebWindow::WaitForTimedint WaitForTimed(WebWindowWaitFunc_t check)Waits until provided check function or lambdas returns non-zero value Check function has following si...Definition RWebWindow.cxx:1845; ROOT::RWebWindow::fProcessMTbool fProcessMT! if window event processing performed in dedicated threadDefinition RWebWindow.hxx:147; ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:41950,Clear,Clear,41950,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['Clear'],['Clear']
Usability,"indow::SwapWindow ; (; TEveWindow * ; w). Swap frames with the given window. ; Definition at line 737 of file TEveWindow.cxx. ◆ SwapWindows(). void TEveWindow::SwapWindows ; (; TEveWindow * ; w1, . TEveWindow * ; w2 . ). static . Swap windows w1 and w2. ; They are properly reparented in the eve hierarch as well. Layout is called on both frames. ; Definition at line 1027 of file TEveWindow.cxx. ◆ SwapWindowWithCurrent(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefWidth = 640. staticprotected . Definition at line 223 of file TEveWindow.h. ◆ fgMiniBarBackgroundColor. Pixel_t TEveWindow::fgMiniBarBackgroundColor = 0x80C0A0. staticprotected . Definition at line 227 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:46011,Undo,UndockWindowDestroySlot,46011,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Undo'],['UndockWindowDestroySlot']
Usability,"ine . Definition at line 121 of file TGeoNode.h. ◆ SetVisibility(). void TGeoNode::SetVisibility ; (; Bool_t ; vis = kTRUE). overridevirtual . Set visibility of the node (obsolete). ; Reimplemented from TGeoAtt.; Definition at line 718 of file TGeoNode.cxx. ◆ SetVolume(). void TGeoNode::SetVolume ; (; TGeoVolume * ; volume). inline . Definition at line 117 of file TGeoNode.h. ◆ Streamer(). void TGeoNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoNodeMatrix, and TGeoNodeOffset. ◆ StreamerNVirtual(). void TGeoNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 145 of file TGeoNode.h. ◆ VisibleDaughters(). void TGeoNode::VisibleDaughters ; (; Bool_t ; vis = kTRUE). Set visibility of the daughters (obsolete). ; Definition at line 731 of file TGeoNode.cxx. Member Data Documentation. ◆ fFWExtension. TGeoExtension* TGeoNode::fFWExtension = nullptr. protected . Transient user-defined extension to volumes. ; Definition at line 47 of file TGeoNode.h. ◆ fMother. TGeoVolume* TGeoNode::fMother = nullptr. protected . Definition at line 42 of file TGeoNode.h. ◆ fNovlp. Int_t TGeoNode::fNovlp = 0. protected . Definition at line 44 of file TGeoNode.h. ◆ fNumber. Int_t TGeoNode::fNumber = 0. protected . Definition at line 43 of file TGeoNode.h. ◆ fOverlaps. Int_t* TGeoNode::fOverlaps = nullptr. protected . Definition at line 45 of file TGeoNode.h. ◆ fUserExtension. TGeoExtension* TGeoNode::fUserExtension = nullptr. protected . Definition at line 46 of file TGeoNode.h. ◆ fVolume. TGeoVolume* TGeoNode::fVolume = nullptr. protected . Definition at line 41 of file TGeoNode.h. Libraries for TGeoNode:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoNode.h; geom/geom/src/TGeoNode.cxx. TGeoNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:37171,Guid,Guide,37171,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['Guid'],['Guide']
Usability,"ine . Definition at line 79 of file TSelector.h. ◆ Terminate(). virtual void TSelector::Terminate ; (; void ; ). inlinevirtual . Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, TProofDraw, TProofDrawHist, TProofDrawEventList, TProofDrawEntryList, TProofDrawProfile, TProofDrawProfile2D, TProofDrawGraph, TProofDrawPolyMarker3D, TProofDrawListOfGraphs, TProofDrawListOfPolyMarkers3D, TSelectorDraw, TSelectorEntries, h1analysis, and h1analysisTreeReader.; Definition at line 71 of file TSelector.h. ◆ Version(). virtual int TSelector::Version ; (; ); const. inlinevirtual . Reimplemented in TSelEvent, TEveSelectorToEventList, ROOT::Experimental::REveSelectorToEventList, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, TProofDraw, RooProofDriverSelector, TSelectorEntries, h1analysis, and h1analysisTreeReader.; Definition at line 52 of file TSelector.h. Member Data Documentation. ◆ fAbort. EAbort TSelector::fAbort. protected . Abort status. ; Definition at line 38 of file TSelector.h. ◆ fInput. TList* TSelector::fInput. protected . List of objects available during processing. ; Definition at line 41 of file TSelector.h. ◆ fObject. TObject* TSelector::fObject. protected . ! Current object if processing object (vs. TTree) ; Definition at line 40 of file TSelector.h. ◆ fOption. TString TSelector::fOption. protected . Option given to TTree::Process. ; Definition at line 39 of file TSelector.h. ◆ fOutput. TSelectorList* TSelector::fOutput. protected . ! List of objects created during processing ; Definition at line 42 of file TSelector.h. ◆ fStatus. Long64_t TSelector::fStatus. protected . Selector status. ; Definition at line 37 of file TSelector.h. Libraries for TSelector:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TSelector.h; tree/tree/src/TSelector.cxx. TSelector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:28219,Guid,Guide,28219,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['Guid'],['Guide']
Usability,"ine . Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped. ; Definition at line 102 of file TBufferMerger.hxx. ◆ Init(). void ROOT::TBufferMerger::Init ; (; std::unique_ptr< TFile > ; output). private . Definition at line 36 of file TBufferMerger.cxx. ◆ Merge(). void ROOT::TBufferMerger::Merge ; (; ROOT::TBufferMergerFile * ; memfile). private . Definition at line 76 of file TBufferMerger.cxx. ◆ operator=(). TBufferMerger & ROOT::TBufferMerger::operator= ; (; const TBufferMerger & ; ). private . TBufferMerger has no copy operator. . ◆ SetMergeOptions(). void ROOT::TBufferMerger::SetMergeOptions ; (; const TString & ; options). Sets the merge options. ; SetMergeOptions(""fast"") will disable recompression of input data into the output if they have different compression settings. Parameters. optionsTFileMerger/TFileMergeInfo merge options . Definition at line 71 of file TBufferMerger.cxx. ◆ SetNotrees(). void ROOT::TBufferMerger::SetNotrees ; (; Bool_t ; notrees = kFALSE). inline . Indicates that any TTree objects in the file should be skipped and thus that steps that are specific to TTree can be skipped. ; Definition at line 95 of file TBufferMerger.hxx. Member Data Documentation. ◆ fAttachedFiles. std::vector<std::weak_ptr<TBufferMergerFile> > ROOT::TBufferMerger::fAttachedFiles. private . Definition at line 131 of file TBufferMerger.hxx. ◆ fMergeMutex. std::mutex ROOT::TBufferMerger::fMergeMutex. private . Definition at line 130 of file TBufferMerger.hxx. ◆ fMerger. TFileMerger ROOT::TBufferMerger::fMerger {false, false}. private . Definition at line 129 of file TBufferMerger.hxx. Libraries for ROOT::TBufferMerger:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/ROOT/TBufferMerger.hxx; io/io/src/TBufferMerger.cxx. ROOTTBufferMerger. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html:7641,Guid,Guide,7641,doc/master/classROOT_1_1TBufferMerger.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html,1,['Guid'],['Guide']
Usability,ine 103 of file TParameter.h. ◆ Merge() [1/2]. template<class AParamType > . Int_t TParameter< AParamType >::Merge ; (; TCollection * ; in). inlinevirtual . Reimplemented in TSelectorScalar.; Definition at line 123 of file TParameter.h. ◆ Merge() [2/2]. Int_t TParameter< Bool_t >::Merge ; (; TCollection * ; in). inline . Definition at line 158 of file TParameter.h. ◆ Print(). template<class AParamType > . void TParameter< AParamType >::Print ; (; Option_t * ; option); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 110 of file TParameter.h. ◆ Reset(). template<class AParamType > . void TParameter< AParamType >::Reset ; (; ). inlineprivate . Definition at line 51 of file TParameter.h. ◆ SetMergeMode(). template<class AParamType > . void TParameter< AParamType >::SetMergeMode ; (; char ; mergemode = '+'). inline . Definition at line 78 of file TParameter.h. ◆ SetVal(). template<class AParamType > . void TParameter< AParamType >::SetVal ; (; const AParamType & ; val). inline . Definition at line 69 of file TParameter.h. ◆ Streamer(). template<class AParamType > . void TParameter< AParamType >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TSelectorScalar. ◆ StreamerNVirtual(). template<class AParamType > . void TParameter< AParamType >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 119 of file TParameter.h. Member Data Documentation. ◆ fName. template<class AParamType > . TString TParameter< AParamType >::fName. private . Definition at line 48 of file TParameter.h. ◆ fVal. template<class AParamType > . AParamType TParameter< AParamType >::fVal. private . Definition at line 49 of file TParameter.h. core/base/inc/TParameter.h. TParameter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:17855,Guid,Guide,17855,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,1,['Guid'],['Guide']
Usability,"ine 1291 of file TStreamerInfo.cxx. ◆ BuildOld(). void TStreamerInfo::BuildOld ; (; ). overridevirtual . rebuild the TStreamerInfo structure ; Implements TVirtualStreamerInfo.; Definition at line 1705 of file TStreamerInfo.cxx. ◆ CallShowMembers(). void TStreamerInfo::CallShowMembers ; (; const void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient . ); const. overridevirtual . Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. ; Implements TVirtualStreamerInfo.; Definition at line 2752 of file TStreamerInfo.cxx. ◆ Class(). static TClass * TStreamerInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStreamerInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStreamerInfo::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 254 of file TStreamerInfo.h. ◆ Clear(). void TStreamerInfo::Clear ; (; Option_t * ; option = """"). overridevirtual . If opt contains 'built', reset this StreamerInfo as if Build or BuildOld was never called on it (useful to force their re-running). ; Implements TVirtualStreamerInfo.; Definition at line 2616 of file TStreamerInfo.cxx. ◆ Clone(). TObject * TStreamerInfo::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an object using the Streamer facility. ; If newname is specified, this will be the name of the new object. ; Reimplemented from TNamed.; Definition at line 2818 of file TStreamerInfo.cxx. ◆ CompareContent(). Bool_t TStreamerInfo::CompareContent ; (; TClass * ; cl, . TVirtualStreamerInfo * ; info, . Bool_t ; warn, . Bool_t ; complete, . TFile * ; file . ). overridevirtual . Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo. ; In this context 'Equivalent' means the same number of persistent data member which the same actual C++ type and the same name. If 'warn' is true, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:36699,Clear,Clear,36699,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['Clear'],['Clear']
Usability,ine 139 of file TMultiLayerPerceptron.h. ◆ fextD. TString TMultiLayerPerceptron::fextD. private . String containing the derivative name. ; Definition at line 135 of file TMultiLayerPerceptron.h. ◆ fextF. TString TMultiLayerPerceptron::fextF. private . String containing the function name. ; Definition at line 134 of file TMultiLayerPerceptron.h. ◆ fFirstLayer. TObjArray TMultiLayerPerceptron::fFirstLayer. private . Collection of the input neurons; subset of fNetwork. ; Definition at line 127 of file TMultiLayerPerceptron.h. ◆ fLastAlpha. Double_t TMultiLayerPerceptron::fLastAlpha. private . ! internal parameter used in line search ; Definition at line 146 of file TMultiLayerPerceptron.h. ◆ fLastLayer. TObjArray TMultiLayerPerceptron::fLastLayer. private . Collection of the output neurons; subset of fNetwork. ; Definition at line 128 of file TMultiLayerPerceptron.h. ◆ fLearningMethod. ELearningMethod TMultiLayerPerceptron::fLearningMethod. private . ! The Learning Method ; Definition at line 138 of file TMultiLayerPerceptron.h. ◆ fManager. TTreeFormulaManager* TMultiLayerPerceptron::fManager. private . ! TTreeFormulaManager for the weight and neurons ; Definition at line 140 of file TMultiLayerPerceptron.h. ◆ fNetwork. TObjArray TMultiLayerPerceptron::fNetwork. private . Collection of all the neurons in the network. ; Definition at line 126 of file TMultiLayerPerceptron.h. ◆ fOutType. TNeuron::ENeuronType TMultiLayerPerceptron::fOutType. private . Type of output neurons. ; Definition at line 133 of file TMultiLayerPerceptron.h. ◆ fReset. Int_t TMultiLayerPerceptron::fReset. private . ! number of epochs between two resets of the search direction to the steepest descent - Default=50 ; Definition at line 147 of file TMultiLayerPerceptron.h. ◆ fStructure. TString TMultiLayerPerceptron::fStructure. private . String containing the network structure. ; Definition at line 130 of file TMultiLayerPerceptron.h. ◆ fSynapses. TObjArray TMultiLayerPerceptron::fSynapses. private . C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:52272,Learn,Learning,52272,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['Learn'],['Learning']
Usability,ine 143 of file TList.h. Member Function Documentation. ◆ GetAddOption(). virtual Option_t * TObjLink::GetAddOption ; (; ); const. inlinevirtual . Reimplemented in TObjOptLink.; Definition at line 148 of file TList.h. ◆ GetObject(). TObject * TObjLink::GetObject ; (; ); const. inline . Definition at line 145 of file TList.h. ◆ GetObjectRef(). TObject ** TObjLink::GetObjectRef ; (; ). inline . Definition at line 146 of file TList.h. ◆ GetOption(). virtual Option_t * TObjLink::GetOption ; (; ); const. inlinevirtual . Reimplemented in TObjOptLink.; Definition at line 149 of file TList.h. ◆ Next(). TObjLink * TObjLink::Next ; (; ). inline . Definition at line 151 of file TList.h. ◆ NextSP(). TObjLinkPtr_t TObjLink::NextSP ; (; ). inline . Definition at line 153 of file TList.h. ◆ operator=(). TObjLink & TObjLink::operator= ; (; const TObjLink & ; ). privatedelete . ◆ Prev(). TObjLink * TObjLink::Prev ; (; ). inline . Definition at line 152 of file TList.h. ◆ PrevSP(). TObjLinkPtr_t TObjLink::PrevSP ; (; ). inline . Definition at line 154 of file TList.h. ◆ SetObject(). void TObjLink::SetObject ; (; TObject * ; obj). inline . Definition at line 147 of file TList.h. ◆ SetOption(). virtual void TObjLink::SetOption ; (; Option_t * ; ). inlinevirtual . Reimplemented in TObjOptLink.; Definition at line 150 of file TList.h. Friends And Related Symbol Documentation. ◆ TList. friend class TList. friend . Definition at line 125 of file TList.h. Member Data Documentation. ◆ fNext. TObjLinkPtr_t TObjLink::fNext. private . Definition at line 131 of file TList.h. ◆ fObject. TObject* TObjLink::fObject. private . Definition at line 134 of file TList.h. ◆ fPrev. TObjLinkWeakPtr_t TObjLink::fPrev. private . Definition at line 132 of file TList.h. Libraries for TObjLink:. [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TList.h. TObjLink. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjLink.html:3920,Guid,Guide,3920,doc/master/classTObjLink.html,https://root.cern,https://root.cern/doc/master/classTObjLink.html,1,['Guid'],['Guide']
Usability,"ine 144 of file MethodSVM.h. ◆ fMult. Float_t TMVA::MethodSVM::fMult. private . Definition at line 153 of file MethodSVM.h. ◆ fMultiKernels. std::string TMVA::MethodSVM::fMultiKernels. private . Definition at line 160 of file MethodSVM.h. ◆ fNSubSets. UShort_t TMVA::MethodSVM::fNSubSets. private . nr of subsets, default 1 ; Definition at line 136 of file MethodSVM.h. ◆ fNumVars. Float_t TMVA::MethodSVM::fNumVars. private . number of input variables for multi-gaussian ; Definition at line 155 of file MethodSVM.h. ◆ fOrder. Int_t TMVA::MethodSVM::fOrder. private . for Polynomial Kernel ( polynomial order ) ; Definition at line 150 of file MethodSVM.h. ◆ fSupportVectors. std::vector<TMVA::SVEvent*>* TMVA::MethodSVM::fSupportVectors. private . contains support vectors ; Definition at line 141 of file MethodSVM.h. ◆ fSVKernelFunction. SVKernelFunction* TMVA::MethodSVM::fSVKernelFunction. private . kernel function ; Definition at line 142 of file MethodSVM.h. ◆ fTheKernel. TString TMVA::MethodSVM::fTheKernel. private . kernel name ; Definition at line 148 of file MethodSVM.h. ◆ fTheta. Float_t TMVA::MethodSVM::fTheta. private . for Sigmoidal Kernel ; Definition at line 151 of file MethodSVM.h. ◆ fTolerance. Float_t TMVA::MethodSVM::fTolerance. private . tolerance parameter ; Definition at line 134 of file MethodSVM.h. ◆ fTune. std::string TMVA::MethodSVM::fTune. private . Specify parameters to be tuned. ; Definition at line 159 of file MethodSVM.h. ◆ fVarNames. std::vector<TString> TMVA::MethodSVM::fVarNames. private . Definition at line 156 of file MethodSVM.h. ◆ fWgSet. SVWorkingSet* TMVA::MethodSVM::fWgSet. private . svm working set ; Definition at line 139 of file MethodSVM.h. Libraries for TMVA::MethodSVM:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodSVM.h; tmva/tmva/src/MethodSVM.cxx. TMVAMethodSVM. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html:43225,Guid,Guide,43225,doc/master/classTMVA_1_1MethodSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html,1,['Guid'],['Guide']
Usability,"ine 1569 of file TMultiGraph.cxx. ◆ SavePrimitive(). void TMultiGraph::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 1593 of file TMultiGraph.cxx. ◆ SetMaximum(). void TMultiGraph::SetMaximum ; (; Double_t ; maximum = -1111). virtual . Set multigraph maximum. ; Definition at line 1632 of file TMultiGraph.cxx. ◆ SetMinimum(). void TMultiGraph::SetMinimum ; (; Double_t ; minimum = -1111). virtual . Set multigraph minimum. ; Definition at line 1642 of file TMultiGraph.cxx. ◆ Streamer(). void TMultiGraph::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiGraph::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMultiGraph.h. Member Data Documentation. ◆ fFunctions. TList* TMultiGraph::fFunctions {nullptr}. protected . Pointer to list of functions (fits and user) ; Definition at line 38 of file TMultiGraph.h. ◆ fGraphs. TList* TMultiGraph::fGraphs {nullptr}. protected . Pointer to list of TGraphs. ; Definition at line 37 of file TMultiGraph.h. ◆ fHistogram. TH1F* TMultiGraph::fHistogram {nullptr}. protected . Pointer to histogram used for drawing axis. ; Definition at line 39 of file TMultiGraph.h. ◆ fMaximum. Double_t TMultiGraph::fMaximum {-1111}. protected . Maximum value for plotting along y. ; Definition at line 40 of file TMultiGraph.h. ◆ fMinimum. Double_t TMultiGraph::fMinimum {-1111}. protected . Minimum value for plotting along y. ; Definition at line 41 of file TMultiGraph.h. Libraries for TMultiGraph:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiGraph.h; hist/hist/src/TMultiGraph.cxx. TMultiGraph. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:44863,Guid,Guide,44863,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['Guid'],['Guide']
Usability,ine 162 of file TEvePointSet.h. ◆ TakeAction(). void TEvePointSetArray::TakeAction ; (; TEvePointSelector * ; sel). overridevirtual . Called from TEvePointSelector when internal arrays of the tree-selector are filled up and need to be processed. ; Virtual from TEvePointSelectorConsumer. ; Implements TEvePointSelectorConsumer.; Definition at line 532 of file TEvePointSet.cxx. Friends And Related Symbol Documentation. ◆ TEvePointSetArrayEditor. friend class TEvePointSetArrayEditor. friend . Definition at line 112 of file TEvePointSet.h. Member Data Documentation. ◆ fBins. TEvePointSet** TEvePointSetArray::fBins. protected . Definition at line 118 of file TEvePointSet.h. ◆ fBinWidth. Double_t TEvePointSetArray::fBinWidth. protected . Definition at line 124 of file TEvePointSet.h. ◆ fCurMax. Double_t TEvePointSetArray::fCurMax. protected . Definition at line 123 of file TEvePointSet.h. ◆ fCurMin. Double_t TEvePointSetArray::fCurMin. protected . Definition at line 122 of file TEvePointSet.h. ◆ fDefPointSetCapacity. Int_t TEvePointSetArray::fDefPointSetCapacity. protected . Definition at line 119 of file TEvePointSet.h. ◆ fLastBin. Int_t TEvePointSetArray::fLastBin. protected . Definition at line 121 of file TEvePointSet.h. ◆ fMax. Double_t TEvePointSetArray::fMax. protected . Definition at line 123 of file TEvePointSet.h. ◆ fMin. Double_t TEvePointSetArray::fMin. protected . Index of the last filled TEvePointSet. ; Definition at line 122 of file TEvePointSet.h. ◆ fNBins. Int_t TEvePointSetArray::fNBins. protected . Definition at line 120 of file TEvePointSet.h. ◆ fQuantName. TString TEvePointSetArray::fQuantName. protected . Definition at line 125 of file TEvePointSet.h. Libraries for TEvePointSetArray:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEvePointSet.h; graf3d/eve/src/TEvePointSet.cxx. TEvePointSetArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetArray.html:43350,Guid,Guide,43350,doc/master/classTEvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html,1,['Guid'],['Guide']
Usability,ine 188 of file TLinearFitter.h. ◆ fNdim. Int_t TLinearFitter::fNdim. private . Definition at line 183 of file TLinearFitter.h. ◆ fNfixed. Int_t TLinearFitter::fNfixed. private . Definition at line 184 of file TLinearFitter.h. ◆ fNfunctions. Int_t TLinearFitter::fNfunctions. private . Definition at line 181 of file TLinearFitter.h. ◆ fNpoints. Int_t TLinearFitter::fNpoints. private . temporary ; Definition at line 180 of file TLinearFitter.h. ◆ fParams. TVectorD TLinearFitter::fParams. private . Definition at line 156 of file TLinearFitter.h. ◆ fParCovar. TMatrixDSym TLinearFitter::fParCovar. private . Definition at line 157 of file TLinearFitter.h. ◆ fParSign. TVectorD TLinearFitter::fParSign. private . Definition at line 159 of file TLinearFitter.h. ◆ fRobust. Bool_t TLinearFitter::fRobust. private . Definition at line 193 of file TLinearFitter.h. ◆ fSpecial. Int_t TLinearFitter::fSpecial. private . Definition at line 185 of file TLinearFitter.h. ◆ fStoreData. Bool_t TLinearFitter::fStoreData. private . Definition at line 189 of file TLinearFitter.h. ◆ fTValues. TVectorD TLinearFitter::fTValues. private . Definition at line 158 of file TLinearFitter.h. ◆ fVal. Double_t TLinearFitter::fVal[1000]. private . Definition at line 178 of file TLinearFitter.h. ◆ fX. TMatrixD TLinearFitter::fX. private . temporary variable used for num.stability ; Definition at line 175 of file TLinearFitter.h. ◆ fY. TVectorD TLinearFitter::fY. private . Definition at line 172 of file TLinearFitter.h. ◆ fY2. Double_t TLinearFitter::fY2. private . Definition at line 173 of file TLinearFitter.h. ◆ fY2Temp. Double_t TLinearFitter::fY2Temp. private . Definition at line 174 of file TLinearFitter.h. Libraries for TLinearFitter:. [legend]; The documentation for this class was generated from the following files:; math/minuit/inc/TLinearFitter.h; math/minuit/src/TLinearFitter.cxx. TLinearFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:53898,Guid,Guide,53898,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['Guid'],['Guide']
Usability,ine 222 of file RVec.hxx. ◆ isSmall(). template<typename T > . bool ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::isSmall ; (; ); const. inlineprotected . Return true if this is a smallvector which has not had dynamic memory allocated for it. ; Definition at line 226 of file RVec.hxx. ◆ max_size(). template<typename T > . size_type ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::max_size ; (; ); const. inlinenoexcept . Definition at line 275 of file RVec.hxx. ◆ rbegin() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ); const. inlinenoexcept . Definition at line 268 of file RVec.hxx. ◆ rbegin() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rbegin ; (; ). inlinenoexcept . Definition at line 267 of file RVec.hxx. ◆ rend() [1/2]. template<typename T > . const_reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ); const. inlinenoexcept . Definition at line 271 of file RVec.hxx. ◆ rend() [2/2]. template<typename T > . reverse_iterator ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::rend ; (; ). inlinenoexcept . Definition at line 270 of file RVec.hxx. ◆ resetToSmall(). template<typename T > . void ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::resetToSmall ; (; ). inlineprotected . Put this vector in a state of being small. ; Definition at line 229 of file RVec.hxx. ◆ size(). template<typename T > . size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ size_in_bytes(). template<typename T > . size_type ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >::size_in_bytes ; (; ); const. inline . Definition at line 274 of file RVec.hxx. math/vecops/inc/ROOT/RVec.hxx. ROOTInternalVecOpsSmallVectorTemplateCommon. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html:12410,Guid,Guide,12410,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateCommon.html,1,['Guid'],['Guide']
Usability,"ine 33 of file TGTableContainer.h. ◆ DeclFileName(). static const char * TGTableFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 33 of file TGTableContainer.h. ◆ DrawRegion(). void TGTableFrame::DrawRegion ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Draw a region of container in viewport. ; Definition at line 94 of file TGTableContainer.cxx. ◆ GetFrame(). TGFrame * TGTableFrame::GetFrame ; (; ); const. inline . Definition at line 27 of file TGTableContainer.h. ◆ HandleMouseWheel(). void TGTableFrame::HandleMouseWheel ; (; Event_t * ; event). Handle mouse wheel to scroll. ; Definition at line 64 of file TGTableContainer.cxx. ◆ IsA(). TClass * TGTableFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TQObject.; Definition at line 33 of file TGTableContainer.h. ◆ SetCanvas(). void TGTableFrame::SetCanvas ; (; TGCanvas * ; canvas). inline . Definition at line 29 of file TGTableContainer.h. ◆ Streamer(). void TGTableFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TQObject. ; Reimplemented from TQObject. ◆ StreamerNVirtual(). void TGTableFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 33 of file TGTableContainer.h. Member Data Documentation. ◆ fCanvas. TGCanvas* TGTableFrame::fCanvas. protected . Pointer to the canvas that used this frame. ; Definition at line 21 of file TGTableContainer.h. ◆ fFrame. TGCompositeFrame* TGTableFrame::fFrame. protected . Composite frame used as a container. ; Definition at line 20 of file TGTableContainer.h. Libraries for TGTableFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTableContainer.h; gui/gui/src/TGTableContainer.cxx. TGTableFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableFrame.html:8834,Guid,Guide,8834,doc/master/classTGTableFrame.html,https://root.cern,https://root.cern/doc/master/classTGTableFrame.html,1,['Guid'],['Guide']
Usability,"ine 449 of file TProfile2Poly.cxx. ◆ Reset(). void TProfile2Poly::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset. ; Reimplemented from TH2Poly.; Definition at line 466 of file TProfile2Poly.cxx. ◆ SetContentToAverage(). void TProfile2Poly::SetContentToAverage ; (; ). Set content to average. ; Definition at line 304 of file TProfile2Poly.cxx. ◆ SetContentToError(). void TProfile2Poly::SetContentToError ; (; ). Set content to error. ; Definition at line 322 of file TProfile2Poly.cxx. ◆ SetErrorOption(). void TProfile2Poly::SetErrorOption ; (; EErrorType ; type). Set error option. ; Definition at line 523 of file TProfile2Poly.cxx. ◆ Streamer(). void TProfile2Poly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2. ; Reimplemented from TH2Poly. ◆ StreamerNVirtual(). void TProfile2Poly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 115 of file TProfile2Poly.h. Friends And Related Symbol Documentation. ◆ TProfile2PolyBin. friend class TProfile2PolyBin. friend . Definition at line 59 of file TProfile2Poly.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 62 of file TProfile2Poly.h. Member Data Documentation. ◆ fErrorMode. EErrorType TProfile2Poly::fErrorMode = kERRORMEAN. private . Definition at line 104 of file TProfile2Poly.h. ◆ fOverflowBins. TProfile2PolyBin TProfile2Poly::fOverflowBins[kNOverflow]. private . Definition at line 103 of file TProfile2Poly.h. ◆ fTsumwz. Double_t TProfile2Poly::fTsumwz. private . Definition at line 105 of file TProfile2Poly.h. ◆ fTsumwz2. Double_t TProfile2Poly::fTsumwz2. private . Definition at line 106 of file TProfile2Poly.h. Libraries for TProfile2Poly:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile2Poly.h; hist/hist/src/TProfile2Poly.cxx. TProfile2Poly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:72590,Guid,Guide,72590,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['Guid'],['Guide']
Usability,ine 473 of file RuleFitAPI.cxx. Member Data Documentation. ◆ fLogger. MsgLogger TMVA::RuleFitAPI::fLogger. mutableprivate . ! message logger ; Definition at line 193 of file RuleFitAPI.h. ◆ fMethodRuleFit. const MethodRuleFit* TMVA::RuleFitAPI::fMethodRuleFit. private . parent method - set in constructor ; Definition at line 180 of file RuleFitAPI.h. ◆ fModelType. TString TMVA::RuleFitAPI::fModelType. private . model type string ; Definition at line 191 of file RuleFitAPI.h. ◆ fRFIntParms. IntParms TMVA::RuleFitAPI::fRFIntParms. private . integer parameters ; Definition at line 187 of file RuleFitAPI.h. ◆ fRFLx. std::vector<int> TMVA::RuleFitAPI::fRFLx. private . variable selector ; Definition at line 189 of file RuleFitAPI.h. ◆ fRFProgram. ERFProgram TMVA::RuleFitAPI::fRFProgram. private . what to run ; Definition at line 190 of file RuleFitAPI.h. ◆ fRFRealParms. RealParms TMVA::RuleFitAPI::fRFRealParms. private . real parameters ; Definition at line 188 of file RuleFitAPI.h. ◆ fRFVarImp. std::vector<Float_t> TMVA::RuleFitAPI::fRFVarImp. private . variable importances ; Definition at line 184 of file RuleFitAPI.h. ◆ fRFVarImpInd. std::vector<Int_t> TMVA::RuleFitAPI::fRFVarImpInd. private . variable index ; Definition at line 185 of file RuleFitAPI.h. ◆ fRFWorkDir. TString TMVA::RuleFitAPI::fRFWorkDir. private . working directory ; Definition at line 186 of file RuleFitAPI.h. ◆ fRFYhat. std::vector<Float_t> TMVA::RuleFitAPI::fRFYhat. private . score results from test sample ; Definition at line 183 of file RuleFitAPI.h. ◆ fRuleFit. RuleFit* TMVA::RuleFitAPI::fRuleFit. private . non const ptr to RuleFit class in MethodRuleFit ; Definition at line 181 of file RuleFitAPI.h. Libraries for TMVA::RuleFitAPI:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RuleFitAPI.h; tmva/tmva/src/RuleFitAPI.cxx. TMVARuleFitAPI. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:16023,Guid,Guide,16023,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['Guid'],['Guide']
Usability,"ine 55 of file RooParametricStepFunction.h. ◆ lastBinValue(). double RooParametricStepFunction::lastBinValue ; (; ); const. protected . Definition at line 174 of file RooParametricStepFunction.cxx. ◆ plotSamplingHint(). std::list< double > * RooParametricStepFunction::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 218 of file RooParametricStepFunction.cxx. ◆ Streamer(). void RooParametricStepFunction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooParametricStepFunction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooParametricStepFunction.h. Member Data Documentation. ◆ _coefList. RooListProxy RooParametricStepFunction::_coefList. protected . Definition at line 49 of file RooParametricStepFunction.h. ◆ _limits. TArrayD RooParametricStepFunction::_limits. protected . Definition at line 50 of file RooParametricStepFunction.h. ◆ _nBins. Int_t RooParametricStepFunction::_nBins = 0. protected . Definition at line 51 of file RooParametricStepFunction.h. ◆ _x. RooRealProxy RooParametricStepFunction::_x. protected . Definition at line 48 of file RooParametricStepFunction.h. Libraries for RooParametricStepFunction:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooParametricStepFunction.h; roofit/roofit/src/RooParametricStepFunction.cxx. RooParametricStepFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:83005,Guid,Guide,83005,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['Guid'],['Guide']
Usability,"ine 59 of file TXMLParser.h. ◆ GetParseCodeMessage(). const char * TXMLParser::GetParseCodeMessage ; (; Int_t ; parseCode); const. Returns the parse code message. ; Definition at line 122 of file TXMLParser.cxx. ◆ GetReplaceEntities(). Bool_t TXMLParser::GetReplaceEntities ; (; ); const. inline . Definition at line 53 of file TXMLParser.h. ◆ GetStopOnError(). Bool_t TXMLParser::GetStopOnError ; (; ); const. inline . Definition at line 64 of file TXMLParser.h. ◆ GetValidate(). Bool_t TXMLParser::GetValidate ; (; ); const. inline . Definition at line 50 of file TXMLParser.h. ◆ GetValidateError(). const char * TXMLParser::GetValidateError ; (; ); const. inline . Definition at line 66 of file TXMLParser.h. ◆ GetValidateWarning(). const char * TXMLParser::GetValidateWarning ; (; ); const. inline . Definition at line 67 of file TXMLParser.h. ◆ InitializeContext(). void TXMLParser::InitializeContext ; (; ). protectedvirtual . Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ; Definition at line 152 of file TXMLParser.cxx. ◆ IsA(). TClass * TXMLParser::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TXMLParser.h. ◆ OnValidateError(). void TXMLParser::OnValidateError ; (; const TString & ; message). protectedvirtual . This function is called when an error from the parser has occurred. ; Message is the parse error. ; Definition at line 105 of file TXMLParser.cxx. ◆ OnValidateWarning(). void TXMLParser::OnValidateWarning ; (; const TString & ; message). protectedvirtual . This function is called when a warning from the parser has occurred. ; Message is the parse error. ; Definition at line 114 of file TXMLParser.cxx. ◆ operator=(). TXMLParser & TXMLParser::operator= ; (; const TXMLParser & ; ). privatedelete . ◆ ParseBuffer(). virtual Int_t TXMLParser::ParseBuffer ; (; const char * ; contents, . I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:18926,clear,clear,18926,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['clear'],['clear']
Usability,ine 60 of file TSpider.h. ◆ fMax. Double_t* TSpider::fMax. private . [fNcols] Maximum value of the variables. ; Definition at line 51 of file TSpider.h. ◆ fMin. Double_t* TSpider::fMin. private . [fNcols] Minimum value of the variables. ; Definition at line 52 of file TSpider.h. ◆ fNcols. UInt_t TSpider::fNcols. private . Number of variables. ; Definition at line 44 of file TSpider.h. ◆ fNentries. Long64_t TSpider::fNentries. private . Number of entries. ; Definition at line 47 of file TSpider.h. ◆ fNx. UInt_t TSpider::fNx. private . Number of horizontal spider plots. ; Definition at line 42 of file TSpider.h. ◆ fNy. UInt_t TSpider::fNy. private . Number of vertical spider plots. ; Definition at line 43 of file TSpider.h. ◆ fPolargram. TGraphPolargram* TSpider::fPolargram. private . Polar graph. ; Definition at line 61 of file TSpider.h. ◆ fPolyList. TList* TSpider::fPolyList. private . Polygons representing the variables. ; Definition at line 62 of file TSpider.h. ◆ fSegmentDisplay. bool TSpider::fSegmentDisplay. private . True if displaying a segment plot. ; Definition at line 68 of file TSpider.h. ◆ fSelect. TTreeFormula* TSpider::fSelect. private . Selection condition. ; Definition at line 63 of file TSpider.h. ◆ fSelector. TSelectorDraw* TSpider::fSelector. private . ! Selector. ; Definition at line 64 of file TSpider.h. ◆ fShowRange. bool TSpider::fShowRange. private . Show range of variables or not. ; Definition at line 69 of file TSpider.h. ◆ fSuperposed. TList* TSpider::fSuperposed. private . Superposed spider plots. ; Definition at line 53 of file TSpider.h. ◆ fTree. TTree* TSpider::fTree. private . Pointer to the TTree to represent. ; Definition at line 54 of file TSpider.h. Libraries for TSpider:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TSpider.h; tree/treeviewer/src/TSpider.cxx. TSpider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpider.html:34438,Guid,Guide,34438,doc/master/classTSpider.html,https://root.cern,https://root.cern/doc/master/classTSpider.html,1,['Guid'],['Guide']
Usability,"ine 64 of file TArc.cxx. Member Function Documentation. ◆ Class(). static TClass * TArc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TArc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TArc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file TArc.h. ◆ Copy(). void TArc::Copy ; (; TObject & ; arc); const. overridevirtual . Copy this arc to arc. ; Reimplemented from TObject.; Definition at line 71 of file TArc.cxx. ◆ DeclFileName(). static const char * TArc::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file TArc.h. ◆ DrawArc(). TArc * TArc::DrawArc ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; radius, . Double_t ; phimin = 0, . Double_t ; phimax = 360, . Option_t * ; option = """" . ). virtual . Draw this arc with new coordinates. ; Definition at line 79 of file TArc.cxx. ◆ IsA(). TClass * TArc::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 40 of file TArc.h. ◆ SavePrimitive(). void TArc::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 92 of file TArc.cxx. ◆ Streamer(). void TArc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TArc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 40 of file TArc.h. Libraries for TArc:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TArc.h; graf2d/graf/src/TArc.cxx. TArc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:20793,Guid,Guide,20793,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,1,['Guid'],['Guide']
Usability,ine 74 of file TEveManager.h. ◆ ~TExceptionHandler(). TEveManager::TExceptionHandler::~TExceptionHandler ; (; ). inlineoverride . Definition at line 75 of file TEveManager.h. Member Function Documentation. ◆ Class(). static TClass * TEveManager::TExceptionHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveManager::TExceptionHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveManager::TExceptionHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 79 of file TEveManager.h. ◆ DeclFileName(). static const char * TEveManager::TExceptionHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 79 of file TEveManager.h. ◆ Handle(). TStdExceptionHandler::EStatus TEveManager::TExceptionHandler::Handle ; (; std::exception & ; exc). overridevirtual . Handle exceptions deriving from TEveException. ; Implements TStdExceptionHandler.; Definition at line 939 of file TEveManager.cxx. ◆ IsA(). TClass * TEveManager::TExceptionHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 79 of file TEveManager.h. ◆ Streamer(). void TEveManager::TExceptionHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveManager::TExceptionHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TEveManager.h. Libraries for TEveManager::TExceptionHandler:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveManager.h; graf3d/eve/src/TEveManager.cxx. TEveManagerTExceptionHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html:18310,Guid,Guide,18310,doc/master/classTEveManager_1_1TExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html,1,['Guid'],['Guide']
Usability,ine 79 of file HyperParameterOptimisation.h. ◆ SetFOMType(). void TMVA::HyperParameterOptimisation::SetFOMType ; (; TString ; ftype). inline . Definition at line 84 of file HyperParameterOptimisation.h. ◆ SetNumFolds(). void TMVA::HyperParameterOptimisation::SetNumFolds ; (; UInt_t ; folds). Definition at line 87 of file HyperParameterOptimisation.cxx. ◆ Streamer(). virtual void TMVA::HyperParameterOptimisation::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::HyperParameterOptimisation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 103 of file HyperParameterOptimisation.h. Member Data Documentation. ◆ fClassifier. std::unique_ptr<Factory> TMVA::HyperParameterOptimisation::fClassifier. private . ! ; Definition at line 100 of file HyperParameterOptimisation.h. ◆ fFitType. TString TMVA::HyperParameterOptimisation::fFitType. private . ! ; Definition at line 96 of file HyperParameterOptimisation.h. ◆ fFoldStatus. Bool_t TMVA::HyperParameterOptimisation::fFoldStatus. private . ! ; Definition at line 98 of file HyperParameterOptimisation.h. ◆ fFomType. TString TMVA::HyperParameterOptimisation::fFomType. private . ! ; Definition at line 95 of file HyperParameterOptimisation.h. ◆ fNumFolds. UInt_t TMVA::HyperParameterOptimisation::fNumFolds. private . ! ; Definition at line 97 of file HyperParameterOptimisation.h. ◆ fResults. HyperParameterOptimisationResult TMVA::HyperParameterOptimisation::fResults. private . ! ; Definition at line 99 of file HyperParameterOptimisation.h. Libraries for TMVA::HyperParameterOptimisation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/HyperParameterOptimisation.h; tmva/tmva/src/HyperParameterOptimisation.cxx. TMVAHyperParameterOptimisation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:22079,Guid,Guide,22079,doc/master/classTMVA_1_1HyperParameterOptimisation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html,1,['Guid'],['Guide']
Usability,"ine color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TTUBE. ←; TTUBS. ←. TCONS. TCTUB. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTUBS.html:10129,simpl,simplified,10129,root/html604/TTUBS.html,https://root.cern,https://root.cern/root/html604/TTUBS.html,1,['simpl'],['simplified']
Usability,"ine color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tfPhi1first phi limit; Float_tfPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TTUBE. ←; TTUBS. ←. TCONS. TCTUB. Function documentation; TTUBS(); TUBS shape default constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape normal constructor. TTUBS(const char* name, const char* title, const char* material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2); TUBS shape ""simplified"" constructor. void MakeTableOfCoSin() const; Make table of sine and cosine. ~TTUBS(); TUBS shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a TUBE. Compute the closest distance of approach from point px,py to each; computed outline point of the TUBE. void SetPoints(Double_t* points) const; Create TUBS points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TTUBS(). Float_t GetPhi1() const; {return fPhi1;}. Float_t GetPhi2() const; {return fPhi2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTUBS.html:10129,simpl,simplified,10129,root/html602/TTUBS.html,https://root.cern,https://root.cern/root/html602/TTUBS.html,1,['simpl'],['simplified']
Usability,"ine command. Now let us execute a multi-line command:; root [] {; root [] ? TLine l;; root [] ? for (int i = 0; i < 5; i++) {; root [] ? l.SetX1(i);; root [] ? l.SetY1(i+1);; root [] ? l.Print();; root [] ? }; root [] ? }; TLine X1=0.000000 Y1=1.000000 X2=0.000000 Y2=0.000000; TLine X1=1.000000 Y1=2.000000 X2=0.000000 Y2=0.000000; TLine X1=2.000000 Y1=3.000000 X2=0.000000 Y2=0.000000; TLine X1=3.000000 Y1=4.000000 X2=0.000000 Y2=0.000000; TLine X1=4.000000 Y1=5.000000 X2=0.000000 Y2=0.000000; root [] .q; Here we note:. A multi-line command starts with a { and ends with a }.; Inside continuation, every line has to be correctly terminated with a ; (like in ""real’’ C++).; All objects are created in global scope.; There is no way to back up; you are better off writing a script.; Use .q to exit root. 7.2 Feeding Sources Files To ROOT: C++ Scripts; ROOT script files (often called “Macros”) contain pure C++ code. They can contain a simple sequence of statements like in the multi command line example given above, but also arbitrarily complex class and function definitions.; The most frequent interaction with the ROOT prompt uses .x to “run” a file:; root [] .x myScript.C; This loads myScript.C into the interpreter and calls the function myScript(). You can pass arguments using .x myScript.C(12, ""A String"").; Alternatively you can load the script and then run a function explicitly:; root [] .L myScript.C; root [] myScript(); The above is equivalent to .x myScript.C.; In a named script, the objects created on the stack are deleted when the function exits. In a common scenario you create a histogram in a named script on the stack. You draw the histogram, but when the function exits the canvas is empty and the histogram has disappeared. To avoid the histogram from disappearing you can create it on the heap (by using new). This will leave the histogram object intact, but the pointer in the named script scope will be “gone”. Since histograms (and trees) are added to the list of o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:263194,simpl,simple,263194,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ine fqdn> login <user> password-hash <passwd>; and in addition ~/.rootnetrc also supports:; secure <machine fqdn> login <user> password <passwd>; <machine fqdn> may be a domain name or contain the wild card '*'.; for the secure protocols. All lines must start in the first column. ; Definition at line 908 of file TAuthenticate.cxx. ◆ CheckProofAuth(). Bool_t TAuthenticate::CheckProofAuth ; (; Int_t ; cSec, . TString & ; det . ). static . Check if the authentication method can be attempted for the client. ; Definition at line 3541 of file TAuthenticate.cxx. ◆ Class(). static TClass * TAuthenticate::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAuthenticate::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TAuthenticate::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TAuthenticate.h. ◆ ClearAuth(). Int_t TAuthenticate::ClearAuth ; (; TString & ; user, . TString & ; passwd, . Bool_t & ; pwdhash . ). private . UsrPwd client authentication code. ; Returns 0 in case authentication failed 1 in case of success ; Definition at line 1509 of file TAuthenticate.cxx. ◆ DeclFileName(). static const char * TAuthenticate::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TAuthenticate.h. ◆ DecodeRSAPublic(). Int_t TAuthenticate::DecodeRSAPublic ; (; const char * ; rsapubexport, . R__rsa_NUMBER & ; n, . R__rsa_NUMBER & ; d, . char ** ; rsassl = nullptr . ). static . Store RSA public keys from export string rsaPubExport. ; Definition at line 2936 of file TAuthenticate.cxx. ◆ FileExpand(). void TAuthenticate::FileExpand ; (; const char * ; fexp, . FILE * ; ftmp . ). staticprivate . Expands include directives found in fexp files The expanded, temporary file, is pointed to by 'ftmp' and should be already open. ; To be called recursively. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:24825,Clear,ClearAuth,24825,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['Clear'],['ClearAuth']
Usability,"ine(2,line3);; 11220 gVirtualX->DrawPolyLine(2,line4);; 11221 gVirtualX->DrawPolyLine(5,endface1);; 11222 gVirtualX->DrawPolyLine(5,endface2);; 11223 }; 11224 xx[0]=xaxis->GetBinCenter(binx);; 11225 xx[2] = zaxis->GetBinCenter(binz);; 11226 xx[1] = yaxis->GetXmin();; 11227 view->WCtoNDC(xx,u);; 11228 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11229 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11230 xx[1] = yaxis->GetXmax();; 11231 view->WCtoNDC(xx,u);; 11232 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11233 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11234 gVirtualX->DrawPolyLine(2,line1);; 11235 if (nbins>1) {; 11236 xx[1] = yaxis->GetXmin();; 11237 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11238 xx[0] = xaxis->GetBinCenter(binx);; 11239 view->WCtoNDC(xx,u);; 11240 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11241 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11257 ; 11258 xx[1] = yaxis->GetXmin();; 11259 xx[2] = zaxis->GetBinCenter(binz);; 11260 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11261 view->WCtoNDC(xx,u);; 11262 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11263 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11264 xx[1] = yaxis->GetXmax();; 11265 view->WCtoNDC(xx,u);; 11266 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11267 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11268 ; 11269 endface1[0].SetX(line1[0].GetX());; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:407349,ux,uxmin,407349,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"ine(npt,gxworkl.data(),gyworkl.data(),noClip);; 2056 continue;; 2057 }; 2058 } //endfor (i=first; i<=last;i++); 2059 }; 2060 }; 2061 ; 2062 // Draw the histogram with a smooth Curve.; 2063 // The smoothing is done by the method Smooth(); 2064 ; 2065 if (optionCurve) {; 2066 if (!optionFill) {; 2067 drawtype = 1;; 2068 } else {; 2069 if (!optionOne) drawtype = 2;; 2070 else drawtype = 3;; 2071 }; 2072 if (!optionRot) {; 2073 npt = 0;; 2074 for (i=first; i<=last;i++) {; 2075 npt++;; 2076 if (!optionBins) {; 2077 gxwork[npt-1] = wmin+(i-first)*delta+0.5*delta;; 2078 } else {; 2079 xi1 = x[i]; xi = x[i-1];; 2080 if (xi1 < xi) {; 2081 if (i != last) Error(where, ""X must be in increasing order"");; 2082 else Error(where, ""X must have N+1 values with option N"");; 2083 goto do_cleanup;; 2084 }; 2085 gxwork[npt-1] = x[i-1] + 0.5*(x[i]-x[i-1]);; 2086 }; 2087 if (gxwork[npt-1] < uxmin || gxwork[npt-1] > uxmax) {; 2088 npt--;; 2089 continue;; 2090 }; 2091 gywork[npt-1] = y[i-1];; 2092 ComputeLogs(npt, optionZ);; 2093 if ((gyworkl[npt-1] < rwymin) || (gyworkl[npt-1] > rwymax)) {; 2094 if (npt > 2) {; 2095 ComputeLogs(npt, optionZ);; 2096 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2097 }; 2098 gxwork[0] = gxwork[npt-1];; 2099 gywork[0] = gywork[npt-1];; 2100 npt = 1;; 2101 continue;; 2102 }; 2103 if (npt >= fgMaxPointsPerLine) {; 2104 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2105 Smooth(theGraph, fgMaxPointsPerLine,gxworkl.data(),gyworkl.data(),drawtype);; 2106 gxwork[0] = gxwork[npt-1];; 2107 gywork[0] = gywork[npt-1];; 2108 npt = 1;; 2109 }; 2110 } //endfor (i=first; i<=last;i++); 2111 if (npt > 1) {; 2112 ComputeLogs(npt, optionZ);; 2113 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2114 }; 2115 } else {; 2116 drawtype = drawtype+10;; 2117 npt = 0;; 2118 for (i=first; i<=last;i++) {; 2119 npt++;; 2120 if (!optionBins) {; 2121 gywork[npt-1] = wmin+(i-first)*delta+0.5*delta;; 2122 } else {; 2123 yi1 = y[i]; yi = y[i-1];; 2124 if (yi1 < yi) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:76541,ux,uxmin,76541,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"ine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams.Definition TCurlyArc.h:16; TCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams.Definition TCurlyLine.h:19; TCurlyLine::TCurlyLineTCurlyLine()Default constructor.Definition TCurlyLine.cxx:46; TCurlyLine::SetWavyvirtual void SetWavy()Set wavy.Definition TCurlyLine.cxx:369; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPolyLine::Drawvoid Draw(Option_t *option="""") overrideDraw this polyline with its current attributes.Definition TPolyLine.cxx:215; int; c1return c1Definition legend1.C:41; ginitstatic int ginitDefinition rsalib.cxx:256; lTLine lDefinition textangle.C:4; . Definition at line 19 of file TCurlyLine.h. Public Member Functions;  TCurlyLine ();  Default constructor. ;  ;  TCurlyLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl=.02, Double_t amp=.01);  Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2). ;  ;  ~TCurlyLine () override;  ; virtual void Build ();  Create a curly (Gluon) or wavy (Gamma) line. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyLine.html:3260,simpl,simple,3260,doc/master/classTCurlyLine.html,https://root.cern,https://root.cern/doc/master/classTCurlyLine.html,1,['simpl'],['simple']
Usability,"ine; TH1(const TH1 &)=deleteTH1private; TH1()TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1protected; TH2()TH2protected; TH2(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup)TH2protected; TH2(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup)TH2protected; TH2(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins)TH2protected; TH2(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins)TH2protected; TH2(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins)TH2protected; TH2(const TH2 &)=deleteTH2private; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)TH1static; UpdateBinContent(Int_t bin, Double_t content)TH1protectedvirtual; UseCurrentStyle() overrideTH1virtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TH1() overrideTH1; ~TH2() overrideTH2; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2-members.html:27257,Guid,Guide,27257,doc/master/classTH2-members.html,https://root.cern,https://root.cern/doc/master/classTH2-members.html,1,['Guid'],['Guide']
Usability,"ineColor=""kP6Blue+1"", ShiftToZero=True, Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, LineColor=""kP6Blue+2"", ShiftToZero=True, Name=""morphed""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); ; # Plot the likelihood functions; frame2 = x_var.frame(Title=""Likelihood ratio r(x|#mu=2.5);x;p_{gauss}/p_{uniform}""); llhr_learned.plotOn(frame2, LineColor=""kP6Blue"", Name=""learned_ratio""); llhr_calc.plotOn(frame2, LineColor=""kP6Blue+1"", Name=""exact""); ; # Write the plots into one canvas to show, or into separate canvases for saving.; single_canvas = True; ; c = ROOT.TCanvas("""", """", 1200 if single_canvas else 600, 600); if single_canvas:; c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.8); frame1.Draw(); ; legend1 = ROOT.TLegend(0.43, 0.63, 0.8, 0.87); legend1.SetFillColor(ROOT.kWhite); legend1.SetLineColor(ROOT.kWhite); legend1.SetTextSize(0.04); legend1.AddEntry(""learned"", ""learned (SBI)"", ""L""); legend1.AddEntry(""gauss"", ""true NLL"", ""L""); legend1.AddEntry(""morphed"", ""moment morphing"", ""L""); legend1.Draw(); ; if single_canvas:; c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); else:; c.SaveAs(""rf615_plot_1.png""); c = ROOT.TCanvas("""", """", 600, 600); ; frame2.Draw(); ; legend2 = ROOT.TLegend(0.53, 0.73, 0.87, 0.87); legend2.SetFillColor(ROOT.kWhite); legend2.SetLineColor(ROOT.kWhite); legend2.SetTextSize(0.04); legend2.AddEntry(""learned_ratio"", ""learned (SBI)"", ""L""); legend2.AddEntry(""exact"", ""true ratio"", ""L""); legend2.Draw(); ; if not single_canvas:; c.SaveAs(""rf615_plot_2.png""); ; # Compute the minimum via minuit and display the results; for nll in [nll_gauss, nllr_learned, nll_morph]:; minimizer = ROOT.RooMinimizer(nll); minimizer.setErrorLevel(0.5) # Adjust the error level in the minimization to work with likelihoods; minimizer.setPrintLevel(-1); minimizer.minimize(""Minuit2""); result = minimizer.save(); ROOT.SetOwnership(result, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:8590,learn,learned,8590,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,2,['learn'],['learned']
Usability,ineImpl.cxx. ◆ ~RanluxppCompatEngineLuescherRanlxd(). template<int p> . ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::~RanluxppCompatEngineLuescherRanlxd ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). template<int p> . uint64_t ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::IntRndm. Generate a random integer value with 48 bits. ; Definition at line 728 of file RanluxppEngineImpl.cxx. ◆ Name(). template<int p> . static const char * ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 235 of file RanluxppEngine.h. ◆ operator()(). template<int p> . double ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::operator(). Generate a floating point random number (non-virtual method) ; Definition at line 722 of file RanluxppEngineImpl.cxx. ◆ Rndm(). template<int p> . double ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::Rndm. overridevirtual . Generate a floating point random number with 48 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 716 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). template<int p> . void ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 734 of file RanluxppEngineImpl.cxx. ◆ Skip(). template<int p> . void ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 740 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. template<int p> . std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineLuescherRanlxd< p >::fImpl. private . Definition at line 216 of file RanluxppEngine.h. math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineLuescherRanlxd. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html:4107,Guid,Guide,4107,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxd.html,1,['Guid'],['Guide']
Usability,ineImpl.cxx. ◆ ~RanluxppCompatEngineLuescherRanlxs(). template<int p> . ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::~RanluxppCompatEngineLuescherRanlxs ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). template<int p> . uint64_t ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::IntRndm. Generate a random integer value with 24 bits. ; Definition at line 684 of file RanluxppEngineImpl.cxx. ◆ Name(). template<int p> . static const char * ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 198 of file RanluxppEngine.h. ◆ operator()(). template<int p> . double ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::operator(). Generate a floating point random number (non-virtual method) ; Definition at line 678 of file RanluxppEngineImpl.cxx. ◆ Rndm(). template<int p> . double ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::Rndm. overridevirtual . Generate a floating point random number with 24 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 672 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). template<int p> . void ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 690 of file RanluxppEngineImpl.cxx. ◆ Skip(). template<int p> . void ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 696 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. template<int p> . std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineLuescherRanlxs< p >::fImpl. private . Definition at line 179 of file RanluxppEngine.h. math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineLuescherRanlxs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html:4107,Guid,Guide,4107,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineLuescherRanlxs.html,1,['Guid'],['Guide']
Usability,"inenoexcept . Definition at line 145 of file RIndexIter.hxx. ◆ operator>(). template<class REFERENCE , class POINTER > . bool ROOT::Experimental::Internal::operator> ; (; RIndexIter< REFERENCE, POINTER > ; lhs, . RIndexIter< REFERENCE, POINTER > ; rhs . ). noexcept . Definition at line 127 of file RIndexIter.hxx. ◆ operator>=(). template<class REFERENCE , class POINTER > . bool ROOT::Experimental::Internal::operator>= ; (; RIndexIter< REFERENCE, POINTER > ; lhs, . RIndexIter< REFERENCE, POINTER > ; rhs . ). inlinenoexcept . Definition at line 139 of file RIndexIter.hxx. ◆ swap(). void ROOT::Experimental::Internal::swap ; (; RDirectoryEntry & ; e1, . RDirectoryEntry & ; e2 . ). inlinenoexcept . Definition at line 94 of file RDirectoryEntry.hxx. Variable Documentation. ◆ kTestFutureColumn. constexpr EColumnCppType ROOT::Experimental::Internal::kTestFutureColumn. inlineconstexpr . Initial value:=; static_cast<EColumnCppType>(std::numeric_limits<std::underlying_type_t<EColumnCppType>>::max() - 1); ROOT::Experimental::Internal::EColumnCppTypeEColumnCppTypeDefinition RColumnElementBase.hxx:119. Definition at line 138 of file RColumnElementBase.hxx. ◆ kTestFutureFieldStructure. constexpr ENTupleStructure ROOT::Experimental::Internal::kTestFutureFieldStructure. inlineconstexpr . Initial value:=; static_cast<ENTupleStructure>(std::numeric_limits<std::underlying_type_t<ENTupleStructure>>::max() - 1); ROOT::Experimental::ENTupleStructureENTupleStructureThe fields in the ntuple model tree can carry different structural information about the type system.Definition RNTupleUtil.hxx:112. Definition at line 268 of file RNTupleUtil.hxx. ◆ kTestLocatorType. constexpr RNTupleLocator::ELocatorType ROOT::Experimental::Internal::kTestLocatorType = static_cast<RNTupleLocator::ELocatorType>(0x7e). inlineconstexpr . Definition at line 271 of file RNTupleUtil.hxx. ROOTExperimentalInternal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:26254,Guid,Guide,26254,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,1,['Guid'],['Guide']
Usability,"ineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.h. ◆ DrawBox(). void TWebPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 102 of file TWebPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 124 of file TWebPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 140 of file TWebPadPainter.cxx. ◆ DrawLine(). void TWebPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 65 of file TWebPadPainter.cxx. ◆ DrawLineNDC(). void TWebPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ; Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.cxx. ◆ DrawPixels(). void TWebPadPainter::DrawPixels ; (; const unsigned char * ; pixelData, . UInt_t ; width, . UInt_t ; height, . Int_t ; dstX, . Int_t ; dstY, . Bool_t ; enableAlphaBlending . ). overridevirtual . Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ; Implements TVirtualPadPainter.; Definition at line 55 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [1/2]. void TWebPadPainter::DrawPolyLine ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint Polyline. ; Implements TVirtualPadPainter.; Definition at line 156 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [2/2]. void TWebP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:15315,simpl,simple,15315,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,"ineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 551 of file TGeoPatternFinder.h. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternHoneycomb::MakeCopy ; (; Bool_t ; ). inlineoverridevirtual . Implements TGeoPatternFinder.; Definition at line 545 of file TGeoPatternFinder.h. ◆ operator=(). TGeoPatternHoneycomb & TGeoPatternHoneycomb::operator= ; (; const TGeoPatternHoneycomb & ; pfh). protected . assignment operator ; Definition at line 2351 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternHoneycomb::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternHoneycomb::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 551 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternHoneycomb::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 2395 of file TGeoPatternFinder.cxx. Member Data Documentation. ◆ fAxisOnRows. Int_t TGeoPatternHoneycomb::fAxisOnRows. private . Definition at line 530 of file TGeoPatternFinder.h. ◆ fNdivisions. Int_t* TGeoPatternHoneycomb::fNdivisions. private . Definition at line 531 of file TGeoPatternFinder.h. ◆ fNrows. Int_t TGeoPatternHoneycomb::fNrows. private . Definition at line 529 of file TGeoPatternFinder.h. ◆ fStart. Double_t* TGeoPatternHoneycomb::fStart. private . Definition at line 532 of file TGeoPatternFinder.h. Libraries for TGeoPatternHoneycomb:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternHoneycomb. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternHoneycomb.html:17578,Guid,Guide,17578,doc/master/classTGeoPatternHoneycomb.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html,1,['Guid'],['Guide']
Usability,iners or lists of other objects). ; Reimplemented from TObject.; Definition at line 51 of file TRemoteObject.h. ◆ SetFolder(). void TRemoteObject::SetFolder ; (; Bool_t ; isFolder). inline . Definition at line 57 of file TRemoteObject.h. ◆ SetKeyClassName(). void TRemoteObject::SetKeyClassName ; (; const char * ; name). inline . Definition at line 59 of file TRemoteObject.h. ◆ SetKeyObjectName(). void TRemoteObject::SetKeyObjectName ; (; const char * ; name). inline . Definition at line 58 of file TRemoteObject.h. ◆ SetRemoteAddress(). void TRemoteObject::SetRemoteAddress ; (; Longptr_t ; addr). inline . Definition at line 60 of file TRemoteObject.h. ◆ Streamer(). void TRemoteObject::Streamer ; (; TBuffer & ; b). overridevirtual . Remote object streamer. ; Reimplemented from TNamed.; Definition at line 207 of file TRemoteObject.cxx. ◆ StreamerNVirtual(). void TRemoteObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TRemoteObject.h. Member Data Documentation. ◆ fClassName. TString TRemoteObject::fClassName. protected . Definition at line 40 of file TRemoteObject.h. ◆ fFileStat. FileStat_t TRemoteObject::fFileStat. protected . Definition at line 37 of file TRemoteObject.h. ◆ fIsFolder. Bool_t TRemoteObject::fIsFolder. protected . Definition at line 38 of file TRemoteObject.h. ◆ fKeyClassName. TString TRemoteObject::fKeyClassName. protected . Definition at line 42 of file TRemoteObject.h. ◆ fKeyObjectName. TString TRemoteObject::fKeyObjectName. protected . Definition at line 41 of file TRemoteObject.h. ◆ fRemoteAddress. Long64_t TRemoteObject::fRemoteAddress. protected . Definition at line 39 of file TRemoteObject.h. Libraries for TRemoteObject:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TRemoteObject.h; core/base/src/TRemoteObject.cxx. TRemoteObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRemoteObject.html:16512,Guid,Guide,16512,doc/master/classTRemoteObject.html,https://root.cern,https://root.cern/doc/master/classTRemoteObject.html,1,['Guid'],['Guide']
Usability,"ines smoother and the final prediction chosen by linear interpolation.; The FORTRAN code says: `‘For small samples (n < 40) or if there are substantial serial correlations between observations close in x - value, then a prespecified fixed span smoother (span > 0) should be used. Reasonable span values are 0.2 to 0.4.’'; References:; Friedman, J. H. (1984) SMART User's Guide. Laboratory for Computational Statistics, Stanford University Technical Report No. 1.; Friedman, J. H. (1984) A variable span scatterplot smoother. Laboratory for Computational Statistics, Stanford University Technical Report No. 5. . Definition at line 479 of file TGraphSmooth.cxx. ◆ Streamer(). void TGraphSmooth::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphSmooth::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TGraphSmooth.h. Member Data Documentation. ◆ fGin. TGraph* TGraphSmooth::fGin. protected . Input graph. ; Definition at line 43 of file TGraphSmooth.h. ◆ fGout. TGraph* TGraphSmooth::fGout. protected . Output graph. ; Definition at line 44 of file TGraphSmooth.h. ◆ fMaxX. Double_t TGraphSmooth::fMaxX. protected . Maximum value of array X. ; Definition at line 46 of file TGraphSmooth.h. ◆ fMinX. Double_t TGraphSmooth::fMinX. protected . Minimum value of array X. ; Definition at line 45 of file TGraphSmooth.h. ◆ fNin. Int_t TGraphSmooth::fNin. protected . Number of input points. ; Definition at line 41 of file TGraphSmooth.h. ◆ fNout. Int_t TGraphSmooth::fNout. protected . Number of output points. ; Definition at line 42 of file TGraphSmooth.h. Libraries for TGraphSmooth:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphSmooth.h; hist/hist/src/TGraphSmooth.cxx. TGraphSmooth. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:28353,Guid,Guide,28353,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['Guid'],['Guide']
Usability,"inestatic . ReturnsName of the file containing the class declaration ; Definition at line 228 of file TProofPlayer.h. ◆ DeleteDrawFeedback(). void TProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). overridevirtual . Delete draw feedback object. ; Implements TVirtualProofPlayer.; Definition at line 750 of file TProofPlayer.cxx. ◆ DrawCanvas(). Int_t TProofPlayer::DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 1658 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayer::Feedback ; (; TList * ; objs). overridevirtual . Set feedback list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 724 of file TProofPlayer.cxx. ◆ FeedBackCanvas(). void TProofPlayer::FeedBackCanvas ; (; const char * ; name, . Bool_t ; create . ). Create/destroy a named canvas for feedback. ; Definition at line 1765 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayer::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1571 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayer::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:28337,Feedback,Feedback,28337,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['Feedback'],['Feedback']
Usability,"inevirtual . Definition at line 108 of file TEveStraightLineSet.h. ◆ Streamer(). void TEveStraightLineSet::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveStraightLineSetProjected. ◆ StreamerNVirtual(). void TEveStraightLineSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TEveStraightLineSet.h. ◆ WriteVizParams(). void TEveStraightLineSet::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from TEveElement.; Definition at line 145 of file TEveStraightLineSet.cxx. Member Data Documentation. ◆ fDepthTest. Bool_t TEveStraightLineSet::fDepthTest. protected . Definition at line 82 of file TEveStraightLineSet.h. ◆ fLastLine. Line_t* TEveStraightLineSet::fLastLine. protected . Definition at line 84 of file TEveStraightLineSet.h. ◆ fLinePlex. TEveChunkManager TEveStraightLineSet::fLinePlex. protected . Definition at line 73 of file TEveStraightLineSet.h. ◆ fMarkerPlex. TEveChunkManager TEveStraightLineSet::fMarkerPlex. protected . Definition at line 74 of file TEveStraightLineSet.h. ◆ fOwnLinesIds. Bool_t TEveStraightLineSet::fOwnLinesIds. protected . Definition at line 76 of file TEveStraightLineSet.h. ◆ fOwnMarkersIds. Bool_t TEveStraightLineSet::fOwnMarkersIds. protected . Definition at line 77 of file TEveStraightLineSet.h. ◆ fRnrLines. Bool_t TEveStraightLineSet::fRnrLines. protected . Definition at line 80 of file TEveStraightLineSet.h. ◆ fRnrMarkers. Bool_t TEveStraightLineSet::fRnrMarkers. protected . Definition at line 79 of file TEveStraightLineSet.h. Libraries for TEveStraightLineSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveStraightLineSet.h; graf3d/eve/src/TEveStraightLineSet.cxx. TEveStraightLineSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSet.html:51369,Guid,Guide,51369,doc/master/classTEveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html,1,['Guid'],['Guide']
Usability,"ing () const;  Returns kTRUE if logging is ON. ;  ; void ls (Option_t *option="""") const override;  Lists all commands in stack. ;  ; void Redo (Option_t *option="""") override;  Performs redo action. Move cursor position forward in history stack. ;  ; virtual void SetLimit (UInt_t limit);  Returns a maximum number of commands which could be located in stack. ;  ; virtual void SetLogging (Bool_t on=kTRUE);  Start logging. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Undo (Option_t *option="""") override;  Performs undo action. Move cursor position backward in history stack. ;  ;  Public Member Functions inherited from TQCommand;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:2221,undo,undo,2221,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"ing By Coding | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 9. Fitting By Coding. TF1; In ROOT you can fit histograms (or TEfficiency objects) using formulas that you provide, and that ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:1010,Guid,Guides,1010,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,1,['Guid'],['Guides']
Usability,"ing C++ user code to be used from Python with; 23# PyROOT, please see:; 24# https://root.cern.ch/manual/python/#loading-user-libraries-and-just-in-time-compilation-jitting; 25ROOT.gInterpreter.Declare('''; 26class MyClass {};; 27'''); 28 ; 29# Next, we define a pythonizor function: the function that will be responsible; 30# for injecting new behaviour in our C++ class `MyClass`.; 31#; 32# To convert a given Python function into a pythonizor, we need to decorate it; 33# with the @pythonization decorator. Such decorator allows us to define which; 34# which class we want to pythonize by providing its class name and its; 35# namespace (if the latter is not specified, it defaults to the global; 36# namespace, i.e. '::').; 37#; 38# The decorated function - the pythonizor - must accept either one or two; 39# parameters:; 40# 1. The class to be pythonized (proxy object where new behaviour can be; 41# injected); 42# 2. The fully-qualified name of that class (optional).; 43#; 44# Let's see all this with a simple example. Suppose I would like to define how; 45# `MyClass` objects are represented as a string in Python (i.e. what would be; 46# shown when I print that object). For that purpose, I can define the following; 47# pythonizor function. There are two important things to be noted here:; 48# - The @pythonization decorator has one argument that specifies our target; 49# class is `MyClass`.; 50# - The pythonizor function `pythonizor_of_myclass` provides and injects a new; 51# implementation for `__str__`, the mechanism that Python provides to define; 52# how to represent objects as strings. This new implementation; 53# always returns the string ""This is a MyClass object"".; 54@pythonization('MyClass'); 55def pythonizor_of_myclass(klass):; 56 klass.__str__ = lambda o : 'This is a MyClass object'; 57 ; 58# Once we have defined our pythonizor function, let's see it in action.; 59# We will now use the `MyClass` class for the first time from Python: we will; 60# create a new insta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html:2037,simpl,simple,2037,doc/master/pyroot002__pythonizationDecorator_8py_source.html,https://root.cern,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html,1,['simpl'],['simple']
Usability,"ing Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling; Namespaces; Using comments to document the code; Source file layout. Header file layout; Implementation file layout. Preferred Coding Style. Indentation; Placing Braces and Spaces. ClangFormat; Astyle; Where to go from here. Naming conventions; For naming conventions we follow the Taligent rules. They have written a very large body of C++ and their rules seem well thought out. No need to invent something new. The only addition/change we made is to append an _t to typedefs and simple structs, e.g.:; typedef int Int_t ; struct Simple_t { ..... } ; ; Addherence to the rules is mandatory. After a while one really gets used to the fact that all class fields start with an f followed by a capitalized word, fEnergy, or that TStreamerInfo is a class. If the convention is sporadically violated debugging becomes a nightmare. The usage of a standard begin letter or token for the different types also makes it easy to parse and search the code using simple tools.; Class definition conventions; Also here the Taligent guide is quite reasonable. Of course, no class data member should ever be public. Make the data fields always private. Or protected, if you want to grant an inherited class direct access.; Inline; Add trivial get or setters directly in the class definition. This improves reading time since one does not have to look for it somewhere else. Add more complex inlines (longer than one line) at the bottom of the .h file. Creating separate .i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:2484,simpl,simple,2484,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['simpl'],['simple']
Usability,"ing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► eve7;  collection.CThis example display collection of ??? in web browser ;  compound.C;  csgdemo.CCombinatorial Solid Geometry example ;  event_demo.CThis example display geometry, tracks and hits in web browser ;  geom_cms.C;  points.CThis example display only points in web browser ;  projection_prescale.C;  show_extract.CHelper script for showing of extracted / simplified geometries ;  table.CThis example display table in web browser ;  tracks.CThis example display only points in web browser ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:106278,simpl,simplified,106278,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simplified']
Usability,"ing X and Y errors; fit1 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1); fit1.Print(); ; # Overlay fitted function; f.plotOn(frame); ; # Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin; fit2 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1, Integrate=True); fit2.Print(); ; # Overlay alternate fit result; f.plotOn(frame, LineStyle=""--"", LineColor=""r""); ; # Draw the plot on a canvas; c = ROOT.TCanvas(""rf609_xychi2fit"", ""rf609_xychi2fit"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); ; c.SaveAs(""rf609_xychi2fit.png""); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 1.16828, estimated distance to minimum: 3.27623e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -8.5827e-02 +/- 6.43e-01; b 2.9994e-01 +/- 4.78e-01; c 1.0408e+00 +/- 1.04e-01; ; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 2.77875, estimated distance to minimum: 0.000387499; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -8.9593e-02 +/- 3.62e-01; b 4.5829e-02 +/- 4.65e-01; c 1.0343e+00 +/- 5.76e-02; ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf609_xychi2fit.py. tutorialsroofitrf609_xychi2fit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8py.html:3716,Guid,Guide,3716,doc/master/rf609__xychi2fit_8py.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8py.html,1,['Guid'],['Guide']
Usability,"ing and the default of the global setting is to use the ZLIB compression algorithm.; The LZMA algorithm (from the XZ package) is also available. The LZMA compression usually results in greater compression factors, but takes more CPU time and memory when compressing. LZMA memory usage is particularly high for compression levels 8 and 9.; Finally, the LZ4 package results in worse compression ratios than ZLIB but achieves much faster decompression rates. The current algorithms support level 1 to 9. The higher the level the greater the compression and more CPU time and memory resources used during compression. Level 0 means no compression.; Recommendation for the compression algorithm's levels:; ZLIB is recommended to be used with compression level 1 [101]; LZMA is recommended to be used with compression level 7-8 (higher is better, since in the case of LZMA we don't care about compression/decompression speed) [207 - 208]; LZ4 is recommended to be used with compression level 4 [404]; ZSTD is recommended to be used with compression level 5 [505] . Definition at line 46 of file Compression.h. Classes; struct  EAlgorithm;  ; struct  EDefaults;  ; struct  ELevel;  . Static Public Member Functions; static EAlgorithm::EValues AlgorithmFromCompressionSettings (int compSettings);  ; static std::string AlgorithmToString (EAlgorithm::EValues algorithm);  . #include <Compression.h>; Member Function Documentation. ◆ AlgorithmFromCompressionSettings(). static EAlgorithm::EValues ROOT::RCompressionSetting::AlgorithmFromCompressionSettings ; (; int ; compSettings). inlinestatic . Definition at line 110 of file Compression.h. ◆ AlgorithmToString(). static std::string ROOT::RCompressionSetting::AlgorithmToString ; (; EAlgorithm::EValues ; algorithm). static . The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSetting. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RCompressionSetting.html:2385,Guid,Guide,2385,doc/master/structROOT_1_1RCompressionSetting.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RCompressionSetting.html,1,['Guid'],['Guide']
Usability,"ing can be one of the following forms: XLFD (see X documentation) ""Family [size [style] [style ...]]""; The return value is kFALSE if the object was syntactically invalid. Otherwise, fills the font attribute buffer with the values parsed from the string and returns kTRUE. The structure must already be properly initialized. ; Definition at line 1962 of file TGFont.cxx. ◆ ParseXLFD(). Bool_t TGFontPool::ParseXLFD ; (; const char * ; string, . XLFDAttributes_t * ; xa . ). protected . Break up a fully specified XLFD into a set of font attributes. ; Return value is kFALSE if string was not a fully specified XLFD. Otherwise, fills font attribute buffer with the values parsed from the XLFD and returns kTRUE.; string – Parseable font description string. xa – XLFD attributes structure whose fields are to be modified. Structure must already be properly initialized. ; Definition at line 2054 of file TGFont.cxx. ◆ Print(). void TGFontPool::Print ; (; Option_t * ; option = """"); const. overridevirtual . List all fonts in the pool. ; Reimplemented from TObject.; Definition at line 1876 of file TGFont.cxx. ◆ Streamer(). void TGFontPool::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGFontPool::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 260 of file TGFont.h. Member Data Documentation. ◆ fList. THashTable* TGFontPool::fList. private . Definition at line 220 of file TGFont.h. ◆ fNamedTable. THashTable* TGFontPool::fNamedTable. private . Definition at line 222 of file TGFont.h. ◆ fUidTable. THashTable* TGFontPool::fUidTable. private . Definition at line 221 of file TGFont.h. Libraries for TGFontPool:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFont.h; gui/gui/src/TGFont.cxx. TGFontPool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontPool.html:24225,Guid,Guide,24225,doc/master/classTGFontPool.html,https://root.cern,https://root.cern/doc/master/classTGFontPool.html,1,['Guid'],['Guide']
Usability,"ing in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  NHFitInterface;  NGLTutorials;  ►NInternal;  NExecutorUtils;  NRDF;  NSHA256;  NTDS;  NTThreadedObjectUtils;  ►NMacOSX;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NRDF;  NTF1Helper;  NTMetaUtils;  NTreeUtils;  NTThreadedObjectUtils;  NTypeTraitsROOT type_traits extensions ;  ►Nv5;  NTFastFun;  NVecOps;  Nrootmarks;  NROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  N__ROOT;  NDetail;  Nsurfaces;  Ntbb;  NTClassEdit;  Ntest;  NTGeoUnit;  NtimeSeriesFromCSV;  NTMathTMath ;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  NBlas;  NCNN;  NRNN;  NExperimental;  NkNN;  NTMVAGlob;  Ntornado;  Ntree;  NTStreamerInfoActions;  NtStudent;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nvo001_AdoptOrOwnMemory;  Nwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones. ROOT 6.14/05 - Reference Guide Generated on Fri Nov 2 2018 11:01:27 (GVA Time) using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/namespaces.html:4409,Guid,Guide,4409,doc/v614/namespaces.html,https://root.cern,https://root.cern/doc/v614/namespaces.html,1,['Guid'],['Guide']
Usability,"ing point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:1931,Simpl,Simplex,1931,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,5,['Simpl'],['Simplex']
Usability,"ing point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; ; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodCuts.html:1931,Simpl,Simplex,1931,root/html534/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodCuts.html,1,['Simpl'],['Simplex']
Usability,"ing state""); mixState.defineType(""mixed"", -1); mixState.defineType(""unmixed"", 1); ; # With pythonization :; mixState = ROOT.RooCategory(""mixState"", ""B0/B0bar mixing state"", {""mixed"" : -1, ""unmixed"" : 1}). Definition at line 28 of file RooCategory.h. Public Member Functions;  RooCategory ();  ;  RooCategory (const char *name, const char *title);  Constructor. Types must be defined using defineType() before variable can be used. ;  ;  RooCategory (const char *name, const char *title, const std::map< std::string, int > &allowedStates);  Create a new category and define allowed states. ;  ;  RooCategory (const RooCategory &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooCategory () override;  Destructor. ;  ; void addToRange (const char *rangeName, const char *stateNameList);  Add the list of state names to the given range. ;  ; void addToRange (const char *rangeName, RooAbsCategory::value_type stateIndex);  Add the given state to the given range. ;  ; void clear ();  Clear all defined category states. ;  ; void clearRange (const char *name, bool silent);  Clear the named range. ;  ; TObject * clone (const char *newname) const override;  ; bool defineType (const std::string &label);  Define a state with given name. ;  ; bool defineType (const std::string &label, Int_t index);  Define a state with given name and index. ;  ; void defineTypes (const std::map< std::string, int > &allowedStates);  Define multiple states in a single call. ;  ; value_type getCurrentIndex () const final;  Return current index. ;  ; TClass * IsA () const override;  ; RooCategory & operator= (const RooCategory &)=delete;  ; value_type & operator[] (const std::string &stateName);  Access a named state. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; bool setIndex (const std::pair< std::string, value_type > &nameIdxPair, bool printError=true);  Change category state to state specified by another cat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:3137,clear,clear,3137,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"ing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  bent.py Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  hlGraph1.CThis tutorial demonstrates how to use the highlight mode on graph ;  hlGraph2.CThis tutorial demonstrates how to use the highlight mode on graph ;  labels1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:118369,simpl,simple,118369,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"ing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  bent.py Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:114572,simpl,simple,114572,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['simpl'],['simple']
Usability,"ing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “graph” (evaluating graphical training curves), “update = X” (step for the text/graph output update) or “+” (will skip the randomization and start from the previous values). All combinations are available.; network.Train(1000,""text,graph,update=10""); // full output every; // 10 epochs; network.Train(100,""text,+""); // 100 more epochs; //starts with existing weights; The weights can be saved to a file (DumpWeights) and then reloaded (LoadWeights) to a new compatible network. The output can also be evaluated (Evaluate) for a given output neuron and an array of double input parameters or the network can be exported (Export) as a standalone code. Up to now, this is only as a C++ or PYTHON class, but other languages could be implemented.; 5.12.5 Examples; An example of how to use TMultiLayerPerceptron is the macro mlpHiggs.C in $ROOTSYS/tutorials. Using some standard simulated information that could have been obtained at LEP, a neural network is build, which can make the difference between WW events and events containin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:237036,simpl,simple,237036,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ing the user coordinate system. But sometimes, you will want to use NDC. For example, if you want to draw text always at the same place over a histogram, no matter what the histogram coordinates are. There are two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLine) may be drawn in NDC by using DrawLineNDC(). A latex formula or a text may use TText::SetNDC() to be drawn in NDC coordinates.; 9.3.3 Converting between Coordinate Systems; There are a few utility functions in TPad to convert from one system of coordinates to another. In the following table, a point is defined by (px,py) in pixel coordinates, (ux,uy) in user coordinates, (ndcx,ndcy) in normalized coordinates, (apx, apy) are in absolute pixel coordinates. Conversion; TPad’s Methods; Returns. NDC to Pixel; UtoPixel(ndcx); VtoPixel(ndcy); Int_t; Int_t. Pixel to User; PixeltoX(px); PixeltoY(py); PixeltoXY(px,py,&ux,&uy); Double_t; Double_t; Double_t ux,uy. User to Pixel; XtoPixel(ux); YtoPixel(uy); XYtoPixel(ux,uy,&px,&py); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.3.4 Dividing a Pad into Sub-pads; Dividing a pad into sub pads in order for instance to draw a few histograms, may be done in two ways. The first is to build pad objects and to draw them into a parent pad, which may be a canvas. The second is to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:310819,ux,ux,310819,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['ux'],['ux']
Usability,ing this class . ◆ Class_Name(). static const char * TPARA::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPARA::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 48 of file TPARA.h. ◆ DeclFileName(). static const char * TPARA::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TPARA.h. ◆ GetAlpha(). virtual Float_t TPARA::GetAlpha ; (; ); const. inlinevirtual . Definition at line 44 of file TPARA.h. ◆ GetPhi(). virtual Float_t TPARA::GetPhi ; (; ); const. inlinevirtual . Definition at line 46 of file TPARA.h. ◆ GetTheta(). virtual Float_t TPARA::GetTheta ; (; ); const. inlinevirtual . Definition at line 45 of file TPARA.h. ◆ IsA(). TClass * TPARA::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBRIK.; Definition at line 48 of file TPARA.h. ◆ SetPoints(). void TPARA::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create PARA points. ; Reimplemented from TBRIK.; Definition at line 70 of file TPARA.cxx. ◆ Streamer(). void TPARA::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBRIK. ◆ StreamerNVirtual(). void TPARA::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TPARA.h. Member Data Documentation. ◆ fAlpha. Float_t TPARA::fAlpha. protected . Definition at line 32 of file TPARA.h. ◆ fPhi. Float_t TPARA::fPhi. protected . Definition at line 34 of file TPARA.h. ◆ fTheta. Float_t TPARA::fTheta. protected . Definition at line 33 of file TPARA.h. Libraries for TPARA:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TPARA.h; graf3d/g3d/src/TPARA.cxx. TPARA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPARA.html:20999,Guid,Guide,20999,doc/master/classTPARA.html,https://root.cern,https://root.cern/doc/master/classTPARA.html,1,['Guid'],['Guide']
Usability,"ing to the binomial law.Definition TRandom.cxx:212; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TUnuranContDistTUnuranContDist class describing one dimensional continuous distribution.Definition TUnuranContDist.h:48; TUnuranTUnuran class.Definition TUnuran.h:79; TRandomMixMaxTRandomGen< ROOT::Math::MixMaxEngine< 240, 0 > > TRandomMixMaxMIXMAX generator based on a state of N=240.Definition TRandomGen.h:105; TRandomMT64TRandomGen< ROOT::Math::StdEngine< std::mt19937_64 > > TRandomMT64Generator based on a the Mersenne-Twister generator with 64 bits, using the implementation provided b...Definition TRandomGen.h:141; TRandomMixMax256TRandomGen< ROOT::Math::MixMaxEngine< 256, 2 > > TRandomMixMax256MIXMAX generator based on a state of N=256, based on the generator described in this paper:Definition TRandomGen.h:130; TRandomMixMax17TRandomGen< ROOT::Math::MixMaxEngine< 17, 0 > > TRandomMixMax17MIXMAX generator based on a state of N=17.Definition TRandomGen.h:116; TRandomRanlux48TRandomGen< ROOT::Math::StdEngine< std::ranlux48 > > TRandomRanlux48Generator based on a the RanLux generator with 48 bits, using the implementation provided by the stan...Definition TRandomGen.h:149; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorsRene Brun, Lorenzo Moneta ; Definition in file testrandom.C. tutorialsmathtestrandom.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:34059,Guid,Guide,34059,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,1,['Guid'],['Guide']
Usability,"ing treename, std::string filename);  ; void TMVA_SOFIE_GNN_Application (bool verbose=false);  . Variables; const int EDGE_FEATURE_SIZE = 4;  ; const int GLOBAL_FEATURE_SIZE = 1;  ; const int NODE_FEATURE_SIZE = 4;  ; const int num_max_edges = 30;  ; const int num_max_nodes = 10;  . Function Documentation. ◆ check_mem(). double check_mem ; (; std::string ; s = """"). Definition at line 27 of file TMVA_SOFIE_GNN_Application.C. ◆ GenerateData(). std::vector< GNN_Data > GenerateData ; (; int ; nevts, . int ; seed . ). Definition at line 109 of file TMVA_SOFIE_GNN_Application.C. ◆ main(). int main ; (; ). Definition at line 234 of file TMVA_SOFIE_GNN_Application.C. ◆ Print(). void Print ; (; GNN_Data & ; d, . std::string ; txt = """" . ). Definition at line 59 of file TMVA_SOFIE_GNN_Application.C. ◆ PrintTensor(). template<class T > . void PrintTensor ; (; RTensor< T > & ; t). Definition at line 40 of file TMVA_SOFIE_GNN_Application.C. ◆ ReadData(). std::vector< GNN_Data > ReadData ; (; std::string ; treename, . std::string ; filename . ). Definition at line 136 of file TMVA_SOFIE_GNN_Application.C. ◆ TMVA_SOFIE_GNN_Application(). void TMVA_SOFIE_GNN_Application ; (; bool ; verbose = false). Definition at line 171 of file TMVA_SOFIE_GNN_Application.C. Variable Documentation. ◆ EDGE_FEATURE_SIZE. const int EDGE_FEATURE_SIZE = 4. Definition at line 106 of file TMVA_SOFIE_GNN_Application.C. ◆ GLOBAL_FEATURE_SIZE. const int GLOBAL_FEATURE_SIZE = 1. Definition at line 107 of file TMVA_SOFIE_GNN_Application.C. ◆ NODE_FEATURE_SIZE. const int NODE_FEATURE_SIZE = 4. Definition at line 105 of file TMVA_SOFIE_GNN_Application.C. ◆ num_max_edges. const int num_max_edges = 30. Definition at line 104 of file TMVA_SOFIE_GNN_Application.C. ◆ num_max_nodes. const int num_max_nodes = 10. Definition at line 103 of file TMVA_SOFIE_GNN_Application.C. tutorialstmvaTMVA_SOFIE_GNN_Application.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C.html:2900,Guid,Guide,2900,doc/master/TMVA__SOFIE__GNN__Application_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C.html,1,['Guid'],['Guide']
Usability,"ing type stored in the geometry. This can be done by clicking the button next to the blue label Select <object>. The dialog interfaces are generally different for different types of objects. The volume selection dialog offers the possibility to select either a volume already connected to the geometry hierarchy or non-connected ones. Selection for shapes and matrices is split into categories represented by top-level list tree items for: boxes, tubes, translations, rotations, etc. Selection dialogs for different TGeo objects; Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together. Editors for shapes, materials, media, matrices; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the ""Apply"" button only if the check button ""Delayed draw"" is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The ""Undo"" button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the ""Undo"" does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:140667,Undo,Undo,140667,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Undo'],['Undo']
Usability,"ing using OpenGL](\ref HP29); 118 - [General information: plot types and supported options](\ref HP29a); 119 - [TH3 as color boxes](\ref HP290); 120 - [TH3 as boxes (spheres)](\ref HP29b); 121 - [TH3 as iso-surface(s)](\ref HP29c); 122 - [TF3 (implicit function)](\ref HP29d); 123 - [Parametric surfaces](\ref HP29e); 124 - [Interaction with the plots](\ref HP29f); 125 - [Selectable parts](\ref HP29g); 126 - [Rotation and zooming](\ref HP29h); 127 - [Panning](\ref HP29i); 128 - [Box cut](\ref HP29j); 129 - [Plot specific interactions (dynamic slicing etc.)](\ref HP29k); 130 - [Surface with option ""GLSURF""](\ref HP29l); 131 - [TF3](\ref HP29m); 132 - [Box](\ref HP29n); 133 - [Iso](\ref HP29o); 134 - [Parametric plot](\ref HP29p); 135- [Highlight mode for histogram](\ref HP30); 136 - [Highlight mode and user function](\ref HP30a); 137 ; 138 ; 139\anchor HP00; 140## Introduction; 141 ; 142 ; 143Histograms are drawn via the `THistPainter` class. Each histogram has a; 144pointer to its own painter (to be usable in a multithreaded program). When the; 145canvas has to be redrawn, the `Paint` function of each objects in the; 146pad is called. In case of histograms, `TH1::Paint` invokes directly; 147`THistPainter::Paint`.; 148 ; 149To draw a histogram `h` it is enough to do:; 150 ; 151 h->Draw();; 152 ; 153`h` can be of any kind: 1D, 2D or 3D. To choose how the histogram will; 154be drawn, the `Draw()` method can be invoked with an option. For instance; 155to draw a 2D histogram as a lego plot it is enough to do:; 156 ; 157 h->Draw(""lego"");; 158 ; 159`THistPainter` offers many options to paint 1D, 2D and 3D histograms.; 160 ; 161When the `Draw()` method of a histogram is called for the first time; 162(`TH1::Draw`), it creates a `THistPainter` object and saves a; 163pointer to this ""painter"" as a data member of the histogram. The; 164`THistPainter` class specializes in the drawing of histograms. It is; 165separated from the histogram so that one can have histograms without the; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:5413,usab,usable,5413,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['usab'],['usable']
Usability,"ing when produce pointer by buf.P() function ; Definition at line 333 of file TXMLPlayer.cxx. ◆ ElementSetter(). const char * TXMLPlayer::ElementSetter ; (; TClass * ; cl, . const char * ; membername, . char * ; endch . ). protected . Produce code to set value to given data member. ; endch should be output after value is specified. ; Definition at line 392 of file TXMLPlayer.cxx. ◆ GetBasicTypeName(). TString TXMLPlayer::GetBasicTypeName ; (; TStreamerElement * ; el). protected . return simple data types for given TStreamerElement object ; Definition at line 260 of file TXMLPlayer.cxx. ◆ GetBasicTypeReaderMethodName(). TString TXMLPlayer::GetBasicTypeReaderMethodName ; (; Int_t ; type, . const char * ; realname . ). protected . return functions name to read simple data type from xml file ; Definition at line 293 of file TXMLPlayer.cxx. ◆ GetMemberTypeName(). TString TXMLPlayer::GetMemberTypeName ; (; TDataMember * ; member). protected . returns name of simple data type for given data member ; Definition at line 222 of file TXMLPlayer.cxx. ◆ GetStreamerName(). TString TXMLPlayer::GetStreamerName ; (; TClass * ; cl). protected . returns streamer function name for given class ; Definition at line 150 of file TXMLPlayer.cxx. ◆ IsA(). TClass * TXMLPlayer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 52 of file TXMLPlayer.h. ◆ ProduceCode(). Bool_t TXMLPlayer::ProduceCode ; (; TList * ; cllist, . const char * ; filename . ). Produce streamers for provide class list TList should include list of classes, for which code should be generated. ; filename specify name of file (without extension), where streamers should be created. Function produces two files: header file and source file. For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx"" will be created. ; Definition at line 167 of file TXMLPlayer.cxx. ◆ ProduceSTLstreamer(). Bool_t TXMLPlayer::ProduceSTLstreame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLPlayer.html:14064,simpl,simple,14064,doc/master/classTXMLPlayer.html,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html,1,['simpl'],['simple']
Usability,"ing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:142652,Simpl,Simple,142652,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['Simple']
Usability,"ing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:137957,Simpl,Simple,137957,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['Simpl'],['Simple']
Usability,ing! true if cache is in learning mode; Bool_tTTreeCache::fIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the cache; Int_tTTreeCache::fNReadPrefNumber of blocks that were prefetched; Int_tfNStalls! number of hits which caused a stall; Int_tfNUnzip! number of blocks that were unzipped; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tTTreeCache::fNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tfNseekMax! fNseek can change so we need to know its max size; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tTTreeCache::fOneTime! used in the learning phase ; TTree*TTreeCache::fOwner! pointer to the owner Tree/chain; Bool_tfParallelIndicate if we want to activate the parallelism (for this instance); Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; Bool_tTTreeCache::fReadDirectionSet! read direction established; Bool_tTTreeCache::fReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCacheUnzip.html:11806,learn,learning,11806,root/html530/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html530/TTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"ing...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMCStudy Class ReferenceRooFit » RooFit Core. ; Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. ; These may be generated from either same PDF or from a different PDF with similar parameters.; Given a fit and a generator PDF (they might be identical), RooMCStudy can produce toyMC samples and/or fit these. It accumulates the post-fit parameters of each iteration in a dataset. These can be retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the variables; NLL: The value of the negative log-likelihood for each run.; ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting the distribution of the minimized likelihood, the fitted parameter values, fitted error and pull distribution.; RooMCStudy provides the option to insert add-in modules that modify the generate-and-fit cycle and allow to perform extra steps in the cycle. Output of these modules can be stored alongside the fit results in the aggregate results dataset. These study modules should derive from the class RooAbsMCStudyModule.; Check the RooFit tutorials; rf801_mcstudy.C; rf802_mcstudy_addons.C; rf803_mcstudy_addons2.C; rf804_mcstudy_constr.C for usage examples. PyROOT; Some member functions of RooMCStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to constructor RooMCStudy(), RooMCStudy::plotParamOn, RooMCStudy::plotParam, RooMCStudy::plotNLL, RooMCStudy::plotError and RooMCStudy::plotPull. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame3 = mcstudy.plotPull(mean, ROOT.RooFit.Bins(40), ROOT.RooFit.FitGauss(True)); ; # With keywor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:1042,simpl,simplify,1042,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['simpl'],['simplify']
Usability,"ing...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Friends |; List of all members ; ROOT::Math::GenVector_exception Class Reference. . Definition at line 36 of file GenVector_exception.h. Public Member Functions;  GenVector_exception (const std::string &s);  . Static Public Member Functions; static bool DisableThrow ();  ; static bool EnableThrow ();  . Static Private Member Functions; static bool & IsOn ();  . Friends; void GenVector::Throw (const char *);  ; void Throw (GenVector_exception &);  throw explicitly GenVector exceptions ;  . #include <Math/GenVector/GenVector_exception.h>. Inheritance diagram for ROOT::Math::GenVector_exception:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GenVector_exception(). ROOT::Math::GenVector_exception::GenVector_exception ; (; const std::string & ; s). inline . Definition at line 38 of file GenVector_exception.h. Member Function Documentation. ◆ DisableThrow(). static bool ROOT::Math::GenVector_exception::DisableThrow ; (; ). inlinestatic . Definition at line 49 of file GenVector_exception.h. ◆ EnableThrow(). static bool ROOT::Math::GenVector_exception::EnableThrow ; (; ). inlinestatic . Definition at line 43 of file GenVector_exception.h. ◆ IsOn(). static bool & ROOT::Math::GenVector_exception::IsOn ; (; ). inlinestaticprivate . Definition at line 60 of file GenVector_exception.h. Friends And Related Symbol Documentation. ◆ GenVector::Throw. void GenVector::Throw ; (; const char * ; ). friend . ◆ Throw. void Throw ; (; GenVector_exception & ; e). friend . throw explicitly GenVector exceptions ; Definition at line 72 of file GenVector_exception.h. math/genvector/inc/Math/GenVector/GenVector_exception.h. ROOTMathGenVector_exception. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GenVector__exception.html:2024,Guid,Guide,2024,doc/master/classROOT_1_1Math_1_1GenVector__exception.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GenVector__exception.html,1,['Guid'],['Guide']
Usability,"ing.; Definition at line 38 of file RooLinTransBinning.h. ◆ setRange(). void RooLinTransBinning::setRange ; (; double ; xlo, . double ; xhi . ). overridevirtual . Implements RooAbsBinning.; Definition at line 56 of file RooLinTransBinning.cxx. ◆ Streamer(). void RooLinTransBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ; Reimplemented from RooAbsBinning. ◆ StreamerNVirtual(). void RooLinTransBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file RooLinTransBinning.h. ◆ trans(). double RooLinTransBinning::trans ; (; double ; x); const. inlineprotected . Definition at line 52 of file RooLinTransBinning.h. ◆ updateInput(). void RooLinTransBinning::updateInput ; (; const RooAbsBinning & ; input, . double ; slope = 1.0, . double ; offset = 0.0 . ). Update the slope and offset parameters and the pointer to the input binning. ; Definition at line 91 of file RooLinTransBinning.cxx. Member Data Documentation. ◆ _array. std::vector<double> RooLinTransBinning::_array. mutableprotected . ! Array of transformed bin boundaries ; Definition at line 58 of file RooLinTransBinning.h. ◆ _input. RooAbsBinning* RooLinTransBinning::_input {nullptr}. protected . Input binning. ; Definition at line 57 of file RooLinTransBinning.h. ◆ _offset. double RooLinTransBinning::_offset {0.}. protected . Offset of transformation. ; Definition at line 56 of file RooLinTransBinning.h. ◆ _slope. double RooLinTransBinning::_slope {0.}. protected . Slope of transformation. ; Definition at line 55 of file RooLinTransBinning.h. Libraries for RooLinTransBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooLinTransBinning.h; roofit/roofitcore/src/RooLinTransBinning.cxx. RooLinTransBinning. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:24178,Guid,Guide,24178,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,1,['Guid'],['Guide']
Usability,"ing.h. ◆ exists() [3/3]. bool TMVA::Monitoring::exists ; (; TH2F * ; dummy, . std::string ; histoName . ). inline . Definition at line 107 of file Monitoring.h. ◆ GetCanvas(). TCanvas * TMVA::Monitoring::GetCanvas ; (; ). inline . Definition at line 68 of file Monitoring.h. ◆ getHistogram() [1/2]. TH1F * TMVA::Monitoring::getHistogram ; (; const TH1F * ; dummy, . std::string ; histoName, . int ; bins = 0, . double ; min = 0, . double ; max = 0 . ). inlineprotected . Definition at line 146 of file Monitoring.h. ◆ getHistogram() [2/2]. TH2F * TMVA::Monitoring::getHistogram ; (; const TH2F * ; dummy, . std::string ; histoName, . int ; bins = 0, . double ; min = 0, . double ; max = 0, . int ; bins2 = 0, . double ; min2 = 0, . double ; max2 = 0 . ). inlineprotected . Definition at line 157 of file Monitoring.h. ◆ pads(). void TMVA::Monitoring::pads ; (; int ; numPads). inline . Definition at line 123 of file Monitoring.h. ◆ plot(). void TMVA::Monitoring::plot ; (; std::string ; histoName, . std::string ; options = ""L"", . int ; pad = 0, . EColor ; color = kBlue . ). inline . Definition at line 207 of file Monitoring.h. ◆ ProcessEvents(). void TMVA::Monitoring::ProcessEvents ; (; ). inline . Definition at line 61 of file Monitoring.h. ◆ Start(). void TMVA::Monitoring::Start ; (; ). inline . Definition at line 37 of file Monitoring.h. Member Data Documentation. ◆ fCanvas. TCanvas* TMVA::Monitoring::fCanvas. private . Definition at line 88 of file Monitoring.h. ◆ m_histos1D. std::map<std::string, TH1F*> TMVA::Monitoring::m_histos1D. private . Definition at line 93 of file Monitoring.h. ◆ m_histos2D. std::map<std::string, TH2F*> TMVA::Monitoring::m_histos2D. private . Definition at line 94 of file Monitoring.h. Libraries for TMVA::Monitoring:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/Monitoring.h. TMVAMonitoring. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Monitoring.html:4863,Guid,Guide,4863,doc/master/classTMVA_1_1Monitoring.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Monitoring.html,1,['Guid'],['Guide']
Usability,"ing.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TSystem::PrependPathNamevirtual const char * PrependPathName(const char *dir, TString &name)Concatenate a directory and a file name.Definition TSystem.cxx:1081; TVirtualGeoPainter::DrawBatemanSolvirtual void DrawBatemanSol(TGeoBatemanSol *sol, Option_t *option="""")=0; bool; double; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; TGeant4Unit::alpha_rcl2static constexpr double alpha_rcl2Definition TGeant4PhysicalConstants.h:95; TGeant4Unit::fine_structure_conststatic constexpr double fine_structure_constDefinition TGeant4PhysicalConstants.h:90; TGeoUnit::fine_structure_conststatic constexpr double fine_structure_constDefinition TGeoPhysicalConstants.h:90; TGeoUnit::alpha_rcl2static constexpr double alpha_rcl2Definition TGeoPhysicalConstants.h:95; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::Naconstexpr Double_t Na()Avogadro constant (Avogadro's Number) in .Definition TMath.h:284; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TGeoBatemanSol::BtCoef_tDefinition TGeoElement.h:288; TGeoBatemanSol::BtCoef_t::cnDouble_t cnDefinition TGeoElement.h:289; TGeoBatemanSol::BtCoef_t::lambdaDouble_t lambdaDefinition TGeoElement.h:290. geomgeomsrcTGeoElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:80622,Guid,Guide,80622,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ing::GetFunctionTemplate(ClassInfo_t *opaque_cl, const char* name); 5178{; 5179 R__LOCKGUARD(gInterpreterMutex);; 5180 DeclId_t f;; 5181 TClingClassInfo *cl = (TClingClassInfo*)opaque_cl;; 5182 if (cl) {; 5183 f = cl->GetFunctionTemplate(name);; 5184 }; 5185 else {; 5186 TClingClassInfo gcl(GetInterpreterImpl());; 5187 f = gcl.GetFunctionTemplate(name);; 5188 }; 5189 return f;; 5190 ; 5191}; 5192 ; 5193////////////////////////////////////////////////////////////////////////////////; 5194/// The 'name' is known to the interpreter, this function returns; 5195/// the internal version of this name (usually just resolving typedefs); 5196/// This is used in particular to synchronize between the name used; 5197/// by rootcling and by the run-time environment (TClass); 5198/// Return 0 if the name is not known.; 5199 ; 5200void TCling::GetInterpreterTypeName(const char* name, std::string &output, Bool_t full); 5201{; 5202 output.clear();; 5203 ; 5204 R__LOCKGUARD(gInterpreterMutex);; 5205 ; 5206 TClingClassInfo cl(GetInterpreterImpl(), name);; 5207 if (!cl.IsValid()) {; 5208 return ;; 5209 }; 5210 if (full) {; 5211 cl.FullName(output,*fNormalizedCtxt);; 5212 return;; 5213 }; 5214 // Well well well, for backward compatibility we need to act a bit too; 5215 // much like CINT.; 5216 TClassEdit::TSplitType splitname( cl.Name(), TClassEdit::kDropStd );; 5217 splitname.ShortType(output, TClassEdit::kDropStd );; 5218 ; 5219 return;; 5220}; 5221 ; 5222////////////////////////////////////////////////////////////////////////////////; 5223/// Execute a global function with arguments params.; 5224///; 5225/// FIXME: The cint-based version of this code does not check if the; 5226/// SetFunc() call works, and does not do any real checking; 5227/// for errors from the Exec() call. It did fetch the most; 5228/// recent cint security error and return that in error, but; 5229/// this does not really translate well to cling/clang. We; 5230/// should enhance these interfaces so that we can rep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:202413,clear,clear,202413,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"ing; 1190/// function is a polynomial, a linear fitter is initialised.; 1191/// To create a linear function, use the following syntax: linear parts; 1192/// separated by `++` sign.; 1193/// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; 1194/// TF1 object as; 1195///; 1196/// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; 1197///; 1198/// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; 1199/// Going via the linear fitter for functions, linear in parameters, gives a; 1200/// considerable advantage in speed.; 1201/// When using the linear fitting it is also possible to perform a robust fitting with the; 1202/// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; 1203/// See the tutorial `fitLinearRobust.C`.; 1204///; 1205/// ### Notes on TGraph/TGraphErrors Fitting:; 1206///; 1207/// 1. By using the ""effective variance"" method a simple linear regression; 1208/// becomes a non-linear case, which takes several iterations; 1209/// instead of 0 as in the linear case.; 1210/// 2. The effective variance technique assumes that there is no correlation; 1211/// between the x and y coordinate.; 1212/// 3. The standard chi2 (least square) method without error in the coordinates (x) can; 1213/// be forced by using option ""EX0""; 1214/// 4. The linear fitter doesn't take into account the errors in x. When fitting a; 1215/// TGraphErrors with a linear functions the errors in x will not be considered.; 1216/// If errors in x are important, use option ""F"" for linear function fitting.; 1217/// 5. When fitting a TGraph (i.e. no errors associated with each point),; 1218/// a correction is applied to the errors on the parameters with the following; 1219/// formula:; 1220/// `parameter_error *= sqrt(chisquare/(ndf-1))`; 1221///; 1222/// ### General Fitting documentation; 1223///; 1224/// See in TH1::Fit for the documentation of; 1225/// - [Fit Result](\ref HFitRes); 1226/// - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:43124,simpl,simple,43124,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['simpl'],['simple']
Usability,"ingBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::VecOps::cosRVec< PromoteType< T > > cos(const RVec< T > &v)Definition RVec.hxx:1852; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; c1return c1Definition legend1.C:41; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA_RNN_ClassificationDefinition TMVA_RNN_Classification.py:1; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; mTMarker mDefinition textangle.C:8; Config.h; Factory.h; AuthorLorenzo Moneta ; Definition in file TMVA_RNN_Classification.C. tutorialstmvaTMVA_RNN_Classification.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:78875,Guid,Guide,78875,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Guid'],['Guide']
Usability,ings: SC_factor. ; Definition at line 201 of file MethodMLP.h. ◆ fGA_SC_rate. Int_t TMVA::MethodMLP::fGA_SC_rate. private . GA settings: SC_rate. ; Definition at line 200 of file MethodMLP.h. ◆ fGA_SC_steps. Int_t TMVA::MethodMLP::fGA_SC_steps. private . GA settings: SC_steps. ; Definition at line 199 of file MethodMLP.h. ◆ fgPRINT_BATCH. const Bool_t TMVA::MethodMLP::fgPRINT_BATCH = kFALSE. staticprivate . debug flags ; Definition at line 217 of file MethodMLP.h. ◆ fgPRINT_ESTIMATOR_INC. const Int_t TMVA::MethodMLP::fgPRINT_ESTIMATOR_INC = 10. staticprivate . debug flags ; Definition at line 215 of file MethodMLP.h. ◆ fgPRINT_SEQ. const Bool_t TMVA::MethodMLP::fgPRINT_SEQ = kFALSE. staticprivate . debug flags ; Definition at line 216 of file MethodMLP.h. ◆ fLastAlpha. Double_t TMVA::MethodMLP::fLastAlpha. private . line search variable ; Definition at line 183 of file MethodMLP.h. ◆ fLearnRate. Double_t TMVA::MethodMLP::fLearnRate. private . learning rate for synapse weight adjustments ; Definition at line 188 of file MethodMLP.h. ◆ fPrior. Double_t TMVA::MethodMLP::fPrior. private . zjh ; Definition at line 166 of file MethodMLP.h. ◆ fPriorDev. std::vector<Double_t> TMVA::MethodMLP::fPriorDev. private . zjh ; Definition at line 167 of file MethodMLP.h. ◆ fResetStep. Int_t TMVA::MethodMLP::fResetStep. private . reset time (how often we clear hessian matrix) ; Definition at line 185 of file MethodMLP.h. ◆ fSamplingEpoch. Float_t TMVA::MethodMLP::fSamplingEpoch. private . fraction of epochs where sampling is used ; Definition at line 177 of file MethodMLP.h. ◆ fSamplingFraction. Float_t TMVA::MethodMLP::fSamplingFraction. private . fraction of events which is sampled for training ; Definition at line 176 of file MethodMLP.h. ◆ fSamplingTesting. Bool_t TMVA::MethodMLP::fSamplingTesting. private . The testing sample is sampled. ; Definition at line 180 of file MethodMLP.h. ◆ fSamplingTraining. Bool_t TMVA::MethodMLP::fSamplingTraining. private . The training sample is s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:52218,learn,learning,52218,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,ings::m_batchSize. mini-batch size ; Definition at line 838 of file NeuralNet.h. ◆ m_convergenceCount. size_t TMVA::DNN::Settings::m_convergenceCount. Definition at line 857 of file NeuralNet.h. ◆ m_convergenceSteps. size_t TMVA::DNN::Settings::m_convergenceSteps. number of steps without improvement to consider the DNN to have converged ; Definition at line 837 of file NeuralNet.h. ◆ m_dropOut. std::vector<double> TMVA::DNN::Settings::m_dropOut. Definition at line 850 of file NeuralNet.h. ◆ m_dropRepetitions. double TMVA::DNN::Settings::m_dropRepetitions. Definition at line 849 of file NeuralNet.h. ◆ m_factorWeightDecay. double TMVA::DNN::Settings::m_factorWeightDecay. Definition at line 840 of file NeuralNet.h. ◆ m_maxConvergenceCount. size_t TMVA::DNN::Settings::m_maxConvergenceCount. Definition at line 858 of file NeuralNet.h. ◆ m_maxProgress. double TMVA::DNN::Settings::m_maxProgress. current limits for the progress bar ; Definition at line 834 of file NeuralNet.h. ◆ m_minError. double TMVA::DNN::Settings::m_minError. Definition at line 859 of file NeuralNet.h. ◆ m_minProgress. double TMVA::DNN::Settings::m_minProgress. current limits for the progress bar ; Definition at line 833 of file NeuralNet.h. ◆ m_regularization. EnumRegularization TMVA::DNN::Settings::m_regularization. Definition at line 847 of file NeuralNet.h. ◆ m_testRepetitions. size_t TMVA::DNN::Settings::m_testRepetitions. Definition at line 839 of file NeuralNet.h. ◆ m_timer. Timer TMVA::DNN::Settings::m_timer. timer for monitoring ; Definition at line 832 of file NeuralNet.h. ◆ m_useMultithreading. bool TMVA::DNN::Settings::m_useMultithreading. protected . Definition at line 863 of file NeuralNet.h. Libraries for TMVA::DNN::Settings:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/src/NeuralNet.cxx. TMVADNNSettings. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:15225,progress bar,progress bar,15225,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,2,"['Guid', 'progress bar']","['Guide', 'progress bar']"
Usability,inimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) directly selected PDF components: (p_h_sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) directly selected PDF components: (p_h_bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) directly selected PDF components: (p_ph_sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) directly selected PDF components: (p_ph_bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) directly selected PDF components: (p_ph_sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) directly selected PDF components: (p_ph_bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; Asig [normal ] = 0.833778 +/- 0.189814; Asig [BB ] = 0.850329 +/- 0.235783; Asig [BBlight] = 0.834474 +/- 0.202955; Based on a demo by Wouter Verkerke ; Definition in file rf709_BarlowBeeston.C. tutorialsroofitrf709_BarlowBeeston.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:41945,Guid,Guide,41945,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,1,['Guid'],['Guide']
Usability,inimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; Minuit2Minimizer : Invalid minimum - status = 3; FVAL = -2419.31; Edm = -nan; Nfcn = 34; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28374; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 44 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf606_nllerrorhandling.C. tutorialsroofitrf606_nllerrorhandling.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:13717,Guid,Guide,13717,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['Guid'],['Guide']
Usability,"inimizers and their respective methods (algorithms) that can be instantiated:; 55 The name shown below can be used to create them. More documentation can be found in the respective class; 56 ; 57 - Minuit (class TMinuitMinimizer); 58 - Migrad (default); 59 - MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of [Minuit tutorial on Function Minimization](https://seal.web.cern.ch/documents/minuit/mntutorial.pdf)); 60 - Simplex; 61 - Minimize (a combination of Simplex + Migrad); 62 - Minimize; 63 - Scan; 64 - Seek; 65 ; 66 - Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); 67 - Migrad (default); 68 - Simplex; 69 - Minimize; 70 - Fumili (Fumili2); 71 - Scan; 72 ; 73 - Fumili (class TFumiliMinimizer); 74 ; 75 - GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with `mathmore` support; 76 - BFGS2 (Default); 77 - BFGS; 78 - ConjugateFR; 79 - ConjugatePR; 80 - SteepestDescent; 81 ; 82 - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support; 83 ; 84 - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support; 85 ; 86 - Genetic (class ROOT::Math::GeneticMinimizer); 87 ; 88 - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; 89 - BFGS (default); 90 - L-BFGS-S; 91 - Nelder-Mead; 92 - CG; 93 - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf); 94 ; 95 ; 96 The Minimizer class provides the interface to perform the minimization including; 97 ; 98 ; 99 In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; 100 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:2053,Simpl,Simplex,2053,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,3,['Simpl'],['Simplex']
Usability,inimumErrorUpdator.h;  MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  LinkDef.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cx,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:52886,Simpl,SimplexMinimizer,52886,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexMinimizer']
Usability,inimumErrorUpdator.h;  MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  BFGSErrorUpdator.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:51435,Simpl,SimplexMinimizer,51435,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['SimplexMinimizer']
Usability,inimumErrorUpdator.h;  MinimumParameters.h;  MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.c,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:51440,Simpl,SimplexMinimizer,51440,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,2,['Simpl'],['SimplexMinimizer']
Usability,"inition RSha256.hxx:104; nentriesint nentriesDefinition THbookFile.cxx:91; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Reading a subset of all branches; In the Process function we read a subset of the branches. Only the branches used in the first entry will be put in the cache TTree *T;; f->GetObject(T, ""mytree"");; // We want to process only the 200 first entries; auto nentries=200UL;; auto efirst = 0;; auto elast = efirst+nentries;; auto cachesize = 10000000U; // 10 MBytes; TTreeCache::SetLearnEntries(1); //<<< we can take the decision after 1 entry; T->SetCacheSize(cachesize); //<<<; T->SetCacheEntryRange(efirst,elast); //<<<; T->Process(""myselector.C+"","""",nentries,efirst);; // In the TSelector::Process we read only 2 branches; auto b1 = T->GetBranch(""branch1"");; b1->GetEntry(i);; if (somecondition) return;; auto b2 = T->GetBranch(""branch2"");; b2->GetEntry(i);; ... Here the entry is processed; TTreeCache::SetLearnEntriesstatic void SetLearnEntries(Int_t n=10)Static function to set the number of entries to be used in learning mode The default value for n is 1...Definition TTreeCache.cxx:2144; ; Custom event loop; Always using the same two branches; In this example, exactly two branches are always used: those need to be prefetched. TTree *T;; f->GetObject(T, ""mytree"");; auto b1 = T->GetBranch(""branch1"");; auto b2 = T->GetBranch(""branch2"");; auto nentries = T->GetEntries();; auto cachesize = 10000000U; //10 MBytes; T->SetCacheSize(cachesize); //<<<; T->AddBranchToCache(b1, true); //<<< add branch1 and branch2 to the cache; T->AddBranchToCache(b2, true); //<<<; T->StopCacheLearningPhase(); //<<< we do not need the system to guess anything; for (auto i : TSeqL(nentries)) {; T->LoadTree(i); //<<< important call when calling TBranch::GetEntry after; b1->GetEntry(i);; if (some condition not met) continue;; b2->GetEntry(i);; if (some condition not met) continue;; // Here we read the full event only in some rare cases.; // There is no point in caching ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:8373,learn,learning,8373,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"inition RSha256.hxx:104; nentriesint nentriesDefinition THbookFile.cxx:91; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Reading a subset of all branches; In the Process function we read a subset of the branches. Only the branches used in the first entry will be put in the cache TTree *T;; f->GetObject(T, ""mytree"");; // We want to process only the 200 first entries; auto nentries=200UL;; auto efirst = 0;; auto elast = efirst+nentries;; auto cachesize = 10000000U; // 10 MBytes; TTreeCache::SetLearnEntries(1); //<<< we can take the decision after 1 entry; T->SetCacheSize(cachesize); //<<<; T->SetCacheEntryRange(efirst,elast); //<<<; T->Process(""myselector.C+"","""",nentries,efirst);; // In the TSelector::Process we read only 2 branches; auto b1 = T->GetBranch(""branch1"");; b1->GetEntry(i);; if (somecondition) return;; auto b2 = T->GetBranch(""branch2"");; b2->GetEntry(i);; ... Here the entry is processed; TTreeCache::SetLearnEntriesstatic void SetLearnEntries(Int_t n=10)Static function to set the number of entries to be used in learning mode The default value for n is 1...Definition TTreeCache.cxx:2145; ; Custom event loop; Always using the same two branches; In this example, exactly two branches are always used: those need to be prefetched. TTree *T;; f->GetObject(T, ""mytree"");; auto b1 = T->GetBranch(""branch1"");; auto b2 = T->GetBranch(""branch2"");; auto nentries = T->GetEntries();; auto cachesize = 10000000U; //10 MBytes; T->SetCacheSize(cachesize); //<<<; T->AddBranchToCache(b1, true); //<<< add branch1 and branch2 to the cache; T->AddBranchToCache(b2, true); //<<<; T->StopCacheLearningPhase(); //<<< we do not need the system to guess anything; for (auto i : TSeqL(nentries)) {; T->LoadTree(i); //<<< important call when calling TBranch::GetEntry after; b1->GetEntry(i);; if (some condition not met) continue;; b2->GetEntry(i);; if (some condition not met) continue;; // Here we read the full event only in some rare cases.; // There is no point in caching ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:8374,learn,learning,8374,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,"inition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams.Definition TCurlyArc.h:16; TCurlyArc::TCurlyArcTCurlyArc()Default constructor.Definition TCurlyArc.cxx:45; TCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams.Definition TCurlyLine.h:19; TCurlyLine::TCurlyLineTCurlyLine()Default constructor.Definition TCurlyLine.cxx:46; TCurlyLine::SetWavyvirtual void SetWavy()Set wavy.Definition TCurlyLine.cxx:369; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPolyLine::Drawvoid Draw(Option_t *option="""") overrideDraw this polyline with its current attributes.Definition TPolyLine.cxx:215; int; c1return c1Definition legend1.C:41; ginitstatic int ginitDefinition rsalib.cxx:256; lTLine lDefinition textangle.C:4; . Definition at line 16 of file TCurlyArc.h. Public Member Functions;  TCurlyArc ();  Default constructor. ;  ;  TCurlyArc (Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl=.02, Double_t amp=.01);  Create a new TCurlyArc with center (x1, y1) and radius rad. ;  ;  ~TCurlyArc () override;  ; void Build () override;  Create a curly (Gluon) or wavy (Gamma) arc. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an arc. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:3330,simpl,simple,3330,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,1,['simpl'],['simple']
Usability,"inition TGWin32VirtualXProxy.cxx:104; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TMatrixDSym.h; TMatrixD.h; TPaveText.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::clearValueAndShapeDirtyvoid clearValueAndShapeDirty() constDefinition RooAbsArg.h:571; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setOperModevoid setOperMode(OperMode mode, bool recurseADirty=true)Set the operation mode of this node.Definition RooAbsArg.cxx:1963; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:135347,clear,clearValueAndShapeDirtyvoid,135347,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['clear'],"['clearValueAndShapeDirty', 'clearValueAndShapeDirtyvoid']"
Usability,"inition TGeoNode.h:121; TGeoNode::GetNumberInt_t GetNumber() constDefinition TGeoNode.h:93; TGeoNode::SetNumbervoid SetNumber(Int_t number)Definition TGeoNode.h:118; TGeoPatternFinderBase finder class for patterns.Definition TGeoPatternFinder.h:31; TGeoPatternFinder::cdvirtual void cd(Int_t)Definition TGeoPatternFinder.h:74; TGeoPatternFinder::SetSpacedOutvoid SetSpacedOut(Bool_t flag)Definition TGeoPatternFinder.h:97; TGeoPatternFinder::SetDivIndexvoid SetDivIndex(Int_t index)Definition TGeoPatternFinder.h:94; TGeoPatternFinder::MakeCopyvirtual TGeoPatternFinder * MakeCopy(Bool_t reflect=kFALSE)=0; TGeoPatternFinder::GetDivAxisvirtual Int_t GetDivAxis()Definition TGeoPatternFinder.h:80; TGeoPatternFinder::GetNdivInt_t GetNdiv() constDefinition TGeoPatternFinder.h:82; TGeoPatternFinder::SetVolumevoid SetVolume(TGeoVolume *vol)Definition TGeoPatternFinder.h:98; TGeoPatternFinder::GetStepDouble_t GetStep() constDefinition TGeoPatternFinder.h:86; TGeoPatternFinder::ClearThreadDatavoid ClearThreadData() constDefinition TGeoPatternFinder.cxx:77; TGeoPatternFinder::GetStartDouble_t GetStart() constDefinition TGeoPatternFinder.h:85; TGeoPatternFinder::GetByteCountvirtual Int_t GetByteCount() constDefinition TGeoPatternFinder.h:77; TGeoPatternFinder::GetDivIndexInt_t GetDivIndex()Definition TGeoPatternFinder.h:79; TGeoPatternFinder::CreateThreadDatavoid CreateThreadData(Int_t nthreads)Create thread data for n threads max.Definition TGeoPatternFinder.cxx:92; TGeoScaleClass describing scale transformations.Definition TGeoMatrix.h:253; TGeoScaledShape::MakeScaledShapestatic TGeoShape * MakeScaledShape(const char *name, TGeoShape *shape, TGeoScale *scale)Create a scaled shape starting from a non-scaled one.Definition TGeoScaledShape.cxx:277; TGeoShapeAssemblyThe shape encapsulating an assembly (union) of volumes.Definition TGeoShapeAssembly.h:19; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::GetAxisRangevirtual Double_t GetAxisRange(Int_t iaxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:130252,Clear,ClearThreadDatavoid,130252,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavoid']"
Usability,"inition TKey.cxx:539; TKey::GetSeekKeyvirtual Long64_t GetSeekKey() constDefinition TKey.h:89; TKey::GetKeylenInt_t GetKeylen() constDefinition TKey.h:84; TKey::GetObjlenInt_t GetObjlen() constDefinition TKey.h:87; TKey::GetNbytesInt_t GetNbytes() constDefinition TKey.h:86; TKey::GetClassNamevirtual const char * GetClassName() constDefinition TKey.h:75; TKey::ReadFilevirtual Bool_t ReadFile()Read the key structure from the file.Definition TKey.cxx:1274; TKey::ReadKeyBuffervoid ReadKeyBuffer(char *&buffer)Decode input buffer.Definition TKey.cxx:1231; TKey::WriteFilevirtual Int_t WriteFile(Int_t cycle=1, TFile *f=nullptr)Write the encoded object supported by this key.Definition TKey.cxx:1456; TKey::GetBuffervirtual char * GetBuffer() constDefinition TKey.h:78; TListA doubly linked list.Definition TList.h:38; TList::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideInsert object after object after in the list.Definition TList.cxx:248; TList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition TList.cxx:400; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::LastTObject * Last() const overrideReturn the last object in the list. Returns 0 when list is empty.Definition TList.cxx:691; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TList::RemoveLastvoid RemoveLast() overrideRemove the last object of the list.Definition TList.cxx:907; TMakeProject::Generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:233545,Clear,Clearvoid,233545,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"inition TLegend.cxx:200; TLegend::EditEntryAttLinevirtual void EditEntryAttLine()Edit the line attributes for the entry pointed by the mouse.Definition TLegend.cxx:444; TLegend::~TLegend~TLegend() overrideDefault destructor.Definition TLegend.cxx:300; TLegend::SetEntryOptionvirtual void SetEntryOption(Option_t *option)Edit the option of the entry pointed to by the mouse.Definition TLegend.cxx:1075; TLegend::operator=TLegend & operator=(const TLegend &)Assignment operator.Definition TLegend.cxx:290; TLegend::SetEntryLabelvirtual void SetEntryLabel(const char *label)Edit the label of the entry pointed to by the mouse.Definition TLegend.cxx:1066; TLegend::Printvoid Print(Option_t *option="""") const overrideDump this TLegend and its contents.Definition TLegend.cxx:1013; TLegend::SetMarginvoid SetMargin(Float_t margin)Definition TLegend.h:69; TLegend::PaintPrimitivesvirtual void PaintPrimitives()Paint the entries (list of primitives) for this legend.Definition TLegend.cxx:618; TLegend::EditEntryAttFillvirtual void EditEntryAttFill()Edit the fill attributes for the entry pointed by the mouse.Definition TLegend.cxx:433; TLegend::GetHeadervirtual const char * GetHeader() constReturns the header, which is the title that appears at the top of the legend.Definition TLegend.cxx:521; TLegend::InsertEntryvirtual void InsertEntry(const char *objectName="""", const char *label="""", Option_t *option=""lpf"")Add a new entry before the entry at the mouse position.Definition TLegend.cxx:536; TLegend::GetMarginFloat_t GetMargin() constDefinition TLegend.h:51; TLegend::SetColumnSeparationvoid SetColumnSeparation(Float_t columnSeparation)Definition TLegend.h:62; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; double; int; Drawth1 Draw(). graf2dgrafincTLegend.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8h_source.html:9763,Guid,Guide,9763,doc/master/TLegend_8h_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8h_source.html,1,['Guid'],['Guide']
Usability,"inition TMVA_SOFIE_GNN_Parser.py:99; TMVA_SOFIE_GNN_Parser.EncodeProcessDecode._encoder_encoderDefinition TMVA_SOFIE_GNN_Parser.py:98; TMVA_SOFIE_GNN_Parser.EncodeProcessDecode._output_transform_output_transformDefinition TMVA_SOFIE_GNN_Parser.py:101; TMVA_SOFIE_GNN_Parser.EncodeProcessDecode.__call____call__(self, input_op, num_processing_steps)Definition TMVA_SOFIE_GNN_Parser.py:103; TMVA_SOFIE_GNN_Parser.MLPGraphIndependentDefinition TMVA_SOFIE_GNN_Parser.py:69; TMVA_SOFIE_GNN_Parser.MLPGraphIndependent.__call____call__(self, inputs)Definition TMVA_SOFIE_GNN_Parser.py:77; TMVA_SOFIE_GNN_Parser.MLPGraphIndependent.__init____init__(self, name=""MLPGraphIndependent"")Definition TMVA_SOFIE_GNN_Parser.py:70; TMVA_SOFIE_GNN_Parser.MLPGraphIndependent._network_networkDefinition TMVA_SOFIE_GNN_Parser.py:72; TMVA_SOFIE_GNN_Parser.MLPGraphNetworkDefinition TMVA_SOFIE_GNN_Parser.py:81; TMVA_SOFIE_GNN_Parser.MLPGraphNetwork._network_networkDefinition TMVA_SOFIE_GNN_Parser.py:84; TMVA_SOFIE_GNN_Parser.MLPGraphNetwork.__init____init__(self, name=""MLPGraphNetwork"")Definition TMVA_SOFIE_GNN_Parser.py:82; TMVA_SOFIE_GNN_Parser.MLPGraphNetwork.__call____call__(self, inputs)Definition TMVA_SOFIE_GNN_Parser.py:89; int; TMVA_SOFIE_GNN_Parser.make_mlp_modelmake_mlp_model()Definition TMVA_SOFIE_GNN_Parser.py:62; TMVA_SOFIE_GNN_Parser.get_dynamic_graph_data_dictget_dynamic_graph_data_dict(NODE_FEATURE_SIZE=2, EDGE_FEATURE_SIZE=2, GLOBAL_FEATURE_SIZE=1)Definition TMVA_SOFIE_GNN_Parser.py:37; TMVA_SOFIE_GNN_Parser.get_fix_graph_data_dictget_fix_graph_data_dict(num_nodes, num_edges, NODE_FEATURE_SIZE=2, EDGE_FEATURE_SIZE=2, GLOBAL_FEATURE_SIZE=1)Definition TMVA_SOFIE_GNN_Parser.py:49; TMVA_SOFIE_GNN_Parser.ep_modelep_modelDefinition TMVA_SOFIE_GNN_Parser.py:120; TMVA_SOFIE_GNN_Parser.printMemoryprintMemory(s="""")Definition TMVA_SOFIE_GNN_Parser.py:28. tutorialstmvaTMVA_SOFIE_GNN_Parser.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html:13271,Guid,Guide,13271,doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Parser_8py_source.html,1,['Guid'],['Guide']
Usability,"inition TSelector.h:59; TSelector::Notifybool Notify() overrideThis method must be overridden to handle object notification (the base implementation is no-op).Definition TSelector.h:56; TSelector::SetOptionvirtual void SetOption(const char *option)Definition TSelector.h:64; TSelector::GetStatusvirtual Long64_t GetStatus() constDefinition TSelector.h:58; TSelector::SetInputListvirtual void SetInputList(TList *input)Definition TSelector.h:66; TSelector::Abortvirtual void Abort(const char *why, EAbort what=kAbortProcess)Abort processing.Definition TSelector.cxx:116; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TSelector::fObjectTObject * fObject! Current object if processing object (vs. TTree)Definition TSelector.h:40; TSelector::GetOutputListvirtual TList * GetOutputList() constDefinition TSelector.h:69; TSelector::SlaveTerminatevirtual void SlaveTerminate()Definition TSelector.h:70; TSelector::~TSelector~TSelector() overrideSelector destructor.Definition TSelector.cxx:102; TSelector::fAbortEAbort fAbortAbort status.Definition TSelector.h:38; TSelector::ResetAbortvirtual void ResetAbort()Definition TSelector.h:74; TSelector::Beginvirtual void Begin(TTree *)Definition TSelector.h:54; TSelector::Terminatevirtual void Terminate()Definition TSelector.h:71; TSelector::TSelectorTSelector()Default selector ctor.Definition TSelector.cxx:89; TSelector::GetSelectorstatic TSelector * GetSelector(const char *filename)The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid cl...Definition TSelector.cxx:142; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; whatstatic const char * whatDefinition stlLoader.cc:5; outputstatic void output(). treetreeincTSelector.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8h_source.html:8741,Guid,Guide,8741,doc/master/TSelector_8h_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8h_source.html,1,['Guid'],['Guide']
Usability,"inition TStreamerElement.h:108; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualCollectionProxy::GetPropertiesvirtual Int_t GetProperties() constReturn miscallenous properties of the proxy (see TVirtualCollectionProxy::EProperty)Definition TVirtualCollectionProxy.h:108; TVirtualCollectionProxy::kIsEmulated@ kIsEmulatedDefinition TVirtualCollectionProxy.h:67; TVirtualCollectionProxy::GetValueClassvirtual TClass * GetValueClass() const =0If the value type is a user-defined class, return a pointer to the TClass representing the value type...; TVirtualCollectionProxy::GetCollectionTypevirtual Int_t GetCollectionType() const =0Return the type of the proxied collection (see enumeration TClassEdit::ESTLType); TVirtualCollectionProxy::HasPointersvirtual Bool_t HasPointers() const =0Return true if the content is of type 'pointer to'.; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GetElementsvirtual TObjArray * GetElements() const =0; bool; int; unsigned int; ROOT::DetailSpecial implementation of ROOT::RRangeCast for TCollection, including a check that the cast target ty...Definition TObject.h:387; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TClassEdit::kVector@ kVectorDefinition TClassEdit.h:95; TClassEdit::IsStdPairbool IsStdPair(std::string_view name)Definition TClassEdit.h:184. coremetasrcTSchemaRuleSet.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:33786,Guid,Guide,33786,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['Guid'],['Guide']
Usability,"inition TVirtualCollectionProxy.h:71; TVirtualCollectionProxy::kIsEmulated@ kIsEmulatedDefinition TVirtualCollectionProxy.h:67; TVirtualCollectionProxy::kNeedDelete@ kNeedDeleteThe collection contains directly or indirectly (via other collection) some pointers that need explici...Definition TVirtualCollectionProxy.h:70; TVirtualCollectionProxy::kIsAssociative@ kIsAssociativeDefinition TVirtualCollectionProxy.h:66; TVirtualCollectionProxy::CopyIterator_tvoid *(* CopyIterator_t)(void *dest, const void *source)Copy the iterator source into dest.Definition TVirtualCollectionProxy.h:227; TVirtualCollectionProxy::operator[]char * operator[](UInt_t idx) constReturn the address of the value at index idxDefinition TVirtualCollectionProxy.h:199; TVirtualCollectionProxy::NewArrayvirtual void * NewArray(Int_t nElements, void *arena) constConstruct an array of nElements container objects at the address given by arenaDefinition TVirtualCollectionProxy.h:128; TVirtualCollectionProxy::Clearvirtual void Clear(const char *opt="""")=0Clear the container.; TVirtualCollectionProxy::GetWriteMemberWiseActionsvirtual TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions()=0; TVirtualCollectionProxy::Newvirtual void * New() constConstruct a new container object and return its address.Definition TVirtualCollectionProxy.h:111; TVirtualCollectionProxy::Next_tvoid *(* Next_t)(void *iter, const void *end)iter and end should be pointers to an iterator to be incremented and an iterator that points to the e...Definition TVirtualCollectionProxy.h:236; TVirtualCollectionProxy::PopProxyvirtual void PopProxy()=0Reset the address of the container being proxied to the previous container.; TVirtualCollectionProxy::DeleteArrayvirtual void DeleteArray(void *p, Bool_t dtorOnly=kFALSE) constExecute the container array destructor.Definition TVirtualCollectionProxy.h:151; TVirtualCollectionProxy::GetValueClassvirtual TClass * GetValueClass() const =0If the value type is a user-defined class, return a p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html:19211,Clear,Clearvirtual,19211,doc/master/TVirtualCollectionProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,"inition at line 1021 of file THStack.cxx. ◆ SavePrimitive(). void THStack::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 1031 of file THStack.cxx. ◆ SetHistogram(). virtual void THStack::SetHistogram ; (; TH1 * ; h). inlinevirtual . Definition at line 89 of file THStack.h. ◆ SetMaximum(). void THStack::SetMaximum ; (; Double_t ; maximum = -1111). virtual . Set maximum. ; Definition at line 1081 of file THStack.cxx. ◆ SetMinimum(). void THStack::SetMinimum ; (; Double_t ; minimum = -1111). virtual . Set minimum. ; Definition at line 1090 of file THStack.cxx. ◆ Streamer(). void THStack::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THStack::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file THStack.h. Member Data Documentation. ◆ fHistogram. TH1* THStack::fHistogram {nullptr}. protected . Pointer to histogram used for drawing axis. ; Definition at line 47 of file THStack.h. ◆ fHists. TList* THStack::fHists {nullptr}. protected . Pointer to array of TH1. ; Definition at line 45 of file THStack.h. ◆ fMaximum. Double_t THStack::fMaximum {-1111}. protected . Maximum value for plotting along y. ; Definition at line 48 of file THStack.h. ◆ fMinimum. Double_t THStack::fMinimum {-1111}. protected . Minimum value for plotting along y. ; Definition at line 49 of file THStack.h. ◆ fStack. TObjArray* THStack::fStack {nullptr}. protected . ! Pointer to array of sums of TH1 ; Definition at line 46 of file THStack.h. Libraries for THStack:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THStack.h; hist/hist/src/THStack.cxx. THStack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:33135,Guid,Guide,33135,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,1,['Guid'],['Guide']
Usability,"inition at line 114 of file RDFHistoModels.cxx. ◆ TH1DModel() [3/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const ::TH1D & ; h). Definition at line 85 of file RDFHistoModels.cxx. ◆ TH1DModel() [4/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . double ; xlow, . double ; xup . ). Definition at line 89 of file RDFHistoModels.cxx. ◆ TH1DModel() [5/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . const float * ; xbins . ). Definition at line 93 of file RDFHistoModels.cxx. ◆ TH1DModel() [6/6]. ROOT::RDF::TH1DModel::TH1DModel ; (; const char * ; name, . const char * ; title, . int ; nbinsx, . const double * ; xbins . ). Definition at line 98 of file RDFHistoModels.cxx. Member Function Documentation. ◆ GetHistogram(). std::shared_ptr<::TH1D > ROOT::RDF::TH1DModel::GetHistogram ; (; ); const. Definition at line 103 of file RDFHistoModels.cxx. Member Data Documentation. ◆ fBinXEdges. std::vector<double> ROOT::RDF::TH1DModel::fBinXEdges. Definition at line 36 of file HistoModels.hxx. ◆ fName. TString ROOT::RDF::TH1DModel::fName. Definition at line 31 of file HistoModels.hxx. ◆ fNbinsX. int ROOT::RDF::TH1DModel::fNbinsX = 128. Definition at line 33 of file HistoModels.hxx. ◆ fTitle. TString ROOT::RDF::TH1DModel::fTitle. Definition at line 32 of file HistoModels.hxx. ◆ fXLow. double ROOT::RDF::TH1DModel::fXLow = 0. Definition at line 34 of file HistoModels.hxx. ◆ fXUp. double ROOT::RDF::TH1DModel::fXUp = 64. Definition at line 35 of file HistoModels.hxx. Collaboration diagram for ROOT::RDF::TH1DModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/HistoModels.hxx; tree/dataframe/src/RDFHistoModels.cxx. ROOTRDFTH1DModel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH1DModel.html:3202,Guid,Guide,3202,doc/master/structROOT_1_1RDF_1_1TH1DModel.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RDF_1_1TH1DModel.html,1,['Guid'],['Guide']
Usability,inition at line 115 of file TEveCompound.cxx. ◆ SetMainColor(). void TEveCompound::SetMainColor ; (; Color_t ; color). overridevirtual . SetMainColor for the compound. ; The color is also propagated to children with compound set to this whose current color is the same as the old color.; The following CompoundSelectionColorBits have further influence:; kCSCBApplyMainColorToAllChildren - apply color to all children;; kCSCBApplyMainColorToMatchingChildren - apply color to children who have matching old color. . Reimplemented from TEveElement.; Reimplemented in TEveCompoundProjected.; Definition at line 40 of file TEveCompound.cxx. ◆ SetMainTransparency(). void TEveCompound::SetMainTransparency ; (; Char_t ; t). overridevirtual . SetMainTransparency for the compound. ; The transparency is also propagated to children with compound set to this whose current transparency is the same as the old transparency.; The following CompoundSelectionColorBits have further influence:; kCSCBApplyMainTransparencyToAllChildren - apply transparency to all children;; kCSCBApplyMainTransparencyToMatchingChildren - apply transparency to children who have matching transparency. . Reimplemented from TEveElement.; Definition at line 69 of file TEveCompound.cxx. ◆ Streamer(). void TEveCompound::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveCompoundProjected. ◆ StreamerNVirtual(). void TEveCompound::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TEveCompound.h. Member Data Documentation. ◆ fCompoundOpen. Short_t TEveCompound::fCompoundOpen. protected . Definition at line 30 of file TEveCompound.h. Libraries for TEveCompound:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveCompound.h; graf3d/eve/src/TEveCompound.cxx. TEveCompound. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompound.html:38757,Guid,Guide,38757,doc/master/classTEveCompound.html,https://root.cern,https://root.cern/doc/master/classTEveCompound.html,1,['Guid'],['Guide']
Usability,"inition at line 1181 of file TTree.cxx. ◆ DropBuffers(). void TTree::DropBuffers ; (; Int_t ; nbytes). virtual . Drop branch buffers to accommodate nbytes below MaxVirtualsize. ; Definition at line 4531 of file TTree.cxx. ◆ EnableCache(). bool TTree::EnableCache ; (; ). Enable the TTreeCache unless explicitly disabled for this TTree by a prior call to SetCacheSize(0). ; If the environment variable ROOT_TTREECACHE_SIZE or the rootrc config TTreeCache.Size has been set to zero, this call will over-ride them with a value of 1.0 (i.e. use a cache size to hold 1 cluster); Return true if there is a cache attached to the TTree (either pre-exisiting or created as part of this call) ; Definition at line 2685 of file TTree.cxx. ◆ Fill(). Int_t TTree::Fill ; (; ). virtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:139000,simpl,simple,139000,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,4,['simpl'],['simple']
Usability,"inition at line 1269 of file TAxis.cxx. ◆ ZoomOut(). void TAxis::ZoomOut ; (; Double_t ; factor = 0, . Double_t ; offset = 0 . ). virtual . Zoom out by a factor of 'factor' (default =2) uses previous zoom factor by default Keep center defined by 'offset' fixed ie. ; -1 at left of current range, 0 in center, +1 at right ; Definition at line 1344 of file TAxis.cxx. Member Data Documentation. ◆ fBits2. UShort_t TAxis::fBits2. private . Second bit status word. ; Definition at line 40 of file TAxis.h. ◆ fFirst. Int_t TAxis::fFirst. private . First bin to display. ; Definition at line 38 of file TAxis.h. ◆ fLabels. THashList* TAxis::fLabels. private . List of labels. ; Definition at line 44 of file TAxis.h. ◆ fLast. Int_t TAxis::fLast. private . Last bin to display. ; Definition at line 39 of file TAxis.h. ◆ fModLabs. TList* TAxis::fModLabs. private . List of modified labels. ; Definition at line 45 of file TAxis.h. ◆ fNbins. Int_t TAxis::fNbins. private . Number of bins. ; Definition at line 34 of file TAxis.h. ◆ fParent. TObject* TAxis::fParent. private . ! Object owning this axis ; Definition at line 43 of file TAxis.h. ◆ fTimeDisplay. Bool_t TAxis::fTimeDisplay. private . On/off displaying time values instead of numerics. ; Definition at line 41 of file TAxis.h. ◆ fTimeFormat. TString TAxis::fTimeFormat. private . Date&time format, ex: 09/12/99 12:34:00. ; Definition at line 42 of file TAxis.h. ◆ fXbins. TArrayD TAxis::fXbins. private . Bin edges array in X. ; Definition at line 37 of file TAxis.h. ◆ fXmax. Double_t TAxis::fXmax. private . Upper edge of last bin. ; Definition at line 36 of file TAxis.h. ◆ fXmin. Double_t TAxis::fXmin. private . Low edge of first bin. ; Definition at line 35 of file TAxis.h. Libraries for TAxis:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TAxis.h; hist/hist/src/TAxis.cxx. TAxis. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis.html:47943,Guid,Guide,47943,doc/master/classTAxis.html,https://root.cern,https://root.cern/doc/master/classTAxis.html,1,['Guid'],['Guide']
Usability,inition at line 181 of file TGeoElement.h. ◆ TG_S(). Double_t TGeoElementRN::TG_S ; (; ); const. inline . Definition at line 183 of file TGeoElement.h. ◆ TH_F(). Double_t TGeoElementRN::TH_F ; (; ); const. inline . Definition at line 180 of file TGeoElement.h. ◆ TH_S(). Double_t TGeoElementRN::TH_S ; (; ); const. inline . Definition at line 182 of file TGeoElement.h. Member Data Documentation. ◆ fDecays. TObjArray* TGeoElementRN::fDecays. protected . Definition at line 148 of file TGeoElement.h. ◆ fDeltaM. Double_t TGeoElementRN::fDeltaM. protected . Definition at line 137 of file TGeoElement.h. ◆ fENDFcode. Int_t TGeoElementRN::fENDFcode. protected . Definition at line 134 of file TGeoElement.h. ◆ fHalfLife. Double_t TGeoElementRN::fHalfLife. protected . Definition at line 138 of file TGeoElement.h. ◆ fIso. Int_t TGeoElementRN::fIso. protected . Definition at line 135 of file TGeoElement.h. ◆ fLevel. Double_t TGeoElementRN::fLevel. protected . Definition at line 136 of file TGeoElement.h. ◆ fNatAbun. Double_t TGeoElementRN::fNatAbun. protected . Definition at line 139 of file TGeoElement.h. ◆ fRatio. TGeoBatemanSol* TGeoElementRN::fRatio. protected . Definition at line 146 of file TGeoElement.h. ◆ fStatus. Int_t TGeoElementRN::fStatus. protected . Definition at line 145 of file TGeoElement.h. ◆ fTG_F. Double_t TGeoElementRN::fTG_F. protected . Definition at line 142 of file TGeoElement.h. ◆ fTG_S. Double_t TGeoElementRN::fTG_S. protected . Definition at line 144 of file TGeoElement.h. ◆ fTH_F. Double_t TGeoElementRN::fTH_F. protected . Definition at line 141 of file TGeoElement.h. ◆ fTH_S. Double_t TGeoElementRN::fTH_S. protected . Definition at line 143 of file TGeoElement.h. Libraries for TGeoElementRN:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoElement.h; geom/geom/src/TGeoElement.cxx. TGeoElementRN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElementRN.html:24893,Guid,Guide,24893,doc/master/classTGeoElementRN.html,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html,1,['Guid'],['Guide']
Usability,"inition at line 41 of file TEveScene.cxx. ◆ TEveScene() [3/3]. TEveScene::TEveScene ; (; TGLScenePad * ; gl_scene, . const char * ; n = ""TEveScene"", . const char * ; t = """" . ). Constructor. ; Definition at line 60 of file TEveScene.cxx. ◆ ~TEveScene(). TEveScene::~TEveScene ; (; ). override . Destructor. ; Definition at line 79 of file TEveScene.cxx. Member Function Documentation. ◆ Changed(). void TEveScene::Changed ; (; ). inline . Definition at line 51 of file TEveScene.h. ◆ Class(). static TClass * TEveScene::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveScene::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveScene::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file TEveScene.h. ◆ CollectSceneParents(). void TEveScene::CollectSceneParents ; (; List_t & ; scenes). overridevirtual . Virtual from TEveElement; here we simply append this scene to the list. ; Reimplemented from TEveElement.; Definition at line 93 of file TEveScene.cxx. ◆ DeclFileName(). static const char * TEveScene::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file TEveScene.h. ◆ DestroyElementRenderers() [1/2]. void TEveScene::DestroyElementRenderers ; (; TEveElement * ; element). Remove element from the scene. ; It is not an error if the element is not found in the scene. ; Definition at line 199 of file TEveScene.cxx. ◆ DestroyElementRenderers() [2/2]. void TEveScene::DestroyElementRenderers ; (; TObject * ; rnrObj). Remove element represented by object rnrObj from the scene. ; It is not an error if the element is not found in the scene. ; Definition at line 212 of file TEveScene.cxx. ◆ GetGLScene(). TGLScenePad * TEveScene::GetGLScene ; (; ); const. inline . Definition at line 60 of file TEveScene.h. ◆ GetHierarchical(). Bool_t TEveScene::GetHierarchical ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScene.html:35651,simpl,simply,35651,doc/master/classTEveScene.html,https://root.cern,https://root.cern/doc/master/classTEveScene.html,1,['simpl'],['simply']
Usability,inition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMinuitMinimizer.h. ◆ fErrors. std::vector<double> TMinuitMinimizer::fErrors. private . Definition at line 261 of file TMinuitMinimizer.h. ◆ fgMinuit. TMinuit * TMinuitMinimizer::fgMinuit = nullptr. staticprivate . Definition at line 267 of file TMinuitMinimizer.h. ◆ fgUsed. bool TMinuitMinimizer::fgUsed = false. staticprivate . Definition at line 269 of file TMinuitMinimizer.h. ◆ fgUseStaticMinuit. bool TMinuitMinimizer::fgUseStaticMinuit = true. staticprivate . Definition at line 270 of file TMinuitMinimizer.h. ◆ fMinosRun. bool TMinuitMinimizer::fMinosRun. private . Definition at line 257 of file TMinuitMinimizer.h. ◆ fMinosStatus. int TMinuitMinimizer::fMinosStatus = -1. private . Definition at line 259 of file TMinuitMinimizer.h. ◆ fMinuit. TMinuit* TMinuitMinimizer::fMinuit. private . Definition at line 265 of file TMinuitMinimizer.h. ◆ fParams. std::vector<double> TMinuitMinimizer::fParams. private . Definition at line 260 of file TMinuitMinimizer.h. ◆ fType. ROOT::Minuit::EMinimizerType TMinuitMinimizer::fType. private . Definition at line 264 of file TMinuitMinimizer.h. ◆ fUsed. bool TMinuitMinimizer::fUsed. private . Definition at line 256 of file TMinuitMinimizer.h. Libraries for TMinuitMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/minuit/inc/TMinuitMinimizer.h; math/minuit/src/TMinuitMinimizer.cxx. TMinuitMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:29451,Guid,Guide,29451,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['Guid'],['Guide']
Usability,"inition at line 44 of file TFriendProxyDescriptor.cxx. ◆ operator=(). TFriendProxyDescriptor & ROOT::Internal::TFriendProxyDescriptor::operator= ; (; const TFriendProxyDescriptor & ; b). private . ◆ OutputClassDecl(). void TFriendProxyDescriptor::OutputClassDecl ; (; FILE * ; hf, . int ; offset, . UInt_t ; maxVarname . ). Print the declaration needed for this descriptor. ; Definition at line 65 of file TFriendProxyDescriptor.cxx. ◆ OutputDecl(). void TFriendProxyDescriptor::OutputDecl ; (; FILE * ; hf, . int ; offset, . UInt_t ; maxVarname . ). Print the declaration needed for this descriptor. ; Definition at line 90 of file TFriendProxyDescriptor.cxx. ◆ SetDuplicate(). void ROOT::Internal::TFriendProxyDescriptor::SetDuplicate ; (; ). inline . Definition at line 44 of file TFriendProxyDescriptor.h. ◆ Streamer(). void ROOT::Internal::TFriendProxyDescriptor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Internal::TFriendProxyDescriptor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file TFriendProxyDescriptor.h. Member Data Documentation. ◆ fDuplicate. bool ROOT::Internal::TFriendProxyDescriptor::fDuplicate. private . Definition at line 24 of file TFriendProxyDescriptor.h. ◆ fIndex. Int_t ROOT::Internal::TFriendProxyDescriptor::fIndex. private . Definition at line 25 of file TFriendProxyDescriptor.h. ◆ fListOfTopProxies. TList ROOT::Internal::TFriendProxyDescriptor::fListOfTopProxies. private . Definition at line 26 of file TFriendProxyDescriptor.h. Libraries for ROOT::Internal::TFriendProxyDescriptor:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TFriendProxyDescriptor.h; tree/treeplayer/src/TFriendProxyDescriptor.cxx. ROOTInternalTFriendProxyDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html:16104,Guid,Guide,16104,doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TFriendProxyDescriptor.html,1,['Guid'],['Guide']
Usability,"inition at line 449 of file RooAbsCategory.cxx. ◆ attachToVStore(). void RooAbsCategory::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Attach the category index and label to as branches to the given vector store. ; Implements RooAbsArg.; Definition at line 436 of file RooAbsCategory.cxx. ◆ begin(). std::map< std::string, value_type >::const_iterator RooAbsCategory::begin ; (; ); const. inline . Iterator for category state names. Points to pairs of index and name. ; Definition at line 91 of file RooAbsCategory.h. ◆ Class(). static TClass * RooAbsCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCategory::Class_Version ; (; ). inlinestaticconstexpr . A buffer for reading values from trees. ; ReturnsVersion of this class ; Definition at line 226 of file RooAbsCategory.h. ◆ clearTypes(). void RooAbsCategory::clearTypes ; (; ). protected . Delete all currently defined states. ; Definition at line 277 of file RooAbsCategory.cxx. ◆ copyCache(). void RooAbsCategory::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value from given source and raise dirty flag. ; It is the callers responsibility to ensure that the sources cache is clean(valid) before this function is called, e.g. by calling syncCache() on the source. ; Implements RooAbsArg.; Reimplemented in RooAbsCategoryLValue.; Definition at line 560 of file RooAbsCategory.cxx. ◆ createFundamental(). RooFit::OwningPtr< RooAbsArg > RooAbsCategory::createFundamental ; (; const char * ; newname = nullptr); const. overridevirtual . Create a RooCategory fundamental object with our properties. ; Implements RooAbsArg.; Definition at line 642 of file RooAbsCategory.cxx. ◆ createTable(). Roo1DTable * RooAbsCategory::createTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:47963,clear,clearTypes,47963,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['clear'],['clearTypes']
Usability,inition at line 60 of file TGeoCache.h. ◆ fIdBranch. Int_t TGeoNodeCache::fIdBranch[100]. private . Definition at line 66 of file TGeoCache.h. ◆ fIndex. Int_t TGeoNodeCache::fIndex. private . Definition at line 65 of file TGeoCache.h. ◆ fInfoBranch. TGeoStateInfo** TGeoNodeCache::fInfoBranch. private . Definition at line 75 of file TGeoCache.h. ◆ fInfoLevel. Int_t TGeoNodeCache::fInfoLevel. private . Definition at line 63 of file TGeoCache.h. ◆ fLevel. Int_t TGeoNodeCache::fLevel. private . Definition at line 61 of file TGeoCache.h. ◆ fMatrix. TGeoHMatrix* TGeoNodeCache::fMatrix. private . current node ; Definition at line 70 of file TGeoCache.h. ◆ fMatrixBranch. TGeoHMatrix** TGeoNodeCache::fMatrixBranch. private . Definition at line 72 of file TGeoCache.h. ◆ fMPB. TGeoHMatrix** TGeoNodeCache::fMPB. private . Definition at line 73 of file TGeoCache.h. ◆ fNode. TGeoNode* TGeoNodeCache::fNode. private . Definition at line 69 of file TGeoCache.h. ◆ fNodeBranch. TGeoNode** TGeoNodeCache::fNodeBranch. private . Definition at line 74 of file TGeoCache.h. ◆ fNodeIdArray. Int_t* TGeoNodeCache::fNodeIdArray. private . State info for the parallel world. ; Definition at line 77 of file TGeoCache.h. ◆ fPath. TString TGeoNodeCache::fPath. private . Definition at line 67 of file TGeoCache.h. ◆ fPWInfo. TGeoStateInfo* TGeoNodeCache::fPWInfo. private . Definition at line 76 of file TGeoCache.h. ◆ fStack. TObjArray* TGeoNodeCache::fStack. private . current matrix ; Definition at line 71 of file TGeoCache.h. ◆ fStackLevel. Int_t TGeoNodeCache::fStackLevel. private . Definition at line 62 of file TGeoCache.h. ◆ fTop. TGeoNode* TGeoNodeCache::fTop. private . Definition at line 68 of file TGeoCache.h. Libraries for TGeoNodeCache:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoCache.h; geom/geom/src/TGeoCache.cxx. TGeoNodeCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeCache.html:25352,Guid,Guide,25352,doc/master/classTGeoNodeCache.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html,1,['Guid'],['Guide']
Usability,inition at line 72 of file TSocket.h. ◆ fBytesRecv. UInt_t TSocket::fBytesRecv. protected . Definition at line 60 of file TSocket.h. ◆ fBytesSent. UInt_t TSocket::fBytesSent. protected . Definition at line 61 of file TSocket.h. ◆ fCompress. Int_t TSocket::fCompress. protected . Definition at line 62 of file TSocket.h. ◆ fgBytesRecv. ULong64_t TSocket::fgBytesRecv = 0. staticprotected . Definition at line 78 of file TSocket.h. ◆ fgBytesSent. ULong64_t TSocket::fgBytesSent = 0. staticprotected . Definition at line 79 of file TSocket.h. ◆ fgClientProtocol. Int_t TSocket::fgClientProtocol = 17. staticprotected . Definition at line 81 of file TSocket.h. ◆ fLastUsage. TTimeStamp TSocket::fLastUsage. protected . Definition at line 76 of file TSocket.h. ◆ fLastUsageMtx. TVirtualMutex* TSocket::fLastUsageMtx. protected . Definition at line 75 of file TSocket.h. ◆ fLocalAddress. TInetAddress TSocket::fLocalAddress. protected . Definition at line 63 of file TSocket.h. ◆ fRemoteProtocol. Int_t TSocket::fRemoteProtocol. protected . Definition at line 64 of file TSocket.h. ◆ fSecContext. TSecContext* TSocket::fSecContext. protected . Definition at line 65 of file TSocket.h. ◆ fService. TString TSocket::fService. protected . Definition at line 67 of file TSocket.h. ◆ fServType. EServiceType TSocket::fServType. protected . Definition at line 68 of file TSocket.h. ◆ fSocket. Int_t TSocket::fSocket. protected . Definition at line 69 of file TSocket.h. ◆ fTcpWindowSize. Int_t TSocket::fTcpWindowSize. protected . Definition at line 70 of file TSocket.h. ◆ fUrl. TString TSocket::fUrl. protected . Definition at line 71 of file TSocket.h. ◆ fUUIDs. TList* TSocket::fUUIDs. protected . Definition at line 73 of file TSocket.h. Libraries for TSocket:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TSocket.h; net/net/src/TSocket.cxx. TSocket. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:44056,Guid,Guide,44056,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['Guid'],['Guide']
Usability,"inition at line 83 of file TProofResourcesStatic.cxx. ◆ IsA(). TClass * TProofResourcesStatic::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofResources.; Definition at line 67 of file TProofResourcesStatic.h. ◆ ReadConfigFile(). Bool_t TProofResourcesStatic::ReadConfigFile ; (; const char * ; confDir, . const char * ; fileName . ). private . Read the PROOF config file and fill the master and worker list. ; Definition at line 133 of file TProofResourcesStatic.cxx. ◆ SetOption(). void TProofResourcesStatic::SetOption ; (; TProofNodeInfo * ; nodeinfo, . const TString & ; option, . const TString & ; value . ). staticprivate . Static method to set the node info options. ; Definition at line 330 of file TProofResourcesStatic.cxx. ◆ Streamer(). void TProofResourcesStatic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofResources. ◆ StreamerNVirtual(). void TProofResourcesStatic::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TProofResourcesStatic.h. Member Data Documentation. ◆ fFileName. TString TProofResourcesStatic::fFileName. private . Definition at line 47 of file TProofResourcesStatic.h. ◆ fFoundMaster. Bool_t TProofResourcesStatic::fFoundMaster. private . Definition at line 46 of file TProofResourcesStatic.h. ◆ fMaster. TProofNodeInfo* TProofResourcesStatic::fMaster. private . Definition at line 43 of file TProofResourcesStatic.h. ◆ fSubmasterList. TList* TProofResourcesStatic::fSubmasterList. private . Definition at line 44 of file TProofResourcesStatic.h. ◆ fWorkerList. TList* TProofResourcesStatic::fWorkerList. private . Definition at line 45 of file TProofResourcesStatic.h. proof/proof/inc/TProofResourcesStatic.h; proof/proof/src/TProofResourcesStatic.cxx. TProofResourcesStatic. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResourcesStatic.html:17685,Guid,Guide,17685,doc/master/classTProofResourcesStatic.html,https://root.cern,https://root.cern/doc/master/classTProofResourcesStatic.html,1,['Guid'],['Guide']
Usability,"inition for most cases without need for a RooFormulaVar object: e.g. a Gaussian resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5) Note that for a 'wide' Gaussian the -inf to +inf integration may converge more quickly than that over a finite range! The default numeric precision is 1e-7, i.e. the global default for numeric integration but you should experiment with this value to see if it is sufficient for example by studying the number of function calls that MINUIT needs to fit your function as function of the convolution precision. ; Definition at line 26 of file RooNumConvPdf.h. Public Member Functions;  RooNumConvPdf ();  ;  RooNumConvPdf (const char *name, const char *title, RooRealVar &convVar, RooAbsPdf &pdf, RooAbsPdf &resmodel);  ;  RooNumConvPdf (const RooNumConvPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumConvPdf () override;  Destructor. ;  ; void clearConvolutionWindow ();  ; TObject * clone (const char *newname) const override;  ; RooNumIntConfig & convIntConfig ();  ; double evaluate () const override;  Calculate and return value of p.d.f. ;  ; TClass * IsA () const override;  ; RooAbsReal & model () const;  ; RooAbsReal & pdf () const;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the product operator construction. ;  ; const TH2 * profileData () const;  ; void setCallProfiling (bool flag, Int_t nbinX=40, Int_t nbinCall=40, Int_t nCallHigh=1000);  ; void setCallWarning (Int_t threshold=2000);  ; void setConvolutionWindow (RooAbsReal &centerParam, RooAbsReal &widthParam, double widthScaleFactor=1);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooRealVar & var () const;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:2952,clear,clearConvolutionWindow,2952,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidTQCommand::PrintCollectionHeader(Option_t* option) const. Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TQCommand*fCurrentthe latest executed command; TObjLink*fCursorcurrent position in history stack; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; UInt_tfLimitmaximum number of commands can be located in stack; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TList*fLogBooklisting of all actions during execution; Bool_tfLoggingkTRUE if logging is ON; Int_tTQCommand::fNRargsnumber of redo arguments; Int_tTQCommand::fNUargsnumber of undo arguments; TStringTQCommand::fNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tTQCommand::fNewDeletekTRUE if Redo/Undo methods are new/delete; void*TQCommand::fObjectobject to which undo/redo actions applied; TQConnection*TQCommand::fRedodo/redo action; Long_t*TQCommand::fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:17475,undo,undo,17475,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,4,['undo'],['undo']
Usability,"inkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:5343,clear,clearEvalErrorLog,5343,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['clear'],['clearEvalErrorLog']
Usability,"inkedList(), const RooCmdArg* formatCmd = 0) const; Internal implementation function of printLatex. Bool_t allInRange(const char* rangeSpec) const; Return true if all contained object report to have their; value inside the specified range. void makeStructureTag(). void makeTypedStructureTag(). TObject* clone(const char* newname) const. TObject* create(const char* newname) const. TObject* Clone(const char* newname = 0) const. void setHashTableSize(Int_t i); Hash table control. Int_t getHashTableSize() const; Return size of internal hash table. Bool_t contains(const RooAbsArg& var) const; Returns true if object with same name as var is contained in this collection. Bool_t containsInstance(const RooAbsArg& var) const; Returns true if var is contained in this collection. TIterator* createIterator(Bool_t dir = kIterForward) const; export subset of THashList interface. RooFIter fwdIterator() const; { return RooFIter(&_list); }. Int_t getSize() const; Return the number of elements in the collection. RooAbsArg * first() const; Return the first element in this collection. void Print(Option_t* options = 0) const; Printing interface (human readable). void setName(const char* name); Set name of collection. const char* GetName() const; Return namer of collection. Bool_t isOwning() const; Does collection own contents?. void releaseOwnership(); { _ownCont = kFALSE ; }. void takeOwnership(); { _ownCont = kTRUE ; }. void sort(Bool_t ascend = kTRUE); { _list.Sort(ascend) ; }. TNamed* structureTag(); { if (_structureTag==0) makeStructureTag() ; return _structureTag ; }. TNamed* typedStructureTag(); { if (_typedStructureTag==0) makeTypedStructureTag() ; return _typedStructureTag ; }. void clearStructureTags(); { _structureTag=0 ; _typedStructureTag = 0 ; }. » Last changed: Tue Jun 30 14:30:02 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCollection.html:22627,clear,clearStructureTags,22627,root/html602/RooAbsCollection.html,https://root.cern,https://root.cern/root/html602/RooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"inkedList(), const RooCmdArg* formatCmd = 0) const; Internal implementation function of printLatex. Bool_t allInRange(const char* rangeSpec) const; Return true if all contained object report to have their; value inside the specified range. void makeStructureTag(). void makeTypedStructureTag(). TObject* clone(const char* newname) const. TObject* create(const char* newname) const. TObject* Clone(const char* newname = 0) const. void setHashTableSize(Int_t i); Hash table control. Int_t getHashTableSize() const; Return size of internal hash table. Bool_t contains(const RooAbsArg& var) const; Returns true if object with same name as var is contained in this collection. Bool_t containsInstance(const RooAbsArg& var) const; Returns true if var is contained in this collection. TIterator* createIterator(Bool_t dir = kIterForward) const; export subset of THashList interface. RooFIter fwdIterator() const; { return RooFIter(&_list); }. Int_t getSize() const; Return the number of elements in the collection. RooAbsArg * first() const; Return the first element in this collection. void Print(Option_t* options = 0) const; Printing interface (human readable). void setName(const char* name); Set name of collection. const char* GetName() const; Return namer of collection. Bool_t isOwning() const; Does collection own contents?. void releaseOwnership(); { _ownCont = kFALSE ; }. void takeOwnership(); { _ownCont = kTRUE ; }. void sort(Bool_t ascend = kTRUE); { _list.Sort(ascend) ; }. TNamed* structureTag(); { if (_structureTag==0) makeStructureTag() ; return _structureTag ; }. TNamed* typedStructureTag(); { if (_typedStructureTag==0) makeTypedStructureTag() ; return _typedStructureTag ; }. void clearStructureTags(); { _structureTag=0 ; _typedStructureTag = 0 ; }. » Last changed: Tue Mar 10 17:13:56 2015 » Last generated: 2015-03-10 17:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCollection.html:21117,clear,clearStructureTags,21117,root/html534/RooAbsCollection.html,https://root.cern,https://root.cern/root/html534/RooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,inline . Definition at line 69 of file Pattern.h. ◆ beginOutput(). const_iterator Pattern::beginOutput ; (; ); const. inline . Definition at line 71 of file Pattern.h. ◆ endInput(). const_iterator Pattern::endInput ; (; ); const. inline . Definition at line 70 of file Pattern.h. ◆ endOutput(). const_iterator Pattern::endOutput ; (; ); const. inline . Definition at line 72 of file Pattern.h. ◆ input() [1/2]. std::vector< double > & Pattern::input ; (; ). inline . Definition at line 83 of file Pattern.h. ◆ input() [2/2]. const std::vector< double > & Pattern::input ; (; ); const. inline . Definition at line 85 of file Pattern.h. ◆ inputSize(). size_t Pattern::inputSize ; (; ); const. inline . Definition at line 77 of file Pattern.h. ◆ operator=(). Pattern & Pattern::operator= ; (; const Pattern & ; other). inline . Definition at line 37 of file Pattern.h. ◆ output() [1/2]. std::vector< double > & Pattern::output ; (; ). inline . Definition at line 84 of file Pattern.h. ◆ output() [2/2]. const std::vector< double > & Pattern::output ; (; ); const. inline . Definition at line 86 of file Pattern.h. ◆ outputSize(). size_t Pattern::outputSize ; (; ); const. inline . Definition at line 78 of file Pattern.h. ◆ weight() [1/2]. double Pattern::weight ; (; ); const. inline . Definition at line 74 of file Pattern.h. ◆ weight() [2/2]. void Pattern::weight ; (; double ; w). inline . Definition at line 75 of file Pattern.h. Member Data Documentation. ◆ m_input. std::vector<double> Pattern::m_input. private . Definition at line 89 of file Pattern.h. ◆ m_output. std::vector<double> Pattern::m_output. private . Definition at line 90 of file Pattern.h. ◆ m_weight. double Pattern::m_weight. private . Definition at line 91 of file Pattern.h. Libraries for Pattern:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/Pattern.h. Pattern. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPattern.html:5316,Guid,Guide,5316,doc/master/classPattern.html,https://root.cern,https://root.cern/doc/master/classPattern.html,1,['Guid'],['Guide']
Usability,inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 133 of file TDocInfo.h. ◆ GetClasses(). TList * TModuleDocInfo::GetClasses ; (; ). inline . Definition at line 122 of file TDocInfo.h. ◆ GetDoc(). const char * TModuleDocInfo::GetDoc ; (; ); const. inline . Definition at line 116 of file TDocInfo.h. ◆ GetSub(). THashList & TModuleDocInfo::GetSub ; (; ). inline . Definition at line 125 of file TDocInfo.h. ◆ GetSuper(). TModuleDocInfo * TModuleDocInfo::GetSuper ; (; ); const. inline . Definition at line 124 of file TDocInfo.h. ◆ IsA(). TClass * TModuleDocInfo::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 133 of file TDocInfo.h. ◆ IsSelected(). Bool_t TModuleDocInfo::IsSelected ; (; ); const. inline . Definition at line 119 of file TDocInfo.h. ◆ SetDoc(). void TModuleDocInfo::SetDoc ; (; const char * ; doc). inline . Definition at line 115 of file TDocInfo.h. ◆ SetSelected(). void TModuleDocInfo::SetSelected ; (; Bool_t ; sel = kTRUE). inline . Definition at line 118 of file TDocInfo.h. ◆ Streamer(). void TModuleDocInfo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TModuleDocInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 133 of file TDocInfo.h. Member Data Documentation. ◆ fClasses. TList TModuleDocInfo::fClasses. private . Definition at line 130 of file TDocInfo.h. ◆ fSelected. Bool_t TModuleDocInfo::fSelected. private . Definition at line 131 of file TDocInfo.h. ◆ fSub. THashList TModuleDocInfo::fSub. private . Definition at line 129 of file TDocInfo.h. ◆ fSuper. TModuleDocInfo* TModuleDocInfo::fSuper. private . Definition at line 128 of file TDocInfo.h. html/inc/TDocInfo.h. TModuleDocInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTModuleDocInfo.html:14542,Guid,Guide,14542,doc/master/classTModuleDocInfo.html,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html,1,['Guid'],['Guide']
Usability,"inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file UniformProposal.h. ◆ GetProposalDensity(). double UniformProposal::GetProposalDensity ; (; RooArgSet & ; x1, . RooArgSet & ; x2 . ). overridevirtual . Return the probability of proposing the point x1 given the starting point x2. ; Implements RooStats::ProposalFunction.; Definition at line 61 of file UniformProposal.cxx. ◆ IsA(). TClass * RooStats::UniformProposal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ProposalFunction.; Definition at line 42 of file UniformProposal.h. ◆ IsSymmetric(). bool UniformProposal::IsSymmetric ; (; RooArgSet & ; x1, . RooArgSet & ; x2 . ). overridevirtual . Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ; Implements RooStats::ProposalFunction.; Definition at line 52 of file UniformProposal.cxx. ◆ Propose(). void UniformProposal::Propose ; (; RooArgSet & ; xPrime, . RooArgSet & ; x . ). overridevirtual . Populate xPrime with a new proposed point. ; Implements RooStats::ProposalFunction.; Definition at line 40 of file UniformProposal.cxx. ◆ Streamer(). void RooStats::UniformProposal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ProposalFunction. ◆ StreamerNVirtual(). void RooStats::UniformProposal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file UniformProposal.h. Libraries for RooStats::UniformProposal:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/UniformProposal.h; roofit/roostats/src/UniformProposal.cxx. RooStatsUniformProposal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html:14160,Guid,Guide,14160,doc/master/classRooStats_1_1UniformProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html,1,['Guid'],['Guide']
Usability,"inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 98 of file TQCommand.h. ◆ Delete(). void TQCommand::Delete ; (; Option_t * ; opt = """"). overridevirtual . If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ; If ""opt"" is zero - delete all merged commands. ; Reimplemented from TList.; Definition at line 285 of file TQCommand.cxx. ◆ GetCommand(). TQCommand * TQCommand::GetCommand ; (; ). static . Return a command which is doing redo/undo action. ; This static method allows to set undo parameters dynamically, i.e. during execution of Redo function.; Example: For redo actions like TGTextEdit::DelChar() it is not possible to know ahead what character will be deleted. To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)), one needs to call TQCommand::SetUndoArgs(1, character) from inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);; TQCommand::GetCommandstatic TQCommand * GetCommand()Return a command which is doing redo/undo action.Definition TQCommand.cxx:276. Definition at line 276 of file TQCommand.cxx. ◆ GetName(). const char * TQCommand::GetName ; (; ); const. overridevirtual . Returns the command name. ; Default name is ""ClassName::RedoName(args)"" If list of merged commands is not empty the name is ""ClassName::RedoName(args):cname1:cname2 ..."" ; Reimplemented from TCollection.; Definition at line 670 of file TQCommand.cxx. ◆ GetNRargs(). Int_t TQCommand::GetNRargs ; (; ); const. Returns a number of redo arguments. ; Definition at line 768 of file TQCommand.cxx. ◆ GetNUargs(). Int_t TQCommand::GetNUargs ; (; ); const. Returns a number of undo arguments. ; Definition at line 776 of file TQCommand.cxx. ◆ GetObject(). void * TQCommand::GetObject ; (; ); const. Returns an object for which undo redo actions are applied. ; Definition at line 784 of file TQCommand.cxx. ◆ GetRedo(). TQConnection * TQCommand::GetRedo ; (; ); const. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:37152,undo,undo,37152,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterv,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:15682,Simpl,SimpleInterval,15682,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . The combined data. ; Definition at line 241 of file GoFTest.h. ◆ fDist. EDistribution ROOT::Math::GoFTest::fDist. private . Type of distribution. ; Definition at line 238 of file GoFTest.h. ◆ fParams. std::vector<Double_t> ROOT::Math::GoFTest::fParams. private . The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ; Definition at line 239 of file GoFTest.h. ◆ fSamples. std::vector<std::vector<Double_t> > ROOT::Math::GoFTest::fSamples. private . The input data. ; Definition at line 243 of file GoFTest.h. ◆ fTestSampleFromH0. Bool_t ROOT::Math::GoFTest::fTestSampleFromH0. private . Definition at line 245 of file GoFTest.h. Libraries for ROOT::Math::GoFTest:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GoFTest.h; math/mathcore/src/GoFTest.cxx. ROOTMathGoFTest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:21597,Guid,Guide,21597,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Guid'],['Guide']
Usability,ins the minimum value of the x-Axis. ; Definition at line 90 of file TH2Editor.h. ◆ fSldYMax. TGNumberEntryField* TH2Editor::fSldYMax. protected . Contains the maximum value of the y-Axis. ; Definition at line 94 of file TH2Editor.h. ◆ fSldYMin. TGNumberEntryField* TH2Editor::fSldYMin. protected . Contains the minimum value of the y-Axis. ; Definition at line 93 of file TH2Editor.h. ◆ fSliderX. TGDoubleHSlider* TH2Editor::fSliderX. protected . Slider to set x-axis range. ; Definition at line 89 of file TH2Editor.h. ◆ fSliderY. TGDoubleHSlider* TH2Editor::fSliderY. protected . Slider to set y-axis range. ; Definition at line 92 of file TH2Editor.h. ◆ fTitle. TGTextEntry* TH2Editor::fTitle. protected . histogram title input field ; Definition at line 40 of file TH2Editor.h. ◆ fTitlePrec. Int_t TH2Editor::fTitlePrec. protected . font precision level ; Definition at line 46 of file TH2Editor.h. ◆ fTypeCombo. TGComboBox* TH2Editor::fTypeCombo. protected . histogram type combo box ; Definition at line 41 of file TH2Editor.h. ◆ fXBinOffsetSld. TGHSlider* TH2Editor::fXBinOffsetSld. protected . Add an x-offset to the origin of the histogram. ; Definition at line 82 of file TH2Editor.h. ◆ fXOffsetNumberEntry. TGNumberEntryField* TH2Editor::fXOffsetNumberEntry. protected . Shows the offset to the x origin of the histogram. ; Definition at line 81 of file TH2Editor.h. ◆ fYBinOffsetSld. TGHSlider* TH2Editor::fYBinOffsetSld. protected . Add an y-offset to the origin of the histogram. ; Definition at line 88 of file TH2Editor.h. ◆ fYOffsetNumberEntry. TGNumberEntryField* TH2Editor::fYOffsetNumberEntry. protected . Shows the offset to the y origin of the histogram. ; Definition at line 87 of file TH2Editor.h. Libraries for TH2Editor:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TH2Editor.h; gui/ged/src/TH2Editor.cxx. TH2Editor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:69163,Guid,Guide,69163,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['Guid'],['Guide']
Usability,"ins-1,xaxis->GetNbins() );; 11210 xaxis->SetRange(binx,binx2);; 11211 Int_t firstZ = zaxis->GetFirst();; 11212 Int_t lastZ = zaxis->GetLast();; 11213 Int_t binz = firstZ + Int_t((lastZ-firstZ)*(py-pymin)/(pymax-pymin));; 11214 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11215 zaxis->SetRange(binz,binz2);; 11216 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11217 if (nbins>1 && line1[0].GetX()) {; 11218 gVirtualX->DrawPolyLine(2,line2);; 11219 gVirtualX->DrawPolyLine(2,line3);; 11220 gVirtualX->DrawPolyLine(2,line4);; 11221 gVirtualX->DrawPolyLine(5,endface1);; 11222 gVirtualX->DrawPolyLine(5,endface2);; 11223 }; 11224 xx[0]=xaxis->GetBinCenter(binx);; 11225 xx[2] = zaxis->GetBinCenter(binz);; 11226 xx[1] = yaxis->GetXmin();; 11227 view->WCtoNDC(xx,u);; 11228 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11229 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11230 xx[1] = yaxis->GetXmax();; 11231 view->WCtoNDC(xx,u);; 11232 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11233 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11234 gVirtualX->DrawPolyLine(2,line1);; 11235 if (nbins>1) {; 11236 xx[1] = yaxis->GetXmin();; 11237 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11238 xx[0] = xaxis->GetBinCenter(binx);; 11239 view->WCtoNDC(xx,u);; 11240 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11241 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11242 xx[1] = yaxis->GetXmax();; 11243 view->WCtoNDC(xx,u);; 11244 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11245 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11246 ; 11247 xx[1] = yaxis->GetXmin();; 11248 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11249 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11250 view->WCtoNDC(xx,u);; 11251 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11252 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11253 xx[1] = yaxis->GetXmax();; 11254 view->WCtoNDC(xx,u);; 11255 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11256 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:406856,ux,uxmin,406856,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLRedrawTimer(). TGLRedrawTimer::TGLRedrawTimer ; (; TGLViewer & ; viewer). inline . Definition at line 408 of file TGLViewer.h. ◆ ~TGLRedrawTimer(). TGLRedrawTimer::~TGLRedrawTimer ; (; ). inlineoverride . Definition at line 410 of file TGLViewer.h. Member Function Documentation. ◆ IsPending(). Bool_t TGLRedrawTimer::IsPending ; (; ); const. inline . Definition at line 417 of file TGLViewer.h. ◆ Notify(). Bool_t TGLRedrawTimer::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 422 of file TGLViewer.h. ◆ RequestDraw(). void TGLRedrawTimer::RequestDraw ; (; Int_t ; milliSec, . Short_t ; redrawLOD . ). inline . Definition at line 411 of file TGLViewer.h. ◆ Stop(). void TGLRedrawTimer::Stop ; (; ). inlineoverridevirtual . Reimplemented from TTimer.; Definition at line 418 of file TGLViewer.h. Member Data Documentation. ◆ fPending. Bool_t TGLRedrawTimer::fPending. private . Definition at line 406 of file TGLViewer.h. ◆ fRedrawLOD. Short_t TGLRedrawTimer::fRedrawLOD. private . Definition at line 405 of file TGLViewer.h. ◆ fViewer. TGLViewer& TGLRedrawTimer::fViewer. private . Definition at line 404 of file TGLViewer.h. Libraries for TGLRedrawTimer:. [legend]; The documentation for this class was generated from the following file:; graf3d/gl/inc/TGLViewer.h. TGLRedrawTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLRedrawTimer.html:19369,Guid,Guide,19369,doc/master/classTGLRedrawTimer.html,https://root.cern,https://root.cern/doc/master/classTGLRedrawTimer.html,1,['Guid'],['Guide']
Usability,"int (bool shortFormat=false) const;  . Private Attributes; std::string fBriefDescription;  ; unsigned int fFileCount;  ; std::string fFullDescription;  . Friends; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  . #include <ROOT/RDF/RDFDescription.hxx>; Constructor & Destructor Documentation. ◆ RDFDescription(). ROOT::RDF::RDFDescription::RDFDescription ; (; const std::string & ; briefDescription, . const std::string & ; fullDescription, . unsigned int ; filecount . ). Definition at line 17 of file RDFDescription.cxx. Member Function Documentation. ◆ AsString(). std::string ROOT::RDF::RDFDescription::AsString ; (; bool ; shortFormat = false); const. Definition at line 21 of file RDFDescription.cxx. ◆ GetNFiles(). unsigned int ROOT::RDF::RDFDescription::GetNFiles ; (; ); const. inline . Definition at line 38 of file RDFDescription.hxx. ◆ Print(). void ROOT::RDF::RDFDescription::Print ; (; bool ; shortFormat = false); const. Definition at line 29 of file RDFDescription.cxx. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). friend . Definition at line 34 of file RDFDescription.cxx. Member Data Documentation. ◆ fBriefDescription. std::string ROOT::RDF::RDFDescription::fBriefDescription. private . Definition at line 29 of file RDFDescription.hxx. ◆ fFileCount. unsigned int ROOT::RDF::RDFDescription::fFileCount. private . Definition at line 31 of file RDFDescription.hxx. ◆ fFullDescription. std::string ROOT::RDF::RDFDescription::fFullDescription. private . Definition at line 30 of file RDFDescription.hxx. Libraries for ROOT::RDF::RDFDescription:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RDFDescription.hxx; tree/dataframe/src/RDFDescription.cxx. ROOTRDFRDFDescription. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDFDescription.html:2733,Guid,Guide,2733,doc/master/classROOT_1_1RDF_1_1RDFDescription.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDFDescription.html,1,['Guid'],['Guide']
Usability,"int const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2770,clear,clear,2770,doc/master/classROOT_1_1Experimental_1_1RResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html,1,['clear'],['clear']
Usability,"int const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TVectorT< Double_t >; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (10) is as follows; ; | 1 |; ------------------; 0 |1; 1 |2; 2 |3; 3 |4; 4 |5; 5 |6; 6 |7; 7 |8; 8 |9; 9 |10; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 70 of file TRObject.h. Public Member Functions;  TRObject ();  Default constructor. ;  ;  TRObject (SEXP robj);  Construct a TRObject given a R base object. ;  ;  TRObject (SEXP robj, Bool_t status);  Construct a TRObject given a R base object. ;  ; template<class T > ; T As ();  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:1841,Guid,Guide,1841,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,1,['Guid'],['Guide']
Usability,"int itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; virtual void setExpectedData (bool);  ; virtual void setProtoDataOrder (Int_t *lut);  Set the traversal order of prototype data to that in the lookup tables passed as argument. ;  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffGenContext.html:3314,Clear,Clear,3314,doc/master/classRooEffGenContext.html,https://root.cern,https://root.cern/doc/master/classRooEffGenContext.html,2,['Clear'],['Clear']
Usability,"int nElements, TBuffer& b); voidWriteMap(UInt_t nElements, TBuffer& b). private:. TEmulatedMapProxy&operator=(const TEmulatedMapProxy& rhs). Data Members; public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t); static TGenCollectionProxy::(anonymous)TGenCollectionProxy::kBIT_ISSTRING; static TGenCollectionProxy::(anonymous)TGenCollectionProxy::kBIT_ISTSTRING; static TGenCollectionProxy::(anonymous)TGenCollectionProxy::kBOOL_t; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kIsAssociative; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kIsEmulated; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kNeedDelete. protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::Collectfunc_tTGenCollectionProxy::fCollectMethod to collect objects from container; TGenCollectionProxy::ArrIterfunc_tTGenCollectionProxy::fConstructContainer accessors: block construct; map<string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; TGenCollectionProxy::Sizing_tTGenCollectionProxy::fDestructContainer accessors: block destruct; TGenCollectionProxy::EnvironBase_t*TGenCollectionProxy::fEnvAddress of the currently proxied object; TGenCollectionProxy::Feedfunc_tTGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; TVirtualCollectionProxy::CopyIterator_tTGenCollectionProxy::fFunctionCopyIterator; TVirtualCollectionProxy::CreateIterators_tTGenCollectionProxy::fFunctionCreateIterators; TVirtualCollectionProxy::DeleteIterator_tTGenCollectionProxy::fFunctionDeleteI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEmulatedMapProxy.html:5390,clear,clear,5390,root/html602/TEmulatedMapProxy.html,https://root.cern,https://root.cern/root/html602/TEmulatedMapProxy.html,2,['clear'],['clear']
Usability,"int statement ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:147204,Simpl,Simple,147204,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['Simple']
Usability,"int(). void TGeoElement::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print this isotope. ; Reimplemented from TObject.; Reimplemented in TGeoElementRN.; Definition at line 216 of file TGeoElement.cxx. ◆ SetDefined(). void TGeoElement::SetDefined ; (; Bool_t ; flag = kTRUE). inline . Definition at line 85 of file TGeoElement.h. ◆ SetUsed(). void TGeoElement::SetUsed ; (; Bool_t ; flag = kTRUE). inline . Definition at line 86 of file TGeoElement.h. ◆ Streamer(). void TGeoElement::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoElementRN. ◆ StreamerNVirtual(). void TGeoElement::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TGeoElement.h. ◆ Z(). Int_t TGeoElement::Z ; (; ); const. inline . Definition at line 68 of file TGeoElement.h. Member Data Documentation. ◆ fA. Double_t TGeoElement::fA. protected . Definition at line 43 of file TGeoElement.h. ◆ fAbundances. Double_t* TGeoElement::fAbundances. protected . Definition at line 45 of file TGeoElement.h. ◆ fCoulomb. Double_t TGeoElement::fCoulomb. protected . Definition at line 46 of file TGeoElement.h. ◆ fIsotopes. TObjArray* TGeoElement::fIsotopes. protected . Definition at line 44 of file TGeoElement.h. ◆ fN. Int_t TGeoElement::fN. protected . Definition at line 41 of file TGeoElement.h. ◆ fNisotopes. Int_t TGeoElement::fNisotopes. protected . Definition at line 42 of file TGeoElement.h. ◆ fRadTsai. Double_t TGeoElement::fRadTsai. protected . Definition at line 47 of file TGeoElement.h. ◆ fZ. Int_t TGeoElement::fZ. protected . Definition at line 40 of file TGeoElement.h. Libraries for TGeoElement:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoElement.h; geom/geom/src/TGeoElement.cxx. TGeoElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElement.html:20468,Guid,Guide,20468,doc/master/classTGeoElement.html,https://root.cern,https://root.cern/doc/master/classTGeoElement.html,1,['Guid'],['Guide']
Usability,"intSet3D.h. ◆ operator=(). TPointSet3D & TPointSet3D::operator= ; (; const TPointSet3D & ; t). Assignment operator. ; Definition at line 77 of file TPointSet3D.cxx. ◆ PointSelected(). void TPointSet3D::PointSelected ; (; Int_t ; n). virtual . This virtual method is called from TPointSet3DGL when a point is selected. ; At this point it just prints out n and id of the point (if it exists). To make something useful out of this do:. subclass and re-implement this method;; extend this class to include TExec or some other kind of callback. . Reimplemented in TEvePointSet, and TEvePointSetProjected.; Definition at line 145 of file TPointSet3D.cxx. ◆ SetOwnIds(). void TPointSet3D::SetOwnIds ; (; Bool_t ; o). inline . Definition at line 52 of file TPointSet3D.h. ◆ SetPointId() [1/2]. void TPointSet3D::SetPointId ; (; Int_t ; n, . TObject * ; id . ). Set id of point n. ; Definition at line 115 of file TPointSet3D.cxx. ◆ SetPointId() [2/2]. void TPointSet3D::SetPointId ; (; TObject * ; id). Set id of last point. ; Use this method if you also use TPolyMarker3D::SetNextPoint(). ; Definition at line 107 of file TPointSet3D.cxx. ◆ Streamer(). void TPointSet3D::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPointSet3D. ; Reimplemented from TObject.; Definition at line 157 of file TPointSet3D.cxx. ◆ StreamerNVirtual(). void TPointSet3D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TPointSet3D.h. Member Data Documentation. ◆ fIds. TRefArray TPointSet3D::fIds. protected . Definition at line 25 of file TPointSet3D.h. ◆ fOwnIds. Bool_t TPointSet3D::fOwnIds. protected . Definition at line 24 of file TPointSet3D.h. Libraries for TPointSet3D:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TPointSet3D.h; graf3d/g3d/src/TPointSet3D.cxx. TPointSet3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:22682,Guid,Guide,22682,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,1,['Guid'],['Guide']
Usability,"inted using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:77070,simpl,simple,77070,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"inted using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:78492,simpl,simple,78492,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"integral. ; Reimplemented from RooAbsReal.; Definition at line 2361 of file RooProdPdf.cxx. ◆ initialize(). void RooFixedProdPdf::initialize ; (; ). inlineprivate . Definition at line 2380 of file RooProdPdf.cxx. ◆ selfNormalized(). bool RooFixedProdPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 2334 of file RooProdPdf.cxx. ◆ translate(). void RooFixedProdPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. inlineoverridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 2343 of file RooProdPdf.cxx. Member Data Documentation. ◆ _cache. std::unique_ptr<RooProdPdf::CacheElem> RooFixedProdPdf::_cache. private . Definition at line 2401 of file RooProdPdf.cxx. ◆ _normSet. RooArgSet RooFixedProdPdf::_normSet. private . Definition at line 2400 of file RooProdPdf.cxx. ◆ _prodPdf. std::unique_ptr<RooProdPdf> RooFixedProdPdf::_prodPdf. private . Definition at line 2403 of file RooProdPdf.cxx. ◆ _servers. RooSetProxy RooFixedProdPdf::_servers. private . Definition at line 2402 of file RooProdPdf.cxx. roofit/roofitcore/src/RooProdPdf.cxx. RooFixedProdPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:80436,Guid,Guide,80436,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['Guid'],['Guide']
Usability,"inter to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. » Last change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:4364,clear,clearOnRedirect,4364,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,2,['clear'],['clearOnRedirect']
Usability,"inter to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:4447,clear,clearOnRedirect,4447,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,1,['clear'],['clearOnRedirect']
Usability,"interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:11783,clear,clear,11783,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['clear'],['clear']
Usability,"internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriterReservation. private . ! A writer wants access ; Definition at line 284 of file TReentrantRWLock.hxx. core/thread/src/TReentrantRWLock.hxx; core/thread/src/TReentrantRWLock.cxx. ROOTTReentrantRWLock. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:7295,Guid,Guide,7295,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,1,['Guid'],['Guide']
Usability,"interpolated histogram. ; Reimplemented from RooAbsReal.; Definition at line 686 of file ParamHistFunc.cxx. ◆ setConstant(). void ParamHistFunc::setConstant ; (; bool ; constant). Definition at line 233 of file ParamHistFunc.cxx. ◆ setParamConst(). void ParamHistFunc::setParamConst ; (; Int_t ; index, . bool ; varConst = true . ). Definition at line 227 of file ParamHistFunc.cxx. ◆ setShape(). void ParamHistFunc::setShape ; (; TH1 * ; shape). Definition at line 242 of file ParamHistFunc.cxx. ◆ Streamer(). void ParamHistFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ParamHistFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 111 of file ParamHistFunc.h. ◆ translate(). void ParamHistFunc::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 563 of file ParamHistFunc.cxx. Member Data Documentation. ◆ _dataSet. RooDataHist ParamHistFunc::_dataSet. mutableprotected . Definition at line 98 of file ParamHistFunc.h. ◆ _dataVars. RooListProxy ParamHistFunc::_dataVars. protected . The RooRealVars. ; Definition at line 82 of file ParamHistFunc.h. ◆ _normIntMgr. RooObjCacheManager ParamHistFunc::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:73449,simpl,simple,73449,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,1,['simpl'],['simple']
Usability,"interval lower limit ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual double UpperLimit ();  return the interval upper limit ;  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:2395,Clear,Clear,2395,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Clear'],['Clear']
Usability,"ints stored.Definition SparseData.cxx:229; ROOT::Fit::SparseData::GetBinDataNoZerosvoid GetBinDataNoZeros(BinData &) constSame as before, but including zero content bins.Definition SparseData.cxx:348; ROOT::Fit::SparseData::operator=SparseData & operator=(const SparseData &rhs)Assignment operator.Definition SparseData.cxx:220; ROOT::Fit::SparseData::PrintListvoid PrintList() constDebug method to print the list of bins stored.Definition SparseData.cxx:301; ROOT::Fit::SparseData::GetBinDatavoid GetBinData(BinData &) constTransforms the data into a ROOT::Fit::BinData structure.Definition SparseData.cxx:308; ROOT::Fit::SparseData::SparseDataSparseData(std::vector< double > &min, std::vector< double > &max)Constructor with a vector.Definition SparseData.cxx:193; ROOT::Fit::SparseData::~SparseData~SparseData() overrideDestructor.Definition SparseData.cxx:227; ROOT::Fit::SparseData::GetBinDataIntegralvoid GetBinDataIntegral(BinData &) constSame as before, but returning a BinData with integral format (containing bin edges)Definition SparseData.cxx:330; double; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::DivideBoxvoid DivideBox(const vector< double > &min, const vector< double > &max, const vector< double > &bmin, const vector< double > &bmax, const unsigned int size, const unsigned int n, list< Box > &l, const double val, const double error)Definition SparseData.cxx:151; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; lTLine lDefinition textangle.C:4. mathmathcoresrcSparseData.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SparseData_8cxx_source.html:18764,Guid,Guide,18764,doc/master/SparseData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SparseData_8cxx_source.html,1,['Guid'],['Guide']
Usability,"inue;; 1239 if (initialrangeset) {; 1240 Double_t rx1,ry1,rx2,ry2;; 1241 g->ComputeRange(rx1, ry1, rx2, ry2);; 1242 if (rx1 < rwxmin) rwxmin = rx1;; 1243 if (ry1 < rwymin) rwymin = ry1;; 1244 if (rx2 > rwxmax) rwxmax = rx2;; 1245 if (ry2 > rwymax) rwymax = ry2;; 1246 } else {; 1247 g->ComputeRange(rwxmin, rwymin, rwxmax, rwymax);; 1248 initialrangeset = kTRUE;; 1249 }; 1250 if (g->GetN() > npt) npt = g->GetN();; 1251 }; 1252 if (rwxmin == rwxmax) rwxmax += 1.;; 1253 if (rwymin == rwymax) rwymax += 1.;; 1254 dx = 0.05*(rwxmax-rwxmin);; 1255 dy = 0.05*(rwymax-rwymin);; 1256 uxmin = rwxmin - dx;; 1257 uxmax = rwxmax + dx;; 1258 if (gPad->GetLogy()) {; 1259 if (rwymin <= 0) rwymin = 0.001*rwymax;; 1260 minimum = rwymin/(1+0.5*TMath::Log10(rwymax/rwymin));; 1261 maximum = rwymax*(1+0.2*TMath::Log10(rwymax/rwymin));; 1262 } else {; 1263 minimum = rwymin - dy;; 1264 maximum = rwymax + dy;; 1265 }; 1266 if (minimum < 0 && rwymin >= 0) minimum = 0;; 1267 if (maximum > 0 && rwymax <= 0) maximum = 0;; 1268 }; 1269 ; 1270 if (fMinimum != -1111) rwymin = minimum = fMinimum;; 1271 if (fMaximum != -1111) rwymax = maximum = fMaximum;; 1272 if (uxmin < 0 && rwxmin >= 0) {; 1273 if (gPad->GetLogx()) uxmin = 0.9*rwxmin;; 1274 //else uxmin = 0;; 1275 }; 1276 if (uxmax > 0 && rwxmax <= 0) {; 1277 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1278 //else uxmax = 0;; 1279 }; 1280 if (minimum < 0 && rwymin >= 0) {; 1281 if (gPad->GetLogy()) minimum = 0.9*rwymin;; 1282 //else minimum = 0;; 1283 }; 1284 if (maximum > 0 && rwymax <= 0) {; 1285 if (gPad->GetLogy()) maximum = 1.1*rwymax;; 1286 //else maximum = 0;; 1287 }; 1288 if (minimum <= 0 && gPad->GetLogy()) minimum = 0.001*maximum;; 1289 if (uxmin <= 0 && gPad->GetLogx()) {; 1290 if (uxmax > 1000) uxmin = 1;; 1291 else uxmin = 0.001*uxmax;; 1292 }; 1293 rwymin = minimum;; 1294 rwymax = maximum;; 1295 if (fHistogram) {; 1296 fHistogram->GetYaxis()->SetLimits(rwymin,rwymax);; 1297 }; 1298 ; 1299 // Create a temporary histogram to draw the axis; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:40906,ux,uxmin,40906,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,2,['ux'],['uxmin']
Usability,"inuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 79 of file RMinimizer.h. ◆ HessMatrix(). double ROOT::Math::RMinimizer::HessMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. Returns the ith jth component of the Hessian matrix. . ◆ Minimize(). bool ROOT::Math::RMinimizer::Minimize ; (; ). overridevirtual . Function to find the minimum. ; function for finding the minimum ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 47 of file RMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::RMinimizer::NCalls ; (; ); const. overridevirtual . Returns the number of function calls. ; returns number of function calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 44 of file RMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::RMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 61 of file RMinimizer.h. Member Data Documentation. ◆ fCovMatrix. TMatrixD ROOT::Math::RMinimizer::fCovMatrix. private . covariant matrix ; Definition at line 39 of file RMinimizer.h. ◆ fErrors. std::vector<double> ROOT::Math::RMinimizer::fErrors. private . vector of parameter errors ; Definition at line 38 of file RMinimizer.h. ◆ fHessMatrix. TMatrixD ROOT::Math::RMinimizer::fHessMatrix. private . Hessian matrix. ; Definition at line 40 of file RMinimizer.h. ◆ fMethod. std::string ROOT::Math::RMinimizer::fMethod. protected . minimizer method to be used, must be of a type listed in R optim or optimx descriptions ; Definition at line 35 of file RMinimizer.h. Libraries for ROOT::Math::RMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/rtools/inc/Math/RMinimizer.h; math/rtools/src/RMinimizer.cxx. ROOTMathRMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:15473,Guid,Guide,15473,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['Guid'],['Guide']
Usability,"inuit*fMinuit; vector<double>fParams; unsigned intfStrategy; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IBaseFunctionMultiDim*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:6195,Simpl,Simplex,6195,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,6,['Simpl'],['Simplex']
Usability,"inuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IBaseFunctionMultiDim*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuitMinimizer.html:6723,Simpl,Simplex,6723,root/html534/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html534/TMinuitMinimizer.html,2,['Simpl'],['Simplex']
Usability,"ion 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gx_Int[mean,x]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.01562 , s = 4.5; [5] h = 0.003906 , s = 3.75; [6] h = 0.0009766 , s = 4.125; [7] h = 0.0002441 , s = 3.938; [8] h = 6.104e-05 , s = 4.031; [9] h = 1.526e-05 , s = 3.984; [10] h = 3.815e-06 , s = 4.008; [11] h = 9.537e-07 , s = 3.996; [12] h = 2.384e-07 , s = 4.002; [13] h = 5.96e-08 , s = 3.999; [14] h = 1.49e-08 , s = 4; [15] h = 3.725e-09 , s = 4; [16] h = 9.313e-10 , s = 4; [17] h = 2.328e-10 , s = 4; [18] h = 5.821e-11 , s = 4; [19] h = 1.455e-11 , s = 4; [20] h = 3.638e-12 , s = 4; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x8a2bb50 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1; [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x8da99c0 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x for nset (x) with code 3 from preexisting content.; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf211_paramconv.py. tutorialsroofitrf211_paramconv.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8py.html:30874,Guid,Guide,30874,doc/master/rf211__paramconv_8py.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8py.html,1,['Guid'],['Guide']
Usability,"ion (const Double_t *tr, Double_t *bombtr)=0;  ; virtual Double_t Weight (Double_t precision, Option_t *option=""v"")=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoPainter.html:8162,Clear,Clear,8162,doc/master/classTVirtualGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html,1,['Clear'],['Clear']
Usability,"ion -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; fit result without constraint (data generated at f=0.5); ; RooFitResult: minimized FCN value: 134.849, estimated distance to minimum: 2.11658e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 5.0000e-01 6.4987e-01 +/- 1.21e-01 <none>; m 0.0000e+00 7.1824e-01 +/- 4.97e-01 <none>; s 2.0000e+00 2.1880e+00 +/- 4.61e-01 <none>; ; fit result with internal constraint (data generated at f=0.5, constraint is f=0.8+/-0.2); ; RooFitResult: minimized FCN value: 134.191, estimated distance to minimum: 0.000427811; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 6.4987e-01 6.8952e-01 +/- 1.01e-01 <none>; m 7.1824e-01 7.0939e-01 +/- 4.97e-01 <none>; s 2.1880e+00 2.2657e+00 +/- 4.74e-01 <none>; ; fit result with (another) external constraint (data generated at f=0.5, constraint is f=0.2+/-0.1); ; RooFitResult: minimized FCN value: 137.195, estimated distance to minimum: 0.000256905; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; f 6.8952e-01 3.6252e-01 +/- 8.15e-02 <none>; m 7.0939e-01 7.1394e-01 +/- 5.87e-01 <none>; s 2.2657e+00 1.7027e+00 +/- 4.74e-01 <none>; ; Date07/2008 ; AuthorWouter Verkerke ; Definition in file rf604_constraints.C. tutorialsroofitrf604_constraints.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf604__constraints_8C.html:8090,Guid,Guide,8090,doc/master/rf604__constraints_8C.html,https://root.cern,https://root.cern/doc/master/rf604__constraints_8C.html,1,['Guid'],['Guide']
Usability,"ion BoostX.h:48; ROOT::Math::BoostX::kLZX@ kLZXDefinition BoostX.h:48; ROOT::Math::BoostX::kLYY@ kLYYDefinition BoostX.h:47; ROOT::Math::BoostX::kLZY@ kLZYDefinition BoostX.h:48; ROOT::Math::BoostX::kLYZ@ kLYZDefinition BoostX.h:47; ROOT::Math::BoostX::BoostXBoostX()Default constructor (identity transformation)Definition BoostX.cxx:31; ROOT::Math::BoostX::BetaVectorXYZVector BetaVector() constDefinition BoostX.cxx:51; ROOT::Math::BoostX::fGammaScalar fGammaDefinition BoostX.h:195; ROOT::Math::BoostX::GetLorentzRotationvoid GetLorentzRotation(Scalar r[]) constGet elements of internal 4x4 symmetric representation, into a data array suitable for direct use as t...Definition BoostX.cxx:56; ROOT::Math::BoostX::Rectifyvoid Rectify()Re-adjust components to eliminate small deviations from a perfect orthosyplectic matrix.Definition BoostX.cxx:64; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; double; ROOT::Math::betadouble beta(double x, double y)Calculates the beta function.Definition SpecFuncMathCore.cxx:111; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorsrcBoostX.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BoostX_8cxx_source.html:7227,Guid,Guide,7227,doc/master/BoostX_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BoostX_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ion IParamFunction.h:108; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::Chi2FunctionChi2FCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > Chi2FunctionDefinition Chi2FCN.h:167; ROOT::Fit::Chi2GradFunctionChi2FCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > Chi2GradFunctionDefinition Chi2FCN.h:168; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::Fit::FitUtil::Evaluate::EvalChi2Effectivestatic double EvalChi2Effective(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, unsigned int &nPoints)Definition FitUtil.h:1427; ROOT::Fit::FitUtil::Evaluate::EvalChi2Gradientstatic void EvalChi2Gradient(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, double *g, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0)Definition FitUtil.h:1431; ROOT::Fit::FitUtil::Evaluate::EvalChi2static double EvalChi2(const IModelFunction &func, const BinData &data, const double *p, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0)Definition FitUtil.h:1399; ROOT::Fit::FitUtil::Evaluate::EvalChi2Residualstatic double EvalChi2Residual(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, unsigned int i, double *g, double *h, bool hasGrad, bool fullHessian)Definition FitUtil.h:1439. mathmathcoreincFitChi2FCN.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Chi2FCN_8h_source.html:13114,Guid,Guide,13114,doc/master/Chi2FCN_8h_source.html,https://root.cern,https://root.cern/doc/master/Chi2FCN_8h_source.html,1,['Guid'],['Guide']
Usability,"ion RCanvas.cxx:211; ROOT::Experimental::RCanvas::SetHeightvoid SetHeight(int height)Set canvas height.Definition RCanvas.hxx:108; ROOT::Experimental::RCanvas::IsShownbool IsShown() constreturns true if Show() method was calledDefinition RCanvas.hxx:120; ROOT::Experimental::RCanvas::fPainterstd::unique_ptr< Internal::RVirtualCanvasPainter > fPainterThe painter of this canvas, bootstrapping the graphics connection.Definition RCanvas.hxx:67; ROOT::Experimental::RCanvas::fWidthint fWidthWidth of the canvas in pixels.Definition RCanvas.hxx:56; ROOT::Experimental::RCanvas::fUpdatedbool fUpdatedindicate if Update() method was called beforeDefinition RCanvas.hxx:73; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RCanvas::ClearShownvoid ClearShown()clear IsShown() flagDefinition RCanvas.hxx:123; ROOT::Experimental::RCanvas::ClearOnClosevoid ClearOnClose(const std::shared_ptr< void > &handle)Set handle which will be cleared when connection is closed.Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::SetWidthvoid SetWidth(int width)Set canvas width.Definition RCanvas.hxx:105; ROOT::Experimental::RCanvas::GetCanvasconst RCanvas * GetCanvas() const overrideAccess to the top-most canvas, if any (const version).Definition RCanvas.hxx:92; ROOT::Experimental::RCanvas::RCanvasRCanvas()Create a temporary RCanvas; for long-lived ones please use Create().Definition RCanvas.hxx:88; ROOT::Experimental::RCanvas::Modifiedvoid Modified(std::shared_ptr< RDrawable > drawable)Set newest version to specified drawable.Definition RCanvas.hxx:152; ROOT::Experimental::RCanvas::Modifiedvoid Modified()Definition RCanvas.hxx:149; ROOT::Experimental::RCanvas::GetWidthint GetWidth() constGet canvas width.Definition RCanvas.hxx:111; ROOT::Experimental::RCanvas::AddPanelbool AddPanel(std::shared_ptr< PANEL > &panel)Insert panel into the canvas, canvas should be shown at this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:12381,Clear,ClearOnClosevoid,12381,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,3,"['Clear', 'clear']","['ClearOnClose', 'ClearOnClosevoid', 'cleared']"
Usability,"ion RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hxx. ROOTDetail. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:5837,Guid,Guide,5837,doc/v632/namespaceROOT_1_1Detail.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html,1,['Guid'],['Guide']
Usability,"ion TBranchElement.cxx:6212; TBranchElement::SetAddressvoid SetAddress(void *addobj) overridePoint this branch at an object.Definition TBranchElement.cxx:4962; TBranchElement::SetTargetClassvirtual void SetTargetClass(const char *name)Set the name of the class of the in-memory object into which the data will loaded.Definition TBranchElement.cxx:5855; TBranchElement::GetCheckSumUInt_t GetCheckSum()Definition TBranchElement.h:185; TBranchElement::SetObjectvoid SetObject(void *objadd) overrideSet object this branch is pointing to.Definition TBranchElement.cxx:5575; TBranchObjectA Branch for the case of an object.Definition TBranchObject.h:26; TBranchRefA branch containing and managing a TRefTable for TRef autoloading.Definition TBranchRef.h:34; TBranchRef::Resetvoid Reset(Option_t *option="""") overrideDefinition TBranchRef.cxx:187; TBranchRef::Printvoid Print(Option_t *option="""") const overridePrint the TRefTable branch.Definition TBranchRef.cxx:159; TBranchRef::Clearvoid Clear(Option_t *option="""") overrideClear entries in the TRefTable.Definition TBranchRef.cxx:95; TBranchRef::ResetAfterMergevoid ResetAfterMerge(TFileMergeInfo *) overrideReset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared.Definition TBranchRef.cxx:198; TBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while stori...Definition TBranchSTL.h:22; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::GetLeafvirtual TLeaf * GetLeaf(const char *name) constReturn pointer to the 1st Leaf named name in thisBranch.Definition TBranch.cxx:2055; TBranch::GetMakeClassvirtual bool GetMakeClass() constReturn whether this branch is in a mode where the object are decomposed or not (Also known as MakeCla...Definition TBranch.cxx:2117; TBranch::SetupAddressesvirtual void SetupAddresses()If the branch address is not set, we set all addresses starting with the top level parent branch.Definition TBranch.cxx:3294; TBr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:393510,Clear,Clearvoid,393510,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ion TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROOT; from ROOT import TFile; with TFile(""file1.root"", ""read"") as infile:; hin = infile.Get(""myhisto""); hin.SetDirectory(ROOT.nullptr); ; # Use the histogram afterwards; print(hin.GetName()); NoteThe TFile::Close method automatically sets the current directory in the program to the gROOT object. If you want to restore the status of the current directory to some other file that was opened prior to the with statement, you can use the context manager functionality offered by TContext. Definition at line 53 of file TFile.h. Classes; struct  InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  . Public Types; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:5496,Simpl,Simple,5496,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['Simpl'],['Simple']
Usability,"ion TGeoManager.h:608; TGeoMatrix.h; gGeoIdentityR__EXTERN TGeoIdentity * gGeoIdentityDefinition TGeoMatrix.h:537; TGeoPhysicalNode.h; TGeoShapeAssembly.h; TGeoVolume.h; TGeoVoxelFinder.h; TGeoBoolNode::ReplaceMatrixBool_t ReplaceMatrix(TGeoMatrix *mat, TGeoMatrix *newmat)Replace one of the matrices.Definition TGeoBoolNode.cxx:357; TGeoBoolNode::GetRightMatrixTGeoMatrix * GetRightMatrix() constDefinition TGeoBoolNode.h:77; TGeoBoolNode::GetLeftMatrixTGeoMatrix * GetLeftMatrix() constDefinition TGeoBoolNode.h:76; TGeoBoolNode::MakeClonevirtual TGeoBoolNode * MakeClone() const =0; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoCompositeShape::GetBoolNodeTGeoBoolNode * GetBoolNode() constDefinition TGeoCompositeShape.h:64; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoHMatrix::Clearvoid Clear(Option_t *option="""") overrideclear the data for this matrixDefinition TGeoMatrix.cxx:2512; TGeoHMatrix::Multiplyvoid Multiply(const TGeoMatrix *right)multiply to the right with an other transformation if right is identity matrix, just returnDefinition TGeoMatrix.cxx:2605; TGeoManager::cdvirtual Bool_t cd(const char *path="""")Browse the tree of nodes starting from fTopNode according to pathname.Definition TGeoManager.cxx:1707; TGeoManager::IsClosedBool_t IsClosed() constDefinition TGeoManager.h:297; TGeoManager::IsLockedstatic Bool_t IsLocked()Check lock state.Definition TGeoManager.cxx:4056; TGeoManager::GetGeomPainterTVirtualGeoPainter * GetGeomPainter()Make a default painter if none present. Returns pointer to it.Definition TGeoManager.cxx:2916; TGeoManager::CheckPathBool_t CheckPath(const char *path) constCheck if a geometry path is valid without changing the state of the current navigator.Definition TGeoManager.cxx:1715; TGeoManager::GetListOfGShapesTObjArray * GetListOfGShapes() constDefinition TGeoManag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html:22832,Clear,Clearvoid,22832,doc/master/TGeoPhysicalNode_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ion TGeoPhysicalNode.cxx:392; TGeoPhysicalNode::fLevelInt_t fLevelDefinition TGeoPhysicalNode.h:37; TGeoPhysicalNode::fMatrixOrigTGeoHMatrix * fMatrixOrigDefinition TGeoPhysicalNode.h:40; TGeoPhysicalNode::IsVolAttributesBool_t IsVolAttributes() constDefinition TGeoPhysicalNode.h:77; TGeoPhysicalNode::AlignBool_t Align(TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001)Align a physical node with a new relative matrix/shape.Definition TGeoPhysicalNode.cxx:135; TGeoPhysicalNode::TGeoPhysicalNodeTGeoPhysicalNode(const TGeoPhysicalNode &)=delete; TGeoPhysicalNode::GetVolumeTGeoVolume * GetVolume(Int_t level=-1) constReturn volume associated with node at LEVEL in the branch.Definition TGeoPhysicalNode.cxx:416; TGeoPhysicalNode::SetIsVolAttvoid SetIsVolAtt(Bool_t flag=kTRUE)Definition TGeoPhysicalNode.h:85; TGeoPhysicalNode::GetShapeTGeoShape * GetShape(Int_t level=-1) constReturn shape associated with volume.Definition TGeoPhysicalNode.cxx:427; TGeoPhysicalNode::fMatricesTObjArray * fMatricesDefinition TGeoPhysicalNode.h:38; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; bool; int; Drawth1 Draw(). geomgeomincTGeoPhysicalNode.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8h_source.html:13253,Guid,Guide,13253,doc/master/TGeoPhysicalNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8h_source.html,1,['Guid'],['Guide']
Usability,"ion TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Double_t eyh)Set EYhigh for point i.Definition TGraphAsymmErrors.cxx:1390; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetPointvirtual Int_t GetPoint(Int_t i, Double_t &x, Double_t &y) constGet x and y values for point number i.Definition TGraph.cxx:1533; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TText.cxx:823; yDouble_t y[n]Definition legend1.C:17; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; TMVA_SOFIE_GNN_Parser.tmptmpDefinition TMVA_SOFIE_GNN_Parser.py:196; lTLine lDefinition textangle.C:4; AuthorM.Sutton ; Definition in file AtlasExample.C. tutorialsgraphicsAtlasExample.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/AtlasExample_8C.html:10278,Guid,Guide,10278,doc/master/AtlasExample_8C.html,https://root.cern,https://root.cern/doc/master/AtlasExample_8C.html,1,['Guid'],['Guide']
Usability,"ion TQpProbDens.cxx:172; TQpResidualThe Residuals class calculates and stores the quantities that appear on the right-hand side of the li...Definition TQpResidual.h:62; TQpVarClass containing the variables for the general QP formulation.Definition TQpVar.h:60; TQpVar::fXTVectorD fXDefinition TQpVar.h:91; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TVectorT< Double_t >; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::Cconstexpr Double_t C()Velocity of light in .Definition TMath.h:114; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorEddy Offermann ; Definition in file portfolio.C. tutorialsquadpportfolio.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/portfolio_8C.html:20531,Guid,Guide,20531,doc/master/portfolio_8C.html,https://root.cern,https://root.cern/doc/master/portfolio_8C.html,1,['Guid'],['Guide']
Usability,"ion TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeXDump () override;  Default TeX destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Array painting. ;  ; void CellArrayEnd () override;  End the Cell Array painting. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Paint the Cell Array. ;  ; void Close (Option_t *opt="""") override;  Close a TeX file. ;  ; Int_t CMtoTeX (Double_t u);  ; void DefineMarkers ();  add additional pgfplotmarks ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1861,simpl,simple,1861,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,"ion TTreeReader.h:208; TTreeReader::fFriendProxiesstd::vector< std::unique_ptr< ROOT::Internal::TFriendProxy > > fFriendProxiesProxies to friend trees, created in TTreeReader[Value,Array]::CreateProxy.Definition TTreeReader.h:326; TTreeReader::beginIterator_t begin()Return an iterator to the 0th TTree entry.Definition TTreeReader.h:266; TTreeReader::fDirectorstd::unique_ptr< ROOT::Internal::TBranchProxyDirector > fDirectorproxying directorDefinition TTreeReader.h:324; TTreeReader::TTreeReaderTTreeReader(const char *keyname, TEntryList *entryList=nullptr)Definition TTreeReader.h:193; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:216; TTreeReader::fEndEntryLong64_t fEndEntryThe end of the entry loop.Definition TTreeReader.h:335; TTreeReader::iteratorIterator_t iteratorDefinition TTreeReader.h:150; TTreeReader::SetEntryEEntryStatus SetEntry(Long64_t entry)Set the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:225; TTreeReader::fgEntryStatusTextstatic constexpr const char *const fgEntryStatusText[kEntryUnknownError+1]Definition TTreeReader.h:175; TTreeReader::FindProxyROOT::Internal::TNamedBranchProxy * FindProxy(const char *branchname) constDefinition TTreeReader.h:275; TTreeReader::GetCurrentEntryLong64_t GetCurrentEntry() constReturns the index of the current entry being read.Definition TTreeReader.h:261; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntriesFastvirtual Long64_t GetEntriesFast() constReturn a number greater or equal to the total number of entries in the dataset.Definition TTree.h:505; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treetreeplayerincTTreeReader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:28569,Guid,Guide,28569,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['Guid'],['Guide']
Usability,"ion Types.h:136; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::kClassification@ kClassificationDefinition Types.h:127; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::VolumeVolume for BinarySearchTree.Definition Volume.h:47; TObjStringCollectable string class.Definition TObjString.h:28; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Clonevoid Clone(Ssiz_t nc)Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current...Definition TString.cxx:1279; bool; double; int; unsigned int; TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Config.h; Types.h. tmvatmvasrcMethodCuts.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:86963,Guid,Guide,86963,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ion about the ongoing operations is reguraly printed; this can be useful when processing very large datasets, an operation which can take a very long time.; If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2 all files marked as 'staged' are still open or touched); Return code kTRUE the file appears newly staged kFALSE otherwise; changed is true if the fileinfo is modified touched is true if the file is open and read disappeared is true if the file is marked staged but actually not staged ; Definition at line 1414 of file TDataSetManager.cxx. ◆ Class(). static TClass * TDataSetManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 158 of file TDataSetManager.h. ◆ ClearCache(). Int_t TDataSetManager::ClearCache ; (; const char * ; uri). virtual . Clear cached information matching uri. ; Reimplemented in TDataSetManagerFile.; Definition at line 786 of file TDataSetManager.cxx. ◆ CreateUri(). TString TDataSetManager::CreateUri ; (; const char * ; dsGroup = 0, . const char * ; dsUser = 0, . const char * ; dsName = 0, . const char * ; dsTree = 0 . ). static . Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]', The optional dsObjPath can be in the form [subdir/]objname]'. ; Definition at line 805 of file TDataSetManager.cxx. ◆ DeclFileName(). static const char * TDataSetManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 158 of file TDataSetManager.h. ◆ ExistsDataSet(). Bool_t TDataSetManager::ExistsDataSet ; (; const char * ; uri). virtual . Checks if the indicated dataset exits. ; Reimplemented in TDataSetManagerFile.; Definition at line 439 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:21318,Clear,ClearCache,21318,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Clear'],['ClearCache']
Usability,"ion about the; function. void CreateGeneralTab(); Create 'General' tab. void CreateMinimizationTab(); Create 'Minimization' tab. void ConnectSlots(); Connect GUI signals to fit panel slots. void DisconnectSlots(); Disconnect GUI signals from fit panel slots. void SetCanvas(TCanvas* c); Connect to another canvas. void Hide(); Hide the fit panel and set it to non-active state. void Show(TVirtualPad* pad, TObject* obj); Show the fit panel (possible only via context menu). void CloseWindow(); Close fit panel window. void Terminate(); Called to delete the fit panel. void UpdateGUI(); Set the fit panel GUI according to the selected object. void SetFitObject(TVirtualPad* pad, TObject* obj, Int_t event); Slot called when the user clicks on an object inside a canvas.; Updates pointers to the parent pad and the selected object; for fitting (if suitable). void DoNoSelection(); Slot called when users close a TCanvas or when the user select; no object. void RecursiveRemove(TObject* obj); When obj is deleted, clear fFitObject if fFitObject = obj. void FillFunctionList(Int_t selected = -1); Fills the list of functions depending on the type of fit; selected. void FillMinMethodList(Int_t selected = -1); Fills the list of methods depending on the minimization library; selected. void FillDataSetList(); Create a combo box with all the possible objects to be fitted. TGComboBox* BuildMethodList(TGFrame* parent, Int_t id); Create method list in a combo box. void DoAdvancedOptions(); Slot connected to advanced option button (opens a dialog). void DoEmptyBinsAllWeights1(); Slot connected to 'include emtry bins and forse all weights to 1' setting. void DoUseFuncRange(). void DoAllWeights1(); Slot connected to 'set all weights to 1' setting. void DoClose(); Close the fit panel. void DoUpdate(); Easy here!. void DoFit(); Perform a fit with current parameters' settings. Int_t CheckFunctionString(const char* str); Check entered function string. void DoAddition(Bool_t on); Slot connected to additi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:32744,clear,clear,32744,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,6,['clear'],['clear']
Usability,"ion at line 104 of file TMathText.cxx. ◆ transform_pad(). void TMathTextRenderer::transform_pad ; (; double & ; xt, . double & ; yt, . const float ; x, . const float ; y . ); const. inline . Definition at line 187 of file TMathText.cxx. ◆ transform_pixel_to_logical(). mathtext::affine_transform_t TMathTextRenderer::transform_pixel_to_logical ; (; void ; ); const. inlineoverrideprotected . Definition at line 109 of file TMathText.cxx. Member Data Documentation. ◆ _angle_degree. float TMathTextRenderer::_angle_degree. private . Definition at line 61 of file TMathText.cxx. ◆ _current_font_size. float TMathTextRenderer::_current_font_size[mathtext::math_text_renderer_t::NFAMILY]. private . Definition at line 68 of file TMathText.cxx. ◆ _font_size. float TMathTextRenderer::_font_size. private . Definition at line 58 of file TMathText.cxx. ◆ _pad_pixel_transform. float TMathTextRenderer::_pad_pixel_transform[6]. private . Definition at line 62 of file TMathText.cxx. ◆ _pad_scale. float TMathTextRenderer::_pad_scale. private . Definition at line 63 of file TMathText.cxx. ◆ _pad_scale_x. float TMathTextRenderer::_pad_scale_x. private . Definition at line 64 of file TMathText.cxx. ◆ _pad_scale_x_relative. float TMathTextRenderer::_pad_scale_x_relative. private . Definition at line 66 of file TMathText.cxx. ◆ _pad_scale_y. float TMathTextRenderer::_pad_scale_y. private . Definition at line 65 of file TMathText.cxx. ◆ _pad_scale_y_relative. float TMathTextRenderer::_pad_scale_y_relative. private . Definition at line 67 of file TMathText.cxx. ◆ _parent. TMathText* TMathTextRenderer::_parent. private . Definition at line 57 of file TMathText.cxx. ◆ _x0. float TMathTextRenderer::_x0. private . Definition at line 59 of file TMathText.cxx. ◆ _y0. float TMathTextRenderer::_y0. private . Definition at line 60 of file TMathText.cxx. graf2d/graf/src/TMathText.cxx. TMathTextRenderer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathTextRenderer.html:26626,Guid,Guide,26626,doc/master/classTMathTextRenderer.html,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html,1,['Guid'],['Guide']
Usability,"ion at line 176 of file TTask.cxx. ◆ Browse(). void TTask::Browse ; (; TBrowser * ; b). overridevirtual . Browse the list of tasks. ; It is recommended to add the top level task to the list of ROOT browsables by: gROOT->GetListOfBrowsables()->Add(myTopLevelTask). Reimplemented from TObject.; Definition at line 211 of file TTask.cxx. ◆ Class(). static TClass * TTask::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTask::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTask::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TTask.h. ◆ CleanTasks(). void TTask::CleanTasks ; (; ). virtual . Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ; Definition at line 222 of file TTask.cxx. ◆ Clear(). void TTask::Clear ; (; Option_t * ; option = """"). overridevirtual . Recursively call the Clear function of this task and its subtasks. ; The Clear function must be implemented for each derived class to clear all data structures created by a previous execution of a task. This function is automatically called by the CleanTasks function. ; Reimplemented from TNamed.; Definition at line 240 of file TTask.cxx. ◆ Continue(). void TTask::Continue ; (; ). virtual . Resume execution at the current break point. ; Definition at line 247 of file TTask.cxx. ◆ DeclFileName(). static const char * TTask::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TTask.h. ◆ Exec(). void TTask::Exec ; (; Option_t * ; option). virtual . Dummy Execute. ; This function must be redefined in the derived classes. ; Definition at line 267 of file TTask.cxx. ◆ ExecuteTask(). void TTask::ExecuteTask ; (; Option_t * ; option = ""0""). virtual . Execute main task and its sub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:17860,Clear,Clear,17860,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['Clear'],['Clear']
Usability,"ion at line 183 of file GuiTypes.h. ◆ fFormat. Int_t Event_t::fFormat. Next fields only used by kClientMessageEvent. ; Definition at line 186 of file GuiTypes.h. ◆ fHandle. Handle_t Event_t::fHandle. general resource handle (used for atoms or windows) ; Definition at line 185 of file GuiTypes.h. ◆ fHeight. UInt_t Event_t::fHeight. width and height of exposed area ; Definition at line 182 of file GuiTypes.h. ◆ fSendEvent. Bool_t Event_t::fSendEvent. true if event came from SendEvent ; Definition at line 184 of file GuiTypes.h. ◆ fState. UInt_t Event_t::fState. key or button mask ; Definition at line 181 of file GuiTypes.h. ◆ fTime. Time_t Event_t::fTime. time event event occurred in ms ; Definition at line 177 of file GuiTypes.h. ◆ fType. EGEventType Event_t::fType. of event (see EGEventType) ; Definition at line 175 of file GuiTypes.h. ◆ fUser. Longptr_t Event_t::fUser[5]. 5 longs can be used by client message events NOTE: only [0], [1] and [2] may be used. ; [1] and [2] may contain >32 bit quantities (i.e. pointers on 64 bit machines) ; Definition at line 187 of file GuiTypes.h. ◆ fWidth. UInt_t Event_t::fWidth. Definition at line 182 of file GuiTypes.h. ◆ fWindow. Window_t Event_t::fWindow. window reported event is relative to ; Definition at line 176 of file GuiTypes.h. ◆ fX. Int_t Event_t::fX. Definition at line 178 of file GuiTypes.h. ◆ fXRoot. Int_t Event_t::fXRoot. Definition at line 179 of file GuiTypes.h. ◆ fY. Int_t Event_t::fY. pointer x, y coordinates in event window ; Definition at line 178 of file GuiTypes.h. ◆ fYRoot. Int_t Event_t::fYRoot. coordinates relative to root ; Definition at line 179 of file GuiTypes.h. Collaboration diagram for Event_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/gui/inc/GuiTypes.h. Event_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structEvent__t.html:3276,Guid,Guide,3276,doc/master/structEvent__t.html,https://root.cern,https://root.cern/doc/master/structEvent__t.html,1,['Guid'],['Guide']
Usability,ion at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of file MethodBoost.h. ◆ fRandomSeed. UInt_t TMVA::MethodBoost::fRandomSeed. private . seed for random number generator used for bagging ; Definition at line 160 of file MethodBoost.h. ◆ fROC_training. Double_t TMVA::MethodBoost::fROC_training. private . roc integral of last trained method (on training sample) ; Definition at line 185 of file MethodBoost.h. ◆ fTestBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTestBgdMVAHist. private . Definition at line 178 of file MethodBoost.h. ◆ fTestSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTestSigMVAHist. private . Definition at line 176 of file MethodBoost.h. ◆ fTrainBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTrainBgdMVAHist. private . Definition at line 171 of file MethodBoost.h. ◆ fTrainSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTrainSigMVAHist. private . Definition at line 170 of file MethodBoost.h. ◆ fTransformString. TString TMVA::MethodBoost::fTransformString. private . min and max values for the classifier response ; Definition at line 156 of file MethodBoost.h. Libraries for TMVA::MethodBoost:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodBoost.h; tmva/tmva/src/MethodBoost.cxx. TMVAMethodBoost. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:46148,Guid,Guide,46148,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Guid'],['Guide']
Usability,ion at line 672 of file MethodBase.h. ◆ fTransformationPointer. TransformationHandler* TMVA::MethodBase::fTransformationPointer. private . pointer to the rest of transformations ; Definition at line 671 of file MethodBase.h. ◆ fTxtWeightsOnly. Bool_t TMVA::MethodBase::fTxtWeightsOnly. private . Definition at line 725 of file MethodBase.h. ◆ fUseDecorr. Bool_t TMVA::MethodBase::fUseDecorr. private . Definition at line 723 of file MethodBase.h. ◆ fVariableTransformType. Types::ESBType TMVA::MethodBase::fVariableTransformType. private . Definition at line 611 of file MethodBase.h. ◆ fVariableTransformTypeString. TString TMVA::MethodBase::fVariableTransformTypeString. private . Definition at line 724 of file MethodBase.h. ◆ fVarTransformString. TString TMVA::MethodBase::fVarTransformString. private . labels variable transform method ; Definition at line 669 of file MethodBase.h. ◆ fVerbose. Bool_t TMVA::MethodBase::fVerbose. private . verbose flag ; Definition at line 676 of file MethodBase.h. ◆ fVerbosityLevel. EMsgType TMVA::MethodBase::fVerbosityLevel. private . verbosity level ; Definition at line 678 of file MethodBase.h. ◆ fVerbosityLevelString. TString TMVA::MethodBase::fVerbosityLevelString. private . verbosity level (user input string) ; Definition at line 677 of file MethodBase.h. ◆ fWeightFile. TString TMVA::MethodBase::fWeightFile. private . weight file name ; Definition at line 638 of file MethodBase.h. ◆ fXmax. Double_t TMVA::MethodBase::fXmax. private . maximum (signal and background) ; Definition at line 666 of file MethodBase.h. ◆ fXmin. Double_t TMVA::MethodBase::fXmin. private . minimum (signal and background) ; Definition at line 665 of file MethodBase.h. Libraries for TMVA::MethodBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodBase.h; tmva/tmva/src/MethodBase.cxx. TMVAMethodBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:91258,Guid,Guide,91258,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Guid'],['Guide']
Usability,"ion at line 69 of file TEveArrow.h. ◆ SetTubeR(). void TEveArrow::SetTubeR ; (; Float_t ; x). inline . Definition at line 59 of file TEveArrow.h. ◆ SetVector() [1/2]. void TEveArrow::SetVector ; (; const TEveVector & ; v). inline . Definition at line 70 of file TEveArrow.h. ◆ SetVector() [2/2]. void TEveArrow::SetVector ; (; Float_t ; x, . Float_t ; y, . Float_t ; z . ). inline . Definition at line 71 of file TEveArrow.h. ◆ StampGeom(). void TEveArrow::StampGeom ; (; ). inline . Definition at line 53 of file TEveArrow.h. ◆ Streamer(). void TEveArrow::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveArrow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TEveArrow.h. Friends And Related Symbol Documentation. ◆ TEveArrowEditor. friend class TEveArrowEditor. friend . Definition at line 27 of file TEveArrow.h. ◆ TEveArrowGL. friend class TEveArrowGL. friend . Definition at line 26 of file TEveArrow.h. Member Data Documentation. ◆ fColor. Color_t TEveArrow::fColor. protected . Definition at line 34 of file TEveArrow.h. ◆ fConeL. Float_t TEveArrow::fConeL. protected . Definition at line 38 of file TEveArrow.h. ◆ fConeR. Float_t TEveArrow::fConeR. protected . Definition at line 37 of file TEveArrow.h. ◆ fDrawQuality. Int_t TEveArrow::fDrawQuality. protected . Definition at line 43 of file TEveArrow.h. ◆ fOrigin. TEveVector TEveArrow::fOrigin. protected . Definition at line 40 of file TEveArrow.h. ◆ fTubeR. Float_t TEveArrow::fTubeR. protected . Definition at line 36 of file TEveArrow.h. ◆ fVector. TEveVector TEveArrow::fVector. protected . Definition at line 41 of file TEveArrow.h. Libraries for TEveArrow:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveArrow.h; graf3d/eve/src/TEveArrow.cxx. TEveArrow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:38563,Guid,Guide,38563,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,1,['Guid'],['Guide']
Usability,"ion depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . FilterAvailable() Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. . FilterMissing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:4960,guid,guide,4960,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['guid'],['guide']
Usability,"ion documentation; TEveWindow(const char* n = ""TEveWindow"", const char* t = """"); Constructor. ~TEveWindow(); Destructor. void PreDeleteElement(); Called before the element is deleted, thus offering the last chance; to detach from acquired resources and from the framework itself.; Here the request is just passed to TEveManager.; If you override it, make sure to call base-class version. void PreUndock(); Virtual function called before a window is undocked. void PostDock(); Virtual function called after a window is docked. void NameTitleChanged(); Name or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace it with an empty frame-slot. void DestroyWindowAndSlot(); Destroy eve-window and its frame-slot. void ClearEveFrame(); Clears eve-frame associated with this window.; This is used in special case when the window is embedded in a foreign; GUI container and gets deleted from this side.; In particular, this happens when TRootBrowser closes a tab. void SetShowTitleBar(Bool_t x); Set display state of the title-bar.; This is forwarded to eve-frame. Bool_t IsCurrent() const; Returns true if this window is the current one. void MakeCurrent(); Make this window current. void SetCurre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindow.html:23178,Undo,UndockWindow,23178,root/html602/TEveWindow.html,https://root.cern,https://root.cern/root/html602/TEveWindow.html,4,['Undo'],"['Undock', 'UndockWindow']"
Usability,"ion for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 205 of file RooLegendre.cxx. ◆ IsA(). TClass * RooLegendre::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 46 of file RooLegendre.h. ◆ maxVal(). double RooLegendre::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 225 of file RooLegendre.cxx. ◆ Streamer(). void RooLegendre::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic. ◆ StreamerNVirtual(). void RooLegendre::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file RooLegendre.h. Member Data Documentation. ◆ _ctheta. RooRealProxy RooLegendre::_ctheta. protected . Definition at line 39 of file RooLegendre.h. ◆ _l1. int RooLegendre::_l1. protected . Definition at line 40 of file RooLegendre.h. ◆ _l2. int RooLegendre::_l2. protected . Definition at line 41 of file RooLegendre.h. ◆ _m1. int RooLegendre::_m1. protected . Definition at line 40 of file RooLegendre.h. ◆ _m2. int RooLegendre::_m2. protected . Definition at line 41 of file RooLegendre.h. Libraries for RooLegendre:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitmore/inc/RooLegendre.h; roofit/roofitmore/src/RooLegendre.cxx. RooLegendre. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:65531,Guid,Guide,65531,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,1,['Guid'],['Guide']
Usability,"ion graph. Never null.Definition RInterfaceBase.hxx:55; ROOT::RDF::RInterfaceBase::fDataSourceRDataSource * fDataSourceNon-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the...Definition RInterfaceBase.hxx:57; ROOT::RDF::RInterfaceBase::GetLoopManagerRDFDetail::RLoopManager * GetLoopManager() constDefinition RInterfaceBase.hxx:128; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDataFrame::RDataFrameRDataFrame(std::string_view treeName, std::string_view filenameglob, const ColumnNames_t &defaultColumns={})Build the dataframe.Definition RDataFrame.cxx:1768; ROOT::RDataFrame::ColumnNames_tROOT::RDF::ColumnNames_t ColumnNames_tDefinition RDataFrame.hxx:43; ROOT::RDataFrame::~RDataFrame~RDataFrame()Definition RDataFrame.cxx:1862; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::Getvirtual TObject * Get(const char *namecycle)Return pointer to object identified by namecycle.Definition TDirectory.cxx:866; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ColumnNamesPtr_tstd::shared_ptr< const ColumnNames_t > ColumnNamesPtr_tDefinition RDataFrame.cxx:1723; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; mTMarker mDefinition textangle.C:8. treedataframesrcRDataFrame.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:111975,Guid,Guide,111975,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ion nodes. void Streamer(TBuffer& b); Stream an object of class TGeoVolume. void SetOption(const char* option); Set the current options (none implemented). void SetLineColor(Color_t lcolor); Set the line color. void SetLineStyle(Style_t lstyle); Set the line style. void SetLineWidth(Width_t lwidth); Set the line width. TGeoNode * GetNode(const char* name) const; get the pointer to a daughter node. Int_t GetByteCount() const; get the total size in bytes for this volume. void FindOverlaps() const; loop all nodes marked as overlaps and find overlaping brothers. void RemoveNode(TGeoNode* node); Remove an existing daughter. TGeoNode * ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); Replace an existing daughter with a new volume having the same name but; possibly a new shape, position or medium. Not allowed for positioned assemblies.; For division cells, the new shape/matrix are ignored. void SelectVolume(Bool_t clear = kFALSE); Select this volume as matching an arbitrary criteria. The volume is added to; a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; to be reset at the end by calling the method with CLEAR=true. This will also clear; the list. void SetVisibility(Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:30655,clear,clear,30655,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,3,['clear'],['clear']
Usability,"ion normal.c:49; ROOT::Math::AssignSym::Evaluatestatic void Evaluate(SMatrix< T, D, D, MatRepSym< T, D > > &lhs, const Expr< A, T, D, D, R > &rhs)assign a symmetric matrix from an expressionDefinition HelperOps.h:156; ROOT::Math::MultPolicy::RepTypeMatRepStd< T, N1, N2 > RepTypeDefinition BinaryOpPolicy.h:37; ROOT::Math::TranspPolicy::RepTypeMatRepStd< T, N2, N1 > RepTypeDefinition BinaryOpPolicy.h:69; ROOT::Math::meta_col_dot< 0 >::fstatic Matrix::value_type f(const Matrix &lhs, const Vector &rhs, const unsigned int offset)Definition MatrixFunctions.h:159; ROOT::Math::meta_col_dotDefinition MatrixFunctions.h:143; ROOT::Math::meta_col_dot::fstatic Matrix::value_type f(const Matrix &lhs, const Vector &rhs, const unsigned int offset)Definition MatrixFunctions.h:145; ROOT::Math::meta_matrix_dot< 0 >::fstatic MatrixA::value_type f(const MatrixA &lhs, const MatrixB &rhs, const unsigned int offset)Definition MatrixFunctions.h:322; ROOT::Math::meta_matrix_dot< 0 >::gstatic MatrixA::value_type g(const MatrixA &lhs, const MatrixB &rhs, unsigned int i, unsigned int j)Definition MatrixFunctions.h:331; ROOT::Math::meta_matrix_dotDefinition MatrixFunctions.h:292; ROOT::Math::meta_matrix_dot::fstatic MatrixA::value_type f(const MatrixA &lhs, const MatrixB &rhs, const unsigned int offset)Definition MatrixFunctions.h:295; ROOT::Math::meta_matrix_dot::gstatic MatrixA::value_type g(const MatrixA &lhs, const MatrixB &rhs, unsigned int i, unsigned int j)Definition MatrixFunctions.h:305; ROOT::Math::meta_row_dot< 0 >::fstatic A::value_type f(const A &lhs, const B &rhs, const unsigned int offset)Definition MatrixFunctions.h:99; ROOT::Math::meta_row_dotDefinition MatrixFunctions.h:84; ROOT::Math::meta_row_dot::fstatic A::value_type f(const A &lhs, const B &rhs, const unsigned int offset)Definition MatrixFunctions.h:86; vecDefinition civetweb.c:1855. mathsmatrixincMathMatrixFunctions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MatrixFunctions_8h_source.html:52729,Guid,Guide,52729,doc/master/MatrixFunctions_8h_source.html,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html,1,['Guid'],['Guide']
Usability,"ion parameter in CC pruning ; Definition at line 93 of file CCPruner.h. ◆ fDebug. Bool_t TMVA::CCPruner::fDebug. private . ! debug flag ; Definition at line 106 of file CCPruner.h. ◆ fOptimalK. Int_t TMVA::CCPruner::fOptimalK. private . ! index of the optimal tree in the pruned tree sequence ; Definition at line 105 of file CCPruner.h. ◆ fOwnQIndex. Bool_t TMVA::CCPruner::fOwnQIndex. private . ! flag indicates if fQualityIndex is owned by this ; Definition at line 97 of file CCPruner.h. ◆ fPruneSequence. std::vector<TMVA::DecisionTreeNode*> TMVA::CCPruner::fPruneSequence. private . ! map of weakest links (i.e., branches to prune) -> pruning index ; Definition at line 101 of file CCPruner.h. ◆ fPruneStrengthList. std::vector<Float_t> TMVA::CCPruner::fPruneStrengthList. private . ! map of alpha -> pruning index ; Definition at line 102 of file CCPruner.h. ◆ fQualityIndex. SeparationBase* TMVA::CCPruner::fQualityIndex. private . ! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) } ; Definition at line 96 of file CCPruner.h. ◆ fQualityIndexList. std::vector<Float_t> TMVA::CCPruner::fQualityIndexList. private . ! map of R(T) -> pruning index ; Definition at line 103 of file CCPruner.h. ◆ fTree. DecisionTree* TMVA::CCPruner::fTree. private . ! (pruned) decision tree ; Definition at line 99 of file CCPruner.h. ◆ fValidationDataSet. const DataSet* TMVA::CCPruner::fValidationDataSet. private . ! the event sample to select the optimally-pruned tree ; Definition at line 95 of file CCPruner.h. ◆ fValidationSample. const EventList* TMVA::CCPruner::fValidationSample. private . ! the event sample to select the optimally-pruned tree ; Definition at line 94 of file CCPruner.h. Libraries for TMVA::CCPruner:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CCPruner.h; tmva/tmva/src/CCPruner.cxx. TMVACCPruner. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCPruner.html:6554,Guid,Guide,6554,doc/master/classTMVA_1_1CCPruner.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCPruner.html,1,['Guid'],['Guide']
Usability,"ion sha1.inl:100. Definition at line 131 of file sha1.inl. ◆ R1. #define R1; (;  ; v, .  ; w, .  ; x, .  ; y, .  ; z, .  ; i . ). Value: z += ((w & (x ^ y)) ^ y) + blk(block, i) + 0x5A827999 + rol(v, 5); \; w = rol(w, 30);; blk#define blk(block, i)Definition sha1.inl:124. Definition at line 134 of file sha1.inl. ◆ R2. #define R2; (;  ; v, .  ; w, .  ; x, .  ; y, .  ; z, .  ; i . ). Value: z += (w ^ x ^ y) + blk(block, i) + 0x6ED9EBA1 + rol(v, 5); \; w = rol(w, 30);. Definition at line 137 of file sha1.inl. ◆ R3. #define R3; (;  ; v, .  ; w, .  ; x, .  ; y, .  ; z, .  ; i . ). Value: z += (((w | x) & y) | (w & x)) + blk(block, i) + 0x8F1BBCDC + rol(v, 5); \; w = rol(w, 30);. Definition at line 140 of file sha1.inl. ◆ R4. #define R4; (;  ; v, .  ; w, .  ; x, .  ; y, .  ; z, .  ; i . ). Value: z += (w ^ x ^ y) + blk(block, i) + 0xCA62C1D6 + rol(v, 5); \; w = rol(w, 30);. Definition at line 143 of file sha1.inl. ◆ rol. #define rol; (;  ; value, .  ; bits . );    (((value) << (bits)) | ((value) >> (32 - (bits)))). Definition at line 100 of file sha1.inl. ◆ SHA1_DIGEST_SIZE. #define SHA1_DIGEST_SIZE   20. Definition at line 98 of file sha1.inl. Function Documentation. ◆ blk0(). static uint32_t blk0 ; (; CHAR64LONG16 * ; block, . int ; i . ). static . Definition at line 113 of file sha1.inl. ◆ SHA1_Final(). SHA_API void SHA1_Final ; (; unsigned char * ; digest, . SHA_CTX * ; context . ). Definition at line 298 of file sha1.inl. ◆ SHA1_Init(). SHA_API void SHA1_Init ; (; SHA_CTX * ; context). Definition at line 258 of file sha1.inl. ◆ SHA1_Transform(). static void SHA1_Transform ; (; uint32_t ; state[5], . const uint8_t ; buffer[64] . ). static . Definition at line 150 of file sha1.inl. ◆ SHA1_Update(). SHA_API void SHA1_Update ; (; SHA_CTX * ; context, . const uint8_t * ; data, . const uint32_t ; len . ). Definition at line 271 of file sha1.inl. nethttpcivetwebsha1.inl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/sha1_8inl.html:3712,Guid,Guide,3712,doc/master/sha1_8inl.html,https://root.cern,https://root.cern/doc/master/sha1_8inl.html,1,['Guid'],['Guide']
Usability,"ion transforms the source spectrum.Definition TSpectrumTransform.cxx:1269. Definition at line 1269 of file TSpectrumTransform.cxx. ◆ Fourier(). void TSpectrumTransform::Fourier ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; hartley, . Int_t ; direction, . Int_t ; zt_clear . ). protected . This function calculates Fourier based transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; hartley-1 if it is Hartley transform, 0 otherwise; direction-forward or inverse transform . Definition at line 265 of file TSpectrumTransform.cxx. ◆ GeneralExe(). int TSpectrumTransform::GeneralExe ; (; Double_t * ; working_space, . Int_t ; zt_clear, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates generalized (mixed) transforms of different degrees Function parameters: . working_space-pointer to vector of transformed data; zt_clear-flag to clear imaginary data before staring; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 431 of file TSpectrumTransform.cxx. ◆ GeneralInv(). int TSpectrumTransform::GeneralInv ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates inverse generalized (mixed) transforms Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 547 of file TSpectrumTransform.cxx. ◆ Haar(). void TSpectrumTransform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 96 of file TSpectrumTrans",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:26037,clear,clear,26037,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['clear'],['clear']
Usability,"ion with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector. ◆ Process(). Bool_t TSelEvent::Process ; (; Long64_t ; entry). virtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 201 of file TSelEvent.cxx. ◆ SetInputList(). virtual void TSelEvent::SetInputList ; (; TList * ; input). inlinevirtual . Reimplemented from TSelector.; Definition at line 113 of file TSelEvent.h. ◆ SetObject(). virtual void TSelEvent::SetObject ; (; TObject * ; obj). inlinevirtual . Reimplemented from TSelector.; Definition at line 112 of file TSelEvent.h. ◆ SetOption(). virtual void TSelEvent::SetOption ; (; const char * ; option). inlinevirtual . Reimplemented from TSelector.; Definition at line 111 of file TSelEvent.h. ◆ SlaveBegin(). void TSelEvent::SlaveBegin ; (; TTree * ; tree). virtual . The SlaveBegin() function is called after the Begin() function. ; When running with PROOF SlaveBegin() is called on each slave server. The tree argument is deprecated (on PROOF 0 is passed). ; Reimplemented from TSelector.; Definition at line 129 of file TSelEvent.cxx. ◆ SlaveTerm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:18043,simpl,simple,18043,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,1,['simpl'],['simple']
Usability,"ion “N”- do not store the function and do not draw it.; 5.6.4 Advances Options; The advance option button is enabled only after having performed the fit and provides additional drawing options that can be used after having done the fit. These new drawing tools, which can be selected by the “Advanced Drawing Tool” panel that pops up when clicking the “Advanced” button, are:. Contour: to plot the confidence contour of two chosen parameters. One can select the number of points to draw the contour (more points might require more time to compute it), the parameters and the desired confidence level .; Scan : to plot a scan of the minimization function (likelihood or chi-squared) around the minimum as function of the chosen parameter.; Conf Interval : to plot the confidence interval of the fitted function as a filled coloured band around its central value. One can select the desired confidence level for the band to be plotted. 5.6.5 Print Options; This set of options specifies the amount of feedback printed on the root command line after performed fits.; ‘Verbose’ - prints fit results after each iteration.; ‘Quiet’ - no fit information is printed.; ‘Default’ - between Verbose and Quiet.; 5.6.6 Command Buttons; Fit button - performs a fit taking different option settings via the Fit Panel interface.; Reset - sets the GUI elements and related fit settings to the default ones.; Close - closes the Fit panel window.; 5.6.7 Minimization Options; With this tab one can select specific options for minimization. These include. The minimizer library ( Minuit, Minuit2, Fumili, GSL, Genetics ); The method (algorithm) for minimization. For example for Minuit one can choose between (Migrad, Simplex or Scan); Error definition; Minimization tolerance; Number of iterations/function calls; Print Level: (Default, Verbose or Quiet). 5.7 New ROOT::Fit classes; The fitting of the data objects in ROOT, histograms, graphs and tree is performed via some common classes, which are defined in the ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:187380,feedback,feedback,187380,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['feedback'],['feedback']
Usability,"ion'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:59175,clear,clearEvalErrorLog,59175,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"ion(). TMVA::ResultsRegression::ResultsRegression ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 51 of file ResultsRegression.cxx. ◆ ~ResultsRegression(). TMVA::ResultsRegression::~ResultsRegression ; (; ). destructor ; Definition at line 60 of file ResultsRegression.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsRegression::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsRegression::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsRegression::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file ResultsRegression.h. ◆ Clear() [1/2]. void TMVA::ResultsRegression::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 63 of file ResultsRegression.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ CreateDeviationHistograms(). void TMVA::ResultsRegression::CreateDeviationHistograms ; (; TString ; prefix). Definition at line 203 of file ResultsRegression.cxx. ◆ DeclFileName(). static const char * TMVA::ResultsRegression::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file ResultsRegression.h. ◆ DeviationAsAFunctionOf(). TH2F * TMVA::ResultsRegression::DeviationAsAFunctionOf ; (; UInt_t ; varNum, . UInt_t ; tgtNum . ). Definition at line 115 of file ResultsRegression.cxx. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::ResultsRegression::GetAnalysisType ; (; ). inlineoverridevirtual . Reimplemented from TMVA::Results.; Definition at line 74 of file ResultsRegression.h. ◆ GetSize(). Long64_t TMVA::ResultsRegression::GetSize ; (; ); const. inline . Definition at line 66 of file ResultsRegression.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:13101,Clear,Clear,13101,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['Clear'],['Clear']
Usability,"ion. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastBiasGradients;  The sum of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastWeightGradients;  The sum of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/SGD.h>. Inheritance diagram for TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 48 of file SGD.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 49 of file SGD.h. Constructor & Destructor Documentation. ◆ TSGD(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:3172,learn,learning,3172,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learning']
Usability,"ion. ;  ;  ~TOrdCollection ();  Delete the collection. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the collection. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the collection. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the collection. ;  ; void AddFirst (TObject *obj) override;  Insert object at beginning of collection. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the collection. ;  ; TObject * After (const TObject *obj) const override;  Return the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; Int_t BinarySearch (TObject *obj);  Find object using a binary search. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the collection. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the collection AND delete all heap based objects. ;  ; TObject * First () const override;  Return the first object in the collection. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  return address of pointer obj ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; TObject * Last () const override;  Return the last object in the collection. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return an ordered collection iterator. ;  ; void PutAt (TObject *obj, Int_t idx);  Put object at index idx. Overwrites what was at idx before. ;  ; TObject * Remove (TObject *obj) override;  Remove object from collection. ;  ; TObject * RemoveAt (Int_t idx) override;  Remove object at index idx. ;  ; void Sort ();  If objects in collection are sortable (i.e. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:2802,Clear,Clear,2802,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,1,['Clear'],['Clear']
Usability,ion. ◆ Class(). static TClass * TProofResources::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofResources::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofResources::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 48 of file TProofResources.h. ◆ DeclFileName(). static const char * TProofResources::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TProofResources.h. ◆ GetMaster(). virtual TProofNodeInfo * TProofResources::GetMaster ; (; ). pure virtual . Implemented in TProofResourcesStatic. ◆ GetSubmasters(). virtual TList * TProofResources::GetSubmasters ; (; ). pure virtual . Implemented in TProofResourcesStatic. ◆ GetWorkers(). virtual TList * TProofResources::GetWorkers ; (; ). pure virtual . Implemented in TProofResourcesStatic. ◆ IsA(). TClass * TProofResources::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TProofResourcesStatic.; Definition at line 48 of file TProofResources.h. ◆ IsValid(). virtual Bool_t TProofResources::IsValid ; (; ); const. inlinevirtual . Definition at line 46 of file TProofResources.h. ◆ Streamer(). void TProofResources::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TProofResourcesStatic. ◆ StreamerNVirtual(). void TProofResources::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TProofResources.h. Member Data Documentation. ◆ fValid. Bool_t TProofResources::fValid. protected . Definition at line 37 of file TProofResources.h. proof/proof/inc/TProofResources.h. TProofResources. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResources.html:12427,Guid,Guide,12427,doc/master/classTProofResources.html,https://root.cern,https://root.cern/doc/master/classTProofResources.html,1,['Guid'],['Guide']
Usability,"ion. ◆ TKDTree() [1/4]. template<typename Index , typename Value > . TKDTree< Index, Value >::TKDTree. Default constructor. Nothing is built. ; Definition at line 270 of file TKDTree.cxx. ◆ TKDTree() [2/4]. template<typename Index , typename Value > . TKDTree< Index, Value >::TKDTree ; (; Index ; npoints, . Index ; ndim, . UInt_t ; bsize . ). Definition at line 292 of file TKDTree.cxx. ◆ TKDTree() [3/4]. template<typename Index , typename Value > . TKDTree< Index, Value >::TKDTree ; (; Index ; npoints, . Index ; ndim, . UInt_t ; bsize, . Value ** ; data . ). Create a kd-tree from the provided data array. ; This function only sets the data, call Build() to build the tree!!! Parameters:; npoints - total number of points. Adding points after the tree is built is not supported; ndim - number of dimensions; bsize - maximal number of points in the terminal nodes; data - the data array. The data should be placed columnwise (like in a TTree). The columnwise orientation is chosen to simplify the usage together with TTree::GetV1() like functions. An example of filling such an array for a 2d case: Double_t **data = new Double_t*[2]; data[0] = new Double_t[npoints]; data[1] = new Double_t[npoints]; for (Int_t i=0; i<npoints; i++){ data[0][i]=gRandom->Uniform(-1, 1); //fill the x-coordinate data[1][i]=gRandom->Uniform(-1, 1); //fill the y-coordinate }; By default, the kd-tree doesn't own the data. If you want the kd-tree to delete the data array, call kdtree->SetOwner(kTRUE). ; Definition at line 344 of file TKDTree.cxx. ◆ ~TKDTree(). template<typename Index , typename Value > . TKDTree< Index, Value >::~TKDTree. override . Destructor By default, the original data is not owned by kd-tree and is not deleted with it. ; If you want to delete the data along with the kd-tree, call SetOwner(kTRUE). ; Definition at line 373 of file TKDTree.cxx. ◆ TKDTree() [4/4]. template<typename Index , typename Value > . TKDTree< Index, Value >::TKDTree ; (; const TKDTree< Index, Value > & ; ). priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:29402,simpl,simplify,29402,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['simpl'],['simplify']
Usability,"ion. ◆ fAlgoType. std::string ROOT::Math::MinimizerOptions::fAlgoType. private . Minimizer algorithmic specification (Migrad, Minimize, ...) ; Definition at line 250 of file MinimizerOptions.h. ◆ fErrorDef. double ROOT::Math::MinimizerOptions::fErrorDef. private . error definition (=1. for getting 1 sigma error for chi2 fits) ; Definition at line 246 of file MinimizerOptions.h. ◆ fExtraOptions. ROOT::Math::IOptions* ROOT::Math::MinimizerOptions::fExtraOptions. private . Definition at line 253 of file MinimizerOptions.h. ◆ fLevel. int ROOT::Math::MinimizerOptions::fLevel. private . debug print level ; Definition at line 242 of file MinimizerOptions.h. ◆ fMaxCalls. int ROOT::Math::MinimizerOptions::fMaxCalls. private . maximum number of function calls ; Definition at line 243 of file MinimizerOptions.h. ◆ fMaxIter. int ROOT::Math::MinimizerOptions::fMaxIter. private . maximum number of iterations ; Definition at line 244 of file MinimizerOptions.h. ◆ fMinimType. std::string ROOT::Math::MinimizerOptions::fMinimType. private . Minimizer type (Minuit, Minuit2, etc.. ; Definition at line 249 of file MinimizerOptions.h. ◆ fPrecision. double ROOT::Math::MinimizerOptions::fPrecision. private . precision of the objective function evaluation (value <=0 means left to default) ; Definition at line 248 of file MinimizerOptions.h. ◆ fStrategy. int ROOT::Math::MinimizerOptions::fStrategy. private . minimizer strategy (used by Minuit) ; Definition at line 245 of file MinimizerOptions.h. ◆ fTolerance. double ROOT::Math::MinimizerOptions::fTolerance. private . minimize tolerance to reach solution ; Definition at line 247 of file MinimizerOptions.h. Libraries for ROOT::Math::MinimizerOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/MinimizerOptions.h; math/mathcore/src/MinimizerOptions.cxx. ROOTMathMinimizerOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:19363,Guid,Guide,19363,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['Guid'],['Guide']
Usability,"ion.h. ◆ DeclFileName(). static const char * TGeoRegion::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TGeoRegion.h. ◆ GetCut(). TGeoRegionCut * TGeoRegion::GetCut ; (; int ; i); const. inline . Definition at line 58 of file TGeoRegion.h. ◆ GetNcuts(). int TGeoRegion::GetNcuts ; (; ); const. inline . Definition at line 57 of file TGeoRegion.h. ◆ GetNvolumes(). int TGeoRegion::GetNvolumes ; (; ); const. inline . Definition at line 51 of file TGeoRegion.h. ◆ GetVolume(). TGeoVolume * TGeoRegion::GetVolume ; (; int ; i); const. inline . Definition at line 52 of file TGeoRegion.h. ◆ IsA(). TClass * TGeoRegion::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 62 of file TGeoRegion.h. ◆ operator=(). TGeoRegion & TGeoRegion::operator= ; (; const TGeoRegion & ; other). Assignment operator. ; Definition at line 49 of file TGeoRegion.cxx. ◆ Print(). void TGeoRegion::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print region info. ; Reimplemented from TObject.; Definition at line 89 of file TGeoRegion.cxx. ◆ Streamer(). void TGeoRegion::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoRegion::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TGeoRegion.h. Member Data Documentation. ◆ fCuts. TObjArray TGeoRegion::fCuts. protected . Definition at line 39 of file TGeoRegion.h. ◆ fVolumes. TObjArray TGeoRegion::fVolumes. protected . Definition at line 38 of file TGeoRegion.h. Libraries for TGeoRegion:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoRegion.h; geom/geom/src/TGeoRegion.cxx. TGeoRegion. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegion.html:15878,Guid,Guide,15878,doc/master/classTGeoRegion.html,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html,1,['Guid'],['Guide']
Usability,"ion;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  ROOT::Math::MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  ROOT::Math::MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  ROOT::Math::MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; class  ROOT::Math::SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  ROOT::Math::SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  ROOT::Math::SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  . Enumerations; enum  ROOT::Math::EGSLMinimizerType { ;   ROOT::Math::kConjugateFR; , ROOT::Math::kConjugatePR; , ROOT::Math::kVectorBFGS; , ROOT::Math::kVectorBFGS2; , ;   ROOT::Math::kSteepestDescent. };  enumeration specifying the types of GSL minimizers More...;  . Enumeration Type Documentation. ◆ EGSLMinimizerType. enum ROOT::Math::EGSLMinimizerType. enumeration specifying the types of GSL minimizers . EnumeratorkConjugateFR ; kConjugatePR ; kVectorBFGS ; kVectorBFGS2 ; kSteepestDescent . Definition at line 49 of file GSLMinimizer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MultiMin.html:4827,Guid,Guide,4827,doc/master/group__MultiMin.html,https://root.cern,https://root.cern/doc/master/group__MultiMin.html,1,['Guid'],['Guide']
Usability,"ion="""");  Voxelize attached volume according to option If the volume is an assembly, make sure the bbox is computed. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVoxelFinder.html:4256,Clear,Clear,4256,doc/master/classTGeoVoxelFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoVoxelFinder.html,1,['Clear'],['Clear']
Usability,"ion="""")TObjectvirtual; Pop()TObjectvirtual; Print(Option_t *option="""") const overrideTNamedvirtual; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetMarginBinsContent(Double_t z=0.)TGraphDelaunay; SetMaxIter(Int_t n=100000)TGraphDelaunay; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTGraphDelaunayvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraphDelaunayinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraphDelaunay(const TGraphDelaunay &)=deleteTGraphDelaunayprivate; TGraphDelaunay()TGraphDelaunay; TGraphDelaunay(TGraph2D *g)TGraphDelaunay; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TGraphDelaunay() overrideTGraphDelaunay; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay-members.html:7988,Guid,Guide,7988,doc/master/classTGraphDelaunay-members.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay-members.html,1,['Guid'],['Guide']
Usability,"ion=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for DummyObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~DummyObject(). DummyObject::~DummyObject ; (; ). inlineoverride . Definition at line 58 of file rootqt5.cpp. gui/qt5webdisplay/rootqt5.cpp. DummyObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classDummyObject.html:9820,Guid,Guide,9820,doc/master/classDummyObject.html,https://root.cern,https://root.cern/doc/master/classDummyObject.html,1,['Guid'],['Guide']
Usability,"ionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:153734,simpl,simple,153734,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['simpl'],['simple']
Usability,ionRL_wide.C Example to illustrate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  peaks.C Getting Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:152552,simpl,simple,152552,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"ionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tTBufferFile::ApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tTBufferFile::CheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tTBufferFile::CheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidTBufferFile::ClassBegin(const TClass*, Version_t = -1); virtual voidTBufferFile::ClassEnd(const TClass*); virtual voidTBufferFile::ClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; char*CompBuffer() const; Int_tCompLength() const; Int_tCompress(); virtual voidTObject::Copy(TObject& object) const; virtual voidTBufferFile::DecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableSchemaEvolution(Bool_t enable = kTRUE); static voidEnableSchemaEvolutionForAll(Bool_t enable = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMessage.html:1860,Clear,Clear,1860,root/html532/TMessage.html,https://root.cern,https://root.cern/root/html532/TMessage.html,4,['Clear'],['Clear']
Usability,"ionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tTBufferFile::ApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tTBufferFile::CheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tTBufferFile::CheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidTBufferFile::ClassBegin(const TClass*, Version_t = -1); virtual voidTBufferFile::ClassEnd(const TClass*); virtual voidTBufferFile::ClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTBufferFile::DecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferSQL.html:2046,Clear,Clear,2046,root/html532/TBufferSQL.html,https://root.cern,https://root.cern/root/html532/TBufferSQL.html,4,['Clear'],['Clear']
Usability,"ionTemplates.cxx:175; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListOfFunctions::GetTFunction * Get(DeclId_t id)Return (after creating it if necessary) the TMethod or TFunction describing the function correspondin...Definition TListOfFunctions.cxx:262; TListOfFunctions::Deletevoid Delete(Option_t *option="""") overrideDelete all TFunction object files.Definition TListOfFunctions.cxx:162; TListOfFunctions::Loadvoid Load()Load all the functions known to the interpreter for the scope 'fClass' into this collection.Definition TListOfFunctions.cxx:374; TListOfFunctions::Unloadvoid Unload()Mark 'all func' as being unloaded.Definition TListOfFunctions.cxx:409; TListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information.Definition TListOfTypes.h:31; TListA doubly linked list.Definition TList.h:38; TList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition TList.cxx:400; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AddLastvoid AddLast(TObject *obj) overrideAdd object at the end of the list.Definition TList.cxx:150; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TMacOSXSystemDefinition TMacOSXSystem.h:39; TMessageHandlerHandle messages that might be generated by the system.Definition TMessageHandler.h:34; TMessageHandler::HandleMessagevirtual void HandleMessage(Long_t id, const TObject *obj)Store message origin, keep statistics and call Notify().Definition TMessageHandler.cxx:133; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:140189,Clear,Clearvoid,140189,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ionTemplates::Unload ; (; ). Mark 'all func' as being unloaded. ; After the unload, the function can no longer be found directly, until the decl can be found again in the interpreter (in which the func object will be reused. ; Definition at line 377 of file TListOfFunctionTemplates.cxx. ◆ Unload() [2/2]. void TListOfFunctionTemplates::Unload ; (; TFunctionTemplate * ; func). Mark 'func' as being unloaded. ; After the unload, the function can no longer be found directly, until the decl can be found again in the interpreter (in which the func object will be reused. ; Definition at line 398 of file TListOfFunctionTemplates.cxx. ◆ UnmapObject(). void TListOfFunctionTemplates::UnmapObject ; (; TObject * ; obj). private . Remove a pair<id, object> from the map of functions and their ids. ; Definition at line 293 of file TListOfFunctionTemplates.cxx. Friends And Related Symbol Documentation. ◆ TClass. friend class TClass. friend . Definition at line 37 of file TListOfFunctionTemplates.h. Member Data Documentation. ◆ fClass. TClass* TListOfFunctionTemplates::fClass. private . Definition at line 40 of file TListOfFunctionTemplates.h. ◆ fIds. TExMap* TListOfFunctionTemplates::fIds. private . Definition at line 42 of file TListOfFunctionTemplates.h. ◆ fLastLoadMarker. ULong64_t TListOfFunctionTemplates::fLastLoadMarker. private . Definition at line 45 of file TListOfFunctionTemplates.h. ◆ fOverloads. THashTable TListOfFunctionTemplates::fOverloads. private . Definition at line 44 of file TListOfFunctionTemplates.h. ◆ fUnloaded. THashList* TListOfFunctionTemplates::fUnloaded. private . Definition at line 43 of file TListOfFunctionTemplates.h. Libraries for TListOfFunctionTemplates:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TListOfFunctionTemplates.h; core/meta/src/TListOfFunctionTemplates.cxx. TListOfFunctionTemplates. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:33742,Guid,Guide,33742,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['Guid'],['Guide']
Usability,"ion_proxies.C:172; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Printvoid Print(Option_t *option="""") const overridePrint a summary of the tree contents.Definition TTree.cxx:7219; TTree::BuildIndexvirtual Int_t BuildIndex(const char *majorname, const char *minorname=""0"")Build a Tree Index (default is TTreeIndex).Definition TTree.cxx:2637; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::GetEntryWithIndexvirtual Int_t GetEntryWithIndex(Int_t major, Int_t minor=0)Read entry corresponding to major and minor number.Definition TTree.cxx:5927; TTree::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite this object to the current directory.Definition TTree.cxx:9753; TTree::SetNamevoid SetName(const char *name) overrideChange the name of this tree.Definition TTree.cxx:9205; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; AuthorRene Brun ; Definition in file treefriend.C. tutorialstreetreefriend.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:8983,Guid,Guide,8983,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['Guid'],['Guide']
Usability,"ion_t *option="""") overrideTGeoMediumvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetCerenkovProperties(TObject *cerenkov)TGeoMediuminlinevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetId(Int_t id)TGeoMediuminline; SetMaterial(TGeoMaterial *mat)TGeoMediuminline; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParam(Int_t i, Double_t val)TGeoMediuminline; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTGeoMediumvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGeoMediuminline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGeoMedium(const TGeoMedium &)TGeoMediumprotected; TGeoMedium()TGeoMedium; TGeoMedium(const char *name, Int_t numed, const TGeoMaterial *mat, Double_t *params=nullptr)TGeoMedium; TGeoMedium(const char *name, Int_t numed, Int_t imat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin)TGeoMedium; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TGeoMedium() overrideTGeoMedium; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMedium-members.html:6763,Guid,Guide,6763,doc/master/classTGeoMedium-members.html,https://root.cern,https://root.cern/doc/master/classTGeoMedium-members.html,1,['Guid'],['Guide']
Usability,"ion_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet (may not be used in this class). ;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'ref' from the list of results. ;  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; void HandleRecvHisto (TMessage *mess) override;  Receive histo from slave. ;  ; Bool_t JoinProcess (TList *workers) override;  Not implemented: meaningful only in the remote player. Returns kFALSE. ;  ; void Progres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:3464,learn,learning,3464,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,1,['learn'],['learning']
Usability,"ion_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet (may not be used in this class). ;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'ref' from the list of results. ;  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; void HandleRecvHisto (TMessage *mess) override;  Receive histo from slave. ;  ; TClass * IsA () const override;  ; Bool_t IsClient () const override;  ; Bool_t JoinProcess (TList *workers) override;  Not implemented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:4082,learn,learning,4082,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['learn'],['learning']
Usability,"ion_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet (may not be used in this class). ;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'ref' from the list of results. ;  ; void HandleRecvHisto (TMessage *mess) override;  Receive histo from slave. ;  ; Bool_t IsClient () const override;  ; Bool_t JoinProcess (TList *workers) override;  Not implemented: meaningful only in the remote player. Returns kFALSE. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:2754,learn,learning,2754,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['learn'],['learning']
Usability,"ion_t * ; option = """" . ). Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ; Definition at line 651 of file TGeoVolume.cxx. ◆ CheckShapes(). void TGeoVolume::CheckShapes ; (; ). check for negative parameters in shapes. ; Definition at line 676 of file TGeoVolume.cxx. ◆ Class(). static TClass * TGeoVolume::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoVolume::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoVolume::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 256 of file TGeoVolume.h. ◆ CleanAll(). void TGeoVolume::CleanAll ; (; ). Clean data of the volume. ; Definition at line 659 of file TGeoVolume.cxx. ◆ ClearNodes(). void TGeoVolume::ClearNodes ; (; ). inline . Definition at line 95 of file TGeoVolume.h. ◆ ClearShape(). void TGeoVolume::ClearShape ; (; ). Clear the shape of this volume from the list held by the current manager. ; Definition at line 668 of file TGeoVolume.cxx. ◆ ClearThreadData(). void TGeoVolume::ClearThreadData ; (; ); const. virtual . Reimplemented in TGeoVolumeAssembly.; Definition at line 425 of file TGeoVolume.cxx. ◆ CloneNodesAndConnect(). void TGeoVolume::CloneNodesAndConnect ; (; TGeoVolume * ; newmother); const. Clone the array of nodes. ; Definition at line 1880 of file TGeoVolume.cxx. ◆ CloneVolume(). TGeoVolume * TGeoVolume::CloneVolume ; (; ); const. virtual . Clone this volume. ; build a volume with same name, shape and medium ; Reimplemented in TGeoVolumeAssembly.; Definition at line 1831 of file TGeoVolume.cxx. ◆ Contains(). Bool_t TGeoVolume::Contains ; (; const Double_t * ; point); const. inline . Definition at line 104 of file TGeoVolume.h. ◆ CountNodes(). Int_t TGeoVolume::CountNodes ; (; Int_t ; nlevels = 1000, . Int_t ; option = 0 . ). Count total number of subnodes starting from this volume, nlevels down. . option = 0 (default) - co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:44422,Clear,Clear,44422,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Clear'],['Clear']
Usability,"ion_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TPaveText.h; TVirtualPaveStats.h; TBoxCreate a Box.Definition TBox.h:22; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObjectMother of all ROOT objects.Definition TObject.h:41; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::TPaveStatsTPaveStats()TPaveStats default constructor.Definition TPaveStats.cxx:231; TPaveStats::GetOptStatInt_t GetOptStat() constReturn the stat option.Definition TPaveStats.cxx:271; TPaveStats::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TPaveStats.cxx:504; TPaveStats::EditTextvoid EditText() overrideEdit text at the mouse position.Definition TPaveStats.h:34; TPaveStats::UseCurrentStylevoid UseCurrentStyle() overrideReplace current attributes by current style.Definition TPaveStats.cxx:570; TPaveStats::InsertTextvoid InsertText(const char *) overrideAdd a new Text line at the mouse position.Definition TPaveStats.h:41; TPaveStats::InsertLinevoid InsertLine() overrideAdd a new line at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveStats_8h_source.html:4239,simpl,simple,4239,doc/master/TPaveStats_8h_source.html,https://root.cern,https://root.cern/doc/master/TPaveStats_8h_source.html,1,['simpl'],['simple']
Usability,"ional case you can use the same options as for the ; TGraphAsymmErrors::Draw; method. For 2-dimensional TEfficiency objects you can pass the same options as; for a TH2::Draw object.; VII. TEfficiency class. Function Members (Methods); public:. virtual~TEfficiency(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TEfficiency& rEff); static Double_tAgrestiCoull(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); virtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBayesian(Int_t total, Int_t passed, Double_t level, Double_t alpha, Double_t beta, Bool_t bUpper, Bool_t bShortest = false); static Double_tBetaCentralInterval(Double_t level, Double_t alpha, Double_t beta, Bool_t bUpper); static Double_tBetaMean(Double_t alpha, Double_t beta); static Double_tBetaMode(Double_t alpha, Double_t beta); static Bool_tBetaShortestInterval(Double_t level, Double_t alpha, Double_t beta, Double_t& lower, Double_t& upper); virtual voidBrowse(TBrowser*); static Bool_tCheckBinning(const TH1& pass, const TH1& total); static Bool_tCheckConsistency(const TH1& pass, const TH1& total, Option_t* opt = """"); static Bool_tCheckEntries(const TH1& pass, const TH1& total, Option_t* opt = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; static Double_tClopperPearson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); static TGraphAsymmErrors*Combine(TCollection* pList, Option_t* opt = """", Int_t n = 0, const Double_t* w = 0); static Double_tCombine(Double_t& up, Double_t& low, Int_t n, const Int_t* pass, const Int_t* total, Double_t alpha, Double_t beta, Double_t level = 0.68300000000000005, const Double_t* w = 0, Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; TGraphAsymmErrors*CreateGraph(Option_t* opt = """") const; TH2*CreateHistogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEfficiency.html:21664,Clear,Clear,21664,root/html604/TEfficiency.html,https://root.cern,https://root.cern/root/html604/TEfficiency.html,1,['Clear'],['Clear']
Usability,"ions . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Contact Us. You can contact the ROOT developers in the following ways, in order of preference:. Via the RootTalk web forum. Use this forum to post your questions. ROOT team members are actively reading this forum and answering the questions. And if the developers don't happen to be online your question might be answered by a fellow user. Remember, before posting a question, do a search to see if the issue has already been discussed.; Via the roottalk mailing list. Check the digest to see if your question has already been discussed.; Direct mail to the ROOT Developers. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/contact-us.html:2512,Guid,Guides,2512,d/contact-us.html,https://root.cern,https://root.cern/d/contact-us.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"ions = kHorizontalFrame | kSunkenFrame | kDoubleBorder, . Pixel_t ; back = GetWhitePixel(), . Bool_t ; none = kFALSE . ). Create a line width combo box. ; If ""none"" is equal to kTRUE the first entry is ""None"". ; Definition at line 792 of file TGComboBox.cxx. Member Function Documentation. ◆ Class(). static TClass * TGLineWidthComboBox::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLineWidthComboBox::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLineWidthComboBox::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 167 of file TGComboBox.h. ◆ DeclFileName(). static const char * TGLineWidthComboBox::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 167 of file TGComboBox.h. ◆ IsA(). TClass * TGLineWidthComboBox::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGComboBox.; Definition at line 167 of file TGComboBox.h. ◆ SavePrimitive(). void TGLineWidthComboBox::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a line width combo box widget as a C++ statement(s). ; Reimplemented from TGComboBox.; Definition at line 816 of file TGComboBox.cxx. ◆ Streamer(). void TGLineWidthComboBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGComboBox. ◆ StreamerNVirtual(). void TGLineWidthComboBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 167 of file TGComboBox.h. Libraries for TGLineWidthComboBox:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGComboBox.h; gui/gui/src/TGComboBox.cxx. TGLineWidthComboBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineWidthComboBox.html:37943,Guid,Guide,37943,doc/master/classTGLineWidthComboBox.html,https://root.cern,https://root.cern/doc/master/classTGLineWidthComboBox.html,1,['Guid'],['Guide']
Usability,"ions must take a double as argument and return a double ; Definition at line 287 of file Functor.h. ◆ GradFunctor1D() [4/4]. ROOT::Math::GradFunctor1D::GradFunctor1D ; (; std::function< double(double)> const & ; f, . std::function< double(double)> const & ; g . ). inline . Specialized constructor from 2 function objects implementing double operator()(double x). ; The first one for the function evaluation and the second one implementing the function derivative. ; Definition at line 295 of file Functor.h. Member Function Documentation. ◆ Clone(). GradFunctor1D * ROOT::Math::GradFunctor1D::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class will implement their version of the private DoClone method. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 300 of file Functor.h. ◆ DoDerivative(). double ROOT::Math::GradFunctor1D::DoDerivative ; (; double ; x); const. inlineoverrideprivatevirtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implements ROOT::Math::IGradientFunctionOneDim.; Definition at line 305 of file Functor.h. ◆ DoEval(). double ROOT::Math::GradFunctor1D::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . implementation of the evaluation function. Must be implemented by derived classes ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 304 of file Functor.h. Member Data Documentation. ◆ fDerivFunc. std::function<double(double)> ROOT::Math::GradFunctor1D::fDerivFunc. private . Definition at line 308 of file Functor.h. ◆ fFunc. std::function<double(double)> ROOT::Math::GradFunctor1D::fFunc. private . Definition at line 307 of file Functor.h. Libraries for ROOT::Math::GradFunctor1D:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/Functor.h. ROOTMathGradFunctor1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:6574,Guid,Guide,6574,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,1,['Guid'],['Guide']
Usability,"ions not valid for graphs; 993 HFit::CheckGraphFitOptions(foption);; 994 // TMultiGraph fitting; 995 return HFit::Fit(gr,f1,foption,moption,goption,range);; 996}; 997 ; 998TFitResultPtr ROOT::Fit::FitObject(TGraph2D * gr, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 999 // exclude options not valid for graphs; 1000 HFit::CheckGraphFitOptions(foption);; 1001 // TGraph2D fitting; 1002 return HFit::Fit(gr,f1,foption,moption,goption,range);; 1003}; 1004 ; 1005TFitResultPtr ROOT::Fit::FitObject(THnBase * s1, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 1006 // sparse histogram fitting; 1007 return HFit::Fit(s1,f1,foption,moption,goption,range);; 1008}; 1009 ; 1010 ; 1011 ; 1012// Int_t TGraph2D::DoFit(TF2 *f2 ,Option_t *option ,Option_t *goption) {; 1013// // internal graph2D fitting methods; 1014// Foption_t fitOption;; 1015// ROOT::Fit::FitOptionsMake(option,fitOption);; 1016 ; 1017// // create range and minimizer options with default values; 1018// ROOT::Fit::DataRange range(2);; 1019// ROOT::Math::MinimizerOptions minOption;; 1020// return ROOT::Fit::FitObject(this, f2 , fitOption , minOption, goption, range);; 1021// }; 1022 ; 1023 ; 1024// function to compute the simple chi2 for graphs and histograms; 1025 ; 1026 ; 1027double ROOT::Fit::Chisquare(const TH1 & h1, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type) {; 1028 return HFit::ComputeChi2(h1,f1,useRange, type);; 1029}; 1030 ; 1031double ROOT::Fit::Chisquare(const TGraph & g, TF1 & f1, bool useRange) {; 1032 return HFit::ComputeChi2(g,f1, useRange, ROOT::Fit::EChisquareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:38802,simpl,simple,38802,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['simpl'],['simple']
Usability,"ions of unit normalization.s ; Implements RooAbsCachedPdf.; Definition at line 92 of file RooCachedPdf.cxx. ◆ inputBaseName(). const char * RooCachedPdf::inputBaseName ; (; ); const. inlineoverrideprotectedvirtual . Return the base name for cache objects, in this case the name of the cached p.d.f. ; Implements RooAbsCachedPdf.; Definition at line 33 of file RooCachedPdf.h. ◆ IsA(). TClass * RooCachedPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsCachedPdf.; Definition at line 51 of file RooCachedPdf.h. ◆ payloadUniqueSuffix(). const char * RooCachedPdf::payloadUniqueSuffix ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from RooAbsCachedPdf.; Definition at line 44 of file RooCachedPdf.h. ◆ preferredObservableScanOrder(). void RooCachedPdf::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. overridevirtual . Defer preferred scan order to cached pdf preference. ; Reimplemented from RooAbsReal.; Definition at line 114 of file RooCachedPdf.cxx. ◆ Streamer(). void RooCachedPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCachedPdf. ◆ StreamerNVirtual(). void RooCachedPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooCachedPdf.h. Member Data Documentation. ◆ _cacheObs. RooSetProxy RooCachedPdf::_cacheObs. protected . Observable to be cached. ; Definition at line 47 of file RooCachedPdf.h. ◆ pdf. RooRealProxy RooCachedPdf::pdf. protected . Proxy to p.d.f being cached. ; Definition at line 46 of file RooCachedPdf.h. Libraries for RooCachedPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCachedPdf.h; roofit/roofitcore/src/RooCachedPdf.cxx. RooCachedPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:83338,Guid,Guide,83338,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['Guid'],['Guide']
Usability,"ions; 14914 *; 14915 * If we just look for 's' anywhere in the string, ""localhost:80""; 14916 * will be detected as SSL (false positive).; 14917 * Looking for 's' after a digit may cause false positives in; 14918 * ""my24service:8080"".; 14919 * Looking from 's' backward if there are only ':' and numbers; 14920 * before will not work for ""24service:8080"" (non SSL, port 8080); 14921 * or ""24s"" (SSL, port 24).; 14922 *; 14923 * Remark: Initially hostnames were not allowed to start with a; 14924 * digit (according to RFC 952), this was allowed later (RFC 1123,; 14925 * Section 2.1).; 14926 *; 14927 * To get this correct, the entire string must be parsed as a whole,; 14928 * reading it as a list element for element and parsing with an; 14929 * algorithm equivalent to parse_port_string.; 14930 *; 14931 * In fact, we use local interface names here, not arbitrary; 14932 * hostnames, so in most cases the only name will be ""localhost"".; 14933 *; 14934 * So, for now, we use this simple algorithm, that may still return; 14935 * a false positive in bizarre cases.; 14936 */; 14937 int i;; 14938 int portslen = (int)strlen(ports);; 14939 char prevIsNumber = 0;; 14940 ; 14941 for (i = 0; i < portslen; i++) {; 14942 if (prevIsNumber && (ports[i] == 's' || ports[i] == 'r')) {; 14943 return 1;; 14944 }; 14945 if (ports[i] >= '0' && ports[i] <= '9') {; 14946 prevIsNumber = 1;; 14947 } else {; 14948 prevIsNumber = 0;; 14949 }; 14950 }; 14951 }; 14952 return 0;; 14953}; 14954 ; 14955 ; 14956static int; 14957set_ports_option(struct mg_context *phys_ctx); 14958{; 14959 const char *list;; 14960 int on = 1;; 14961#if defined(USE_IPV6); 14962 int off = 0;; 14963#endif; 14964 struct vec vec;; 14965 struct socket so, *ptr;; 14966 ; 14967 struct mg_pollfd *pfd;; 14968 union usa usa;; 14969 socklen_t len;; 14970 int ip_version;; 14971 ; 14972 int portsTotal = 0;; 14973 int portsOk = 0;; 14974 ; 14975 const char *opt_txt;; 14976 long opt_listen_backlog;; 14977 ; 14978 if (!phys_ctx) {; 14979 return 0;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:442335,simpl,simple,442335,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['simpl'],['simple']
Usability,"ions; 14915 *; 14916 * If we just look for 's' anywhere in the string, ""localhost:80""; 14917 * will be detected as SSL (false positive).; 14918 * Looking for 's' after a digit may cause false positives in; 14919 * ""my24service:8080"".; 14920 * Looking from 's' backward if there are only ':' and numbers; 14921 * before will not work for ""24service:8080"" (non SSL, port 8080); 14922 * or ""24s"" (SSL, port 24).; 14923 *; 14924 * Remark: Initially hostnames were not allowed to start with a; 14925 * digit (according to RFC 952), this was allowed later (RFC 1123,; 14926 * Section 2.1).; 14927 *; 14928 * To get this correct, the entire string must be parsed as a whole,; 14929 * reading it as a list element for element and parsing with an; 14930 * algorithm equivalent to parse_port_string.; 14931 *; 14932 * In fact, we use local interface names here, not arbitrary; 14933 * hostnames, so in most cases the only name will be ""localhost"".; 14934 *; 14935 * So, for now, we use this simple algorithm, that may still return; 14936 * a false positive in bizarre cases.; 14937 */; 14938 int i;; 14939 int portslen = (int)strlen(ports);; 14940 char prevIsNumber = 0;; 14941 ; 14942 for (i = 0; i < portslen; i++) {; 14943 if (prevIsNumber && (ports[i] == 's' || ports[i] == 'r')) {; 14944 return 1;; 14945 }; 14946 if (ports[i] >= '0' && ports[i] <= '9') {; 14947 prevIsNumber = 1;; 14948 } else {; 14949 prevIsNumber = 0;; 14950 }; 14951 }; 14952 }; 14953 return 0;; 14954}; 14955 ; 14956 ; 14957static int; 14958set_ports_option(struct mg_context *phys_ctx); 14959{; 14960 const char *list;; 14961 int on = 1;; 14962#if defined(USE_IPV6); 14963 int off = 0;; 14964#endif; 14965 struct vec vec;; 14966 struct socket so, *ptr;; 14967 ; 14968 struct mg_pollfd *pfd;; 14969 union usa usa;; 14970 socklen_t len;; 14971 int ip_version;; 14972 ; 14973 int portsTotal = 0;; 14974 int portsOk = 0;; 14975 ; 14976 const char *opt_txt;; 14977 long opt_listen_backlog;; 14978 ; 14979 if (!phys_ctx) {; 14980 return 0;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:442368,simpl,simple,442368,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['simpl'],['simple']
Usability,"ions;  LayerData (const LayerData &other);  copy c'tor of LayerData ;  ;  LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (LayerData &&other);  move c'tor of LayerData ;  ;  LayerData (size_t inputSize);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, iterator_type itGradientBegin, std::shared_ptr< std::function< double(double)> > activationFunction, std::shared_ptr< std::function< double(double)> > inverseActivationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, std::shared_ptr< std::function< double(double)> > activationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  ~LayerData ();  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  ; void clear ();  clear the values and the deltas ;  ; void clearDropOut ();  clear the drop-out-data for this layer ;  ; iterator_type deltasBegin ();  returns iterator to the begin of the deltas (back-propagation) ;  ; const_iterator_type deltasBegin () const;  returns const iterator to the begin of the deltas (back-propagation) ;  ; iterator_type deltasEnd ();  returns iterator to the end of the deltas (back-propagation) ;  ; const_iterator_type deltasEnd () const;  returns const iterator to the end of the deltas (back-propagation) ;  ; const_dropout_iterator dropOut () const;  return the begin of the drop-out information ;  ; iterator_type gradientsBegin ();  returns iterator to the begin of the gradients ;  ; const_iterator_type gradientsBegin () const;  returns const iterator to the begin of the gradients ;  ; bool hasDropOut () const;  has this layer drop-out turned on? ;  ; std::shared_ptr< std::function< double(double)> > inverseActivationFunction () const;  ; ModeOutputValues outputMode () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:1940,clear,clear,1940,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"ionship between the pieces is not defined by neighbors, but by containment. In other words, volumes are put one inside another making an in-depth hierarchy. From outside, the whole thing looks like a big pack that you can open finding out other smaller packs nicely arranged waiting to be opened at their turn. The biggest one containing all others defines the “world” of the model. We will often call this master reference system (MARS). Going on and opening our packs, we will obviously find out some empty ones, otherwise, something is very wrong… We will call these leaves (by analogy with a tree structure).; On the other hand, any volume is a small world by itself - what we need to do is to take it out and to ignore all the rest since it is a self-contained object. In fact, the modeller can act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:; 18.1.1 Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does make map in root folder.; root[] gSystem->Load(""libGeom"");; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:876657,simpl,simplest,876657,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"ionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. unsigned intfDimdimension of the function to be minimized; vector<double>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:6339,Clear,Clear,6339,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"iour in split or non-split mode. classname does; not have to derive from TObject. The function is based on; the new TStreamerInfo. Build a TBranchElement for an object of class classname. addr is the address of a pointer to an object of class; classname. The class dictionary must be available (ClassDef; in class header). Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the addr parameter. This option requires access to the library where the; corresponding class is defined. Accessing one single data; member in the object implies reading the full object. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (e.g. 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:55846,simpl,simply,55846,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['simpl'],['simply']
Usability,"ious Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to data processing. . ‹ First Steps With ROOT; up; CINT and RootCint ›. Navigate through this book; Processing data with ROOTCINT and RootCint; About PROOF; Bindings; Analyzing data with ROOT; Math; RooFit; TMVA. Showing results with ROOT; Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:2768,Guid,Guides,2768,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,ip.cxx;  TTreeCloner.cxx;  TTreeResult.cxx;  TTreeRow.cxx;  TTreeSQL.cxx;  TVirtualIndex.cxx;  TVirtualTreePlayer.cxx;  ► treeplayer;  ► inc;  LinkDef.h;  TBranchProxy.h;  TBranchProxyClassDescriptor.h;  TBranchProxyDescriptor.h;  TBranchProxyDirector.h;  TBranchProxyTemplate.h;  TChainIndex.h;  TFileDrawMap.h;  TFormLeafInfo.h;  TFormLeafInfoReference.h;  TFriendProxy.h;  TFriendProxyDescriptor.h;  TRefArrayProxy.h;  TRefProxy.h;  TSelectorDraw.h;  TSelectorEntries.h;  TTreeDrawArgsParser.h;  TTreeFormula.h;  TTreeFormulaManager.h;  TTreeGeneratorBase.h;  TTreeIndex.h;  TTreePerfStats.h;  TTreePlayer.h;  TTreeProxyGenerator.h;  TTreeReader.h;  TTreeReaderArray.h;  TTreeReaderGenerator.h;  TTreeReaderUtils.h;  TTreeReaderValue.h;  TTreeTableInterface.h;  ► src;  TBranchProxy.cxx;  TBranchProxyClassDescriptor.cxx;  TBranchProxyDescriptor.cxx;  TBranchProxyDirector.cxx;  TChainIndex.cxx;  TFileDrawMap.cxx;  TFormLeafInfo.cxx;  TFormLeafInfoReference.cxx;  TFriendProxy.cxx;  TFriendProxyDescriptor.cxx;  TRefArrayProxy.cxx;  TRefProxy.cxx;  TSelectorDraw.cxx;  TSelectorEntries.cxx;  TTreeDrawArgsParser.cxx;  TTreeFormula.cxx;  TTreeFormulaManager.cxx;  TTreeGeneratorBase.cxx;  TTreeIndex.cxx;  TTreePerfStats.cxx;  TTreePlayer.cxx;  TTreeProxyGenerator.cxx;  TTreeReader.cxx;  TTreeReaderArray.cxx;  TTreeReaderGenerator.cxx;  TTreeReaderValue.cxx;  TTreeTableInterface.cxx;  ► treeviewer;  ► inc;  HelpTextTV.h;  LinkDef.h;  LinkDefWin32.h;  TGTreeTable.h;  TMemStatShow.h;  TParallelCoord.h;  TParallelCoordEditor.h;  TParallelCoordRange.h;  TParallelCoordVar.h;  TSpider.h;  TSpiderEditor.h;  TTreeViewer.h;  TTVLVContainer.h;  TTVSession.h;  ► src;  HelpTextTV.cxx;  TGTreeTable.cxx;  TMemStatShow.cxx;  TParallelCoord.cxx;  TParallelCoordEditor.cxx;  TParallelCoordRange.cxx;  TParallelCoordVar.cxx;  TSpider.cxx;  TSpiderEditor.cxx;  TTreeViewer.cxx;  TTVLVContainer.cxx;  TTVSession.cxx. ROOT 6.06/09 - Reference Guide Generated on Sun Dec 10 2017 22:29:07 using Doxygen 1.8.9. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:99181,Guid,Guide,99181,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['Guid'],['Guide']
Usability,"ipped;; however, this may cause problems if You try to unfold something; which depends on these input bins. code fragment (with histograms A and y filled):. TUnfold unfold(A,TUnfold::kHistMapOutputHoriz);; Double_t tau=1.E-4;; Double_t biasScale=0.0;; unfold.DoUnfold(tau,y,biasScale);; TH1D *x=unfold.GetOutput(""x"",""myVariable"");; TH2D *rhoij=unfold.GetRhoIJ(""correlation"",""myVariable"");. will create histograms ""x"" and ""correlation"" from A and y.; if tau is very large, the output is biased to the generated distribution scaled by biasScale; if tau is very small, the output will show oscillations; and large entries in the correlation matrix. Proper choice of tau. One of the difficult questions is about the choice of tau. The most; common method is the L-curve method: a two-dimensional curve is plotted; x-axis: log10(chisquare); y-axis: log10(regularisation condition); In many cases this curve has an L-shape. The best choice of tau is in the; kink of the L. Within TUnfold a simple version of the L-curve analysis is included.; It tests a given number of points in a predefined tau-range and searches; for the maximum of the curvature in the L-curve (kink position).; if no tau range is given, the range of teh scan is determied automatically. Example: scan tau and produce the L-curve plot. Code fragment: assume A and y are filled. TUnfold unfold(A,TUnfold::kHistMapOutputHoriz);. unfold.SetInput(y);. Int_t nScan=30;; Int_t iBest;; TSpline *logTauX,*logTauY;; TGraph *lCurve;. iBest=unfold.ScanLcurve(nScan,0.0,0.0,&lCurve);. std::cout<<""tau=""<<unfold.GetTau()<<""\n"";. TH1D *x=unfold.GetOutput(""x"",""myVariable"");; TH2D *rhoij=unfold.GetRhoIJ(""correlation"",""myVariable"");. This creates; logTauX: the L-curve's x-coordinate as a function of log(tau); logTauY: the L-curve's y-coordinate as a function of log(tau); lCurve: a graph of the L-curve; x,rhoij: unfolding result for best choice of tau; iBest: the coordinate/spline knot number with the best choice of tau. Note: always check the L ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:5282,simpl,simple,5282,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['simpl'],['simple']
Usability,iprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  XML tutorialsXML examples . ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:30 using Doxygen 1.8.13. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/modules.html:12477,Guid,Guide,12477,doc/v608/modules.html,https://root.cern,https://root.cern/doc/v608/modules.html,1,['Guid'],['Guide']
Usability,"ipt showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:118418,feedback,feedback,118418,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['feedback'],['feedback']
Usability,"iption; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool. class RooSimWSTool: public TNamed, public RooPrintable. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool.html:1090,simpl,simple,1090,root/html526/RooSimWSTool.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool.html,4,['simpl'],['simple']
Usability,"ique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:4316,Simpl,Simply,4316,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,4,['Simpl'],['Simply']
Usability,"ir/*"" in all; directories under ""/dir"", and ""/*/*"" to look in all directories; two levels deep.; For backward compatibility the type can also be passed via 'name',; in which case 'type' is ignored. TDSet(const TChain& chain, Bool_t withfriends = kTRUE); Create a named TDSet object from existing TChain 'chain'.; If 'withfriends' is kTRUE add also friends.; This constructor substituted the static methods TChain::MakeTDSet; removing any residual dependence of 'tree' on 'proof'. ~TDSet(); Cleanup. Long64_t Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void Print(Option_t* option = """") const; Print TDSet basic or full data. When option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set. Bool_t Add(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); Add files passed as list of TFileInfo, TUrl or TObjString objects .; If",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:10770,Clear,ClearInput,10770,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,6,['Clear'],"['Clear', 'ClearInput']"
Usability,"ire opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetYaxis().SetTitleSize(0.04); h.Draw(); ; label = ROOT.TLatex(); label.SetNDC(True); label.DrawLatex(0.175, 0.740, ""#eta""); label.DrawLatex(0.205, 0.775, ""#rho,#omega""); label.DrawLatex(0.270, 0.740, ""#phi""); label.DrawLatex(0.400, 0.800, ""J/#psi""); label.DrawLatex(0.415, 0.670, ""#psi'""); label.DrawLatex(0.485, 0.700, ""Y(1,2,3S)""); label.DrawLatex(0.755, 0.680, ""Z""); label.SetTextSize(0.040); label.DrawLatex(0.100, 0.920, ""#bf{CMS Open Data}""); label.SetTextSize(0.030); label.DrawLatex(0.630, 0.920, ""#sqrt{s} = 8 TeV, L_{int} = 11.6 fb^{-1}""); ; c.SaveAs(""dimuon_spectrum.pdf""); ; # Print cut-flow report; report.Print(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; DateApril 2019 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df102_NanoAODDimuonAnalysis.py. tutorialsdataframedf102_NanoAODDimuonAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html:3136,Guid,Guide,3136,doc/master/df102__NanoAODDimuonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html,1,['Guid'],['Guide']
Usability,"irector. This class is used to 'drive' and hold a serie of TBranchProxy objects; which represent and give access to the content of TTree object.; This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); Long64_tGetReadEntry() const; TTree*GetTree() const; ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(TTree* tree, Long64_t i). TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TBranchProxyDirector.h 27129 2009-01-13 08:22:29Z pcanal $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__TBranchProxyDirector.html:1462,Simpl,Simple,1462,root/html526/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html526/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,ired relative error in the minimum position. ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 66 of file BrentRootFinder.cxx. ◆ Status(). int ROOT::Math::BrentRootFinder::Status ; (; ); const. inlineoverridevirtual . Returns status of last estimate. ; If = 0 is OK ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 101 of file BrentRootFinder.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::BrentRootFinder::fFunction. private . Pointer to the function. ; Definition at line 124 of file BrentRootFinder.h. ◆ fLogScan. bool ROOT::Math::BrentRootFinder::fLogScan. private . flag to control usage of a log scan ; Definition at line 125 of file BrentRootFinder.h. ◆ fNIter. int ROOT::Math::BrentRootFinder::fNIter. private . Number of iterations needed for the last estimation. ; Definition at line 126 of file BrentRootFinder.h. ◆ fNpx. int ROOT::Math::BrentRootFinder::fNpx. private . Number of points to bracket root with initial grid (def is 100) ; Definition at line 127 of file BrentRootFinder.h. ◆ fRoot. double ROOT::Math::BrentRootFinder::fRoot. private . Current estimation of the function root. ; Definition at line 131 of file BrentRootFinder.h. ◆ fStatus. int ROOT::Math::BrentRootFinder::fStatus. private . Status of code of the last estimate. ; Definition at line 128 of file BrentRootFinder.h. ◆ fXMax. double ROOT::Math::BrentRootFinder::fXMax. private . Upper bound of the search interval. ; Definition at line 130 of file BrentRootFinder.h. ◆ fXMin. double ROOT::Math::BrentRootFinder::fXMin. private . Lower bound of the search interval. ; Definition at line 129 of file BrentRootFinder.h. Libraries for ROOT::Math::BrentRootFinder:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/BrentRootFinder.h; math/mathcore/src/BrentRootFinder.cxx. ROOTMathBrentRootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:10066,Guid,Guide,10066,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,1,['Guid'],['Guide']
Usability,"ironBase ();  . Static Public Member Functions; static void * Create ();  . Public Attributes; Iter_t fIterator;  ;  Public Attributes inherited from ROOT::Detail::TCollectionProxyInfo::EnvironBase; union { ;  ;    Bool_t   fLastValueVecBool ;  ;    Bool_t   fUseTemp ;  ; };  ;  ; size_t fIdx;  ; void * fObject;  ; int fRefCount;  ; size_t fSize;  ; size_t fSpace;  ; void * fStart;  ; void * fTemp;  . #include <TCollectionProxyInfo.h>. Inheritance diagram for ROOT::Detail::TCollectionProxyInfo::Environ< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Iter_t. template<typename T > . typedef T ROOT::Detail::TCollectionProxyInfo::Environ< T >::Iter_t. Definition at line 246 of file TCollectionProxyInfo.h. Constructor & Destructor Documentation. ◆ Environ(). template<typename T > . ROOT::Detail::TCollectionProxyInfo::Environ< T >::Environ ; (; ). inline . Definition at line 245 of file TCollectionProxyInfo.h. Member Function Documentation. ◆ Create(). template<typename T > . static void * ROOT::Detail::TCollectionProxyInfo::Environ< T >::Create ; (; ). inlinestatic . Definition at line 249 of file TCollectionProxyInfo.h. ◆ iter(). template<typename T > . T & ROOT::Detail::TCollectionProxyInfo::Environ< T >::iter ; (; ). inline . Definition at line 248 of file TCollectionProxyInfo.h. Member Data Documentation. ◆ fIterator. template<typename T > . Iter_t ROOT::Detail::TCollectionProxyInfo::Environ< T >::fIterator. Definition at line 247 of file TCollectionProxyInfo.h. Collaboration diagram for ROOT::Detail::TCollectionProxyInfo::Environ< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TCollectionProxyInfo.h. ROOTDetailTCollectionProxyInfoEnviron. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1Environ.html:2768,Guid,Guide,2768,doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1Environ.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1Environ.html,1,['Guid'],['Guide']
Usability,"ironment. ;  ; TClass * IsA () const override;  ; virtual void SetActive ();  ; virtual void SetActive (Bool_t active);  Suspend or resume PROOF via Condor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProof;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:1669,feedback,feedback,1669,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['feedback'],['feedback']
Usability,"ironment.Definition TApplication.cxx:244; TApplication::Openvirtual void Open()Definition TApplication.h:132; TApplication::LoadGraphicsLibsvirtual void LoadGraphicsLibs()Load shared libs necessary for graphics.Definition TApplication.cxx:1333; TApplication::StopIdleingvirtual void StopIdleing()Called when system stops idleing.Definition TApplication.cxx:1907; TApplication::kProcessRemotely@ kProcessRemotelyDefinition TApplication.h:44; TApplication::kDefaultApplication@ kDefaultApplicationDefinition TApplication.h:45; TApplication::StartIdleingvirtual void StartIdleing()Called when system starts idleing.Definition TApplication.cxx:1896; TApplication::Runvirtual void Run(Bool_t retrn=kFALSE)Main application eventloop. Calls system dependent eventloop via gSystem.Definition TApplication.cxx:1860; TApplication::~TApplicationvirtual ~TApplication()TApplication dtor.Definition TApplication.cxx:210; TApplication::OpenReferenceGuideForvoid OpenReferenceGuideFor(const TString &strippedClass)It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/st...Definition TApplication.cxx:1065; TApplication::HandleExceptionvirtual void HandleException(Int_t sig)Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingExcepti...Definition TApplication.cxx:590; TApplication::MakeBatchvirtual void MakeBatch()Switch to batch mode.Definition TApplication.cxx:1395; TApplication::OpenGitHubIssuevoid OpenGitHubIssue(const TString &type)It opens a GitHub issue in a web browser with prefilled ROOT version.Definition TApplication.cxx:1034; TApplication::fReturnFromRunBool_t fReturnFromRunDefinition TApplication.h:62; TApplication::Initvirtual void Init()Definition TApplication.h:117; TApplication::fIdleCommandTString fIdleCommandDefinition TApplication.h:68; TApplication::Argvchar ** Argv() constDefinition TApplication.h:141; TApplication::fgGraphNeededstatic Bool_t fgGraphNeededDefinition TApplication.h:73; TApplic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:89086,guid,guide,89086,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['guid'],['guide']
Usability,"irow++) {; 1186 Element *ap_sub = ap;; 1187 for (Int_t icol = 0; icol < nCols_source; icol++) {; 1188 *ap_sub++ = *bp++;; 1189 }; 1190 ap += this->fNcols;; 1191 }; 1192 }; 1193 ; 1194 return *this;; 1195}; 1196 ; 1197////////////////////////////////////////////////////////////////////////////////; 1198/// Set size of the matrix to nrows x ncols; 1199/// New dynamic elements are created, the overlapping part of the old ones are; 1200/// copied to the new structures, then the old elements are deleted.; 1201 ; 1202template <class Element>; 1203TMatrixTBase<Element> &TMatrixT<Element>::ResizeTo(Int_t nrows, Int_t ncols, Int_t /*nr_nonzeros*/); 1204{; 1205 R__ASSERT(this->IsValid());; 1206 if (!this->fIsOwner) {; 1207 Error(""ResizeTo(Int_t,Int_t)"", ""Not owner of data array,cannot resize"");; 1208 return *this;; 1209 }; 1210 ; 1211 if (this->fNelems > 0) {; 1212 if (this->fNrows == nrows && this->fNcols == ncols); 1213 return *this;; 1214 else if (nrows == 0 || ncols == 0) {; 1215 this->fNrows = nrows;; 1216 this->fNcols = ncols;; 1217 Clear();; 1218 return *this;; 1219 }; 1220 ; 1221 Element *elements_old = GetMatrixArray();; 1222 const Int_t nelems_old = this->fNelems;; 1223 const Int_t nrows_old = this->fNrows;; 1224 const Int_t ncols_old = this->fNcols;; 1225 ; 1226 Allocate(nrows, ncols);; 1227 R__ASSERT(this->IsValid());; 1228 ; 1229 Element *elements_new = GetMatrixArray();; 1230 // new memory should be initialized but be careful not to wipe out the stack; 1231 // storage. Initialize all when old or new storage was on the heap; 1232 if (this->fNelems > this->kSizeMax || nelems_old > this->kSizeMax); 1233 memset(elements_new, 0, this->fNelems * sizeof(Element));; 1234 else if (this->fNelems > nelems_old); 1235 memset(elements_new + nelems_old, 0, (this->fNelems - nelems_old) * sizeof(Element));; 1236 ; 1237 // Copy overlap; 1238 const Int_t ncols_copy = TMath::Min(this->fNcols, ncols_old);; 1239 const Int_t nrows_copy = TMath::Min(this->fNrows, nrows_old);; 1240 ; 124",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:42954,Clear,Clear,42954,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['Clear'],['Clear']
Usability,"irtual . Draw this frame with its current attributes. ; Reimplemented from TBox.; Definition at line 67 of file TFrame.cxx. ◆ ExecuteEvent(). void TFrame::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a TFrame object is clicked. ; Reimplemented from TBox.; Definition at line 77 of file TFrame.cxx. ◆ IsA(). TClass * TFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBox.; Definition at line 35 of file TFrame.h. ◆ Paint(). void TFrame::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this wbox with its current attributes. ; Reimplemented from TBox.; Definition at line 128 of file TFrame.cxx. ◆ Pop(). void TFrame::Pop ; (; ). overridevirtual . Do not pop frame's, if allowed they would cover the picture they frame. ; Reimplemented from TObject.; Definition at line 144 of file TFrame.cxx. ◆ SavePrimitive(). void TFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TBox.; Definition at line 151 of file TFrame.cxx. ◆ Streamer(). void TFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TBox. ; Reimplemented from TBox. ◆ StreamerNVirtual(). void TFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 35 of file TFrame.h. ◆ UseCurrentStyle(). void TFrame::UseCurrentStyle ; (; ). overridevirtual . Replace current frame attributes by current style. ; Reimplemented from TObject.; Definition at line 158 of file TFrame.cxx. Libraries for TFrame:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TFrame.h; graf2d/graf/src/TFrame.cxx. TFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFrame.html:22188,Guid,Guide,22188,doc/master/classTFrame.html,https://root.cern,https://root.cern/doc/master/classTFrame.html,1,['Guid'],['Guide']
Usability,"irtual . Implements RooAbsDataStore.; Definition at line 1041 of file RooVectorDataStore.cxx. ◆ attachCache(). void RooVectorDataStore::attachCache ; (; const RooAbsArg * ; newOwner, . const RooArgSet & ; cachedVars . ). overridevirtual . Initialize cache of dataset: attach variables of cache ArgSet to the corresponding TTree branches. ; Implements RooAbsDataStore.; Definition at line 982 of file RooVectorDataStore.cxx. ◆ cache(). const RooVectorDataStore * RooVectorDataStore::cache ; (; ); const. inline . Definition at line 171 of file RooVectorDataStore.h. ◆ cacheArgs(). void RooVectorDataStore::cacheArgs ; (; const RooAbsArg * ; owner, . RooArgSet & ; newVarSet, . const RooArgSet * ; nset = nullptr, . bool ; skipZeroWeights = true . ). overridevirtual . Cache given RooAbsArgs: The tree is given direct write access of the args internal cache the args values is pre-calculated for all data points in this data collection. ; Upon a get() call, the internal cache of 'newVar' will be loaded with the precalculated value and it's dirty flag will be cleared. ; Implements RooAbsDataStore.; Definition at line 764 of file RooVectorDataStore.cxx. ◆ cacheOwner(). const RooAbsArg * RooVectorDataStore::cacheOwner ; (; ). inlineoverridevirtual . Implements RooAbsDataStore.; Definition at line 163 of file RooVectorDataStore.h. ◆ catStoreList(). std::vector< CatVector * > & RooVectorDataStore::catStoreList ; (; ). inline . Definition at line 542 of file RooVectorDataStore.h. ◆ changeObservableName(). bool RooVectorDataStore::changeObservableName ; (; const char * ; from, . const char * ; to . ). overridevirtual . Implements RooAbsDataStore.; Definition at line 595 of file RooVectorDataStore.cxx. ◆ Class(). static TClass * RooVectorDataStore::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooVectorDataStore::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooVectorDataStore::Class_V",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:27552,clear,cleared,27552,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['clear'],['cleared']
Usability,"irtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 74 of file TCanvasImp.h. ◆ ShowEditor(). virtual void TCanvasImp::ShowEditor ; (; Bool_t ; show = kTRUE). inlinevirtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 80 of file TCanvasImp.h. ◆ ShowMenuBar(). virtual void TCanvasImp::ShowMenuBar ; (; Bool_t ; show = kTRUE). inlinevirtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 75 of file TCanvasImp.h. ◆ ShowStatusBar(). virtual void TCanvasImp::ShowStatusBar ; (; Bool_t ; show = kTRUE). inlinevirtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 76 of file TCanvasImp.h. ◆ ShowToolBar(). virtual void TCanvasImp::ShowToolBar ; (; Bool_t ; show = kTRUE). inlinevirtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 81 of file TCanvasImp.h. ◆ ShowToolTips(). virtual void TCanvasImp::ShowToolTips ; (; Bool_t ; show = kTRUE). inlinevirtual . Reimplemented in TRootCanvas, and TWebCanvas.; Definition at line 82 of file TCanvasImp.h. ◆ Streamer(). virtual void TCanvasImp::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TRootCanvas, and TWebCanvas. ◆ StreamerNVirtual(). void TCanvasImp::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TCanvasImp.h. ◆ Unlock(). virtual void TCanvasImp::Unlock ; (; ). inlineprotectedvirtual . Reimplemented in TWebCanvas.; Definition at line 45 of file TCanvasImp.h. Friends And Related Symbol Documentation. ◆ TCanvas. friend class TCanvas. friend . Definition at line 31 of file TCanvasImp.h. Member Data Documentation. ◆ fCanvas. TCanvas* TCanvasImp::fCanvas {nullptr}. protected . Definition at line 34 of file TCanvasImp.h. Libraries for TCanvasImp:. [legend]; The documentation for this class was generated from the following file:; core/gui/inc/TCanvasImp.h. TCanvasImp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasImp.html:10508,Guid,Guide,10508,doc/master/classTCanvasImp.html,https://root.cern,https://root.cern/doc/master/classTCanvasImp.html,1,['Guid'],['Guide']
Usability,irtual . Set relative size of subscripts and superscripts. ; Definition at line 2736 of file TLatex.cxx. ◆ SetLimitIndiceSize(). void TLatex::SetLimitIndiceSize ; (; Int_t ; limitFactorSize). virtual . Set limit for text resizing of subscripts and superscripts. ; Definition at line 2744 of file TLatex.cxx. ◆ Streamer(). void TLatex::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TLatex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TLatex.h. Member Data Documentation. ◆ fError. const Char_t* TLatex::fError {nullptr}. protected . ! error code ; Definition at line 65 of file TLatex.h. ◆ fFactorPos. Double_t TLatex::fFactorPos. protected . ! Relative position of subscripts and superscripts ; Definition at line 63 of file TLatex.h. ◆ fFactorSize. Double_t TLatex::fFactorSize. protected . ! Relative size of subscripts and superscripts ; Definition at line 62 of file TLatex.h. ◆ fItalic. Bool_t TLatex::fItalic. protected . ! Currently inside italic operator ; Definition at line 69 of file TLatex.h. ◆ fLimitFactorSize. Int_t TLatex::fLimitFactorSize. protected . lower bound for subscripts/superscripts size ; Definition at line 64 of file TLatex.h. ◆ fOriginSize. Double_t TLatex::fOriginSize. protected . Font size of the starting font. ; Definition at line 68 of file TLatex.h. ◆ fShow. Bool_t TLatex::fShow. protected . ! is true during the second pass (Painting) ; Definition at line 66 of file TLatex.h. ◆ fTabSize. std::vector<TLatexFormSize> TLatex::fTabSize. protected . ! array of values for the different zones ; Definition at line 67 of file TLatex.h. Libraries for TLatex:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TLatex.h; graf2d/graf/src/TLatex.cxx. TLatex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex.html:41588,Guid,Guide,41588,doc/master/classTLatex.html,https://root.cern,https://root.cern/doc/master/classTLatex.html,1,['Guid'],['Guide']
Usability,"irtual . Set the status of an asynchronous file open. ; Definition at line 326 of file TNetXNGFile.cxx. ◆ SetEnv(). void TNetXNGFile::SetEnv ; (; ). privatevirtual . Map ROOT and xrootd environment variables. ; Definition at line 823 of file TNetXNGFile.cxx. ◆ Streamer(). void TNetXNGFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile. ◆ StreamerNVirtual(). void TNetXNGFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file TNetXNGFile.h. ◆ WriteBuffer(). Bool_t TNetXNGFile::WriteBuffer ; (; const char * ; buffer, . Int_t ; length . ). overridevirtual . Write a data chunk. ; param buffer: the data to be written param length: the size of the buffer returns: kTRUE in case of failure ; Reimplemented from TFile.; Definition at line 621 of file TNetXNGFile.cxx. Member Data Documentation. ◆ fFile. XrdCl::File* TNetXNGFile::fFile. private . Definition at line 35 of file TNetXNGFile.h. ◆ fInitCondVar. XrdSysCondVar* TNetXNGFile::fInitCondVar. private . Definition at line 38 of file TNetXNGFile.h. ◆ fMode. int TNetXNGFile::fMode. private . Definition at line 37 of file TNetXNGFile.h. ◆ fNewUrl. TString TNetXNGFile::fNewUrl. private . Definition at line 43 of file TNetXNGFile.h. ◆ fQueryReadVParams. Int_t TNetXNGFile::fQueryReadVParams. private . Definition at line 42 of file TNetXNGFile.h. ◆ fReadvIorMax. Int_t TNetXNGFile::fReadvIorMax. private . Definition at line 40 of file TNetXNGFile.h. ◆ fReadvIovMax. Int_t TNetXNGFile::fReadvIovMax. private . Definition at line 41 of file TNetXNGFile.h. ◆ fUrl. XrdCl::URL* TNetXNGFile::fUrl. private . Definition at line 36 of file TNetXNGFile.h. Libraries for TNetXNGFile:. [legend]; The documentation for this class was generated from the following files:; net/netxng/inc/TNetXNGFile.h; net/netxng/src/TNetXNGFile.cxx. TNetXNGFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGFile.html:49414,Guid,Guide,49414,doc/master/classTNetXNGFile.html,https://root.cern,https://root.cern/doc/master/classTNetXNGFile.html,1,['Guid'],['Guide']
Usability,"irtual Bool_t ChangeDirectory(const char *path)Change directory.Definition TSystem.cxx:862; TSystem::GetBuildCompilerVersionStrvirtual const char * GetBuildCompilerVersionStr() constReturn the build compiler version identifier string.Definition TSystem.cxx:3899; TSystem::WorkingDirectoryvirtual const char * WorkingDirectory()Return working directory.Definition TSystem.cxx:871; TSystem::Whichvirtual char * Which(const char *search, const char *file, EAccessMode mode=kFileExists)Find location of file in a search path.Definition TSystem.cxx:1548; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TTabComDefinition TTabCom.h:52; TTabCom::HookInt_t Hook(char *buf, int *pLoc, std::ostream &out)[private]Definition TTabCom.cxx:1567; TTabCom::ClearAllvoid ClearAll()clears all lists except for user names and system include files.Definition TTabCom.cxx:319; TTermInputHandlerDefinition TRint.cxx:121; TTermInputHandler::TTermInputHandlerTTermInputHandler(Int_t fd)Definition TRint.cxx:123; TTermInputHandler::ReadNotifyBool_t ReadNotify() overrideNotify when something can be read from the descriptor associated with this handler.Definition TRint.cxx:125; TTermInputHandler::NotifyBool_t Notify() overrideNotify implementation. Call the application interupt handler.Definition TRint.cxx:131; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::gMmallocDescR__EXTERN void * gMmallocDescDefinition TStorage.h:143; TClassEdit::DemangleTypeIdNamechar * DemangleTypeIdName(const std::type_info &ti, int &errorCode)Demangle in a portable way the type id name.Definition TClassEdit.cxx:2148. corerintsrcTRint.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:45343,Guid,Guide,45343,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['Guid'],['Guide']
Usability,"irtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; TVirtualGLPainter&TVirtualGLPainter::operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TGraph* g, Double_t z); Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TMultiGraph* mg, Double_t z); Bool_tCacheGeometry(); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawCap(TGLH2PolyPainter::CIter_t cap, Int_t bin) const; voidDrawCaps() const; voidDrawExtrusion() const; voidDrawExtrusion(const TGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawExtrusion(const TMultiGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFillTemporaryP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLH2PolyPainter.html:1432,Clear,ClearBuffers,1432,root/html530/TGLH2PolyPainter.html,https://root.cern,https://root.cern/root/html530/TGLH2PolyPainter.html,1,['Clear'],['ClearBuffers']
Usability,"irtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; TVirtualGLPainter&TVirtualGLPainter::operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. voidClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawContoursProjection() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; voidDrawProjections() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidGenTexMap() const; Bool_tHasProjections() const; Bool_tHasSections() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; Bool_tPreparePalette() const; voidSetNormals(); voidSetSurfaceColor() const; Bool_tTextured() const; char*WindowPointTo3DPoint(Int_t px, Int_t py) const. Data Members; public:. enum ESurfaceType { kSurf; kSurf1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLSurfacePainter.html:1484,Clear,ClearBuffers,1484,root/html530/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html530/TGLSurfacePainter.html,1,['Clear'],['ClearBuffers']
Usability,"irtual Bool_tadd(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsArg& var, Bool_t valueServer, Bool_t shapeServer, Bool_t silent); virtual RooAbsArg*addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidaddClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_taddOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_taddOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsCollection&RooAbsCollection::assignFast(const RooAbsCollection& other); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooArgSet::cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*RooArgSet::clone(const char* newname) const; virtual TObject*RooAbsCollection::Clone(const char* newname = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tRooAbsCollection::contains(const RooAbsArg& var) const; Bool_tRooAbsCollection::containsInstance(const RooAbsArg& var) const; stringRooAbsCollection::contentsString() const; virtual voidTObject::Copy(TObject& object) const; virtual TObject*RooArgSet::create(const char* newname) const; TIterator*RooAbsCollection::createIterator(Bool_t dir = kIterForward) const; virtual Int_tRooAbsCollection::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::Dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSetProxy.html:2158,Clear,Clear,2158,root/html530/RooSetProxy.html,https://root.cern,https://root.cern/root/html530/RooSetProxy.html,1,['Clear'],['Clear']
Usability,"irtual Bool_t IsNullBox () const;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVGShape.html:5379,Clear,ClearThreadData,5379,doc/master/classTGeoVGShape.html,https://root.cern,https://root.cern/doc/master/classTGeoVGShape.html,1,['Clear'],['ClearThreadData']
Usability,"irtual Bool_t IsStaged (const char *);  Just check if the file exists locally. ;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Locate (const char *u, TString &f);  Just check if the file exists locally. ;  ; virtual Int_t LocateCollection (TFileCollection *fc, Bool_t addDummyUrl=kFALSE);  Massive location of files. ;  ; virtual Bool_t Matches (const char *s);  ; virtual Bool_t Stage (const char *, Option_t *=nullptr);  ; virtual Bool_t Stage (TCollection *pathlist, Option_t *opt=nullptr);  Issue a stage request for a list of files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileStager.html:1514,Clear,Clear,1514,doc/master/classTFileStager.html,https://root.cern,https://root.cern/doc/master/classTFileStager.html,1,['Clear'],['Clear']
Usability,irtual TObjArray * TLimitDataSource::GetSignal ; (; ). inlinevirtual . Definition at line 32 of file TLimitDataSource.h. ◆ SetOwner(). void TLimitDataSource::SetOwner ; (; bool ; swtch = kTRUE). virtual . Gives to the TLimitDataSource the ownership of the various objects given as input. ; Objects are then deleted by the TLimitDataSource destructor. ; Definition at line 101 of file TLimitDataSource.cxx. Member Data Documentation. ◆ fBackground. TObjArray TLimitDataSource::fBackground. private . Packed input background. ; Definition at line 43 of file TLimitDataSource.h. ◆ fCandidates. TObjArray TLimitDataSource::fCandidates. private . Packed input candidates (data) ; Definition at line 44 of file TLimitDataSource.h. ◆ fDummyIds. TObjArray TLimitDataSource::fDummyIds. private . Array of dummy object (used for bookeeping) ; Definition at line 53 of file TLimitDataSource.h. ◆ fDummyTA. TObjArray TLimitDataSource::fDummyTA. private . Dummy objects the class will use and delete. ; Array of dummy object (used for bookeeping) ; Definition at line 52 of file TLimitDataSource.h. ◆ fErrorOnBackground. TObjArray TLimitDataSource::fErrorOnBackground. private . Packed error sources for background. ; Definition at line 46 of file TLimitDataSource.h. ◆ fErrorOnSignal. TObjArray TLimitDataSource::fErrorOnSignal. private . Packed error sources for signal. ; Definition at line 45 of file TLimitDataSource.h. ◆ fIds. TObjArray TLimitDataSource::fIds. private . Packed IDs for the different error sources. ; Definition at line 47 of file TLimitDataSource.h. ◆ fSignal. TObjArray TLimitDataSource::fSignal. private . Packed input signal. ; Definition at line 42 of file TLimitDataSource.h. Libraries for TLimitDataSource:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TLimitDataSource.h; hist/hist/src/TLimitDataSource.cxx. TLimitDataSource. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:15866,Guid,Guide,15866,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['Guid'],['Guide']
Usability,"irtual double RooStats::ConfInterval::ConfidenceLevel ; (; ); const. pure virtual . return confidence level ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ DeclFileName(). static const char * RooStats::ConfInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file ConfInterval.h. ◆ GetParameters(). virtual RooArgSet * RooStats::ConfInterval::GetParameters ; (; ); const. pure virtual . return list of parameters of interest defining this interval (return a new cloned list) ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ IsA(). TClass * RooStats::ConfInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval.; Definition at line 67 of file ConfInterval.h. ◆ IsInInterval(). virtual bool RooStats::ConfInterval::IsInInterval ; (; const RooArgSet & ; ); const. pure virtual . check if given point is in the interval ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ operator=(). ConfInterval & RooStats::ConfInterval::operator= ; (; const ConfInterval & ; other). inline . operator= ; Definition at line 43 of file ConfInterval.h. ◆ SetConfidenceLevel(). virtual void RooStats::ConfInterval::SetConfidenceLevel ; (; double ; cl). pure virtual . used to set confidence level. Keep pure virtual ; Implemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ Streamer(). void RooStats::ConfInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:14595,Simpl,SimpleInterval,14595,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"irtual void TMVA::DNN::Settings::endTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDecay ; (; ); const. inline . get the weight-decay factor ; Definition at line 769 of file NeuralNet.h. ◆ hasConverged(). bool TMVA::DNN::Settings::hasConverged ; (; double ; testError). virtual . has this training converged already? ; check for convergence; Definition at line 485 of file NeuralNet.cxx. ◆ learningRate(). double TMVA::DNN::Settings::learningRate ; (; ); const. inline . get the learning rate ; Definition at line 771 of file NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); const. inline . returns the smallest error so far ; Definition at line 829 of file NeuralNet.h. ◆ minimizerType(). MinimizerType TMVA::DNN::Settings::minimizerType ; (; ); const. inline . which minimizer shall be used (e.g. SGD) ; Definition at line 774 of file NeuralNet.h. ◆ momentum(). double TMVA::DNN::Settings::momentum ; (; ); const. inline . get the momentum (e.g. for SGD) ; Definition at line 772 of file NeuralNet.h. ◆ pads(). void TMVA::DNN::Settings::pads ; (; int ; numPads). inline . preparation for monitoring ; Definition at line 818 of file NeuralNet.h. ◆ plot(). void TMVA::DNN::Settings::plot ; (; std::string ; histoName, . std::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:9044,learn,learningRate,9044,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['learn'],['learningRate']
Usability,"irtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id: PDEFoamKernelTrivial.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__PDEFoamKernelTrivial.html:5891,Simpl,Simple,5891,root/html532/TMVA__PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/root/html532/TMVA__PDEFoamKernelTrivial.html,1,['Simpl'],['Simple']
Usability,"irtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id: PDEFoamKernelTrivial.h 40020 2011-06-27 16:46:42Z stelzer $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamKernelTrivial.html:5891,Simpl,Simple,5891,root/html530/TMVA__PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamKernelTrivial.html,1,['Simpl'],['Simple']
Usability,"irtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGLVContainer::AddItem(TGLVEntry* item); virtual voidAddThisItem(TTVLVEntry* item); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVContainer.html:1597,Clear,Clear,1597,root/html530/TTVLVContainer.html,https://root.cern,https://root.cern/root/html530/TTVLVContainer.html,5,['Clear'],['Clear']
Usability,"irtual voidTGPopupMenu::AddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGPopupMenu::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidTGPopupMenu::CheckEntry(Int_t id); virtual voidTGPopupMenu::CheckEntryByData(void* user_data); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGPopupMenu::DefaultEntry(Int_t id); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGPopupMenu::DeleteEntry(Int_t id); virtual voidTGPopupMenu::DeleteEntry(TGMenuEntry* entry); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootContextMenu.html:2491,Clear,Clear,2491,root/html528/TRootContextMenu.html,https://root.cern,https://root.cern/root/html528/TRootContextMenu.html,6,['Clear'],['Clear']
Usability,"irtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tCanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTriangleSet.html:2547,Clear,ClearStamps,2547,root/html530/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html530/TEveTriangleSet.html,5,['Clear'],['ClearStamps']
Usability,"irtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:2312,Clear,ClearPackage,2312,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['Clear'],['ClearPackage']
Usability,"irtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::DeactivateWorker(const char* ord); static voidTProof::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:2311,Clear,ClearPackage,2311,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['Clear'],['ClearPackage']
Usability,"irtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:6930,Simpl,SimpleInterval,6930,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"irtual voidUpdateBackgroundStart(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual Bool_tItemLayout(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h). private:. TGView&operator=(const TGView&); TGView(const TGView&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGView.html:16344,Clear,ClearFlags,16344,root/html602/TGView.html,https://root.cern,https://root.cern/root/html602/TGView.html,2,['Clear'],['ClearFlags']
Usability,"irtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html:3247,Clear,Clear,3247,root/html530/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html,2,['Clear'],['Clear']
Usability,"irtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLFontManager(). protected:. static voidInitStatics(). private:. TGLFontManager&operator=(const TGLFontManager&); TGLFontManager(const TGLFontManager&). Data Members; protected:. TGLFontManager::FontMap_tfFontMapmap of created fonts; TGLFontManager::FontList_tfFontTrashfonts to purge; static Int_tfgExtendedFontStart; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static TGLFontManager::FontSizeVec_tfgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetExtendedFontStartIndex(). Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLFontManager.html:2629,Clear,ClearFontTrash,2629,root/html604/TGLFontManager.html,https://root.cern,https://root.cern/root/html604/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"irtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLFontManager(). protected:. static voidInitStatics(). private:. TGLFontManager&operator=(const TGLFontManager&); TGLFontManager(const TGLFontManager&). Data Members; protected:. TGLFontManager::FontMap_tfFontMapmap of created fonts; TGLFontManager::FontList_tfFontTrashfonts to purge; static Int_tfgExtendedFontStart; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static TGLFontManager::FontSizeVec_tfgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetExtendedFontStartIndex(). Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLFontManager.html:2629,Clear,ClearFontTrash,2629,root/html602/TGLFontManager.html,https://root.cern,https://root.cern/root/html602/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"irtualCollectionProxy::EProperty. { return fProperties; }. void * New() const; Return a new container object. void * New(void* arena) const; Execute the container constructor. void * NewArray(Int_t nElements) const; Return a new container object. void * NewArray(Int_t nElements, void* arena) const; Execute the container constructor. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Execute the container destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Execute the container array destructor. UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objectstart); Set the address of the container being proxied and keep track of the previous one. void PopProxy(); Reset the address of the container being proxied to the previous container. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass(); Return a pointer to the TClass representing the content. EDataType GetType(); If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete). void Commit(void* ). char * operator[](UInt_t idx) const; { return (char*)(const_cast<TVirtualCollectionProxy*>(this))->At(idx); }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE); begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement); Othe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualCollectionProxy.html:4380,simpl,simple,4380,root/html528/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TVirtualCollectionProxy.html,3,['simpl'],['simple']
Usability,"irtualFFT; flag option: choosing how much time should be spent in planning the transform: Possible options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type.; option allowing to choose between the global fgFFT and a new TVirtualFFT object. """" - default, changes and returns the global fgFFT variable; ""K"" (from ""keep"")- without touching the global fgFFT, creates and returns a new TVirtualFFT*. User is then responsible for deleting it. Examples of valid options: ""ES K"", ""EX"", etc . Definition at line 279 of file TVirtualFFT.cxx. ◆ Streamer(). void TVirtualFFT::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualFFT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 132 of file TVirtualFFT.h. ◆ Transform(). virtual void TVirtualFFT::Transform ; (; ). pure virtual . Implemented in TFFTComplex, TFFTComplexReal, TFFTReal, and TFFTRealComplex. Member Data Documentation. ◆ fgDefault. TString TVirtualFFT::fgDefault = """". staticprotected . Definition at line 92 of file TVirtualFFT.h. ◆ fgFFT. TVirtualFFT * TVirtualFFT::fgFFT = nullptr. staticprotected . Definition at line 91 of file TVirtualFFT.h. Libraries for TVirtualFFT:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TVirtualFFT.h; core/base/src/TVirtualFFT.cxx. TVirtualFFT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFFT.html:25300,Guid,Guide,25300,doc/master/classTVirtualFFT.html,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html,1,['Guid'],['Guide']
Usability,"irtualFitter.cxx:209; TVirtualFitter::GetUserFuncvirtual TObject * GetUserFunc() constDefinition TVirtualFitter.h:84; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::GetListOfPrimitivesvirtual TList * GetListOfPrimitives() const =0; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::Dividevirtual void Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0)=0; TVirtualPad::Classstatic TClass * Class(); TVirtualPad::Clearvoid Clear(Option_t *option="""") override=0; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FitObjectTFitResultPtr FitObject(TH1 *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)fitting function for a TH1 (called from TH1::Fit)Definition HFitImpl.cxx:972; ROOT::Fit::FitOptionsMakevoid FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption)Decode list of options into fitOption.Definition HFitImpl.cxx:685; ROOT::Fit::EFitObjectType::kGraph@ kGraph; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; graphDefinition graph.py:1; Foption_tDefinition Foption.h:24; Drawth1 Draw(); mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. histhistsrcTMultiGraph.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:71544,Guid,Guide,71544,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['Guid'],['Guide']
Usability,"irtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TGraph* g, Double_t z); Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TMultiGraph* mg, Double_t z); Bool_tCacheGeometry(); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawCap(TGLH2PolyPainter::CIter_t cap, Int_t bin) const; voidDrawCaps() const; voidDrawExtrusion() const; voidDrawExtrusion(const TGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawExtrusion(const TMultiGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFillTemporaryP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLH2PolyPainter.html:1624,Clear,ClearBuffers,1624,root/html534/TGLH2PolyPainter.html,https://root.cern,https://root.cern/root/html534/TGLH2PolyPainter.html,1,['Clear'],['ClearBuffers']
Usability,"irtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. voidClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawContoursProjection() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; voidDrawProjections() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidGenTexMap() const; Bool_tHasProjections() const; Bool_tHasSections() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; Bool_tPreparePalette() const; voidSetNormals(); voidSetSurfaceColor() const; Bool_tTextured() const; char*WindowPointTo3DPoint(Int_t px, Int_t py) const. Data Members; public:. enum ESurfaceType { kSurf; kSurf1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSurfacePainter.html:1676,Clear,ClearBuffers,1676,root/html534/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html534/TGLSurfacePainter.html,1,['Clear'],['ClearBuffers']
Usability,"irtualX(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tCreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tCreateCursor(ECursor cursor); virtual GC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:1708,Clear,Clear,1708,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,3,['Clear'],['Clear']
Usability,"irtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TArrow::SetAnglevirtual void SetAngle(Float_t angle=60)Definition TArrow.h:60; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::Cconstexpr Double_t C()Velocity of light in .Definition TMath.h:114; lTLine lDefinition textangle.C:4; AuthorOlivier Couet ; Definition in file mass_spectrum.C. tutorialsgraphicsmass_spectrum.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mass__spectrum_8C.html:5858,simpl,simple,5858,doc/master/mass__spectrum_8C.html,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"irtual_b);  ; void WriteRealData (void *pointer, char *&buffer);  Write one persistent data member on output buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRealData.html:3161,Clear,Clear,3161,doc/master/classTRealData.html,https://root.cern,https://root.cern/doc/master/classTRealData.html,1,['Clear'],['Clear']
Usability,"is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the...Definition RooBMixDecay.h:23; RooBMixDecay::DoubleSided@ DoubleSidedDefinition RooBMixDecay.h:26; RooBinningImplements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choi...Definition RooBinning.h:27; RooCategoryObject to represent discrete states.Definition RooCategory.h:28; RooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution.Definition RooGaussModel.h:25; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPlot::SetMaximumSetMaximum(ymax); RooPlot::SetMinimumSetMinimum(ymin); RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf108_plotbinningDefinition rf108_plotbinning.py:1; RangeTa Range(0, 0, 1, 1); ; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plotting -- RooAbsReal::plotAsymOn(bmix) plot on dt projects variables (tagFlav); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf108_plotbinning.C. tutorialsroofitrf108_plotbinning.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf108__plotbinning_8C.html:6678,Guid,Guide,6678,doc/master/rf108__plotbinning_8C.html,https://root.cern,https://root.cern/doc/master/rf108__plotbinning_8C.html,1,['Guid'],['Guide']
Usability,"is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that show",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:119683,simpl,simple,119683,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache. The learning phase is started or restarted when:; TTree automatically creates a cache.; TTree::SetCacheSize is called with a non-zero size and a cache did not previously exist; TTreeCache::StartLearningPhase is called.; TTreeCache::SetEntryRange is called and the learning is not yet finished and has not been set to manual and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; TTreeCache::StopLearningPhase is called.; An entry outside the 'learning' range is requested The 'learning range is from fEntryMin (default to 0) to fEntryMin + fgLearnEntries.; A 'cached' TChain switches over to a new file. Self-optimization in presence of cache misses; The TTreeCache can optimize its behavior on a cache miss. When miss optimization is enabled (see the SetOptimizeMisses method), it tracks all branches utilized after the learning phase which caused a cache miss. When one cache miss occurs, all the utilized branches are be prefetched for that event. This optimization utilizes the observation that infrequently accessed branches are often accessed together. An example scenario where such behavior is desirable, is an analysis where a set of collections are read only for a few events in which a certain condition is respected, e.g. a trigger fired. Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase by at most a factor two in the case of cache miss. Additionally, on the first miss of an event, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:4193,learn,learning,4193,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,4,['learn'],['learning']
Usability,"is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFileCacheRead;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile () const;  ; virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:7291,learn,learning,7291,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"is case, we will name it histogram-race-condition-fix, but you may name it differently according to what your contribution will be.; git checkout -b histogram-race-condition-fix; After implementing your changes, add and commit your changes (More about how to use git here):; git add hist/hist/somefile.cxx; git commit -m ""Avoid race condition on Ubuntu 16.04""; git push --set-upstream origin histogram-race-condition-fix; Your changes are now in your forked repository on GitHub. We will now make the pull request.; Making the pull request on GitHub; If you go to https://github.com/<your GitHub username>/root, you will see a notification saying ""Your recently pushed branches: histogram-race-condition-fix (some minutes ago)"":. You can now hit the green ""Compare & pull request"" button which lets you create the pull request.; Fill in a reasonable description of what your new feature is, and hit ""Create pull request"". A project member will later initiate a build of your pull request and then review your pull request before giving feedback and in the end hopefully merge it. More about how what happens after submitting the pull request can be found in the contributing readme.; Pulling the last changes from upstream/master; Often, there might have been changes in the upstream/master repository that you want to have together with your new changes. This section will describe how to pull the new changes.; Add the ROOT repository upstream as a remote:; git remote add upstream https://github.com/root-project/root; Make sure you are on the master branch locally and pull the latest changes from upstream:; git checkout master; git pull upstream master; Go back to your local branch and rebase the last changes from master:; git checkout histogram-race-condition-fix; git rebase master; Push your new updated local branch to your GitHub repository (origin):; git push --force; Summary. The entire workflow is summarized in the image above. First, we cloned root-project/root, and cloned it to o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:3515,feedback,feedback,3515,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['feedback'],['feedback']
Usability,is class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInt,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:15459,Simpl,SimpleInterval,15459,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"is is a static function.; Set object delete option.; When this option is activated (default), ReadBuffer automatically; delete objects when a data member is a pointer to an object.; If your constructor is not presetting pointers to 0, you must; call this static function TStreamerInfo::SetCanDelete(kFALSE);. void SetFactory(TVirtualStreamerInfo* factory); static function: Set the StreamerInfo factory. Bool_t SetStreamMemberWise(Bool_t enable = kTRUE); Set whether the TStreamerInfos will save the collections in; ""member-wise"" order whenever possible. The default is to store member-wise.; kTRUE indicates member-wise storing; kFALSE inddicates object-wise storing; This function returns the previous value of fgStreamMemberWise. void Streamer(TBuffer& b); Stream an object of class TVirtualStreamerInfo. void Build(). void BuildCheck(). void BuildEmulated(TFile* file). void BuildOld(). Bool_t BuildFor(const TClass* cl). void CallShowMembers(void* obj, TMemberInspector& insp) const. void Clear(Option_t* ). Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete). void Compile(). void ForceWriteInfo(TFile* file, Bool_t force = kFALSE). Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0). TClass * GetActualClass(const void* obj) const. TClass * GetClass() const. UInt_t GetCheckSum() const. Int_t GetClassVersion() const. ULong_t * GetElems() const. TObjArray * GetElements() const. Int_t GetOffset(const char* ) const. Int_t * GetOffsets() const. Version_t GetOldVersion() const. Int_t GetOnFileClassVersion() const. Int_t GetNumber() const. Int_t GetSize() const. TStreamerElement * GetStreamerElement(const char* datamember, Int_t& offset) const. Bool_t IsBuilt() const; { return fIsBuilt; }. Bool_t IsCompiled() const; { return TestBit(kIsCompiled); }. Bool_t IsOptimized() const; { return fOptimized; }. Int_t IsRecovered() const; { return TestBit(kRecovered); }. void ls(Option_t* option = """") cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualStreamerInfo.html:11372,Clear,Clear,11372,root/html528/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html528/TVirtualStreamerInfo.html,3,['Clear'],['Clear']
Usability,"is is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TArray.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TArray.html:1505,Simpl,Simplified,1505,root/html528/TArray.html,https://root.cern,https://root.cern/root/html528/TArray.html,2,['Simpl'],['Simplified']
Usability,"is is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TArray.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TArray.html:1505,Simpl,Simplified,1505,root/html530/TArray.html,https://root.cern,https://root.cern/root/html530/TArray.html,2,['Simpl'],['Simplified']
Usability,"is is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TArray.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TArray.html:1505,Simpl,Simplified,1505,root/html532/TArray.html,https://root.cern,https://root.cern/root/html532/TArray.html,2,['Simpl'],['Simplified']
Usability,"is method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name) const; Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg) const; Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name) const; Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. RooLinkedListIter iterator(Bool_t dir = kTRUE) const. TIterator* MakeIterator(Bool_t dir = kTRUE) const; Return an iterator over this list. void Sort(Bool_t ascend = kTRUE); Sort elements of this list according to their; TObject::Compare() ranking via a simple; bubble sort ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLinkedList.html:7913,Clear,Clear,7913,root/html530/RooLinkedList.html,https://root.cern,https://root.cern/root/html530/RooLinkedList.html,1,['Clear'],['Clear']
Usability,"is method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name) const; Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg) const; Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name) const; Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. TIterator* MakeIterator(Bool_t dir = kTRUE) const; Return an iterator over this list. RooLinkedListIter iterator(Bool_t dir = kTRUE) const; Return an iterator over this list. void Sort(Bool_t ascend = kTRUE); Sort elements of this list according to their; TObject::Compare()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLinkedList.html:7764,Clear,Clear,7764,root/html528/RooLinkedList.html,https://root.cern,https://root.cern/root/html528/RooLinkedList.html,1,['Clear'],['Clear']
Usability,"is method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name) const; Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. RooAbsArg* findArg(const RooAbsArg* ) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg) const; Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name) const; Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. RooLinkedListIter iterator(Bool_t dir = kTRUE) const. RooFIter fwdIterator() const. TIterator* MakeIterator(Bool_t dir = kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLinkedList.html:8249,Clear,Clear,8249,root/html532/RooLinkedList.html,https://root.cern,https://root.cern/root/html532/RooLinkedList.html,4,['Clear'],['Clear']
Usability,"is name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. Double_t EvalInstance(Int_t i = 0, const char** stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. TLeaf * GetLeaf(Int_t n) const; -*-*Return leaf corresponding to serial number n; *-* ============================================. TMethodCall * GetMethodCall(Int_t code) const; -*-*Return methodcall cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:22690,simpl,simple,22690,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,3,['simpl'],['simple']
Usability,"is name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. T EvalInstance(Int_t i = 0, const char** stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. TLeaf * GetLeaf(Int_t n) const; -*-*Return leaf corresponding to serial number n; *-* ============================================. TMethodCall * GetMethodCall(Int_t code) const; -*-*Return methodcall correspond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormula.html:23008,simpl,simple,23008,root/html534/TTreeFormula.html,https://root.cern,https://root.cern/root/html534/TTreeFormula.html,1,['simpl'],['simple']
Usability,"is name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. T EvalInstance(Int_t i = 0, const char*[] stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. TLeaf * GetLeaf(Int_t n) const; -*-*Return leaf corresponding to serial number n; *-* ============================================. TMethodCall * GetMethodCall(Int_t code) const; -*-*Return methodcall correspon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:28258,simpl,simple,28258,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,2,['simpl'],['simple']
Usability,"is of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.001 # The preskimmed dataset contains only 0.01 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.2f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html:1382,usab,usable,1382,doc/master/df105__WBosonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html,1,['usab'],['usable']
Usability,"is option is activated (default), ReadBuffer automatically; delete objects when a data member is a pointer to an object.; If your constructor is not presetting pointers to 0, you must; call this static function TStreamerInfo::SetCanDelete(kFALSE);. void SetFactory(TVirtualStreamerInfo* factory); static function: Set the StreamerInfo factory. Bool_t SetStreamMemberWise(Bool_t enable = kTRUE); Set whether the TStreamerInfos will save the collections in; ""member-wise"" order whenever possible. The default is to store member-wise.; kTRUE indicates member-wise storing; kFALSE inddicates object-wise storing; This function returns the previous value of fgStreamMemberWise. void Streamer(TBuffer& ); Stream an object of class TVirtualStreamerInfo. void ResetIsCompiled(). void SetIsCompiled(). void Build(). void BuildCheck(TFile* file = 0). void BuildEmulated(TFile* file). void BuildOld(). Bool_t BuildFor(const TClass* cl). void CallShowMembers(void* obj, TMemberInspector& insp) const. void Clear(Option_t* ). Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file). void Compile(). void ForceWriteInfo(TFile* file, Bool_t force = kFALSE). Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0). TClass * GetActualClass(const void* obj) const. TClass * GetClass() const. UInt_t GetCheckSum() const. Int_t GetClassVersion() const. TStreamerElement * GetElem(Int_t id) const. TStreamerElement * GetElement(Int_t id) const. TObjArray * GetElements() const. Int_t GetOffset(const char* ) const. Int_t GetOffset(Int_t id) const. Int_t GetElementOffset(Int_t id) const. Version_t GetOldVersion() const. Int_t GetOnFileClassVersion() const. Int_t GetNumber() const. Int_t GetSize() const. TStreamerElement * GetStreamerElement(const char* datamember, Int_t& offset) const. Bool_t IsBuilt() const; { return fIsBuilt; }. Bool_t IsCompiled() const; { return fIsCompiled; }. Bool_t IsOptimized() const; { retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualStreamerInfo.html:11767,Clear,Clear,11767,root/html534/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TVirtualStreamerInfo.html,1,['Clear'],['Clear']
Usability,"is possible; to position further geometrical structures inside or to divide them further more; (see TGeoVolume::Divide()). The primitive shapes supported by the package are basically the GEANT3; shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel; planes. All basic primitives inherits from class TGeoBBox since the bounding box; of a solid is essential for the tracking algorithms. They also implement the; virtual methods defined in the virtual class TGeoShape (point and segment; classification). User-defined primitives can be direcly plugged into the modeler; provided that they override these methods. Composite shapes will be soon supported; by the modeler. In order to build a TGeoCompositeShape, one will have to define; first the primitive components. The object that handle boolean; operations among components is called TGeoBoolCombinator and it has to be; constructed providing a string boolean expression between the components names. Example for building a simple geometry :. rootgeom.C //; ; //. /*. */. TGeoManager - the manager class for the geometry package. TGeoManager class is embedding all the API needed for building and tracking; a geometry. It defines a global pointer (gGeoManager) in order to be fully; accessible from external code. The mechanism of handling multiple geometries; at the same time will be soon implemented. TGeoManager is the owner of all geometry objects defined in a session,; therefore users must not try to control their deletion. It contains lists of; media, materials, transformations, shapes and volumes. Logical nodes (positioned; volumes) are created and destroyed by the TGeoVolume class. Physical; nodes and their global transformations are subjected to a caching mechanism; due to the sometimes very large memory requirements of logical graph expansion.; The caching mechanism is triggered by the total number of physical instances; of volumes and the cache manager is a client of TGeoManager. The manager class;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:4680,simpl,simple,4680,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,6,['simpl'],['simple']
Usability,"is sense. The fitting method. The fit is performed using the Normal Equations method with Cholesky; decomposition. Why should it be used?. The linear fitter is considerably faster than general non-linear; fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?; - There are 2 options in the constructor - to store or not; store the input data. The advantages of storing the data; are that you'll be able to reset the fitting model without; adding all the points again, and that for very large sets; of points the chisquare is calculated more precisely.; The obvious disadvantage is the amount of memory used to; keep all the points.; - Before you start adding the points, you can change the; store/not store option by StoreData() method.; 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. 2.Setting the formula; 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signes ""++""; --for example ""1 ++ x"" - for fitting a straight line; -All standard functions, undrestood by TFormula, can be used; as additive parts; --TMath functions can be used too; -Functions, used as additive parts, shouldn't have any parameters,; even if those parameters are set.; --for example, if normalizing a sum of a gaus(0, 1) and a; gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; because it has parameters, take TMath::Gaus(x, 0, 1) instead.; -Polynomials can be used like ""pol3"", ..""polN""; -If fitting a more than 3-dimensional formula, variables should; be numbered as follows:; -- x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]""; 2.2 Setting the formula:; 2.2.1 If fitting a 1-2-3-dimensional",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:1669,simpl,simply,1669,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,6,['simpl'],['simply']
Usability,"is specified in percentage of the pad size. ; void legendautoplaced(); {; auto c4 = new TCanvas(""c"", ""c"", 600,500);; auto hpx = new TH1D(""hpx"",""This is the hpx distribution"",100,-4.,4.);; hpx->FillRandom(""gaus"", 50000);; hpx->Draw(""E"");; hpx->GetYaxis()->SetTitle(""Y Axis title"");; hpx->GetYaxis()->SetTitleOffset(1.3); hpx->GetYaxis()->CenterTitle(true);; hpx->GetXaxis()->SetTitle(""X Axis title"");; hpx->GetXaxis()->CenterTitle(true);; ; auto h1 = new TH1D(""h1"",""A green histogram"",100,-2.,2.);; h1->FillRandom(""gaus"", 10000);; h1->SetLineColor(kGreen);; h1->Draw(""same"");; ; auto g = new TGraph();; g->SetPoint(0, -3.5, 100 );; g->SetPoint(1, -3.0, 300 );; g->SetPoint(2, -2.0, 1000 );; g->SetPoint(3, 1.0, 800 );; g->SetPoint(4, 0.0, 200 );; g->SetPoint(5, 3.0, 200 );; g->SetPoint(6, 3.0, 700 );; g->Draw(""L"");; g->SetTitle(""This is a TGraph"");; g->SetLineColor(kRed);; g->SetFillColor(0);; ; // TPad::BuildLegend() default placement values are such that they trigger; // the automatic placement.; c4->BuildLegend();; }; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; AuthorOlivier Couet ; Definition in file legendautoplaced.C. tutorialshistlegendautoplaced.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/legendautoplaced_8C.html:2338,Guid,Guide,2338,doc/master/legendautoplaced_8C.html,https://root.cern,https://root.cern/doc/master/legendautoplaced_8C.html,1,['Guid'],['Guide']
Usability,"is split into categories represented by top-level list tree items for: boxes, tubes, translations, rotations, etc. Selection dialogs for different TGeo objects; Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together. Editors for shapes, materials, media, matrices; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the ""Apply"" button only if the check button ""Delayed draw"" is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The ""Undo"" button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the ""Undo"" does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable. Creation of New Objects; As described above, all geometry object creators are accessible within the geome",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:140962,Undo,Undo,140962,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Undo'],['Undo']
Usability,"is static function is called, it sets the flag whether; events with negative event weight should be ignored in the; training, or not. void SetIgnoreNegWeightsInTraining(Bool_t ); when this static function is called, it sets the flag whether; events with negative event weight should be ignored in the; training, or not. Bool_t IsDynamic() const; accessors. {return fDynamic; }. Double_t GetOriginalWeight() const; { return fWeight; }. Double_t GetBoostWeight() const; { return TMath::Max(Double_t(0.0001),fBoostWeight); }. UInt_t GetClass() const; { return fClass; }. std::vector<Float_t>& GetValues(); For a detailed explanation, please see the heading ""Avoid Duplication in const and Non-const Member Function,"" on p. 23, in Item 3 ""Use const whenever possible,"" in Effective C++, 3d ed by Scott Meyers, ISBN-13: 9780321334879.; http://stackoverflow.com/questions/123758/how-do-i-remove-code-duplication-between-similar-const-and-non-const-member-func. Float_t GetTarget(UInt_t itgt) const; { return fTargets.at(itgt); }. std::vector<Float_t>& GetTargets(); { return fTargets; }. const std::vector<Float_t>& GetTargets() const; { return fTargets; }. std::vector<Float_t>& GetSpectators(); { return fSpectators; }. const std::vector<Float_t>& GetSpectators() const; { return fSpectators; }. void SetWeight(Double_t w); { fWeight=w; }. void SetBoostWeight(Double_t w) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight=w; }. void ScaleBoostWeight(Double_t s) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight *= s; }. void SetClass(UInt_t t); { fClass=t; }. void SetDoNotBoost() const; { fDoNotBoost = kTRUE; }. void ClearDynamicVariables(); {}. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Event.html:6710,Clear,ClearDynamicVariables,6710,root/html602/TMVA__Event.html,https://root.cern,https://root.cern/root/html602/TMVA__Event.html,1,['Clear'],['ClearDynamicVariables']
Usability,"is static function is called, it sets the flag whether; events with negative event weight should be ignored in the; training, or not. void SetIgnoreNegWeightsInTraining(Bool_t ); when this static function is called, it sets the flag whether; events with negative event weight should be ignored in the; training, or not. Bool_t IsDynamic() const; accessors. {return fDynamic; }. Double_t GetOriginalWeight() const; { return fWeight; }. Double_t GetBoostWeight() const; { return TMath::Max(Double_t(0.0001),fBoostWeight); }. UInt_t GetClass() const; { return fClass; }. std::vector<Float_t>& GetValues(); For a detailed explanation, please see the heading ""Avoid Duplication in const and Non-const Member Function,"" on p. 23, in Item 3 ""Use const whenever possible,"" in Effective C++, 3d ed by Scott Meyers, ISBN-13: 9780321334879.; http://stackoverflow.com/questions/123758/how-do-i-remove-code-duplication-between-similar-const-and-non-const-member-func. Float_t GetTarget(UInt_t itgt) const; { return fTargets.at(itgt); }. std::vector<Float_t>& GetTargets(); { return fTargets; }. const std::vector<Float_t>& GetTargets() const; { return fTargets; }. std::vector<Float_t>& GetSpectators(); { return fSpectators; }. const std::vector<Float_t>& GetSpectators() const; { return fSpectators; }. void SetWeight(Double_t w); { fWeight=w; }. void SetBoostWeight(Double_t w) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight=w; }. void ScaleBoostWeight(Double_t s) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight *= s; }. void SetClass(UInt_t t); { fClass=t; }. void SetDoNotBoost() const; { fDoNotBoost = kTRUE; }. void ClearDynamicVariables(); {}. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Event.html:6718,Clear,ClearDynamicVariables,6718,root/html604/TMVA__Event.html,https://root.cern,https://root.cern/root/html604/TMVA__Event.html,1,['Clear'],['ClearDynamicVariables']
Usability,"is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate. If first derivatives are a problem, they can be calculated analytically inside \(\mbox{FCN}\) (see [howto:fcn]) or if this is not feasible, the user can try to improve the accuracy of M ’s numerical approximation by adjusting values of MnMachinePrecision and/or MnStrategy (see [api:epsmac] and [api:strategy]).; 6.1.2 \(\mbox{MINIMIZE}\); This is equivalent to \(\mbox{MIGRAD}\), except that if \(\mbox{MIGRAD}\) fails, it reverts to \(\mbox{SIMPLEX}\) and then calls \(\mbox{MIGRAD}\) again.; 6.1.3 \(\mbox{SCAN}\); This is not intended to minimize, and just scans the function, one parameter at a time. It does however retain the best value after each scan, so it does some sort of highly primitive minimization.; 6.1.4 \(\mbox{SIMPLEX}\); This genuine multidimensional minimization routine is usually much slower than \(\mbox{MIGRAD}\), but it does not use first derivatives, so it should not be so sensitive to the precision of the \(\mbox{FCN}\) calculations, and is even rather robust with respect to gross fluctuations in the function value. However, it gives no reliable information about parameter errors, no information whatsoever about parameter correlations, and worst of all cannot be expected to converge accurately to the minimum in a finite time. Its estimate of the expected distance to the minimum \(\mbox{EDM}\) is largely fantasy, so it would not even know if it did converge.; 6.2 Floating point precision; M figures out at execution time the machine precision [api:epsmac], and assumes that \(\mbox{FCN}\) provides about the same precision. That means not just the length of the numbers used and returned by \(\mbox{FCN}\), but the actual mathematical accuracy of the calculations. Section [install:epsmac] describes what to do if this is not the case.; 6.3 Parameter limits; Putting limits (absolute bounds) on the allowed values for a given parameter, causes M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:67299,SIMPL,SIMPLEX,67299,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['SIMPL'],['SIMPLEX']
Usability,"is the address of a pointer to an object of class; 2362/// classname. The class dictionary must be available (ClassDef; 2363/// in class header).; 2364///; 2365/// Note: See the comments in TBranchElement::SetAddress() for a more; 2366/// detailed discussion of the meaning of the addr parameter.; 2367///; 2368/// This option requires access to the library where the; 2369/// corresponding class is defined. Accessing one single data; 2370/// member in the object implies reading the full object.; 2371///; 2372/// By default the branch buffers are stored in the same file as the Tree.; 2373/// use TBranch::SetFile to specify a different file; 2374///; 2375/// IMPORTANT NOTE about branch names:; 2376///; 2377/// And in general, in case two or more master branches contain subbranches; 2378/// with identical names, one must add a ""."" (dot) character at the end; 2379/// of the master branch name. This will force the name of the subbranches; 2380/// to be of the form `master.subbranch` instead of simply `subbranch`.; 2381/// This situation happens when the top level object; 2382/// has two or more members referencing the same class.; 2383/// For example, if a Tree has two branches B1 and B2 corresponding; 2384/// to objects of the same class MyClass, one can do:; 2385/// ~~~ {.cpp}; 2386/// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; 2387/// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; 2388/// ~~~; 2389/// if MyClass has 3 members a,b,c, the two instructions above will generate; 2390/// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; 2391///; 2392/// bufsize is the buffer size in bytes for this branch; 2393/// The default value is 32000 bytes and should be ok for most cases.; 2394/// You can specify a larger value (e.g. 256000) if your Tree is not split; 2395/// and each entry is large (Megabytes); 2396/// A small value for bufsize is optimum if you intend to access; 2397/// the entries in the Tree randomly and your Tree is in split mode.; 2398///; 2399/// Use splitlevel < 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:94442,simpl,simply,94442,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"is tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:133906,simpl,simple,133906,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"is' title size. ;  ; virtual void SetXTitle (const char *title);  ; virtual void SetYTitle (const char *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:30347,Clear,Clear,30347,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,2,['Clear'],['Clear']
Usability,"isNodes,fVisLevel);; 2043 ModifiedPad();; 2044 }; 2045}; 2046 ; 2047////////////////////////////////////////////////////////////////////////////////; 2048/// Set top geometry volume as visible.; 2049 ; 2050void TGeoPainter::SetTopVisible(Bool_t vis); 2051{; 2052 if (fTopVisible == vis); 2053 return;; 2054 fTopVisible = vis;; 2055 ModifiedPad();; 2056}; 2057 ; 2058////////////////////////////////////////////////////////////////////////////////; 2059/// Set drawing mode :; 2060/// - option=0 (default) all nodes drawn down to vislevel; 2061/// - option=1 leaves and nodes at vislevel drawn; 2062/// - option=2 path is drawn; 2063 ; 2064void TGeoPainter::SetVisOption(Int_t option); 2065{; 2066 if ((fVisOption < 0) || (fVisOption > 4)) {; 2067 Warning(""SetVisOption"", ""wrong visualization option"");; 2068 return;; 2069 }; 2070 ; 2071 if (option == kGeoVisChanged) {; 2072 if (fVisLock) {; 2073 ClearVisibleVolumes();; 2074 fVisLock = kFALSE;; 2075 }; 2076 ModifiedPad();; 2077 return;; 2078 }; 2079 ; 2080 if (fTopVolume) {; 2081 TGeoAtt *att = (TGeoAtt *)fTopVolume;; 2082 att->SetAttBit(TGeoAtt::kVisBranch, kFALSE);; 2083 att->SetAttBit(TGeoAtt::kVisContainers, kFALSE);; 2084 att->SetAttBit(TGeoAtt::kVisOnly, kFALSE);; 2085 switch (option) {; 2086 case kGeoVisDefault: att->SetAttBit(TGeoAtt::kVisContainers, kTRUE); break;; 2087 case kGeoVisLeaves: break;; 2088 case kGeoVisOnly: att->SetAttBit(TGeoAtt::kVisOnly, kTRUE); break;; 2089 }; 2090 }; 2091 ; 2092 if (fVisOption == option); 2093 return;; 2094 fVisOption = option;; 2095 if (fVisLock) {; 2096 ClearVisibleVolumes();; 2097 fVisLock = kFALSE;; 2098 }; 2099 ModifiedPad();; 2100}; 2101 ; 2102////////////////////////////////////////////////////////////////////////////////; 2103/// Returns distance between point px,py on the pad an a shape.; 2104 ; 2105Int_t TGeoPainter::ShapeDistancetoPrimitive(const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const; 2106{; 2107 const Int_t inaxis = 7;; 2108 const Int_t maxdist = 5;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:67599,Clear,ClearVisibleVolumes,67599,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],['ClearVisibleVolumes']
Usability,"isable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:78078,clear,clearEvalErrorLog,78078,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,"isable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:79346,clear,clearEvalErrorLog,79346,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clearEvalErrorLog']
Usability,isableLighting. protected . Definition at line 75 of file TEveDigitSet.h. ◆ fEmitSignals. Bool_t TEveDigitSet::fEmitSignals. protected . Definition at line 78 of file TEveDigitSet.h. ◆ fFrame. TEveFrameBox* TEveDigitSet::fFrame. protected . Definition at line 70 of file TEveDigitSet.h. ◆ fHighlightFrame. Bool_t TEveDigitSet::fHighlightFrame. protected . Definition at line 74 of file TEveDigitSet.h. ◆ fHistoButtons. Bool_t TEveDigitSet::fHistoButtons. protected . Definition at line 76 of file TEveDigitSet.h. ◆ fLastDigit. DigitBase_t* TEveDigitSet::fLastDigit. protected . Definition at line 66 of file TEveDigitSet.h. ◆ fLastIdx. Int_t TEveDigitSet::fLastIdx. protected . The last / current digit added to collection. ; Definition at line 67 of file TEveDigitSet.h. ◆ fOwnIds. Bool_t TEveDigitSet::fOwnIds. protected . Definition at line 64 of file TEveDigitSet.h. ◆ fPalette. TEveRGBAPalette* TEveDigitSet::fPalette. protected . Definition at line 71 of file TEveDigitSet.h. ◆ fPlex. TEveChunkManager TEveDigitSet::fPlex. protected . Definition at line 65 of file TEveDigitSet.h. ◆ fRenderMode. ERenderMode_e TEveDigitSet::fRenderMode. protected . Definition at line 72 of file TEveDigitSet.h. ◆ fSelectViaFrame. Bool_t TEveDigitSet::fSelectViaFrame. protected . Definition at line 73 of file TEveDigitSet.h. ◆ fSingleColor. Bool_t TEveDigitSet::fSingleColor. protected . Definition at line 62 of file TEveDigitSet.h. ◆ fTooltipCBFoo. TooltipCB_foo TEveDigitSet::fTooltipCBFoo. protected . Additional function to call on secondary-select. ; Definition at line 80 of file TEveDigitSet.h. ◆ fValueIsColor. Bool_t TEveDigitSet::fValueIsColor. protected . Definition at line 61 of file TEveDigitSet.h. Libraries for TEveDigitSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveDigitSet.h; graf3d/eve/src/TEveDigitSet.cxx. TEveDigitSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveDigitSet.html:59842,Guid,Guide,59842,doc/master/classTEveDigitSet.html,https://root.cern,https://root.cern/doc/master/classTEveDigitSet.html,1,['Guid'],['Guide']
Usability,"isables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::RequiresCleanupBool_t RequiresCleanup(TObject &obj)Definition TROOT.h:386; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. corebaseincTROOT.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:53898,Guid,Guide,53898,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['Guid'],['Guide']
Usability,"ise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTraining ();  ; size_t testRepetitions () const;  how often is the test data tested ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; std::vector< double > m_ams;  ; double m_cutValue;  ; std::string m_fileNameNetConfig;  ; std::string m_fileNameResult;  ; std::vector< double > m_input;  ; std::vector< double > m_output;  ; std::vector< Pattern > * m_pResultPatternContainer;  ; size_t m_scaleToNumEvents;  ; std::vector< double > m_significances;  ; double m_sumOfBkgWeights;  ; double m_sumOfSigWeights;  ; std::vector< double > m_targets;  ; std::vector< double > m_weights;  ;  Public Attributes inherited from TMVA::DNN::Settings; size_t count_dE;  ; size_t count_E;  ; size_t count_mb_dE;  ; size_t count_mb_E;  ; double fLearningRate;  ; MinimizerType fMinimizerType;  ; double fMomentum;  ; int fRepetitions;  ; size_t m_batchSize;  mini-batch size ;  ; size_t m_convergenceCount;  ; size_t m_convergenceSteps;  number of steps without improvement to consider the DNN to have converged ;  ; std::vector< double > m_dropOut;  ; double m_dropRepetitions;  ; double m_factorWeightDecay;  ; size_t m_maxConvergenceCount;  ; double m_maxProgress;  current limits for the progress bar ;  ; double m_minError;  ; double m_minProgress;  current limits for the progress bar ;  ; EnumRegularization m_regularization;  ; size_t m_testRepetitions;  ; Timer m_timer;  timer for monitoring ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::Settings; std::shared_ptr< Monitoring > fMonitoring;  ; bool m_useMultithreading;  . #include <TMVA/NeuralNet.h>. Inheritance diagram for TMVA::DNN::ClassificationSettings:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:5912,progress bar,progress bar,5912,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,2,['progress bar'],['progress bar']
Usability,"iseActions(TClass *oldClass, Int_t version) overrideReturn the set of action necessary to stream in this collection member-wise coming from the old value...Definition TGenCollectionProxy.cxx:1747; TGenCollectionProxy::fReadMemberWiseTObjArray * fReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read)Definition TGenCollectionProxy.h:291; TGenCollectionProxy::DeleteItemvirtual void DeleteItem(Bool_t force, void *ptr) constCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:1350; TGenCollectionProxy::GetCollectionClassTClass * GetCollectionClass() const overrideReturn a pointer to the TClass representing the container.Definition TGenCollectionProxy.cxx:985; TGenCollectionProxy::fStagedStaged_t fStagedOptimization: Keep staged array once they were created.Definition TGenCollectionProxy.h:319; TGenCollectionProxy::fSizeMethod fSizeContainer accessors: size of container.Definition TGenCollectionProxy.h:302; TGenCollectionProxy::fClearMethod fClearMethod cache for container accessors: clear container.Definition TGenCollectionProxy.h:301; TGenCollectionProxy::fFeedFeedfunc_t fFeedContainer accessors: block feed.Definition TGenCollectionProxy.h:308; TGenCollectionProxy::GetFunctionCreateIteratorsCreateIterators_t GetFunctionCreateIterators(Bool_t read=kTRUE) overrideSee typedef void (*CreateIterators_t)(void *collection, void *&begin_arena, void *&end_arena); begin_...Definition TGenCollectionProxy.cxx:1607; TGenCollectionProxy::fValDiffint fValDiffOffset between two consecutive value_types (memory layout).Definition TGenCollectionProxy.h:316; TGenCollectionProxy::ReadBuffervirtual void ReadBuffer(TBuffer &b, void *obj)Definition TGenCollectionProxy.cxx:1419; TGenCollectionProxy::fProxyKeptProxies_t fProxyKeptOptimization: Keep proxies once they were created.Definition TGenCollectionProxy.h:318; TGenCollectionProxy::SizeofUInt_t Sizeof() const overrideReturn the sizeof the collection object.Definition TGenCollectionProxy.cxx:1014; TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:85503,clear,clear,85503,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['clear'],['clear']
Usability,"ision of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  vectorizedFit.C use it for fitting an histogram ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  FITS_tutorial7.COpen a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:106841,simpl,simple,106841,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['simpl'],['simple']
Usability,"isionTree(); destructor. void SetParentTreeInNodes(TMVA::Node* n = __null); descend a tree to find all its leaf nodes, fill max depth reached in the; tree at the same time. TMVA::DecisionTree* CreateFromXML(void* node, UInt_t tmva_Version_Code = 262656); re-create a new tree (decision tree or search tree) from XML. UInt_t BuildTree(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node = __null); building the decision tree by recursively calling the splitting of; one (root-) node into two daughter nodes (returns the number of nodes). void FillTree(const TMVA::DecisionTree::EventList& eventSample); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void FillEvent(const TMVA::Event& event, TMVA::DecisionTreeNode* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = __null); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(const TMVA::DecisionTree::EventConstList* validationSample = __null); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:10551,Clear,ClearTree,10551,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,2,"['Clear', 'clear']","['ClearTree', 'clear']"
Usability,"isionTree(); destructor. void SetParentTreeInNodes(TMVA::Node* n = __null); descend a tree to find all its leaf nodes, fill max depth reached in the; tree at the same time. TMVA::DecisionTree* CreateFromXML(void* node, UInt_t tmva_Version_Code = 262657); re-create a new tree (decision tree or search tree) from XML. UInt_t BuildTree(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node = __null); building the decision tree by recursively calling the splitting of; one (root-) node into two daughter nodes (returns the number of nodes). void FillTree(const TMVA::DecisionTree::EventList& eventSample); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void FillEvent(const TMVA::Event& event, TMVA::DecisionTreeNode* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = __null); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(const TMVA::DecisionTree::EventConstList* validationSample = __null); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTree.html:10559,Clear,ClearTree,10559,root/html604/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTree.html,2,"['Clear', 'clear']","['ClearTree', 'clear']"
Usability,"isk and call its Browse() method. ; If object with same name already exist in memory delete it (like TDirectory::Get() is doing), except when the key references a folder in which case we don't want to re-read the folder object since it might contain new objects not yet saved. ; Reimplemented from TObject.; Definition at line 51 of file THbookKey.cxx. ◆ Class(). static TClass * THbookKey::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THbookKey::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THbookKey::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 39 of file THbookKey.h. ◆ DeclFileName(). static const char * THbookKey::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file THbookKey.h. ◆ IsA(). TClass * THbookKey::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 39 of file THbookKey.h. ◆ IsFolder(). Bool_t THbookKey::IsFolder ; (; ); const. overridevirtual . an hbook key is not a folder ; Reimplemented from TObject.; Definition at line 75 of file THbookKey.cxx. ◆ Streamer(). void THbookKey::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THbookKey::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file THbookKey.h. Member Data Documentation. ◆ fDirectory. THbookFile* THbookKey::fDirectory. protected . Definition at line 29 of file THbookKey.h. ◆ fID. Int_t THbookKey::fID. protected . pointer to the Hbook file ; Definition at line 30 of file THbookKey.h. hist/hbook/inc/THbookKey.h; hist/hbook/src/THbookKey.cxx. THbookKey. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookKey.html:13730,Guid,Guide,13730,doc/master/classTHbookKey.html,https://root.cern,https://root.cern/doc/master/classTHbookKey.html,1,['Guid'],['Guide']
Usability,"isplacementVector3D.h. ◆ x(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::x ; (; ); const. inline . Definition at line 520 of file DisplacementVector3D.h. ◆ Y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Y ; (; ); const. inline . Cartesian Y, converting if necessary from internal coordinate system. ; Definition at line 286 of file DisplacementVector3D.h. ◆ y(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::y ; (; ); const. inline . Definition at line 521 of file DisplacementVector3D.h. ◆ Z(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Z ; (; ); const. inline . Cartesian Z, converting if necessary from internal coordinate system. ; Definition at line 291 of file DisplacementVector3D.h. ◆ z(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::z ; (; ); const. inline . Definition at line 522 of file DisplacementVector3D.h. Member Data Documentation. ◆ fCoordinates. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . CoordSystem ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::fCoordinates. private . Definition at line 535 of file DisplacementVector3D.h. ◆ fDimension. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . constexpr unsigned int ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::fDimension = CoordinateType::Dimension. staticconstexprprivate . Definition at line 536 of file DisplacementVector3D.h. math/genvector/inc/Math/GenVector/DisplacementVector3D.h. ROOTMathDisplacementVector3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:34605,Guid,Guide,34605,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,1,['Guid'],['Guide']
Usability,"isplayArgs::fPageContent. protected . ! HTML page content ; Definition at line 60 of file RWebDisplayArgs.hxx. ◆ fRedirectOutput. std::string ROOT::RWebDisplayArgs::fRedirectOutput. protected . ! filename where browser output should be redirected ; Definition at line 61 of file RWebDisplayArgs.hxx. ◆ fServer. THttpServer* ROOT::RWebDisplayArgs::fServer {nullptr}. protected . ! http server which handle all requests ; Definition at line 66 of file RWebDisplayArgs.hxx. ◆ fStandalone. bool ROOT::RWebDisplayArgs::fStandalone {true}. protected . ! indicates if browser should run isolated from other browser instances ; Definition at line 65 of file RWebDisplayArgs.hxx. ◆ fUrl. std::string ROOT::RWebDisplayArgs::fUrl. protected . ! URL to display ; Definition at line 58 of file RWebDisplayArgs.hxx. ◆ fUrlOpt. std::string ROOT::RWebDisplayArgs::fUrlOpt. protected . ! extra URL options, which are append to window URL ; Definition at line 71 of file RWebDisplayArgs.hxx. ◆ fWidgetKind. std::string ROOT::RWebDisplayArgs::fWidgetKind. protected . ! widget kind, used to identify that will be displayed in the web window ; Definition at line 62 of file RWebDisplayArgs.hxx. ◆ fWidth. int ROOT::RWebDisplayArgs::fWidth {0}. protected . ! custom window width, when not specified - used RWebWindow geometry ; Definition at line 67 of file RWebDisplayArgs.hxx. ◆ fX. int ROOT::RWebDisplayArgs::fX {-1}. protected . ! custom window x position, negative is default ; Definition at line 69 of file RWebDisplayArgs.hxx. ◆ fY. int ROOT::RWebDisplayArgs::fY {-1}. protected . ! custom window y position, negative is default ; Definition at line 70 of file RWebDisplayArgs.hxx. Libraries for ROOT::RWebDisplayArgs:. [legend]; The documentation for this class was generated from the following files:; gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx; gui/webdisplay/src/RWebDisplayArgs.cxx. ROOTRWebDisplayArgs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:24345,Guid,Guide,24345,doc/master/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html,1,['Guid'],['Guide']
Usability,"isplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes group, display mode = contours, 64 x 64 channels. . Height modes gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:32945,Simpl,Simple,32945,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"isplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes group, display mode = contours, 64 x 64 channels. . Height modes group, display mode = bars, 64 x 64 channels. . Height modes grou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:33006,Simpl,Simple,33006,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"iss {-1}. protected . ! set to the event # of the first miss. ; Definition at line 73 of file TTreeCache.h. ◆ fFirstTime. bool TTreeCache::fFirstTime {true}. protected . ! save the fact that we processes the first entry ; Definition at line 60 of file TTreeCache.h. ◆ fgLearnEntries. Int_t TTreeCache::fgLearnEntries = 100. staticprotected . number of entries used for learning mode ; Definition at line 65 of file TTreeCache.h. ◆ fIsLearning. bool TTreeCache::fIsLearning {true}. protected . ! true if cache is in learning mode ; Definition at line 54 of file TTreeCache.h. ◆ fIsManual. bool TTreeCache::fIsManual {false}. protected . ! true if cache is StopLearningPhase was used ; Definition at line 55 of file TTreeCache.h. ◆ fLastMiss. Long64_t TTreeCache::fLastMiss {-1}. protected . ! set to the event # of the last miss. ; Definition at line 74 of file TTreeCache.h. ◆ fLearnPrefilling. bool TTreeCache::fLearnPrefilling {false}. protected . ! true if we are in the process of executing LearnPrefill ; Definition at line 68 of file TTreeCache.h. ◆ fMissCache. std::unique_ptr<MissCache> TTreeCache::fMissCache. protected . ! Cache contents for misses ; Definition at line 105 of file TTreeCache.h. ◆ fNbranches. Int_t TTreeCache::fNbranches {0}. protected . ! Number of branches in the cache ; Definition at line 44 of file TTreeCache.h. ◆ fNextClusterStart. Long64_t TTreeCache::fNextClusterStart {-1}. protected . ! End+1 of the cluster(s) where the current content was picked out ; Definition at line 43 of file TTreeCache.h. ◆ fNMissReadMiss. Int_t TTreeCache::fNMissReadMiss {0}. protected . Number of blocks read and not found in either cache. ; Definition at line 48 of file TTreeCache.h. ◆ fNMissReadOk. Int_t TTreeCache::fNMissReadOk {0}. protected . Number of blocks read, not found in the primary cache, and found in the secondary cache. ; Definition at line 46 of file TTreeCache.h. ◆ fNMissReadPref. Int_t TTreeCache::fNMissReadPref {0}. protected . Number of blocks read into th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:54777,Learn,LearnPrefill,54777,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['Learn'],['LearnPrefill']
Usability,ist * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 52 of file TSelHandleDataSet.h. ◆ SetObject(). void TSelHandleDataSet::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 51 of file TSelHandleDataSet.h. ◆ SetOption(). void TSelHandleDataSet::SetOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 50 of file TSelHandleDataSet.h. ◆ SlaveBegin(). void TSelHandleDataSet::SlaveBegin ; (; TTree * ; ). overridevirtual . Init the type from the input parameters. ; Reimplemented from TSelector.; Definition at line 42 of file TSelHandleDataSet.cxx. ◆ SlaveTerminate(). void TSelHandleDataSet::SlaveTerminate ; (; void ; ). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 54 of file TSelHandleDataSet.h. ◆ Streamer(). void TSelHandleDataSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSelector. ◆ StreamerNVirtual(). void TSelHandleDataSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TSelHandleDataSet.h. ◆ Terminate(). void TSelHandleDataSet::Terminate ; (; void ; ). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 55 of file TSelHandleDataSet.h. ◆ Version(). Int_t TSelHandleDataSet::Version ; (; ); const. inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 44 of file TSelHandleDataSet.h. Member Data Documentation. ◆ fDestDir. TString TSelHandleDataSet::fDestDir. private . Definition at line 34 of file TSelHandleDataSet.h. ◆ fType. TPBHandleDSType* TSelHandleDataSet::fType. private . Definition at line 33 of file TSelHandleDataSet.h. proof/proofbench/inc/TSelHandleDataSet.h; proof/proofbench/src/TSelHandleDataSet.cxx. TSelHandleDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:18978,Guid,Guide,18978,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['Guid'],['Guide']
Usability,ist Atom_t Atom_t Atom_t Time_t ChangeProperties;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t child;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void chupx;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void chupy;  ; Option_t Option_t cindex;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t ClearWindow;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void clipboard;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize ClosePixmap;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void cmap;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exis,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:47357,Clear,ClearWindow,47357,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearWindow']
Usability,"ist of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGVProgressBar Class Reference. . Definition at line 122 of file TGProgressBar.h. Public Member Functions;  TGVProgressBar (const TGWindow *p, EBarType type, UInt_t h);  Simple constructor allow you to create either a standard progress bar, or a more fancy progress bar (fancy means: double sized border, white background and a bit wider to allow for text to be printed in the bar. ;  ;  TGVProgressBar (const TGWindow *p=nullptr, UInt_t w=kProgressBarTextWidth, UInt_t h=4, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Constructor. ;  ;  ~TGVProgressBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TClass * IsA () const override;  ; void Percent (Bool_t) override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical progress bar as a C++ statement(s) on output stream out. ;  ; void ShowPos (Bool_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:1244,progress bar,progress bar,1244,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"ist(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooStats::SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&RooStats::SimpleInterval::operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:4507,Simpl,SimpleInterval,4507,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__hist.html:7205,Guid,Guide,7205,doc/master/group__tutorial__hist.html,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html,1,['Guid'],['Guide']
Usability,"ist::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual voidDestroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQConnection.html:2160,Clear,Clear,2160,root/html602/TQConnection.html,https://root.cern,https://root.cern/root/html602/TQConnection.html,2,['Clear'],['Clear']
Usability,"ist; TGMdiGeometry MDI Geometry; TGMdiHorizontalWinResizer Horizontal Window Resizer; TGMdiMainFrame MDI main frame; TGMdiMenuBar MDI menu bar; TGMdiTitleBar MDI Title Bar; TGMdiTitleIcon MDI Title Icon; TGMdiVerticalWinResizer Vertical Window Resizer; TGMdiWinResizer Window Resizer; TGMenuBar Menu bar class; TGMenuEntry Menu entry class; TGMenuTitle Menu title class; TGMimeTypes Pool of mime type objects; TGMsgBox A message dialog box; TGNumberEntry Entry field widget for several numeric formats; TGNumberEntryField A text entry field used by a TGNumberEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:83421,Progress bar,Progress bar,83421,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['Progress bar'],['Progress bar']
Usability,"ist< T > IL);  ; template<typename V , unsigned M, typename = std::enable_if<std::is_convertible<V, bool>::value>> ; RVecN operator[] (const RVecN< V, M > &conds) const;  ; reference operator[] (size_type idx);  ; const_reference operator[] (size_type idx) const;  ;  Public Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html:4110,clear,clear,4110,doc/master/classROOT_1_1VecOps_1_1RVecN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html,1,['clear'],['clear']
Usability,"istOfPrimitives()->FirstLink();; 57 while (lnk) {; 58 lnk->GetObject()->Draw(lnk->GetOption());; 59 lnk = lnk->Next();; 60 }; 61~~~; 62 6. Using the TList's After() and Before() member functions:; 63~~~ {.cpp}; 64 TFree *idcur = this;; 65 while (idcur) {; 66 ...; 67 ...; 68 idcur = (TFree*)GetListOfFree()->After(idcur);; 69 }; 70~~~; 71Methods 3, 4 and 5 can also easily iterate backwards using either; 72a backward TIter (using argument kIterBackward) or by using; 73LastLink() and lnk->Prev() or by using the Before() member.; 74*/; 75 ; 76#include ""TList.h""; 77#include ""TClass.h""; 78#include ""TROOT.h""; 79#include ""TVirtualMutex.h""; 80#include ""TBuffer.h""; 81 ; 82#include <string>; 83 ; 84ClassImp(TList);; 85 ; 86////////////////////////////////////////////////////////////////////////////////; 87/// Delete the list. Objects are not deleted unless the TList is the; 88/// owner (set via SetOwner()).; 89 ; 90TList::~TList(); 91{; 92 Clear();; 93}; 94 ; 95////////////////////////////////////////////////////////////////////////////////; 96/// Add object at the beginning of the list.; 97 ; 98void TList::AddFirst(TObject *obj); 99{; 100 R__COLLECTION_WRITE_GUARD();; 101 ; 102 if (IsArgNull(""AddFirst"", obj)) return;; 103 ; 104 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 105 ; 106 if (!fFirst) {; 107 fFirst = NewLink(obj);; 108 fLast = fFirst;; 109 } else {; 110 auto t = NewLink(obj);; 111 t->fNext = fFirst;; 112 fFirst->fPrev = t;; 113 fFirst = t;; 114 }; 115 fSize++;; 116 Changed();; 117}; 118 ; 119////////////////////////////////////////////////////////////////////////////////; 120/// Add object at the beginning of the list and also store option.; 121/// Storing an option is useful when one wants to change the behaviour; 122/// of an object a little without having to create a complete new; 123/// copy of the object. This feature is used, for example, by the Draw(); 124/// method. It allows the same object to be drawn in different ways.; 125 ; 126void TList::AddFirst(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:2966,Clear,Clear,2966,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ist_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePointSet.html:3366,Clear,ClearStamps,3366,root/html530/TEvePointSet.html,https://root.cern,https://root.cern/root/html530/TEvePointSet.html,5,['Clear'],['ClearStamps']
Usability,"ist_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrack.html:2837,Clear,ClearStamps,2837,root/html530/TEveTrack.html,https://root.cern,https://root.cern/root/html530/TEveTrack.html,2,['Clear'],['ClearStamps']
Usability,"ist_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackProjected.html:2647,Clear,ClearStamps,2647,root/html530/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html530/TEveTrackProjected.html,2,['Clear'],['ClearStamps']
Usability,"ist_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveLine.html:2710,Clear,ClearStamps,2710,root/html530/TEveLine.html,https://root.cern,https://root.cern/root/html530/TEveLine.html,9,['Clear'],['ClearStamps']
Usability,"istogram is not cleared, but the error matrix is simply added.; Example: add all errors from background subtraction. unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr1"",0,kTRUE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr1"",0,kFALSE);; unfold.GetEmatrixSysBackgroundUncorr(bgrerror,""bgr2"",0,kFALSE);; unfold.GetEmatrixSysBackgroundCorr(bgrerror,""bgr2"",0,kFALSE);. There is a special function to get the total error:; unfold.GetEmatrixTotal(err_total);. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintNone); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:6108,Clear,Clear,6108,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['Clear'],['Clear']
Usability,"istribution. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMRG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMRG::BaseType. Definition at line 469 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMRG(). ROOT::Math::GSLRngMRG::GSLRngMRG ; (; ). Definition at line 463 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMRG:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngMRG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:5643,Guid,Guide,5643,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,1,['Guid'],['Guide']
Usability,"ists when this method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name); Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj); Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg); Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name); Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. TIterator* MakeIterator(Bool_t dir = kTRUE) const; Return an iterator over this list. RooLinkedListIter iterator(Bool_t dir = kTRUE) const; Return an iterator over this list. void Sort(Bool_t ascend = kTRUE); Sort elements of this list according to their; TObject::Compare() ranking via",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinkedList.html:7762,Clear,Clear,7762,root/html526/RooLinkedList.html,https://root.cern,https://root.cern/root/html526/RooLinkedList.html,1,['Clear'],['Clear']
Usability,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Protected Member Functions;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:3552,Clear,ClearStyle,3552,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html,1,['Clear'],['ClearStyle']
Usability,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Public Attributes; RAttrBorder border {this, ""border""};  ! border attributes ;  . Protected Member Functions; std::unique_ptr< RDisplayItem > Display (const RDisplayContext &) final;  Create pad display item. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:4011,Clear,ClearStyle,4011,doc/master/classROOT_1_1Experimental_1_1RPad.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html,1,['Clear'],['ClearStyle']
Usability,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Static Public Member Functions; static std::shared_ptr< RCanvas > Create (const std::string &title);  Create new canvas instance. ;  ; static const std::vector< std::shared_ptr< RCanvas > > GetCanvases ();  Returns list of created canvases. ;  ; static void ReleaseHeldCanvases ();  Release list of held canvases pointers If no other shared pointers exists on the canvas, object will be destroyed. ;  . Private Member Functions;  RCanvas (const RCanvas &)=delete;  Disable copy construction for now. ;  ; uint64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment for now. ;  . Private Attributes; int fHeight {0};  Height of the canvas in pixels. ;  ; Version_t fModified {1};  Modify counter, incremented every time canvas is changed. ;  ; std::unique_ptr< Internal::RVirtualCanv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:5764,Clear,ClearStyle,5764,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['Clear'],['ClearStyle']
Usability,"ist poi ();  ; xRooHypoPoint & point (size_t i);  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; RooStats::HypoTestInverterResult * result ();  ; int scan (const char *type, double nSigma, double relUncert=0.1);  ; int scan (const char *type, size_t nPoints, double low=std::numeric_limits< double >::quiet_NaN(), double high=std::numeric_limits< double >::quiet_NaN(), const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ; int scan (const char *type=""cls"", const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:2961,Clear,Clear,2961,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,1,['Clear'],['Clear']
Usability,"ist poi ();  ; xRooHypoPoint & point (size_t i);  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; RooStats::HypoTestInverterResult * result ();  ; int scan (const char *type, double nSigma, double relUncert=0.1);  ; int scan (const char *type, size_t nPoints, double low=std::numeric_limits< double >::quiet_NaN(), double high=std::numeric_limits< double >::quiet_NaN(), const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ; int scan (const char *type=""cls"", const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:2746,Clear,Clear,2746,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,1,['Clear'],['Clear']
Usability,"it = kTRUE . ). virtual . Set the numeric value (time format). ; In case of kNESMinSecCent, pass the centiseconds in the hour variable. ; Definition at line 1214 of file TGNumberEntry.cxx. ◆ Streamer(). void TGNumberEntryField::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGNumberEntryField::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file TGNumberEntry.h. ◆ TextChanged(). void TGNumberEntryField::TextChanged ; (; const char * ; text = nullptr). overridevirtual . Text has changed message. ; Reimplemented from TGTextEntry.; Definition at line 1769 of file TGNumberEntry.cxx. Member Data Documentation. ◆ fNeedsVerification. Bool_t TGNumberEntryField::fNeedsVerification. protected . Needs verification of input. ; Definition at line 69 of file TGNumberEntry.h. ◆ fNumAttr. EAttribute TGNumberEntryField::fNumAttr. protected . Number attribute. ; Definition at line 71 of file TGNumberEntry.h. ◆ fNumLimits. ELimit TGNumberEntryField::fNumLimits. protected . Limit attributes. ; Definition at line 72 of file TGNumberEntry.h. ◆ fNumMax. Double_t TGNumberEntryField::fNumMax. protected . Upper limit. ; Definition at line 74 of file TGNumberEntry.h. ◆ fNumMin. Double_t TGNumberEntryField::fNumMin. protected . Lower limit. ; Definition at line 73 of file TGNumberEntry.h. ◆ fNumStyle. EStyle TGNumberEntryField::fNumStyle. protected . Number style. ; Definition at line 70 of file TGNumberEntry.h. ◆ fStepLog. Bool_t TGNumberEntryField::fStepLog. protected . Logarithmic steps for increase? ; Definition at line 75 of file TGNumberEntry.h. Libraries for TGNumberEntryField:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGNumberEntry.h; gui/gui/src/TGNumberEntry.cxx. TGNumberEntryField. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:51872,Guid,Guide,51872,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['Guid'],['Guide']
Usability,"it package, which remains one of the fastest tools for neural networks studies.; 5.12.2 The MLP; The multilayer perceptron is a simple feed-forward network with the following structure showed on the left. It is made of neurons characterized by a bias and weighted links in between - let’s call those links synapses. The input neurons receive the inputs, normalize them and forward them to the first hidden layer. Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers.; Such a structure is very useful because of two theorems:; 1- A linear combination of sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each individual output neuron. In all methods implemented in this library, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, one can express this derivative as the product of the local partial derivative by the weighted sum of the outputs derivatives (for a neuron) or as the product of the input value with the local partial derivative of the output neuron (for a synapse). This computation is called “back-propagation of the errors”. Six learning methods are implemented.; 5.12.3.1 Stochastic Minimization; This is the most trivial learning method. The Robbins-Monro stochastic approximation is applied to multilayer perceptrons. The weights are updated after each example according to the formula:; \[; w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t); \]; with:; \[; \Delta w_{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:231837,Learn,Learning,231837,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Learn', 'learn']","['Learning', 'learning']"
Usability,"it parameters will apply to next fit operation. Note that setConstant flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist ; Reimplemented from RooAbsMCStudyModule.; Definition at line 164 of file UpperLimitMCSModule.cxx. ◆ Streamer(). void RooStats::UpperLimitMCSModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMCStudyModule. ◆ StreamerNVirtual(). void RooStats::UpperLimitMCSModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file UpperLimitMCSModule.h. Member Data Documentation. ◆ _cl. double RooStats::UpperLimitMCSModule::_cl. private . Definition at line 51 of file UpperLimitMCSModule.h. ◆ _data. RooDataSet* RooStats::UpperLimitMCSModule::_data. private . Summary dataset to store results. ; Definition at line 50 of file UpperLimitMCSModule.h. ◆ _model. RooAbsPdf* RooStats::UpperLimitMCSModule::_model. private . Definition at line 52 of file UpperLimitMCSModule.h. ◆ _parName. std::string RooStats::UpperLimitMCSModule::_parName. private . Name of Nsignal parameter. ; Definition at line 45 of file UpperLimitMCSModule.h. ◆ _plc. RooStats::ProfileLikelihoodCalculator* RooStats::UpperLimitMCSModule::_plc. private . Definition at line 46 of file UpperLimitMCSModule.h. ◆ _poi. const RooArgSet* RooStats::UpperLimitMCSModule::_poi. private . parameters of interest ; Definition at line 49 of file UpperLimitMCSModule.h. ◆ _ul. RooRealVar* RooStats::UpperLimitMCSModule::_ul. private . Definition at line 47 of file UpperLimitMCSModule.h. Libraries for RooStats::UpperLimitMCSModule:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/UpperLimitMCSModule.h; roofit/roostats/src/UpperLimitMCSModule.cxx. RooStatsUpperLimitMCSModule. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:19420,Guid,Guide,19420,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['Guid'],['Guide']
Usability,it tutorial macro #903 ;  rf903_numintcache.py;  ► roostats;  CreateExampleFile.C;  FourBinInstructional.C This example is a generalization of the on/off problem ;  HybridInstructional.C Example demonstrating usage of HybridCalcultor ;  HybridOriginalDemo.C Example on how to use the HybridCalculatorOriginal class ;  HybridStandardForm.C A hypothesis testing example based on number counting with background uncertainty ;  IntervalExamples.C Example showing confidence intervals with four techniques ;  JeffreysPriorDemo.C tutorial demonstrating and validates the RooJeffreysPrior class ;  ModelInspector.CRooStats Model Inspector ;  MultivariateGaussianTest.C Comparison of MCMC and PLC in a multi-variate gaussian problem ;  NuMuToNuE_Oscillation.cxx;  NuMuToNuE_Oscillation.h;  OneSidedFrequentistUpperLimitWithBands.C OneSidedFrequentistUpperLimitWithBands ;  rs101_limitexample.C 'Limit Example' RooStats tutorial macro #101 This tutorial shows an example of creating a simple model for a number counting experiment with uncertainty on both the background rate and signal efficiency ;  rs102_hypotestwithshapes.C rs102_hypotestwithshapes for RooStats project ;  rs301_splot.C SPlot tutorial ;  rs401c_FeldmanCousins.C Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique ;  rs401d_FeldmanCousins.C 'Neutrino Oscillation Example from Feldman & Cousins' ;  rs601_HLFactoryexample.C 'High Level Factory Example' RooStats tutorial macro #601 ;  rs602_HLFactoryCombinationexample.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs603_HLFactoryElaborateExample.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Numb,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:159485,simpl,simple,159485,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"it(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetFillAttributes()TAttFillvirtual; SetFillColor(Color_t fcolor)TAttFillinlinevirtual; SetFillColorAlpha(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetLineAttributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetToolTipText(const char *text, Long_t delayms=1000)TBoxvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX1(Double_t x1)TBoxinlinevirtual; SetX2(Double_t x2)TBoxinlinevirtual; SetY1(Double_t y1)TBoxinlinevirtual; SetY2(Double_t y2)TBoxinlinevirtual; Streamer(TBuffer &) overrideTBoxvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TBoxinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TBox()TBox; TBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBox; TBox(const TBox &box)TBox; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TBox() overrideTBox; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox-members.html:8148,Guid,Guide,8148,doc/master/classTBox-members.html,https://root.cern,https://root.cern/doc/master/classTBox-members.html,1,['Guid'],['Guide']
Usability,"it).Definition TGMenu.cxx:1782; TGPopupMenu::DisableEntryvirtual void DisableEntry(Int_t id)Disable entry (disabled entries appear in a sunken relieve).Definition TGMenu.cxx:1724; TGPopupMenu::UnCheckEntryvirtual void UnCheckEntry(Int_t id)Uncheck menu entry (i.e. remove check mark).Definition TGMenu.cxx:1807; TGPopupMenu::Associatevirtual void Associate(const TGWindow *w)Definition TGMenu.h:206; TGPopupMenu::AddSeparatorvirtual void AddSeparator(TGMenuEntry *before=nullptr)Add a menu separator to the menu.Definition TGMenu.cxx:1060; TGPopupMenu::AddEntryvirtual void AddEntry(TGHotString *s, Int_t id, void *ud=nullptr, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr)Add a menu entry.Definition TGMenu.cxx:990; TGProgressBar::SetPositionvoid SetPosition(Float_t pos)Set progress position between [min,max].Definition TGProgressBar.cxx:92; TGProgressBar::SetFillTypevoid SetFillType(EFillType type)Set fill type.Definition TGProgressBar.cxx:136; TGProgressBar::SetBarColorvirtual void SetBarColor(Pixel_t color)Set progress bar color.Definition TGProgressBar.cxx:156; TGProgressBar::kBlockFill@ kBlockFillDefinition TGProgressBar.h:23; TGSelectBoxThis class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data memb...Definition TTVLVContainer.h:157; TGSelectBox::EditedEntryTTVLVEntry * EditedEntry()Definition TTVLVContainer.h:181; TGSelectBox::InsertTextvoid InsertText(const char *text)Insert text in text entry.Definition TTVLVContainer.cxx:825; TGSelectBox::GrabPointervoid GrabPointer()Just focus the cursor inside.Definition TTVLVContainer.cxx:755; TGSelectBox::SetLabelvoid SetLabel(const char *title)Set label of selection box.Definition TTVLVContainer.cxx:769; TGSelectBox::SetEntryvoid SetEntry(TTVLVEntry *entry)Connect one entry.Definition TTVLVContainer.cxx:814; TGSelectBox::GetInstancestatic TGSelectBox * GetInstance()Return the pointer to the instantiated singleton.Definition TTVLVContainer.cxx:747; TGStatusBarProvides a StatusBar w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:127437,progress bar,progress bar,127437,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"it-compiling features of RDataFrame to define data using C++ code in a Python script.; ; import ROOT; ; ## We will inefficiently calculate an approximation of pi by generating; ## some data and doing very simple filtering and analysis on it.; ; ## We start by creating an empty dataframe where we will insert 10 million; ## random points in a square of side 2.0 (that is, with an inscribed unit; ## circle).; ; npoints = 10000000; df = ROOT.RDataFrame(npoints); ; ## Define what data we want inside the dataframe. We do not need to define p; ## as an array, but we do it here to demonstrate how to use jitting with RDataFrame.; ; pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)"") \; .Define(""p"", ""std::array<double, 2> v{x, y}; return v;"") \; .Define(""r"", ""double r2 = 0.0; for (auto&& w : p) r2 += w*w; return sqrt(r2);""); ; ## Now we have a dataframe with columns x, y, p (which is a point based on x; ## and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; ## need to know how many of our data points fall inside the circle of radius; ## one compared with the total number of points. The ratio of the areas is; ##; ## A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; ##; ## Therefore, we can approximate pi with four times the number of points inside; ## the unit circle over the total number of points:; ; incircle = pidf.Filter(""r <= 1.0"").Count().GetValue(); ; pi_approx = 4.0 * incircle / npoints; ; print(""pi is approximately equal to %g"" % (pi_approx)); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; pi is approximately equal to 3.14146; DateOctober 2017 ; AuthorGuilherme Amadio (CERN) ; Definition in file df012_DefinesAndFiltersAsStrings.py. tutorialsdataframedf012_DefinesAndFiltersAsStrings.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8py.html:2308,Guid,Guide,2308,doc/master/df012__DefinesAndFiltersAsStrings_8py.html,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8py.html,1,['Guid'],['Guide']
Usability,it. private . Memory of the minimum when first initialized. ; Definition at line 40 of file TParallelCoordVar.h. ◆ fNbins. Int_t TParallelCoordVar::fNbins. private . Number of bins in fHistogram. ; Definition at line 32 of file TParallelCoordVar.h. ◆ fNentries. Long64_t TParallelCoordVar::fNentries. private . Number of stored entries values. ; Definition at line 35 of file TParallelCoordVar.h. ◆ fParallel. TParallelCoord* TParallelCoordVar::fParallel. private . Pointer to the TParallelCoord which owns the TParallelCoordVar. ; Definition at line 51 of file TParallelCoordVar.h. ◆ fQua1. Double_t TParallelCoordVar::fQua1. private . First quantile (Q1). ; Definition at line 46 of file TParallelCoordVar.h. ◆ fQua3. Double_t TParallelCoordVar::fQua3. private . Third quantile (Q3). ; Definition at line 47 of file TParallelCoordVar.h. ◆ fRanges. TList* TParallelCoordVar::fRanges. private . List of the TParallelRange owned by TParallelCoordVar. ; Definition at line 50 of file TParallelCoordVar.h. ◆ fVal. Double_t* TParallelCoordVar::fVal. private . ![fNentries] Entries values for the variable. ; Definition at line 49 of file TParallelCoordVar.h. ◆ fX1. Double_t TParallelCoordVar::fX1. private . x1 coordinate of the axis. ; Definition at line 36 of file TParallelCoordVar.h. ◆ fX2. Double_t TParallelCoordVar::fX2. private . x2 coordinate of the axis. ; Definition at line 37 of file TParallelCoordVar.h. ◆ fY1. Double_t TParallelCoordVar::fY1. private . y1 coordinate of the axis. ; Definition at line 38 of file TParallelCoordVar.h. ◆ fY2. Double_t TParallelCoordVar::fY2. private . y2 coordinate of the axis. ; Definition at line 39 of file TParallelCoordVar.h. Libraries for TParallelCoordVar:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TParallelCoordVar.h; tree/treeviewer/src/TParallelCoordVar.cxx. TParallelCoordVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:34611,Guid,Guide,34611,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['Guid'],['Guide']
Usability,"it.cxx. ◆ ShortType(). string TClassEdit::ShortType ; (; const char * ; typeDesc, . int ; mode . ). Return the absolute type of typeDesc. ; E.g.: typeDesc = ""class const volatile TNamed**"", returns ""TNamed**"". if (mode&1) remove last ""*""s returns ""TNamed"" if (mode&2) remove default allocators from STL containers if (mode&4) remove all allocators from STL containers if (mode&8) return inner class of stl container. list<innerClass> if (mode&16) return deapest class of stl container. vector<list<deapest>> if (mode&kDropAllDefault) remove default template arguments ; Definition at line 1305 of file TClassEdit.cxx. ◆ SplitFunction(). bool TClassEdit::SplitFunction ; (; std::string_view ; decl, . TClassEdit::FunctionSplitInfo & ; result . ). Split a function declaration into its different parts. ; Definition at line 2242 of file TClassEdit.cxx. ◆ STLArgs(). int TClassEdit::STLArgs ; (; int ; kind). Return number of arguments for STL container before allocator. ; Definition at line 575 of file TClassEdit.cxx. ◆ STLKind(). ROOT::ESTLType TClassEdit::STLKind ; (; std::string_view ; type). Converts STL container name to number. ; vector -> 1, etc.. If len is greater than 0, only look at that many characters in the string. ; Definition at line 528 of file TClassEdit.cxx. ◆ UnderlyingIsSTLCont(). ROOT::ESTLType TClassEdit::UnderlyingIsSTLCont ; (; std::string_view ; type). Return the type of STL collection, if any, that is the underlying type of the given type. ; Namely return the value of IsSTLCont after stripping pointer, reference and constness from the type. UnderlyingIsSTLCont(""vector<int>*"") == IsSTLCont(""vector<int>"") See TClassEdit::IsSTLCont; type : type name: vector<list<classA,allocator>,allocator>* result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ; Definition at line 1359 of file TClassEdit.cxx. TClassEdit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:16294,Guid,Guide,16294,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,1,['Guid'],['Guide']
Usability,"it.cxx:854; TClassEdit::kDropTrailStar@ kDropTrailStarDefinition TClassEdit.h:77; TClassEdit::kDropStlDefault@ kDropStlDefaultDefinition TClassEdit.h:82; TClassEdit::IsSTLBitsetbool IsSTLBitset(const char *type)Return true is the name is std::bitset<number> or bitset<number>Definition TClassEdit.cxx:1340; TMVA::kNN::FindUInt_t Find(std::list< std::pair< const Node< T > *, Float_t > > &nlist, const Node< T > *node, const T &event, UInt_t nfind); TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; v@ vDefinition rootcling_impl.cxx:3699; whatstatic const char * whatDefinition stlLoader.cc:5; TClassEdit::TSplitTypeDefinition TClassEdit.h:138; TClassEdit::TSplitType::IsTemplatebool IsTemplate()Check if the type is a template.Definition TClassEdit.cxx:519; TClassEdit::TSplitType::fElementsstd::vector< std::string > fElementsDefinition TClassEdit.h:141; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass__GetCallingNewRAIIDefinition TClass.cxx:273; TClass__GetCallingNewRAII::fCurrentValueTClass::ENewType & fCurrentValueDefinition TClass.cxx:274; TClass__GetCallingNewRAII::TClass__GetCallingNewRAIITClass__GetCallingNewRAII(TClass::ENewType newvalue)Definition TClass.cxx:277; TClass__GetCallingNewRAII::fOldValueTClass::ENewType fOldValueDefinition TClass.cxx:275; TClass__GetCallingNewRAII::~TClass__GetCallingNewRAII~TClass__GetCallingNewRAII()Definition TClass.cxx:284; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. coremetasrcTClass.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:381954,Guid,Guide,381954,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Guid'],['Guide']
Usability,"it::FitResult::fNCalls. protected . number of function calls ; Definition at line 347 of file FitResult.h. ◆ fNdf. unsigned int ROOT::Fit::FitResult::fNdf. protected . number of degree of freedom ; Definition at line 346 of file FitResult.h. ◆ fNFree. unsigned int ROOT::Fit::FitResult::fNFree. protected . number of fit free parameters (total parameters are in size of parameter vector) ; Definition at line 345 of file FitResult.h. ◆ fNormalized. bool ROOT::Fit::FitResult::fNormalized. protected . flag for indicating is errors are normalized ; Definition at line 344 of file FitResult.h. ◆ fObjFunc. std::shared_ptr<ROOT::Math::IMultiGenFunction> ROOT::Fit::FitResult::fObjFunc. protected . ! objective function used for fitting ; Definition at line 354 of file FitResult.h. ◆ fParamBounds. std::vector<std::pair<double,double> > ROOT::Fit::FitResult::fParamBounds. protected . parameter bounds ; Definition at line 359 of file FitResult.h. ◆ fParams. std::vector<double> ROOT::Fit::FitResult::fParams. protected . parameter values. Size is total number of parameters ; Definition at line 360 of file FitResult.h. ◆ fParNames. std::vector<std::string> ROOT::Fit::FitResult::fParNames. protected . parameter names (only with FCN only fits, when fFitFunc=0) ; Definition at line 366 of file FitResult.h. ◆ fStatus. int ROOT::Fit::FitResult::fStatus. protected . minimizer status code ; Definition at line 348 of file FitResult.h. ◆ fVal. double ROOT::Fit::FitResult::fVal. protected . minimum function value ; Definition at line 350 of file FitResult.h. ◆ fValid. bool ROOT::Fit::FitResult::fValid. protected . flag for indicating valid fit ; Definition at line 343 of file FitResult.h. Libraries for ROOT::Fit::FitResult:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitResult.h; math/mathcore/src/FitResult.cxx. ROOTFitFitResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:28884,Guid,Guide,28884,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['Guid'],['Guide']
Usability,it;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzles.cpp;  ulp.h;  unittest.h;  utils.cpp;  vectormemoryhelper.h;  makeTest.py;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58768,undo,undomacros,58768,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['undo'],['undomacros']
Usability,"itRelative (ULong_t ms);  Wait to be signaled or till the timer times out. ;  ; Int_t Wait ();  Wait to be signaled. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondition.html:1853,Clear,Clear,1853,doc/master/classTCondition.html,https://root.cern,https://root.cern/doc/master/classTCondition.html,1,['Clear'],['Clear']
Usability,"itThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; (MyPdfV3) An instance of MyPdfV3.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pdf_over_pdf_Int[y]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pdf_over_pdf_Int[y]_pdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(GenPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(GenPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(GenPdf_over_GenPdf_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_GenPdf_over_GenPdf_Int[x]_GenPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(GenPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(GenPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf104_classfactory.C. tutorialsroofitrf104_classfactory.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf104__classfactory_8C.html:9699,Guid,Guide,9699,doc/master/rf104__classfactory_8C.html,https://root.cern,https://root.cern/doc/master/rf104__classfactory_8C.html,1,['Guid'],['Guide']
Usability,"itance tree; For an example of obj->Inspect(), see “Inspecting Objects”.; 15.1.2 Collections; To store an object in a ROOT collection, it must be a descendent of TObject. This is convenient if you want to store objects of different classes in the same collection and execute the method of the same name on all members of the collection. For example, the list of graphics primitives are in a ROOT collection called TList. When the canvas is drawn, the Paint method is executed on the entire collection. Each member may be a different class, and if the Paint method is not implemented, TObject::Paint will be executed.; 15.1.3 Input/Output; The TObject::Write method is the interface to the ROOT I/O system. It streams the object into a buffer using the Streamer method. It supports cycle numbers and automatic schema evolution. See “Input/Output”.; 15.1.4 Paint/Draw; These graphics methods are defaults; their implementation in TObject does not use the graphics subsystem. The TObject::Draw method is simply a call to AppendPad. The Paint method is empty. The default is provided so that one can call Paint in a collection. The method GetDrawOption returns the draw option that was used when the object was drawn on the canvas. This is especially relevant with histograms and graphs.; 15.1.5 Clone/DrawClone; Two useful methods are Clone and DrawClone. The Clone method takes a snapshot of the object with the Streamer and creates a new object. The DrawClone method does the same thing and in addition draws the clone.; 15.1.6 Browse; This method is called if the object is browse-able and is to be displayed in the object browser. For example the TTree implementation of Browse, calls the Browse method for each branch. The TBranch::Browse method displays the name of each leaf. For the object’s Browse method to be called, the IsFolder() method must be overridden to return true. This does not mean it has to be a folder, it just means that it is browse-able.; 15.1.7 SavePrimitive; This method is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:807271,simpl,simply,807271,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"ite; kWriteDelete; };. protected:. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor. TBenchmark(const TBenchmark& ); Copy constructor. TBenchmark& operator=(const TBenchmark& ); Assignment operator. ~TBenchmark(); Benchmark destructor. Int_t GetBench(const char* name) const; Returns index of Benchmark name. Float_t GetCpuTime(const char* name); Returns Cpu time used by Benchmark name. Float_t GetRealTime(const char* name); Returns Realtime used by Benchmark name. void Print(Option_t* name = """") const; Prints parameters of Benchmark name. void Reset(); Reset all Benchmarks. void Show(const char* name); Stops Benchmark name and Prints results. void Start(const char* name); Starts Benchmark with the specified name. An independent timer (see class TStopwatch) is started.; The name of the benchmark is entered into the list of benchmarks.; Benchmark can be stopped via TBenchmark::Stop().; Results can be printed via TBenchmark::Print().; TBenchmark::Show() can be used to stop benchmark and print results.; If name is an already existing benchmark, timing will resume.; A summary of all benchmarks can be seen via TBenchmark::Summary(). void Stop(const char* name); Terminates Benchmark with specified name. void Summary(Float_t& rt, Float_t& cp); Prints a summary of all benchmarks. » Author: Rene Brun 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:7132,resume,resume,7132,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,1,['resume'],['resume']
Usability,"iteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMap (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  TMap ctor. See THashTable for a description of the arguments. ;  ; virtual ~TMap ();  TMap dtor. ;  ; void Add (TObject *key, TObject *value);  Add a (key,value) pair to the map. ;  ; void Add (TObject *obj) override;  This function may not be used (but we need to provide it since it is a pure virtual in TCollection). ;  ; Float_t AverageCollisions () const;  Return the ratio of entries vs occupied slots. ;  ; Int_t Capacity () const;  Return number of slots in the hashtable. ;  ; void Clear (Option_t *option="""") override;  Remove all (key,value) pairs from the map. ;  ; Int_t Collisions (const char *keyname) const;  Returns the number of collisions for a key with a certain name (i.e. ;  ; Int_t Collisions (TObject *key) const;  Returns the number of collisions for a key (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all (key,value) pairs from the map AND delete the keys when they are allocated on the heap. ;  ; void DeleteAll ();  Remove all (key,value) pairs from the map AND delete the keys AND values when they are allocated on the heap. ;  ; Bool_t DeleteEntry (TObject *key);  Remove (key,value) pair with key from the map. ;  ; void DeleteKeys ();  ; void DeleteValues ();  Remove all (key,value) pairs from the map AND delete the values when they are allocated on the heap. ;  ; TObject * FindObject (const char *keyname) const override;  Check if a (key,value) pair exists with keyname as name of the key. ;  ; TObject * FindObject (const TObject *key) const override;  Check if a (key,v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMap.html:2172,Clear,Clear,2172,doc/master/classTMap.html,https://root.cern,https://root.cern/doc/master/classTMap.html,1,['Clear'],['Clear']
Usability,"iteFrame. ◆ StreamerNVirtual(). void TGSplitFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TGSplitFrame.h. ◆ SwallowBack(). void TGSplitFrame::SwallowBack ; (; ). Swallow back the child frame previously extracted, and close its parent (transient frame). ; Definition at line 631 of file TGSplitFrame.cxx. ◆ SwitchFrames(). void TGSplitFrame::SwitchFrames ; (; TGFrame * ; frame, . TGCompositeFrame * ; dest, . TGFrame * ; prev . ). static . Switch (exchange) two frames. ; frame is the source, dest is the destination (the new parent) prev is the frame that has to be exchanged with the source (the one actually in the destination) ; Definition at line 659 of file TGSplitFrame.cxx. ◆ SwitchToMain(). void TGSplitFrame::SwitchToMain ; (; ). Switch the actual embedded frame to the main (first) split frame. ; Definition at line 699 of file TGSplitFrame.cxx. ◆ Undocked(). void TGSplitFrame::Undocked ; (; TGFrame * ; frame). Emit Undocked() signal. ; Definition at line 711 of file TGSplitFrame.cxx. ◆ UnSplit(). void TGSplitFrame::UnSplit ; (; const char * ; which). Close (unmap and remove from the list of frames) the frame contained in this split frame. ; Definition at line 720 of file TGSplitFrame.cxx. ◆ VSplit(). void TGSplitFrame::VSplit ; (; UInt_t ; w = 0). virtual . Vertically split the frame. ; Definition at line 452 of file TGSplitFrame.cxx. Member Data Documentation. ◆ fFirst. TGSplitFrame* TGSplitFrame::fFirst. protected . Pointer to the first child (if any) ; Definition at line 87 of file TGSplitFrame.h. ◆ fFrame. TGFrame* TGSplitFrame::fFrame. protected . Pointer to the embedded frame (if any) ; Definition at line 84 of file TGSplitFrame.h. ◆ fHRatio. Float_t TGSplitFrame::fHRatio. protected . Height ratio between the first child and this. ; Definition at line 91 of file TGSplitFrame.h. ◆ fSecond. TGSplitFrame* TGSplitFrame::fSecond. protected . Pointer to the second child (if any) ; Definition at line 88",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:41047,Undo,Undocked,41047,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,1,['Undo'],['Undocked']
Usability,"iteFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAlphaColorSelected(ULong_t)SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidColorSelected(Pixel_t)SIGNAL ; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGColorDialog.html:2267,Clear,Clear,2267,root/html534/TGColorDialog.html,https://root.cern,https://root.cern/root/html534/TGColorDialog.html,3,['Clear'],['Clear']
Usability,"iteFrameInMainFrame & TEveCompositeFrameInMainFrame::operator= ; (; const TEveCompositeFrameInMainFrame & ; ). private . ◆ SetOriginalSlotAndContainer(). void TEveCompositeFrameInMainFrame::SetOriginalSlotAndContainer ; (; TEveWindow * ; slot, . TEveWindow * ; container . ). Set the container where to return the contained window on destruction. ; Definition at line 425 of file TEveWindow.cxx. ◆ SomeWindowClosed(). void TEveCompositeFrameInMainFrame::SomeWindowClosed ; (; TEveWindow * ; w). Slot called when a window is closed ... we check that this was not our original container. ; Definition at line 441 of file TEveWindow.cxx. ◆ Streamer(). void TEveCompositeFrameInMainFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TEveCompositeFrame. ◆ StreamerNVirtual(). void TEveCompositeFrameInMainFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TEveWindow.h. ◆ WindowNameChanged(). void TEveCompositeFrameInMainFrame::WindowNameChanged ; (; const TString & ; name). overridevirtual . Update widgets using window's name or title. ; Reimplemented from TEveCompositeFrame.; Definition at line 396 of file TEveWindow.cxx. Member Data Documentation. ◆ fMainFrame. TGMainFrame* TEveCompositeFrameInMainFrame::fMainFrame. protected . Definition at line 118 of file TEveWindow.h. ◆ fOriginalContainer. TEveWindow* TEveCompositeFrameInMainFrame::fOriginalContainer. protected . Definition at line 120 of file TEveWindow.h. ◆ fOriginalSlot. TEveWindow* TEveCompositeFrameInMainFrame::fOriginalSlot. protected . Definition at line 119 of file TEveWindow.h. Libraries for TEveCompositeFrameInMainFrame:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveCompositeFrameInMainFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html:38701,Guid,Guide,38701,doc/master/classTEveCompositeFrameInMainFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html,1,['Guid'],['Guide']
Usability,"iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedMapProxy.html:11411,clear,clear,11411,doc/master/classTEmulatedMapProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedMapProxy.html,1,['clear'],['clear']
Usability,"iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString convText = TString::Format( ""(train/test/epoch): %.4g/%.4g/%d"", trainError, testError, (int)cycleCount);; 919 double progress = 100*(double)settings.maxConvergenceCount() /(double)settings.convergenceSteps ();; 920 settings.cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:27067,progress bar,progress bar,27067,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['progress bar'],['progress bar']
Usability,"ith Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 2002 (slides); ROOT 2001 (slides); ROOT 2000 (slides); ROOT 1999 slides ; And PROOF workshops:; PROOF 2007 (slides). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:2199,Guid,Guides,2199,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"ith a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candledecay.C Candle Decay, illustrate a time development of a certain value ;  candlehisto.C Example showing how to combine the various candle plot options ;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:121453,simpl,simple,121453,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,4,['simpl'],['simple']
Usability,"ith a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:120686,simpl,simple,120686,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"ith complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : Depending on the function used, the choice of ""FitMethod"" is; : crucial for getting valuable solutions with FDA. As a guideline it; : is recommended to start with ""FitMethod=MINUIT"". When more complex; : functions are used where MINUIT does not converge to reasonable; : results, the user should switch to non-gradient FitMethods such; : as GeneticAlgorithm (GA) or Monte Carlo (MC). It might prove to be; : useful to combine GA (or MC) with MINUIT by setting the option; : ""Converger=MINUIT"". GA (MC) will then set the starting parameters; : for MINUIT such that the basic quality of GA (MC) of finding global; : minima is combined with the efficacy of MINUIT of finding local; : minima.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; FitterBase : <GeneticFitter> Optimisation, please be patient ... (inaccurate progress timing for GA); : Elapsed time: 0.901 sec ; FDA_GA : Results for parameter fit using ""GA"" fitter:; : -----------------------; : Parameter: Fit result:; : -----------------------; : Par(0): 0.525294; : Par(1): 0; : Par(2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:39923,guid,guideline,39923,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['guid'],['guideline']
Usability,"ith less then 10 effective; number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective; number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. - chi2 - chisquare of the test; - ndf - number of degrees of freedom (important, when both histograms have the same; empty bins); - res - normalized residuals for further analysis. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Compute and return the chisquare of this histogram with respect to a function; The chisquare is computed by weighting each histogram point by the bin error; By default the full range of the histogram is used.; Use option ""R"" for restricting the chisquare calculation to the given range of the function. void ClearUnderflowAndOverflow(); Remove all the content from the underflow and overflow bins, without changing the number of entries; After calling this method, every undeflow and overflow bins will have content 0.0; The Sumw2 is also cleared, since there is no more content in the bins. Double_t ComputeIntegral(Bool_t onlyPositive = false); Compute integral (cumulative sum of bins); The result stored in fIntegral is used by the GetRandom functions.; This function is automatically called by GetRandom when the fIntegral; array does not exist or when the number of entries in the histogram; has changed since the previous call to GetRandom.; The resulting integral is normalized to 1; If the routine is called with the onlyPositive flag set an error will; be produced in case of negative bin content and a NaN value returned. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called; The array dimension is the number of bins in the histograms; including underflow and overflow (fNCells); the last value integral[fNCells] is set to the number of entries of; the histogram. TH1 * GetCumulative(Bool_t forward = kTRUE, const char* suffix = ""_cumulative"") const; Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:60628,clear,cleared,60628,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['clear'],['cleared']
Usability,"ithRegion,Rectangle_t*,rect,Region_t,src,Region_t,dest,1); 173VOID_METHOD_ARG3(VirtualX,UnionRegion,Region_t,rega,Region_t,regb,Region_t,result,1); 174VOID_METHOD_ARG3(VirtualX,IntersectRegion,Region_t,rega,Region_t,regb,Region_t,result,1); 175VOID_METHOD_ARG3(VirtualX,SubtractRegion,Region_t,rega,Region_t,regb,Region_t,result,1); 176VOID_METHOD_ARG3(VirtualX,XorRegion,Region_t,rega,Region_t,regb,Region_t,result,1); 177VOID_METHOD_ARG2(VirtualX,GetRegionBox,Region_t,reg,Rectangle_t*,rect,1); 178VOID_METHOD_ARG3(VirtualX,CopyGC,GContext_t,org,GContext_t,dest,Mask_t,mask,1); 179VOID_METHOD_ARG3(VirtualX,GetTextExtent,UInt_t&,w,UInt_t&,h,char*,mess,1); 180VOID_METHOD_ARG7(VirtualX,TranslateCoordinates,Window_t,src,Window_t,dest,Int_t,src_x,Int_t,src_y,Int_t&,dest_x,Int_t&,dest_y,Window_t&,child,1); 181VOID_METHOD_ARG8(VirtualX,QueryPointer,Window_t,id,Window_t&,rootw,Window_t&,childw,Int_t&,root_x,Int_t&,root_y,Int_t&,win_x,Int_t&,win_y,UInt_t&,mask,1); 182VOID_METHOD_ARG0(VirtualX,ClearWindow,1); 183VOID_METHOD_ARG1(VirtualX,SetDrawMode,TVirtualX::EDrawMode,mode,1); 184VOID_METHOD_ARG3(VirtualX,MoveWindow,Int_t,wid,Int_t,x,Int_t,y,1); 185VOID_METHOD_ARG1(VirtualX,ResizeWindow,Int_t,winid,1); 186VOID_METHOD_ARG2(VirtualX,SetCursor,Int_t,win,ECursor,cursor,1); 187VOID_METHOD_ARG2(VirtualX,QueryPointer,Int_t&,ix,Int_t&,iy,1); 188VOID_METHOD_ARG5(VirtualX,GetPasteBuffer,Window_t,id,Atom_t,atom,TString&,text,Int_t&,nchar,Bool_t,del,1); 189VOID_METHOD_ARG1(VirtualX,GetPlanes,Int_t&,planes,1); 190VOID_METHOD_ARG2(VirtualX,GetGCValues,GContext_t,gc,GCValues_t&,gval,1); 191RETURN_METHOD_ARG0(VirtualX,Window_t,GetInputFocus); 192RETURN_METHOD_ARG0(VirtualX,Window_t,GetPrimarySelectionOwner); 193RETURN_METHOD_ARG0(VirtualX,Region_t,CreateRegion); 194RETURN_METHOD_ARG0_CONST(VirtualX,Display_t,GetDisplay); 195RETURN_METHOD_ARG0_CONST(VirtualX,Visual_t,GetVisual); 196RETURN_METHOD_ARG0_CONST(VirtualX,Int_t,GetScreen); 197RETURN_METHOD_ARG0_CONST(VirtualX,Int_t,GetDepth); 198RETURN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:12337,Clear,ClearWindow,12337,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['Clear'],['ClearWindow']
Usability,"ithub ssh key | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ss",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:1004,Guid,Guides,1004,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['Guid'],['Guides']
Usability,"itialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent); virtual voidUpdateValueClass(const TClass* oldcl, TClass* newcl). private:. TGenCollectionProxy&operator=(const TGenCollectionProxy&); TGenCollectionProxy(). Data Members; public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t); static TGenCollectionProxy::(anonymous)kBIT_ISSTRING; static TGenCollectionProxy::(anonymous)kBIT_ISTSTRING; static TGenCollectionProxy::(anonymous)kBOOL_t; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kIsAssociative; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kIsEmulated; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kNeedDelete. protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodfClearMethod cache for container accessors: clear container; TGenCollectionProxy::Collectfunc_tfCollectMethod to collect objects from container; TGenCollectionProxy::ArrIterfunc_tfConstructContainer accessors: block construct; map<string,TObjArray*>*fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0fCreateEnvMethod to allocate an Environment holder.; TGenCollectionProxy::Sizing_tfDestructContainer accessors: block destruct; TGenCollectionProxy::EnvironBase_t*fEnvAddress of the currently proxied object; TGenCollectionProxy::Feedfunc_tfFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; TVirtualCollectionProxy::CopyIterator_tfFunctionCopyIterator; TVirtualCollectionProxy::CreateIterators_tfFunctionCreateIterators; TVirtualCollectionProxy::DeleteIterator_tfFunctionDeleteIterator; TVirtualCollectionProxy::DeleteTwoIterators_tfFunctionDeleteTwoIterators; TVirtualCollectionProxy::Next_tfFunctionNextIterator; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy.html:4344,clear,clear,4344,root/html602/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy.html,2,['clear'],['clear']
Usability,iting nested parallelism through TTaskGroup ;  mt303_AsyncSimple.C Shows how to run items of work asynchronously with Async ;  mt304_AsyncNested.C Calculate Fibonacci numbers exploiting nested parallelism through Async ;  mt304_fillHistos.CFill histograms in parallel with automatic binning ;  mt305_TFuture.C Shows how to use the Future class of ROOT as a wrapper of std::future ;  mtbb001_fillHistos.C Fill histograms in parallel and write them on file ;  mtbb101_fillNtuples.C Fill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.C Parallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:136305,simpl,simple,136305,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,"ition BinData.h:56; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::BinData::kValueError@ kValueErrorDefinition BinData.h:56; ROOT::Fit::BinData::GetPointconst double * GetPoint(unsigned int ipoint, double &value, double &invError) constretrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit...Definition BinData.h:439; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitDataBase class for all the fit data types: Stores the coordinates and the DataOptions.Definition FitData.h:56; ROOT::Fit::FitData::fMaxPointsunsigned int fMaxPointsDefinition FitData.h:384; ROOT::Fit::FitData::fWrappedbool fWrappedDefinition FitData.h:376; ROOT::Fit::FitData::fDimunsigned int fDimDefinition FitData.h:386; ROOT::Fit::FitData::Coordsconst double * Coords(unsigned int ipoint) constreturn a pointer to the coordinates data for the given fit pointDefinition FitData.h:236; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ValueDefinition functioncalls.h:15. mathmathcoreincFitBinData.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:31822,simpl,simple,31822,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ition Reader.cxx:303; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; nconst Int_t nDefinition legend1.C:16; RooFit::Detail::MathFuncs::efficiencydouble efficiency(double effFuncVal, int catIndex, int sigCatIndex)Definition MathFuncs.h:117; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; Factory.h; AuthorAndreas Hoecker ; Definition in file TMVAMultipleBackgroundExample.C. tutorialstmvaTMVAMultipleBackgroundExample.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:53415,Guid,Guide,53415,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['Guid'],['Guide']
Usability,"ition RooWorkspace.cxx:2067; RooWorkspace::varRooRealVar * var(RooStringView name) constRetrieve real-valued variable (RooRealVar) with given name. A null pointer is returned if not found.Definition RooWorkspace.cxx:1232; RooWrapperPdfThe RooWrapperPdf is a class that can be used to convert a function into a PDF.Definition RooWrapperPdf.h:24; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::SilenceRooCmdArg Silence(bool flag=true)Definition RooGlobalFunc.cxx:892; RooFit::ShiftToZeroRooCmdArg ShiftToZero()Definition RooGlobalFunc.cxx:191; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; RooFit::WARNING@ WARNINGDefinition RooGlobalFunc.h:60; rf616_morphingDefinition rf616_morphing.py:1; xmlio::Nameconst char * NameDefinition TXMLSetup.cxx:67; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; ; RooFitResult: minimized FCN value: 1805.81, estimated distance to minimum: 1.13014e-08; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu 2.4940e+00 +/- 4.74e-02; ; ; RooFitResult: minimized FCN value: 1806.33, estimated distance to minimum: 1.41682e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu 2.4899e+00 +/- 4.59e-02; ; DateAugust 2024 ; AuthorRobin Syring ; Definition in file rf616_morphing.C. tutorialsroofitrf616_morphing.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8C.html:13035,Guid,Guide,13035,doc/master/rf616__morphing_8C.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8C.html,1,['Guid'],['Guide']
Usability,"ition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetLabelColorvoid SetLabelColor(Int_t labelcolor)Definition TGaxis.h:104; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetMaximumvirtual Double_t GetMaximum(Double_t maxval=FLT_MAX) constReturn maximum value smaller than maxval of bins in the range, unless the value has been overridden b...Definition TH1.cxx:8545; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; twoscalesDefinition twoscales.py:1; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorRene Brun ; Definition in file twoscales.C. tutorialshisttwoscales.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/twoscales_8C.html:3768,Guid,Guide,3768,doc/master/twoscales_8C.html,https://root.cern,https://root.cern/doc/master/twoscales_8C.html,1,['Guid'],['Guide']
Usability,"ition TBaseClass.cxx:63; TBoxCreate a Box.Definition TBox.h:22; TBox::SetY2virtual void SetY2(Double_t y2)Definition TBox.h:65; TBox::Classstatic TClass * Class(); TBox::SetX1virtual void SetX1(Double_t x1)Definition TBox.h:62; TBox::SetX2virtual void SetX2(Double_t x2)Definition TBox.h:63; TBox::SetY1virtual void SetY1(Double_t y1)Definition TBox.h:64; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TButtonA TButton object is a user interface object.Definition TButton.h:18; TButton::Classstatic TClass * Class(); TCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area).Definition TCanvasImp.h:30; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::GetWindowHeightUInt_t GetWindowHeight() constDefinition TCanvas.h:162; TCanvas::GetClickSelectedTObject * GetClickSelected() constDefinition TCanvas.h:142; TCanvas::ClearPadSavevoid ClearPadSave()Definition TCanvas.h:140; TCanvas::GetClickSelectedPadTVirtualPad * GetClickSelectedPad() constDefinition TCanvas.h:147; TCanvas::SetClickSelectedPadvoid SetClickSelectedPad(TPad *pad)Definition TCanvas.h:211; TCanvas::SetSelectedPadvoid SetSelectedPad(TPad *pad)Definition TCanvas.h:210; TCanvas::SetDoubleBuffervoid SetDoubleBuffer(Int_t mode=1) overrideSet Double Buffer On/Off.Definition TCanvas.cxx:1998; TCanvas::GetCanvasImpTCanvasImp * GetCanvasImp() const overrideDefinition TCanvas.h:158; TCanvas::IsRetainedBool_t IsRetained() const overrideDefinition TCanvas.h:176; TCanvas::SupportAlphastatic Bool_t SupportAlpha()Static function returning ""true"" if transparency is supported.Definition TCanvas.cxx:2476; TCanvas::GetEventYInt_t GetEventY() const overrideDefinition TCanvas.h:137; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::GetCanvasPainterTVirtualPadPainter * GetCanvasPainter()Access and (probably) creation of pad painter.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:270505,Clear,ClearPadSavevoid,270505,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Clear'],"['ClearPadSave', 'ClearPadSavevoid']"
Usability,"ition TCanvas.h:23; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; c1return c1Definition legend1.C:41; exDouble_t ex[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorOlivier Couet ; Definition in file h2proj.C. tutorialshisth2proj.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h2proj_8C.html:4947,Guid,Guide,4947,doc/master/h2proj_8C.html,https://root.cern,https://root.cern/doc/master/h2proj_8C.html,1,['Guid'],['Guide']
Usability,"ition TEnv.h:113; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 113 of file TEnv.h. ◆ IsA(). TClass * TEnvRec::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 115 of file TEnv.h. ◆ Streamer(). void TEnvRec::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEnvRec::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 115 of file TEnv.h. Friends And Related Symbol Documentation. ◆ TEnv. friend class TEnv. friend . Definition at line 88 of file TEnv.h. ◆ TEnvParser. friend class TEnvParser. friend . Definition at line 89 of file TEnv.h. ◆ TReadEnvParser. friend class TReadEnvParser. friend . Definition at line 90 of file TEnv.h. ◆ TWriteEnvParser. friend class TWriteEnvParser. friend . Definition at line 91 of file TEnv.h. Member Data Documentation. ◆ fLevel. EEnvLevel TEnvRec::fLevel. private . Definition at line 97 of file TEnv.h. ◆ fModified. Bool_t TEnvRec::fModified. private . Definition at line 98 of file TEnv.h. ◆ fName. TString TEnvRec::fName. private . Definition at line 94 of file TEnv.h. ◆ fType. TString TEnvRec::fType. private . Definition at line 95 of file TEnv.h. ◆ fValue. TString TEnvRec::fValue. private . Definition at line 96 of file TEnv.h. Libraries for TEnvRec:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TEnv.h; core/base/src/TEnv.cxx. TEnvRec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnvRec.html:15895,Guid,Guide,15895,doc/master/classTEnvRec.html,https://root.cern,https://root.cern/doc/master/classTEnvRec.html,1,['Guid'],['Guide']
Usability,"ition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; ptTPaveText * ptDefinition entrylist_figure1.C:7; AuthorEun Young Kim, Dept. of Physics, Univ. of Seoul ; Definition in file mp3player.C. tutorialsgeommp3player.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mp3player_8C.html:24983,Guid,Guide,24983,doc/master/mp3player_8C.html,https://root.cern,https://root.cern/doc/master/mp3player_8C.html,1,['Guid'],['Guide']
Usability,"ition TH1.cxx:3898; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetFunctionvirtual TF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TH1.cxx:9051; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::Classstatic TClass * Class(); TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; DynamicSliceDefinition DynamicSlice.py:1; AuthorsRene Brun, Sergey Linev ; Definition in file DynamicSlice.C. tutorialshistDynamicSlice.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DynamicSlice_8C.html:5732,Guid,Guide,5732,doc/master/DynamicSlice_8C.html,https://root.cern,https://root.cern/doc/master/DynamicSlice_8C.html,1,['Guid'],['Guide']
Usability,"ition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; c1return c1Definition legend1.C:41; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; PyTorch_Generate_CNN_Model.fitfit(model, train_loader, val_loader, num_epochs, batch_size, optimizer, criterion, save_best, scheduler)Definition PyTorch_Generate_CNN_Model.py:34; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; AuthorRene Brun ; Definition in file TestBinomial.C. tutorialsfitTestBinomial.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:63396,Guid,Guide,63396,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,1,['Guid'],['Guide']
Usability,"ition TQCommand.cxx:588. Merged commands It possible to group several commands together so an end user can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1, double error1, double a2, double b2, double area2, double error2)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:633; gPad#define gPadDefinition TVirtualPad.h:308; TQCommand::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the list of merged commands.Definition TQCommand.cxx:360. Macro commands ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; During Redo operation commands composing macro command are executed sequentially in direct order (first in first out). During Undo, they are executed in reverse order (last in first out).; Undo manager. TQUndoManager is recorder of undo and redo operations. This is command history list which can be traversed backwards and upwards performing undo and redo operations. To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);; TQCommand::TQUndoManagerfriend class TQUndoManagerDefinition TQCommand.h:29; TQUndoManagerRecorder of operations for undo and redo.Definition TQCommand.h:103; TQUndoManager::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the stack of commands.Definition TQCommand.cxx:959; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list. Redo is Undo for undo action. Use TQUndoManager::Redo method for that ; Definition at line 27 of file TQCommand.h. Public Member Functions;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:3872,undo,undo,3872,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"ition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::kBoth@ kBothDefinition TString.h:276; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; TUUID::Streamervirtual void Streamer(TBuffer &); TUUID::AsStringconst char * AsString() constReturn UUID as string. Copy string immediately since it will be reused.Definition TUUID.cxx:571; TUUID::SizeofInt_t Sizeof() constDefinition TUUID.h:85; TUUID::FillBuffervoid FillBuffer(char *&buffer)Stream UUID into output buffer.Definition TUUID.cxx:275; TUUID::StreamerV1void StreamerV1(TBuffer &b)Stream UUID from input buffer.Definition TUUID.cxx:309; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GetClassvirtual TClass * GetClass() const =0; bool; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; v@ vDefinition rootcling_impl.cxx:3699; slashTCanvas * slash()Definition slash.C:1. ioiosrcTDirectoryFile.cxx. ROOT maste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:106021,GUID,GUIDs,106021,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['GUID'],['GUIDs']
Usability,ition at line 101 of file RooCustomizer.h. ◆ _masterBranchList. RooArgSet RooCustomizer::_masterBranchList. protected . List of branch nodes. ; Definition at line 98 of file RooCustomizer.h. ◆ _masterCat. RooAbsCategoryLValue* RooCustomizer::_masterCat = nullptr. protected . Pointer to input master category. ; Definition at line 96 of file RooCustomizer.h. ◆ _masterLeafList. RooArgSet RooCustomizer::_masterLeafList. protected . List of leaf nodes. ; Definition at line 99 of file RooCustomizer.h. ◆ _masterPdf. RooAbsArg* RooCustomizer::_masterPdf. protected . Pointer to input p.d.f. ; Definition at line 95 of file RooCustomizer.h. ◆ _name. TString RooCustomizer::_name. protected . Name of this object. ; Definition at line 86 of file RooCustomizer.h. ◆ _owning. bool RooCustomizer::_owning. protected . If true we own all created components. ; Definition at line 85 of file RooCustomizer.h. ◆ _replaceArgList. RooArgList RooCustomizer::_replaceArgList. protected . List of RooAbsArgs to be replaced. ; Definition at line 91 of file RooCustomizer.h. ◆ _replaceSubList. RooArgList RooCustomizer::_replaceSubList. protected . List of replacement RooAbsArgs. ; Definition at line 92 of file RooCustomizer.h. ◆ _splitArgList. RooArgList RooCustomizer::_splitArgList. protected . List of RooAbsArgs to be split. ; Definition at line 88 of file RooCustomizer.h. ◆ _splitCatList. RooArgList RooCustomizer::_splitCatList. protected . List of categories to be used for above splits. ; Definition at line 89 of file RooCustomizer.h. ◆ _sterile. bool RooCustomizer::_sterile. protected . If true we do not have as associated master category. ; Definition at line 84 of file RooCustomizer.h. Libraries for RooCustomizer:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCustomizer.h; roofit/roofitcore/src/RooCustomizer.cxx. RooCustomizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCustomizer.html:19220,Guid,Guide,19220,doc/master/classRooCustomizer.html,https://root.cern,https://root.cern/doc/master/classRooCustomizer.html,1,['Guid'],['Guide']
Usability,ition at line 106 of file RooHistFunc.h. Friends And Related Symbol Documentation. ◆ RooAbsCachedReal. friend class RooAbsCachedReal. friend . Definition at line 115 of file RooHistFunc.h. Member Data Documentation. ◆ _cdfBoundaries. bool RooHistFunc::_cdfBoundaries = false. protected . Use boundary conditions for CDFs. ; Definition at line 125 of file RooHistFunc.h. ◆ _codeReg. RooAICRegistry RooHistFunc::_codeReg. mutableprotected . ! Auxiliary class keeping tracking of analytical integration code ; Definition at line 123 of file RooHistFunc.h. ◆ _dataHist. RooDataHist* RooHistFunc::_dataHist = nullptr. protected . Unowned pointer to underlying histogram. ; Definition at line 121 of file RooHistFunc.h. ◆ _depList. RooSetProxy RooHistFunc::_depList. protected . List of observables mapped onto histogram observables. ; Definition at line 120 of file RooHistFunc.h. ◆ _histObsList. RooArgSet RooHistFunc::_histObsList. protected . List of observables defining dimensions of histogram. ; Definition at line 119 of file RooHistFunc.h. ◆ _intOrder. Int_t RooHistFunc::_intOrder = 0. protected . Interpolation order. ; Definition at line 124 of file RooHistFunc.h. ◆ _ownedDataHist. std::unique_ptr<RooDataHist> RooHistFunc::_ownedDataHist. protected . ! Owned pointer to underlying histogram ; Definition at line 122 of file RooHistFunc.h. ◆ _totVolume. double RooHistFunc::_totVolume = 0.0. mutableprotected . ! Total volume of space (product of ranges of observables) ; Definition at line 126 of file RooHistFunc.h. ◆ _unitNorm. bool RooHistFunc::_unitNorm = false. protected . ! Assume contents is unit normalized (for use as pdf cache) ; Definition at line 127 of file RooHistFunc.h. Libraries for RooHistFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooHistFunc.h; roofit/roofitcore/src/RooHistFunc.cxx. RooHistFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:76574,Guid,Guide,76574,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['Guid'],['Guide']
Usability,"ition at line 1186 of file TApplication.cxx. ◆ HandleException(). void TApplication::HandleException ; (; Int_t ; sig). virtual . Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ; Specific TApplication implementations may want something different here. ; Reimplemented in TRint, and TProofServ.; Definition at line 590 of file TApplication.cxx. ◆ HandleIdleTimer(). void TApplication::HandleIdleTimer ; (; ). virtual . Handle idle timeout. ; When this timer expires the registered idle command will be executed by this routine and a signal will be emitted. ; Definition at line 577 of file TApplication.cxx. ◆ HandleTermInput(). virtual Bool_t TApplication::HandleTermInput ; (; ). inlinevirtual . Reimplemented in TRint.; Definition at line 116 of file TApplication.h. ◆ Help(). void TApplication::Help ; (; const char * ; line). protectedvirtual . The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ; NoteYou can use "".?"" as the short version of "".help"" ; Parameters. [in]linecommand from the command line . Definition at line 1208 of file TApplication.cxx. ◆ Hide(). virtual void TApplication::Hide ; (; ). inlinevirtual . Definition at line 130 of file TApplication.h. ◆ Iconify(). virtual void TApplication::Iconify ; (; ). inlinevirtual . Definition at line 131 of file TApplication.h. ◆ Init(). virtual void TApplication::Init ; (; ). inlinevirtual . Definition at line 117 of file TApplication.h. ◆ InitializeGraphics(). void TApplication::InitializeGraphics ; (; Bool_t ; only_web = kFALSE). Initialize the graphics environment. ; IfParameters. only_webis specified, only web-related part of graphics is loaded . Definition at line 244 of file TApplication.cxx. ◆ InputFiles(). TObjArray * TApplication::InputFiles ; (; ); const. inline . Definition at line 146 of file TApplication.h. ◆ IsA(). TClass * TApplication::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:29034,guid,guide,29034,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['guid'],['guide']
Usability,"ition at line 1253 of file RuleEnsemble.cxx. ◆ CalcRuleImportance(). Double_t TMVA::RuleEnsemble::CalcRuleImportance ; (; ). calculate importance of each rule ; Definition at line 435 of file RuleEnsemble.cxx. ◆ CalcRuleSupport(). void TMVA::RuleEnsemble::CalcRuleSupport ; (; ). calculate the support for all rules ; Definition at line 367 of file RuleEnsemble.cxx. ◆ CalcVarImportance(). void TMVA::RuleEnsemble::CalcVarImportance ; (; ). Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ; Definition at line 481 of file RuleEnsemble.cxx. ◆ CleanupLinear(). void TMVA::RuleEnsemble::CleanupLinear ; (; ). cleanup linear model ; Definition at line 352 of file RuleEnsemble.cxx. ◆ CleanupRules(). void TMVA::RuleEnsemble::CleanupRules ; (; ). cleanup rules ; Definition at line 325 of file RuleEnsemble.cxx. ◆ ClearCoefficients(). void TMVA::RuleEnsemble::ClearCoefficients ; (; Double_t ; val = 0). inline . Definition at line 119 of file RuleEnsemble.h. ◆ ClearLinCoefficients(). void TMVA::RuleEnsemble::ClearLinCoefficients ; (; Double_t ; val = 0). inline . Definition at line 120 of file RuleEnsemble.h. ◆ ClearLinNorm(). void TMVA::RuleEnsemble::ClearLinNorm ; (; Double_t ; val = 1.0). inline . Definition at line 121 of file RuleEnsemble.h. ◆ ClearRuleMap(). void TMVA::RuleEnsemble::ClearRuleMap ; (; ). inline . Definition at line 150 of file RuleEnsemble.h. ◆ CoefficientRadius(). Double_t TMVA::RuleEnsemble::CoefficientRadius ; (; ). Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ; Definition at line 198 of file RuleEnsemble.cxx. ◆ Copy(). void TMVA::RuleEnsemble::Copy ; (; RuleEnsemble const & ; other). private . copy function ; Definition at line 1226 of file RuleEnsemble.cxx. ◆ DeleteRules(). void TMVA::RuleEnsemble::DeleteRules ; (; ). inlineprivate . Definition at line 319 of file RuleEnsemble.h. ◆ DoFull(). Bool_t TMVA::RuleEnsemble::DoFull ; (; ); const. inline . Definition at line 257 of file RuleEnsemble.h. ◆ DoLinear(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:13865,Clear,ClearLinCoefficients,13865,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Clear'],['ClearLinCoefficients']
Usability,"ition at line 1599 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoIntersection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBoolNode.; Definition at line 166 of file TGeoBoolNode.h. ◆ MakeClone(). TGeoBoolNode * TGeoIntersection::MakeClone ; (; ); const. overridevirtual . Make a clone of this. Pointers are preserved. ; Implements TGeoBoolNode.; Definition at line 1230 of file TGeoBoolNode.cxx. ◆ Paint(). void TGeoIntersection::Paint ; (; Option_t * ; option). overridevirtual . Paint method. ; Reimplemented from TGeoBoolNode.; Definition at line 1238 of file TGeoBoolNode.cxx. ◆ Safety(). Double_t TGeoIntersection::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Compute safety distance for a union node;. ; Implements TGeoBoolNode.; Definition at line 1641 of file TGeoBoolNode.cxx. ◆ SavePrimitive(). void TGeoIntersection::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBoolNode.; Definition at line 1665 of file TGeoBoolNode.cxx. ◆ Sizeof3D(). void TGeoIntersection::Sizeof3D ; (; ); const. overridevirtual . Register 3D size of this shape. ; Reimplemented from TGeoBoolNode.; Definition at line 1684 of file TGeoBoolNode.cxx. ◆ Streamer(). void TGeoIntersection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBoolNode. ◆ StreamerNVirtual(). void TGeoIntersection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 166 of file TGeoBoolNode.h. Libraries for TGeoIntersection:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBoolNode.h; geom/geom/src/TGeoBoolNode.cxx. TGeoIntersection. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:19606,Guid,Guide,19606,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,1,['Guid'],['Guide']
Usability,ition at line 177 of file TGeoOverlap.cxx. ◆ SetOverlap(). void TGeoOverlap::SetOverlap ; (; Double_t ; ovlp). inline . Definition at line 94 of file TGeoOverlap.h. ◆ SetSecondMatrix(). void TGeoOverlap::SetSecondMatrix ; (; TGeoMatrix * ; matrix). inline . Definition at line 93 of file TGeoOverlap.h. ◆ SetSecondVolume(). void TGeoOverlap::SetSecondVolume ; (; TGeoVolume * ; vol). inline . Definition at line 91 of file TGeoOverlap.h. ◆ Sizeof3D(). void TGeoOverlap::Sizeof3D ; (; ); const. overridevirtual . Get 3D size of this. ; Reimplemented from TAtt3D.; Definition at line 244 of file TGeoOverlap.cxx. ◆ Streamer(). void TGeoOverlap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoOverlap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file TGeoOverlap.h. ◆ Validate(). void TGeoOverlap::Validate ; (; ); const. Validate this overlap. ; Definition at line 253 of file TGeoOverlap.cxx. Member Data Documentation. ◆ fMarker. TPolyMarker3D* TGeoOverlap::fMarker. protected . Definition at line 51 of file TGeoOverlap.h. ◆ fMatrix1. TGeoHMatrix* TGeoOverlap::fMatrix1. protected . Definition at line 49 of file TGeoOverlap.h. ◆ fMatrix2. TGeoHMatrix* TGeoOverlap::fMatrix2. protected . Definition at line 50 of file TGeoOverlap.h. ◆ fOverlap. Double_t TGeoOverlap::fOverlap. protected . Definition at line 46 of file TGeoOverlap.h. ◆ fVolume1. TGeoVolume* TGeoOverlap::fVolume1. protected . Definition at line 47 of file TGeoOverlap.h. ◆ fVolume2. TGeoVolume* TGeoOverlap::fVolume2. protected . Definition at line 48 of file TGeoOverlap.h. Libraries for TGeoOverlap:. [legend]; The documentation for this class was generated from the following files:; geom/geompainter/inc/TGeoOverlap.h; geom/geompainter/src/TGeoOverlap.cxx. TGeoOverlap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOverlap.html:24768,Guid,Guide,24768,doc/master/classTGeoOverlap.html,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html,1,['Guid'],['Guide']
Usability,"ition at line 255 of file CvSplit.cxx. ◆ SplitSets(). std::vector< std::vector< TMVA::Event * > > TMVA::CvSplitKFolds::SplitSets ; (; std::vector< TMVA::Event * > & ; oldSet, . UInt_t ; numFolds, . UInt_t ; numClasses . ). private . Split sets for into k-folds. ; Parameters. [in]oldSetOriginal, unsplit, events ; [in]numFoldsNumber of folds to split data into ; [in]numClassesnumber of classes to stratify into . Definition at line 320 of file CvSplit.cxx. ◆ Streamer(). void TMVA::CvSplitKFolds::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TMVA::CvSplit. ◆ StreamerNVirtual(). void TMVA::CvSplitKFolds::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 117 of file CvSplit.h. Member Data Documentation. ◆ CrossValidation. friend TMVA::CvSplitKFolds::CrossValidation. private . Definition at line 94 of file CvSplit.h. ◆ fEventToFoldMapping. std::map<const TMVA::Event *, UInt_t> TMVA::CvSplitKFolds::fEventToFoldMapping. private . Definition at line 114 of file CvSplit.h. ◆ fSeed. UInt_t TMVA::CvSplitKFolds::fSeed. private . Definition at line 107 of file CvSplit.h. ◆ fSplitExpr. std::unique_ptr<CvSplitKFoldsExpr> TMVA::CvSplitKFolds::fSplitExpr. private . Definition at line 109 of file CvSplit.h. ◆ fSplitExprString. TString TMVA::CvSplitKFolds::fSplitExprString. private . ! Expression used to split data into folds. Should output values between 0 and numFolds. ; Definition at line 108 of file CvSplit.h. ◆ fStratified. Bool_t TMVA::CvSplitKFolds::fStratified. private . If true, use stratified split. (Balance class presence in each fold). ; Definition at line 110 of file CvSplit.h. Libraries for TMVA::CvSplitKFolds:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CvSplit.h; tmva/tmva/src/CvSplit.cxx. TMVACvSplitKFolds. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:20102,Guid,Guide,20102,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['Guid'],['Guide']
Usability,ition at line 256 of file TSessionViewer.h. ◆ fCommandBuf. TGTextBuffer* TSessionFrame::fCommandBuf. private . Definition at line 254 of file TSessionViewer.h. ◆ fCommandTxt. TGTextEntry* TSessionFrame::fCommandTxt. private . Definition at line 253 of file TSessionViewer.h. ◆ fDataSetTree. TGListTree* TSessionFrame::fDataSetTree. private . Definition at line 276 of file TSessionViewer.h. ◆ fDSetView. TGCanvas* TSessionFrame::fDSetView. private . Definition at line 275 of file TSessionViewer.h. ◆ fFA. TGCompositeFrame* TSessionFrame::fFA. private . Definition at line 251 of file TSessionViewer.h. ◆ fFB. TGCompositeFrame * TSessionFrame::fFB. private . Definition at line 251 of file TSessionViewer.h. ◆ fFC. TGCompositeFrame * TSessionFrame::fFC. private . Definition at line 251 of file TSessionViewer.h. ◆ fFD. TGCompositeFrame* TSessionFrame::fFD. private . Definition at line 252 of file TSessionViewer.h. ◆ fFE. TGCompositeFrame * TSessionFrame::fFE. private . Definition at line 252 of file TSessionViewer.h. ◆ fInfoLine. TGLabel* TSessionFrame::fInfoLine[19]. private . Definition at line 288 of file TSessionViewer.h. ◆ fInfoTextView. TGTextView* TSessionFrame::fInfoTextView. private . Definition at line 255 of file TSessionViewer.h. ◆ fLBPackages. TGListBox* TSessionFrame::fLBPackages. private . Definition at line 261 of file TSessionViewer.h. ◆ fLogLevel. TGNumberEntry* TSessionFrame::fLogLevel. private . Definition at line 283 of file TSessionViewer.h. ◆ fTab. TGTab* TSessionFrame::fTab. private . Definition at line 250 of file TSessionViewer.h. ◆ fTxtParallel. TGTextEntry* TSessionFrame::fTxtParallel. private . Definition at line 282 of file TSessionViewer.h. ◆ fViewer. TSessionViewer* TSessionFrame::fViewer. private . Definition at line 287 of file TSessionViewer.h. gui/sessionviewer/inc/TSessionViewer.h; gui/sessionviewer/src/TSessionViewer.cxx. TSessionFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:44490,Guid,Guide,44490,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,1,['Guid'],['Guide']
Usability,"ition at line 29 of file TVirtualFitter.h. Public Types; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual Double_t Chisquare (Int_t npar, Double_t *params) const =0;  ; void Clear (Option_t *option="""") override=0;  Set name and title to empty strings (""""). ;  ; virtual Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs)=0;  ; virtual void FixParameter (Int_t ipar)=0;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual Double_t * GetCovarianceMatrix () const =0;  ; virtual Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const =0;  ; virtual Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const =0;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual Int_t GetNumberFreeParameters ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFitter.html:1396,Clear,Clear,1396,doc/master/classTVirtualFitter.html,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html,1,['Clear'],['Clear']
Usability,"ition at line 39 of file TLatex.h. Member Function Documentation. ◆ AddOver() [1/2]. TLatexFormSize TLatex::TLatexFormSize::AddOver ; (; TLatexFormSize ; f). inline . Definition at line 48 of file TLatex.h. ◆ AddOver() [2/2]. TLatexFormSize TLatex::TLatexFormSize::AddOver ; (; TLatexFormSize ; f1, . TLatexFormSize ; f2 . ). inline . Definition at line 52 of file TLatex.h. ◆ AddUnder(). TLatexFormSize TLatex::TLatexFormSize::AddUnder ; (; TLatexFormSize ; f). inline . Definition at line 50 of file TLatex.h. ◆ Height(). Double_t TLatex::TLatexFormSize::Height ; (; ); const. inline . Definition at line 59 of file TLatex.h. ◆ operator+(). TLatexFormSize TLatex::TLatexFormSize::operator+ ; (; TLatexFormSize ; f). inline . Definition at line 42 of file TLatex.h. ◆ operator+=(). void TLatex::TLatexFormSize::operator+= ; (; TLatexFormSize ; f). inline . Definition at line 44 of file TLatex.h. ◆ Over(). Double_t TLatex::TLatexFormSize::Over ; (; ); const. inline . Definition at line 57 of file TLatex.h. ◆ Set(). void TLatex::TLatexFormSize::Set ; (; Double_t ; x, . Double_t ; y1, . Double_t ; y2 . ). inline . Definition at line 47 of file TLatex.h. ◆ Under(). Double_t TLatex::TLatexFormSize::Under ; (; ); const. inline . Definition at line 58 of file TLatex.h. ◆ Width(). Double_t TLatex::TLatexFormSize::Width ; (; ); const. inline . Definition at line 56 of file TLatex.h. Member Data Documentation. ◆ fOver. Double_t TLatex::TLatexFormSize::fOver {0}. private . Definition at line 35 of file TLatex.h. ◆ fUnder. Double_t TLatex::TLatexFormSize::fUnder {0}. private . Definition at line 35 of file TLatex.h. ◆ fWidth. Double_t TLatex::TLatexFormSize::fWidth {0}. private . Definition at line 35 of file TLatex.h. Libraries for TLatex::TLatexFormSize:. [legend]; The documentation for this class was generated from the following file:; graf2d/graf/inc/TLatex.h. TLatexTLatexFormSize. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex_1_1TLatexFormSize.html:3213,Guid,Guide,3213,doc/master/classTLatex_1_1TLatexFormSize.html,https://root.cern,https://root.cern/doc/master/classTLatex_1_1TLatexFormSize.html,1,['Guid'],['Guide']
Usability,"ition at line 40 of file ConfInterval.h. Member Function Documentation. ◆ CheckParameters(). virtual bool RooStats::ConfInterval::CheckParameters ; (; const RooArgSet & ; ); const. pure virtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ Class(). static TClass * RooStats::ConfInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::ConfInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::ConfInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file ConfInterval.h. ◆ ConfidenceLevel(). virtual double RooStats::ConfInterval::ConfidenceLevel ; (; ); const. pure virtual . return confidence level ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ DeclFileName(). static const char * RooStats::ConfInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file ConfInterval.h. ◆ GetParameters(). virtual RooArgSet * RooStats::ConfInterval::GetParameters ; (; ); const. pure virtual . return list of parameters of interest defining this interval (return a new cloned list) ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ IsA(). TClass * RooStats::ConfInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval.; Definition at line 67 of file ConfInterval.h. ◆ IsInInterval(). virtual bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:13749,Simpl,SimpleInterval,13749,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"ition at line 40 of file TSQLTableInfo.h. ◆ GetCreateTime(). const char * TSQLTableInfo::GetCreateTime ; (; ); const. inline . Definition at line 45 of file TSQLTableInfo.h. ◆ GetEngine(). const char * TSQLTableInfo::GetEngine ; (; ); const. inline . Definition at line 44 of file TSQLTableInfo.h. ◆ GetUpdateTime(). const char * TSQLTableInfo::GetUpdateTime ; (; ); const. inline . Definition at line 46 of file TSQLTableInfo.h. ◆ IsA(). TClass * TSQLTableInfo::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 48 of file TSQLTableInfo.h. ◆ Print(). void TSQLTableInfo::Print ; (; Option_t * ; option = """"); const. overridevirtual . Prints table and table columns info. ; Reimplemented from TNamed.; Definition at line 77 of file TSQLTableInfo.cxx. ◆ Streamer(). void TSQLTableInfo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSQLTableInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TSQLTableInfo.h. Member Data Documentation. ◆ fColumns. TList* TSQLTableInfo::fColumns. protected . Definition at line 23 of file TSQLTableInfo.h. ◆ fCreateTime. TString TSQLTableInfo::fCreateTime. protected . SQL tables engine name. ; Definition at line 25 of file TSQLTableInfo.h. ◆ fEngine. TString TSQLTableInfo::fEngine. protected . list of TSQLColumnInfo objects, describing each table column ; Definition at line 24 of file TSQLTableInfo.h. ◆ fUpdateTime. TString TSQLTableInfo::fUpdateTime. protected . table creation time ; Definition at line 26 of file TSQLTableInfo.h. Libraries for TSQLTableInfo:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TSQLTableInfo.h; net/net/src/TSQLTableInfo.cxx. TSQLTableInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableInfo.html:15296,Guid,Guide,15296,doc/master/classTSQLTableInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html,1,['Guid'],['Guide']
Usability,"ition at line 56 of file TPainter3dAlgorithms.h. Constructor & Destructor Documentation. ◆ TPainter3dAlgorithms() [1/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; ). Lego default constructor. ; Definition at line 61 of file TPainter3dAlgorithms.cxx. ◆ TPainter3dAlgorithms() [2/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; Double_t * ; rmin, . Double_t * ; rmax, . Int_t ; system = 1 . ). Normal default constructor. ; rmin[3], rmax[3] are the limits of the lego object depending on the selected coordinate system ; Definition at line 130 of file TPainter3dAlgorithms.cxx. ◆ ~TPainter3dAlgorithms(). TPainter3dAlgorithms::~TPainter3dAlgorithms ; (; ). override . destructor ; Definition at line 209 of file TPainter3dAlgorithms.cxx. Member Function Documentation. ◆ BackBox(). void TPainter3dAlgorithms::BackBox ; (; Double_t ; ang). Draw back surfaces of surrounding box. ; Parameters. [in]angangle between X and Y axis . Definition at line 218 of file TPainter3dAlgorithms.cxx. ◆ ClearRaster(). void TPainter3dAlgorithms::ClearRaster ; (; ). Clear screen. ; Definition at line 307 of file TPainter3dAlgorithms.cxx. ◆ ColorFunction(). void TPainter3dAlgorithms::ColorFunction ; (; Int_t ; nl, . Double_t * ; fl, . Int_t * ; icl, . Int_t & ; irep . ). Set correspondence between function and color levels. ; Parameters. [in]nlnumber of levels ; [in]flfunction levels ; [in]iclcolors for levels; [out]irepreturn code (0 OK, -1 error). . Definition at line 323 of file TPainter3dAlgorithms.cxx. ◆ DefineGridLevels(). void TPainter3dAlgorithms::DefineGridLevels ; (; Int_t ; ndivz). Define the grid levels drawn in the background of surface and lego plots. ; The grid levels are aligned on the Z axis' main tick marks. ; Definition at line 366 of file TPainter3dAlgorithms.cxx. ◆ DrawFaceGouraudShaded(). void TPainter3dAlgorithms::DrawFaceGouraudShaded ; (; Int_t * ; icodes, . Double_t ; xyz[][3], . Int_t ; np, . Int_t * ; iface, . Double_t * ; t . ). Draw the faces for the Gouraud Shade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:18728,Clear,ClearRaster,18728,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['Clear'],['ClearRaster']
Usability,"ition at line 65 of file BDTEventWrapper.h. ◆ GetVal() [2/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; Int_t ; var); const. inline . Definition at line 68 of file BDTEventWrapper.h. ◆ GetVarIndex(). static Int_t & TMVA::BDTEventWrapper::GetVarIndex ; (; ). inlinestaticprivate . Definition at line 73 of file BDTEventWrapper.h. ◆ operator*(). const Event * TMVA::BDTEventWrapper::operator* ; (; ); const. inline . Definition at line 66 of file BDTEventWrapper.h. ◆ operator<(). Bool_t TMVA::BDTEventWrapper::operator< ; (; const BDTEventWrapper & ; other); const. inline . Definition at line 82 of file BDTEventWrapper.h. ◆ SetCumulativeWeight(). void BDTEventWrapper::SetCumulativeWeight ; (; Bool_t ; type, . Double_t ; weight . ). Set the accumulated weight, for sorted signal/background events. ; Parameters. type- true for signal, false for background ; weight- the total weight. Parameters. type- true for signal, false for background ; weight- the total weight . Definition at line 54 of file BDTEventWrapper.cxx. ◆ SetVarIndex(). static void TMVA::BDTEventWrapper::SetVarIndex ; (; Int_t ; iVar). inlinestatic . Parameters. iVar- index of the variable in fEvent to use . Definition at line 59 of file BDTEventWrapper.h. Member Data Documentation. ◆ fBkgWeight. Double_t TMVA::BDTEventWrapper::fBkgWeight. private . cumulative background weight for splitting ; Definition at line 77 of file BDTEventWrapper.h. ◆ fEvent. const Event* TMVA::BDTEventWrapper::fEvent. private . Definition at line 75 of file BDTEventWrapper.h. ◆ fSigWeight. Double_t TMVA::BDTEventWrapper::fSigWeight. private . same for the signal weights ; Definition at line 78 of file BDTEventWrapper.h. Libraries for TMVA::BDTEventWrapper:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BDTEventWrapper.h; tmva/tmva/src/BDTEventWrapper.cxx. TMVABDTEventWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html:3930,Guid,Guide,3930,doc/master/classTMVA_1_1BDTEventWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html,1,['Guid'],['Guide']
Usability,"ition at line 657 of file TPolyLine.cxx. ◆ SetPolyLine() [2/3]. void TPolyLine::SetPolyLine ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Option_t * ; option = """" . ). virtual . Set new values for this polyline (double precision). ; If n <= 0 the current arrays of points are deleted. ; Definition at line 708 of file TPolyLine.cxx. ◆ SetPolyLine() [3/3]. void TPolyLine::SetPolyLine ; (; Int_t ; n, . Float_t * ; x, . Float_t * ; y, . Option_t * ; option = """" . ). virtual . Set new values for this polyline (single precision). ; If n <= 0 the current arrays of points are deleted. ; Definition at line 680 of file TPolyLine.cxx. ◆ Size(). virtual Int_t TPolyLine::Size ; (; ); const. inlinevirtual . Definition at line 71 of file TPolyLine.h. ◆ Streamer(). void TPolyLine::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Definition at line 734 of file TPolyLine.cxx. ◆ StreamerNVirtual(). void TPolyLine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TPolyLine.h. Member Data Documentation. ◆ fLastPoint. Int_t TPolyLine::fLastPoint {-1}. protected . The index of the last filled point. ; Definition at line 27 of file TPolyLine.h. ◆ fN. Int_t TPolyLine::fN {0}. protected . Number of points. ; Definition at line 26 of file TPolyLine.h. ◆ fOption. TString TPolyLine::fOption. protected . options ; Definition at line 30 of file TPolyLine.h. ◆ fX. Double_t* TPolyLine::fX {nullptr}. protected . [fN] Array of X coordinates ; Definition at line 28 of file TPolyLine.h. ◆ fY. Double_t* TPolyLine::fY {nullptr}. protected . [fN] Array of Y coordinates ; Definition at line 29 of file TPolyLine.h. Libraries for TPolyLine:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPolyLine.h; graf2d/graf/src/TPolyLine.cxx. TPolyLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyLine.html:26554,Guid,Guide,26554,doc/master/classTPolyLine.html,https://root.cern,https://root.cern/doc/master/classTPolyLine.html,1,['Guid'],['Guide']
Usability,"ition at line 76 of file TQCommand.h. ◆ GetUndoArgs(). Long_t * TQCommand::GetUndoArgs ; (; ); const. Returns a pointer to array of undo arguments. ; Definition at line 760 of file TQCommand.cxx. ◆ GetUndoName(). const char * TQCommand::GetUndoName ; (; ); const. Returns the name of undo command. ; Definition at line 744 of file TQCommand.cxx. ◆ Init(). void TQCommand::Init ; (; const char * ; cl, . void * ; object, . const char * ; redo, . const char * ; undo . ). protectedvirtual . Common protected method used in several constructors. ; Definition at line 120 of file TQCommand.cxx. ◆ IsA(). TClass * TQCommand::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 98 of file TQCommand.h. ◆ IsEqual(). Bool_t TQCommand::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Equal comparison. ; The commands are equal if they are applied to the same object and have the same Redo/Undo actions; More complicated commands might want to override this function. ; Reimplemented from TObject.; Definition at line 418 of file TQCommand.cxx. ◆ IsExecuting(). Bool_t TQCommand::IsExecuting ; (; ); const. Returns kTRUE if command execution is in progress. ; Definition at line 824 of file TQCommand.cxx. ◆ IsMacro(). Bool_t TQCommand::IsMacro ; (; ); const. Returns kTRUE if neither redo nor undo action specified. ; Definition at line 800 of file TQCommand.cxx. ◆ IsRedoing(). Bool_t TQCommand::IsRedoing ; (; ); const. Redo action is in progress. ; Definition at line 816 of file TQCommand.cxx. ◆ IsSetter(). Bool_t TQCommand::IsSetter ; (; ); const. virtual . Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ; By default, all functions with names like ""SetXXX"" or ""setXXX"" considered as setters. Another type of setters are Move, Resize operations; More complicated commands might want to override this function. ; Definition at line 440 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:39935,Undo,Undo,39935,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"ition at line 81 of file TGXYLayout.h. ◆ operator=(). TGXYLayout & TGXYLayout::operator= ; (; const TGXYLayout & ; xyl). protected . assignment operator ; Definition at line 215 of file TGXYLayout.cxx. ◆ SavePrimitive(). void TGXYLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save XY layout manager as a C++ statement(s) on output stream. ; Reimplemented from TObject.; Definition at line 306 of file TGXYLayout.cxx. ◆ Streamer(). void TGXYLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGXYLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 83 of file TGXYLayout.h. Member Data Documentation. ◆ fFirst. Bool_t TGXYLayout::fFirst. protected . flag to determine the first call of Layout() ; Definition at line 64 of file TGXYLayout.h. ◆ fFirstHeight. UInt_t TGXYLayout::fFirstHeight. protected . original height of the frame fMain ; Definition at line 66 of file TGXYLayout.h. ◆ fFirstWidth. UInt_t TGXYLayout::fFirstWidth. protected . original width of the frame fMain ; Definition at line 65 of file TGXYLayout.h. ◆ fList. TList* TGXYLayout::fList. protected . list of frames to arrange ; Definition at line 61 of file TGXYLayout.h. ◆ fMain. TGCompositeFrame* TGXYLayout::fMain. protected . container frame ; Definition at line 62 of file TGXYLayout.h. ◆ fTHeight. Int_t TGXYLayout::fTHeight. protected . text height ; Definition at line 69 of file TGXYLayout.h. ◆ fTWidth. Int_t TGXYLayout::fTWidth. protected . text width of a default character ""1234567890"" / 10 ; Definition at line 68 of file TGXYLayout.h. Libraries for TGXYLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGXYLayout.h; gui/gui/src/TGXYLayout.cxx. TGXYLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGXYLayout.html:16392,Guid,Guide,16392,doc/master/classTGXYLayout.html,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html,1,['Guid'],['Guide']
Usability,"ition at line 8352 of file TCling.cxx. ◆ ClassInfo_Property(). Long_t TCling::ClassInfo_Property ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8392 of file TCling.cxx. ◆ ClassInfo_Size(). int TCling::ClassInfo_Size ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8400 of file TCling.cxx. ◆ ClassInfo_Tagnum(). Longptr_t TCling::ClassInfo_Tagnum ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8408 of file TCling.cxx. ◆ ClassInfo_Title(). const char * TCling::ClassInfo_Title ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8442 of file TCling.cxx. ◆ ClassInfo_TmpltName(). const char * TCling::ClassInfo_TmpltName ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8450 of file TCling.cxx. ◆ ClearFileBusy(). void TCling::ClearFileBusy ; (; ). finalvirtual . Reset the interpreter internal state in case a previous action was not correctly terminated. ; Implements TInterpreter.; Definition at line 3077 of file TCling.cxx. ◆ ClearStack(). void TCling::ClearStack ; (; ). finalvirtual . Delete existing temporary values. ; Implements TInterpreter.; Definition at line 3085 of file TCling.cxx. ◆ CodeComplete(). void TCling::CodeComplete ; (; const std::string & ; line, . size_t & ; cursor, . std::vector< std::string > & ; completions . ). finalvirtual . The call to Cling's tab complition. ; Reimplemented from TInterpreter.; Definition at line 7670 of file TCling.cxx. ◆ CreateEnum(). TEnum * TCling::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. finalvirtual . Implements TInterpreter.; Definition at line 469 of file TCling.cxx. ◆ CreateListOfBaseClasses(). void TCling::CreateListOfBaseClasses ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to base class(es) for TClass cl. ; Implements TI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:75857,Clear,ClearFileBusy,75857,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Clear'],['ClearFileBusy']
Usability,"ition at line 85 of file GSLMultiRootFinder.cxx. ◆ ~GSLMultiRootFinder(). ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFinder ; (; ). virtual . destructor ; Definition at line 95 of file GSLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7727,Clear,Clear,7727,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['Clear'],['Clear']
Usability,"ition at line 889 of file TStructViewerGUI.cxx. ◆ SetLinksVisibility(). void TStructViewerGUI::SetLinksVisibility ; (; Bool_t ; val). Sets links visibility to ""visible"". ; Definition at line 767 of file TStructViewerGUI.cxx. ◆ SetNodePtr(). void TStructViewerGUI::SetNodePtr ; (; TStructNode * ; val). Sets top node pointer and updates view. ; Definition at line 758 of file TStructViewerGUI.cxx. ◆ SetPointerButtonSlot(). void TStructViewerGUI::SetPointerButtonSlot ; (; ). Sets pointer given in fPointerTestEntry to the main pointer. ; Definition at line 779 of file TStructViewerGUI.cxx. ◆ ShowLinksToggled(). void TStructViewerGUI::ShowLinksToggled ; (; Bool_t ; on). Changes links visibility and refresh view. ; Definition at line 788 of file TStructViewerGUI.cxx. ◆ UnCheckMaxObjects(). void TStructViewerGUI::UnCheckMaxObjects ; (; ). private . Shows hidden nodes. ; Definition at line 798 of file TStructViewerGUI.cxx. ◆ UndoButtonSlot(). void TStructViewerGUI::UndoButtonSlot ; (; ). UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ; Definition at line 873 of file TStructViewerGUI.cxx. ◆ Update(). void TStructViewerGUI::Update ; (; Bool_t ; resetCamera = false). Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ; Definition at line 814 of file TStructViewerGUI.cxx. ◆ UpdateButtonSlot(). void TStructViewerGUI::UpdateButtonSlot ; (; ). Update button slot. Updates scene. ; Definition at line 840 of file TStructViewerGUI.cxx. ◆ UpdateLabels(). void TStructViewerGUI::UpdateLabels ; (; TStructNode * ; node). private . Refresh information in labels when user put mouse over object. ; Definition at line 848 of file TStructViewerGUI.cxx. Member Data Documentation. ◆ fAllMembersCountLabel. TGLabel* TStructViewerGUI::fAllMembersCountLabel. private . Definition at line 64 of file TStructViewerGUI.h. ◆ fAutoRefesh. TGCheckButton* TStructViewerGUI::fAutoRefesh. private . Definition at line 76 of file TStruc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:45714,Undo,UndoButton,45714,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['UndoButton']
Usability,"ition of ECellValue . Definition at line 119 of file PDEFoamKernelGauss.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamKernelGauss::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamKernelBase.; Definition at line 61 of file PDEFoamKernelGauss.h. ◆ Sqr(). template<typename T > . T TMVA::PDEFoamKernelGauss::Sqr ; (; T ; x); const. inlineprotected . Definition at line 45 of file PDEFoamKernelGauss.h. ◆ Streamer(). virtual void TMVA::PDEFoamKernelGauss::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamKernelBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamKernelGauss::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file PDEFoamKernelGauss.h. ◆ WeightGaus(). Float_t TMVA::PDEFoamKernelGauss::WeightGaus ; (; PDEFoam * ; foam, . PDEFoamCell * ; cell, . std::vector< Float_t > & ; txvec . ). protected . Returns the gauss weight between the 'cell' and a given coordinate 'txvec'. ; Parameters:; cell - the cell; txvec - the transformed event variables (in [0,1]) (coordinates <0 are set to 0, >1 are set to 1). Returns:. \[; e^(\frac{-(\frac{d}{\sigma})^2}{2}); \]. where:; d - is the euclidean distance between 'txvec' and the point of the 'cell' which is most close to 'txvec' (in order to avoid artefacts because of the form of the cells).; \( sigma = \frac{1}{VolFrac} \) . Definition at line 182 of file PDEFoamKernelGauss.cxx. Member Data Documentation. ◆ fSigma. Float_t TMVA::PDEFoamKernelGauss::fSigma. protected . width of gauss curve ; Definition at line 42 of file PDEFoamKernelGauss.h. Libraries for TMVA::PDEFoamKernelGauss:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamKernelGauss.h; tmva/tmva/src/PDEFoamKernelGauss.cxx. TMVAPDEFoamKernelGauss. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html:15798,Guid,Guide,15798,doc/master/classTMVA_1_1PDEFoamKernelGauss.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html,1,['Guid'],['Guide']
Usability,"ition; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for volume editor. ~TGeoConeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current parameters. void DoModified(); Slot for modifing current parameters. void DoUndo(); Slot for undoing current operation. void DoRmin1(); Slot for Rmin1. void DoRmax1(); Slot for Rmax1. void DoRmin2(); Slot for Rmin2. void DoRmax2(); Slot for Rmax2. void DoDz(); Slot for Dz. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeEditor.html:21598,undo,undoing,21598,root/html534/TGeoConeEditor.html,https://root.cern,https://root.cern/root/html534/TGeoConeEditor.html,1,['undo'],['undoing']
Usability,"itioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. More...;  ; class  TGeoPNEntry;  The knowledge of the path to the objects that need to be misaligned is essential since there is no other way of identifying them. More...;  ; class  TGeoRCExtension;  Reference counted extension which has a pointer to and owns a user defined TObject. More...;  ; class  TGeoRCPtr< T >;  A reference counting-managed pointer for classes derived from TGeoExtension which can be used as C pointer. More...;  ; class  TGeoRegion;  Regions are groups of volumes having a common set of user tracking cuts. More...;  ; class  TGeoRotation;  Class describing rotations. More...;  ; class  TGeoScale;  Class describing scale transformations. More...;  ; class  TGeoScaledShape;  A shape scaled by a TGeoScale transformation. More...;  ; class  TGeoStateInfo;  Statefull info for the current geometry level. More...;  ; class  TGeoTessellated;  Tessellated solid class. More...;  ; class  TGeoTranslation;  Class describing translations. More...;  ; class  TGeoUniformMagField;  Implementation for uniform magnetic field. More...;  ; class  TGeoVector3;  Simple 3-vector representation. More...;  ; class  TGeoVGConverter;  Geometry converter to VecGeom. More...;  ; class  TGeoVGShape;  Bridge class for using a VecGeom solid as TGeoShape. More...;  ; class  TGeoVolumeAssembly;  Volume assemblies. More...;  ; class  TGeoVolumeMulti;  Volume families. More...;  ; class  TGeoVoxelFinder;  Finder class handling voxels. More...;  ; class  TVirtualGeoConverter;  Abstract class for geometry converters. More...;  ; class  TVirtualGeoPainter;  Abstract class for geometry painters. More...;  ; class  TVirtualGeoTrack;  Base class for user-defined tracks attached to a geometry. More...;  ; class  TVirtualMagField;  Abstract class for magnetic field. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry__classes.html:4340,Simpl,Simple,4340,doc/master/group__Geometry__classes.html,https://root.cern,https://root.cern/doc/master/group__Geometry__classes.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,"itive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:7673,Clear,ClearThreadData,7673,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,2,['Clear'],['ClearThreadData']
Usability,"itive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classes, the Streamercalls the Streamerof the parent classes. It moves up the inheritance tree until it reaches an ancestor without a parent. To serialize the object data members it calls their Streamer. They in turn move up their own inheritance tree and so forth. The simple data members are written to the buffer directly. Eventually the buffer contains all simple data members of all the classes that make up this particular object. Data members that are references (as MyClass &fObj;) are never saved, it is always the responsibility of the object’s constructor to set them properly.; 11.3.1 Automatically Generated Streamers; A Streamerusually calls other Streamers: the Streamerof its parents and data members. This architecture depends on all classes having Streamers, because eventually they will be called. To ensure that a class has a Streamer, rootcling automatically creates one in the ClassDef macro that is defined in $ROOTSYS/include/Rtypes.h. ClassDef defines several methods for any class, and one of them is the Streamer. The automatically generated Streameris complete and can be used as long as no customization is needed.; The Event class is defined in $ROOTSYS/test/Event.h. Looking at the class definition, we find that it inherits from TObject. It is a simple example of a class with diverse data members.; class Event : public TObject {; private:; TDirect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:466856,simpl,simple,466856,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"itle (std::ostream &os) const override;  Print binning title. ;  ; void printValue (std::ostream &os) const override;  Print binning value, i.e the bin boundary positions. ;  ; virtual void removeHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon removal from a RooAbsRealLValue. ;  ; virtual void setMax (double xhi);  Change upper bound to xhi. ;  ; virtual void setMin (double xlo);  Change lower bound to xlo. ;  ; virtual void setRange (double xlo, double xhi)=0;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:3584,Clear,Clear,3584,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['Clear'],['Clear']
Usability,"itle to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2D.html:19395,Clear,Clear,19395,root/html532/TGraph2D.html,https://root.cern,https://root.cern/root/html532/TGraph2D.html,1,['Clear'],['Clear']
Usability,"itle, RooAbsReal& nll, const RooArgSet& observables); Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooProfileLL(const RooProfileLL& other, const char* name = 0); Copy constructor. ~RooProfileLL(); Destructor. const RooArgSet& bestFitParams() const. const RooArgSet& bestFitObs() const. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Optimized implementation of createProfile for profile likelihoods.; Return profile of original function in terms of stated parameters; of interest rather than profiling recursively. void initializeMinimizer() const. Double_t evaluate() const; Evaluate profile likelihood by minimizing likelihood w.r.t. all; parameters that are not considered observables of this profile; likelihood object. void validateAbsMin() const; Check that parameters and likelihood value for 'best fit' are still valid. If not,; because the best fit has never been calculated, or because constant parameters have; changed value or parameters have changed const/float status, the minimum is recalculated. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). TObject* clone(const char* newname) const; { return new RooProfileLL(*this,newname); }. void setAlwaysStartFromMin(Bool_t flag); { _startFromMin = flag ; }. Bool_t alwaysStartFromMin() const; { return _startFromMin ; }. MINIMIZER* minimizer(); { return _minimizer ; }. RooAbsReal& nll(); { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void clearAbsMin(); { _absMinValid = kFALSE ; }. Int_t numEval() const; { return _neval ; }. » Last changed: Tue Jun 2 15:33:08 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProfileLL.html:40251,clear,clearAbsMin,40251,root/html604/RooProfileLL.html,https://root.cern,https://root.cern/root/html604/RooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"itlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookTree.html:3919,undo,undo,3919,root/html528/THbookTree.html,https://root.cern,https://root.cern/root/html528/THbookTree.html,6,['undo'],['undo']
Usability,"itness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GeneticMinimizer.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11394,Clear,Clear,11394,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"itor objects. ;  ; void MarkBad (TSocket *s, const char *reason=0);  Add slave with socket s to the bad slave list and remove if from the active list and from the two monitor objects. ;  ; Int_t ModifyWorkerLists (const char *ord, Bool_t add, Bool_t save);  Modify the worker active/inactive list by making the worker identified by the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE). ;  ; void NotifyLogMsg (const char *msg, const char *sfx=""\n"");  Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ;  ; void operator= (const TProof &);  ; void ParseConfigField (const char *config);  The config file field may contain special instructions which need to be parsed at the beginning, e.g. ;  ; Int_t Ping (ESlaves list);  Ping PROOF slaves. Returns the number of slaves that responded. ;  ; void PrintProgress (Long64_t total, Long64_t processed, Float_t procTime=-1., Long64_t bytesread=-1);  Print a progress bar on stderr. Used in batch mode. ;  ; Bool_t Prompt (const char *p);  Prompt the question 'p' requiring an answer y,Y,n,N Return kTRUE is the answer was y or Y, kFALSE in all other cases. ;  ; void RecvLogFile (TSocket *s, Int_t size);  Receive the log file of the slave with socket s. ;  ; void RedirectWorker (TSocket *s, TSlave *sl, Int_t output_size);  Redirect output of worker sl to some merger. ;  ; void ReleaseMonitor (TMonitor *mon);  Release the used monitor to be used, making sure to delete newly created monitors. ;  ; void ResetMergePrg ();  Reset the merge progress notificator. ;  ; void ResetMergers ();  ; Int_t RestoreActiveList ();  Restore saved list of active workers. ;  ; void SaveActiveList ();  Save current list of active workers. ;  ; Int_t SendCommand (const char *cmd, ESlaves list=kActive);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t SendCurrentState (ESlaves list=kActive);  Transfer the current state of the master to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:51711,progress bar,progress bar,51711,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['progress bar'],['progress bar']
Usability,itor.cxx. ◆ CreateBinTab(). void TH1Editor::CreateBinTab ; (; ). protected . Create binning tab. ; Definition at line 340 of file TH1Editor.cxx. ◆ Dividers(). Int_t * TH1Editor::Dividers ; (; Int_t ; n). Return an array of dividers of n (without the trivial divider n). ; The number of dividers is saved in the first entry. ; Definition at line 2417 of file TH1Editor.cxx. ◆ DoAddB(). void TH1Editor::DoAddB ; (; Bool_t ; on). virtual . Slot connected to the bar Add check box. ; Definition at line 948 of file TH1Editor.cxx. ◆ DoAddBar(). void TH1Editor::DoAddBar ; (; Bool_t ; on). virtual . Slot connected to the bar Add check box. ; Definition at line 991 of file TH1Editor.cxx. ◆ DoAddMarker(). void TH1Editor::DoAddMarker ; (; Bool_t ; on). virtual . Slot connected to the show markers check box. ; Definition at line 902 of file TH1Editor.cxx. ◆ DoAddSimple(). void TH1Editor::DoAddSimple ; (; Bool_t ; on). virtual . Slot connected to fAddSimple check box for drawing a simple histogram without errors (== HIST draw option) in combination with some other draw options. ; It draws an additional line on the top of the bins. ; Definition at line 1092 of file TH1Editor.cxx. ◆ DoApply(). void TH1Editor::DoApply ; (; ). virtual . Slot connected to the Apply button of the Binning tab. ; Definition at line 2128 of file TH1Editor.cxx. ◆ DoAxisRange(). void TH1Editor::DoAxisRange ; (; ). virtual . Slot connected to the number entry fields containing the Max/Min value of the x-axis. ; Definition at line 1658 of file TH1Editor.cxx. ◆ DoBarOffset(). void TH1Editor::DoBarOffset ; (; ). virtual . Slot connected to the Bar Offset of the Bar Charts. ; Definition at line 1404 of file TH1Editor.cxx. ◆ DoBarWidth(). void TH1Editor::DoBarWidth ; (; ). virtual . Slot connected to the Bar Width of the Bar Charts. ; Definition at line 1394 of file TH1Editor.cxx. ◆ DoBinLabel(). void TH1Editor::DoBinLabel ; (; ). virtual . Slot connected to the Bin number entry of the Rebinning tab. ; Definition at ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:47339,simpl,simple,47339,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['simpl'],['simple']
Usability,"itor::fP6old[3]. private . Definition at line 110 of file TH1Editor.h. ◆ fP7old. Float_t TH1Editor::fP7old[3]. private . Definition at line 111 of file TH1Editor.h. ◆ fP8old. Float_t TH1Editor::fP8old[3]. private . Definition at line 112 of file TH1Editor.h. ◆ fPercentCombo. TGComboBox* TH1Editor::fPercentCombo. protected . Percentage of the Bar which is drawn in a different color. ; Definition at line 59 of file TH1Editor.h. ◆ fPx1old. Int_t TH1Editor::fPx1old. private . Definition at line 97 of file TH1Editor.h. ◆ fPx2old. Int_t TH1Editor::fPx2old. private . Definition at line 99 of file TH1Editor.h. ◆ fPy1old. Int_t TH1Editor::fPy1old. private . Definition at line 98 of file TH1Editor.h. ◆ fPy2old. Int_t TH1Editor::fPy2old. private . Definition at line 100 of file TH1Editor.h. ◆ fSameOpt. Bool_t TH1Editor::fSameOpt. protected . flag for option ""same"" ; Definition at line 37 of file TH1Editor.h. ◆ fSldMax. TGNumberEntryField* TH1Editor::fSldMax. protected . Contains the maximum value of the x-Axis. ; Definition at line 79 of file TH1Editor.h. ◆ fSldMin. TGNumberEntryField* TH1Editor::fSldMin. protected . Contains the minimum value of the x-Axis. ; Definition at line 78 of file TH1Editor.h. ◆ fSlider. TGDoubleHSlider* TH1Editor::fSlider. protected . Slider to set x-axis range. ; Definition at line 77 of file TH1Editor.h. ◆ fTitle. TGTextEntry* TH1Editor::fTitle. protected . histogram title input field ; Definition at line 40 of file TH1Editor.h. ◆ fTitlePrec. Int_t TH1Editor::fTitlePrec. protected . font precision level ; Definition at line 39 of file TH1Editor.h. ◆ fTypeCombo. TGComboBox* TH1Editor::fTypeCombo. protected . histogram type combo box ; Definition at line 46 of file TH1Editor.h. Libraries for TH1Editor:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TH1Editor.h; gui/ged/src/TH1Editor.cxx. TH1Editor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:62712,Guid,Guide,62712,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['Guid'],['Guide']
Usability,"its are set.; 1152/// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; 1153/// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; 1154/// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; 1155/// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; 1156///; 1157///; 1158/// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; 1159/// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; 1160///; 1161/// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; 1162/// un-weighted least-square (chi-square) method.; 1163///; 1164///; 1165///\anchor GFitErrors; 1166/// ### TGraphErrors fit:; 1167///; 1168/// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; 1169/// is projected along the y-direction by calculating the function at the points `x-ex_low` and; 1170/// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; 1171/// The chi-square is then computed as the sum of the quantity below at each data point:; 1172///; 1173/// \f[; 1174/// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; 1175/// \f]; 1176///; 1177/// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; 1178/// function `f(x)`.; 1179///; 1180/// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; 1181///; 1182/// The approach used to approximate the uncertainty in y because of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:40720,simpl,simple,40720,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['simpl'],['simple']
Usability,"its current attributes. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetHistogram (TH2F *h);  ; void SetMargin (Double_t);  Set the margin around the plot in %. ;  ; void SetMaxMarkerSize (Double_t max);  Set the largest marker size used to paint the markers. ;  ; void SetMinMarkerSize (Double_t min);  Set the smallest marker size used to paint the markers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTScatter.html:4738,Clear,Clear,4738,doc/master/classTScatter.html,https://root.cern,https://root.cern/doc/master/classTScatter.html,1,['Clear'],['Clear']
Usability,"its is added, call SetFloat() before adding the bin. ; Definition at line 297 of file TH2Poly.cxx. ◆ AddBinToPartition(). void TH2Poly::AddBinToPartition ; (; TH2PolyBin * ; bin). protected . Adds the input bin into the partition cell matrix. ; This method is called in AddBin() and ChangePartition(). ; Definition at line 443 of file TH2Poly.cxx. ◆ ChangePartition(). void TH2Poly::ChangePartition ; (; Int_t ; n, . Int_t ; m . ). Changes the number of partition cells in the histogram. ; Deletes the old partition and constructs a new one. ; Definition at line 515 of file TH2Poly.cxx. ◆ Class(). static TClass * TH2Poly::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH2Poly::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH2Poly::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TH2Poly.h. ◆ ClearBinContents(). void TH2Poly::ClearBinContents ; (; ). Clears the contents of all bins in the histogram. ; Definition at line 566 of file TH2Poly.cxx. ◆ Clone(). TObject * TH2Poly::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TH1.; Definition at line 554 of file TH2Poly.cxx. ◆ ComputeIntegral(). Double_t TH2Poly::ComputeIntegral ; (; Bool_t ; ). overridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH1.; Definition at line 1728 of file TH2Poly.cxx. ◆ Copy(). void TH2Poly::Copy ; (; TObject & ; newth2p); const. overridevirtual . Copy function for TH2Poly. ; Reimplemented from TH2.; Definition at line 212 of file TH2Poly.cxx. ◆ CreateBin(). TH2PolyBin * TH2Poly::CreateBin ; (; TObject * ; poly). virtual . Create appropriate histogram bin. ; e.g. TH2Poly creates TH2PolyBin, TProfile2Poly creates TProfile2PolyBin This is done so that TH2Poly::AddBin does not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:69354,Clear,ClearBinContents,69354,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['Clear'],['ClearBinContents']
Usability,"its local reference frame for each of them.; The objects referencing a volume and a transformation are called NODES and; their creation is fully handled by the modeler. They represent the link; elements in the hierarchy of volumes. Nodes are unique and distinct geometrical; objects ONLY from their container point of view. Since volumes can be replicated; in the geometry, the same node may be found on different branches. /*. */. An important observation is that volume objects are owned by the TGeoManager; class. This stores a list of all volumes in the geometry, that is cleaned; upon destruction. Let's consider positioning now our wire in the middle of a gas chamber. We; need first to define the gas chamber :. TGeoVolume *chamber = gGeoManager->MakeTube(""CHAMBER"", ptrGAS, 0, 1, 1);. Now we can put the wire inside :. chamber->AddNode(wire_co, 1);. If we inspect now the chamber volume in a browser, we will notice that it has; one daughter. Of course the gas has some container also, but let's keep it like; that for the sake of simplicity. The full prototype of AddNode() is :. TGeoVolume::AddNode(TGeoVolume *daughter, Int_t usernumber,; TGeoMatrix *matrix=gGeoIdentity). Since we did not supplied the third argument, the wire will be positioned with; an identity transformation inside the chamber. One will notice that the inner; radii of the wire and chamber are both zero - therefore, aren't the two volumes; overlapping ? The answer is no, the modeler is even relaying on the fact that; any daughter is fully contained by its mother. On the other hand, neither of; the nodes positioned inside a volume should overlap with each other. We will; see that there are allowed some exceptions to those rules. Overlapping volumes. Positioning volumes that does not overlap their neighbours nor extrude; their container is sometimes quite strong constraint. Some parts of the geometry; might overlap naturally, e.g. two crossing tubes. The modeller supports such; cases only if the overlapping",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:5867,simpl,simplicity,5867,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simplicity']
Usability,"its local reference frame for each of them.; The objects referencing a volume and a transformation are called NODES and; their creation is fully handled by the modeler. They represent the link; elements in the hierarchy of volumes. Nodes are unique and distinct geometrical; objects ONLY from their container point of view. Since volumes can be replicated; in the geometry, the same node may be found on different branches. /*. */. An important observation is that volume objects are owned by the TGeoManager; class. This stores a list of all volumes in the geometry, that is cleaned; upon destruction. Let's consider positioning now our wire in the middle of a gas chamber. We; need first to define the gas chamber :. TGeoVolume *chamber = gGeoManager->MakeTube(""CHAMBER"", ptrGAS, 0, 1, 1);. Now we can put the wire inside :. chamber->AddNode(wire_co, 1);. If we inspect now the chamber volume in a browser, we will notice that it has; one daughter. Of course the gas has some container also, but let's keep it like; that for the sake of simplicity. The full prototype of AddNode() is :. TGeoVolume::AddNode(TGeoVolume *daughter, Int_t usernumber,; TGeoMatrix *matrix=gGeoIdentity). Since we did not supplied the third argument, the wire will be positioned with; an identity transformation inside the chamber. One will notice that the inner; radii of the wire and chamber are both zero - therefore, aren't the two volumes; overlapping ? The answer is no, the modeler is even relaying on the fact that; any daughter is fully contained by its mother. On the other hand, neither of; the nodes positioned inside a volume should overlap with each other. We will; see that there are allowed some exceptions to those rules. Overlapping volumes. Positioning volumes that does not overlap their neighbours nor extrude; their container is sometimes quite strong contrain. Some parts of the geometry; might overlap naturally, e.g. two crossing tubes. The modeller supports such; cases only if the overlapping n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:5847,simpl,simplicity,5847,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,9,['simpl'],['simplicity']
Usability,"its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::model; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooChebychev::bkg; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::x; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a0; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset modelData; ; RooWorkspace(w) workspace contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 1; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 1/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 1/1; RooGaussian::sig1[ x=x mean=mean sigma=sigma1 ] = 1; RooGaussian::sig2[ x=x mean=mean sigma=sigma2 ] = 1; ; datasets; --------; RooDataSet::modelData(x); ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf502_wspacewrite.py. tutorialsroofitrf502_wspacewrite.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf502__wspacewrite_8py.html:4197,Guid,Guide,4197,doc/master/rf502__wspacewrite_8py.html,https://root.cern,https://root.cern/doc/master/rf502__wspacewrite_8py.html,1,['Guid'],['Guide']
Usability,"its { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TMethodBrowsable(). TMethodBrowsable::~TMethodBrowsable ; (; ). inlineoverride . Definition at line 105 of file TBranchBrowsable.h. ◆ TMethodBrowsable(). TMethodBrowsable::TMethodBrowsable ; (; const TBranch * ; branch, . TMethod * ; m, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor. ; Links a TBranchElement to a TMethod, allowing the TBrowser to browse simple methods.; The c'tor sets the name for a method ""Class::Method(params) const"" to ""Method(params)"", title to TMethod::GetPrototype ; Definition at line 409 of file TBranchBrowsable.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodBrowsable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodBrowsable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodBrowsable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TBranchBrowsable.h. ◆ DeclFileName(). static const char * TMethodBrowsable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TBranchBrowsable.h. ◆ GetBrowsableMethodsForClass(). void TMethodBrowsable::GetBrowsableMethodsForClass ; (; TClass * ; cl, . TList & ; li . ). staticprotected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodBrowsable.html:16280,simpl,simple,16280,doc/master/classTMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html,1,['simpl'],['simple']
Usability,"its; printf(""Integral of function = %g\n"",func->Integral(-2,2));; }; TCanvas.h; TF1.h; TFile.h; TH1F.h; TInterpreter.h; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TCanvasThe Canvas class.Definition TCanvas.h:23; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TF11-Dim function classDefinition TF1.h:233; TF1::Integralvirtual Double_t Integral(Double_t a, Double_t b, Double_t epsrel=1.e-12)IntegralOneDim or analytical integral.Definition TF1.cxx:2531; TF1::SetParNamesvirtual void SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")Set up to 10 parameter names.Definition TF1.cxx:3463; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; AuthorRene Brun ; Definition in file myfit.C. tutorialsfitmyfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/myfit_8C.html:3825,Guid,Guide,3825,doc/master/myfit_8C.html,https://root.cern,https://root.cern/doc/master/myfit_8C.html,1,['Guid'],['Guide']
Usability,"itsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TToggleGroup. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operator. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TToggleGroup.html:7141,clear,clears,7141,root/html604/TToggleGroup.html,https://root.cern,https://root.cern/root/html604/TToggleGroup.html,1,['clear'],['clears']
Usability,"itsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TToggleGroup. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operator. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TToggleGroup.html:7141,clear,clears,7141,root/html602/TToggleGroup.html,https://root.cern,https://root.cern/root/html602/TToggleGroup.html,1,['clear'],['clears']
Usability,"itted by Anonymous (not verified) on Thu, 07/23/2015 - 21:48 Permalink . Other Python bindings . I noticed that there are multiple other ways to call C++ code from Python, one of them being included in the Boost library. What would it do to the complexity (and dependencies) to use an interface that doesn't build on top of CINT/Reflex?. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . Re: Other Python bindings . Hi Bram,; Thanks for your question. The main issue about the boost binding is that it is - as far as I understand - completely static and intrusive. PyROOT on the other hand is based on refection data, and it has features that e.g. the Boost binding doesn't offer (e.g. the mapping of concepts). Other bindings (e.g. SWIG-based ones) are difficult to maintain, not compatible with C++, and don't offer PyROOT's features either. So the cost is both on the implementation side and the feature side. Thus why not simply use PyROOT? :-); Note that we will soon have a PyROOT that builds on top of clang, as part of ROOT 6. I think Wim (the author of PyROOT) plans to port it to a version without ROOT, likely involving PyPy. So that might be exactly what you are looking for :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . Re: Other Python bindings . Hi Bram, Axel,; let me add to that (and point out that none of the mentioned tools are intrusive, btw.). The biggest problem with boost.python (with pyste; standalone it is a non-starter) and SWIG is that you need to run a separate tool to create and compile bindings. On top, these bindings are compiled against a specific version of Python, making for a distribution headache (just see the non-pickup of Python3 because of this problem). Compare: dictionaries are already available for all the most important classes in experiments, the EDM, because they are generated for I/O needs. They also do not depend on Python, and thus not on any specific version (onl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:6205,simpl,simply,6205,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simply']
Usability,"itter, TGHSplitter, and TGVFileSplitter. ◆ IsA(). TClass * TGSplitter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Reimplemented in TGVSplitter, and TGVFileSplitter.; Definition at line 49 of file TGSplitter.h. ◆ Moved(). void TGSplitter::Moved ; (; Int_t ; delta). Emit Moved signal. ; Definition at line 61 of file TGSplitter.cxx. ◆ operator=(). TGSplitter & TGSplitter::operator= ; (; const TGSplitter & ; ). privatedelete . ◆ SetExternalHandler(). void TGSplitter::SetExternalHandler ; (; Bool_t ; x). inline . Definition at line 47 of file TGSplitter.h. ◆ SetFrame(). virtual void TGSplitter::SetFrame ; (; TGFrame * ; frame, . Bool_t ; prev . ). pure virtual . Implemented in TGHSplitter, and TGVSplitter. ◆ Streamer(). void TGSplitter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame.; Reimplemented in TGVSplitter, and TGVFileSplitter. ◆ StreamerNVirtual(). void TGSplitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file TGSplitter.h. Member Data Documentation. ◆ fDragging. Bool_t TGSplitter::fDragging. protected . true if in dragging mode ; Definition at line 23 of file TGSplitter.h. ◆ fExternalHandler. Bool_t TGSplitter::fExternalHandler. protected . true when splitter movement is handled externally ; Definition at line 24 of file TGSplitter.h. ◆ fSplitCursor. Cursor_t TGSplitter::fSplitCursor. protected . split cursor ; Definition at line 22 of file TGSplitter.h. ◆ fSplitterPic. const TGPicture* TGSplitter::fSplitterPic. protected . picture to draw splitter ; Definition at line 25 of file TGSplitter.h. Libraries for TGSplitter:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGSplitter.h; gui/gui/src/TGSplitter.cxx. TGSplitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitter.html:31661,Guid,Guide,31661,doc/master/classTGSplitter.html,https://root.cern,https://root.cern/doc/master/classTGSplitter.html,1,['Guid'],['Guide']
Usability,"ity = kDefaultCapacity); Create an ordered collection. ~TOrdCollection(); Delete the collection. Objects are not deleted unless the TOrdCollection; is the owner (set via SetOwner()). void AddAt(TObject* obj, Int_t idx); Insert object at position idx in the collection. void AddFirst(TObject* obj); Insert object at beginning of collection. void AddLast(TObject* obj); Add object at the end of the collection. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the collection. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the collection. TObject * After(const TObject* obj) const; Return the object after object obj. Returns 0 if obj is last; in collection. TObject * At(Int_t idx) const; Returns the object at position idx. Returns 0 if idx is out of range. TObject * Before(const TObject* obj) const; Returns the object before object obj. Returns 0 if obj is first; in collection. void Clear(Option_t* option = """"); Remove all objects from the collection. Does not delete the objects; unless the TOrdCollection is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Remove all objects from the collection AND delete all heap based objects. TObject * First() const; Return the first object in the collection. Returns 0 when collection; is empty. TObject ** GetObjectRef(const TObject* obj) const; return address of pointer obj. TObject * Last() const; Return the last object in the collection. Returns 0 when collection; is empty. Bool_t IllegalIndex(const char* method, Int_t idx) const; Return true when index out of bounds and print error. Int_t IndexOf(const TObject* obj) const; Return index of object in collection. Returns -1 when object not found.; Uses member IsEqual() to find object. void Init(Int_t capacity); Initialize ordered collection. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Return an ordered collection iterator. void MoveGapTo(Int_t newGapStart); Move gap to new p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TOrdCollection.html:10494,Clear,Clear,10494,root/html528/TOrdCollection.html,https://root.cern,https://root.cern/root/html528/TOrdCollection.html,6,['Clear'],['Clear']
Usability,"ity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165140,learn,learn,165140,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['learn'],['learn']
Usability,"ity in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:12831,Clear,ClearUnderflowAndOverflow,12831,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,15,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ity in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:12339,Clear,ClearUnderflowAndOverflow,12339,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,3,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ity in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:20832,Clear,ClearUnderflowAndOverflow,20832,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ity slots and refills the table. Use AverageCollisions() to check if you need to rehash. ; Definition at line 368 of file THashList.cxx. ◆ Remove() [1/2]. TObject * THashList::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Implements TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 378 of file THashList.cxx. ◆ Remove() [2/2]. TObject * THashList::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from TList.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 391 of file THashList.cxx. ◆ Streamer(). void THashList::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates. ◆ StreamerNVirtual(). void THashList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file THashList.h. ◆ UseRWLock(). bool THashList::UseRWLock ; (; Bool_t ; enable = true). overridevirtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented from TCollection.; Definition at line 409 of file THashList.cxx. Member Data Documentation. ◆ fTable. THashTable* THashList::fTable. protected . Definition at line 37 of file THashList.h. Libraries for THashList:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/THashList.h; core/cont/src/THashList.cxx. THashList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:34155,Guid,Guide,34155,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['Guid'],['Guide']
Usability,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructViewerGUI.html:28188,Clear,Clear,28188,root/html530/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html530/TStructViewerGUI.html,4,"['Clear', 'Undo']","['Clear', 'Undo', 'UndoButton', 'UndoButtonSlot']"
Usability,"ity() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id: TStructViewerGUI.h 30023 2009-09-02 17:57:16Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStructViewerGUI.html:28188,Clear,Clear,28188,root/html532/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html532/TStructViewerGUI.html,4,"['Clear', 'Undo']","['Clear', 'Undo', 'UndoButton', 'UndoButtonSlot']"
Usability,"ity. The ; : linearity property of this classifier is reflected in the ; : metric with which ""far apart"" and ""close vicinity"" are ; : determined: the covariance matrix of the discriminating; : variable space.); : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Optimal performance for Fisher discriminants is obtained for ; : linearly correlated Gaussian-distributed variables. Any deviation; : from this ideal reduces the achievable separation power. In ; : particular, no discrimination at all is achieved for a variable; : that has the same sample mean for signal and background, even if ; : the shapes of the distributions are very different. Thus, Fisher ; : discriminants often benefit from suitable transformations of the ; : input variables. For example, if a variable x in [-1,1] has a ; : a parabolic signal distributions, and a uniform background; : distributions, their mean value is zero in both cases, leading ; : to no separation. The simple transformation x -> |x| renders this ; : variable powerful for the use in a Fisher discriminant.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : <None>; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; Fisher : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : m_jj: -0.051; : m_jjj: +0.192; : m_lv: +0.045; : m_jlv: +0.059; : m_bb: -0.211; : m_wbb: +0.549; : m_wwbb: -0.778; : (offset): +0.136; : -----------------------; : Elapsed time for training with 14000 events: 0.0105 sec ; Fisher : [dataset] : Evaluation of Fisher on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.0038 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.090 (0.000); : Dataset[dataset] : Evaluation of Fisher on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:20156,simpl,simple,20156,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['simpl'],['simple']
Usability,"ity. The ; : linearity property of this classifier is reflected in the ; : metric with which ""far apart"" and ""close vicinity"" are ; : determined: the covariance matrix of the discriminating; : variable space.); : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Optimal performance for Fisher discriminants is obtained for ; : linearly correlated Gaussian-distributed variables. Any deviation; : from this ideal reduces the achievable separation power. In ; : particular, no discrimination at all is achieved for a variable; : that has the same sample mean for signal and background, even if ; : the shapes of the distributions are very different. Thus, Fisher ; : discriminants often benefit from suitable transformations of the ; : input variables. For example, if a variable x in [-1,1] has a ; : a parabolic signal distributions, and a uniform background; : distributions, their mean value is zero in both cases, leading ; : to no separation. The simple transformation x -> |x| renders this ; : variable powerful for the use in a Fisher discriminant.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : <None>; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; Fisher : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : m_jj: -0.051; : m_jjj: +0.192; : m_lv: +0.045; : m_jlv: +0.059; : m_bb: -0.211; : m_wbb: +0.549; : m_wwbb: -0.778; : (offset): +0.136; : -----------------------; : Elapsed time for training with 14000 events: 0.0116 sec ; Fisher : [dataset] : Evaluation of Fisher on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.00388 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.090 (0.000); : Dataset[dataset] : Evaluation of Fisher on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:20093,simpl,simple,20093,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['simpl'],['simple']
Usability,"ium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12 : symbol-medium-r-normal ""Symbol"" 0 6; *-* 13 : times-medium-r-normal ""Times New Roman"" 0 5; *-* 14 : ""Wingdings"" 0 5. void SetTextSize(Float_t textsize); Set current text size*-*-; *-* =====================. void UpdateWindow(Int_t mode); Update display.; mode : (1) update; (0) sync. Int_t WriteGIF(char* name). Writes the current active window into pixmap file.; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). Bool_t IsHandleValid(Window_t id). » Author",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGQt.html:34011,simpl,simple,34011,root/html528/TGQt.html,https://root.cern,https://root.cern/root/html528/TGQt.html,3,['simpl'],['simple']
Usability,ivate . Definition at line 47 of file TProofProgressLog.h. ◆ fLinesFrom. TGNumberEntry* TProofProgressLog::fLinesFrom. private . Definition at line 45 of file TProofProgressLog.h. ◆ fLinesTo. TGNumberEntry* TProofProgressLog::fLinesTo. private . Definition at line 46 of file TProofProgressLog.h. ◆ fLogList. TGListBox* TProofProgressLog::fLogList. private . Definition at line 41 of file TProofProgressLog.h. ◆ fLogNew. TGTextButton* TProofProgressLog::fLogNew. private . Definition at line 42 of file TProofProgressLog.h. ◆ fProofLog. TProofLog* TProofProgressLog::fProofLog. private . Definition at line 44 of file TProofProgressLog.h. ◆ fRawLines. TGCheckButton* TProofProgressLog::fRawLines. private . Definition at line 55 of file TProofProgressLog.h. ◆ fSave. TGTextButton* TProofProgressLog::fSave. private . Definition at line 51 of file TProofProgressLog.h. ◆ fSessionIdx. Int_t TProofProgressLog::fSessionIdx. private . Definition at line 37 of file TProofProgressLog.h. ◆ fSessionUrl. TString TProofProgressLog::fSessionUrl. private . Definition at line 36 of file TProofProgressLog.h. ◆ fSessNum. TGNumberEntry* TProofProgressLog::fSessNum. private . Definition at line 49 of file TProofProgressLog.h. ◆ fText. TGTextView* TProofProgressLog::fText. private . Definition at line 39 of file TProofProgressLog.h. ◆ fTextType. Int_t TProofProgressLog::fTextType. private . Definition at line 63 of file TProofProgressLog.h. ◆ fUrlButton. TGTextButton* TProofProgressLog::fUrlButton. private . Definition at line 53 of file TProofProgressLog.h. ◆ fUrlText. TGTextEntry* TProofProgressLog::fUrlText. private . Definition at line 48 of file TProofProgressLog.h. ◆ fVworkers. TGVerticalFrame* TProofProgressLog::fVworkers. private . Definition at line 57 of file TProofProgressLog.h. gui/sessionviewer/inc/TProofProgressLog.h; gui/sessionviewer/src/TProofProgressLog.cxx. TProofProgressLog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:16 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:46217,Guid,Guide,46217,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['Guid'],['Guide']
Usability,"ivate Attributes |; List of all members ; TClass::TDeclNameRegistry Class Reference. . Definition at line 158 of file TClass.h. Public Member Functions;  TDeclNameRegistry (Int_t verbLevel=0);  TDeclNameRegistry class constructor. ;  ;  ~TDeclNameRegistry ();  ; void AddQualifiedName (const char *name);  Extract this part of the name. ;  ; Bool_t HasDeclName (const char *name) const;  . Private Attributes; std::unordered_set< std::string > fClassNamesSet;  ; std::atomic_flag fSpinLock;  ; Int_t fVerbLevel =0;  . Constructor & Destructor Documentation. ◆ TDeclNameRegistry(). TClass::TDeclNameRegistry::TDeclNameRegistry ; (; Int_t ; verbLevel = 0). TDeclNameRegistry class constructor. ; Definition at line 185 of file TClass.cxx. ◆ ~TDeclNameRegistry(). TClass::TDeclNameRegistry::~TDeclNameRegistry ; (; ). Definition at line 235 of file TClass.cxx. Member Function Documentation. ◆ AddQualifiedName(). void TClass::TDeclNameRegistry::AddQualifiedName ; (; const char * ; name). Extract this part of the name. . Templates ns::ns2::,,,::THISPART<...; Namespaces,classes ns::ns2::,,,::THISPART . Definition at line 196 of file TClass.cxx. ◆ HasDeclName(). Bool_t TClass::TDeclNameRegistry::HasDeclName ; (; const char * ; name); const. Definition at line 223 of file TClass.cxx. Member Data Documentation. ◆ fClassNamesSet. std::unordered_set<std::string> TClass::TDeclNameRegistry::fClassNamesSet. private . Definition at line 169 of file TClass.h. ◆ fSpinLock. std::atomic_flag TClass::TDeclNameRegistry::fSpinLock. mutableprivate . Definition at line 170 of file TClass.h. ◆ fVerbLevel. Int_t TClass::TDeclNameRegistry::fVerbLevel =0. private . Definition at line 168 of file TClass.h. Libraries for TClass::TDeclNameRegistry:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TClass.h; core/meta/src/TClass.cxx. TClassTDeclNameRegistry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html:2104,Guid,Guide,2104,doc/master/classTClass_1_1TDeclNameRegistry.html,https://root.cern,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html,1,['Guid'],['Guide']
Usability,"ivationIdentity::Eval ; (; Double_t ; arg). inlinevirtual . Implements TMVA::TActivation.; Definition at line 49 of file TActivationIdentity.h. ◆ EvalDerivative(). virtual Double_t TMVA::TActivationIdentity::EvalDerivative ; (; Double_t ; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 52 of file TActivationIdentity.h. ◆ GetExpression(). virtual TString TMVA::TActivationIdentity::GetExpression ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 63 of file TActivationIdentity.h. ◆ GetMax(). virtual Double_t TMVA::TActivationIdentity::GetMax ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 60 of file TActivationIdentity.h. ◆ GetMin(). virtual Double_t TMVA::TActivationIdentity::GetMin ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 57 of file TActivationIdentity.h. ◆ IsA(). virtual TClass * TMVA::TActivationIdentity::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TActivation.; Definition at line 70 of file TActivationIdentity.h. ◆ MakeFunction(). void TMVA::TActivationIdentity::MakeFunction ; (; std::ostream & ; fout, . const TString & ; fncName . ). virtual . writes the identity function source code ; Implements TMVA::TActivation.; Definition at line 43 of file TActivationIdentity.cxx. ◆ Streamer(). virtual void TMVA::TActivationIdentity::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TActivation. ◆ StreamerNVirtual(). void TMVA::TActivationIdentity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TActivationIdentity.h. Libraries for TMVA::TActivationIdentity:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationIdentity.h; tmva/tmva/src/TActivationIdentity.cxx. TMVATActivationIdentity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationIdentity.html:4640,Guid,Guide,4640,doc/master/classTMVA_1_1TActivationIdentity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationIdentity.html,1,['Guid'],['Guide']
Usability,"ivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:36695,simpl,simple,36695,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['simpl'],['simple']
Usability,"ivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxillary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:32627,simpl,simple,32627,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability,"ive **fPredefined; //![fNPar] predefined function; 96 TFuncG fOptimal; //!pointer to optimal function; 97 ; 98 Int_t PreCompile();; 99 virtual Bool_t CheckOperands(Int_t operation, Int_t &err);; 100 virtual Bool_t CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t &err);; 101 virtual Bool_t StringToNumber(Int_t code);; 102 void MakePrimitive(const char *expr, Int_t pos);; 103 inline Int_t *GetOper() const { return fOper; }; 104 inline Short_t GetAction(Int_t code) const { return fOper[code] >> kTFOperShift; }; 105 inline Int_t GetActionParam(Int_t code) const { return fOper[code] & kTFOperMask; }; 106 ; 107 inline void SetAction(Int_t code, Int_t value, Int_t param = 0) {; 108 fOper[code] = (value) << kTFOperShift;; 109 fOper[code] += param;; 110 }; 111 inline Int_t *GetOperOptimized() const { return fOperOptimized; }; 112 inline Short_t GetActionOptimized(Int_t code) const { return fOperOptimized[code] >> kTFOperShift; }; 113 inline Int_t GetActionParamOptimized(Int_t code) const { return fOperOptimized[code] & kTFOperMask; }; 114 ; 115 inline void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0) {; 116 fOperOptimized[code] = (value) << kTFOperShift;; 117 fOperOptimized[code] += param;; 118 }; 119 ; 120 void ClearFormula(Option_t *option="""");; 121 virtual Bool_t IsString(Int_t oper) const;; 122 ; 123 virtual void Convert(UInt_t fromVersion);; 124 //; 125 // Functions - used for formula evaluation; 126 Double_t EvalParFast(const Double_t *x, const Double_t *params);; 127 Double_t EvalPrimitive(const Double_t *x, const Double_t *params);; 128 Double_t EvalPrimitive0(const Double_t *x, const Double_t *params);; 129 Double_t EvalPrimitive1(const Double_t *x, const Double_t *params);; 130 Double_t EvalPrimitive2(const Double_t *x, const Double_t *params);; 131 Double_t EvalPrimitive3(const Double_t *x, const Double_t *params);; 132 Double_t EvalPrimitive4(const Double_t *x, const Double_t *params);; 133 ; 134 // Action code for Version 6 and above.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/v5_2TFormula_8h_source.html:4703,Clear,ClearFormula,4703,doc/master/v5_2TFormula_8h_source.html,https://root.cern,https://root.cern/doc/master/v5_2TFormula_8h_source.html,1,['Clear'],['ClearFormula']
Usability,"ive GL output. void Constructor(const char* name, const char* title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh); Create a new canvas. wtopx,wtopy are the pixel coordinates of the top left corner of; the canvas (if wtopx < 0) the menubar is not shown); ww is the canvas size in pixels along X; wh is the canvas size in pixels along Y. void Init(); Initialize the TCanvas members. Called by all constructors. void Build(); Build a canvas. Called by all constructors. ~TCanvas(); Canvas destructor. void Browse(TBrowser* b); Browse. void Destructor(); Actual canvas destructor. TVirtualPad * cd(Int_t subpadnumber = 0); Set current canvas & pad. Returns the new current pad,; or 0 in case of failure.; See TPad::cd() for an explanation of the parameter. void Clear(Option_t* option = """"); Remove all primitives from the canvas.; If option ""D"" is specified, direct subpads are cleared but not deleted.; This option is not recursive, i.e. pads in direct subpads are deleted. void Cleared(TVirtualPad* pad); Emit pad Cleared signal. void Closed(); Emit Closed signal. void Close(Option_t* option = """"); Close canvas. Delete window/pads data structure. void CopyPixmaps(); Copy the canvas pixmap of the pad to the canvas. void Draw(Option_t* option = """"); Draw a canvas.; If a canvas with the name is already on the screen, the canvas is repainted.; This function is useful when a canvas object has been saved in a Root file.; One can then do:; Root > Tfile f(""file.root"");; Root > canvas.Draw();. TObject * DrawClone(Option_t* option = """") const; Draw a clone of this canvas; A new canvas is created that is a clone of this canvas. TObject * DrawClonePad(); Draw a clone of this canvas into the current pad; In an interactive session, select the destination/current pad; with the middle mouse button, then point to the canvas area to select; the canvas context menu item DrawClonePad.; Note that the original canvas may have subpads. void DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject* selected)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:37624,Clear,Cleared,37624,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,14,['Clear'],['Cleared']
Usability,"ive shapes supported by the package are basically the GEANT3 shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel planes. All basic primitives inherits from class TGeoBBox since the bounding box of a solid is essential for the tracking algorithms. They also implement the virtual methods defined in the virtual class TGeoShape (point and segment classification). User-defined primitives can be directly plugged into the modeler provided that they override these methods. Composite shapes will be soon supported by the modeler. In order to build a TGeoCompositeShape, one will have to define first the primitive components. The object that handle boolean operations among components is called TGeoBoolCombinator and it has to be constructed providing a string boolean expression between the components names. Example for building a simple geometry; ; void rootgeom(bool vis = true); {; // gStyle->SetCanvasPreferGL(true);; ; TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; ; //--- define some materials; TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; // //--- define some media; TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; TGeoMedium *Al = new TGeoMedium(""Root Material"",2, matAl);; ; //--- define the transformations; TGeoTranslation *tr1 = new TGeoTranslation(20., 0, 0.);; TGeoTranslation *tr2 = new TGeoTranslation(10., 0., 0.);; TGeoTranslation *tr3 = new TGeoTranslation(10., 20., 0.);; TGeoTranslation *tr4 = new TGeoTranslation(5., 10., 0.);; TGeoTranslation *tr5 = new TGeoTranslation(20., 0., 0.);; TGeoTranslation *tr6 = new TGeoTranslation(-5., 0., 0.);; TGeoTranslation *tr7 = new TGeoTranslation(7.5, 7.5, 0.);; TGeoRotation *rot1 = new TGeoRotation(""rot1"", 90., 0., 90., 270., 0., 0.);; TGeoCombiTrans *combi1 = new TGeoCombiTrans(7.5, -7.5, 0., rot1);; TGeoTranslation *tr8 = new TGeoTranslation(7.5, -5., 0.);; TGeoTranslation *tr9 = new TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:4977,simpl,simple,4977,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"ive(). void TGraphEdge::SavePrimitive ; (; std::ostream & ; , . Option_t * ;  . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 201 of file TGraphEdge.cxx. ◆ SetGVEdge(). void TGraphEdge::SetGVEdge ; (; GVizAgedge_t * ; gve). inline . Definition at line 49 of file TGraphEdge.h. ◆ Streamer(). void TGraphEdge::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 216 of file TGraphEdge.cxx. ◆ StreamerNVirtual(). void TGraphEdge::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file TGraphEdge.h. Member Data Documentation. ◆ fArrX. Double_t TGraphEdge::fArrX. protected . Arrow X position. ; Definition at line 38 of file TGraphEdge.h. ◆ fArrY. Double_t TGraphEdge::fArrY. protected . Arrow Y position. ; Definition at line 39 of file TGraphEdge.h. ◆ fGVEdge. GVizAgedge_t* TGraphEdge::fGVEdge. protected . Graphviz edge. ; Definition at line 32 of file TGraphEdge.h. ◆ fN. Int_t* TGraphEdge::fN. protected . number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ; Definition at line 35 of file TGraphEdge.h. ◆ fNode1. TGraphNode* TGraphEdge::fNode1. protected . First node. ; Definition at line 30 of file TGraphEdge.h. ◆ fNode2. TGraphNode* TGraphEdge::fNode2. protected . Second node. ; Definition at line 31 of file TGraphEdge.h. ◆ fX. Double_t* TGraphEdge::fX. protected . X edge points (GV) ; Definition at line 33 of file TGraphEdge.h. ◆ fY. Double_t* TGraphEdge::fY. protected . X edge points (GV) ; Definition at line 34 of file TGraphEdge.h. Libraries for TGraphEdge:. [legend]; The documentation for this class was generated from the following files:; graf2d/gviz/inc/TGraphEdge.h; graf2d/gviz/src/TGraphEdge.cxx. TGraphEdge. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphEdge.html:17773,Guid,Guide,17773,doc/master/classTGraphEdge.html,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html,1,['Guid'],['Guide']
Usability,"ive(const double* x, unsigned int icoord = 0) const; virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGradFunction(const TPyMultiGradFunction& src); TPyMultiGradFunction&operator=(const TPyMultiGradFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Mon Jul 4 15:36:38 2011 » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPyMultiGradFunction.html:1696,Simpl,Simply,1696,root/html530/TPyMultiGradFunction.html,https://root.cern,https://root.cern/root/html530/TPyMultiGradFunction.html,5,['Simpl'],['Simply']
Usability,"ive(const double* x, unsigned int icoord = 0) const; virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TPyMultiGradFunction(const TPyMultiGradFunction& src); TPyMultiGradFunction&operator=(const TPyMultiGradFunction&). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Thu Nov 3 20:22:00 2011 » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPyMultiGradFunction.html:1696,Simpl,Simply,1696,root/html532/TPyMultiGradFunction.html,https://root.cern,https://root.cern/root/html532/TPyMultiGradFunction.html,5,['Simpl'],['Simply']
Usability,"ived / dependant elements.Definition REveCaloData.cxx:159; ROOT::Experimental::REveDataCollectionDefinition REveDataCollection.hxx:116; ROOT::Experimental::REveDataCollection::ApplyFiltervoid ApplyFilter()Definition REveDataCollection.cxx:333; ROOT::Experimental::REveDataCollection::Ids_tstd::vector< int > Ids_tDefinition REveDataCollection.hxx:122; ROOT::Experimental::REveDataCollection::GetItemListREveDataItemList * GetItemList()Definition REveDataCollection.hxx:147; ROOT::Experimental::REveDataCollection::SetFilterExprvoid SetFilterExpr(const char *filter)Definition REveDataCollection.cxx:277; ROOT::Experimental::REveDataCollection::GetItemClassTClass * GetItemClass() constDefinition REveDataCollection.hxx:141; ROOT::Experimental::REveDataCollection::GetDataPtrvoid * GetDataPtr(Int_t i) constDefinition REveDataCollection.hxx:155; ROOT::Experimental::REveDataCollection::GetNItemsInt_t GetNItems() constDefinition REveDataCollection.hxx:154; ROOT::Experimental::REveDataCollection::ClearItemsvoid ClearItems()Definition REveDataCollection.hxx:135; ROOT::Experimental::REveDataCollection::AddItemvoid AddItem(void *data_ptr, const std::string &n, const std::string &t)Definition REveDataCollection.cxx:269; ROOT::Experimental::REveDataCollection::SetItemClassvoid SetItemClass(TClass *cls)Definition REveDataCollection.hxx:142; ROOT::Experimental::REveDataCollection::SetMainColorvoid SetMainColor(Color_t) overrideSet main color of the element.Definition REveDataCollection.cxx:407; ROOT::Experimental::REveDataCollection::GetDataItemconst REveDataItem * GetDataItem(Int_t i) constDefinition REveDataCollection.hxx:156; ROOT::Experimental::REveDataItemListDefinition REveDataCollection.hxx:62; ROOT::Experimental::REveDataItemList::AddTooltipExpressionvoid AddTooltipExpression(const std::string &title, const std::string &expr, bool init=true)Definition REveDataCollection.cxx:209; ROOT::Experimental::REveDataItemList::SetItemsChangeDelegatevoid SetItemsChangeDelegate(ItemsChangeFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:45487,Clear,ClearItemsvoid,45487,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,2,['Clear'],"['ClearItems', 'ClearItemsvoid']"
Usability,"iven expression. ;  ; std::string processExpression (const char *expr);  Process a single high-level expression or list of expressions. ;  ; RooProdPdf * prod (const char *objName, const char *pdfList);  ; RooProduct * prodfunc (const char *objName, const char *pdfList);  ; void setAutoClassNamePostFix (const char *pfix);  ; RooSimultaneous * simul (const char *objName, const char *indexCat, const char *pdfMap);  ; std::vector< std::string > splitFunctionArgs (const char *funcExpr);  Allocate and fill work buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooWorkspace & ws ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:5403,Clear,Clear,5403,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['Clear'],['Clear']
Usability,"ivide(N,Xmin,Xmax,""X"");; Create a new volume by dividing an existing one (GEANT3 like).; Divides MOTHER into NDIV divisions called NAME along axis IAXIS starting at coordinate value START and having size STEP. The created volumes will have tracking media ID=NUMED (if NUMED=0 -> same media as MOTHER).; The behavior of the division operation can be triggered using OPTION (case insensitive):. Ndivide all range in NDIV cells (same effect as STEP<=0) (GSDVN in G3); NXdivide range starting with START in NDIV cells (GSDVN2 in G3); Sdivide all range with given STEP; NDIV is computed and divisions will be centered in full range (same effect as NDIV<=0) (GSDVS, GSDVT in G3); SXsame as DVS, but from START position (GSDVS2, GSDVT2 in G3). Volume Assemblies; In general, geometry contains structures of positioned volumes that have to be grouped and handled together, for different possible reasons. One of these is that the structure has to be replicated in several parts of the geometry, or it may simply happen that they really represent a single object, too complex to be described by a primitive shape.; Usually handling structures like these can be easily done by positioning all components in the same container volume, then positioning the container itself. However, there are many practical cases when defining such a container is not straightforward or even possible without generating overlaps with the rest of the geometry. There are few ways out of this:. Defining the container for the structure as ""overlapping"" (see also ""Overlapping Volumes""); Representing the container as a composite shape - the Boolean union of all components (see also ""Composite Shapes""); Using an assembly volume - this will be described in the following. The first two approaches have the disadvantage of penalizing the navigation performance with a factor increasing more than linear of the number of components in the structure. The best solution is the third one because it uses all volume-related navigation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:50516,simpl,simply,50516,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simply']
Usability,"ividual file (each sample is simply a single file).; 376 /// In the multithreaded case, the idea is to accumulate the higher event entry value until; 377 /// the total number of events in a given file is reached.; 378 void registerNewSample(unsigned int /*slot*/, const ROOT::RDF::RSampleInfo &id); 379 {; 380 std::lock_guard<std::mutex> lock(fSampleNameToEventEntriesMutex);; 381 fSampleNameToEventEntries[id.AsString()] =; 382 std::max(id.EntryRange().second, fSampleNameToEventEntries[id.AsString()]);; 383 }; 384 ; 385 /// Thread-safe callback for RDataFrame.; 386 /// It will record elapsed times and event statistics, and print a progress bar every n seconds (set by the; 387 /// fPrintInterval). \param slot Ignored. \param value Ignored.; 388 template <typename T>; 389 void operator()(unsigned int /*slot*/, T &value); 390 {; 391 operator()(value);; 392 }; 393 // clang-format off; 394 /// Thread-safe callback for RDataFrame.; 395 /// It will record elapsed times and event statistics, and print a progress bar every n seconds (set by the fPrintInterval).; 396 /// \param value Ignored.; 397 // clang-format on; 398 template <typename T>; 399 void operator()(T & /*value*/); 400 {; 401 using namespace std::chrono;; 402 // ***************************************************; 403 // Warning: Here, everything needs to be thread safe:; 404 // ***************************************************; 405 fProcessedEvents += fIncrement;; 406 ; 407 // We only print every n seconds.; 408 if (duration_cast<seconds>(system_clock::now() - fLastPrintTime) < fPrintInterval) {; 409 return;; 410 }; 411 ; 412 // ***************************************************; 413 // Protected by lock from here:; 414 // ***************************************************; 415 if (!fPrintMutex.try_lock()); 416 return;; 417 std::lock_guard<std::mutex> lockGuard(fPrintMutex, std::adopt_lock);; 418 ; 419 std::size_t eventCount;; 420 seconds elapsedSeconds;; 421 std::tie(eventCount, elapsedSeconds) = RecordEvtCou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:18837,progress bar,progress bar,18837,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['progress bar'],['progress bar']
Usability,"ix->RegisterYourself();; 1438 }; 1439 TIter next4(fMatrices);; 1440 index = 1;; 1441 while ((matrix = (TGeoMatrix *)next4())) {; 1442 matrix->SetUniqueID(index++);; 1443 matrix->ResetBit(TGeoMatrix::kGeoSavePrimitive);; 1444 }; 1445 TIter next5(fVolumes);; 1446 TGeoVolume *vol;; 1447 while ((vol = (TGeoVolume *)next5())); 1448 vol->UnmarkSaved();; 1449}; 1450 ; 1451////////////////////////////////////////////////////////////////////////////////; 1452/// Reset all attributes to default ones. Default attributes for visualization; 1453/// are those defined before closing the geometry.; 1454 ; 1455void TGeoManager::ClearAttributes(); 1456{; 1457 if (gPad); 1458 delete gPad;; 1459 gPad = nullptr;; 1460 SetVisOption(0);; 1461 SetVisLevel(3);; 1462 SetExplodedView(0);; 1463 SetBombFactors();; 1464 if (!gStyle); 1465 return;; 1466 TIter next(fVolumes);; 1467 TGeoVolume *vol = nullptr;; 1468 while ((vol = (TGeoVolume *)next())) {; 1469 if (!vol->IsVisTouched()); 1470 continue;; 1471 vol->SetVisTouched(kFALSE);; 1472 }; 1473}; 1474////////////////////////////////////////////////////////////////////////////////; 1475/// Closing geometry implies checking the geometry validity, fixing shapes; 1476/// with negative parameters (run-time shapes)building the cache manager,; 1477/// voxelizing all volumes, counting the total number of physical nodes and; 1478/// registering the manager class to the browser.; 1479 ; 1480void TGeoManager::CloseGeometry(Option_t *option); 1481{; 1482 if (fClosed) {; 1483 Warning(""CloseGeometry"", ""geometry already closed"");; 1484 return;; 1485 }; 1486 if (!fMasterVolume) {; 1487 Error(""CloseGeometry"", ""you MUST call SetTopVolume() first !"");; 1488 return;; 1489 }; 1490 if (!gROOT->GetListOfGeometries()->FindObject(this)); 1491 gROOT->GetListOfGeometries()->Add(this);; 1492 if (!gROOT->GetListOfBrowsables()->FindObject(this)); 1493 gROOT->GetListOfBrowsables()->Add(this);; 1494 // TSeqCollection *brlist = gROOT->GetListOfBrowsers();; 1495 // TIter next(br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:54338,Clear,ClearAttributes,54338,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearAttributes']
Usability,"ix. This will remake the polyline. ; Definition at line 358 of file THelix.cxx. ◆ SetRange() [2/2]. void THelix::SetRange ; (; Double_t ; r1, . Double_t ; r2, . EHelixRangeType ; rtype = kHelixZ . ). virtual . Set range. ; Definition at line 551 of file THelix.cxx. ◆ SetRotMatrix(). void THelix::SetRotMatrix ; (; ). protected . Set the rotational matrix according to the helix axis. ; Definition at line 569 of file THelix.cxx. ◆ Streamer(). void THelix::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class THelix. ; Reimplemented from TObject.; Definition at line 621 of file THelix.cxx. ◆ StreamerNVirtual(). void THelix::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file THelix.h. Member Data Documentation. ◆ fAxis. Double_t THelix::fAxis[3]. protected . Definition at line 33 of file THelix.h. ◆ fgMinNSeg. Int_t THelix::fgMinNSeg =5. staticprotected . Definition at line 42 of file THelix.h. ◆ fPhi0. Double_t THelix::fPhi0. protected . Definition at line 30 of file THelix.h. ◆ fRange. Double_t THelix::fRange[2]. protected . Definition at line 35 of file THelix.h. ◆ fRotMat. TRotMatrix* THelix::fRotMat. protected . Definition at line 34 of file THelix.h. ◆ fVt. Double_t THelix::fVt. protected . Definition at line 29 of file THelix.h. ◆ fVz. Double_t THelix::fVz. protected . Definition at line 31 of file THelix.h. ◆ fW. Double_t THelix::fW. protected . Definition at line 32 of file THelix.h. ◆ fX0. Double_t THelix::fX0. protected . Definition at line 26 of file THelix.h. ◆ fY0. Double_t THelix::fY0. protected . Definition at line 27 of file THelix.h. ◆ fZ0. Double_t THelix::fZ0. protected . Definition at line 28 of file THelix.h. Libraries for THelix:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/THelix.h; graf3d/g3d/src/THelix.cxx. THelix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHelix.html:25230,Guid,Guide,25230,doc/master/classTHelix.html,https://root.cern,https://root.cern/doc/master/classTHelix.html,1,['Guid'],['Guide']
Usability,"ixA & lhs_;  ; const MatrixB & rhs_;  . #include <Math/MatrixFunctions.h>; Constructor & Destructor Documentation. ◆ MatrixMulOp(). template<class MatrixA , class MatrixB , class T , unsigned int D> . ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::MatrixMulOp ; (; const MatrixA & ; lhs, . const MatrixB & ; rhs . ). inline . Definition at line 351 of file MatrixFunctions.h. ◆ ~MatrixMulOp(). template<class MatrixA , class MatrixB , class T , unsigned int D> . ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::~MatrixMulOp ; (; ). inline . Definition at line 355 of file MatrixFunctions.h. Member Function Documentation. ◆ apply(). template<class MatrixA , class MatrixB , class T , unsigned int D> . T ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::apply ; (; unsigned int ; i); const. inline . calc \(\sum_{j} a_{ik} * b_{kj}\) ; Definition at line 358 of file MatrixFunctions.h. ◆ IsInUse(). template<class MatrixA , class MatrixB , class T , unsigned int D> . bool ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::IsInUse ; (; const T * ; p); const. inline . Definition at line 366 of file MatrixFunctions.h. ◆ operator()(). template<class MatrixA , class MatrixB , class T , unsigned int D> . T ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::operator() ; (; unsigned int ; i, . unsigned ; j . ); const. inline . Definition at line 362 of file MatrixFunctions.h. Member Data Documentation. ◆ lhs_. template<class MatrixA , class MatrixB , class T , unsigned int D> . const MatrixA& ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::lhs_. protected . Definition at line 372 of file MatrixFunctions.h. ◆ rhs_. template<class MatrixA , class MatrixB , class T , unsigned int D> . const MatrixB& ROOT::Math::MatrixMulOp< MatrixA, MatrixB, T, D >::rhs_. protected . Definition at line 373 of file MatrixFunctions.h. math/smatrix/inc/Math/MatrixFunctions.h. ROOTMathMatrixMulOp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MatrixMulOp.html:2819,Guid,Guide,2819,doc/master/classROOT_1_1Math_1_1MatrixMulOp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MatrixMulOp.html,1,['Guid'],['Guide']
Usability,"ixSystemprotectedstatic; UnixResetSignals()TUnixSystemprotectedstatic; UnixSelect(Int_t nfds, TFdSet *readready, TFdSet *writeready, Long_t timeout)TUnixSystemprotectedstatic; UnixSend(int sock, const void *buf, int len, int flag)TUnixSystemprotectedstatic; UnixSetitimer(Long_t ms)TUnixSystemprotectedstatic; UnixSigAlarmInterruptsSyscalls(Bool_t set)TUnixSystemprotectedstatic; UnixSignal(ESignals sig, SigHandler_t h)TUnixSystemprotectedstatic; UnixSigname(ESignals sig)TUnixSystemprotectedstatic; UnixTcpConnect(const char *hostname, int port, int tcpwindowsize)TUnixSystemprotectedstatic; UnixTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize)TUnixSystemprotectedstatic; UnixUdpConnect(const char *hostname, int port)TUnixSystemprotectedstatic; UnixUdpService(int port, int backlog)TUnixSystemprotectedstatic; UnixUnixConnect(int port)TUnixSystemprotectedstatic; UnixUnixConnect(const char *path)TUnixSystemprotectedstatic; UnixUnixService(int port, int backlog)TUnixSystemprotectedstatic; UnixUnixService(const char *sockpath, int backlog)TUnixSystemprotectedstatic; UnixWaitchild()TUnixSystemprotectedstatic; Unlink(const char *name) overrideTUnixSystemvirtual; Unload(const char *module) overrideTUnixSystemvirtual; Unsetenv(const char *name) overrideTUnixSystemvirtual; UseCurrentStyle()TObjectvirtual; Utime(const char *file, Long_t modtime, Long_t actime) overrideTUnixSystemvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Which(const char *search, const char *file, EAccessMode mode=kFileExists)TSystemvirtual; WorkingDirectory() overrideTUnixSystemvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TSystem()TSystemvirtual; ~TUnixSystem()TUnixSystemvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem-members.html:20692,Guid,Guide,20692,doc/master/classTUnixSystem-members.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html,1,['Guid'],['Guide']
Usability,"ization actions. Navigation and Tracking; Tracking is the feature allowing the transport of a given particle knowing its kinematics. A state is determined by any combination of the position \(\vec{r}\) and direction \(\vec{n}\) with respect to the world reference frame. The direction \(\vec{n}\) must be a unit vector having as components the director cosines. The full classification of a given state will provide the following information: the deepest physical node containing the position vector, the distance to the closest boundary along the direction vector, the next physical node after propagating the current point with this distance and the safety distance to the nearest boundary. This information allows the propagation of particles inside a detector geometry by taking into account both geometrical and physical constraints.; We will hereby describe the user interface of TGeo to access tracking functionality. This allows either developing a tracker for simple navigation within a given geometry, either interfacing to an external tracking engine such as GEANT. Note that the abstract interface for external trackers can be found in $ROOTSYS/vmc folder and it can be used to run GEANT3, GEANT4 and FLUKA-based simulations (*) by using directly a geometry described with ROOT.; The interface methods related to tracking are incorporated into TGeoManager class and implemented in the navigator class TGeoNavigator. In order to be able to start tracking, one has to define the initial state providing the starting point \(\vec{r_0}\) and direction \(\vec{n_0}\) . There are several ways of doing that. TGeoNavigator Class; One geometry may have several independent navigators to query to localize points or compute distances. The geometry manager holds a list of active navigators accessible via:; TObjArray *navigators = gGeoManager->GetListOfNavigators();; TGeoManager::GetListOfNavigatorsTGeoNavigatorArray * GetListOfNavigators() constGet list of navigators for the calling thread.Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:66241,simpl,simple,66241,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"ization. ; template<class UserFunc>; struct ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. ; The templated C++ function class must implement:; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 66 of file GSLMultiMinFunctionAdapter.h. Static Public Member Functions; static void Df (const gsl_vector *x, void *p, gsl_vector *g);  ; static double F (const gsl_vector *x, void *p);  ; static void Fdf (const gsl_vector *x, void *p, double *f, gsl_vector *g);  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class UserFunc > . static void ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; g . ). inlinestatic . Definition at line 76 of file GSLMultiMinFunctionAdapter.h. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::F ; (; const gsl_vector * ; x, . void * ; p . ). inlinestatic . Definition at line 68 of file GSLMultiMinFunctionAdapter.h. ◆ Fdf(). template<class UserFunc > . static void ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >::Fdf ; (; const gsl_vector * ; x, . void * ; p, . double * ; f, . gsl_vector * ; g . ). inlinestatic . Definition at line 83 of file GSLMultiMinFunctionAdapter.h. The documentation for this struct was generated from the following file:; math/mathmore/src/GSLMultiMinFunctionAdapter.h. ROOTMathGSLMultiMinFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html:2324,Guid,Guide,2324,doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLMultiMinFunctionAdapter.html,1,['Guid'],['Guide']
Usability,"ize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tROOT::v5::TFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tROOT::v5::TFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidROOT::v5::TFormula::ClearFormula(Option_t* option = """"); virtual voidROOT::v5::TFormula::Convert(UInt_t fromVersion); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tROOT::v5::TFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tROOT::v5::TFormula::GetAction(Int_t code) const; Short_tROOT::v5::TFormula::GetActionOptimized(Int_t code) const; Int_tROOT::v5::TFormula::GetActionParam(Int_t code) const; Int_tROOT::v5::TFormula::GetActionParamOptimized(Int_t code) const; Int_t*ROOT::v5::TFormula::GetOper() const; Int_t*ROOT::v5::TFormula::GetOperOptimized() const; virtual Bool_tROOT::v5::TFormula::IsString(Int_t oper) const; voidROOT::v5::TFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); Int_tROOT::v5::TFormula::PreCompile(); voidROOT::v5::TFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidROOT::v5::TFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tROOT::v5::TFormula::StringToNumber(Int_t code). Data Members; public:. Double_tfChisquareFunction fit chisquare; Double_tfMaximumMaximum value for plotting; Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TF1Data.html:10384,Clear,ClearFormula,10384,root/html604/ROOT__v5__TF1Data.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TF1Data.html,1,['Clear'],['ClearFormula']
Usability,"ize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); voidTF1::CreateFromFunctor(const char* name, Int_t npar); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); virtual Double_tFindMinMax(Double_t* x, bool findmax) const; Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; virtual Double_tTF1::GetMinMaxNDim(Double_t* x, Bool_t findmax, Double_t epsilon = 0, Int_t maxiter = 0) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF2.html:17796,Clear,ClearFormula,17796,root/html602/TF2.html,https://root.cern,https://root.cern/root/html602/TF2.html,2,['Clear'],['ClearFormula']
Usability,"ize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* vare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookTree.html:3595,Clear,Clear,3595,root/html528/THbookTree.html,https://root.cern,https://root.cern/root/html528/THbookTree.html,1,['Clear'],['Clear']
Usability,"ize > 0.; 1980 for (Int_t j = 0; j < -fTree->GetMaxVirtualSize(); j++) {; 1981 if (iter.Previous() == 0) {; 1982 return CreateOrReuseBasket();; 1983 }; 1984 }; 1985 ; 1986 Int_t entryToUnload = iter.Previous();; 1987 // Finds the basket to unload from memory. Since the basket should be close to current; 1988 // basket, just iterate backwards until the correct basket is reached. This should; 1989 // be fast as long as the number of baskets per cluster is small; 1990 Int_t basketToUnload = fReadBasket;; 1991 while (fBasketEntry[basketToUnload] != entryToUnload) {; 1992 basketToUnload--;; 1993 if (basketToUnload < 0) {; 1994 return CreateOrReuseBasket();; 1995 }; 1996 }; 1997 ; 1998 // Retrieves the basket that is going to be unloaded from memory. If the basket did not; 1999 // exist, create a new one; 2000 basket = (TBasket *)fBaskets.UncheckedAt(basketToUnload);; 2001 if (basket) {; 2002 fBaskets.AddAt(nullptr, basketToUnload);; 2003 --fNBaskets;; 2004 } else {; 2005 basket = CreateOrReuseBasket();; 2006 }; 2007 ++basketToUnload;; 2008 ; 2009 // Clear the rest of the baskets. While it would be ideal to reuse these baskets; 2010 // for other baskets in the new cluster. It would require the function to go; 2011 // beyond its current scope. In the ideal case when each cluster only has 1 basket; 2012 // this will perform well; 2013 iter.Next();; 2014 while (fBasketEntry[basketToUnload] < iter.GetStartEntry()) {; 2015 TBasket *oldbasket = (TBasket *)fBaskets.UncheckedAt(basketToUnload);; 2016 if (oldbasket) {; 2017 oldbasket->DropBuffers();; 2018 delete oldbasket;; 2019 fBaskets.AddAt(nullptr, basketToUnload);; 2020 --fNBaskets;; 2021 }; 2022 ++basketToUnload;; 2023 }; 2024 fBaskets.SetLast(-1);; 2025 return basket;; 2026}; 2027 ; 2028////////////////////////////////////////////////////////////////////////////////; 2029/// Return the 'full' name of the branch. In particular prefix the mother's name; 2030/// when it does not end in a trailing dot and thus is not part of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:73106,Clear,Clear,73106,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2073 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2106 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2128 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2145 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:49499,learn,learning,49499,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,"ize of axis labels.Definition TAttAxis.cxx:203; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetContourvirtual void SetContour(Int_t nlevels, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TH1.cxx:8483; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; lTLine lDefinition textangle.C:4; AuthorAdvait Dhingra ; Definition in file schroedinger_hydrogen.C. tutorialsgraphicsschroedinger_hydrogen.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/schroedinger__hydrogen_8C.html:4306,Guid,Guide,4306,doc/master/schroedinger__hydrogen_8C.html,https://root.cern,https://root.cern/doc/master/schroedinger__hydrogen_8C.html,1,['Guid'],['Guide']
Usability,ize. Int_t TRefTable::fDefaultSize. protected . current parent ID in fParents (latest call to SetParent) ; Definition at line 43 of file TRefTable.h. ◆ fgRefTable. TRefTable * TRefTable::fgRefTable = nullptr. staticprotected . cache of pid to index in fProcessGUIDs ; Definition at line 51 of file TRefTable.h. ◆ fMapPIDtoInternal. std::vector<Int_t> TRefTable::fMapPIDtoInternal. protected . Definition at line 50 of file TRefTable.h. ◆ fN. Int_t* TRefTable::fN. protected . [fNumPIDs] allocated size of array fParentIDs for each ProcessID ; Definition at line 40 of file TRefTable.h. ◆ fNumPIDs. Int_t TRefTable::fNumPIDs. protected . Definition at line 38 of file TRefTable.h. ◆ fOwner. TObject* TRefTable::fOwner. protected . Definition at line 48 of file TRefTable.h. ◆ fParentID. Int_t TRefTable::fParentID. protected . [fNumPIDs][fAllocSize] array of Parent IDs ; Definition at line 42 of file TRefTable.h. ◆ fParentIDs. Int_t** TRefTable::fParentIDs. protected . [fNumPIDs] current maximum number of IDs in array fParentIDs for each ProcessID ; Definition at line 41 of file TRefTable.h. ◆ fParents. TObjArray* TRefTable::fParents. protected . Definition at line 47 of file TRefTable.h. ◆ fProcessGUIDs. std::vector<std::string> TRefTable::fProcessGUIDs. protected . Definition at line 49 of file TRefTable.h. ◆ fSize. Int_t TRefTable::fSize. protected . TProcessID the current uid is referring to. ; Definition at line 46 of file TRefTable.h. ◆ fUID. UInt_t TRefTable::fUID. protected . default size for a new PID array ; Definition at line 44 of file TRefTable.h. ◆ fUIDContext. TProcessID* TRefTable::fUIDContext. protected . Current uid (set by TRef::GetObject) ; Definition at line 45 of file TRefTable.h. Libraries for TRefTable:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TRefTable.h; core/cont/src/TRefTable.cxx. TRefTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:23221,Guid,Guide,23221,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Guid'],['Guide']
Usability,"izeBins2D() specify a 2-dimensional group of bins. Note, the class TUnfoldDensity provides an automatic setup of complex; regularisation schemes. For ultimate flexibility, the regularisation condition can be set on each; bin individually; -> give kRegModeNone in the constructor and use; RegularizeSize() regularize one bin; RegularizeDerivative() regularize the slope given by two bins; RegularizeCurvature() regularize the curvature given by three bins; AddRegularisationCondition(); define an arbitrary regulatisation condition. Function Members (Methods); public:. TUnfold(const TUnfold&); TUnfold(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual~TUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDoUnfold(Double_t tau); Double_tDoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:8875,Clear,Clear,8875,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,1,['Clear'],['Clear']
Usability,"izer.cxx:153; ROOT::Math::GeneticMinimizer::fResultstd::vector< double > fResultDefinition GeneticMinimizer.h:109; ROOT::Math::GeneticMinimizer::fFitnessTMVA::IFitterTarget * fFitnessDefinition GeneticMinimizer.h:107; ROOT::Math::GeneticMinimizer::fRangesstd::vector< TMVA::Interval * > fRangesDefinition GeneticMinimizer.h:106; ROOT::Math::GeneticMinimizer::SetParametersvoid SetParameters(const GeneticMinimizerParameters &params)Definition GeneticMinimizer.cxx:177; ROOT::Math::GeneticMinimizer::MinGradientconst double * MinGradient() const overridereturn pointer to gradient values at the minimumDefinition GeneticMinimizer.cxx:364; ROOT::Math::GeneticMinimizer::Edmdouble Edm() const overridereturn expected distance reached from the minimum (re-implement if minimizer provides itDefinition GeneticMinimizer.cxx:367; ROOT::Math::GeneticMinimizer::~GeneticMinimizer~GeneticMinimizer() overrideDefinition GeneticMinimizer.cxx:117; ROOT::Math::GeneticMinimizer::Clearvoid Clear() overridereset for consecutive minimization - implement if neededDefinition GeneticMinimizer.cxx:126; ROOT::Math::GeneticMinimizer::OptionsROOT::Math::MinimizerOptions Options() const overrideretrieve the minimizer options (implement derived class if needed)Definition GeneticMinimizer.cxx:185; ROOT::Math::GeneticMinimizer::fParametersGeneticMinimizerParameters fParametersDefinition GeneticMinimizer.h:111; ROOT::Math::GeneticMinimizer::SetFunctionvoid SetFunction(const ROOT::Math::IMultiGenFunction &func) overrideset the function to minimizeDefinition GeneticMinimizer.cxx:137; ROOT::Math::GeneticMinimizer::SetFixedVariablebool SetFixedVariable(unsigned int ivar, const std::string &name, double val) overrideset a new fixed variable (override if minimizer supports them )Definition GeneticMinimizer.cxx:165; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneticMinimizer_8h_source.html:7185,Clear,Clearvoid,7185,doc/master/GeneticMinimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"izerOptions::SetDefaultMinimizer(""Minuit2"");; // fit the histogram histo with the gaussian pre-defined function; histo->Fit(""gaus"");; In the following we will give some brief description of the minimization packages. The packages all implement the ROOT::Math::Minimizer interface which can be use for finding the minimum of a multi-dimensional function. The interface is documented in the Mathematical Library Chapter.; In addition packages like Minuit or Minuit2 provide their own interfaces.; 5.9 MINUIT (Old TMInuit Version); This package was originally written in FORTRAN by Fred James and part of PACKLIB (patch D506). It has been converted to a C++ class by René Brun. The current implementation in C++ is a straightforward conversion of the original FORTRAN version. The main changes are:. The variables in the various Minuit labeled common blocks have been changed to the TMinuit class data members; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members’ arrays with a dynamic dimension such that one can fit very large problems by simply initializing the TMinuit constructor with the maximum number of parameters; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions; Constructors and destructor have been added; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file; The functions SetObjectFit/GetObjectFit can be used inside the FCN function to set/get a referenced object instead of using global variables; By default fGraphicsMode is true. When ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:214434,simpl,simply,214434,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"j < n; j++) {; TBox *b = new TBox(n1*j, n1*(n-1-i), n1*(j+1), n1*(n-i));; Float_t grey = Float_t(i*n+j)/(n*n);; b->SetFillColor(TColor::GetColor(grey, grey, grey));; b->Draw();; }; }; TPad *p = new TPad(""p"",""p"",0.3, 0.3, 0.7,0.7);; const char *guibackground = gEnv->GetValue(""Gui.BackgroundColor"", """");; p->SetFillColor(TColor::GetColor(guibackground));; p->Draw();; p->cd();; TText *t = new TText(0.5, 0.5, ""GUI Background Color"");; t->SetTextAlign(22);; t->SetTextSize(.09);; t->Draw();; ; c->SetEditable(kFALSE);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TTextBase class for several text objects.Definition TText.h:22; nconst Int_t nDefinition legend1.C:16; AuthorOlivier Couet ; Definition in file greyscale.C. tutorialsgraphicsgreyscale.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/greyscale_8C.html:2388,Guid,Guide,2388,doc/master/greyscale_8C.html,https://root.cern,https://root.cern/doc/master/greyscale_8C.html,1,['Guid'],['Guide']
Usability,"j) overrideTListvirtual; AddFirst(TObject *obj, Option_t *opt)TListvirtual; AddLast(TObject *obj) overrideTListvirtual; AddLast(TObject *obj, Option_t *opt)TListvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; After(const TObject *obj) const overrideTListvirtual; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; At(Int_t idx) const overrideTListvirtual; Before(const TObject *obj) const overrideTListvirtual; begin() constTCollectioninline; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; Changed()TSeqCollectioninlineprotectedvirtual; CheckedHash()TObjectinline; Class()TListstatic; Class_Name()TListstatic; Class_Version()TListinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTListvirtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TListinlinestatic; Delete(Option_t *option="""") overrideTListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoSort(TObjLinkPtr_t *head, Int_t n)TListprotected; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList-members.html:1518,Clear,Clear,1518,doc/master/classTList-members.html,https://root.cern,https://root.cern/doc/master/classTList-members.html,1,['Clear'],['Clear']
Usability,"j, Option_t* opt); virtual voidAddAfter(const TObject*, TObject* obj); virtual voidAddAfter(TObjLink*, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t); virtual voidAddBefore(const TObject*, TObject* obj); virtual voidAddBefore(TObjLink*, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSortedList.html:1595,Clear,Clear,1595,root/html602/TSortedList.html,https://root.cern,https://root.cern/root/html602/TSortedList.html,2,['Clear'],['Clear']
Usability,"j.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatsFeedback::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatsFeedback.h:42. Reimplemented from TObject.; Definition at line 42 of file TStatsFeedback.h. ◆ IsA(). TClass * TStatsFeedback::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 44 of file TStatsFeedback.h. ◆ Streamer(). void TStatsFeedback::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatsFeedback::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TStatsFeedback.h. Member Data Documentation. ◆ fName. TString TStatsFeedback::fName. protected . Definition at line 34 of file TStatsFeedback.h. ◆ fProof. TProof* TStatsFeedback::fProof. protected . Definition at line 35 of file TStatsFeedback.h. proof/proofplayer/inc/TStatsFeedback.h; proof/proofplayer/src/TStatsFeedback.cxx. TStatsFeedback. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:18416,Guid,Guide,18416,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,1,['Guid'],['Guide']
Usability,"jString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9679,Clear,ClearEnvVars,9679,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearEnvVars']
Usability,"j]) {; 5032 cle->Destructor(r[j]);; 5033 r[j] = 0;; 5034 }; 5035 }; 5036 }; 5037 ; 5038 if (etype == kBase) {; 5039 if (cle->Property() & kIsAbstract) {; 5040 TVirtualStreamerInfo *einfo = cle->GetStreamerInfoAbstractEmulated();; 5041 if (einfo) einfo->Destructor(eaddr, kTRUE);; 5042 } else {; 5043 cle->Destructor(eaddr, kTRUE);; 5044 }; 5045 }; 5046 ; 5047 if (etype == kObject || etype == kAny ||; 5048 etype == kTObject || etype == kTString || etype == kTNamed) {; 5049 // A data member is destroyed, but not deleted.; 5050 cle->Destructor(eaddr, kTRUE);; 5051 }; 5052 ; 5053 if (etype == kSTL) {; 5054 // A data member is destroyed, but not deleted.; 5055 TVirtualCollectionProxy *pr = cle->GetCollectionProxy();; 5056 if (!pr) {; 5057 if (strcmp(ele->GetName(),""This"")==0) {; 5058 // missing information, avoid infinite loop; 5059 // by doing nothing ....; 5060 } else {; 5061 cle->Destructor(eaddr, kTRUE);; 5062 }; 5063 } else {; 5064 if (ele->TestBit(TStreamerElement::kDoNotDelete)) {; 5065 TVirtualCollectionProxy::TPushPop env(cle->GetCollectionProxy(), eaddr); // used for both this 'clear' and the 'clear' inside destructor.; 5066 cle->GetCollectionProxy()->Clear(); // empty the collection without deleting the pointer; 5067 pr->Destructor(eaddr, kTRUE);; 5068 } else {; 5069 pr->Destructor(eaddr, kTRUE);; 5070 }; 5071 }; 5072 }; 5073 ; 5074 if (etype == kObject + kOffsetL || etype == kAny + kOffsetL ||; 5075 etype == kTObject + kOffsetL || etype == kTString + kOffsetL ||; 5076 etype == kTNamed + kOffsetL || etype == kSTL + kOffsetL) {; 5077 // For a data member which is an array of objects, we; 5078 // destroy the objects, but do not delete them.; 5079 Int_t len = ele->GetArrayLength();; 5080 Int_t size = cle->Size();; 5081 char* r = eaddr + (size * (len - 1));; 5082 for (Int_t j = len - 1; j >= 0; --j, r -= size) {; 5083 cle->Destructor(r, kTRUE);; 5084 }; 5085 }; 5086 } // iter over elements; 5087 ; 5088 if (!dtorOnly) {; 5089 delete[] p;; 5090 }; 5091}; 5092 ; 5093///",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:201950,clear,clear,201950,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['clear'],['clear']
Usability,"ject Class Reference. . Definition at line 56 of file rootqt5.cpp. Public Member Functions;  ~DummyObject () override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classDummyObject.html:1138,Clear,Clear,1138,doc/master/classDummyObject.html,https://root.cern,https://root.cern/doc/master/classDummyObject.html,1,['Clear'],['Clear']
Usability,"ject Founders | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he developped ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:1006,Guid,Guides,1006,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,1,['Guid'],['Guides']
Usability,"ject is created by the streamer during the disk-read operation. void SetRho(TFoamIntegrand* Rho); User may use this method to set (register) random number generator used by; the given instance of the FOAM event generator. Note that single r.n. generator; may serve several FOAM objects. void ResetRho(TFoamIntegrand* Rho); User may optionally reset the distribution using this method; Usually it is done when FOAM object is restored from the disk.; IMPORTANT: this method deletes existing distribution object registered in the FOAM object.; In particular such an object is created by the streamer diring the disk-read operation.; This method is used only in very special cases, because the distribution in most cases; should be ""owned"" by the FOAM object and should not be replaced by another one after initialization. void SetRhoInt(void* Rho); User may use this to set pointer to the global function (not descending; from TFoamIntegrand) serving as a distribution for FOAM.; It is useful for simple interactive applications.; Note that persistency for FOAM object will not work in the case of such; a distribution. Double_t Eval(Double_t* ); Internal subprogram.; Evaluates distribution to be generated. void GenerCel2(TFoamCell*& ); Internal subprogram.; Return randomly chosen active cell with probability equal to its; contribution into total driver integral using interpolation search. void MakeEvent(void); User subprogram.; It generates randomly point/vector according to user-defined distribution.; Prior initialization with help of Initialize() is mandatory.; Generated MC point/vector is available using GetMCvect and the MC weight with GetMCwt.; MC point is generated with wt=1 or with variable weight, see OptRej switch. void GetMCvect(Double_t* ); User may get generated MC point/vector with help of this method. Double_t GetMCwt(Double_t& ); User may get weight MC weight using this method. void GetMCwt(Double_t& ); User may get weight MC weight using this method. Double_t MCgenerate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:20206,simpl,simple,20206,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,3,['simpl'],['simple']
Usability,"ject of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1AbsComposition.html:1661,Clear,Clear,1661,doc/master/classTF1AbsComposition.html,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html,1,['Clear'],['Clear']
Usability,"ject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2349,Clear,ClearInputData,2349,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearInputData']
Usability,"ject. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TTimeOutTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTimeOutTimer(). TTimeOutTimer::TTimeOutTimer ; (; TMonitor * ; m, . Long_t ; ms . ). Definition at line 85 of file TMonitor.cxx. Member Function Documentation. ◆ Notify(). Bool_t TTimeOutTimer::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 93 of file TMonitor.cxx. Member Data Documentation. ◆ fMonitor. TMonitor* TTimeOutTimer::fMonitor. private . Definition at line 78 of file TMonitor.cxx. net/net/src/TMonitor.cxx. TTimeOutTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimeOutTimer.html:18325,Guid,Guide,18325,doc/master/classTTimeOutTimer.html,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html,1,['Guid'],['Guide']
Usability,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:13062,clear,cleared,13062,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,15,['clear'],['cleared']
Usability,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:12570,clear,cleared,12570,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,3,['clear'],['cleared']
Usability,"ject. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option=""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:21063,clear,cleared,21063,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['clear'],['cleared']
Usability,"ject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tTEveWindow::CanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowFrame.html:2227,Clear,ClearStamps,2227,root/html528/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html528/TEveWindowFrame.html,2,['Clear'],['ClearStamps']
Usability,"ject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:3964,Simpl,SimpleInterval,3964,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"ject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:7271,Simpl,SimpleInterval,7271,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"ject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; mTMarker mDefinition textangle.C:8. histhistsrcTH2Poly.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:78743,Guid,Guide,78743,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:19366,undo,undo,19366,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"ject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGeoShape*fLeftshape on the left branch; TGeoMatrix*fLeftMattransformation that applies to the left branch; Int_tfNpoints! number of points on the mesh; Double_t*fPoints! array of mesh points; TGeoShape*fRightshape on the right branch; TGeoMatrix*fRightMattransformation that applies to the right branch; vector<TGeoBoolNode::ThreadData_t*>fThreadData! Navigation data per thread; Int_tfThreadSize! Size for the navigation data array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void CreateThreadData(Int_t nthreads); Create thread data for n threads max. void SetSelected(Int_t sel); Set the selected branch. TGeoBoolNode(); Default constructor. TGeoBoolNode(const char* expr1, const char* expr2); Constructor called by TGeoCompositeShape providing 2 subexpressions for the 2 branches. TGeoBoolNode(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); Constructor providing left and right shapes and matrices (in the Boolean operation). ~TGeoBoolNode(); Destructor.; --- deletion of components handled by TGeoManager class. Bool_t MakeBranch(const char* expr, Bool_t left); Expands the boolean expression either on left or right branch, creating; component elements (composite shapes and boolean nodes). Returns true on success. void Paint(Option_t* option); Special schema for feeding the 3D buffers to the painter client. void RegisterMatrices(); Register all matrices of the boolean node and descendents. Bool_t ReplaceM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoBoolNode.html:8700,Clear,ClearThreadData,8700,root/html602/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html602/TGeoBoolNode.html,2,['Clear'],['ClearThreadData']
Usability,"ject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TCONE.html:10001,simpl,simplified,10001,root/html604/TCONE.html,https://root.cern,https://root.cern/root/html604/TCONE.html,1,['simpl'],['simplified']
Usability,"ject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 14:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCONE.html:10001,simpl,simplified,10001,root/html602/TCONE.html,https://root.cern,https://root.cern/root/html602/TCONE.html,1,['simpl'],['simplified']
Usability,"ject::kZombie. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance Chart:. TObject. ←; TRecorder. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(const TRecorder& ). TRecorder & operator=(const TRecorder& ). Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRecorder.html:9722,Resume,Resume,9722,root/html604/TRecorder.html,https://root.cern,https://root.cern/root/html604/TRecorder.html,2,['Resume'],"['Resume', 'Resumes']"
Usability,"ject::kZombie. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance Chart:. TObject. ←; TRecorder. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(const TRecorder& ). TRecorder & operator=(const TRecorder& ). Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:9722,Resume,Resume,9722,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,2,['Resume'],"['Resume', 'Resumes']"
Usability,"ject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressStatus&operator+=(const TProofProgressStatus& st); TProofProgressStatusoperator-(TProofProgressStatus& st); TProofProgressStatus&operator-=(const TProofProgressStatus& st); TProofProgressStatus&operator=(const TProofProgressStatus&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBytesRead(Long64_t bytesRead); voidSetCPUTime(Double_t procTime); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t entries); voidSetLastEntries(Long64_t entries); voidSetLastProcTime(Double_t procTime); voidSetLastUpdate(Double_t updtTime = 0); voidSetLearnTime(Double_t learnTime); static voidTObject::SetObjectStat(Bool_t stat); voidSetProcTime(Double_t procTime); voidSetReadCalls(Long64_t readCalls); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressStatus.html:5136,learn,learnTime,5136,root/html530/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html530/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17867,Guid,Guide,17867,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,1,['Guid'],['Guide']
Usability,"jectAny(). void * TKeySQL::ReadObjectAny ; (; const TClass * ; expectedClass). finalvirtual . Read object of any type from SQL database. ; Reimplemented from TKey.; Definition at line 252 of file TKeySQL.cxx. ◆ ReadObjWithBuffer(). TObject * TKeySQL::ReadObjWithBuffer ; (; char * ; bufferRead). finalvirtual . Read object derived from TObject class If it is not TObject or in case of error, return 0. ; Reimplemented from TKey.; Definition at line 228 of file TKeySQL.cxx. ◆ SetBuffer(). void TKeySQL::SetBuffer ; (; ). inlinefinalvirtual . Reimplemented from TKey.; Definition at line 65 of file TKeySQL.h. ◆ StoreKeyObject(). void TKeySQL::StoreKeyObject ; (; const void * ; obj, . const TClass * ; cl . ). protected . Stores object, associated with key, into data tables. ; Definition at line 155 of file TKeySQL.cxx. ◆ Streamer(). void TKeySQL::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TKey. ◆ StreamerNVirtual(). void TKeySQL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TKeySQL.h. ◆ WriteFile(). Int_t TKeySQL::WriteFile ; (; Int_t ; cycle = 1, . TFile * ; f = nullptr . ). inlinefinalvirtual . Write the encoded object supported by this key. ; The function returns the number of bytes committed to the file. If a write error occurs, the number of bytes returned is -1. ; Reimplemented from TKey.; Definition at line 66 of file TKeySQL.h. Member Data Documentation. ◆ fKeyId. Long64_t TKeySQL::fKeyId {-1}. protected . ! key identifier in KeysTables ; Definition at line 33 of file TKeySQL.h. ◆ fObjId. Long64_t TKeySQL::fObjId {-1}. protected . ! stored object identifier ; Definition at line 34 of file TKeySQL.h. Libraries for TKeySQL:. [legend]; The documentation for this class was generated from the following files:; io/sql/inc/TKeySQL.h; io/sql/src/TKeySQL.cxx. TKeySQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:25889,Guid,Guide,25889,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,1,['Guid'],['Guide']
Usability,"jectArray(Int_t nElements, void *arena) constConstruct an array of nElements container objects at the address given by arenaDefinition TVirtualCollectionProxy.h:138; TVirtualCollectionProxy::~TVirtualCollectionProxyvirtual ~TVirtualCollectionProxy()Definition TVirtualCollectionProxy.h:88; TVirtualCollectionProxy::Allocatevirtual void * Allocate(UInt_t n, Bool_t forceDelete)=0Allocates space for storing at least n elements.; TVirtualCollectionProxy::GetConversionReadMemberWiseActionsvirtual TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass *oldClass, Int_t version)=0; TVirtualCollectionProxy::operator=TVirtualCollectionProxy & operator=(const TVirtualCollectionProxy &)=delete; TVirtualCollectionProxy::GetFunctionDeleteIteratorvirtual DeleteIterator_t GetFunctionDeleteIterator(Bool_t read=kTRUE)=0Return a pointer to a function that can delete an iterator (pair) (see DeleteIterator_t).; TVirtualCollectionProxy::TVirtualCollectionProxyTVirtualCollectionProxy(const TVirtualCollectionProxy &)=delete; TVirtualCollectionProxy::GetFunctionCopyIteratorvirtual CopyIterator_t GetFunctionCopyIterator(Bool_t read=kTRUE)=0Return a pointer to a function that can copy an iterator (see CopyIterator_t).; TVirtualCollectionProxy::HasPointersvirtual Bool_t HasPointers() const =0Return true if the content is of type 'pointer to'.; TVirtualCollectionProxy::GetCollectionClassvirtual TClass * GetCollectionClass() constReturn a pointer to the TClass representing the proxied container class.Definition TVirtualCollectionProxy.h:98; TVirtualCollectionProxy::Insertvirtual void Insert(const void *data, void *container, size_t size)=0Insert elements into the proxied container.; bool; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TStreamerInfoActionsDefinition TBuffer.h:39; TClass::ObjectPtrDefinition TClass.h:140. corecontincTVirtualCollectionProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html:25308,Guid,Guide,25308,doc/master/TVirtualCollectionProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html,1,['Guid'],['Guide']
Usability,"jectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGHtml.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin requests active at vertical position specified in pLC->bottom.; *pW The width of the inkable area. This takes into account an margin requests that are active at the vertical position pLC->bottom. ; Definition at line 696 of file TGHtmlLayout.cxx. ◆ DoBreakMarkup(). TGHtmlElement * TGHtmlLayoutContext::DoBreakMark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:12833,Clear,Clear,12833,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,"jectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Types; using LegacyIterator_t = TIteratorToSTLInterface< Storage_t >;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; virtual bool canBeAdded (const RooAbsArg &arg, bool silent) const =0;  Determine whether it's possible to add a given RooAbsArg to the collection or not. ;  ; void clearStructureTags ();  ; void deleteList ();  Delete contents of the list. ;  ; void makeStructureTag ();  ; void makeTypedStructureTag ();  ; TNamed * structureTag ();  ; TNamed * typedStructureTag ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; template<class T > ; static void assert_is_no_temporary (T &&);  . Protected Attributes; bool _allRRV = true;  All contents are RRV. ;  ; Storage_t _list;  Actual object storage. ;  ; TString _name;  Our name. ;  ; bool _ownCont = false;  Flag to identify a list that owns its contents. ;  ; TNamed * _structureTag {nullptr};  ! Structure tag ;  ; TNamed * _typedStructureTag {nullptr};  ! Typed structure tag ;  . Private Types; using HashAssistedFind = RooFit::Detail::HashAssistedFind;  . Private Member Functions; void insert (RooAbsArg *);  Insert an element into the owned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:24454,clear,clearStructureTags,24454,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,2,['clear'],['clearStructureTags']
Usability,"jectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for TBrowserObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBrowserObject(). TBrowserObject::TBrowserObject ; (; void * ; obj, . TClass * ; cl, . const char * ; brname . ). inline . Definition at line 83 of file TBrowser.cxx. ◆ ~TBrowserObject(). TBrowserObject::~TBrowserObject ; (; ). inline . Definition at line 91 of file TBrowser.cxx. Member Function Documentation. ◆ Browse(). void TBrowserObject::Browse ; (; TBrowser * ; b). inlineoverridevirtual . Browse object. May be overridden for another default action. ; Reimplemented from TObject.; Definition at line 93 of file TBrowser.cxx. ◆ IsA(). TClass * TBrowserObject::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 95 of file TBrowser.cxx. ◆ IsFolder(). Bool_t TBrowserObject::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 94 of file TBrowser.cxx. Member Data Documentation. ◆ fClass. TClass* TBrowserObject::fClass. private . ! pointer to class of the foreign object ; Definition at line 99 of file TBrowser.cxx. ◆ fObj. void* TBrowserObject::fObj. private . ! pointer to the foreign object ; Definition at line 98 of file TBrowser.cxx. core/gui/src/TBrowser.cxx. TBrowserObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserObject.html:12486,Guid,Guide,12486,doc/master/classTBrowserObject.html,https://root.cern,https://root.cern/doc/master/classTBrowserObject.html,1,['Guid'],['Guide']
Usability,"jects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Blog. ROOT::RWhy! ; ## Background. ROOT is implementing new interfaces following new interface styles. We follow [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md) where reasonable in our context. Most noticeably this means. - use of references as parameters instead... more . The status of reflection in C++ ; When the C++ committee met in Jacksonville two months ago, something big happened: the reflection study group, SG7, decided what the basic “language"" of reflected C++ should look like. What does that mean? Why do you care? Let me, the co-author of the only “blessed proposal"", explain:. Almost... more . ROOT::TSeq::GetSize() or ROOT::seq::size()? ; Hi,. It's time to resume this blog - on what the ROOT team is up to; what happens at the C++ meetings; and a bit of behind-the-scenes of cling and ROOT. We have started to develop towards ROOT 7 and [its new interfaces](http://indico.cern.ch/event/349459/session/1/contribution/3). We will have... more . ROOT6 and Backward Compatibility ; Hi everyone, dear Matt!. Matt Walker has posted an extensive review of ROOT and what he would hope the future of ROOT to be. Because I think many of his comments are good ones, and because I have heard some of them from several people in the past, I decided to give the answer to an audience that'... more . Main Histogram Changes in ROOT 6 ;  Here is a list of the main changes which have been applied to the histogram classes in ROOT 6. These changes affect the behaviour of the histogram classes and explain why for some cases the same code would give a different outcome than in ROOT 5. .  . Rebinning/Extension of axis... more . Rainbow ? ; The rainbow colormap is not the best choice to represent data using pseudo colors. This arti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:2574,resume,resume,2574,d/blog.html,https://root.cern,https://root.cern/d/blog.html,1,['resume'],['resume']
Usability,"k () override;  Intercept changes to cache operation mode and forward to cache elements. ;  ; void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Intercept server redirect calls. ;  ; void setClearOnRedirect (bool flag);  ; void sterilize () override;  Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >;  RooCacheManager (const RooCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooCacheManager (Int_t maxSize=2);  Constructor for simple caches without RooAbsArg payload. ;  ;  RooCacheManager (RooAbsArg *owner, Int_t maxSize=2);  Constructor for simple caches with RooAbsArg derived payload. ;  ;  ~RooCacheManager () override;  Destructor. ;  ; Int_t cacheSize () const;  Return size of cache. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIdx, const char *isetRangeName);  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Retrieve payload object indexed on nset,uset amd isetRangeName If sterileIdx is not null, it is set to the index of the sterile slot in cacse such a slot is recycled. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Getter function without integration set. ;  ; RooAbsCacheElement * getObjByIndex (Int_t index) const;  Retrieve payload object by slot index. ;  ; Int_t lastInd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:2624,simpl,simple,2624,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['simpl'],['simple']
Usability,k ; (; ). pure virtual . Implemented in TGeoTrack. ◆ SetId(). void TVirtualGeoTrack::SetId ; (; Int_t ; id). inline . Definition at line 72 of file TVirtualGeoTrack.h. ◆ SetName(). void TVirtualGeoTrack::SetName ; (; const char * ; name). Set a default name for this track. ; Definition at line 137 of file TVirtualGeoTrack.cxx. ◆ SetParent(). void TVirtualGeoTrack::SetParent ; (; TVirtualGeoTrack * ; parent). inline . Definition at line 71 of file TVirtualGeoTrack.h. ◆ SetParticle(). virtual void TVirtualGeoTrack::SetParticle ; (; TObject * ; particle). inlinevirtual . Definition at line 70 of file TVirtualGeoTrack.h. ◆ SetPDG(). virtual void TVirtualGeoTrack::SetPDG ; (; Int_t ; pdgcode). inlinevirtual . Definition at line 73 of file TVirtualGeoTrack.h. ◆ Streamer(). void TVirtualGeoTrack::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualGeoTrack::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file TVirtualGeoTrack.h. Member Data Documentation. ◆ fId. Int_t TVirtualGeoTrack::fId {-1}. protected . Definition at line 26 of file TVirtualGeoTrack.h. ◆ fParent. TVirtualGeoTrack* TVirtualGeoTrack::fParent {nullptr}. protected . Definition at line 27 of file TVirtualGeoTrack.h. ◆ fParticle. TObject* TVirtualGeoTrack::fParticle {nullptr}. protected . Definition at line 28 of file TVirtualGeoTrack.h. ◆ fPDG. Int_t TVirtualGeoTrack::fPDG {0}. protected . Definition at line 25 of file TVirtualGeoTrack.h. ◆ fTracks. TObjArray* TVirtualGeoTrack::fTracks {nullptr}. protected . Definition at line 29 of file TVirtualGeoTrack.h. Libraries for TVirtualGeoTrack:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TVirtualGeoTrack.h; geom/geom/src/TVirtualGeoTrack.cxx. TVirtualGeoTrack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoTrack.html:27656,Guid,Guide,27656,doc/master/classTVirtualGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html,1,['Guid'],['Guide']
Usability,"k existence of function pointers. TGenCollectionProxy * InitializeEx(Bool_t silent); Proxy initializer. TClass * GetCollectionClass() const; Return a pointer to the TClass representing the container. Int_t GetCollectionType() const; Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement() const; Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass() const; Return a pointer to the TClass representing the content. void UpdateValueClass(const TClass* oldcl, TClass* newcl); Update the internal ValueClass when a TClass constructor need to; replace an emulated TClass by the real TClass. EDataType GetType() const; If the content is a simple numerical value, return its type (see TDataType). void* At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the emulated collection. UInt_t Size() const; Return the current size of the container. void Resize(UInt_t n, Bool_t force_delete); Resize the container. void* Allocate(UInt_t n, Bool_t forceDelete); Allocate the needed space.; For associative collection, this returns a TStaging object that; need to be deleted manually __or__ returned by calling Commit(TStaging*). void Insert(const void* data, void* container, size_t size); Insert data into the container where data is a C-style array of the actual type contained in the collection; of the given size. For associative container (map, etc.), the data type is the pair<key,value>. void Commit(void* env); Commit the change. void PushProxy(void* objstart); Add an object. void PopProxy(); Remove the last object. void DeleteItem(Bool_t force, void* ptr) const; Call to delete/destruct individual item. void ReadBuffer(TBuffer& b, void* obj, const TClass* onfileClass). void ReadBuffer(TBuffer& b, void* obj). void Streamer(TBuffer& refBuffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy.html:8278,Clear,Clear,8278,root/html602/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy.html,4,['Clear'],['Clear']
Usability,"k search function. ;  ; void SetResolution (Double_t resolution=1);  NOT USED resolution: determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ;  ; const char * SmoothMarkov (Double_t *source, Int_t ssize, Int_t averWindow);  One-dimensional markov spectrum smoothing function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * Unfolding (Double_t *source, const Double_t **respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost);  One-dimensional unfolding function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:5457,Clear,Clear,5457,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['Clear'],['Clear']
Usability,k searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:154465,simpl,simple,154465,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"k, Int_t light)=0; TVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas.Definition TVirtualPadPainter.h:19; TVirtualPadPainter::DrawBoxvirtual void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode)=0; TVirtualPadPainter::ClearDrawablevirtual void ClearDrawable()=0; TVirtualPadPainter::SetOpacityvirtual void SetOpacity(Int_t percent)=0; TVirtualPadPainter::DrawPolyLinevirtual void DrawPolyLine(Int_t n, const Double_t *x, const Double_t *y)=0; TVirtualPadPainter::GetLineColorvirtual Color_t GetLineColor() const =0; TVirtualPadPainter::SetLineStylevirtual void SetLineStyle(Style_t lstyle)=0; TVirtualPadPainter::SetFillColorvirtual void SetFillColor(Color_t fcolor)=0; TVirtualPadPainter::DestroyDrawablevirtual void DestroyDrawable(Int_t device)=0; TVirtualPadPainter::CopyDrawablevirtual void CopyDrawable(Int_t device, Int_t px, Int_t py)=0; TVirtualPadPainter::DrawLinevirtual void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)=0; TVirtualPadPainter::DrawFillAreavirtual void DrawFillArea(Int_t n, const Double_t *x, const Double_t *y)=0; TVirtualPadPainter::CreateDrawablevirtual Int_t CreateDrawable(UInt_t w, UInt_t h)=0; TVirtualPadPainter::SetLineColorvirtual void SetLineColor(Color_t lcolor)=0; TVirtualPadPainter::GetLineStylevirtual Style_t GetLineStyle() const =0; TVirtualPadPainter::SaveImagevirtual void SaveImage(TVirtualPad *pad, const char *fileName, Int_t type) const =0; TVirtualPadPainter::DrawLineNDCvirtual void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2)=0; TVirtualPadPainter::SetFillStylevirtual void SetFillStyle(Style_t fstyle)=0; TVirtualPadPainter::SetTextSizevirtual void SetTextSize(Float_t tsize=1)=0; TVirtualPadPainter::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)=0; TVirtualPadPainter::kClear@ kClearDefinition TVirtualPadPainter.h:22; TVirtualPadPainter::DrawPolyLineNDCvirtual void DrawPolyLineNDC(Int_t n, const Double_t *u, const Double_t *v)=0; TVirtualPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:331288,Clear,ClearDrawablevirtual,331288,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Clear'],"['ClearDrawable', 'ClearDrawablevirtual']"
Usability,"k, and TEveWindowTab. ◆ StreamerNVirtual(). void TEveWindow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 293 of file TEveWindow.h. ◆ SwapWindow(). void TEveWindow::SwapWindow ; (; TEveWindow * ; w). Swap frames with the given window. ; Definition at line 737 of file TEveWindow.cxx. ◆ SwapWindows(). void TEveWindow::SwapWindows ; (; TEveWindow * ; w1, . TEveWindow * ; w2 . ). static . Swap windows w1 and w2. ; They are properly reparented in the eve hierarch as well. Layout is called on both frames. ; Definition at line 1027 of file TEveWindow.cxx. ◆ SwapWindowWithCurrent(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:45806,Undo,UndockWindow,45806,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Undo'],['UndockWindow']
Usability,"k. This is where all the drawing happens. ; Definition at line 315 of file TGHtmlDraw.cxx. ◆ ButtonClicked(). void TGHtml::ButtonClicked ; (; const char * ; name, . const char * ; val . ). virtual . Emit ButtonClicked() signal. ; Definition at line 1286 of file TGHtml.cxx. ◆ CellSpacing(). int TGHtml::CellSpacing ; (; TGHtmlElement * ; pTable). Return the appropriate cell spacing for the given table. ; Definition at line 53 of file TGHtmlTable.cxx. ◆ CheckToggled(). void TGHtml::CheckToggled ; (; const char * ; name, . Bool_t ; on, . const char * ; val . ). virtual . Emit CheckToggled() signal. ; Definition at line 1299 of file TGHtml.cxx. ◆ ClassDefOverride(). TGHtml::ClassDefOverride ; (; TGHtml ; , . 0 ;  . ). protected . ◆ Clear(). void TGHtml::Clear ; (; Option_t * ; = """"). overridevirtual . Erase all HTML from this widget and clear the screen. ; This is typically done before loading a new document. ; Reimplemented from TObject.; Definition at line 310 of file TGHtml.cxx. ◆ ClearGcCache(). void TGHtml::ClearGcCache ; (; ). protected . Clear the cache of GCs. ; Definition at line 516 of file TGHtml.cxx. ◆ ColorDistance(). float TGHtml::ColorDistance ; (; ColorStruct_t * ; pA, . ColorStruct_t * ; pB . ). protected . Compute the squared distance between two colors. ; Definition at line 1613 of file TGHtml.cxx. ◆ ComputeVirtualSize(). void TGHtml::ComputeVirtualSize ; (; ). protected . Computes virtual size of html area. ; Definition at line 508 of file TGHtml.cxx. ◆ ControlSize(). int TGHtml::ControlSize ; (; TGHtmlInput * ; pElem). protected . This routine implements the Sizer() function for <INPUT>, <SELECT> and <TEXTAREA> markup. ; A side effect of sizing these markups is that widgets are created to represent the corresponding input controls.; The function normally returns 0. But if it is dealing with a <SELECT> or <TEXTAREA> that is incomplete, 1 is returned. In that case, the sizer will be called again at some point in the future when more information is avai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:57279,Clear,ClearGcCache,57279,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['Clear'],['ClearGcCache']
Usability,"kDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:3333,clear,clearValueAndShapeDirty,3333,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"kFALSE otherwise. ;  ; Bool_t RemoveUrlAt (Int_t i);  Remove URL at given position. Returns kTRUE on success, kFALSE on error. ;  ; void ResetUrl ();  ; Bool_t SetCurrentUrl (const char *url);  Set 'url' as current URL, if in the list Return kFALSE if not in the list. ;  ; Bool_t SetCurrentUrl (TUrl *url);  Set 'url' as current URL, if in the list Return kFALSE if not in the list. ;  ; void SetIndex (Int_t idx);  ; void SetSize (Long64_t size);  ; void SetUUID (const char *uuid);  Set the UUID to the value associated to the string 'uuid'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfo.html:3697,Clear,Clear,3697,doc/master/classTFileInfo.html,https://root.cern,https://root.cern/doc/master/classTFileInfo.html,1,['Clear'],['Clear']
Usability,"kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategoryLValue.html:2256,Clear,Clear,2256,root/html602/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsCategoryLValue.html,2,['Clear'],['Clear']
Usability,"kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategory.html:2187,Clear,Clear,2187,root/html602/RooAbsCategory.html,https://root.cern,https://root.cern/root/html602/RooAbsCategory.html,2,['Clear'],['Clear']
Usability,"kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsString.html:2015,Clear,Clear,2015,root/html602/RooAbsString.html,https://root.cern,https://root.cern/root/html602/RooAbsString.html,2,['Clear'],['Clear']
Usability,"kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinningCategory.html:1815,Clear,Clear,1815,root/html602/RooBinningCategory.html,https://root.cern,https://root.cern/root/html602/RooBinningCategory.html,8,['Clear'],['Clear']
Usability,"kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:1742,Clear,Clear,1742,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['Clear'],['Clear']
Usability,"kFullSquare);; h3->SetMarkerStyle(kFullTriangleUp);; h4->SetMarkerStyle(kFullTriangleDown);; h5->SetMarkerStyle(kOpenCircle);; ; h1->Draw(""PLC PMC"");; h2->Draw(""SAME PLC PMC"");; h3->Draw(""SAME PLC PMC"");; h4->Draw(""SAME PLC PMC"");; h5->Draw(""SAME PLC PMC"");; ; gPad->BuildLegend();; }; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kFullTriangleDown@ kFullTriangleDownDefinition TAttMarker.h:56; kFullSquare@ kFullSquareDefinition TAttMarker.h:55; kFullTriangleUp@ kFullTriangleUpDefinition TAttMarker.h:55; kFullCircle@ kFullCircleDefinition TAttMarker.h:55; kOpenCircle@ kOpenCircleDefinition TAttMarker.h:56; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetOptTitlevoid SetOptTitle(Int_t tit=1)Definition TStyle.h:334; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; h1TH1F * h1Definition legend1.C:5; AuthorOlivier Couet ; Definition in file histpalettecolor.C. tutorialshisthistpalettecolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/histpalettecolor_8C.html:3511,Guid,Guide,3511,doc/master/histpalettecolor_8C.html,https://root.cern,https://root.cern/doc/master/histpalettecolor_8C.html,1,['Guid'],['Guide']
Usability,"kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNameReg (const RooNameReg &other)=delete;  ; const TNamed * constPtr (const char *stringPtr);  Return a unique TNamed pointer for given C++ string. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNameReg.html:1811,Clear,Clear,1811,doc/master/classRooNameReg.html,https://root.cern,https://root.cern/doc/master/classRooNameReg.html,1,['Clear'],['Clear']
Usability,"kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDivIndexindex of first div. node; Double_tfEndending point; Int_tfNdivisionsnumber of divisions; Double_tfStartstarting point on divided axis; Double_tfStepdivision step length; vector<TGeoPatternFinder::ThreadData_t*>fThreadData! Vector of thread private transient data; Int_tfThreadSize! Size of the thread vector; TGeoVolume*fVolumevolume to which applies; static TGeoPatternFinder::EGeoPatternFlagskPatternReflected; static TGeoPatternFinder::EGeoPatternFlagskPatternSpacedOut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void CreateThreadData(Int_t nthreads); Create thread data for n threads max. TGeoPatternFinder(); Default constructor. TGeoPatternFinder(TGeoVolume* vol, Int_t ndiv); Default constructor. TGeoPatternFinder(const TGeoPatternFinder& ); copy constructor. TGeoPatternFinder& operator=(const TGeoPatternFinder& ); assignment operator. ~TGeoPatternFinder(); Destructor. Int_t GetCurrent(); Return current index. TGeoMatrix* GetMatrix(); Return current matrix. Int_t GetNext() const; Get index of next division. void SetNext(Int_t index); Set index of next division. TGeoNode * CdNext(); Make next node (if any) current. void SetRange(Double_t start, Double_t step, Int_t ndivisions); Set division range. Use this method only when dividing an assembly. ThreadData_t& GetThreadData() const. TGeoMatrix* CreateMatrix() const; methods. void cd(Int_t ); {}. TGeoNode * FindNode(Double_t* , const Double_t* = 0); {return 0;}. Int_t GetByteCount() const; {return 36;}. Int_t GetDivInde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPatternFinder.html:8347,Clear,ClearThreadData,8347,root/html602/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html602/TGeoPatternFinder.html,2,['Clear'],['ClearThreadData']
Usability,"kLTXDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLTZ@ kLTZDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLZT@ kLZTDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLYY@ kLYYDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLTY@ kLTYDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLZZ@ kLZZDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLTT@ kLTTDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLXX@ kLXXDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLYT@ kLYTDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLZX@ kLZXDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLZY@ kLZYDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLXY@ kLXYDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLXT@ kLXTDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLYX@ kLYXDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLYZ@ kLYZDefinition BoostZ.h:47; ROOT::Math::BoostZ::BoostZBoostZ()Default constructor (identity transformation)Definition BoostZ.cxx:30; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; double; ROOT::Math::betadouble beta(double x, double y)Calculates the beta function.Definition SpecFuncMathCore.cxx:111; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorsrcBoostZ.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BoostZ_8cxx_source.html:7188,Guid,Guide,7188,doc/master/BoostZ_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BoostZ_8cxx_source.html,1,['Guid'],['Guide']
Usability,"kMustCleanup);; 1182 }; 1183 CallFunc_t *socketCloser = gInterpreter->CallFunc_Factory();; 1184 Longptr_t offset = 0;; 1185 TClass *socketClass = TClass::GetClass(""TSocket"");; 1186 gInterpreter->CallFunc_SetFuncProto(socketCloser, socketClass->GetClassInfo(), ""Close"", """", &offset);; 1187 if (gInterpreter->CallFunc_IsValid(socketCloser)) {; 1188 static TObject harmless;; 1189 TObjLink *cursor = static_cast<TList*>(fSockets)->FirstLink();; 1190 TList notclosed;; 1191 while (cursor) {; 1192 TObject *socket = cursor->GetObject();; 1193 // In order for the iterator to stay valid, we must; 1194 // prevent the removal of the object (dir) from the list; 1195 // (which is done in TFile::Close). We can also can not; 1196 // just move to the next iterator since the Close might; 1197 // also (indirectly) remove that file.; 1198 // So we SetObject to a harmless value, so that 'dir'; 1199 // is not seen as part of the list.; 1200 // We will later, remove all the object (see files->Clear(); 1201 cursor->SetObject(&harmless); // this must not be zero otherwise things go wrong.; 1202 ; 1203 if (socket->IsA()->InheritsFrom(socketClass)) {; 1204 gInterpreter->CallFunc_Exec(socketCloser, ((char*)socket)+offset);; 1205 // Put the object in the closed list for later deletion.; 1206 socket->SetBit(kMustCleanup);; 1207 fClosedObjects->AddLast(socket);; 1208 } else {; 1209 // Crap ... this is not a socket, likely Proof or something, let's try to find a Close; 1210 Longptr_t other_offset;; 1211 CallFunc_t *otherCloser = gInterpreter->CallFunc_Factory();; 1212 gInterpreter->CallFunc_SetFuncProto(otherCloser, socket->IsA()->GetClassInfo(), ""Close"", """", &other_offset);; 1213 if (gInterpreter->CallFunc_IsValid(otherCloser)) {; 1214 gInterpreter->CallFunc_Exec(otherCloser, ((char*)socket)+other_offset);; 1215 // Put the object in the closed list for later deletion.; 1216 socket->SetBit(kMustCleanup);; 1217 fClosedObjects->AddLast(socket);; 1218 } else {; 1219 notclosed.AddLast(socket);; 1220 }; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:47182,Clear,Clear,47182,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Clear'],['Clear']
Usability,"kProjected::SecSelected ; (; TEveTrack * ; ). overridevirtual . Virtual method from from base-class TEveTrack. ; Reimplemented from TEveTrack.; Definition at line 241 of file TEveTrackProjected.cxx. ◆ SetDepthLocal(). void TEveTrackProjected::SetDepthLocal ; (; Float_t ; d). overrideprotectedvirtual . Set depth (z-coordinate) of the projected points. ; Reimplemented from TEveProjected.; Definition at line 49 of file TEveTrackProjected.cxx. ◆ SetProjection(). void TEveTrackProjected::SetProjection ; (; TEveProjectionManager * ; mng, . TEveProjectable * ; model . ). overridevirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 36 of file TEveTrackProjected.cxx. ◆ Streamer(). void TEveTrackProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveTrack. ◆ StreamerNVirtual(). void TEveTrackProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TEveTrackProjected.h. ◆ UpdateProjection(). void TEveTrackProjected::UpdateProjection ; (; ). overridevirtual . Virtual method from base-class TEveProjected. ; Implements TEveProjected.; Definition at line 69 of file TEveTrackProjected.cxx. Friends And Related Symbol Documentation. ◆ TEveTrackProjectedGL. friend class TEveTrackProjectedGL. friend . Definition at line 22 of file TEveTrackProjected.h. Member Data Documentation. ◆ fBreakPoints. std::vector<Int_t> TEveTrackProjected::fBreakPoints. protected . Definition at line 33 of file TEveTrackProjected.h. ◆ fOrigPnts. TEveVector* TEveTrackProjected::fOrigPnts. private . Definition at line 30 of file TEveTrackProjected.h. Libraries for TEveTrackProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTrackProjected.h; graf3d/eve/src/TEveTrackProjected.cxx. TEveTrackProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:59826,Guid,Guide,59826,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,1,['Guid'],['Guide']
Usability,"kRaw (the actual filling of tessellation) is split, as the X3D viewer requires two publication passes - one to establish the full tessellation capacity for all shapes, and another to actually add them. Splitting avoids having to do the expensive tessellation on the first pass. 9.13.4.4 Shape Specific TBuffer3D Derived Classes; Currently we provide the following shape specific classes, which the GL Viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres (GL Viewer only supports solid spheres at present - cut / hollow ones will be requested as tessellated objects by client.); TBuffer3DTube - basic tube with inner/outer radius and length.; TBuffer3DTubeSeg - angle tube segment.; TBuffer3DCutTube - angle tube segment with plane cut ends. See the above example from TGeoSphere::GetBuffer3D and also equivalent functions in TGeoTube, TGeoTubeSeg and TGeoCtub. Anyone is free to add new TBuffer3D classes, but it should be clear that one or more viewers will require updating to be able to take advantage of them. Hence we only provide classes which existing viewers can benefit from. The number of native shapes in GL Viewer will be expanded in the future.; 9.13.4.5 Master / Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames:. fLocalFrame: indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster: is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame. If fLocalFrame is false, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using the TBuffer3D::SetLocalMasterIdentity() method.; 9.13.4.6 Bounding Boxes; You are not obliged to complete the kBoundingBox section, as any viewer requiring one internally (GL Viewer) will build it if you do not provide. However to do this the viewer will force you to p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:411360,clear,clear,411360,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,"kRaw);; }; ; return buffer;; }; ; class MyGeom : public TObject, public TAtt3D; {; public:; MyGeom();; ~MyGeom() override;; ; void Draw(Option_t *option) override;; void Paint(Option_t *option) override;; ; private:; std::vector<Shape *> fShapes;; ; ClassDefOverride(MyGeom,0);; };; ; ClassImp(MyGeom);; ; MyGeom::MyGeom(); {; // Create our simple geometry - sphere, couple of boxes; // and a square base pyramid; Shape * aShape;; aShape = new Sphere(kYellow, 80.0, 60.0, 120.0, 10.0);; fShapes.push_back(aShape);; aShape = new Box(kRed, 0.0, 0.0, 0.0, 20.0, 20.0, 20.0);; fShapes.push_back(aShape);; aShape = new Box(kBlue, 50.0, 100.0, 200.0, 5.0, 10.0, 15.0);; fShapes.push_back(aShape);; aShape = new SBPyramid(kGreen, 20.0, 25.0, 45.0, 30.0, 30.0, 90.0);; fShapes.push_back(aShape);; }; ; MyGeom::~MyGeom(); {; // Clear out fShapes; }; ; void MyGeom::Draw(Option_t *option); {; TObject::Draw(option);; ; // Ask pad to create 3D viewer of type 'option'; gPad->GetViewer3D(option);; }; ; void MyGeom::Paint(Option_t * /*option*/); {; TVirtualViewer3D * viewer = gPad->GetViewer3D();; ; // If MyGeom derives from TAtt3D then pad will recognise; // that the object it is asking to paint is 3D, and open/close; // the scene for us. If not Open/Close are required; //viewer->BeginScene();; ; // We are working in the master frame - so we don't bother; // to ask the viewer if it prefers local. Viewer's must; // always support master frame as minimum. c.f. with; // viewer3DLocal.C; std::vector<Shape *>::const_iterator ShapeIt = fShapes.begin();; Shape * shape;; while (ShapeIt != fShapes.end()) {; shape = *ShapeIt;; ; UInt_t reqSections = TBuffer3D::kCore|TBuffer3D::kBoundingBox|TBuffer3D::kShapeSpecific;; TBuffer3D & buffer = shape->GetBuffer3D(reqSections);; reqSections = viewer->AddObject(buffer);; ; if (reqSections != TBuffer3D::kNone) {; shape->GetBuffer3D(reqSections);; viewer->AddObject(buffer);; }; ShapeIt++;; }; // Not required as we are TAtt3D subclass; //viewer->EndScene();; }; ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:13904,Clear,Clear,13904,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['Clear'],['Clear']
Usability,"kTRUE (for example TTVLVContainer class); The TGContainer class can handle the keys:. F7, Ctnrl-F - activate search dialog; F3, Ctnrl-G - continue search; End - go to the last item in container; Home - go to the first item in container; PageUp,PageDown,arrow keys - navigate inside container; Return/Enter - equivalent to double click of the mouse button; Ctnrl-A - select/activate all items.; Space - invert selection. . Definition at line 31 of file TGCanvas.h. Public Member Functions;  TGContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  TGContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  ~TGContainer () override;  Delete canvas container. ;  ; virtual void AdjustPosition ();  Move content to position of highlighted/activated frame. ;  ; virtual void Associate (const TGWindow *w);  ; virtual void ClearViewPort ();  Clear view port and redraw full content. ;  ; virtual void Clicked (TGFrame *f, Int_t btn);  Emit Clicked() signal. ;  ; virtual void Clicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; virtual void CurrentChanged (Int_t x, Int_t y);  Emit signal when current position changed. ;  ; virtual void CurrentChanged (TGFrame *f);  Emit signal when current selected frame changed. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn);  Emit DoubleClicked() signal. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit DoubleClicked() signal. ;  ; virtual void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw a region of container in viewport. ;  ; virtual void End (Bool_t select=kFALSE);  Move to the bottom-right corner of container. ;  ; virtual TGFrameElement * FindFrame (Int_t x, Int_t y, Bool_t exclude=kTRUE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:1977,Clear,ClearViewPort,1977,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"kTRUE). Set visibility for the daughters. ; Definition at line 116 of file TGeoAtt.cxx. ◆ SetVisibility(). void TGeoAtt::SetVisibility ; (; Bool_t ; vis = kTRUE). virtual . Set visibility for this object. ; Reimplemented in TGeoNode, TGeoVolume, and TGeoVolumeMulti.; Definition at line 104 of file TGeoAtt.cxx. ◆ SetVisLeaves(). void TGeoAtt::SetVisLeaves ; (; Bool_t ; flag = kTRUE). virtual . Set branch type visibility. ; Reimplemented in TGeoVolume.; Definition at line 84 of file TGeoAtt.cxx. ◆ SetVisOnly(). void TGeoAtt::SetVisOnly ; (; Bool_t ; flag = kTRUE). virtual . Set branch type visibility. ; Reimplemented in TGeoVolume.; Definition at line 94 of file TGeoAtt.cxx. ◆ SetVisRaytrace(). void TGeoAtt::SetVisRaytrace ; (; Bool_t ; flag = kTRUE). inline . Definition at line 66 of file TGeoAtt.h. ◆ SetVisStreamed(). void TGeoAtt::SetVisStreamed ; (; Bool_t ; vis = kTRUE). Mark attributes as ""streamed to file"". ; Definition at line 128 of file TGeoAtt.cxx. ◆ SetVisTouched(). void TGeoAtt::SetVisTouched ; (; Bool_t ; vis = kTRUE). Mark visualization attributes as ""modified"". ; Definition at line 138 of file TGeoAtt.cxx. ◆ Streamer(). virtual void TGeoAtt::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TGeoNode, TGeoNodeMatrix, TGeoNodeOffset, TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly, and TVirtualGeoTrack. ◆ StreamerNVirtual(). void TGeoAtt::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TGeoAtt.h. ◆ TestAttBit(). Bool_t TGeoAtt::TestAttBit ; (; UInt_t ; f); const. inline . Definition at line 64 of file TGeoAtt.h. Member Data Documentation. ◆ fGeoAtt. UInt_t TGeoAtt::fGeoAtt. protected . Definition at line 53 of file TGeoAtt.h. Libraries for TGeoAtt:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoAtt.h; geom/geom/src/TGeoAtt.cxx. TGeoAtt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoAtt.html:10027,Guid,Guide,10027,doc/master/classTGeoAtt.html,https://root.cern,https://root.cern/doc/master/classTGeoAtt.html,1,['Guid'],['Guide']
Usability,"k_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tAssertCellIdCache() const; TEveRGBAPalette*AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tCellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloViz.html:2599,Clear,ClearProjectedList,2599,root/html528/TEveCaloViz.html,https://root.cern,https://root.cern/root/html528/TEveCaloViz.html,6,['Clear'],['ClearProjectedList']
Usability,"kage exist in ROOT:; Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. See the GenVector page. UNURAN: Package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions.; Foam Multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW Library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of FFTW.; MLP Library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp Optimization library with linear and quadratic programming methods. It is based on the Matrix package. Further information is available at the following links:. The Math page in the manual; The Linear Algebra section in the manual; The Fitting histograms page in the manual; [Inventory of Math functions and algorithms] (http://project-mathlibs.web.cern.ch/project-mathlibs/mathTable.html) . Modules;  Physics Vectors;  Vector classes (2D, 3D and 4D / Lorentz vector) and their transformations. ;  ;  MathCore;  The Core Mathematical Library of ROOT. ;  ;  MathMore;  The Mathematical library providing some advanced functionality and based on GSL. ;  ;  Matrix Linear Algebra;  The ROOT Matrix Linear Algebra package. ;  ;  TMinuit;  The Minuit Minimization package. ;  ;  Minuit2 Minimization Library;  New Object-oriented implementation of the MINUIT minimization package. ;  ;  Legacy Physics Classes;  Legacy physics classes. ;  ;  SMatrix Package;  ;  Unuran;  Universal Non Uniform Random number generator for generating non uniform pseudo-random numbers. ;  . ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/group__Math.html:5027,Guid,Guide,5027,doc/v632/group__Math.html,https://root.cern,https://root.cern/doc/v632/group__Math.html,1,['Guid'],['Guide']
Usability,"kage for ROOT. ; Typedef Documentation. ◆ TRInternalFunction. typedef Rcpp::TRInternalFunction_Impl<Rcpp::PreserveStorage> ROOT::R::TRInternalFunction. Definition at line 61 of file TRInternalFunction.h. Function Documentation. ◆ function(). template<class T > . void ROOT::R::function ; (; const Char_t * ; name_, . T ; fun, . const Char_t * ; docstring = 0 . ). Definition at line 167 of file RExports.h. ◆ Label(). const Rcpp::internal::NamedPlaceHolder & ROOT::R::Label ; (; Rcpp::_ ; ). ◆ R_completion_generator(). char * ROOT::R::R_completion_generator ; (; const char * ; text, . int ; state . ). Definition at line 26 of file TRCompletion.cxx. ◆ R_custom_completion(). char ** ROOT::R::R_custom_completion ; (; const char * ; text, . int ; start, . int ; end . ). Definition at line 69 of file TRCompletion.cxx. Variable Documentation. ◆ Label. const Rcpp::internal::NamedPlaceHolder& ROOT::R::Label. extern . ◆ ModuleSymRef. VARIABLE_IS_NOT_USED SEXP ROOT::R::ModuleSymRef = NULL. Definition at line 116 of file RExports.cxx. ◆ RComp_assignBufferSym. SEXP ROOT::R::RComp_assignBufferSym. Definition at line 14 of file TRCompletion.cxx. ◆ RComp_assignEndSym. SEXP ROOT::R::RComp_assignEndSym. Definition at line 16 of file TRCompletion.cxx. ◆ RComp_assignStartSym. SEXP ROOT::R::RComp_assignStartSym. Definition at line 15 of file TRCompletion.cxx. ◆ RComp_assignTokenSym. SEXP ROOT::R::RComp_assignTokenSym. Definition at line 17 of file TRCompletion.cxx. ◆ RComp_completeTokenSym. SEXP ROOT::R::RComp_completeTokenSym. Definition at line 18 of file TRCompletion.cxx. ◆ RComp_getFileCompSym. SEXP ROOT::R::RComp_getFileCompSym. Definition at line 19 of file TRCompletion.cxx. ◆ RComp_retrieveCompsSym. SEXP ROOT::R::RComp_retrieveCompsSym. Definition at line 20 of file TRCompletion.cxx. ◆ rcompgen_rho. SEXP ROOT::R::rcompgen_rho. Definition at line 22 of file TRCompletion.cxx. ROOTR. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1R.html:3451,Guid,Guide,3451,doc/master/namespaceROOT_1_1R.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1R.html,1,['Guid'],['Guide']
Usability,"kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Our construction method is optimized to save memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree; 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:4455,simpl,simplify,4455,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['simpl'],['simplify']
Usability,"ke a vector and assign initial values. ;  ;  TVectorT (Int_t n);  Constructor n-vector. ;  ;  TVectorT (Int_t n, const Element *elements);  Constructor n-vector with data copied from array elements. ;  ;  ~TVectorT () override;  ; TVectorT< Element > & Abs ();  Take an absolute value of a vector, i.e. apply Abs() to each element. ;  ; void Add (const TVectorT< Element > &v);  Add vector v to this vector. ;  ; void Add (const TVectorT< Element > &v1, const TVectorT< Element > &v2);  Set this vector to v1+v2. ;  ; void AddSomeConstant (Element val, const TVectorT< Element > &select);  Add to vector elements as selected through array select the value val. ;  ; TVectorT< Element > & Apply (const TElementActionT< Element > &action);  Apply action to each element of the vector. ;  ; TVectorT< Element > & Apply (const TElementPosActionT< Element > &action);  Apply action to each element of the vector. ;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; void Draw (Option_t *option="""") override;  Draw this vector The histogram is named ""TVectorT"" by default and no title. ;  ; Int_t GetLwb () const;  ; Element * GetMatrixArray ();  ; const Element * GetMatrixArray () const;  ; Int_t GetNoElements () const;  ; Int_t GetNrows () const;  ; TVectorT< Element > GetSub (Int_t row_lwb, Int_t row_upb, Option_t *option=""S"") const;  ; TVectorT< Element > & GetSub (Int_t row_lwb, Int_t row_upb, TVectorT< Element > &target, Option_t *option=""S"") const;  Get subvector [row_lwb..row_upb]; The indexing range of the returned vector depends on the argument option: ;  ; Int_t GetUpb () const;  ; void Invalidate ();  ; TVectorT< Element > & Invert ();  v[i] = 1/v[i] ;  ; TClass * IsA () const override;  ; Bool_t IsOwner () const;  ; Bool_t IsValid () const;  ; void MakeValid ();  ; Bool_t MatchesNonZeroPattern (const TVectorT< Element > &select);  Check if vector elements as selected through array select are non-zero. ;  ; Element Max () const;  return maximum vector element valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVectorT.html:3001,Clear,Clear,3001,doc/master/classTVectorT.html,https://root.cern,https://root.cern/doc/master/classTVectorT.html,1,['Clear'],['Clear']
Usability,"ke advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. OpenGL only supports solid spheres at present - cut/hollow ones will be requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the viewers require updating to be able to take advantage of them. The number of native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer requiring one internally (OpenGL) will build one for you if you do not provide. However to do this the viewer will force you to provide the raw tessellation, and the resulting box will be axis aligned with the overall scene, which is non-ideal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function. Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:6536,simpl,simpler,6536,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['simpl'],['simpler']
Usability,"ke advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. OpenGL only supports solid spheres at present - cut/hollow ones will be requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the viewers require updating to be able to take advantage of them. The number of native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer requiring one internally (OpenGL) will build one for you if you do not provide. However to do this the viewer will force you to provide the raw tessellation, and the resulting box will be axis aligned with the overall scene, which is non-ideal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function.; Logical & Physical Objects. There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:4470,simpl,simpler,4470,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['simpl'],['simpler']
Usability,"ke sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree.Definition TTree.cxx:7881; TTree::GetPlayerTVirtualTreePlayer * GetPlayer()Load the TTreePlayer (if not already done).Definition TTree.cxx:6305; TTree::MakeProxyvirtual Int_t MakeProxy(const char *classname, const char *macrofilename=nullptr, const char *cutfilename=nullptr, const char *option=nullptr, Int_t maxUnrolling=3)Generate a skeleton analysis class for this Tree using TBranchProxy.Definition TTree.cxx:6768; TTree::kSplitCollectionOfPointers@ kSplitCollectionOfPointersDefinition TTree.h:266; TTree::fTargetMemoryRatioFloat_t fTargetMemoryRatio! Ratio for memory usage in uncompressed buffers versus actual occupancy.Definition TTree.h:146; TTree::GetIndexValuesvirtual Double_t * GetIndexValues()Definition TTree.h:522; TTree::GetListOfAliasesvirtual TList * GetListOfAliases() constDefinition TTree.h:531; TTree::ReadStreamvirtual Long64_t ReadStream(std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from an input stream.Definition TTree.cxx:7615; TTree::SetDebugvirtual void SetDebug(Int_t level=1, Long64_t min=0, Long64_t max=9999999)Set the debug level and the debug range.Definition TTree.cxx:8928; TTree::fScanFieldInt_t fScanFieldNumber of runs before prompting in Scan.Definition TTree.h:92; TTree::GetWeightvirtual Double_t GetWeight() constDefinition TTree.h:584; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetFriendvirtual TTree * GetFriend(const char *) constReturn a pointer to the TTree friend whose name or alias is friendname.Definition TTree.cxx:5975; TTree::GetVarTTreeFormula * GetVar(Int_t i)Definition TTree.h:564; TTree::SetNotifyvirtual void SetNotify(TObject *obj)Sets the address of the object to be notified when the tree is loaded.Definition TTree.cxx:9231; TTree::GetMaximumvirtual Double_t GetMaximum(const char *columname)Return max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:61696,simpl,simply,61696,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simply']
Usability,keClassFromClassName(). TClass * TTabCom::TryMakeClassFromClassName ; (; const char ; className[]); const. private . Same as above but does not print the error message. ; Definition at line 2235 of file TTabCom.cxx. Member Data Documentation. ◆ fBuf. char* TTabCom::fBuf. private . Definition at line 218 of file TTabCom.h. ◆ fLastIter. Int_t TTabCom::fLastIter. private . Definition at line 224 of file TTabCom.h. ◆ fPat. Pattern_t TTabCom::fPat[kNUM_PAT][ 1024]. private . Definition at line 221 of file TTabCom.h. ◆ fpClasses. TSeqCollection* TTabCom::fpClasses. private . Definition at line 208 of file TTabCom.h. ◆ fpDirectives. TSeqCollection* TTabCom::fpDirectives. private . Definition at line 210 of file TTabCom.h. ◆ fpEnvVars. TSeqCollection* TTabCom::fpEnvVars. private . Definition at line 211 of file TTabCom.h. ◆ fpFiles. TSeqCollection* TTabCom::fpFiles. private . Definition at line 212 of file TTabCom.h. ◆ fpGlobals. TSeqCollection* TTabCom::fpGlobals. private . Definition at line 213 of file TTabCom.h. ◆ fpLoc. int* TTabCom::fpLoc. private . Definition at line 219 of file TTabCom.h. ◆ fpPragmas. TSeqCollection* TTabCom::fpPragmas. private . Definition at line 214 of file TTabCom.h. ◆ fPrevInterpMarker. ULong64_t TTabCom::fPrevInterpMarker. private . Definition at line 209 of file TTabCom.h. ◆ fpSysIncFiles. TSeqCollection* TTabCom::fpSysIncFiles. private . Definition at line 215 of file TTabCom.h. ◆ fpUsers. TSeqCollection* TTabCom::fpUsers. private . Definition at line 216 of file TTabCom.h. ◆ fRegExp. const char* TTabCom::fRegExp[kNUM_PAT]. private . Definition at line 222 of file TTabCom.h. ◆ fVarIsPointer. Bool_t TTabCom::fVarIsPointer. private . Definition at line 223 of file TTabCom.h. Libraries for TTabCom:. [legend]; The documentation for this class was generated from the following files:; core/rint/inc/TTabCom.h; core/rint/src/TTabCom.cxx. TTabCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:21227,Guid,Guide,21227,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Guid'],['Guide']
Usability,"ke_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply); 172{; 173 auto path = fWorkingPath;; 174 path.insert(path.end(), request.pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:4646,clear,clear,4646,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,2,['clear'],['clear']
Usability,"ke_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; }). Definition at line 25 of file NeuralNet.cxx. ◆ Sigmoid. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); }). Definition at line 26 of file NeuralNet.cxx. ◆ SoftPlus. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); }). Definition at line 27 of file NeuralNet.cxx. ◆ SoftSign. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); }). Definition at line 32 of file NeuralNet.cxx. ◆ SymmReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; }). Definition at line 30 of file NeuralNet.cxx. ◆ Tanh. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); }). Definition at line 29 of file NeuralNet.cxx. ◆ TanhShift. std::shared_ptr< std::function< double(double)> > TMVA::DNN::TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); }). Definition at line 31 of file NeuralNet.cxx. ◆ ZeroFnc. std::shared_ptr< std::function< double(double)> > TMVA::DNN::ZeroFnc = std::make_shared<std::function<double(double)>> ([](double ){ return 0; }). Definition at line 28 of file NeuralNet.cxx. TMVADNN. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:41186,Guid,Guide,41186,doc/v632/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html,1,['Guid'],['Guide']
Usability,"ked Questions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Frequently Asked Questions; [expand all][collapse all]. How to generate a dictionary . A dictionary is a source file that once compiled, l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:1016,Guid,Guides,1016,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['Guid'],['Guides']
Usability,keeps same size as canvas ; Definition at line 79 of file TRootCanvas.h. ◆ fButton. Int_t TRootCanvas::fButton. private . currently pressed button ; Definition at line 80 of file TRootCanvas.h. ◆ fCanvasContainer. TRootContainer* TRootCanvas::fCanvasContainer. private . container in canvas widget ; Definition at line 40 of file TRootCanvas.h. ◆ fCanvasID. Int_t TRootCanvas::fCanvasID. private . index in fWindows array of TGX11 ; Definition at line 78 of file TRootCanvas.h. ◆ fCanvasLayout. TGLayoutHints* TRootCanvas::fCanvasLayout. private . layout for canvas widget ; Definition at line 54 of file TRootCanvas.h. ◆ fCanvasWindow. TGCanvas* TRootCanvas::fCanvasWindow. private . canvas widget ; Definition at line 39 of file TRootCanvas.h. ◆ fDockLayout. TGLayoutHints* TRootCanvas::fDockLayout. private . layout hints for dockable frame widget ; Definition at line 72 of file TRootCanvas.h. ◆ fEditClearMenu. TGPopupMenu* TRootCanvas::fEditClearMenu. private . clear cascade submenu ; Definition at line 45 of file TRootCanvas.h. ◆ fEditMenu. TGPopupMenu* TRootCanvas::fEditMenu. private . edit menu ; Definition at line 44 of file TRootCanvas.h. ◆ fEditor. TVirtualPadEditor* TRootCanvas::fEditor. private . pointer to currently loaded pad editor ; Definition at line 76 of file TRootCanvas.h. ◆ fEditorFrame. TGCompositeFrame* TRootCanvas::fEditorFrame. private . side frame for current pad editor ; Definition at line 58 of file TRootCanvas.h. ◆ fEditorLayout. TGLayoutHints* TRootCanvas::fEditorLayout. private . layout for editor frame ; Definition at line 59 of file TRootCanvas.h. ◆ fEmbedded. Bool_t TRootCanvas::fEmbedded. private . true if embedded in any other frame (e.g. in the browser) ; Definition at line 77 of file TRootCanvas.h. ◆ fFileMenu. TGPopupMenu* TRootCanvas::fFileMenu. private . file menu ; Definition at line 42 of file TRootCanvas.h. ◆ fFileSaveMenu. TGPopupMenu* TRootCanvas::fFileSaveMenu. private . save cascade submenu ; Definition at line 43 of file TRootCanv,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:55224,clear,clear,55224,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['clear'],['clear']
Usability,"kerColor(gStyle->GetMarkerColor());; 891 SetMarkerStyle(gStyle->GetMarkerStyle());; 892 SetMarkerSize(gStyle->GetMarkerSize());; 893 ; 894 fMaxEntries = 1000000000;; 895 fMaxEntries *= 1000;; 896 ; 897 fMaxEntryLoop = 1000000000;; 898 fMaxEntryLoop *= 1000;; 899 ; 900 // Insert ourself into the current directory.; 901 // FIXME: This is very annoying behaviour, we should; 902 // be able to choose to not do this like we; 903 // can with a histogram.; 904 if (fDirectory) fDirectory->Append(this);; 905 ; 906 fBranches.SetOwner(true);; 907 ; 908 // If title starts with ""/"" and is a valid folder name, a superbranch; 909 // is created.; 910 // FIXME: Why?; 911 if (strlen(title) > 2) {; 912 if (title[0] == '/') {; 913 Branch(title+1,32000,splitlevel);; 914 }; 915 }; 916}; 917 ; 918////////////////////////////////////////////////////////////////////////////////; 919/// Destructor.; 920 ; 921TTree::~TTree(); 922{; 923 if (auto link = dynamic_cast<TNotifyLinkBase*>(fNotify)) {; 924 link->Clear();; 925 }; 926 if (fAllocationCount && (gDebug > 0)) {; 927 Info(""TTree::~TTree"", ""For tree %s, allocation count is %u."", GetName(), fAllocationCount.load());; 928#ifdef R__TRACK_BASKET_ALLOC_TIME; 929 Info(""TTree::~TTree"", ""For tree %s, allocation time is %lluus."", GetName(), fAllocationTime.load());; 930#endif; 931 }; 932 ; 933 if (fDirectory) {; 934 // We are in a directory, which may possibly be a file.; 935 if (fDirectory->GetList()) {; 936 // Remove us from the directory listing.; 937 fDirectory->Remove(this);; 938 }; 939 //delete the file cache if it points to this Tree; 940 TFile *file = fDirectory->GetFile();; 941 MoveReadCache(file,nullptr);; 942 }; 943 ; 944 // Remove the TTree from any list (linked to to the list of Cleanups) to avoid the unnecessary call to; 945 // this RecursiveRemove while we delete our content.; 946 ROOT::CallRecursiveRemoveIfNeeded(*this);; 947 ResetBit(kMustCleanup); // Don't redo it.; 948 ; 949 // We don't own the leaves in fLeaves, the branches do.; 95",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:33327,Clear,Clear,33327,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Clear'],['Clear']
Usability,"keyname in the current directory or its subdirectories.Definition TDirectoryFile.cxx:795; TDirectoryFile::FillBuffervoid FillBuffer(char *&buffer) overrideEncode directory header into output buffer.Definition TDirectoryFile.cxx:735; TDirectoryFile::WriteDirHeadervoid WriteDirHeader() overrideOverwrite the Directory header record.Definition TDirectoryFile.cxx:2141; TDirectoryFile::SetWritablevoid SetWritable(Bool_t writable=kTRUE) overrideSet the new value of fWritable recursively.Definition TDirectoryFile.cxx:1684; TDirectoryFile::Buildvoid Build(TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) overrideDefinition TDirectoryFile.h:68; TDirectoryFile::ReadAllvoid ReadAll(Option_t *option="""") overrideRead objects from a ROOT file directory into memory.Definition TDirectoryFile.cxx:1326; TDirectoryFile::fKeysTList * fKeysPointer to keys list in memory.Definition TDirectoryFile.h:46; TDirectoryFile::lsvoid ls(Option_t *option="""") const overrideList Directory contents.Definition TDirectoryFile.cxx:1171; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; bool; int; v@ vDefinition rootcling_impl.cxx:3699; ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault@ kUseCompiledDefaultUse the compile-time default setting.Definition Compression.h:53. ioioincTDirectoryFile.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8h_source.html:20308,Guid,Guide,20308,doc/master/TDirectoryFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8h_source.html,1,['Guid'],['Guide']
Usability,"kgfrac * bkg + [%] * sig ] = 0.582695/1 ""g1+g2+a""; 2) 0x898ff20 RooAddPdf:: bkg[ bkg1frac * bkg1 + [%] * bkg2 ] = 0.16539/1 ""Signal""; 3) 0x891da50 RooChebychev:: bkg1[ x=x coefficients=(a0,a1) ] = 0.8 ""Background 1""; 4) 0x8948240 RooExponential:: bkg2[ x=x c=alpha ] = 0.00673795 ""Background 2""; 5) 0x8554880 RooGaussian:: sig[ x=x mean=mean sigma=sigma ] = 1 ""Signal component 1""; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooCustomizer::build(model): tree node sig will be replaced by sigsum; [#1] INFO:ObjectHandling -- RooCustomizer::build(model) Branch node RooAddPdf::model cloned: depends on a replaced parameter; [#1] INFO:ObjectHandling -- RooCustomizer::build(model) Branch node sig is already replaced; 0x8e664a0 RooAddPdf::model_cust = 0.582695/1 [Auto,Clean] ; 0x898ff20/V- RooAddPdf::bkg = 0.16539/1 [Auto,Clean] ; 0x891da50/V- RooChebychev::bkg1 = 0.8 [Auto,Dirty] ; 0x8241e40/V- RooRealVar::x = 5; 0x847fc10/V- RooRealVar::a0 = 0.5; 0x84f2330/V- RooRealVar::a1 = 0.2; 0x8782390/V- RooRealVar::bkg1frac = 0.2; 0x8948240/V- RooExponential::bkg2 = 0.00673795 [Auto,Dirty] ; 0x8241e40/V- RooRealVar::x = 5; 0x87f3060/V- RooRealVar::alpha = -1; 0x8926120/V- RooRealVar::bkgfrac = 0.5; 0x8cd8990/V- RooAddPdf::sigsum = 1/1 [Auto,Clean] ; 0x8554880/V- RooGaussian::sig = 1 [Auto,Dirty] ; 0x8241e40/V- RooRealVar::x = 5; 0x82654f0/V- RooRealVar::mean = 5; 0x7ef2000/V- RooRealVar::sigma = 0.5; 0x209c5a0/V- RooRealVar::sig1frac = 0.8; 0x8f54960/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x8241e40/V- RooRealVar::x = 5; 0x82654f0/V- RooRealVar::mean = 5; 0x40132d0/V- RooRealVar::sigma2 = 1; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf207_comptools.py. tutorialsroofitrf207_comptools.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf207__comptools_8py.html:6864,Guid,Guide,6864,doc/master/rf207__comptools_8py.html,https://root.cern,https://root.cern/doc/master/rf207__comptools_8py.html,1,['Guid'],['Guide']
Usability,"king of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TJSONStackObj:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TJSONStackObj(). TJSONStackObj::TJSONStackObj ; (; ). default . keep actual class version, workaround for ReadVersion in custom streamer . ◆ ~TJSONStackObj(). TJSONStackObj::~TJSONStackObj ; (; ). inlineoverride . Definition at line 362 of file TBufferJSON.cxx. Member Function Documentation. ◆ AssignStl(). Bool_t TJSONStackObj::AssignStl ; (; TClass * ; cl, . Int_t ; map_convert, . const char * ; typename_tag . ). inline . Definition at line 442 of file TBufferJSON.cxx. ◆ ClearStl(). void TJSONStackObj::ClearStl ; (; ). inline . Definition at line 467 of file TBufferJSON.cxx. ◆ GetStlNode(). nlohmann::json * TJSONStackObj::GetStlNode ; (; ). inline . Definition at line 462 of file TBufferJSON.cxx. ◆ IsJsonArray(). Int_t TJSONStackObj::IsJsonArray ; (; nlohmann::json * ; json = nullptr, . const char * ; map_convert_type = nullptr . ). inline . checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ; Definition at line 392 of file TBufferJSON.cxx. ◆ IsJsonString(). Bool_t TJSONStackObj::IsJsonString ; (; ). inline . Definition at line 387 of file TBufferJSON.cxx. ◆ IsStl(). Bool_t TJSONStackObj::IsStl ; (; ); const. inline . Definition at line 440 of file TBufferJSON.cxx. ◆ IsStreamerElement(). Bool_t TJSONStackObj::IsStreamerElement ; (; ); const. inline . Definition at line 370 of file TBufferJSON.cxx. ◆ IsStreamerInfo(). Bool_t TJSONStackObj::IsStreamerInfo ; (; ); const. inline . Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:12062,Clear,ClearStl,12062,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['Clear'],['ClearStl']
Usability,"klass,Proxy)::RealObject()->method(p->par1,p->par2,p->par3,p->par4,p->par5,p->par6,p->par7,p->par8,p->par9,p->par10,p->par11);\; 903}\; 904\; 905type _NAME3_(TGWin32,klass,Proxy)::method(type1 par1,type2 par2,type3 par3,type4 par4,type5 par5,type6 par6,type7 par7,type8 par8,type9 par9,type10 par10,type11 par11)\; 906{\; 907 DEBUG_PROFILE_PROXY_START(method)\; 908 type ret;\; 909 struct tmp {\; 910 type1 par1; type2 par2; type3 par3; type4 par4; type5 par5; type6 par6; type7 par7; type8 par8; type9 par9; type10 par10; type11 par11; type ret;\; 911 tmp(type1 par1,type2 par2,type3 par3,type4 par4,type5 par5,type6 par6,type7 par7,type8 par8,type9 par9,type10 par10,type11 par11):par1(par1),par2(par2),par3(par3),par4(par4),par5(par5),par6(par6),par7(par7),par8(par8),par9(par9),par10(par10),par11(par11) {}\; 912 };\; 913 fParam = new tmp(par1,par2,par3,par4,par5,par6,par7,par8,par9,par10,par11);\; 914 fCallBack = &_NAME4_(p2,klass,method,par1);\; 915 Bool_t batch = ForwardCallBack(1);\; 916 par1 = ((tmp*)fParam)->par1;\; 917 par2 = ((tmp*)fParam)->par2;\; 918 par3 = ((tmp*)fParam)->par3;\; 919 par4 = ((tmp*)fParam)->par4;\; 920 par5 = ((tmp*)fParam)->par5;\; 921 par6 = ((tmp*)fParam)->par6;\; 922 par7 = ((tmp*)fParam)->par7;\; 923 par8 = ((tmp*)fParam)->par8;\; 924 par9 = ((tmp*)fParam)->par9;\; 925 par10 = ((tmp*)fParam)->par10;\; 926 par11 = ((tmp*)fParam)->par11;\; 927 ret = ((tmp*)fParam)->ret;\; 928 if (!batch) delete fParam;\; 929 DEBUG_PROFILE_PROXY_STOP(method)\; 930 return ret;\; 931}; 932 ; 933#endif; Rtypes.h; kDebugProfile@ kDebugProfileDefinition TGWin32ProxyDefs.h:38; kDebugTrace@ kDebugTraceDefinition TGWin32ProxyDefs.h:38; gDebugProxystatic int gDebugProxyDefinition TGWin32ProxyDefs.h:36; total_timestatic double total_timeDefinition TGWin32ProxyDefs.h:41; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40. graf2dwin32gdkincTGWin32ProxyDefs.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32ProxyDefs_8h_source.html:39198,Guid,Guide,39198,doc/master/TGWin32ProxyDefs_8h_source.html,https://root.cern,https://root.cern/doc/master/TGWin32ProxyDefs_8h_source.html,1,['Guid'],['Guide']
Usability,"knots (see BuildCoeff) for more on this ;  CTSplinePolyBase class for TSpline knot ;  CTSplinePoly3Class for TSpline3 knot ;  CTSplinePoly5Class for TSpline5 knot ;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarchical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:206344,feedback,feedback,206344,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['feedback'],['feedback']
Usability,"known branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. void SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes). void SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if needed. If autocache is true:; this will be an automatically create cache, possibly replacing an; existing autocreated cache with a larger one. The size is calculated,; cacheSize is unused. If autocache is false:; cacheSize is used to size the cache. This cache should never be; automatically adjusted. void SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in online real time environments; to store the results of the last maxEntries events.; NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before; merging circular Trees that have been saved on files.; NOTE 3:; SetCircular with maxEntries <= 0 is automatically called; by TChain::Merge; NOTE 4:; A circular Tree can still be saved in a file. When read back,; it is still a circular Tree and can be filled again. void SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); Set the debug level and the debug range. For entries in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:132456,learn,learning,132456,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['learn'],['learning']
Usability,"kspace; f form feed; n new line; r carriage return; s space; t tab; e ASCII ESC character (‘033’); DDD number formed of 1-3 octal digits; xDD number formed of 1-2 hex digits; ^C C = any letter. Control code. The class TRegexp can be used to create a regular expression from an input string. If wildcard is true then the input string contains a wildcard expression.; TRegexp(const char *re, Bool_t wildcard); Regular expression and wildcards can be easily used in methods like:; Ssiz_t Index(const TString& string,Ssiz_t* len,Ssiz_t i) const; The method finds the first occurrence of the regular expression in the string and returns its position.; 2.5 Conventions; In this paragraph, we will explain some of the conventions used in ROOT source and examples.; 2.5.1 Coding Conventions; From the first days of ROOT development, it was decided to use a set of coding conventions. This allows a consistency throughout the source code. Learning these will help you identify what type of information you are dealing with and enable you to understand the code better and quicker. Of course, you can use whatever convention you want but if you are going to submit some code for inclusion into the ROOT sources, you will need to use these.; These are the coding conventions:. Classes begin with T: TLine, TTree; Non-class types end with _t: Int_t; Data members begin with f: fTree; Member functions begin with a capital: Loop(); Constants begin with k: kInitialSize, kRed; Global variables begin with g: gEnv; Static data members begin with fg: fgTokenClient; Enumeration types begin with E: EColorLevel; Locals and parameters begin with a lower case: nbytes; Getters and setters begin with Get and Set: SetLast(), GetFirst(). 2.5.2 Machine Independent Types; Different machines may have different lengths for the same type. The most famous example is the int type. It may be 16 bits on some old machines and 32 bits on some newer ones. To ensure the size of your variables, use these pre defined types in ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:56892,Learn,Learning,56892,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Learn'],['Learning']
Usability,"l (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. ; Example: RLogScopedVerbosity debugThis(gFooLog, ELogLevel::kDebug);; Foo::SomethingToDebug();; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug. Definition at line 243 of file RLogger.hxx. Public Member Functions;  RLogScopedVerbosity (ELogLevel verbosity);  ;  RLogScopedVerbosity (RLogChannel &channel, ELogLevel verbosity);  ;  ~RLogScopedVerbosity ();  . Private Attributes; RLogChannel * fChannel;  ; ELogLevel fPrevLevel;  . #include <ROOT/RLogger.hxx>; Constructor & Destructor Documentation. ◆ RLogScopedVerbosity() [1/2]. ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosity ; (; RLogChannel & ; channel, . ELogLevel ; verbosity . ). inline . Definition at line 248 of file RLogger.hxx. ◆ RLogScopedVerbosity() [2/2]. ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosity ; (; ELogLevel ; verbosity). inlineexplicit . Definition at line 252 of file RLogger.hxx. ◆ ~RLogScopedVerbosity(). ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity ; (; ). inline . Definition at line 253 of file RLogger.hxx. Member Data Documentation. ◆ fChannel. RLogChannel* ROOT::Experimental::RLogScopedVerbosity::fChannel. private . Definition at line 244 of file RLogger.hxx. ◆ fPrevLevel. ELogLevel ROOT::Experimental::RLogScopedVerbosity::fPrevLevel. private . Definition at line 245 of file RLogger.hxx. Libraries for ROOT::Experimental::RLogScopedVerbosity:. [legend]; The documentation for this class was generated from the following file:; core/foundation/inc/ROOT/RLogger.hxx. ROOTExperimentalRLogScopedVerbosity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogScopedVerbosity.html:2244,Guid,Guide,2244,doc/master/classROOT_1_1Experimental_1_1RLogScopedVerbosity.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogScopedVerbosity.html,1,['Guid'],['Guide']
Usability,l * fBarLbl2;  Label of option text entry. ;  ; TGLabel * fBarLbl3;  Label of histogram name text entry. ;  ; TGCheckButton * fBarH;  Checked for drawing current histogram with different graphic option. ;  ; TGCheckButton * fBarScan;  Checked for tree scan. ;  ; TGCheckButton * fBarRec;  Command recording toggle. ;  ; TGTextEntry * fBarCommand;  User command entry. ;  ; TGTextEntry * fBarOption;  Histogram drawing option entry. ;  ; TGTextEntry * fBarHist;  Histogram name entry. ;  ; Frames; TGHorizontalFrame * fHf;  Main horizontal frame. ;  ; TGDoubleVSlider * fSlider;  Vertical slider to select processed tree entries;. ;  ; TGVerticalFrame * fV1;  List tree mother. ;  ; TGVerticalFrame * fV2;  List view mother. ;  ; TGCompositeFrame * fTreeHdr;  Header for list tree. ;  ; TGCompositeFrame * fListHdr;  Header for list view. ;  ; TGLabel * fLbl1;  Label for list tree. ;  ; TGLabel * fLbl2;  Label for list view. ;  ; TGHorizontalFrame * fBFrame;  Button frame. ;  ; TGHorizontalFrame * fHpb;  Progress bar frame. ;  ; TGHProgressBar * fProgressBar;  Progress bar. ;  ; TGLabel * fBLbl4;  Label for input list entry. ;  ; TGLabel * fBLbl5;  Label for output list entry. ;  ; TGTextEntry * fBarListIn;  Tree input event list name entry. ;  ; TGTextEntry * fBarListOut;  Pree output event list name entry. ;  ; TGPictureButton * fDRAW;  DRAW button. ;  ; TGTextButton * fSPIDER;  SPIDER button. ;  ; TGPictureButton * fSTOP;  Interrupt current command (not yet) ;  ; TGPictureButton * fREFR;  REFRESH button ///<ia. ;  ; TGStatusBar * fStatusBar;  Status bar. ;  ; TGComboBox * fCombo;  Combo box with session records. ;  ; TGPictureButton * fBGFirst;  ; TGPictureButton * fBGPrevious;  ; TGPictureButton * fBGRecord;  ; TGPictureButton * fBGNext;  ; TGPictureButton * fBGLast;  ; TGTextButton * fReset;  clear expression's entries ;  ; ListTree; TGCanvas * fTreeView;  ListTree canvas container. ;  ; TGListTree * fLt;  ListTree with file and tree items. ;  ; ListView; TGListView * fList,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:41786,Progress bar,Progress bar,41786,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Progress bar'],['Progress bar']
Usability,"l . Add a new graphics line to this pavetext. ; Reimplemented in TPaveStats.; Definition at line 177 of file TPaveText.cxx. ◆ AddText() [1/2]. TText * TPaveText::AddText ; (; const char * ; label). virtual . Add a new Text line to this pavetext. ; Definition at line 209 of file TPaveText.cxx. ◆ AddText() [2/2]. TText * TPaveText::AddText ; (; Double_t ; x1, . Double_t ; y1, . const char * ; label . ). virtual . Add a new Text line to this pavetext at given coordinates. ; Definition at line 191 of file TPaveText.cxx. ◆ Class(). static TClass * TPaveText::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPaveText::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPaveText::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 65 of file TPaveText.h. ◆ Clear(). void TPaveText::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all lines in this pavetext. ; Reimplemented from TObject.; Definition at line 217 of file TPaveText.cxx. ◆ DeclFileName(). static const char * TPaveText::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 65 of file TPaveText.h. ◆ DeleteText(). void TPaveText::DeleteText ; (; ). virtual . Delete text at the mouse position. ; Reimplemented in TPaveStats.; Definition at line 227 of file TPaveText.cxx. ◆ Draw(). void TPaveText::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this pavetext with its current attributes. ; Reimplemented from TPave.; Definition at line 242 of file TPaveText.cxx. ◆ DrawFile(). void TPaveText::DrawFile ; (; const char * ; filename, . Option_t * ; option = """" . ). virtual . Draw lines in filename in this pavetext. ; Definition at line 254 of file TPaveText.cxx. ◆ EditText(). void TPaveText::EditText ; (; ). virtual . Edit text at the mouse position. ; Reimplemented in TPaveStats.; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText.html:30126,Clear,Clear,30126,doc/master/classTPaveText.html,https://root.cern,https://root.cern/doc/master/classTPaveText.html,1,['Clear'],['Clear']
Usability,"l . Close the current gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 333 of file TPadPainter.cxx. ◆ DrawBox(). void TPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 390 of file TPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 411 of file TPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 425 of file TPadPainter.cxx. ◆ DrawLine(). void TPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 360 of file TPadPainter.cxx. ◆ DrawLineNDC(). void TPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ; Implements TVirtualPadPainter.; Definition at line 375 of file TPadPainter.cxx. ◆ DrawPixels(). void TPadPainter::DrawPixels ; (; const unsigned char * ; pixelData, . UInt_t ; width, . UInt_t ; height, . Int_t ; dstX, . Int_t ; dstY, . Bool_t ; enableAlphaBlending . ). overridevirtual . Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ; Implements TVirtualPadPainter.; Definition at line 351 of file TPadPainter.cxx. ◆ DrawPolyLine() [1/2]. void TPadPainter::DrawPolyLine ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint Polyline. ; Implements TVirtualPadPainter.; Definition at line 438 of file TPadPainter.cxx. ◆ DrawPolyLine() [2/2]. void TPadPainter::DrawPolyLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:8922,simpl,simple,8922,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['simpl'],['simple']
Usability,"l . Definition at line 32 of file TControlBarButton.h. ◆ GetType(). virtual Int_t TControlBarButton::GetType ; (; ); const. inlinevirtual . Definition at line 33 of file TControlBarButton.h. ◆ IsA(). TClass * TControlBarButton::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 38 of file TControlBarButton.h. ◆ SetAction(). void TControlBarButton::SetAction ; (; const char * ; action). virtual . Set action to be executed by this button. ; Definition at line 68 of file TControlBarButton.cxx. ◆ SetType() [1/2]. void TControlBarButton::SetType ; (; const char * ; type). virtual . Set button type. ; Type can be either ""button"", ""drawnbutton"" or ""separator"". String is case insensitive. Default is ""button"". ; Definition at line 83 of file TControlBarButton.cxx. ◆ SetType() [2/2]. void TControlBarButton::SetType ; (; Int_t ; type). virtual . Set button type. ; Type can be either kButton, kDrawnButton or kSeparator. Default is kButton. ; Definition at line 104 of file TControlBarButton.cxx. ◆ Streamer(). void TControlBarButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TControlBarButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file TControlBarButton.h. Member Data Documentation. ◆ fAction. TString TControlBarButton::fAction. protected . action to be executed ; Definition at line 21 of file TControlBarButton.h. ◆ fType. Int_t TControlBarButton::fType. protected . button type ; Definition at line 20 of file TControlBarButton.h. Libraries for TControlBarButton:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TControlBarButton.h; graf2d/gpad/src/TControlBarButton.cxx. TControlBarButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBarButton.html:15888,Guid,Guide,15888,doc/master/classTControlBarButton.html,https://root.cern,https://root.cern/doc/master/classTControlBarButton.html,1,['Guid'],['Guide']
Usability,"l . Definition at line 61 of file TArrow.h. ◆ SetDefaultAngle(). void TArrow::SetDefaultAngle ; (; Float_t ; Angle). static . Set default angle. ; Definition at line 393 of file TArrow.cxx. ◆ SetDefaultArrowSize(). void TArrow::SetDefaultArrowSize ; (; Float_t ; ArrowSize). static . Set default arrow sive. ; Definition at line 402 of file TArrow.cxx. ◆ SetDefaultOption(). void TArrow::SetDefaultOption ; (; Option_t * ; Option). static . Set default option. ; Definition at line 411 of file TArrow.cxx. ◆ SetOption(). virtual void TArrow::SetOption ; (; Option_t * ; option = "">""). inlinevirtual . Definition at line 62 of file TArrow.h. ◆ Streamer(). void TArrow::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TArrow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TArrow.h. Member Data Documentation. ◆ fAngle. Float_t TArrow::fAngle. protected . Arrow opening angle (degrees) ; Definition at line 31 of file TArrow.h. ◆ fArrowSize. Float_t TArrow::fArrowSize. protected . Arrow Size. ; Definition at line 32 of file TArrow.h. ◆ fgDefaultAngle. Float_t TArrow::fgDefaultAngle = 60. staticprotected . Default Arrow opening angle (degrees) ; Definition at line 35 of file TArrow.h. ◆ fgDefaultArrowSize. Float_t TArrow::fgDefaultArrowSize = 0.05. staticprotected . Default Arrow Size. ; Definition at line 36 of file TArrow.h. ◆ fgDefaultOption. TString TArrow::fgDefaultOption = "">"". staticprotected . Default Arrow shapes. ; Definition at line 37 of file TArrow.h. ◆ fOption. TString TArrow::fOption. protected . Arrow shapes. ; Definition at line 33 of file TArrow.h. Libraries for TArrow:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TArrow.h; graf2d/graf/src/TArrow.cxx. TArrow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:27288,Guid,Guide,27288,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['Guid'],['Guide']
Usability,"l . Fill core part of JSON representation. ; Reimplemented from ROOT::Experimental::REveElement.; Definition at line 160 of file REveStraightLineSet.cxx. ◆ WriteVizParams(). void REveStraightLineSet::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from ROOT::Experimental::REveElement.; Definition at line 144 of file REveStraightLineSet.cxx. Member Data Documentation. ◆ fDepthTest. Bool_t ROOT::Experimental::REveStraightLineSet::fDepthTest. protected . Definition at line 83 of file REveStraightLineSet.hxx. ◆ fLastLine. Line_t* ROOT::Experimental::REveStraightLineSet::fLastLine {nullptr}. protected . ! ; Definition at line 85 of file REveStraightLineSet.hxx. ◆ fLinePlex. REveChunkManager ROOT::Experimental::REveStraightLineSet::fLinePlex. protected . Definition at line 74 of file REveStraightLineSet.hxx. ◆ fMarkerPlex. REveChunkManager ROOT::Experimental::REveStraightLineSet::fMarkerPlex. protected . Definition at line 75 of file REveStraightLineSet.hxx. ◆ fOwnLinesIds. Bool_t ROOT::Experimental::REveStraightLineSet::fOwnLinesIds. protected . Definition at line 77 of file REveStraightLineSet.hxx. ◆ fOwnMarkersIds. Bool_t ROOT::Experimental::REveStraightLineSet::fOwnMarkersIds. protected . Definition at line 78 of file REveStraightLineSet.hxx. ◆ fRnrLines. Bool_t ROOT::Experimental::REveStraightLineSet::fRnrLines. protected . Definition at line 81 of file REveStraightLineSet.hxx. ◆ fRnrMarkers. Bool_t ROOT::Experimental::REveStraightLineSet::fRnrMarkers. protected . Definition at line 80 of file REveStraightLineSet.hxx. Libraries for ROOT::Experimental::REveStraightLineSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveStraightLineSet.hxx; graf3d/eve7/src/REveStraightLineSet.cxx. ROOTExperimentalREveStraightLineSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:31869,Guid,Guide,31869,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,1,['Guid'],['Guide']
Usability,"l . Return the object before obj. Returns 0 if obj is first object. ; Implements TSeqCollection.; Definition at line 305 of file TObjArray.cxx. ◆ BinarySearch(). Int_t TObjArray::BinarySearch ; (; TObject * ; op, . Int_t ; upto = kMaxInt . ). virtual . Find object using a binary search. ; Array must first have been sorted. Search can be limited by setting upto to desired index. ; Definition at line 841 of file TObjArray.cxx. ◆ BoundsOk(). Bool_t TObjArray::BoundsOk ; (; const char * ; where, . Int_t ; at . ); const. inlineprotected . Definition at line 157 of file TObjArray.h. ◆ Class(). static TClass * TObjArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TObjArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObjArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 99 of file TObjArray.h. ◆ Clear(). void TObjArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the array. ; Does not delete the objects unless the TObjArray is the owner (set via SetOwner()). ; Implements TCollection.; Definition at line 321 of file TObjArray.cxx. ◆ Compress(). void TObjArray::Compress ; (; ). virtual . Remove empty slots from array. ; Reimplemented in TClonesArray.; Definition at line 334 of file TObjArray.cxx. ◆ DeclFileName(). static const char * TObjArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 99 of file TObjArray.h. ◆ Delete(). void TObjArray::Delete ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the array AND delete all heap based objects. ; Implements TCollection.; Definition at line 356 of file TObjArray.cxx. ◆ Expand(). void TObjArray::Expand ; (; Int_t ; newSize). virtual . Expand or shrink the array to newSize elements. ; Reimplemented in TClonesArray.; Definition at line 387 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArray.html:25145,Clear,Clear,25145,doc/master/classTObjArray.html,https://root.cern,https://root.cern/doc/master/classTObjArray.html,1,['Clear'],['Clear']
Usability,"l ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file SVEvent.h. ◆ UpdateErrorCache(). void TMVA::SVEvent::UpdateErrorCache ; (; Float_t ; upercache). inline . Definition at line 58 of file SVEvent.h. Member Data Documentation. ◆ fAlpha. Float_t TMVA::SVEvent::fAlpha. private . Lagrange multiplier. ; Definition at line 88 of file SVEvent.h. ◆ fAlpha_p. Float_t TMVA::SVEvent::fAlpha_p. private . Lagrange multiplier. ; Definition at line 89 of file SVEvent.h. ◆ fCweight. const Float_t TMVA::SVEvent::fCweight. private . svm cost weight ; Definition at line 87 of file SVEvent.h. ◆ fDataVector. std::vector<Float_t> TMVA::SVEvent::fDataVector. private . Definition at line 86 of file SVEvent.h. ◆ fErrorCache. Float_t TMVA::SVEvent::fErrorCache. private . optimization parameter ; Definition at line 90 of file SVEvent.h. ◆ fIdx. Int_t TMVA::SVEvent::fIdx. private . index flag ; Definition at line 93 of file SVEvent.h. ◆ fIsShrinked. Int_t TMVA::SVEvent::fIsShrinked. private . shrinking flag, see documentation ; Definition at line 95 of file SVEvent.h. ◆ fLine. Float_t* TMVA::SVEvent::fLine. private . pointer to column of kernel matrix ; Definition at line 96 of file SVEvent.h. ◆ fNs. UInt_t TMVA::SVEvent::fNs. private . documentation ; Definition at line 94 of file SVEvent.h. ◆ fNVar. UInt_t TMVA::SVEvent::fNVar. private . number of variables ; Definition at line 91 of file SVEvent.h. ◆ fTarget. const Float_t TMVA::SVEvent::fTarget. private . regression target ; Definition at line 97 of file SVEvent.h. ◆ fTypeFlag. const Int_t TMVA::SVEvent::fTypeFlag. private . is sig or bkg - svm requieres 1 for sig and -1 for bkg ; Definition at line 92 of file SVEvent.h. Libraries for TMVA::SVEvent:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/SVEvent.h; tmva/tmva/src/SVEvent.cxx. TMVASVEvent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVEvent.html:9341,Guid,Guide,9341,doc/master/classTMVA_1_1SVEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVEvent.html,1,['Guid'],['Guide']
Usability,"l == TMath::QuietNaN() ) { x = TMath::QuietNaN(); y = TMath::QuietNaN(); return;}; 1216 ; 1217 if (!rng) rng = gRandom;; 1218 Double_t r1 = rng->Rndm();; 1219 Int_t ibin = TMath::BinarySearch(nbins,fIntegral,(Double_t) r1);; 1220 Int_t biny = ibin/nbinsx;; 1221 Int_t binx = ibin - nbinsx*biny;; 1222 x = fXaxis.GetBinLowEdge(binx+1);; 1223 if (r1 > fIntegral[ibin]) x +=; 1224 fXaxis.GetBinWidth(binx+1)*(r1-fIntegral[ibin])/(fIntegral[ibin+1] - fIntegral[ibin]);; 1225 y = fYaxis.GetBinLowEdge(biny+1) + fYaxis.GetBinWidth(biny+1)*rng->Rndm();; 1226}; 1227 ; 1228 ; 1229////////////////////////////////////////////////////////////////////////////////; 1230/// Fill the array stats from the contents of this histogram; 1231/// The array stats must be correctly dimensioned in the calling program.; 1232/// ~~~ {.cpp}; 1233/// stats[0] = sumw; 1234/// stats[1] = sumw2; 1235/// stats[2] = sumwx; 1236/// stats[3] = sumwx2; 1237/// stats[4] = sumwy; 1238/// stats[5] = sumwy2; 1239/// stats[6] = sumwxy; 1240/// ~~~; 1241///; 1242/// If no axis-subranges are specified (via TAxis::SetRange), the array stats; 1243/// is simply a copy of the statistics quantities computed at filling time.; 1244/// If sub-ranges are specified, the function recomputes these quantities; 1245/// from the bin contents in the current axis ranges.; 1246///; 1247/// Note that the mean value/StdDev is computed using the bins in the currently; 1248/// defined ranges (see TAxis::SetRange). By default the ranges include; 1249/// all bins from 1 to nbins included, excluding underflows and overflows.; 1250/// To force the underflows and overflows in the computation, one must; 1251/// call the static function TH1::StatOverflows(kTRUE) before filling; 1252/// the histogram.; 1253 ; 1254void TH2::GetStats(Double_t *stats) const; 1255{; 1256 if (fBuffer) ((TH2*)this)->BufferEmpty();; 1257 ; 1258 if ((fTsumw == 0 && fEntries > 0) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange)) {; 1259 std::fill",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:49997,simpl,simply,49997,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['simpl'],['simply']
Usability,"l Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSimpleTable.html:17499,Clear,ClearFlags,17499,root/html602/TGSimpleTable.html,https://root.cern,https://root.cern/root/html602/TGSimpleTable.html,4,['Clear'],['ClearFlags']
Usability,"l RooAddition::setData ; (; RooAbsData & ; data, . bool ; cloneData = true . ). overridevirtual . Reimplemented from RooAbsReal.; Definition at line 241 of file RooAddition.cxx. ◆ Streamer(). void RooAddition::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooAddition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file RooAddition.h. ◆ translate(). void RooAddition::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 160 of file RooAddition.cxx. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooAddition::_cacheMgr. mutableprotected . ! The cache manager ; Definition at line 72 of file RooAddition.h. ◆ _ownedList. RooArgList RooAddition::_ownedList. protected . List of owned components. ; Definition at line 63 of file RooAddition.h. ◆ _set. RooListProxy RooAddition::_set. protected . set of terms to be summed ; Definition at line 64 of file RooAddition.h. Libraries for RooAddition:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAddition.h; roofit/roofitcore/src/RooAddition.cxx. RooAddition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:68385,Guid,Guide,68385,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,1,['Guid'],['Guide']
Usability,"l RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:3619,clear,clearValueDirty,3619,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['clear'],['clearValueDirty']
Usability,"l TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetTitlevoid SetTitle(const char *) overrideSet the title of the TNamed.Definition TParallelCoordVar.h:111; TParallelCoordVar::SetHistogramBinningvoid SetHistogramBinning(Int_t n=100)Set the histogram binning.Definition TParallelCoordVar.cxx:882; TParallelCoordVar::SetCurrentLimitsvoid SetCurrentLimits(Double_t min, Double_t max)Set the limits within which one the entries must be painted.Definition TParallelCoordVar.cxx:920; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; AuthorAxel Naumann ; Definition in file drawsparse.C. tutorialstreedrawsparse.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/drawsparse_8C.html:8197,Guid,Guide,8197,doc/master/drawsparse_8C.html,https://root.cern,https://root.cern/doc/master/drawsparse_8C.html,1,['Guid'],['Guide']
Usability,"l as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mapping (TEveRGBAPelette) and surrounding frame (TEveFrameBox). Hexagonal and rectangular digits. Base-classes for 2D projections with dynamically controllable fish-eye magnification of the vertex region (TEveProjectionManager and TEveProjection). Tracks, points and geometries can be projected automatically. R-phi and Rho-z projections are currently supported. A r-phi projection with fish-eye transformation of a simulated ALICE pp@14TeV event. TriangleSet class for presentation of generic triangle mesh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TEve.html:1577,simpl,simplifed,1577,doc/master/group__TEve.html,https://root.cern,https://root.cern/doc/master/group__TEve.html,1,['simpl'],['simplifed']
Usability,"l be no bug fi...Definition TEventList.h:31. Use function Enter to enter an element in the list; The function Add may be used to merge two lists.; The function Subtract may be used to subtract two lists.; The function Reset may be used to reset a list.; Use TEventList::Print(option) to print the contents. (option ""all"" prints all the list entries).; Operators + and - correspond to functions Add and Subtract.; A TEventList object can be saved on a file via the Write function. . Definition at line 31 of file TEventList.h. Public Member Functions;  TEventList ();  Default constructor for a EventList. ;  ;  TEventList (const char *name, const char *title="""", Int_t initsize=0, Int_t delta=0);  Create a EventList. ;  ;  TEventList (const TEventList &list);  Copy constructor. ;  ;  ~TEventList () override;  Default destructor for a EventList. ;  ; virtual void Add (const TEventList *list);  Merge contents of alist with this list. ;  ; void Clear (Option_t *option="""") override;  ; virtual bool Contains (Long64_t entry);  Return TRUE if list contains entry. ;  ; virtual bool ContainsRange (Long64_t entrymin, Long64_t entrymax);  Return TRUE if list contains entries from entrymin to entrymax included. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and others to automatically add us to a directory when we are read from a file. ;  ; virtual void Enter (Long64_t entry);  Enter element entry into the list. ;  ; TDirectory * GetDirectory () const;  ; virtual Long64_t GetEntry (Int_t index) const;  Return value of entry at index in the list. ;  ; virtual Int_t GetIndex (Long64_t entry) const;  Return index in the list of element with value entry array is supposed to be sorted prior to this call. ;  ; virtual Long64_t * GetList () const;  ; virtual Int_t GetN () const;  ; virtual bool GetReapplyCut () const;  ; virtual Int_t GetSize () const;  ; virtual void Intersect (const TEventList *list);  Remove elements from this list that are NOT present in alist. ;  ; TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:2364,Clear,Clear,2364,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Clear'],['Clear']
Usability,"l command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:21341,Undo,Undo,21341,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['Undo'],['Undo']
Usability,l container. ; Definition at line 193 of file TGDockableFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGUndockedFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGUndockedFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUndockedFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGDockableFrame.h. ◆ CloseWindow(). void TGUndockedFrame::CloseWindow ; (; ). overridevirtual . Close undocked frame (called via WM close button). ; Reimplemented from TGMainFrame.; Definition at line 213 of file TGDockableFrame.cxx. ◆ DeclFileName(). static const char * TGUndockedFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGDockableFrame.h. ◆ FixSize(). void TGUndockedFrame::FixSize ; (; ). Fix the size of the undocked frame so it cannot be changed via the WM. ; Definition at line 203 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGUndockedFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 78 of file TGDockableFrame.h. ◆ operator=(). TGUndockedFrame & TGUndockedFrame::operator= ; (; const TGUndockedFrame & ; ). privatedelete . ◆ Streamer(). void TGUndockedFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGTransientFrame. ◆ StreamerNVirtual(). void TGUndockedFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGDockableFrame.h. Member Data Documentation. ◆ fDockable. TGDockableFrame* TGUndockedFrame::fDockable. protected . orignal dockable frame ; Definition at line 69 of file TGDockableFrame.h. Libraries for TGUndockedFrame:. [legend]; The documentation for this class was generated from t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:37893,undo,undocked,37893,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['undo'],['undocked']
Usability,"l each element of the matrix A and write the result into A. ;  ; static void ReconstructInput (TMatrixT< AReal > &compressedInput, TMatrixT< AReal > &reconstructedInput, TMatrixT< AReal > &fWeights);  ; static void SoftmaxAE (TMatrixT< AReal > &A);  ; static void SqrtElementWise (TMatrixT< AReal > &A);  Square root each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (TMatrixT< AReal > &A);  Square each element of the matrix A and write the result into A. ;  ; static void SumColumns (TMatrixT< AReal > &B, const TMatrixT< AReal > &A);  Sum columns of (m x n) matrix A and write the results into the first m elements in A. ;  ; static void UpdateParams (TMatrixT< AReal > &x, TMatrixT< AReal > &tildeX, TMatrixT< AReal > &y, TMatrixT< AReal > &z, TMatrixT< AReal > &fVBiases, TMatrixT< AReal > &fHBiases, TMatrixT< AReal > &fWeights, TMatrixT< AReal > &VBiasError, TMatrixT< AReal > &HBiasError, AReal learningRate, size_t fBatchSize);  ; static void UpdateParamsLogReg (TMatrixT< AReal > &input, TMatrixT< AReal > &output, TMatrixT< AReal > &difference, TMatrixT< AReal > &p, TMatrixT< AReal > &fWeights, TMatrixT< AReal > &fBiases, AReal learningRate, size_t fBatchSize);  ; Forward Propagation; Low-level functions required for the forward propagation of activations through the network. . static void MultiplyTranspose (TMatrixT< Scalar_t > &output, const TMatrixT< Scalar_t > &input, const TMatrixT< Scalar_t > &weights);  Matrix-multiply input with the transpose of weights and write the results into output. ;  ; static void AddRowWise (TMatrixT< Scalar_t > &output, const TMatrixT< Scalar_t > &biases);  Add the vectors biases row-wise to the matrix output. ;  ; Backward Propagation; Low-level functions required for the forward propagation of activations through the network. . static void Backward (TMatrixT< Scalar_t > &activationGradientsBackward, TMatrixT< Scalar_t > &weightGradients, TMatrixT< Scalar_t > &biasGradients, TMatrixT< Scalar_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:3679,learn,learningRate,3679,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,2,['learn'],['learningRate']
Usability,"l entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted by the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially.; For examples of CloneTree, see tutorials:. copytree.C: A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1; copytree2.C: A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1 . Reimplemented in TNtuple.; Definition at line 3139 of file TTree.cxx. ◆ CopyAddresses(). void TTree::CopyAddresses ; (; TTree * ; tree, . bool ; undo = false . ). virtual . Set branch addresses of passed tree equal to ours. ; If undo is true, reset the branch addresses instead of copying them. This ensures 'separation' of a cloned tree from its original. ; Definition at line 3299 of file TTree.cxx. ◆ CopyEntries(). Long64_t TTree::CopyEntries ; (; TTree * ; tree, . Long64_t ; nentries = -1, . Option_t * ; option = """", . bool ; needCopyAddresses = false . ). virtual . Copy nentries from given tree to this tree. ; This routines assumes that the branches that intended to be copied are already connected. The typical case is that this tree was created using tree->CloneTree(0).; By default copy all entries.; Returns number of bytes copied to this tree.; If 'option' contains the word 'fast' and nentries is -1, the cloning will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There are currently 3 supported sorting order:. SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsBy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:106690,undo,undo,106690,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['undo'],['undo']
Usability,l functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integra,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:16463,simpl,simple,16463,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['simpl'],['simple']
Usability,"l http serverDefinition RWebDisplayArgs.hxx:47; ROOT::RWebDisplayArgs::kServer@ kServerindicates that ROOT runs as server and just printouts window URL, browser should be started by the us...Definition RWebDisplayArgs.hxx:49; ROOT::RWebDisplayArgs::kOff@ kOffdisable web display, do not start any browserDefinition RWebDisplayArgs.hxx:51; ROOT::RWebDisplayArgs::kEmbedded@ kEmbeddedwindow will be embedded into other, no extra browser need to be startedDefinition RWebDisplayArgs.hxx:50; ROOT::RWebDisplayArgs::kCEF@ kCEFChromium Embedded Framework - local display with CEF libs.Definition RWebDisplayArgs.hxx:44; ROOT::RWebDisplayArgs::kSafari@ kSafariSafari browser.Definition RWebDisplayArgs.hxx:41; ROOT::RWebDisplayArgs::kQt5@ kQt5Qt5 QWebEngine libraries - Chromium code packed in qt5.Definition RWebDisplayArgs.hxx:45; ROOT::RWebDisplayArgs::kQt6@ kQt6Qt6 QWebEngine libraries - Chromium code packed in qt6.Definition RWebDisplayArgs.hxx:46; ROOT::RWebDisplayArgs::kCustom@ kCustomcustom web browser, execution string should be providedDefinition RWebDisplayArgs.hxx:53; ROOT::RWebDisplayArgs::kChrome@ kChromeGoogle Chrome browser.Definition RWebDisplayArgs.hxx:39; ROOT::RWebDisplayArgs::kEdge@ kEdgeMicrosoft Edge browser (Windows only)Definition RWebDisplayArgs.hxx:40; ROOT::RWebDisplayArgs::SetHeadlessvoid SetHeadless(bool on=true)set headless modeDefinition RWebDisplayArgs.hxx:165; ROOT::RWebDisplayArgs::RWebDisplayArgsRWebDisplayArgs()Default constructor.Definition RWebDisplayArgs.cxx:42; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::WebGUILogROOT::Experimental::RLogChannel & WebGUILog()Log channel for WebGUI diagnostics.Definition RWebDisplayArgs.cxx:24. guiwebdisplaysrcRWebDisplayArgs.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html:19223,Guid,Guide,19223,doc/master/RWebDisplayArgs_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html,1,['Guid'],['Guide']
Usability,"l list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:2982,clear,clearShapeDirty,2982,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['clear'],['clearShapeDirty']
Usability,"l user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:69893,simpl,simplex,69893,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['simpl'],['simplex']
Usability,"l void Redo(Option_t *option="""")Execute command and then merge commands.Definition TQCommand.cxx:588. Merged commands It possible to group several commands together so an end user can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1, double error1, double a2, double b2, double area2, double error2)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:633; gPad#define gPadDefinition TVirtualPad.h:308; TQCommand::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the list of merged commands.Definition TQCommand.cxx:360. Macro commands ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; During Redo operation commands composing macro command are executed sequentially in direct order (first in first out). During Undo, they are executed in reverse order (last in first out).; Undo manager. TQUndoManager is recorder of undo and redo operations. This is command history list which can be traversed backwards and upwards performing undo and redo operations. To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);; TQCommand::TQUndoManagerfriend class TQUndoManagerDefinition TQCommand.h:29; TQUndoManagerRecorder of operations for undo and redo.Definition TQCommand.h:103; TQUndoManager::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the stack of commands.Definition TQCommand.cxx:959; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list. Redo is Undo for undo action. Use TQUndoManager::Redo method for that ; Definition at line 27 of file TQCommand.h. Public Member Functions;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:3766,Undo,Undo,3766,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"l void SetTitleColor(Color_t color=1)Set color of axis title.Definition TAttAxis.cxx:318; TAttAxis::GetTitleSizevirtual Float_t GetTitleSize() constDefinition TAttAxis.h:44; TAttAxis::fLabelSizeFloat_t fLabelSizeSize of labels.Definition TAttAxis.h:25; TAttAxis::~TAttAxisvirtual ~TAttAxis()Destructor.Definition TAttAxis.cxx:54; TAttAxis::SetTickSizevirtual void SetTickSize(Float_t size=0.03)Definition TAttAxis.h:59; TAttAxis::GetLabelSizevirtual Float_t GetLabelSize() constDefinition TAttAxis.h:41; TAttAxis::SetMaxDigitsvirtual void SetMaxDigits(Int_t maxDigits=5)This function sets the maximum number of digits permitted for the axis labels above which the notatio...Definition TAttAxis.cxx:268; TAttAxis::fLabelFontStyle_t fLabelFontFont for labels.Definition TAttAxis.h:23; TAttAxis::fLabelColorColor_t fLabelColorColor of labels.Definition TAttAxis.h:22; TAttAxis::GetTickLengthvirtual Float_t GetTickLength() constDefinition TAttAxis.h:45; TAttAxis::ResetAttAxisvirtual void ResetAttAxis(Option_t *option="""")Reset axis attributes.Definition TAttAxis.cxx:79; TAttAxis::fTitleColorColor_t fTitleColorColor of axis title.Definition TAttAxis.h:29; TAttAxis::GetTitleOffsetvirtual Float_t GetTitleOffset() constDefinition TAttAxis.h:43; TAttAxis::SetTickLengthvirtual void SetTickLength(Float_t length=0.03)Set tick mark length.Definition TAttAxis.cxx:284; TAttAxis::SetNdivisionsvirtual void SetNdivisions(Int_t n=510, Bool_t optim=kTRUE)Set the number of divisions for this axis.Definition TAttAxis.cxx:233; TAttAxis::Copyvoid Copy(TAttAxis &attaxis) constCopy of the object.Definition TAttAxis.cxx:61; TAttAxis::fLabelOffsetFloat_t fLabelOffsetOffset of labels.Definition TAttAxis.h:24; TAttAxis::SetLabelColorvirtual void SetLabelColor(Color_t color=1, Float_t alpha=1.)Set color of labels.Definition TAttAxis.cxx:170; int; nconst Int_t nDefinition legend1.C:16. corebaseincTAttAxis.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttAxis_8h_source.html:9808,Guid,Guide,9808,doc/master/TAttAxis_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttAxis_8h_source.html,1,['Guid'],['Guide']
Usability,"l voidShowMembers(TMemberInspector& insp) const; virtual Bool_tStoreResult(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMySQLStatement(MYSQL_STMT* stmt, Bool_t errout = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. void*BeforeSet(const char* method, Int_t npar, Int_t sqltype, Bool_t sig = kTRUE, ULong_t size = 0); voidTSQLStatement::ClearError(); long doubleConvertToNumeric(Int_t npar); const char*ConvertToString(Int_t npar); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidFreeBuffers(); Bool_tIsResultSetMode() const; Bool_tIsSetParsMode() const; voidTObject::MakeZombie(); voidSetBuffersNumber(Int_t n); voidTSQLStatement::SetError(Int_t code, const char* msg, const char* method = 0); Bool_tSetSQLParamType(Int_t npar, int sqltype, Bool_t sig, ULong_t sqlsize = 0). private:. TMySQLStatement&operator=(const TMySQLStatement&); TMySQLStatement(const TMySQLStatement&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLStatement.html:8594,Clear,ClearError,8594,root/html602/TMySQLStatement.html,https://root.cern,https://root.cern/root/html602/TMySQLStatement.html,2,['Clear'],['ClearError']
Usability,"l voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; voidChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidCollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScene.html:2509,Clear,ClearProjectedList,2509,root/html528/TEveScene.html,https://root.cern,https://root.cern/root/html528/TEveScene.html,6,['Clear'],['ClearProjectedList']
Usability,"l voidTGFrame::Activate(Bool_t); voidActivateButtons(Bool_t first, Bool_t previous, Bool_t next, Bool_t last); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); voidAppendTree(TTree* tree); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t*)MENU ; virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeViewer.html:8845,Clear,Clear,8845,root/html530/TTreeViewer.html,https://root.cern,https://root.cern/root/html530/TTreeViewer.html,5,['Clear'],['Clear']
Usability,"l voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTGPictureButton::CreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGPictureButton::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGImageMap(const TGImageMap&); TGImageMap&operator=(const TGImageMap&). Data Members; public:. enum ENavMode { kNavRegions; kNavGrid; };; enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableK",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGImageMap.html:15628,Clear,ClearFlags,15628,root/html528/TGImageMap.html,https://root.cern,https://root.cern/root/html528/TGImageMap.html,4,['Clear'],['ClearFlags']
Usability,"l voidTGFrame::UnmapWindow(); virtual voidUpdateBackgroundStart(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual Bool_tItemLayout(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h). private:. TGView(const TGView&); TGView&operator=(const TGView&). Data Members; public:. enum { kNoHSB; kNoVSB; kHorizontal; kVertical; };; enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGView.html:16277,Clear,ClearFlags,16277,root/html528/TGView.html,https://root.cern,https://root.cern/root/html528/TGView.html,4,['Clear'],['ClearFlags']
Usability,"l voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; voidAttachList(TList* alist); virtual TObject*TList::Before(const TObject* obj) const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofOutputList.html:1792,Clear,Clear,1792,root/html530/TProofOutputList.html,https://root.cern,https://root.cern/root/html530/TProofOutputList.html,3,['Clear'],['Clear']
Usability,"l voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:5226,Simpl,SimpleIntervalRooStats,5226,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,10,['Simpl'],"['SimpleInterval', 'SimpleIntervalRooStats']"
Usability,"l voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamKernelTrivial.html:5910,Simpl,Simple,5910,root/html534/TMVA__PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamKernelTrivial.html,1,['Simpl'],['Simple']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fAllData;  Is the data bigger than the table. ;  ; TGCanvas * fCanvas;  Canvas that will contains the cells. ;  ; UInt_t fCellHeight;  Default cell width. ;  ; UInt_t fCellWidth;  Default cell width. ;  ; TObjArray * fColumnHeaders;  Array of column headers. ;  ; TTableRange * fCurrentRange;  Range of data currently loaded. ;  ; TTableRange * fDataRange;  Full range of the data set. ;  ; TTableRange * fGotoRange;  Range used by Goto frame. ;  ; TVirtualTableInterface * fInterface;  ; Bool_t fReadOnly;  Table readonly state. ;  ; TObjArray * fRowHeaders;  Array of row headers. ;  ; TObjArray * fRows;  Array of rows. ;  ; Pixel_t fSelectColor;  Select Color. ;  ; TGTableFrame * fTableFrame;  Container for the frames. ;  ; TGTableHeader * fTableHeader;  Top left element of the table. ;  ; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:37404,Clear,ClearFlags,37404,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fConstrained;  kTRUE if pointer is constrained to slider edges ;  ; Int_t fCz;  horizontal pointer position in pixel coordinates ;  ; const TGPicture * fPointerPic;  picture to draw pointer ;  ; Bool_t fRelative;  kTRUE if pointer position is relative to slider ;  ; Double_t fSCz;  vertical pointer position ;  ;  Protected Attributes inherited from TGDoubleHSlider; Int_t fXp;  horizontal slider x position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleHSlider.html:28017,Clear,ClearFlags,28017,doc/master/classTGTripleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleHSlider.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fConstrained;  kTRUE if pointer is constrained to slider edges ;  ; Int_t fCz;  vertical pointer position in pixel coordinates ;  ; const TGPicture * fPointerPic;  picture to draw pointer ;  ; Bool_t fRelative;  kTRUE if pointer position is relative to slider ;  ; Double_t fSCz;  vertical pointer position ;  ;  Protected Attributes inherited from TGDoubleVSlider; Int_t fYp;  vertical slider y position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:27986,Clear,ClearFlags,27986,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fIntegralHeight;  true if height should be multiple of fItemVsize ;  ; UInt_t fItemVsize;  maximum height of single entry ;  ; TGLBContainer * fLbc;  listbox container ;  ; TGViewPort * fVport;  listbox viewport (see TGCanvas.h) ;  ; TGVScrollBar * fVScrollbar;  vertical scrollbar ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListBox.html:30091,Clear,ClearFlags,30091,doc/master/classTGListBox.html,https://root.cern,https://root.cern/doc/master/classTGListBox.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Bool_t fOwnDisabledPic;  kTRUE if disabled picture was autogenerated ;  ; const TGPicture * fPic;  picture to be put in button ;  ; const TGPicture * fPicD;  picture shown when button disabled ;  ;  Protected Attributes inherited from TGButton; Pixel_t fBgndColor;  actual background color ;  ; TGButtonGroup * fGroup;  button group this button belongs to ;  ; Pixel_t fHighColor;  highlight color ;  ; GContext_t fNormGC;  graphics context used for drawing button ;  ; EButtonState fState;  button state ;  ; Bool_t fStayDown;  true if button has to stay down ;  ; UInt_t fStyle;  button style (modern or classic) ;  ; UInt_t fTHeight;  button height ;  ; TGToolTip * fTip;  tool tip associated with button ;  ; UInt_t fTWidth;  button width ;  ; void * fUserData;  pointer to user data structure ;  ;  Prot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPictureButton.html:26961,Clear,ClearFlags,26961,doc/master/classTGPictureButton.html,https://root.cern,https://root.cern/doc/master/classTGPictureButton.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Float_t fAngle;  ; Float_t fAngleMax;  needle min and max angle ;  ; Float_t fAngleMin;  ; const TGPicture * fBase;  picture used as background ;  ; std::vector< Float_t > fBuffer;  circular buffer for mean calculation ;  ; Int_t fBufferCount;  circular buffer count ;  ; Int_t fBufferSize;  circular buffer size ;  ; Int_t fCounter;  small odo meter (4 digits) ;  ; FontStruct_t fCounterFS;  font structures for text rendering ;  ; TString fDisplay1;  first line in the small display ;  ; TString fDisplay2;  second line in the small display ;  ; TImage * fImage;  image used as background ;  ; TImage * fImage2;  intermediate image used as background ;  ; TString fLabel1;  main label (first line) ;  ; TString fLabel2;  main label (second line) ;  ; Bool_t fMeanMark;  kTRUE if mean mark is active ;  ; Fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:26795,Clear,ClearFlags,26795,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; FontStruct_t fFontStruct;  ; Bool_t fHasOwnFont;  ; Int_t fHKeycode;  ; TGHotString * fLabel;  ; Int_t fMBottom;  ; Int_t fMLeft;  ; Int_t fMRight;  ; Int_t fMTop;  ; Bool_t fPrevStateOn;  ; Bool_t fStateOn;  ; TGTextLayout * fTLayout;  ; Int_t fTMode;  ; Int_t fWrapLength;  ;  Protected Attributes inherited from TGButton; Pixel_t fBgndColor;  actual background color ;  ; TGButtonGroup * fGroup;  button group this button belongs to ;  ; Pixel_t fHighColor;  highlight color ;  ; GContext_t fNormGC;  graphics context used for drawing button ;  ; EButtonState fState;  button state ;  ; Bool_t fStayDown;  true if button has to stay down ;  ; UInt_t fStyle;  button style (modern or classic) ;  ; UInt_t fTHeight;  button height ;  ; TGToolTip * fTip;  tool tip associated with button ;  ; UInt_t fTWidth;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextButton.html:28281,Clear,ClearFlags,28281,doc/master/classTGTextButton.html,https://root.cern,https://root.cern/doc/master/classTGTextButton.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fAspectRatio;  triangle orientation ;  ;  Protected Attributes inherited from TGDockButton; ULong_t fHiBg;  highlighted background color ;  ; Bool_t fMouseOn;  true when mouse on button ;  ; ULong_t fNormBg;  normal background color ;  ;  Protected Attributes inherited from TGButton; Pixel_t fBgndColor;  actual background color ;  ; TGButtonGroup * fGroup;  button group this button belongs to ;  ; Pixel_t fHighColor;  highlight color ;  ; GContext_t fNormGC;  graphics context used for drawing button ;  ; EButtonState fState;  button state ;  ; Bool_t fStayDown;  true if button has to stay down ;  ; UInt_t fStyle;  button style (modern or classic) ;  ; UInt_t fTHeight;  button height ;  ; TGToolTip * fTip;  tool tip associated with button ;  ; UInt_t fTWidth;  button width ;  ; void * fUserDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockHideButton.html:26241,Clear,ClearFlags,26241,doc/master/classTGDockHideButton.html,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fClick;  mouse click location (kCLICK_NONE, kCLICK_HS, kCLICK_L) ;  ; Rectangle_t fColormapRect;  hue / saturation colormap rectangle ;  ; Pixel_t fCurrentColor;  currently selected color value ;  ; TGGC fCursorGC;  color lightness slider cursor GC ;  ; Int_t fCx;  x position in hs colormap ;  ; Int_t fCy;  y position in hs colormap ;  ; Int_t fCz;  position in lightness slider ;  ; Pixmap_t fHSimage;  hue / saturation colormap pixmap ;  ; Pixmap_t fLimage;  color lightness slider pixmap ;  ; Int_t fNColors;  number of color samples ;  ; Rectangle_t fSliderRect;  color lightness slider rectangle ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPick.html:24814,Clear,ClearFlags,24814,doc/master/classTGColorPick.html,https://root.cern,https://root.cern/doc/master/classTGColorPick.html,1,['Clear'],['ClearFlags']
Usability,"l void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fXp;  horizontal slider x position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleHSlider.html:26288,Clear,ClearFlags,26288,doc/master/classTGDoubleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html,1,['Clear'],['ClearFlags']
