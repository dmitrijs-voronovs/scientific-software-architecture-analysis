quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18932,test,tests,18932,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"; sig22 = two * two.dag(); sig33 = three * three.dag(); sig13 = one * three.dag(); sig23 = two * three.dag(); sig12 = one * two.dag(). H = E1*sig11+E2*sig22+E3*sig33. # collapse operators; gamma2 = 0.006/hbar; gamma3 = 0.006/hbar. c1 = gamma2*sig22; c2 = gamma3*sig33; c_ops = [c1,c2]. rho0 = sig22. e_ops = [sig11,sig22,sig33]. output = mesolve(H,rho0,tlist,c_ops,e_ops); plt.plot(tlist, output.expect[0],label = r""$\rho_{11}$""); plt.plot(tlist, output.expect[1],label = r""$\rho_{22}$""); plt.plot(tlist, output.expect[2],label = r""$\rho_{33}$""); plt.legend(); ```; The model with pulse:; ```python; from qutip import * # for quantum dynamics; import numpy as np # for numerical manipulations; from matplotlib import pyplot as plt. # Define ultrafast pulse function; def elecfld(t, args):; c0 = 300 # [nm/fs]; E0 = 4.7*1e-2 # maximum amplitude, [V/nm]; lda_ex = 720 # excitation wavelength, [nm]; t_fwhm = 80 # [fs]; ω0 = 2*np.pi*c0/lda_ex; t0 = 2*t_fwhm; return E0*np.exp(-1j*ω0*t-2*np.log(2)*((t-t0)/t_fwhm)**2). #%% Parameters; hbar = 0.658211951 # units: [eV fs]. # Energy level; E1 = 0; E2 = 1.722 # eV; E3 = 3.426 # eV. # dipole strength; mu12 = 0.1 # [e nm]; mu23 = 0.41. # electric field of ultrafast pulse parameters; c0 = 300 # [nm/fs]; E0 = 4.7*1e-2 # maximum amplitude, [V/nm]; lda_ex = 720 # excitation wavelength, [nm]; t_fwhm = 80 # [fs]; ω0 = 2*np.pi*c0/lda_ex; t0 = 2*t_fwhm; tlist= np.linspace(0,5*t0,800) # [fs]; #%% Construct Hamiltonian; # basis; one, two, three = three_level_basis(); sig11 = one * one.dag(); sig22 = two * two.dag(); sig33 = three * three.dag(); sig13 = one * three.dag(); sig23 = two * three.dag(); sig12 = one * two.dag(). # H = H0+(-$\mu$E(t)); H0 = E1*sig11+E2*sig22+E3*sig33; H1 = -mu12*(sig12+sig12.dag())-mu23*(sig23+sig23.dag()). H = [H0, [H1, elecfld]]. #%% collapse operators. # decay of excited states; gamma2 = 0.006/hbar; gamma3 = 0.006/hbar. c1 = gamma2*sig22; c2 = gamma3*sig33; c_ops = [c1,c2]. # initial state; rho0 = sig11 # ground state. # ex",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2355:2393,log,log,2393,https://qutip.org,https://github.com/qutip/qutip/issues/2355,1,['log'],['log']
Testability,"<!-- **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->; **Description**. This PR reduced the qutip import time by setting the logger names explicitly. . **Related issues or PRs**. See #1980 for more details.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1981:483,test,tests,483,https://qutip.org,https://github.com/qutip/qutip/pull/1981,2,"['log', 'test']","['logger', 'tests']"
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**. Return `TypeError` in `sesolve` when the argument `H` is of incorrect type.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1942:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1942,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**. This PR updates the scipy requirements to version 1.4+. The 1.4 version was released December 2019.; Versions before 1.4 would not have worked with dev.major as an import of functools was missing. With the updated requirements we can remove the version checks in qutip.solve.steadystate which speeds up import times a bit.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1982:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1982,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Importing qutip takes a long time. On a Windows system import takes almost 4 seconds. The import time can be analyzed with [importtime-waterfall](https://github.com/asottile/importtime-waterfall). A large part of the time is spend in importing external packages (scipy, IPython, matplotilib), but also qutip itself adds to the import time. This PR reduces the import time by setting the logger names in 4 submodules explicitly. ; Benchmark:; ```; python -c ""import time; import matplotlib; import IPython; import scipy; t0=time.time(); import qutip; dt=time.time()-t0; print(f'{dt*1e3:.2f} ms')""; ``` ; Results:; ```; dev.major: 1996.52 m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1980:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1980,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:488,test,tests,488,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Index error in stochastic `smesolve` made `milstein` solver with `heterodyne` method converge only O(0.5) instead of the O(1) expected. This fix it. **Changelog**; Fixed typo in stochastic code affecting `heterodyne` detection efficiency.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1283:488,test,tests,488,https://qutip.org,https://github.com/qutip/qutip/pull/1283,1,['test'],['tests']
Testability,"<li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and opti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14804,test,test,14804,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['test'],['test']
Testability,"= compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions ___________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3327,test,tests,3327,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"= gates.qubit_clifford_group(); qutip/core/gates.py:815: in qubit_clifford_group; X = sigmax(); qutip/core/operators.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py ____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:1709,test,tests,1709,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"==; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5238,test,tests,5238,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"=========== short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23620,Test,TestMESolverConstDecay,23620,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolverConstDecay', 'testMEDecayAsStrList']"
Testability,"===========; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+d377c997-py3.7-macos; x-10.9-x86_64.egg/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fault: 11; ~~~",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:3355,test,tests,3355,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['test'],['tests']
Testability,"============; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 30",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1230,test,tests,1230,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"==============; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3100,test,tests,3100,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"======================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =====================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3781,Test,TestCircuitProcessor,3781,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"=======================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5101,mock,mock-,5101,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['mock'],['mock-']
Testability,"=========================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8013,test,tests,8013,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"============================ test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3659,Test,TestCircuitProcessor,3659,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"=====================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2418,test,test,2418,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"============================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_ops = [[a + a.dag(), _string_w_interpolating_t(kappa, times)]]; collapse_points = np.sqrt(kappa) * np.exp(-0.5*times); c_ops = [[a, qutip.Cubic_Spline(times[0], times[-1], collapse_points)]]; > brme = qutip.brmesolve(H, psi0, times,; a_ops, e_ops=[a.dag()*a], c_ops=c_ops). /usr/lib/python3/dist-packages/qutip/tests/test_brmesolve_td.py:163: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:200: in brmesolve; output = _td_brmesolve(H, psi0, tlist, a_ops=a_ops, e_ops=e_ops,; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:482: in _td_brmesolve; exec(code, globals()); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968610'. <string>:1: ModuleNotFoundError; _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:9138,test,tests,9138,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,==================================================== short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/P,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30143,test,tests,30143,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"======================================================== ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2978,test,testing,2978,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"==========================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fault: 11; ```. I'm unsure what is going on here. I tried reinstalling qutip without any change. Prior I had a lot of errors referring to xcrun but I fixed that by installing xcode. Is there something else I need to get this working?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:2162,test,tests,2162,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['test'],['tests']
Testability,"============================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2293,test,test,2293,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"====================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable fun",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23792,test,tests,23792,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"====================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5423,test,tests,5423,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"=================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ===========================================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3756,test,tests,3756,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"======================================================================================= test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3634,test,tests,3634,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"============================================================================================================= short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23597,test,tests,23597,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"==================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5450,Test,TestTimeDependence,5450,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestTimeDependence', 'tests']"
Testability,"=idx_dtype); self.col = np.array([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:3465,Test,TestDicke,3465,https://qutip.org,https://github.com/qutip/qutip/issues/1451,1,['Test'],['TestDicke']
Testability,"> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1656,test,tests,1656,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16213,test,tests,16213,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15702,test,tests,15702,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15269,test,tests,15269,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14492,test,tests,14492,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30343,test,tests,30343,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35379,test,tests,35379,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44937,test,testing,44937,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"> warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 7.81e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 8.35e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:13986,test,test,13986,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability,">; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:2678,test,test,2678,https://qutip.org,https://github.com/qutip/qutip/pull/1563,1,['test'],['test']
Testability,"@Ericgig @nathanshammah @hodgestar ; Hi. All. I need help with creating PR for the qutip-lattice repo. Not quite sure how to do it separately. This is try 1. The lattice.py and topology.py are moved from qutip/ to qutip/lattice which also contains the qutip/lattice/tests/test_lattice.py with all the test functions for the new functions. Usage examples for the new functions can be found in https://github.com/sbisw002/qutip.lattice-notebooks; You'll know how I imported the module and understand the examples. . I still need to learn how the separate repository can be updated, please help with that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2014:266,test,tests,266,https://qutip.org,https://github.com/qutip/qutip/pull/2014,2,['test'],"['test', 'tests']"
Testability,"@tehruhn and I found that trying to install qutip from pip with the latest python 3.9 fails. When we run the installations from a fresh conda env (conda 4.8.5) using pip as. ```; pip install qutip; ```; or with conda (using both). ```; conda install -c conda-forge qutip; conda install qutip; ```. we get different errors. The errors do not occur if we use python3.8 while creating the conda environment as. ```; conda create -n py38 python==3.8; ```. Looking at the error it seems there is specification that prohibits python 3.9. @jakelishman @Ericgig any idea about this?. # Steps to reproduce (with conda 4.8.5). ```; conda create -n qutip-test python=3.9; conda activate qutip-test; conda install -c conda-forge qutip; ```. ### Error; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - qutip -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.5,<3.6.0a0|3.4.*']. Your python: python=3.9. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. Note that strict channel priority may have removed packages",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371:644,test,test,644,https://qutip.org,https://github.com/qutip/qutip/issues/1371,2,['test'],['test']
Testability,A bug is fixed in Qobj permute and bra vector tests are added.; The bug is found by a student of mine Slava Kuzmin (IQOQI).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/545:46,test,tests,46,https://qutip.org,https://github.com/qutip/qutip/pull/545,1,['test'],['tests']
Testability,"A few proposed changes to internals of the MultiTrajSolver and its subclasses. The changes are (a) to increase consistency between the monte carlo solvers and the stochastic solvers, (b) to reduce repeating code from MultiTrajSolver in the subclasses, (c) to fix some documentation. * Renamed `_MTSystem` and `_MCSystem` into `_MultiTrajRHS` and `_MCRHS` to make them analogous to `_StochasticRHS`. Removed distinction between `.system` and `.rhs` which seemed unnecessary and confusing to me (please tell me if I'm wrong).; * Made `_integrate_one_traj` use the integrator's run method (which doesn't do anything special currently, but I imagine that it could potentially be implemented more efficiently than repeated calls to integrate). Made subclasses use `_run_one_traj`, `_integrate_one_traj` etc of the parent class where possible, instead of duplicating logic.; * The docstring of MCSolver.run was not documenting its parameters, instead referring to the docstring of MultiTrajSolver.run, but MultiTrajSolver is not included in the docs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2359:861,log,logic,861,https://qutip.org,https://github.com/qutip/qutip/pull/2359,1,['log'],['logic']
Testability,"A lot of the cost of the Husimi Q function does not depend on the state. If it is called many times (e.g. for a density matrix or when doing multiple states), this can be used for a speedup. I wrote a function to precompute everything that does not depend on the state and store it as a 3d array. The Q function itself is then a dot product between the last axis of the precomputed array and a pure state. Performance: Everything tested by computing Q of a coherent state with N dimensions, evaluated at 401 points in x and y, respectively.; Speedup is 3x for N=10, 4x for N=20, 7x for N=50. ; For density matrices, precomputing is already paid for by the first call. . Possible further changes:; Because precomputing is always worth it if the state is a density matrix, one could do that automatically. Because the memory cost can be large (len(xvec) * len(yvec) * N * 128 bit) , I still leave the decision to the user. The third if statement in _qfunc_pure can be avoided at a small performance cost in either the polyval or np.dot variant. This seemed the best compromise between performance and nice code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934:430,test,tested,430,https://qutip.org,https://github.com/qutip/qutip/pull/934,1,['test'],['tested']
Testability,"A new iterative method using Clenshaw summation is implemented. It is numerically stable and fast (2-3 times faster than 'iterative'). Test:. ```; import matplotlib.pyplot as plt; from qutip import *; import numpy as np. xvec=np.linspace(-10,10,101);yvec=xvec;X,Y = np.meshgrid(xvec, yvec); psi=coherent(100,7.3*np.exp(1j*0.5)); rho0 = ket2dm(psi); WW = wigner(rho0,xvec,yvec,method='iterative'); WWc = wigner(rho0,xvec,yvec,method='clenshaw'). plt.contourf(X,Y,WW,100,cmap=plt.cm.viridis); plt.show(); plt.contourf(X,Y,WWc,100,cmap=plt.cm.viridis); plt.show(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/461:135,Test,Test,135,https://qutip.org,https://github.com/qutip/qutip/pull/461,1,['Test'],['Test']
Testability,"A re-implementation of `qutip.metrics.process_fidelity`. ; The definition implemented here follows Gilchrist, Langford, Nielsen, Phys. Rev. A 71, 062310 (2005), https://journals.aps.org/pra/abstract/10.1103/PhysRevA.71.062310 (https://arxiv.org/abs/quant-ph/0408063).; Depending on how the quantum channels passed to `process_fidelity` are represented (unitary, supermatrix, choi, chi, or Kraus), computational shortcuts are used. They are all tested against each other. **Related issues or PRs**; Proposed in https://github.com/qutip/qutip/issues/1703. **Changelog**; Fixed implementation of qutip.metrics.process_fidelity and added tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1708:444,test,tested,444,https://qutip.org,https://github.com/qutip/qutip/pull/1708,2,['test'],"['tested', 'tests']"
Testability,"A representation of a quantum circuit consiting of qubit initialisation (I), controlled NOT gates (C) and measurements (M) with respect to different bases. According to [1], the transformation of a circuit to the ICM representation provides a cannonical form for an exact and fault-tolerant, error corrected circuit needed for optimization prior to final implementation on a hardware model. The algorithm consists of magic qubit initializations, gate teleportation and conditional measurements on qubits. It can be a starting point for topological descriptions of quantum cirucuits important for fault-tolerant quantum computation and can become a part of a pipeline for optimization of topological quantum computing circuits. Check out the game (MeQuanics)[http://www.mequanics.com.au] which aims to do so using crowd sourcing. Several proposals exist for circuit optimizations once we have the topological circuit model (Machine learning, monte carlo search etc) and the ICM model can be a good starting point to get to the initial topological circuit (as far as I could understand). . The algorithm can be roughly described as follows : . ```; Require: Circuit C composed from {Toffoli,CNOT,H,P,T}; Replace the Toffoli gates with their decomposition; Replace the H gates with P V P (already implemented using `resolve_gates`); Implement P V P using gate teleportation outlined in [1]; ```. The final output is a quantum circuit only using qubit initialisations, CNOT and conditional measurements/correction. Once that is complete, maybe another addition can be a conversion to the topological model and visualizations. This is a work in progress. TODO; ------; [ ] Fix code errors; [ ] Write tests; [ ] Update examples and docs. References; ----------; .. [1] arXiv:1509.03962v1 [quant-ph]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603:1695,test,tests,1695,https://qutip.org,https://github.com/qutip/qutip/pull/603,1,['test'],['tests']
Testability,"A simple test shows that the Clenshaw method from @Vutshi does not give results consistant with the other solvers. This slipped through because the test suite was not testing this new method against random operators. ``` python; N = 20; xvec = np.linspace(-10, 10, 128); for i in range(3):; rho = rand_dm(N). Wfft = wigner(rho, xvec, xvec, method='iterative'); W = wigner(rho, xvec, xvec, method='clenshaw'). Wdiff = abs(W - Wfft); print(np.sum(abs(Wdiff))); ```. With the above code, I am getting differences on the order of one, where as the other methods all are close on the order of 1e-12 or so. I will revert back to the old iterative method until this is resolved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/issues/526,3,['test'],"['test', 'testing']"
Testability,AILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7339,test,tests,7339,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"AVAILABLE; openblas_lapack_info:; NOT AVAILABLE; openblas_clapack_info:; NOT AVAILABLE; flame_info:; NOT AVAILABLE; atlas_3_10_threads_info:; NOT AVAILABLE; atlas_3_10_info:; NOT AVAILABLE; atlas_threads_info:; NOT AVAILABLE; atlas_info:; NOT AVAILABLE; lapack_info:; libraries = ['lapack', 'lapack']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = f77; lapack_opt_info:; libraries = ['lapack', 'lapack', 'blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = c; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; include_dirs = ['/usr/local/include', '/usr/include']; Supported SIMD extensions in this NumPy install:; baseline = SSE,SSE2,SSE3; found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2; not found = AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL; ```; So numpy itself marks openblas_info as NOT AVAILABLE (evidently using a build-time test, not runtime, which arguably is a pity). It seems to me that `hasattr` in qutip's BLAS support tests is returning false positives and false negatives. It indicates if the attribute was defined, even though it might be empty. Would it be better to replace; ```; hasattr(config,'openblas_info'); ```; in qutip/utilities.py with; ```; hasattr(config,'openblas_info') and config.openblas_info; ```; likewise for blas_mkl_info (not mkl_info) ?. This would be similar to numpy's own usage in `np.show_config()` (i.e. `np.__config__.py.show()`), which [uses](https://github.com/numpy/numpy/blob/3b7672ebd16982b661b8fbcabac80158662a8784/numpy/__config__.py.in#L116) `if not info_dict` to print ""NOT AVAILABLE"". ### Code to Reproduce the Bug. ```shell; import numpy; numpy.show_config(). import qutip; qutip.about(); ```. ### Code Output. ```shell; $ python3; Python 3.10.9 (main, Dec 7 2022, 13:47:07) [GCC 12.2.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import numpy; >>> numpy.show_config(); ...; blas_mkl_info:; NOT AVAILABLE; ...; openblas_info:; NOT AV",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:3539,test,tests,3539,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['test'],['tests']
Testability,Activate mcsolve tests on Windows in QuTiP 5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1948,1,['test'],['tests']
Testability,Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1854,1,['test'],['tests']
Testability,Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1849:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1849,2,['test'],['test']
Testability,Add QuTiP to test.pypi.org,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/issues/992,1,['test'],['test']
Testability,Add `Qobj.logm`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1992:10,log,logm,10,https://qutip.org,https://github.com/qutip/qutip/pull/1992,1,['log'],['logm']
Testability,Add `Qobj.logm` for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1993:10,log,logm,10,https://qutip.org,https://github.com/qutip/qutip/pull/1993,1,['log'],['logm']
Testability,Add `kron_dense` specialization to dispatch and test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1646:48,test,test,48,https://qutip.org,https://github.com/qutip/qutip/pull/1646,1,['test'],['test']
Testability,Add `test` subcommand to setup.py and fix exception in settings.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/429:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/429,1,['test'],['test']
Testability,"Add a `Coefficient` object to encapsulate the coefficients of the QobjEvo.; `Coefficient`s replace qobjevo's codegen. Their advantages are; - Coefficient are always 'compiled'. String are compiled to cython code at initialization.; - Have cython decorator: taking the conjugate does no longer require new compilation.; - String coefficient are saved to reuse with basic pattern matching: ""cos(a*t)"" and ""cos( w1 *t )"" will use the same compiled object. This object is compiled once and kept between session.; - Cleaner compilation using `setuptools` instead of a monkey patched `pyximport`.; - `QobjEvo` is always compiled.; - `ObjeEvo` does not need to keep track of type making the code simpler. There are shims to make `Pulse` and qip tests work since they used `QobjEvo.tlist` and `QobjEvo.ops.coeff`.; @BoxiLi, the new QobjEvo can be added even if coefficient's tlist are different, but you cannot get back the tlist and the array from them. Also for _step_func_coeff, before the first time, `Coefficient` return the first value of the array, not 0 as expected in pulse.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1336:738,test,tests,738,https://qutip.org,https://github.com/qutip/qutip/pull/1336,1,['test'],['tests']
Testability,Add a linux python 3.8 test; Fix MacOS python version to 3.7 as our test environment result in conflict on 3.8; * Does not fix mac tests' errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1125:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/1125,3,['test'],"['test', 'tests']"
Testability,Add a numpy 1.22 and Python 3.10 build to the CI test matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1777:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/1777,1,['test'],['test']
Testability,Add a suggestion for tests in the PR template,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1220:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1220,1,['test'],['tests']
Testability,Add a test for progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/2150,2,['test'],['test']
Testability,"Add a wrapper for function returning `Qobj` to be treated as `QobjEvo`: `QobjEvoFunc`; Wrapped function have access to all method of `QobjEvo` therefore only one version of the code should be sufficient for time dependant problems using both list format and function.; Any callable is considered a function, allowing for class method etc. The new function `qobjevo_maker` can take any valid time dependant quantum object and make it a `QobjEvo` like object. Added wrapper for function using the old `rhs_with_state` format and using no `args`. . Tests for `QobjEvoFunc` have been added but not for `qobjevo_maker`. Solver are not updated to use it yet. @ajgpitch I added it last minute in stochastic, but did not tried it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1123:546,Test,Tests,546,https://qutip.org,https://github.com/qutip/qutip/pull/1123,1,['Test'],['Tests']
Testability,Add additional unit tests + updated release and install notes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/280:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/280,1,['test'],['tests']
Testability,Add familly package tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2504:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/2504,1,['test'],['tests']
Testability,Add hypothesis tests for data operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/1957,1,['test'],['tests']
Testability,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644:550,Benchmark,Benchmark,550,https://qutip.org,https://github.com/qutip/qutip/pull/1644,1,['Benchmark'],['Benchmark']
Testability,Add rerun for simdiag tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2067:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/2067,1,['test'],['tests']
Testability,Add support for specifying the numpy version in the CI test matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1696:55,test,test,55,https://qutip.org,https://github.com/qutip/qutip/pull/1696,1,['test'],['test']
Testability,Add test for half integer for clebsch,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1218:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1218,1,['test'],['test']
Testability,Add test for orbital,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/issues/1839,1,['test'],['test']
Testability,Add test for qsave/qload,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/324:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/324,1,['test'],['test']
Testability,Add tests for previously untested function in states and operators and parametrize some of the existing tests.; Should improve the coverall by about 100 lines. **Changelog**; Improve test coverage of states and operators functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1578:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1578,3,['test'],"['test', 'tests']"
Testability,Add tests for progress_bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/2127,1,['test'],['tests']
Testability,Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1681:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1681,1,['test'],['tests']
Testability,Add the matrix logrithm method logm() to Qobj.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1990:15,log,logrithm,15,https://qutip.org,https://github.com/qutip/qutip/issues/1990,2,['log'],"['logm', 'logrithm']"
Testability,Add towncrier draft build of changelog to CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1946:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/pull/1946,1,['test'],['tests']
Testability,Add unit test for gate resolution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/145:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/145,1,['test'],['test']
Testability,Added Test classes to the be importable from tests/core/data,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723:6,Test,Test,6,https://qutip.org,https://github.com/qutip/qutip/pull/1723,2,"['Test', 'test']","['Test', 'tests']"
Testability,Added expect tests for data layer.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1626:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/1626,1,['test'],['tests']
Testability,"Added new logging and settings support, started refactoring debugs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:10,log,logging,10,https://qutip.org,https://github.com/qutip/qutip/pull/248,1,['log'],['logging']
Testability,Added ptrace specialisation tests and fixed a bug for ptrace_dense.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1746:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/1746,1,['test'],['tests']
Testability,Added test to verify,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/194:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/194,1,['test'],['test']
Testability,"Added the option to import string to python instead of compiling to cython for QobjEvo.; This is default if no cython, or set manually if cython available. `QobjEvoInstance.use_cython = False`; Added test and updated docstring.; Work in parallel.; Did not do any benchmark yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1082:200,test,test,200,https://qutip.org,https://github.com/qutip/qutip/pull/1082,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Added transparency values as a parameter to the add methods. **Checklist**; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Adding the option to set point and vector transparency in bloch.py. **Related issues or PRs**; fix #1287 . **Changelog**; added optional transparency alpha value as a parameter in bloch.add_points(), bloch.add_vectors() and bloch.add_states()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1836:93,test,tests,93,https://qutip.org,https://github.com/qutip/qutip/pull/1836,1,['test'],['tests']
Testability,Adding a commit that should fix tests in 4.5.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1191:32,test,tests,32,https://qutip.org,https://github.com/qutip/qutip/pull/1191,1,['test'],['tests']
Testability,Adds target kwarg to average_gate_fidelity; unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/364:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/364,1,['test'],['tests']
Testability,"After installing qutip via conda (conda install qutip) on Mac 10.15.1 High Sierra, I ran the testing script using:. >> import qutip.testing as qt ; >> qt.run(). I am getting the following error: . Qobj subtraction ... python(4259,0x119a26dc0) malloc: Incorrect checksum for freed object 0x7fdbb05c5910: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(4259,0x119a26dc0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6. Does anyone know what is causing this, how to fix it, or what kinds of problems it might cause later? Thank you!. Sacha",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:93,test,testing,93,https://qutip.org,https://github.com/qutip/qutip/issues/1120,2,['test'],['testing']
Testability,"After installing qutip, in order to test qutip installation, I type ""python"" in terminal and then type ""import qutip.testing as qt"", getteing to the following error. import qutip.testing as qt; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; ModuleNotFoundError: No module named 'qutip'; >>> qt.run(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'qt' is not defined. If anyone can help to solve the problem?; Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/issues/1391,3,['test'],"['test', 'testing']"
Testability,"All deprecation warnings issued by numpy during the tests have now been fixed, resolving #381 ; The motivation was to try and make it more clear when and why issue #430 arises",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/434:52,test,tests,52,https://qutip.org,https://github.com/qutip/qutip/pull/434,1,['test'],['tests']
Testability,All pulseoptim tests now passing on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/604:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/604,1,['test'],['tests']
Testability,Allow repeating tests without quitting Python,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2538:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/2538,1,['test'],['tests']
Testability,"Allow rerunning of dnorm tests, refactor test_metrics.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:25,test,tests,25,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['test'],['tests']
Testability,Also added more isherm testing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/773:23,test,testing,23,https://qutip.org,https://github.com/qutip/qutip/pull/773,1,['test'],['testing']
Testability,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:202,test,testing,202,https://qutip.org,https://github.com/qutip/qutip/pull/1687,2,['test'],"['testing', 'tests']"
Testability,"As noted by @ajgpitch in #476, Travis CI is currently raising a large number of errors, as every call to `dnorm()` results in a `SolverError`. I am in the process of investigating this problem, but have not yet been able to reproduce the test failures locally. It appears as though the failures only occur when MKL and CVXPY are used together, but I am able to use MKL and CVXPY together fine locally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/484:238,test,test,238,https://qutip.org,https://github.com/qutip/qutip/issues/484,1,['test'],['test']
Testability,"As promised in #95, I added some new test cases to make sure that for all binary arithmetic operations and all superreps, the superrep metadata is preserved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99:37,test,test,37,https://qutip.org,https://github.com/qutip/qutip/pull/99,1,['test'],['test']
Testability,As we don't have a fix for #963 then this PR skips those tests on the `average_gate_fidelity` on Mac for the time being,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1034:57,test,tests,57,https://qutip.org,https://github.com/qutip/qutip/pull/1034,1,['test'],['tests']
Testability,Attempt to solve issue with false errors in Qobj division tests on 32 bit system by using comparison that is more robust to floating-point errors.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/306:58,test,tests,58,https://qutip.org,https://github.com/qutip/qutip/pull/306,1,['test'],['tests']
Testability,BUG: Loosen tolerance on td-BR states test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/722:38,test,test,38,https://qutip.org,https://github.com/qutip/qutip/pull/722,1,['test'],['test']
Testability,BUG: Loosen tolerances on some random tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/636:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/636,1,['test'],['tests']
Testability,BUG: br_states test still too tight,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/730:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/730,1,['test'],['test']
Testability,BUG: dnorm tests sporadically failing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/880:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/issues/880,1,['test'],['tests']
Testability,BUG:Fix for broken Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/547:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/pull/547,1,['test'],['tests']
Testability,Benchmark restructuring,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/14:0,Benchmark,Benchmark,0,https://qutip.org,https://github.com/qutip/qutip/pull/14,1,['Benchmark'],['Benchmark']
Testability,"Better way to permute Qobj. Captured a bug where old permute didn't permute dimensions.; UPDATE: Now works for super objects (including operator-bra); Benchmark (permute 1st and last qubits):; <img width=""520"" alt=""unknown-1"" src=""https://cloud.githubusercontent.com/assets/4971779/26755844/811dbbce-4896-11e7-89b8-c11251b5a550.png"">; <img width=""520"" alt=""unknown-2"" src=""https://cloud.githubusercontent.com/assets/4971779/26755847/87cbe928-4896-11e7-8143-73ddcc77cd36.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/701:151,Benchmark,Benchmark,151,https://qutip.org,https://github.com/qutip/qutip/pull/701,1,['Benchmark'],['Benchmark']
Testability,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1453:491,test,tests,491,https://qutip.org,https://github.com/qutip/qutip/pull/1453,4,['test'],['tests']
Testability,"Can now give unitary operator as initial `psi0` in sesolve. This way we solve the Schrodinger operator equation.; Also added tests for all the sesolve methods. Kind of a bit of waste of time, as `propagator` does almost exactly the same thing. However, I think it does add a bit of completeness. The tests at least should be valuable",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/832:125,test,tests,125,https://qutip.org,https://github.com/qutip/qutip/pull/832,2,['test'],['tests']
Testability,Change tests/test_metrics.py so that only dnorm tests are skipped if cvxpy is not installed,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1704:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1704,2,['test'],['tests']
Testability,"Changed `clebsch` to work with non-int inputs. Test file shows it working for both int and float inputs, giving expected results.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1177:47,Test,Test,47,https://qutip.org,https://github.com/qutip/qutip/pull/1177,1,['Test'],['Test']
Testability,"Clarification of some variable naming to attempt to link with literature and also be usable without having to read the papers.; Switch to a class module. In line with recent work from @arnelg ; Moved to nonmarkov folder, as this is a non-Markovian approx method. Old file remains with deprecated function, just in case anyone was using it. This now links to the new instance method.; Many efficiency improvements (now up to 10x faster). Test added. . Will provide a notebook example soon. Then some documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:437,Test,Test,437,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['Test'],['Test']
Testability,Clean up test namespace,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/497:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/497,1,['test'],['test']
Testability,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1648,4,['test'],"['test', 'tests']"
Testability,Close matplotlib figure windows cleanly in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/1648,1,['test'],['tests']
Testability,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:331,log,login,331,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['log'],['login']
Testability,"Continuing the work of #1164 - this is part two of many more to come, depending on how long I can keep doing this! Of particular note is the first commit in this PR, which registers `pytest.mark.slow` with `pytest` to stop it warning about an unknown mark in use. There are several additional comments and explanations in the expanded commit messages, where I've tried to explain a little bit about bugs I found and reasons for swapping over to certain libraries (e.g. for temporary file handling). I'm in part opening a new PR now so that I can see if the CodeClimate tests are passing. I shouldn't have many pep8 issues because I have a tool to check, but I don't have CodeClimate working locally for things like the complexity (if it even checks them for tests...). I've been really rather aggressively using the parametrisation that `pytest` offers for fixtures, which is cutting out an awful lot of code duplication, and hopefully making it a bit clearer when things are exactly the same. One common theme I'm finding when I'm running these tests is that there's an awful lot of warnings caused by `pyximport`, a part of `Cython`, which is using the Python 2 era `imp` instead of the newer `importlib`. I'm not sure there's anything we can or should do about this, though.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:569,test,tests,569,https://qutip.org,https://github.com/qutip/qutip/pull/1181,3,['test'],['tests']
Testability,"Control pulse optim tests split into more distinct functions.; This is generally a good idea, and will also help investigate #599",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/600:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/600,1,['test'],['tests']
Testability,Convert tests to pytest,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1181,1,['test'],['tests']
Testability,Convert tests to pytest (assorted),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1252:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1252,1,['test'],['tests']
Testability,Convert tests to pytest (gates and cavityqed),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1251,1,['test'],['tests']
Testability,Convert tests to pytest (solvers and internals),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1250:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1250,1,['test'],['tests']
Testability,Corrected sign in jmat when called without arguments and the respective tests in test_operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/569:72,test,tests,72,https://qutip.org,https://github.com/qutip/qutip/pull/569,1,['test'],['tests']
Testability,Current 106 tests are failing. All seeming 'Metrics' test.; All failing with:; ```; TypeError: __init__() got multiple values for argument 'name'; ```; I will try and reproduce locally,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/issues/872,2,['test'],"['test', 'tests']"
Testability,"Currently the `qutip.measurement.measure_observable` function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.; ```; import qutip as qt; import qutip.measurement as meas; import numpy as np. #Prepare Bell state; state = qt.tensor([qt.basis(2, 0)]*2) + qt.tensor([qt.basis(2, 1)]*2); state = state.unit(). # ZZ operator; op = qt.tensor([qt.sigmaz()]*2). result_eigenvalue, final_state = meas.measure(state, op). #Check that the measurement didn't change the state (because it is an eigenstate of the measurement operator); assert np.isclose(qt.fidelity(final_state, state), 1) #fails; ```. I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the `measure` function, but the following enhancement would be very useful:; An option `respect_degenerate_eigenvalues=False` in `qutip.measurement.measure_observable` that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1800:901,assert,assert,901,https://qutip.org,https://github.com/qutip/qutip/issues/1800,1,['assert'],['assert']
Testability,"Currently, `Qobj` has several attributes which are somewhat expensive to compute:; - `type`; - `isherm`; - `istp`; - `iscp`; - `ishp` (added in #452). Of these, `type` and `isherm` are cached by `Qobj._type` and `Qobj._isherm`, respectively. These should be unified, so that the other three are also cached properly. Moreover, we should add unit tests to make sure that this caching is properly invalidated under at least some reasonably common manipulations. For instance, with the caching of `type`, it can sometimes fail in unexpected ways to build an object up then redefine its `dims`:. ``` python; >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type). >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> print(J.type); >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type); ```. The first of these two snippets correctly prints `super`, while the extra `print(J.type)` in the second snippet causes it to cache `type` and print `oper` twice. An experienced user can of course invalidate the cache with `J._type = None`, but that is somewhat counter-intuitive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453:346,test,tests,346,https://qutip.org,https://github.com/qutip/qutip/issues/453,1,['test'],['tests']
Testability,"Dear Quip-developers and users,. _Sorry for the label ""BUG"" - I thought it was before I could understand it!_. I was trying to go through the smesolver in Qutip, and find it difficult to understand what value to be chosen for dW_factors in smesolver, which is [1.0] by default. The workflow of smesolver is as follows:. - In stochastic.py, the solver options are decided based on user's input and sets the solver to smesolve; - It calls the _sesolve_generic function in stochastic.py ; - _sesolve_generic calls the _single_trajectory function in stochastic.py; - _single_trajectory calls the cy_sesolve_single_trajectory function in ssolver class of cy/stochastic.pyx . - The noise is to be multiplied by the variance of the Wiener noise, which is done in line 482-483 anyway, as given below:. ```; if self.noise_type == 0:; np.random.seed(self.seed[n]); return np.random.randn(self.num_step, self.num_substeps, self.num_dw) *\; np.sqrt(self.dt); ```. - In the function cy_sesolve_single_trajectory, the measurements are computed as follows: ; ```; if sso.store_measurement:; for m_idx, m in enumerate(sso.cm_ops):; m_expt = m.compiled_qobjevo.expect(t, rho_t); measurements[t_idx, m_idx] = m_expt + self.dW_factor[m_idx] * \; sum(noise[t_idx, :, m_idx]) / (self.dt * self.num_substeps); ```; What should be the exact [dW_factors] one should choose when m_ops is explicitly given (for example m_ops=[x])? Should it be sqrt(Gamma), where Gamma is the damping factor? I have tested that dW_factors=[1] generates very strong noise. . Thanks in advance; Sangkha Borah; OIST, Japan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1387:1473,test,tested,1473,https://qutip.org,https://github.com/qutip/qutip/issues/1387,1,['test'],['tested']
Testability,Defaulting to using dense solver for small/dense problems and the sparse solver only for large and sparse problems. In my tests the dense solver is actually quite a bit faster up to pretty large system (several hundreds of quantum states at least).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/182:122,test,tests,122,https://qutip.org,https://github.com/qutip/qutip/pull/182,1,['test'],['tests']
Testability,Deprecation Warning in Tests for collections.abc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1003:23,Test,Tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/1003,1,['Test'],['Tests']
Testability,"Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:990,test,tests,990,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"Description; Modification of PR #1315 .Added option to include colors to Bloch vectors and points instead of just cycling from a list. Related issues or PRs; fix #1292. Changelog; Added an optional argument called colors for the Bloch.add_vectors, Bloch.add_points and Bloch.add_states method.; Tested it here: https://github.com/rajathshetty20/misc/blob/master/qutip%20%231292.ipynb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1335:295,Test,Tested,295,https://qutip.org,https://github.com/qutip/qutip/pull/1335,1,['Test'],['Tested']
Testability,"Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems. Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook. . Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See https://github.com/qutip/qutip-notebooks/issues/100. One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in https://github.com/qutip/qutip/pull/1092, using [loky](https://loky.readthedocs.io). In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence. If the freeze is indeed caused by spawn-multiprocessing, the problem *should* also show up on Windows. Is anyone running Windows able to reproduce this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202:1275,test,tests,1275,https://qutip.org,https://github.com/qutip/qutip/issues/1202,1,['test'],['tests']
Testability,Disable brtools zheevr test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1300:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/1300,1,['test'],['test']
Testability,Disable mcsolve tests on windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1855:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/1855,1,['test'],['tests']
Testability,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1647:124,test,test,124,https://qutip.org,https://github.com/qutip/qutip/pull/1647,2,['test'],['test']
Testability,"Doing some further testing of `type='super'` `Qobj`s, I ran into a simple test case in which operator multiplication fails to be associative. ```; >>> rho_psi = operator_to_vector(Qobj(np.diag(np.array([0.9, 0.1], dtype=complex))))>>> E_psi = rho_psi.dag(); >>> S = to_super(sigmax()); >>> (E_psi * S) * rho_psi; Traceback (most recent call last):; File ""<ipython-input-22-90cbfac2a43e>"", line 1, in <module>; (E_psi * S) * rho_psi; File ""qutip/qobj.py"", line 416, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes. >>> E_psi * (S * rho_psi); Quantum object: dims = [[1], [1]], shape = [1, 1], type = oper, isherm = True; Qobj data =; [[ 0.18]]; >>> E_psi; Quantum object: dims = [[1], [[2], [2]]], shape = [1, 4], type = bra; Qobj data =; [[ 0.9 0. 0. 0.1]]; >>> rho_psi; Quantum object: dims = [[[2], [2]], [1]], shape = [4, 1], type = operator-vector; Qobj data =; [[ 0.9]; [ 0. ]; [ 0. ]; [ 0.1]]; >>> S; Quantum object: dims = [[[2], [2]], [[2], [2]]], shape = [4, 4], type = super, isherm = True; Qobj data =; [[ 0. 0. 0. 1.]; [ 0. 0. 1. 0.]; [ 0. 1. 0. 0.]; [ 1. 0. 0. 0.]]; ```. I'm not sure why this is happening yet, but I'll keep looking.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96:19,test,testing,19,https://qutip.org,https://github.com/qutip/qutip/issues/96,2,['test'],"['test', 'testing']"
Testability,Drop tests using older python versions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1941,1,['test'],['tests']
Testability,Duplicate of #1381 for `dev.major` - should fix the super broken tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1383:65,test,tests,65,https://qutip.org,https://github.com/qutip/qutip/pull/1383,1,['test'],['tests']
Testability,During PR #11 it came up that we might want to test that bloch.py produces the correct figures. Personally I have no idea how to test for correct plotting in a unit test kind of way. Any ideas?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/12:47,test,test,47,https://qutip.org,https://github.com/qutip/qutip/issues/12,3,['test'],['test']
Testability,During test control.pulseoptim: Hadamard gate (loading config from file) this deprecation warning sometimes happens:; control.pulseoptim: Hadamard gate (loading config from file) ... C:\Users\Paul\A; naconda2\lib\site-packages\qutip\control\loadparams.py:92: DeprecationWarning: Y; ou passed a bytestring as `filenames`. This will not work on Python 3. Use `cp.r; ead_file()` or switch to using Unicode strings across the board.; Reported on pip install of 4.0.1 on macOS; Not able to reproduce on Linux (py2 or py3).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/598:7,test,test,7,https://qutip.org,https://github.com/qutip/qutip/issues/598,1,['test'],['test']
Testability,"E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.9; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:17234,Test,Tests,17234,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Test'],['Tests']
Testability,ED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ________________________________________,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7539,test,tests,7539,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1968,test,tests,1968,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMED",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1722,test,tests,1722,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1640,test,tests,1640,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/bu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:3708,test,testing,3708,https://qutip.org,https://github.com/qutip/qutip/pull/1429,2,['test'],"['test', 'testing']"
Testability,ENH: Anaconda travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/300,1,['test'],['tests']
Testability,ENH: Remove CXVPY logger warning in metrics,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/465:18,log,logger,18,https://qutip.org,https://github.com/qutip/qutip/pull/465,1,['log'],['logger']
Testability,ENH: Use anaconda instead of wheels in travis testing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/299:46,test,testing,46,https://qutip.org,https://github.com/qutip/qutip/pull/299,1,['test'],['testing']
Testability,ENH: contributors update Change log with merged PR,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1055:32,log,log,32,https://qutip.org,https://github.com/qutip/qutip/issues/1055,1,['log'],['log']
Testability,Enforce a CI test with scipy<1.5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1302:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/pull/1302,1,['test'],['test']
Testability,"Enhance: Division by zero caught in stats.calculate; New: test out files directory can now be specified using optimconfig.test_out_subdir; Enhance: makedirs used to create test_out_dir, so nested directories can be used; Enhance: missing config sections now caught and reported as warnings; New: pulsegen parameters can now be read from config file; Enhance: iter, fid_err, fid_err_grad test_out_files now appended to rather than held open",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/301:58,test,test,58,https://qutip.org,https://github.com/qutip/qutip/pull/301,1,['test'],['test']
Testability,Ensure tests can pass without ipython and matplotlib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2311:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/2311,1,['test'],['tests']
Testability,"Error while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23965,test,tests,23965,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"Error while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Pytho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27571,test,tests,27571,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,Errors when running qutip.testing.run() on Mac M1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26,test,testing,26,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,Explicitly define matplotlib backend for Windows tests (v5).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2022:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/2022,1,['test'],['tests']
Testability,Explicitly define matplotlib backend for Windows tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/2013,1,['test'],['tests']
Testability,Expm and project tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1630:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1630,1,['test'],['tests']
Testability,"FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2623,test,testing,2623,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"Failed to break down the line. ```; f.write(""# Generated by QuTiP: %dx%d %s matrix in %s format ['%s' separated values].\n"" % (M, N, numtype, numformat, sep)); ```. to less then 80 chars without breaking the unit tests. Needs to be done later.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/7:213,test,tests,213,https://qutip.org,https://github.com/qutip/qutip/issues/7,1,['test'],['tests']
Testability,Failing unit tests in Sparse,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/73,1,['test'],['tests']
Testability,Failing unit tests in test_subsystem_apply,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/30:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/30,1,['test'],['tests']
Testability,Failure in Correlation unittest when running tests twice,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/269:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/issues/269,1,['test'],['tests']
Testability,Faster automated test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217:17,test,test,17,https://qutip.org,https://github.com/qutip/qutip/issues/1217,1,['test'],['test']
Testability,Faster correlation test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1885:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1885,1,['test'],['test']
Testability,Fastsparse tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/586:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/586,1,['test'],['tests']
Testability,Feature: unit tests to check superrep metadata preservation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/pull/99,1,['test'],['tests']
Testability,"Finally, `Qobj` can use any backing data store. This fairly small and simple PR is effectively the culmination of all the work on `dev.major` over the last few months, and effectively is just like flicking a switch to turn on all the capabilities that we've built up through #1282, #1296, #1332, #1338 and #1341. There is still a lot of work to be done, but I'm trying to transition to smaller, easier-to-check PRs to make review easier. Possibly incomplete to do list:; - write a proper `data.create`; - possibly add the dispatchers in as `data.Data` mathematical methods (e.g. `__matmul__`); - add options for controlling default output types from the dispatchers; - tests for `Qobj` with both types; - tests for creation and property routines of the data layer; - tests for the dispatch operation; - tests for conversion operations; - more specialisations to be written for `Dense` and `CSR`/`Dense`; - more ergonomic selection of _method_, not just output type (for example, you should be able to specify you want the `Dense` specialisation of `eigs` even if you pass it a `CSR`); - more ergonomic dispatchers for matrix creation (e.g. how exactly will `qutip.basis` function, and how will users add specialisations?); - documentation, both user-facing and developer-facing; - fix algorithms in `add_csr` and `matmul_csr` to use `csr.Accumulator` (should provide a speedup and remove some sorts); - fix `isherm_csr` (see #1350 - `isherm_csr` uses the same algorithm, so has the same problem)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1351:669,test,tests,669,https://qutip.org,https://github.com/qutip/qutip/pull/1351,4,['test'],['tests']
Testability,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:248,test,tests,248,https://qutip.org,https://github.com/qutip/qutip/pull/1614,2,['test'],['tests']
Testability,"Fix a testing set-up regression made in #1348 - the version of SciPy was meant to be constrained to <1.5 to test compatibility with the older version of the sparse matrices, but the version constraint got omitted when I rewrote the `.travis.yml` file. The specific bugs that that test is meant to catch (errors handling `scipy.sparse.csr_matrix` matrix multiplication) can't be present in this branch anyway, because the new data types don't use scipy internals. Still, it's good to test against older versions of scipy as well - in 1.5 they changed some numerics in the eigenvalue solvers, which caused a whole bunch of our tests to break because we relied on the gauge and order of the vectors returned remaining constant.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1363:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/pull/1363,5,['test'],"['test', 'testing', 'tests']"
Testability,Fix add_1q_gates + test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1211:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1211,1,['test'],['test']
Testability,Fix brtools zheevr test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1301:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1301,1,['test'],['test']
Testability,Fix bugs in QobjEvo's args depending on state and added solver tests using them.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1127:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/pull/1127,1,['test'],['tests']
Testability,"Fix bugs in spin_q_function and spin_wigner, add test cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/1632,1,['test'],['test']
Testability,Fix consumable iterator in test parametrisation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1430:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/1430,1,['test'],['test']
Testability,Fix deprecated call to NumPy linspace in mesolve test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/708:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/708,1,['test'],['test']
Testability,Fix diag_liou_mult tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1474:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1474,1,['test'],['tests']
Testability,Fix failing `svd_csr` test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:22,test,test,22,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['test'],['test']
Testability,Fix failing steadystate tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1694,1,['test'],['tests']
Testability,Fix failing test with mkl windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2529:12,test,test,12,https://qutip.org,https://github.com/qutip/qutip/pull/2529,1,['test'],['test']
Testability,Fix fileio tests on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1312:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/1312,1,['test'],['tests']
Testability,Fix for Liouville test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/420:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/420,1,['test'],['test']
Testability,Fix for scipy 1.11.; `cvxpy` does not work yet with the latest scipy version. I changed one of the test to run with the latest scipy but no `cvxpy` to confirm the fix is working. Close #2182 . (Nothing to fix for v5),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2183:99,test,test,99,https://qutip.org,https://github.com/qutip/qutip/pull/2183,1,['test'],['test']
Testability,Fix for scipy 1.12 in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2301:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/2301,1,['test'],['tests']
Testability,Fix groundstate and add test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1938:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/pull/1938,1,['test'],['test']
Testability,Fix logging,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379:4,log,logging,4,https://qutip.org,https://github.com/qutip/qutip/pull/379,1,['log'],['logging']
Testability,Fix logic error in shape check,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2349:4,log,logic,4,https://qutip.org,https://github.com/qutip/qutip/pull/2349,1,['log'],['logic']
Testability,Fix logic finding blas libraries,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2072:4,log,logic,4,https://qutip.org,https://github.com/qutip/qutip/pull/2072,1,['log'],['logic']
Testability,Fix some warnings in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1882:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1882,1,['test'],['tests']
Testability,Fix test coverage on `dev.major`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1348,1,['test'],['test']
Testability,Fix test of qutip.fortran in TravisCI,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/80:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/issues/80,1,['test'],['test']
Testability,Fix test requirement,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2095:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/2095,1,['test'],['test']
Testability,Fix test warnings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1506,1,['test'],['test']
Testability,Fix the failing test with numpy 2.1 on windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2516:16,test,test,16,https://qutip.org,https://github.com/qutip/qutip/pull/2516,1,['test'],['test']
Testability,"Fix the test breaking dev.major by adding the tolerance in the test itself.; This is an alternative to #1656, merge only one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1658:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/1658,2,['test'],['test']
Testability,"Fixed basis transform in to_chi, added unit tests for regression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/337:44,test,tests,44,https://qutip.org,https://github.com/qutip/qutip/pull/337,1,['test'],['tests']
Testability,Fixed logging in SS module,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261:6,log,logging,6,https://qutip.org,https://github.com/qutip/qutip/pull/261,1,['log'],['logging']
Testability,Fixed typo in tests/test_basis_transformation.py on line 84.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/107:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/pull/107,1,['test'],['tests']
Testability,Fixes the wrong vector ordering in the conversion between fock and eigen bases. Essentially gave rise to transpose error. Added tests to verify fix. Also added @cython.cdivision(True) to both BR and ME codegens so that any string with division do not call back to Python.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/712:128,test,tests,128,https://qutip.org,https://github.com/qutip/qutip/pull/712,1,['test'],['tests']
Testability,"For consideration. For backwards compatibility I think steady should be kept, and the old liouvillian unit test should also be kept in my opinion.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/173:107,test,test,107,https://qutip.org,https://github.com/qutip/qutip/pull/173,1,['test'],['test']
Testability,"Hello! This is the first of hopefully a few PRs to add measurement functions to qutip. This PR adds a new module named `qutip.measurement` that contains two functions:. * `measure(op, state)` that performs a classic quantum measurement as described in most introductory texts (measurement collapses a state to an eigenvector of an hermitian operator and the result is the corresponding eigenvalue). It is intended to simulate a simple measurement that could be performed in a real experiment. * `measurement_statistics(op, state)` returns information that is not available via a real experiment, but is nevertheless often useful in simulator (the eigenvalues and vectors or projection operators for the measurement operator and the probabilities of each measurement result). Both functions support either kets or density matrices and return sensible results based on the kind of input. Not currently supported:. * Partial measurements of a system.; * Destructive measurements (aka von Neumann measurements of the second kind); * Density matrix ensembles (applying the measurement probabilities to the density matrix rather than making a specific measurement); * Any custom support for qubit measurement (my plan is to add those to a `qutip.qip.measurements` module once we have the basics of this module agreed on). Questions / things I'd like feedback on:. * Do the inputs and outputs of the current functions seem intuitive / sensible?; * What are the most important other features to support?; * I don't want to have too many functions, but I also don't necessarily want to cram all possible kinds of measurements into one function. Any thoughts on how to split these up?; * What other unit tests should I be writing?; * I haven't given any thought to performance yet. Anything egregious I should fix now or any important cases to optimize for?. General stylistic feedback welcomed too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090:1694,test,tests,1694,https://qutip.org,https://github.com/qutip/qutip/pull/1090,1,['test'],['tests']
Testability,Hello!!!. I installed python using anaconda on my mac and then installed qutip. When I run the installation test I always get. Fortran mcsolver: False. How can I install the Fortran compiler needed. Thanks. Regards!!. Sebastian,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/391:108,test,test,108,https://qutip.org,https://github.com/qutip/qutip/issues/391,1,['test'],['test']
Testability,"Hello, i discovered an error in the implementation of the QFT. Namely when i want to obtain the gate sequence. The is when tha code runs this . if swapping is True:; for i in range(N // 2):; qc.add_gate(r""SWAP"", targets=[i], controls=[N - 1 - i, i]). it gives an error because the swap gate needs two targets and it is only passing one. Here is a test code. qft.qft_gate_sequence(N=2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/688:347,test,test,347,https://qutip.org,https://github.com/qutip/qutip/issues/688,1,['test'],['test']
Testability,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:539,stub,stubs,539,https://qutip.org,https://github.com/qutip/qutip/issues/1703,2,['stub'],['stubs']
Testability,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:98,log,logging,98,https://qutip.org,https://github.com/qutip/qutip/issues/1156,8,['log'],"['log', 'logger', 'logging']"
Testability,"Hello. I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000. ; Units are µs for time (so MHz for frequency). . versions used:; ```python; matplotlib.pylab 1.16.4; qutip 4.4.1; matplotlib 3.1.1; numpy 1.16.4; scipy 1.3.1; CPython 3.7.3; IPython 7.5.0; ```. I solve with sesolve or mesolve with (|+. 1> + |0>)/sqrt(2) as initial state.; **expected:** quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>; **result:** population of |+1> goes down linearly and |0> goes up ; a few observations: ; - if I make the coefficient of Sz^2 smaller, the population diverges less ; - with less time steps but same overall propagation time, I see the divergence less obviously because I see the beginning of it; - I am aware one can somehow optimize the number of time steps but this is about the convenient settings for the next steps for me; - I was thinking of increasing floating point precision or something like that but wasn't able to find a simple way to do that in the docs. it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?; anyway, this is about the right, convenient choice of unit for us here. any idea what's wrong ?. ```python; %load_ext watermark; import numpy as np; import scipy; import matplotlib; import matplotlib.pylab as plt; import qutip; %watermark -v --iversions; %matplotlib qt. #Spin 1 operators; S1_x = 1/np.sqrt(2)*qutip.Qobj([[0,1.,0],; [1.,0,1.],; [0,1.,0]]). S1_y = 1.j/np.sqrt(2)*qutip.Qobj([[0,-1.,0],; [1.,0,-1.],; [0,1.,0]]). S1_z = qutip.qdiags([1.,0,-1.], 0). #canonical basis with corresponding projectors; canon_100 = qutip.basis(3,0) #ket |+1>; canon_010 = qutip.basis(3,1) #ket |0>; canon_001 = qutip.basis(3,2) #ket |-1>. proj100 = qutip.ket2dm(canon_100); proj010 = qutip.ket2dm(canon_010); proj001 = qutip.ket2dm(canon_001). #Hamiltonian pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085:102,test,testing,102,https://qutip.org,https://github.com/qutip/qutip/issues/1085,1,['test'],['testing']
Testability,"Hey,. It seems the sigmam() operator incorrectly returns True when tested with isherm. I think this is only an issue in the developer version 3.2.0.dev- (it does not happen with the stable release). The following code reproduces the issue:. ``` python; import qutip as qu. print(""My version:""); print(qu.version.version). mysigmam = qu.basis(2,1) * qu.basis(2,0).dag(); print(""My sigmam:""); print(mysigmam); print(""is hermitian?:""); print(mysigmam.isherm). print(""Qutip sigmam:""); print(qu.operators.sigmam()); print(""is hermitian?:""); print(qu.operators.sigmam().isherm); ```. Which returns, on my machine:. ```; My version:; 3.2.0.dev-; My sigmam:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = False; Qobj data =; [[ 0. 0.]; [ 1. 0.]]; is hermitian?:; False; Qutip sigmam:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0. 0.]; [ 1. 0.]]; is hermitian?:; True; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/482:67,test,tested,67,https://qutip.org,https://github.com/qutip/qutip/issues/482,1,['test'],['tested']
Testability,"Hi all,. I'm not sure how to do pull request in this case so let it be a new Issue. I have implemented Milstein method for solving SME for homodyne detection scheme. For my problems it works much better than the simple Euler-Maruyama method. In case of a single Wiener increment all what is required is the new rhs function (see notebook attached). For multiple Wiener increments the provided infrastructure of QuTiP is not enough. One needs to provide all of the A_ops to the rhs. The modified stochastic.py file is also attached (from qutip.stochastic import smesolve_mil). The attached Notebook contains an example of SME with an analytical solution. Which allows to test smesolver for a single quantum trajectory. The notebook and the modified stochastic.py is here:; http://db.tt/dJNjGo3g. P.S. Due to nonlinearity in the stochastic term of quantum SME the simple Euler-Maruyama scheme doesn't work properly sometimes. Even Milstein struggles. From my experience semi implicit methods help. But in order to implement it in a convenient way one needs to modify QuTiP approach to the problem. Maybe instead of rhs function it would be better to have a function which returns \rho_{n+1} instead of d\rho. It could be more flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:670,test,test,670,https://qutip.org,https://github.com/qutip/qutip/issues/35,1,['test'],['test']
Testability,"Hi!. I'd like to report an installation issue on CentOS/RHEL platforms. I've tested various Python versions (2.7, 3.4) on both RHEL 6.x and 7.x, and the error is consistent, and happens during compilation of some Cython files. The error is: `ambiguous overloaded method` referring to the `abs()` function, and happens in two different places. Full installation output:; ```; $ pip install qutip; Collecting qutip; Using cached qutip-4.1.0.tar.gz; Complete output from command python setup.py egg_info:; ; Error compiling Cython file:; ------------------------------------------------------------; ...; cdef double * col_sum = <double *>PyDataMem_NEW_ZEROED(ncols, sizeof(double)); cdef double max_col = 0; for ii in range(nrows):; for jj in range(ptr[ii], ptr[ii+1]):; k = ind[jj]; col_sum[k] += abs(data[jj]); ^; ------------------------------------------------------------; ; qutip/cy/sparse_utils.pyx:316:29: ambiguous overloaded method; ; Error compiling Cython file:; ------------------------------------------------------------; ...; cdef size_t ii, jj; cdef double * row_sum = <double *>PyDataMem_NEW_ZEROED(nrows, sizeof(double)); cdef double max_row = 0; for ii in range(nrows):; for jj in range(ptr[ii], ptr[ii+1]):; row_sum[ii] += abs(data[jj]); ^; ------------------------------------------------------------; ; qutip/cy/sparse_utils.pyx:335:30: ambiguous overloaded method; Compiling qutip/cy/spmatfuncs.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/stochastic.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/sparse_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:77,test,tested,77,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['test'],['tested']
Testability,"Hi, . I installed qutip on my windows system and tried the testing codes and faced the problem (as the figure shows):. TypeError: Cannot convert _UnitedFuncCaller to qutip.cy.cqobjevo_factor.CoeffFunc. ![image](https://user-images.githubusercontent.com/13745165/60830800-9a9e5e00-a1ea-11e9-99d7-2ec24390083e.png). Here is the about() information:. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.4.0.dev0; Numpy Version: 1.16.4; Scipy Version: 1.2.1; Cython Version: 0.29.11; Matplotlib Version: 3.1.0; Python Version: 3.7.3; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: True; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Anaconda\envs\qutip\lib\site-packages\qutip-4.4.0.dev0-py3.7-win-amd64.egg\qutip. I would appreciate it if you can give me some advice to help me pass the testing codes!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039:59,test,testing,59,https://qutip.org,https://github.com/qutip/qutip/issues/1039,2,['test'],['testing']
Testability,"Hi, this is just a refactoring of @nwlambert 's code for a generic HEOM solver which takes in a set of exponents and coefficients for a spectral density function and can be used to work with arbitrary spectral density functions. In comparison, the current `heom` solver in QuTiP is specialized. . Specific quantum systems in the `qutip/models` sub-module could have the following signature:; ```; model = System(hamiltonian, **params); result = model.solve(initial_state, tlist, options); ```; System specific functions could be in the model class. For instance,; ```; model._rhs(); ```; gives the RHS (a matrix equivalent to an effective Liouvillian) of the density matrix evolution equation. If any system can be written down as the evolution of an initial density matrix as dp/dt = (RHS)p, and there is an optimised way to solve, it can be written down as a qutip.model. The other necessary function would be a basis change map or a lookup dictionary for translating a state tuple to the index in the larger density matrix which is used for the evolution using the effective Liouvillian. This is the `_heom_state_dictionaries` in this case and `jmm1_dictionary` in case of the WIP #753 . The code in the current form is good enough to be used but it needs to be optimized further. The next steps are:; - [x] Tests for RHS generation and the solve function; - [ ] Optimize the generation of the effective Liouvillian (RHS) similar to the `heom` solver; - [ ] Refactoring and deciding on the API (how to pass in the coefficients etc)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/793:1311,Test,Tests,1311,https://qutip.org,https://github.com/qutip/qutip/pull/793,1,['Test'],['Tests']
Testability,"Hi,. I have been trying to use `qutip.floquet.floquet_master_equation_steadystate` method to get the steadystate of my system, but the docstring is not super useful. From the docstring, I guess I should call it as `qutip.floquet.floquet_master_equation_steadystate(H, A)` where. * `H` is my (time-dependent) hamiltonian, similar as the one used in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html#floquet-formalism-in-qutip.; * `A` is the [`A` matrix output](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L587-L588) from `floquet_master_equation_rates` call. I think I missed something as I am getting an error; ```; TypeError: Solving for steady states requires Liouvillian (super) operators; ```; from https://github.com/qutip/qutip/blob/master/qutip/steadystate.py#L224. Additionnally, I think there is a much easier way to find the steadystate of such a system, using something like (not really well written nor optimised):. ```python; def floquet_master_equation_steadystate2(A):; """"""; TODO. Parameters; ----------. A : TODO; A matrix used to build the master equation.; """"""; B = np.zeros_like(A); N = A.shape[0]; for a in range(N):; for b in range(N):; # Convergence of off-diagonal terms in density matrix to 0; assert(-0.5 * np.sum(A[:, a] + A[:, b]) < 0); # Diagonal terms of density matrix; if a != b:; B[a, b] = A[a, b]; else:; B[a, b] = -1.0 * np.sum([; A[nu, a] for nu in range(N) if nu != a]; ); eigval, eigvec = Qobj(B).eigenstates(); assert(np.isclose(eigval[-1], 0, atol=1e-15)); return eigvec[-1] * eigvec[-1].dag(); ```. which basically looks for the eigenvector associated with 0 eigenvalue of a matrix derived from `A`, which is basically coming directly from equation 251 of [Gri98](http://qutip.org/docs/latest/biblio.html#gri98).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/768:1250,assert,assert,1250,https://qutip.org,https://github.com/qutip/qutip/issues/768,2,['assert'],['assert']
Testability,"Hi,; I just recently installed qutip on Canopy using a Windows Binary. When I try to run one of the tests, e.g. test_wigner.py, I get this error:. ---. AttributeError Traceback (most recent call last); C:\Users\David Feng\Desktop\qutip-3.1.0\qutip\tests\test_wigner.py in <module>(); 37 from numpy.testing import assert_, run_module_suite, assert_equal; 38 ; ---> 39 from qutip.states import coherent, fock; 40 from qutip.wigner import wigner; 41 from qutip.random_objects import rand_dm, rand_ket. C:\Users\David Feng\Desktop\qutip-3.1.0\qutip__init__.pyc in <module>(); 60 qutip.settings.ipython = True; 61 except:; ---> 62 qutip.settings.ipython = False; 63 ; 64 # -----------------------------------------------------------------------------. AttributeError: 'module' object has no attribute 'settings' . The AttributeError also appears when I simply try to import qutip from the command line. I'm not too familiar with Python scripting so any assistance on the matter would be greatly appreciated. Thank you!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469:100,test,tests,100,https://qutip.org,https://github.com/qutip/qutip/issues/469,3,['test'],"['testing', 'tests']"
Testability,"Hi,; I'm running qutip on the latest Ubuntu LTS version in 64 bit. All required packages (gfortran etc.) are installed from the repository. No matter if I use the qutip package from the repository or compile it from source, the testing results into 3 errors:. > > > import qutip.testing as qt; > > > qt.run(); > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Transform 2-level to eigenbasis and back ... ok; > > > Transform 10-level real-values to eigenbasis and back ... ok; > > > Transform 10-level to eigenbasis and back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Consistency between transformations of kets and denstity matrices ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 2.84e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > correlation: compare spectrum obtained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:228,test,testing,228,https://qutip.org,https://github.com/qutip/qutip/issues/126,2,['test'],['testing']
Testability,"Hi,; In `continuous_variables.logarithmic_negativity`, the natural log base is used, whereas every paper I've seen has `log2`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/777:67,log,log,67,https://qutip.org,https://github.com/qutip/qutip/issues/777,1,['log'],['log']
Testability,"Hi,; In the source code of `mesolve`, the derivative are defined via `L * rho` where L is Liouvillian. But when the size is too large, `L` is of huge dimension. I have two questions:; 1. What tricks have you made so that the derivative is still defined via `L` instead of collapse operators, which is relatively smaller in dimension? Sparse in scipy was used. But if `L` is not sparse at all, how can we avoid memory problem?; 2. What is the general advantage of using Liouvillian `L` to define derivative instead of `C` the collapse operators? It seems that using `L` requires only 1 multiplication, but when I tested and try to define in `C`, it seems that it is still faster for relatively small hilbert space dimension. Is speed the main reason?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531:612,test,tested,612,https://qutip.org,https://github.com/qutip/qutip/issues/531,1,['test'],['tested']
Testability,"Hi. I've been trying to use the Platen solver for ssesolve but it doesn't seem to work. Running the code below produces an error. Here's the code:; ```; from qutip import *; import numpy as np. N = 15; w0 = 1.0 * 2 * np.pi; A = 0.1 * 2 * np.pi; times = np.linspace(0, 1.5, 150); gamma = 0.25. ntraj = 1; nsubsteps = 1. a = destroy(N); x = a + a.dag(); y = -1.0j*(a - a.dag()). H = w0 * a.dag() * a + A * (a + a.dag()). rho0 = coherent(N, np.sqrt(5.0), method='analytic'); c_ops = [np.sqrt(gamma) * a]; e_ops = [a.dag() * a, x, y]. result = ssesolve(H, rho0, times, [np.sqrt(gamma) * a], e_ops, ntraj=ntraj, nsubsteps=nsubsteps, method='homodyne', map_func=parallel_map, solver='platen'); ```. Here's the error:; ```; Traceback (most recent call last):; File ""test.py"", line 23, in <module>; result = ssesolve(H, rho0, times, [np.sqrt(gamma) * a], e_ops, ntraj=ntraj, nsubsteps=nsubsteps, method='homodyne', map_func=parallel_map, solver='platen'); File ""/home/paul/anaconda3/envs/bistable/lib/python2.7/site-packages/qutip/stochastic.py"", line 377, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""/home/paul/anaconda3/envs/bistable/lib/python2.7/site-packages/qutip/stochastic.py"", line 758, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""/home/paul/anaconda3/envs/bistable/lib/python2.7/site-packages/qutip/parallel.py"", line 183, in serial_map; result = task(value, *task_args, **task_kwargs); File ""/home/paul/anaconda3/envs/bistable/lib/python2.7/site-packages/qutip/stochastic.py"", line 859, in _ssesolve_single_trajectory; A_ops, dt, dW[:, t_idx, j, :], d1, d2, sso.args); File ""/home/paul/anaconda3/envs/bistable/lib/python2.7/site-packages/qutip/stochastic.py"", line 1843, in _rhs_psi_platen; d1(A, psi_t) * dt +; TypeError: d1_psi_homodyne() takes exactly 4 arguments (2 given). ```; I've rewritten the _rhs_psi_platen function to fix this issue. Would you like me to make a pull request?; ~",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/857:759,test,test,759,https://qutip.org,https://github.com/qutip/qutip/issues/857,1,['test'],['test']
Testability,Hopefully this will fix #862 ; Unfortunately 'legacy' did not behave as scipy 0.x. Some tests still failed. I had to add facility to set much higher tol on the gmres method.; The missing kwarg is handled. So should work for scipy < 1.1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/870:88,test,tests,88,https://qutip.org,https://github.com/qutip/qutip/pull/870,1,['test'],['tests']
Testability,"How does unit() function works in qutip. Generally in matrices, when we have to find the normalized matrices, we find the square root of sum of squares of all the elements and divide each element with the result. Is it the same thing happens when we use unit() function? Or I just want to understand the logic behind unit() function. Regards,; Ganesh M",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1572:304,log,logic,304,https://qutip.org,https://github.com/qutip/qutip/issues/1572,1,['log'],['logic']
Testability,"However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1259,log,logic,1259,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['log'],['logic']
Testability,I am packaging qutip for [nixpkgs](https://github.com/NixOS/nixpkgs) https://github.com/NixOS/nixpkgs/pull/76661 from version 2.2.0 -> 4.4.1. Right now the only issue with the build is that qutip takes way too long to run the test suite in proportion to its usage in nixpkgs. Do you have a recommended set of tests that we should run? For nixpkgs I will likely just delete some of these files https://github.com/qutip/qutip/tree/master/qutip/tests. Currently the test suite takes around 2 hours and would like to get it to around 10 minutes or less.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147:226,test,test,226,https://qutip.org,https://github.com/qutip/qutip/issues/1147,4,['test'],"['test', 'tests']"
Testability,"I am trying to install qutip 3.1.0 on my MS Windows following the official steps:; 1. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work.; 2. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default.; 3. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; rais",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:124,test,tested,124,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tested']
Testability,"I am trying to learn to use qutip and I made a local environment. As per the instruction guide, I ran the qutip testing environment and got the following: . ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.4.1; Numpy Version: 1.17.3; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.3; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanholman/opt/anaconda3/envs/qutip/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:112,test,testing,112,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['test'],['testing']
Testability,"I am trying to run this code to test mcsolve():; ```; import numpy as np; from qutip import *. def hamiltonian_t(t, args):; #; # evaluate the hamiltonian at time t. ; #; H0 = args['H0']; H1 = args['H1']; w = args['w']. return H0 + H1 * np.sin(w*t). N = 2 # set where to truncate Fock state for cavity; a = destroy(N); psi0 = basis(N, 0) # define initial state. w_c = 1.0 * 2 * np.pi # cavity frequency; w = w_c; kappa = 0.001 * 2 * np.pi. H0 = w_c * a.dag()*a # time-independent term; H1 = kappa*(a.dag() + a) # time-dependent term. c_ops = [] # Build collapse operators; c_ops.append(np.sqrt(kappa) * a). args = {'H0': H0, 'H1': H1, 'w': w}. times = np.linspace(0, 10, 100) # define time vector. output = mcsolve(hamiltonian_t, psi0, times, c_ops, [a.dag()*a], args=args); ```. I am getting this error:; ```; Traceback (most recent call last):; File ""/usr/local/lib64/python3.6/site-packages/qutip/mcsolve.py"", line 365, in run_test; rhs, ode_args = self.ss.makefunc(ss); NameError: name 'ss' is not defined. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""mc_solve_example2.py"", line 33, in <module>; output = mcsolve(hamiltonian_t, psi0, times, c_ops, [a.dag()*a], args=args); File ""/usr/local/lib64/python3.6/site-packages/qutip/mcsolve.py"", line 223, in mcsolve; mc.run_test(); File ""/usr/local/lib64/python3.6/site-packages/qutip/mcsolve.py"", line 368, in run_test; raise Exception(""Error calculating H""); Exception: Error calculating H; ```. Here is the output of qutip.about(); ```; QuTiP Version: 4.5.1; Numpy Version: 1.18.4; Scipy Version: 1.4.1; Cython Version: 0.29.19; Matplotlib Version: 3.2.1; Python Version: 3.6.8; Number of CPUs: 112; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. Any advice how to fix that?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1368:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/issues/1368,1,['test'],['test']
Testability,"I am unable to find the list of states returned by the essolve function. For example:. ```python; import qutip as qt; test = qt.essolve(qt.qeye(2), qt.ket2dm(qt.basis(2, 0)), [1,2,3], c_op_list=[], e_ops=[]); ```; Returns the message; ```; Result object with essolve data.; --------------------------------; states = True, expect = True; num_expect = 0, num_collapse = 0; ```; but if I try to access the states; ```; test.states; >>> []; ```; Should this contain a list of states like mesolve()? It seems a similar issue has been raised before: https://groups.google.com/forum/#!topic/qutip/st3i6STPrQY. Here's my environment details:. ```; QuTiP: Quantum Toolbox in Python; ================================; QuTiP Version: 4.5.0; Numpy Version: 1.16.4; Scipy Version: 1.1.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\chris\Anaconda3\lib\site-packages\qutip; ============================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1262:118,test,test,118,https://qutip.org,https://github.com/qutip/qutip/issues/1262,2,['test'],['test']
Testability,"I am using GRAPE to identify optimal pulse sequences to produce a desired unitary, and am running into an error when I use optimize_pulse_unitary for sparse matrices of size 1296x1296 and larger. . For example, the following code works for N=2 but fails for N=>3:. ```python; import numpy as np; from qutip import *; from scipy.sparse import csr_matrix; import qutip.logging_utils as logging; logger = logging.get_logger(); #Set this to None or logging.WARN for 'quiet' execution; log_level = logging.INFO; #QuTiP control modules; import qutip.control.pulseoptim as cpo; import math. # Set parameters; chi = 2.2 * 2 * np.pi # coupling strength; N = 3 # number of cavity states; n_ts = 21 # number of discrete time steps; evo_time = 4. # Length of time; fid_err_targ = 1e-10 # Target fidelity error; max_iter = 0 # # Maximum iterations for the optimization algorithm; max_wall_time = 0 # Maximum (elapsed) time; min_grad = 1e-20 # Minimum gradient; p_type = 'SINE' # pulse type (RND|ZERO|LIN|SINE|SQUARE|SAW|TRIANGLE); f_ext = ""pulsedata.txt"" # output file. # Set operators and Hamiltonians. # operators; a = tensor(destroy(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); b = tensor(qeye(N), destroy(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); c = tensor(qeye(N), qeye(N), destroy(N), qeye(N), qeye(2), qeye(2), qeye(2), qeye(2)); d = tensor(qeye(N), qeye(N), qeye(N), destroy(N), qeye(2), qeye(2), qeye(2), qeye(2)); sm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), destroy(2), qeye(2), qeye(2), qeye(2)); zm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), destroy(2), qeye(2), qeye(2)); tm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), destroy(2), qeye(2)); qm = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), qeye(2), qeye(2), destroy(2)); P_se = tensor(qeye(N), qeye(N), qeye(N), qeye(N), basis(2, 1) * basis(2, 1).dag(), qeye(2), qeye(2), qeye(2)); P_ze = tensor(qeye(N), qeye(N), qeye(N), qeye(N), qeye(2), basis(2, 1) * basis(2, 1).d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617:384,log,logging,384,https://qutip.org,https://github.com/qutip/qutip/issues/1617,5,['log'],"['logger', 'logging']"
Testability,"I can't quite figure out if this is simply due to the DeprecationWarnings or something else but all tests are failing due to `atol` not being set for the gmres solver. I will try to set `atol` and check if the tests pass. Error log: https://api.travis-ci.org/v3/job/379109482/log.txt.; ```; scipy/sparse/linalg/isolve/iterative.py:2: DeprecationWarning: scipy.sparse.linalg.bicgstab called without specifying `atol`. The default value will be changed in a future release. For compatibility, specify a value for `atol` explicitly, e.g., ``bicgstab(..., atol=0)``, or to retain the old behavior ``bicgstab(..., atol='legacy')``. ```. ```; ..................................................; ======================================================================; ERROR: Steady state: Thermal qubit - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/Users/shahnawaz/dev/qutip/qutip/tests/test_steadystate.py"", line 145, in test_qubit_power_gmres; rho_ss = steadystate(H, c_op_list, method='power-gmres'); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 298, in steadystate; return _steadystate_power(A, ss_args); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 863, in _steadystate_power; v = v / la.norm(v, np.inf); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/scipy/linalg/misc.py"", line 137, in norm; a = np.asarray_chkfinite(a); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/numpy/lib/function_base.py"", line 1233, in asarray_chkfinite; ""array must not contain infs or NaNs""); ValueError: array must not contain infs or NaNs. ----------------------------------------------------------------------; Ran 561 tests in 576.175s. FAILED (SKIP=19, errors=1); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/862:100,test,tests,100,https://qutip.org,https://github.com/qutip/qutip/issues/862,7,"['log', 'test']","['log', 'test', 'tests']"
Testability,"I did this previously a handful of commits ago in b7df1b5, but the; tolerances chosen there weren't ideal. This is only especially relevant for cases where we have to use generic; eigenvalue solvers in place of Hermitian ones (e.g. when the Hermitian; ones have temperamental segfaults). I ran test_diag_liou_mult for all; dimensions from 2 to 99 inclusive 2000 times, and measured the maximum; absolute and relative tolerance for each case. I found that 3 times out; of 2000 the absolute tolerance exceeded 1e-10, and 12 times out of 2000; the relative tolerance exceeded 1e-7. The max values seen were 4.24e-10; and 3.12e-7 respectively. This updates the tolerances to 1e-9 (absolute) and 1e-6 (relative),; which still seem like reasonable tolerances, and should ensure that; we're testing correctly. See also #1474.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1486:784,test,testing,784,https://qutip.org,https://github.com/qutip/qutip/pull/1486,1,['test'],['testing']
Testability,"I followed instruction on http://qutip.org/docs/4.1/installation.html and used pip to install qutip in my python3.5.2 virtualenv directory. All required packages listed under ""General Requirements"" were also installed. pip commands completed fine. I then cd into a directory peer to ""python3.5.2 virtualenv directory"" and launched jupyter notebook. Ran two import commands. Both failed. Any suggestions on how to debug these failures? I restarted firefox and jupyter notebook several times. 1. ""import qutip.testing as qt"" to verify installation; lib/python3.5/site-packages/qutip/__init__.py; 169 ; 170 # core; --> 171 from qutip.qobj import *; 172 from qutip.states import *; 173 from qutip.operators import *. lib/python3.5/site-packages/qutip/qobj.py; 58 import qutip.settings as settings; 59 from qutip import __version__; ---> 60 from qutip.fastsparse import fast_csr_matrix, fast_identity; 61 from qutip.cy.ptrace import _ptrace; 62 from qutip.permute import _permute. lib/python3.5/site-packages/qutip/fastsparse.py; 35 from scipy.sparse import (_sparsetools, isspmatrix, isspmatrix_csr,; 36 csr_matrix, coo_matrix, csc_matrix, dia_matrix); ---> 37 from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; 38 getdtype, isscalarlike, IndexMixin, get_index_dtype); 39 from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning. ImportError: cannot import name 'IndexMixin'. 2. ""from qutip import *""; lib/python3.5/site-packages/qutip/__init__.py in <module>; 46 __IPYTHON__; ---> 47 qutip.settings.ipython = True; 48 except:. AttributeError: module 'qutip' has no attribute 'settings'. During handling of the above exception, another exception occurred:. AttributeError Traceback (most recent call last); <ipython-input-2-82c62ef8635d> in <module>; ----> 1 from qutip import *. lib/python3.5/site-packages/qutip/__init__.py in <module>; 47 qutip.settings.ipython = True; 48 except:; ---> 49 qutip.settings.ipython = False; 50 . AttributeError: module",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1018:508,test,testing,508,https://qutip.org,https://github.com/qutip/qutip/issues/1018,1,['test'],['testing']
Testability,"I have managed to get everything moved over to c++. Should address #647. There are still a few issues to address, but the tests pass on unix based systems. - CFLAGS need to be set for visual studio builds.; - zspmv src files need to be platform dependent (i.e. win/unix versions). This is mainly due to a few minor variations in how compiler hinting is done. No big deal. Also, when moving to openmp, visual studio uses v2.0, which is a bit dated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/648:122,test,tests,122,https://qutip.org,https://github.com/qutip/qutip/pull/648,1,['test'],['tests']
Testability,"I have tried to modify the grape_unitary() function in [grape.py](https://github.com/qutip/qutip/blob/master/qutip/control/grape.py) also to accommodate open quantum systems. One can use it to generate time varying fields for synthesising unitaries for them.; I have tried to run it for the same system as in this [notebook](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-grape-cnot.ipynb).; > I have run into a problem as to some sets of collapse operators give spurious overlap values. The code seems to work well for the closed system, though it is slower than the original [notebook](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-grape-cnot.ipynb). ; [The code](https://www.dropbox.com/sh/cag7q460a4macw6/AABxPWkpwQBfDv6pt4R2vNg5a?dl=0); I know that qutip has another implementation of GRAPE (along with CRAB) in this [file](https://github.com/qutip/qutip/blob/master/qutip/control/pulseoptim.py) and some others in [control](https://github.com/qutip/qutip/blob/master/qutip/control) folder. But it seemed too dense with logic for me to modify it. Hence I modified [grape.py](https://github.com/qutip/qutip/blob/master/qutip/control/grape.py).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1031:1072,log,logic,1072,https://qutip.org,https://github.com/qutip/qutip/issues/1031,1,['log'],['logic']
Testability,"I just did a fresh instlal of qutip today and ran the tests. mcsolve (and mcsolve_f90) tests involving collapse operators fail. Probably this is due to a recent change in the code where averaging of states is turned off by default for the solver:. > commit fb40b4675bb454089a08087c64a07f83be44cd99; > Author: Robert Johansson jrjohansson@gmail.com; > Date: Mon Aug 5 11:24:26 2013 +0900; > ; > do not average states by default. I think this change in general involves a risk of not being backwards compatible with a lot of old code. What do you think?. Cheers, Arne",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/37:54,test,tests,54,https://qutip.org,https://github.com/qutip/qutip/issues/37,2,['test'],['tests']
Testability,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/issues/1750,4,['test'],"['test', 'testing']"
Testability,"I think it will be so helpful to introduce composite Hamiltonian to qutip ; It used frequently as in jaynes cumming model; I inspired it from qit toolbox; http://qit.sourceforge.net/docs/html/; My function ; Not need nested list of ascending ordered Hamiltonians. Function found under ; Utils.Op_list ; That will so helpful in future to introduce Hamiltonian models. ```python; import numpy as np; def _cmpst(op,dim):; dL=dim[:op[1]]; if len(dL)==0:; opL=1; else:; dL=np.prod(dL); opL=np.eye(dL); dR=dim[op[1]+1:]; if len(dR)==0:; opR=1; else:; dR=np.prod(dR); opR=np.eye(dR); fop=np.kron(np.kron(opL,op[0]),opR); return(fop). def composit_ham(opl,dim):; assert max([opl[i][1] for i in range(len(opl))])<len(dim),""some operator excit outsite range od lattice""; dm=np.prod(dim); opf=np.zeros([dm,dm],dtype='complex128'); for op in opl:; opf+=_cmpst(op,dim); return opf . """"""; >>> ham1=np.array([[1,2],[3,4]]); >>> ham2=np.array([[5,6],[7,8]]). >>> composit_ham([(ham1,0),(ham2,1)],[2,2]); array([[ 6.+0.j, 6.+0.j, 2.+0.j, 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 2.+0.j],; [ 3.+0.j, 0.+0.j, 9.+0.j, 6.+0.j],; [ 0.+0.j, 3.+0.j, 7.+0.j, 12.+0.j]]); if put 1 in dim list it just like above ; >>> composit_ham([(ham1,0),(ham2,2)],[2,1,2]); array([[ 6.+0.j, 6.+0.j, 2.+0.j, 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 2.+0.j],; [ 3.+0.j, 0.+0.j, 9.+0.j, 6.+0.j],; [ 0.+0.j, 3.+0.j, 7.+0.j, 12.+0.j]]); two Hamiltonian separtated by identity operator; ham1 at position 1(0); identiy operator of dimension 2*2 at position 2(1); ham2 at position 3(2); >>> composit_ham([(ham1,0),(ham2,2)],[2,2,2]); array([[ 6.+0.j, 6.+0.j, 0.+0.j, 0.+0.j, 2.+0.j, 0.+0.j, 0.+0.j,; 0.+0.j],; [ 7.+0.j, 9.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 2.+0.j, 0.+0.j,; 0.+0.j],; [ 0.+0.j, 0.+0.j, 6.+0.j, 6.+0.j, 0.+0.j, 0.+0.j, 2.+0.j,; 0.+0.j],; [ 0.+0.j, 0.+0.j, 7.+0.j, 9.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,; 2.+0.j],; [ 3.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 9.+0.j, 6.+0.j, 0.+0.j,; 0.+0.j],; [ 0.+0.j, 3.+0.j, 0.+0.j, 0.+0.j, 7.+0.j, 12.+0.j, 0.+0.j,; 0.+0.j],; [ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1412:655,assert,assert,655,https://qutip.org,https://github.com/qutip/qutip/issues/1412,1,['assert'],['assert']
Testability,"I think there's been some form of merge conflict in `qutip.testing` - for one, it looks like the tests are intended to run twice (once under `pytest` and once under `nose`), and secondly it refers to the name `qset`, which isn't defined.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1158:59,test,testing,59,https://qutip.org,https://github.com/qutip/qutip/issues/1158,2,['test'],"['testing', 'tests']"
Testability,"I think we should move the qutip/benchmark from qutip repo to its on repository, say qutip-benchmarks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/159:33,benchmark,benchmark,33,https://qutip.org,https://github.com/qutip/qutip/issues/159,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,I updated the use of Iterable and now there is no warning for it in the tests mentioned in #1003.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1007:72,test,tests,72,https://qutip.org,https://github.com/qutip/qutip/pull/1007,1,['test'],['tests']
Testability,"I want to use parallel.parfor to speed up the calculation, but the parfor function seems not working on windows. I have installed the qutip and other packages. And I have tested my code on linux based python, it works well. So I wonder if anyone can tell me why and how to fix this problem? Thanks.; The following is my test code.; ```python; from qutip import *; import numpy as np; import matplotlib.pyplot as plt; import matplotlib; import time. L = 5; gamma = np.linspace(0, 1, L); Population = np.zeros(L); def evolution(gamma,Omega=1, omega=1):; H = Omega*sigmaz() + omega*sigmax(); result = mesolve(H, basis(2,1), np.linspace(0, np.pi/2/omega, 200), [np.sqrt(gamma)*sigmam()], [sigmaz()]); return result.expect[0][-1]; result = parfor(evolution, gamma,Omega=1.0, omega=1.0)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/849:171,test,tested,171,https://qutip.org,https://github.com/qutip/qutip/issues/849,2,['test'],"['test', 'tested']"
Testability,"I was helping someone with an install on windows 7 yesterday.; We were testing using a notebook, and it worked fine except the version_table. The first error was resolved by installing ipython parallel. Still after that it was failing with something like key 'ncpus' missing. Sorry for not supplying exact errors. I could ask the user to post them if necessary. @nonhermitian is #421 likely to resolve this? Even if say they don't have win32com or comtypes installed?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/423:71,test,testing,71,https://qutip.org,https://github.com/qutip/qutip/issues/423,1,['test'],['testing']
Testability,"I was trying to figure out why tests on #943 and #942 were failing for MacOS and could pin-point it down to the `qutip.superop_reps.to_kraus` function. The test `tests.test_superop_reps.test_ChoiKrausChoi` leads to the same malloc error with the message,; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; Investigating more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944:31,test,tests,31,https://qutip.org,https://github.com/qutip/qutip/issues/944,3,['test'],"['test', 'tests']"
Testability,"I'm asserting that two operators are almost equal, and implementing a __round__ method for Qobj would be useful in this regard.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/982:4,assert,asserting,4,https://qutip.org,https://github.com/qutip/qutip/issues/982,1,['assert'],['asserting']
Testability,"I'm curious if this [expm-vector product](http://eprints.ma.man.ac.uk/1591/) I implemented in scipy would speed up the `qutip.states.coherent(..., method='operator')` function? Maybe this could be checked after the unit tests with TravisCI are sorted out.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/84:220,test,tests,220,https://qutip.org,https://github.com/qutip/qutip/issues/84,1,['test'],['tests']
Testability,"I'm trying to run qutip's test suite locally on my Macbook. From a clean checkout of the `master` branch, I'm doing the following:. ~~~; conda create -q -n qutip_testing_env -y python=3.7; conda install -n qutip_testing_env -y blas=*=openblas numpy scipy nose cython ipython pytest; mkdir qutip_testing; cd qutip_testing; rm -rf /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip*; rm -rf ../build ../dist/ ../qutip.egg-info/; (cd ../ && /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/bin/python setup.py install); /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/bin/python -m qutip.about; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/bin/nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; ~~~. The resulting output is:; ~~~; ...; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+d377c997; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: None; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+; d377c997-py3.7-macosx-10.9-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated u",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:26,test,test,26,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['test'],['test']
Testability,"I've been playing around with larger systems recently; when I started out ptrace had a memory issue and couldn't handle what I was doing, so I had written a home-made version to do it. Recently I ended up doing the ptrace with the fixed built-in function and I found it to be much slower. I did some testing with my new function. At least on the machine I'm running on, with 9+ qubits it's about 10x faster for calculating a partial trace on a density matrix. If you're starting out with a ket, you can go even faster, an additional 5x improvement: (test code below); ```; Running time (ms/trace); 2 3 4 5 6 7 8 9 10 qubits; ptrace (dm) 0.4 0.3 0.3 0.3 0.6 1.9 6.6 33.4 137.9; new func (dm) 0.5 0.4 0.4 0.4 0.5 0.7 1.0 2.8 13.1 ; ptrace (ket) 0.6 0.5 0.5 0.5 0.9 2.7 8.5 37.2 167.7; new func (ket) 0.5 0.4 0.4 0.4 0.5 0.6 0.9 1.0 3.2 ; sum((rho-rho).norm()); dm 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ket 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ```. My new version is pretty simple, using numpy's built-in ndarray routines. I've looked at the code for ptrace and it's a bit opaque to me; at the moment I don't feel quite up to modifying it, so I'm just putting up the code I've used instead of doing a pull request. My new function is here:; ```; def ptracealt(rho,qkeep) :; rd = rho.dims[0]; nd = len(rd); qkeep = list(sort(qkeep)); dkeep = (np.array(rd)[qkeep]).tolist(); qtrace = list(set(np.arange(nd))-set(qkeep)); dtrace = (np.array(rd)[qtrace]).tolist(); if isket(rho) :; vmat = (rho.full(); .reshape(rd); .transpose(qkeep+qtrace); .reshape([prod(dkeep),prod(dtrace)])); rhomat = vmat.dot(vmat.conj().T); else :; rhomat = np.trace(rho.full(); .reshape(rd+rd); .transpose(qtrace+[nd+q for q in qtrace]+qkeep+[nd+q for q in qkeep]); .reshape([prod(dtrace),prod(dtrace),prod(dkeep),prod(dkeep)])); return Qobj(rhomat,dims=[dkeep, dkeep]); ```; and the test code here: ; ```; Nqmax=10; ntest = 100; trdiff = np.zeros([2,Nqmax-1]); ttr = np.zeros([4,Nqmax-1]); for nd in range(2,Nqmax+1) :; r0 = [ rand_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:300,test,testing,300,https://qutip.org,https://github.com/qutip/qutip/issues/1076,2,['test'],"['test', 'testing']"
Testability,ILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; ___________________________________________________________________,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7407,test,tests,7407,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"If the initial state was found to be of type 'oper', no further testing was done in initialisation of mesolve on the dimensions. For example, if a user incorrectly created a density matrix, such as by doing; ```python; tensor(basis(20, 0), qeye(20)/20); ```; (presumably intending `basis(20, 0).proj()` or similar), it would have a type of 'oper' inside Qobj, and mesolve would recognise it as a ""proper"" density matrix, even though the shape was actually incorrect. Such an object would get passed down into the C layer, which does no shape checking, without having its shape explicitly tested, and eventually could cause a segfault in the matrix multiplication routine. The correct check in this setup is to test the shapes when passed into `mesolve`, if this is possible. If the Hamiltonian/Liouvillian is generated by a Python callable, we have to test every time the time-dependence function is called. A user could make a pathalogical function that changes its dimensions on different times, and we cannot allow a segfault. Fix qutip/qutip#1456",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1459:64,test,testing,64,https://qutip.org,https://github.com/qutip/qutip/pull/1459,4,['test'],"['test', 'tested', 'testing']"
Testability,"If; ```python; qutip.testing.run(); ```; was called twice in the same Python session, then cases where a consumable iterator (such as `itertools.permutations` or `itertools.chain`) was used in the test parametrisation would fail on subsequent runs. This is because the iterator is consumed when the module is loaded, and cannot be re-run after. This was not caught in CI because naturally CI only runs the testing suite once in a session.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1430:21,test,testing,21,https://qutip.org,https://github.com/qutip/qutip/pull/1430,3,['test'],"['test', 'testing']"
Testability,Ignore deprecation warnings from pxyimport in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2287:46,test,tests,46,https://qutip.org,https://github.com/qutip/qutip/pull/2287,1,['test'],['tests']
Testability,Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1797:75,test,tests,75,https://qutip.org,https://github.com/qutip/qutip/pull/1797,1,['test'],['tests']
Testability,Ignore dnorm tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/881:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/881,1,['test'],['tests']
Testability,Implement and test new version of process fidelity,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1708:14,test,test,14,https://qutip.org,https://github.com/qutip/qutip/pull/1708,1,['test'],['test']
Testability,Implement and test process fidelity,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1712:14,test,test,14,https://qutip.org,https://github.com/qutip/qutip/pull/1712,1,['test'],['test']
Testability,"Implements the changes mentioned in #1203. The `qutip.graph` functions are pure mathematical functions which are beyond the purview of the package. Most of them have already been merged into `scipy.sparse.csgraph`, so we now move to using those and mark the functions as deprecated. Only two functions are actually used, and they're not even currently tested. `weighted_bipartite_matching` is not present in `scipy`, but is still marked as deprecated because we can move it into being an internal-only function, or simply remove the code that depends on it since those paths are not tested. This will allow the removal of a good amount of Cython code, and simplify maintenance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1206:352,test,tested,352,https://qutip.org,https://github.com/qutip/qutip/pull/1206,2,['test'],['tested']
Testability,Improve coverage of states and operators tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1578:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/1578,1,['test'],['tests']
Testability,Improve mcsolve's `test_super_H` test tolerance.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2344:33,test,test,33,https://qutip.org,https://github.com/qutip/qutip/pull/2344,1,['test'],['test']
Testability,Improved error handling in stats and optimconfig and changes to test out files:,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/301:64,test,test,64,https://qutip.org,https://github.com/qutip/qutip/pull/301,1,['test'],['test']
Testability,"In #1332 there is a huge drop in reported test coverage by Coveralls. This is because large tracts of the most-tested Python files were either severely reduced in length, or converted to Cython files, and it seems that Coveralls does not correctly handle Cython; it reports the existence of a `x.py` file for every `x.pyx` file that exists, with the `.py` file having 7 lines, all of which are apparently untested. The new data-layer types _are_ tested albeit not as completely as they will be once they're finished, but Coveralls has reported a huge drop in coverage. I don't know if any coverage estimators exist for Cython (I would expect not due to their compiled nature), but it's perhaps something we should consider. Also, Coveralls counts the test files as part of its coverage indicator. By my rough count, there are 42,223 SLOC in `qutip` (i.e. excluding comments and whitespace but unfortunately including docstrings), of which 11,259 are in `qutip/tests`. Aside from a couple of skipped tests, 100% of the lines in `qutip/tests` will be run, so if we produce a modified coverage report, having 61% of the SLOC covered in _all_ of `qutip` is equivalent to; ```python; >>> (0.61*42_223 - 1.00*11_259) / (42_223 - 11_259); 0.4681898; ```; **46.8% true coverage**. We probably could really do with a concerted effort to add more tests of all the little nuances of the code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1339:42,test,test,42,https://qutip.org,https://github.com/qutip/qutip/issues/1339,8,['test'],"['test', 'tested', 'tests']"
Testability,"In #1339 I pointed out that the test files were being incorrectly counted in the coverage statistics when running on Travis. This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally ver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/1347,1,['test'],['test']
Testability,"In `test_interpolate`, `qzero` was used as `mcsolve`'s collapse operator. Due to numerical error in the interpolation method, `mcsolve` can detect a collapse, but a collapse for a null operator cause a a division by zero. This sometime made our tests fails. By changing the collapse operator to `qeye`, the evolution, thus the test is unaffected, but it no longer randomly fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1645:245,test,tests,245,https://qutip.org,https://github.com/qutip/qutip/pull/1645,2,['test'],"['test', 'tests']"
Testability,"In certain cases in matrices containing values smaller than the tolerance for Hermicity, a matrix can be considered Hermitian even if its transpose does not have the same sparsity pattern as itself. The previous version of this function would give false negatives in these circumstances, whereas now we fall back on the more computationally and memory intensive version of constructing the transpose completely, and comparing element-wise. We offset some of this slowdown by optimising the floating-point comparisons to avoid calls to `sqrt` (via `abs`), and by removing a redundant test of the sparsity pattern in the inner loop. Fixes #1350 for the `master` branch, but still to do for `dev.major`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1352:583,test,test,583,https://qutip.org,https://github.com/qutip/qutip/pull/1352,1,['test'],['test']
Testability,"In certain circumstances, `zcsr_isherm` can give a `False` negative. This is usually masked by the `auto_tidyup` option being turned on. Reproduce:; ```python; >>> import numpy as np; >>> import scipy.sparse; >>> import qutip; >>> x = scipy.sparse.csr_matrix(np.array([[1, 1e-15j], [0, 1]])); >>> bool(qutip.cy.spmath.zcsr_isherm(x, 1e-12)); False; ```; Up to the tolerance specified (`1e-12`), the given matrix _is_ Hermitian, so it should return `True`. This happens when a small non-zero value (lower than the tolerance) is compared to a zero. This is because the structure test in `zcsr_isherm` assumes that for Hermicity to hold, there _must_ always be an explicitly stored corresponding element for each entry, however clearly this isn't always the case. It hasn't appeared before because we always have `auto_tidyup` turned on with a sufficiently large tolerance that these values would be removed by almost all operations which could have introduced this disparity (mostly matrix multiplication). (I'll fix this on both the `master` branch and on `dev.major`, this is just for posterity)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1350:577,test,test,577,https://qutip.org,https://github.com/qutip/qutip/issues/1350,1,['test'],['test']
Testability,"In my earlier PR, I had forgotten to add a check for trace preservation in the `iscptp` property. This has now been added, along with test cases for the new `istp` and `iscp` properties. I'm not entirely satisfied with importing within the property bodies, but I'm not sure how else to avoid circular dependencies.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/94:134,test,test,134,https://qutip.org,https://github.com/qutip/qutip/pull/94,1,['test'],['test']
Testability,"In response to issue #1210 , added a quick fix for the add_1q_gates so that it now includes the ""end"" qubit (specified by the end argument). I also added a test in test_add_gates in test_qubitcircuit.py to cover this issue. The function now applies the 1 qubit gate to every qubit in [start, end] (0-indexed), start and end inclusive. This should resolve #1210",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1211:156,test,test,156,https://qutip.org,https://github.com/qutip/qutip/pull/1211,1,['test'],['test']
Testability,"In some rare case, the matrix obtain from random_objects.rand_stochastic would have an empty row or column. This would cause the automated test to fail (about 0.8% of the time.). Small fix that ensure the matrix always has a least 1 element on each rows and columns.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/942:139,test,test,139,https://qutip.org,https://github.com/qutip/qutip/pull/942,1,['test'],['test']
Testability,"In writing the documentation for #332, I noticed that the chi-matrix produced for several test channels was incorrect due to my placing the dagger in the wrong place. I apologize for that mistake--- this PR should fix it, and add unit tests that ensure that the chi matrix produced by to_chi agrees with that for some known Pauli channels and a unitary rotation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/337:90,test,test,90,https://qutip.org,https://github.com/qutip/qutip/pull/337,2,['test'],"['test', 'tests']"
Testability,Include the improvements made on #1208. These changes base from #1209 and #1212: ; - The controlled version of the gates; - Changes in QubitCircuit.propagator(); - Tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1225:164,Test,Tests,164,https://qutip.org,https://github.com/qutip/qutip/issues/1225,1,['Test'],['Tests']
Testability,Increase subsys test tolerance,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/435:16,test,test,16,https://qutip.org,https://github.com/qutip/qutip/pull/435,1,['test'],['test']
Testability,Increase test reliability,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2337:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/2337,1,['test'],['test']
Testability,"Introduce a common ODE integrator interface for qutip's solver. Presently qutip's solver use `scipy.integratre.ode`'s zvode ODE solver, which support `adams` and `bdf` methods.; These are great method in most case, but not always optimal.; This PR introduce, a common interface to allow other ODE method to be used by solvers.; It also add 2 new scipy ODE solvers: `lsoda` and `dop853`.; `lsoda` detect if the system is stiff and switch between `adams` and `bdf`.; `dop853` is a 8th order Runge-Kutta method. The `Integrator` use `Data` as state and return the state as a pair `(t, state)`.; Often solver's run only compute the expectation values, so there is no need to create a `Qobj`.; Returning the time with the state is for `mcsolve` which have the integration advancing with one internal step and the run loop is cleaner in solver. . I did some benchmark and `adams` method is often the best scipy method.; Sparse system: loglog plot of time in function of system size.; ![image](https://user-images.githubusercontent.com/17770236/131005186-aa51aa86-8ecf-4c03-8ba4-eeddcd65af30.png). Dense time-dependent system.; ![image](https://user-images.githubusercontent.com/17770236/131005465-5c0a9e8e-9ec7-4409-8cda-70aab5129e1f.png). *`vern7`, `vern9`, and `diag` method will be introduced in another PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643:852,benchmark,benchmark,852,https://qutip.org,https://github.com/qutip/qutip/pull/1643,2,"['benchmark', 'log']","['benchmark', 'loglog']"
Testability,"Is there any performance reason why we should not compile the extensions using C++ ?. We are having issues with the conda forge packages:; conda-forge/qutip-feedstock#16; I am sure than this problem would not occur if we were compiling using MS compilers.; We are receiving lots of support requests on the Google group for help installing on Windows; We do not have a solution for python>=3.5 on Windows. I posted a question on the Cython help group asking about accessing complex functions on Windows. One suggestion was to try C++, importing functions from `complex` rather than `complex.h`. I made a small test project that imported `conj` and it compiled using MS compilers and worked on Windows 10 with both Python 2.7 and 3.5. We only have one small C source file. I guess it could be rewritten in C++ quite easily.; I can do further tests to check performance if we consider C++ compilation is an option for qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647:609,test,test,609,https://qutip.org,https://github.com/qutip/qutip/issues/647,2,['test'],"['test', 'tests']"
Testability,Issue #905 and #892; Numpy Requirements updated to 1.12 from 1.8 and Optional Dependency for Matplotlib added.; MacOS test is failing as mentioned in #963,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/967:118,test,test,118,https://qutip.org,https://github.com/qutip/qutip/pull/967,1,['test'],['test']
Testability,"It could be nice to try interactive graphics using [Bokeh](https://bokeh.pydata.org/en/latest/) and QuTiP. I am not familiar with the tool, [this](https://github.com/bokeh/bokeh-notebooks) could be a starting point. ; These notebooks could be added to the QuTiP website at [qutip.org/tutorials](http://qutip.org/tutorials).; Maybe a first step could be to start from existing notebooks, such as the beautiful [Wigner functions gallery](https://nbviewer.jupyter.org/urls/raw.github.com/jrjohansson/qutip-lectures/master/Lecture-16-Gallery-of-Wigner-functions.ipynb)) and its Schrödinger cat states that define also QuTiP logo. Also, in the future some of current and upcoming research material by @quantshah could provide a wow effect if interactive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1529:620,log,logo,620,https://qutip.org,https://github.com/qutip/qutip/issues/1529,1,['log'],['logo']
Testability,"Just a minor update where the diags of the sparse matrix are grabbed directly rather than converting the matrix to dense form. For larger density matrices, this method outperforms the dense method due to the time it takes to convert the format and do the multiplication.; - Also added more Wigner unit tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/527:302,test,tests,302,https://qutip.org,https://github.com/qutip/qutip/pull/527,1,['test'],['tests']
Testability,"L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4087,test,tests,4087,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"Last week we added numpy 2 support but did not update the requirements in `setup.cfg`. This update dependency to build using numpy 2 instead of oldest-supported-numpy.; I also increased the minimum requirements for matplotlib and scipy to version tested. I added more test using numpy 2, only one tests build and run using numpy 1.X.; I added more windows / mac tests. Using these os for testing numpy versions and no cython.; `cvxopt` (`dnorm`) does not run with numpy 2 yet, so it's only tested with older numpy version. Fix sqrtm needing copy. This mean that the test intended to run with numpy 2 previouly did not...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2457:247,test,tested,247,https://qutip.org,https://github.com/qutip/qutip/pull/2457,7,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,Less strict codeclimat logic,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1201:23,log,logic,23,https://qutip.org,https://github.com/qutip/qutip/pull/1201,1,['log'],['logic']
Testability,"Made a new fork, applied change to super_to_choi which ought to fix the efficient subsystem channel application tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/85:112,test,tests,112,https://qutip.org,https://github.com/qutip/qutip/pull/85,1,['test'],['tests']
Testability,Make testing more robust especially for random objects,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:5,test,testing,5,https://qutip.org,https://github.com/qutip/qutip/issues/1268,1,['test'],['testing']
Testability,"Mark some of the slower test to be skipped when running. `qutip.testing.run()`: about 5 min.; `qutip.testing.run(full=True)`: about 30 min. Keep test for every function: stochastic only test the default solver... ; Also speed up some test by limiting the tests (shorter time for solver, less ""pixel"" for wigner). Build on top of #1131, must be merged after that PR.; Should solve #1147",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1151:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/pull/1151,7,['test'],"['test', 'testing', 'tests']"
Testability,Marked test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1151:7,test,test,7,https://qutip.org,https://github.com/qutip/qutip/pull/1151,1,['test'],['test']
Testability,Maybe this:. ```; import qutip.testing as qt; qt.run(); ```. ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/410:31,test,testing,31,https://qutip.org,https://github.com/qutip/qutip/issues/410,1,['test'],['testing']
Testability,"Measurements would return a `None` state when the probability is 0.; Due to recent changes which affected operation order, a test for `CircuitSimulator` would result in a probability of `~1e-33`. Not being 0, this resulted in an unexpected possible result of the circuit simulation, breaking tests for `dev.major`. I changed the test from `p != 0` to `p >= tol` with `tol` being set in core's settings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1656:125,test,test,125,https://qutip.org,https://github.com/qutip/qutip/pull/1656,3,['test'],"['test', 'tests']"
Testability,Merge pull request #1696 from hodgestar/fix/test-numpy-versions,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1701:44,test,test-numpy-versions,44,https://qutip.org,https://github.com/qutip/qutip/pull/1701,1,['test'],['test-numpy-versions']
Testability,Merged the PR about non-int clebsch wihtout waiting for a test. Add one here,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1218:58,test,test,58,https://qutip.org,https://github.com/qutip/qutip/pull/1218,1,['test'],['test']
Testability,"Metrics tests failing ""multiple values for argument 'name'""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/issues/872,1,['test'],['tests']
Testability,Milstein scheme for SME and a cool example for testing of a stochastic solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:47,test,testing,47,https://qutip.org,https://github.com/qutip/qutip/issues/35,1,['test'],['testing']
Testability,Modified 4op 2t correlator for hamiltonians with time dependence; works with cython or function td format. Added relevant test functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/206:122,test,test,122,https://qutip.org,https://github.com/qutip/qutip/pull/206,1,['test'],['test']
Testability,Modified QubitCircuit class to use just a single gate list and fixed the unit tests accordingly,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/148:78,test,tests,78,https://qutip.org,https://github.com/qutip/qutip/pull/148,1,['test'],['tests']
Testability,More stable run_from_experiment test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2419:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/2419,1,['test'],['test']
Testability,"Most of the time when I search on Google for `qutip [something]` first hits are on the old documentation:. http://qutip.googlecode.com/svn/doc/2.0.0/html/index.html#. This is misleading, since it is:; - not up to date,; - makes impression that it is an abandoned project (since there is ""Change Log; Version 2.0.0 [SVN-2354](June 01, 2012)""). How about adding a header ""Check the new site (Version 2.2.) - http://qutip.org/"" or something like that (too make newcomers less confused)?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516:295,Log,Log,295,https://qutip.org,https://github.com/qutip/qutip/issues/1516,1,['Log'],['Log']
Testability,"Mostly by replacing explicit loops with vectorized numpy expressions. For a simple test Hamiltonian with a single N-level bosonic operator, it is faster by a factor of ~40 for N=100 (Hamiltonian 100x100), i.e., it takes 12 seconds instead of 460 seconds. The speedup improves about linearly with N for this system. I checked for some test systems that the results are the same as before. The only difference in interface is that c_ops is [] by default, and c_ops=None is not accepted anymore. This seems to me more in line with the rest of qutip, but could be changed back trivially.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/336:83,test,test,83,https://qutip.org,https://github.com/qutip/qutip/pull/336,2,['test'],['test']
Testability,Move qutip/benchmark out of main qutip repository,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/159:11,benchmark,benchmark,11,https://qutip.org,https://github.com/qutip/qutip/issues/159,1,['benchmark'],['benchmark']
Testability,Move tests to GitHub Actions,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['tests']
Testability,Move tests to pytest,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1164:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1164,1,['test'],['tests']
Testability,"Moved the loops to cython, and reworked the indices selection. Now 2x - 100x+ faster, depending on size. This pull also switches the fast_csr_matrix multiplication to our own version. This eliminates the need to call A.prune() after the SciPy matmat call. We also handle the nnz=0 case better. Still need to do:; - ptrace unit tests; - move old ptrace to a 'legacy' folder for testing against.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/634:327,test,tests,327,https://qutip.org,https://github.com/qutip/qutip/pull/634,2,['test'],"['testing', 'tests']"
Testability,"Moved the openmp, mkl, no cython tests to python 3.8; Also added (temporaly?) a mac test on python 3.8.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1214:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/1214,2,['test'],"['test', 'tests']"
Testability,New methods for single stochastic jump operator are implemented:; - 1/2 order predictor-corrector euler-maruyama; - 1 order semi-implicit Milstein; - 3/2 order explicit and semi-implicit Taylor 1.5. Tests for all the new (and old) methods are added. There is a corresponding notebook which shows that the solvers achieve (or exceed) their order of convergence.; https://github.com/qutip/qutip-notebooks/pull/37; Here is the scaling of solver error as a function of stepsize:; ![error_scaling_y_an](https://cloud.githubusercontent.com/assets/4971779/18120795/128dcbe6-6f6a-11e6-8b36-8b16fb73f35a.png). Bug: fast-milstein modifies input noise - fixed. The explicit Taylor 1.5 method and most of the coding is done by **Manuel Grimm** under supervision of **Niels Lörch** at University of Basel.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/529:199,Test,Tests,199,https://qutip.org,https://github.com/qutip/qutip/pull/529,1,['Test'],['Tests']
Testability,New notebook for testing Milstein is created,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/43:17,test,testing,17,https://qutip.org,https://github.com/qutip/qutip/pull/43,1,['test'],['testing']
Testability,"New schemes for the options. All options's default value can be set and seen in qutip.settings:; ```; >>> from qutip import settings; >>> settings.solver[""atol""] = 1e-10; >>> settings.core[""auto_tidyup""] = False; >>> settings.solver.mcsolve[""norm_tol""] = 1e-4; >>> settings.save(); >>> print(qutip.settings); qutip.settings.install:; debug : False; log_handler : 'default'; colorblind_safe : False; tmproot : '/home/eric/.qutip/coeffs'; mkl_lib : None; has_mkl : False; ipython : True; _logger : <Logger qutip.installsettings (WARNING)>; eigh_unsafe : False. qutip.settings.core:; auto_tidyup : False; auto_tidyup_dims : True; auto_herm : True; atol : 1e-12; auto_tidyup_atol : 1e-12; ...; ```. The main changes are; - `settings` is an object in `qutip/settings.py`.; - Actual options are accessed as dictionary values instead of attributes.; - `settings`'s values are read from qutiprc at import.; - Easy saving of settings; - `reset` function as described in documentation but not available yet.; - solver `Options` renamed and split, some options removed (`rhs_with_state`, ...). @jakelishman, I commented out most of the openmp stuff, I expect you to pass behind me and clean when you re-implement it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1337:497,Log,Logger,497,https://qutip.org,https://github.com/qutip/qutip/pull/1337,1,['Log'],['Logger']
Testability,New test for Milstein is resubmitted,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/44:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/44,1,['test'],['test']
Testability,No unit tests for control.pulse_optim methods,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/368:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/issues/368,1,['test'],['tests']
Testability,Norm tests for specialisations.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1635:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1635,1,['test'],['tests']
Testability,"Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1328:985,test,tests,985,https://qutip.org,https://github.com/qutip/qutip/pull/1328,1,['test'],['tests']
Testability,"Not really expecting anyone to fix this urgently, I am just recording some ideas, as I have spent a lot of time looking into this recently while try to build a conda package. Currently on Windows we compile under mingw. This is sub-optimal, according to various sources, including:; https://wiki.python.org/moin/WindowsCompilers; Python C extensions should be compiled using the same compiler that was used to compile the Python distro that is being used. Failing to do so can result in some strange behaviour. I have experienced issues with qutip tests hanging on Windows. Therefore it would clearly be beneficial if we could build qutip under MSVC. It is of particular interest now that we have a conda recipe that autobuilds for all the version, platform variations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/447:548,test,tests,548,https://qutip.org,https://github.com/qutip/qutip/issues/447,1,['test'],['tests']
Testability,"NotFoundError, ImportError) as e:. <string> in <module>. ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(self, fullname); 461 build_inplace=self.inplace,; --> 462 language_level=self.language_level); 463 return module. ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 if sys.version_info[0] >= 3:; --> 231 raise exc.with_traceback(tb); 232 else:. ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. ~\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . ~\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~\Anaconda3\lib\distutils\command\build_ext.py in run(self); 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 . ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extensions(s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914:5468,assert,assert,5468,https://qutip.org,https://github.com/qutip/qutip/issues/1914,1,['assert'],['assert']
Testability,Now it is an actual progressbar. It uses the '\r' character; in order to erase the entire line before each update. It works in the IPython notebook as well. Tested in 3.4. It should work in 2.7. Not sure about 2.6 (because of // division operator?),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121:157,Test,Tested,157,https://qutip.org,https://github.com/qutip/qutip/pull/121,1,['Test'],['Tested']
Testability,"Numpy 1.20 officially deprecated use of `np.int` and other things like `np.complex`. These were just thin aliases to Python types anyway, so that replacement is safe. Swap `float` and `complex` to `np.float64` and `np.complex128`; these still match Python precision (and standard double-precision floats), but more importantly we assume at all points in Cython code that we're dealing with double-precision arithmetic. Anything else would be a larger problem for us. In cases where `np.int` was used as a type check, we actually care more about checking for Integral typing, rather than specifically the int class; super weird constructs like; ```python; isinstance(np.int64(1), int) == False; ```; so taking indices out of an ndarry may lead to incorrect results when this sort of test is used. Better to use the abstract; ```python; isinstance(..., numbers.Integral); ```. See: https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1432:782,test,test,782,https://qutip.org,https://github.com/qutip/qutip/pull/1432,1,['test'],['test']
Testability,"OR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ===================================================== 51 deselected, 52 warnings,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30935,test,tests,30935,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"On my Mac (Mojave 10.14.5) the latest development version of qutip tests can fail at different points. . First, I run into an abort trap at ptrace. . Then, upon another run, I bumped into this other abort trap error ; ```; tests/test_superop_reps.py::TestSuperopReps::test_ChoiKrausChoi Fatal Python error: Aborted. Current thread 0x000000010b9155c0 (most recent call first):; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/superop_reps.py"", line 547 in to_kraus; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_superop_reps.py"", line 106 in test_ChoiKrausChoi; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/python.py"", line 166 in pytest_pyfunc_call; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/python.py"", line 1435 in runtest; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/runner.py"", line 131 in pytest_runtest_call; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/runner.py"", line 207 in <lambda>; File ""/min",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:67,test,tests,67,https://qutip.org,https://github.com/qutip/qutip/issues/1160,4,"['Test', 'test']","['TestSuperopReps', 'tests']"
Testability,"On my system the following tests fails:. Sparse: Symmetric Reverse Permute ... ERROR; Sparse: Nonsymmetric Reverse Permute ... ERROR; Sparse: Bandwidth ... ERROR. More detailed info:; # ; ## ERROR: Sparse: Symmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 73, in test_sparse_symmetric_reverse_permute; B=sparse_reverse_permute(x,perm,perm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Nonsymmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 89, in test_sparse_nonsymmetric_reverse_permute; B=sparse_reverse_permute(x,rperm,cperm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Bandwidth. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:27,test,tests,27,https://qutip.org,https://github.com/qutip/qutip/issues/73,3,['test'],"['test', 'tests']"
Testability,"OpenMP broken in current master, OpenMP tests worrying",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['test'],['tests']
Testability,"Openmp test on travis tend to hang at the calibration step.; The calibration function compute the matrix vector product with increasing size until the parallel version is faster or it give up. But on Travis, there is only 1 cpu, so the speed up is never observed and the calibration does not give up searching quickly enough. (Over 10min). In this PR:; - Skip calibration if only 1 cpu.; - Faster calibration by skipping some of the later size and testing only up to 100000 elements. (threshold around 1000 on my cpus); - Settings used in tests are fixed to use omp if compiled with it, even if slower. (thresh hold at 100)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1154:7,test,test,7,https://qutip.org,https://github.com/qutip/qutip/pull/1154,3,['test'],"['test', 'testing', 'tests']"
Testability,"Originally reported in #944. Tests seem to be failing for MacOS. We get errors like; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; The build is pretty much always failing, but sometimes passes. I think we only get the errors when tests are run, the functions work fine otherwise. I think someone tried pytest and still got same errors. So kind of a nasty one to investigate, but there might be an easy fix if we can work out what to do. I believe @nathanshammah has done some quite thorough investigation and could probably add to this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:29,Test,Tests,29,https://qutip.org,https://github.com/qutip/qutip/issues/963,2,"['Test', 'test']","['Tests', 'tests']"
Testability,PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7471,test,tests,7471,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,PPoly and Bspline accept real coeff + tested,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2397:38,test,tested,38,https://qutip.org,https://github.com/qutip/qutip/pull/2397,1,['test'],['tested']
Testability,Please add the 'test' target to setup.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/410:16,test,test,16,https://qutip.org,https://github.com/qutip/qutip/issues/410,1,['test'],['test']
Testability,Pow tests for data layer.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1622:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1622,1,['test'],['tests']
Testability,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1704:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/1704,3,['test'],['tests']
Testability,Propagator tests leave .pyx files,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/643:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/issues/643,1,['test'],['tests']
Testability,Proposed solution to #1433. See that issue/commit logs for more details on this PR.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1434:50,log,logs,50,https://qutip.org,https://github.com/qutip/qutip/pull/1434,1,['log'],['logs']
Testability,Ptrace tests specalisation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1744:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1744,1,['test'],['tests']
Testability,Ptrace tests specalisation and bug fix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1745:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1745,1,['test'],['tests']
Testability,Qtrl increase test tol,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/604:14,test,test,14,https://qutip.org,https://github.com/qutip/qutip/pull/604,1,['test'],['test']
Testability,Qtrl split unitary tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/600:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/600,1,['test'],['tests']
Testability,Qtrl test out directory auto-create sync fix,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/313:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/313,1,['test'],['test']
Testability,Qtrl unit tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/383:10,test,tests,10,https://qutip.org,https://github.com/qutip/qutip/pull/383,1,['test'],['tests']
Testability,"QuTiP 4.5.3 fails to build from source distribution on PyPI, e.g. on Windows:; ```; c1xx: fatal error C1083: Cannot open source file: 'qutip/cy/openmp/src/zspmv_openmp.cpp': No such file or directory; ```; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449:688,test,tests,688,https://qutip.org,https://github.com/qutip/qutip/pull/1449,2,"['log', 'test']","['log', 'tests']"
Testability,QuTiP installation test - FAILED test power-gmres,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/issues/1750,2,['test'],['test']
Testability,"QuTiP is currently distributed through both Anaconda's conda-forge channel (`conda install qutip`) and PyPI (`pip install qutip`).; It could be helpful to the maintainers to have the project also on the test channel of PyPI, https://test.pypi.org, testing the distribution before uploading a new release on the actual PyPI channel. The [instructions](https://packaging.python.org/guides/using-testpypi/) are straightforward. Placing this as a memo for v. 4.4. Testing this would be helpful also as we attempt the wheels configuration (#933), which, as I understood from @Ericgig, might not be so straightforward given the low-level calls that QuTiP makes in some functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:203,test,test,203,https://qutip.org,https://github.com/qutip/qutip/issues/992,5,"['Test', 'test']","['Testing', 'test', 'testing', 'testpypi']"
Testability,"QuTiP is currently incompatible with numpy 1.20. Tests will fail to even collect with an error such as; ```; AttributeError: 'numpy.ndarray' object has no attribute 'dag'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433:49,Test,Tests,49,https://qutip.org,https://github.com/qutip/qutip/issues/1433,1,['Test'],['Tests']
Testability,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1766:92,Test,Tested,92,https://qutip.org,https://github.com/qutip/qutip/issues/1766,1,['Test'],['Tested']
Testability,"ROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make su",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9487,test,test,9487,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:2212,assert,assert,2212,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['assert'],['assert']
Testability,RROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ==,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30856,test,tests,30856,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,Re-add scipy<1.5 test constraint,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1363:17,test,test,17,https://qutip.org,https://github.com/qutip/qutip/pull/1363,1,['test'],['test']
Testability,Re-enable all cvxpy and pyximport warnings on Python 3.10 and 3.11 tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2084:67,test,tests,67,https://qutip.org,https://github.com/qutip/qutip/pull/2084,1,['test'],['tests']
Testability,Re-enable test errors on ImportWarning,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2083:10,test,test,10,https://qutip.org,https://github.com/qutip/qutip/pull/2083,1,['test'],['test']
Testability,Recommended subset of tests for faster testing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/issues/1147,2,['test'],"['testing', 'tests']"
Testability,Reduce qutip import time by setting logger names,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1980:36,log,logger,36,https://qutip.org,https://github.com/qutip/qutip/pull/1980,1,['log'],['logger']
Testability,Reduce qutip import time by setting logger names (v5),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1981:36,log,logger,36,https://qutip.org,https://github.com/qutip/qutip/pull/1981,1,['log'],['logger']
Testability,"Referencing this : https://github.com/qutip/qutip-doc/pull/70. 1. Having manually compiled the changelog for v4.4.1 and v4.5.x today, I think that maybe we should try automating the release notes/changelogs with something like this : https://github.com/github-tools/github-release-notes; I'm attaching release notes generated by this for QuTiP.; [RELEASE_NOTES.txt](https://github.com/qutip/qutip/files/3728179/RELEASE_NOTES.txt). 2. We could also, in pursuit of having an automated release notes/changelog system start with making commits in more of a standard format, using some pre-decided keywords like [bugfix] or [improvement] in the commit message. I understand that this is a rather ambitious thing to say, but we can then use `grep` and `git log` itself to generate these in markdown. As a first step, I am proposing to use **Pull request /Issue** templates, something like this for instance : https://github.com/angular-translate/angular-translate/blob/master/.github/ISSUE_TEMPLATE.md; This way, all our Pull Requests and Issues will be homogeneously formatted.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1108:751,log,log,751,https://qutip.org,https://github.com/qutip/qutip/issues/1108,1,['log'],['log']
Testability,Remove Windows test suite warnings suppression.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2119:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/2119,1,['test'],['test']
Testability,"Remove `Coefficient.argument` which modify the object inplace for `Coefficient.replace` which return a modified copy.; `Copy` of string coefficient is optimized.; Initially from #1481, more discussion there. Some circular import in unrelated files have been moved inside function as they are causing problem in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1507:311,test,tests,311,https://qutip.org,https://github.com/qutip/qutip/pull/1507,1,['test'],['tests']
Testability,Remove duplicated test runners,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/1161,1,['test'],['test']
Testability,Remove duplicated tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2486:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/2486,1,['test'],['tests']
Testability,Remove logging utils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2146:7,log,logging,7,https://qutip.org,https://github.com/qutip/qutip/pull/2146,1,['log'],['logging']
Testability,Remove star import in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/726:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/726,1,['test'],['tests']
Testability,Removed hardcoded pulse generator num_waves from create_pulse_optimizer; Changed TRIANGLE pulse type to start from zero (to match the other periodic types); Added test that checks freq and num_waves pulse parameters are applied correctly in create_pulse_optimizer. resolves issue #412,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/415:163,test,test,163,https://qutip.org,https://github.com/qutip/qutip/pull/415,1,['test'],['test']
Testability,"Removes the `nose` test runners found in `qutip.testing.run()` in #1158. This isn't ready to be merged yet, I think - there's still references to `nose` in `setup.py`, and a comment in `test_qobj.py`, the context of which suggests that the tests are organised specifically for `nose`. I'm not familiar enough with the differences between `nose`, `pytest` and `unittest` to know how much of a problem the latter is, though.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1161,3,['test'],"['test', 'testing', 'tests']"
Testability,"Required due to changes in scipy 1.6.1. Using an explicit dtype will make matrix construction more robust. Fixes qutip Issue #1451. Tested on Debian unstable, with this patch tests/test_sparse.py now passes with scipy 1.6.1. **Description**. scipy 1.6.1 changed the API for constructing sparse matrices with `scipy.sparse.csr_matrix` (affecting the COO format). This caused qutip TestDicke tests in test_piqs.py (test_lindbladian, test_lindbladian_dims, test_liouvillian) to fail. . This patch avoids the problem by setting the dtype explicitly to np,complex128. . **Related issues or PRs**. fixes #1451. **Changelog**; Provide explicit dtype=np.complex128 when constructing sparse matrixes with csr_matrix. Required for working with scipy 1.6.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1452:132,Test,Tested,132,https://qutip.org,https://github.com/qutip/qutip/pull/1452,4,"['Test', 'test']","['TestDicke', 'Tested', 'tests']"
Testability,Restore steady and liouvillian unit test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/173:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/173,1,['test'],['test']
Testability,"Restructed the benchmark scripts so that matlab and qutip benchmarks can be run separately, and the comparison be done with two arbitrary benchmark results. The point of this is to make it possible to compare the benchmark results of two qutip versions, for example the last stable release and the current development code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/14:15,benchmark,benchmark,15,https://qutip.org,https://github.com/qutip/qutip/pull/14,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Rewrote `clebsch` function based on long integer fraction. Thus escaping the rounding error mentioned in #1141. Surprisingly it's a little faster than the float implementation. . Also added tests for the function. Closes #1141,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1142:190,test,tests,190,https://qutip.org,https://github.com/qutip/qutip/pull/1142,1,['test'],['tests']
Testability,"Rewrote sesolve, mesolve and mcsolve to use QobjEvo.; Compatible with previous version, solvers' test pass without modification. Feature/imporvement:; - state can be obtain as an argument as a vector or Qobj.; - expectation values also can be arguments.; - The system is saved in a object to be reuse.; - mcsolve is fully class based. (but the use as object is not documented); - s/mesolve follow a similar pattern to be easily made to class.; - Experimental: diagonalized mcsolve.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969:97,test,test,97,https://qutip.org,https://github.com/qutip/qutip/pull/969,1,['test'],['test']
Testability,Rtol for tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1709:9,test,tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/1709,1,['test'],['tests']
Testability,Run mac test without MKL,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2020:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/2020,1,['test'],['test']
Testability,Run mac tests without mkl,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2019:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/2019,1,['test'],['tests']
Testability,Running qutip tests is leaving behind rhs*.pyx files.; @nonhermitian I think you said you know which one(s); I guess it's quite easy to fix if I can pin-point the offender,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/601:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/issues/601,1,['test'],['tests']
Testability,"Running this code; ```; import qutip.testing as qt; qt.run(); ```; produces an error:; ```; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""qutip/__init__.py"", line 171, in <module>; from qutip.qobj import *; File ""qutip/qobj.py"", line 60, in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; File ""qutip/fastsparse.py"", line 406, in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); File ""qutip/cy/__init__.py"", line 1, in <module>; from qutip.cy.spmatfuncs import *; ImportError: No module named spmatfuncs; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/891:37,test,testing,37,https://qutip.org,https://github.com/qutip/qutip/issues/891,1,['test'],['testing']
Testability,"Running this code; import qutip.testing as qt; qt.run(); produces an error:. Monte-carlo: Collapse terms constant (str format) ... cl : Command line warning D9025 : overriding '/W3' with '/w'; cl : Command line warning D9025 : overriding '/Ox' with '/O1'; cqobjevo_compiled_coeff_130828459648281117.cpp; c:\anaconda\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; Creating library C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_130828459648281117.cp37-win_amd64.lib and object C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_130828459648281117.cp37-win_amd64.exp; Generating code; Finished generating code; cl : Command line warning D9025 : overriding '/W3' with '/w'; cl : Command line warning D9025 : overriding '/Ox' with '/O1'; cqobjevo_compiled_coeff_8398411180025011525.cpp; c:\anaconda\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; Creating library C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_8398411180025011525.cp37-win_amd64.lib and object C:\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\Users\Quantro\.pyxbld\temp.win-amd64-3.7\Release\pyrex\cqobjevo_compiled_coeff_8398411180025011525.cp37-win_amd64.exp; Generating code; Finished generating code; Process SpawnPoolWorker-671:; Process SpawnPoolWorker-669:; Traceback (most recent call last):; Traceback (most recent call last):; File ""C:\Anaconda\lib\multiprocessing\process.py"", line 297, in _bootstrap; self.run(); File ""C:\Anaconda\lib\multiprocessing\process.py"", line 297, in _bootstrap; self.run(); File ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084:32,test,testing,32,https://qutip.org,https://github.com/qutip/qutip/issues/1084,1,['test'],['testing']
Testability,SSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/t,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6874,test,tests,6874,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"SSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_ops = [[a + a.dag(), _string_w_interpolating_t(kappa, times)]]; collapse_points = np.sqrt(k",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7876,Test,TestSESolve,7876,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,Scipy 1.5 changes to linalg.eigh break brtools zheevr tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299:54,test,tests,54,https://qutip.org,https://github.com/qutip/qutip/issues/1299,1,['test'],['tests']
Testability,"Scipy<1.5 hermitian eigenvalue claculation causing wrong results, should update requirements and testsuite",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:97,test,testsuite,97,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['testsuite']
Testability,Segfault when trying to run tests locally,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/issues/1093,2,['test'],['tests']
Testability,Send email test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2244:11,test,test,11,https://qutip.org,https://github.com/qutip/qutip/pull/2244,1,['test'],['test']
Testability,Shorter krylov tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1861:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/1861,1,['test'],['tests']
Testability,"Should fix tests/test_propagator.py::testPropHOStrTd sometime failing, ran it 100 times with the patch without error.; Cause: compiling the same string by multiple process at once resulted in them writing temp files with the same filename, resulting in a race condition and random fails. Not sure why it was not caught before.; @nathanshammah, @ajgpitch",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1169:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/1169,2,['test'],"['testPropHOStrTd', 'tests']"
Testability,Should fix the issue #1039 ; Added matching automated test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1040:54,test,test,54,https://qutip.org,https://github.com/qutip/qutip/pull/1040,1,['test'],['test']
Testability,"Since NumPy 1.12, `np.linspace` raises a DeprecationWarning when its third `num` parameter cannot be safely interpreted as an integer. This method is used in the `mesolve` tests. Fixed by feeding the calls to `linspace` 100 instead of 100.0. The warning (in Travis CI):; ; ![image](https://user-images.githubusercontent.com/220701/27771317-c325fe9c-5f4c-11e7-8d4b-66980255dcfd.png). The deprecation: https://github.com/numpy/numpy/releases/tag/v1.12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/708:172,test,tests,172,https://qutip.org,https://github.com/qutip/qutip/pull/708,1,['test'],['tests']
Testability,"Since the PR merge of Ben's (@bcriger) code for Efficient Application of CPTP Maps to Subsystems, there has been a number of failing unit tests. I have fixed some of the tests and ported Ben's code to be python3 compatible, but there are still two remaining errors, which I have traced to the fact that `subsystem_apply(..., reference=True)` does not give the expected results (some normalization problem? perhaps with the eigenvectors?). ```; In [1]: from qutip import *; In [2]: rho_3 = rand_dm(3); In [3]: superop = kraus_to_super(rand_kraus_map(3)); In [4]: analytic_result = vector_to_operator(superop * operator_to_vector(rho_3)); In [5]: analytic_result; Out[5]: Quantum object: dims = [[3], [3]], shape = [3, 3], type = oper, isHerm = True; ⎜0.396 (0.069−5.343×10−04j) (−0.003+0.030j) |; |(0.069+5.343×10−04j) 0.407 (−0.029−0.076j) |; |(−0.003−0.030j) (−0.029+0.076j) 0.293 |. In [6]: ref_result = subsystem_apply(rho_3, superop, [True], reference=True); In [7]: ref_result; Out[7]: Quantum object: dims = [[3], [3]], shape = [3, 3], type = oper, isHerm = True; ⎜0.354 (0.067−0.036j) (0.058+0.004j) |; |(0.067+0.036j) 0.407 (0.039−0.041j) |; |(0.058−0.004j) (0.039+0.041j) 0.240 ⎟. In [8]: efficient_result = subsystem_apply(rho_3, superop, [True]); In [9]: efficient_result; Out[9]: Quantum object: dims = [[3], [3]], shape = [3, 3], type = oper, isHerm = True; ⎜0.396 (0.069−5.343×10−04j) (−0.003+0.030j) |; | (0.069+5.343×10−04j) 0.407 (−0.029−0.076j) |; |(−0.003−0.030j) (−0.029+0.076j) 0.293 ⎟; ```. Probably @bcriger would be the best person to fix this issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/30:138,test,tests,138,https://qutip.org,https://github.com/qutip/qutip/issues/30,2,['test'],['tests']
Testability,"Since the update to version 4.4, calling `mesolve` without collapse operators prints a message ""no collapse operator, using sesolve"" to stdout. Is printing this message really necessary? It breaks our examples for the `krotov` package, see e.g. the notebook https://krotov.readthedocs.io/en/latest/notebooks/01_example_simple_state_to_state.html, where these messages show up in the notebook when it runs with qutip 4.4. Of course I understand that the message is technically correct, and we could work around the problem in `krotov`, but it was nice to be able to use `mesolve` as a catch-all for either a Schrödinger equation or a master equation. We'd have to start routing different cases to `mesolve` and `sesolve` manually, otherwise. Personally, I would argue that this kind of message should be emitted as `logger.debug` instead of `print`, if at all.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1047:815,log,logger,815,https://qutip.org,https://github.com/qutip/qutip/issues/1047,1,['log'],['logger']
Testability,Skip avg gate fid tests on mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1034:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/1034,1,['test'],['tests']
Testability,Skipping dnorm tests when MKL is present.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/487:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/487,1,['test'],['tests']
Testability,Small test to see if mac tests would pass with openblas instead of mkl.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1036:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/1036,2,['test'],"['test', 'tests']"
Testability,"Solver object for `sesolve`, `mesolve` and `mcsolve`: `SeSolver`, `MeSolver` and `McSolver`:; - Removed all `rhs_reuse` (except in `brmesolve`). Still work but there is deprecation warning.; - steper for `Sesolver` and `MeSolver` as proposed by Michael.; - Variable output type (`Qobj`, `dense` or `sparse`) input must still be `Qobj`.; - Intermediate object to change the solver used: scipy `zvode`, `solve_ivp`, `dorpri853` are all available for `SeSolver`, `MeSolver`. More could be added in the future, @tehruhn 's GPU solver could probably fit here. I will work on an Adaptative Hilbert Space one eventually. . The objects do not do much more than the original functions if the system is not used more than once. Still to-do:; - Other algorithm for `McSolver`: diagonalized solver (suggested by Fabio?) and one using scipy ivp.; - Inline documentation; - Notebooks; - Cleaning options management. (Unique options object is getting limited for multiple low level solver and both all se,me,mc solve, I would appreciate opinions on how to make this better).; - Add to `__init__.py`; - Add tests. Build on the QobjEvoFunc Pr, with some bug fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1186:1091,test,tests,1091,https://qutip.org,https://github.com/qutip/qutip/pull/1186,1,['test'],['tests']
Testability,"Some TestDicke tests in `test_piqs.py` (test_lindbladian, test_lindbladian_dims, test_liouvillian) fail with the recent scipy 1.6.1 release. They were previously passing with scipy 1.6.0. **To Reproduce**. ```; $ cp -r qutip/tests/ /tmp/qutip; $ cd /tmp/qutip; $ pytest-3 -v -k ""TestDicke""; ```. The test error message from `TestDicke.test_lindbladian` is; ```; ___________________________________________________________________________________________ TestDicke.test_lindbladian ____________________________________________________________________________________________. self = <tests.test_piqs.TestDicke object at 0x7f55475a0c10>. def test_lindbladian(self):; """"""; PIQS: Test the generation of the Lindbladian matrix.; """"""; N = 1; gCE = 0.5; gCD = 0.5; gCP = 0.5; gE = 0.1; gD = 0.1; gP = 0.1; ; system = Dicke(; N=N,; emission=gE,; pumping=gP,; dephasing=gD,; collective_emission=gCE,; collective_pumping=gCP,; collective_dephasing=gCD,; ); ; > lindbladian = system.lindbladian(). tests/test_piqs.py:450: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /usr/lib/python3/dist-packages/qutip/piqs.py:509: in lindbladian; return cythonized_dicke.lindbladian(); qutip/cy/piqs.pyx:313: in qutip.cy.piqs.Dicke.lindbladian; ???; qutip/cy/piqs.pyx:431: in qutip.cy.piqs.Dicke.lindbladian; ???; /usr/lib/python3/dist-packages/scipy/sparse/compressed.py:54: in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. self = <[AttributeError('dtype not found') raised in repr()] coo_matrix object at 0x7f55475a0ca0>; arg1 = ([(-0.6000000238418579+0j), (0.6000000238418579+0j), (-0.9000000357627869+0j), (-0.90000003576",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:5,Test,TestDicke,5,https://qutip.org,https://github.com/qutip/qutip/issues/1451,11,"['Test', 'test']","['Test', 'TestDicke', 'test', 'tests']"
Testability,"Some bug fixes in fast csr.; `get_sum_dtype` import removed as it was not used and incompatible with scipy < 0.18, as mentioned in #616 ; Various improvements / bug fixes in tests (fast_csr, control and correlation); Need for manifest.ini removed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/618:174,test,tests,174,https://qutip.org,https://github.com/qutip/qutip/pull/618,1,['test'],['tests']
Testability,"Some correlation tests fail on some attempts.; Not really clear why.; This issue can be used to keep a record, and then they can be fixed. This is an example:; ```; ======================================================================; FAIL: correlation: comparing me and mc for driven oscillator in fock state; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/qutip-4.1.0.dev0+0e91439-py2.7-linux-x86_64.egg/qutip/tests/test_correlation.py"", line 125, in test_compare_solvers_coherent_state_memc; assert_(abs(corr1 - corr2).max() < 0.2); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/numpy/testing/utils.py"", line 77, in assert_; raise AssertionError(smsg); AssertionError; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/607:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/issues/607,9,"['Assert', 'test']","['AssertionError', 'test', 'test-environment', 'testing', 'tests']"
Testability,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1575:216,log,logic,216,https://qutip.org,https://github.com/qutip/qutip/pull/1575,2,['log'],"['log', 'logic']"
Testability,"Some more clean up of the code. Unit tests still pass. I touched some lines in bloch.py to make things more readable. Is there a generic example that I can run, to make sure the plotting still looks the same. For now the the change to bloch.py is minor, but thought about refactoring some things along the way and didn't want to break anything without a proper test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/11:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/11,2,['test'],"['test', 'tests']"
Testability,"Some of the istests (like isoper) raise exceptions, when the object under test is not a Qobj, e.g. ioper raises an AttributeError exception, because it assumes that the object has a dims attribute. Shall I just modify the tests such that. ```; if isinstance(obj, Qobj):; # current test code; else:; return False; ```. Or is there a smarter way to do that?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2:74,test,test,74,https://qutip.org,https://github.com/qutip/qutip/issues/2,3,['test'],"['test', 'tests']"
Testability,Some of the norms calculated in the test_ComplexSuperApply were above the tolerance of 1e-12; In 50 repeated tests 7 errors occurred. norms as large as 5e-11 were reported.; After increasing tol to 1e-10 test were repeated 200 times and no errors occurred,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/435:109,test,tests,109,https://qutip.org,https://github.com/qutip/qutip/pull/435,2,['test'],"['test', 'tests']"
Testability,"Some of the super operator and QPT tests may have name space issues as reported in the google group: . https://groups.google.com/d/msg/qutip/Z-5o4HHYRv4/yRX7dvjiEgAJ. I can not reproduce the errors, but here is a clean up that will likely fix this possible issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/497:35,test,tests,35,https://qutip.org,https://github.com/qutip/qutip/pull/497,1,['test'],['tests']
Testability,"Some of the test have decorators like this:. ```; @unittest.skipIf(_version2int(Cython.__version__) < _version2int('0.14') or; Cython_found == 0, 'Cython not found or version too low.'); ```. with the Cython_found variable being set at the top of the file like this:. ```; # find Cython if it exists; try:; import Cython; except:; Cython_found = 0; else:; Cython_found = 1; ```. The condition in the decorator will error, as the Cython version is checked even though it failed to import.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/449:12,test,test,12,https://qutip.org,https://github.com/qutip/qutip/issues/449,1,['test'],['test']
Testability,Some test not tidying up rhs*.pyx files,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/601:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/issues/601,1,['test'],['test']
Testability,Some tests fail from time to time. Most likely they need to have their tolerances increased; This issue replaces #607 as it is more general,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/621:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/issues/621,1,['test'],['tests']
Testability,Some tests fail on Apple M1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"Some tests in stochastic evolution passes only most of the time.; The problematic tests are comparison of different step length, normally error should be smaller with smaller step length. Since the evolution use random number, this is not true for all seeds. By fixing the test, we should not have the tests randomly failing.; I am adding _improving stochastic tests and having them use pytest_ to my to-do. Ps. tests fail due to the error fixed in #1656",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1657:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1657,6,['test'],"['test', 'tests']"
Testability,Some updates to the Cython code. Also removed the test scripts for the mcf90 routine as Pull #648 removed the ability to install the module.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/650:50,test,test,50,https://qutip.org,https://github.com/qutip/qutip/pull/650,1,['test'],['test']
Testability,"Specifically this test `test_interpolate.test_interpolate_brevolve3()` followed by `test_mcsolve.test_MCCollapseTimesOperators` generates an error or the form; ```; Process SpawnPoolWorker-1:; Traceback (most recent call last):; File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\process.py"", line 249, in _bootstrap; self.run(); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\process.py"", line 93, in run; self._target(*self._args, **self._kwargs); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\pool.py"", line 108, in worker; task = get(); File ""C:\Anaconda2\envs\q4_2-py35\lib\multiprocessing\queues.py"", line 345, in get; return ForkingPickler.loads(res); ImportError: No module named 'rhs47600'; ```; The rhs... file in generated by the brevolve3 test. The test appears to finish fine. But somehow it looks like some process is hanging around. Why this is triggered by the MCCollapseTimesOperators test is a bit of a mystery.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/728:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/issues/728,4,['test'],['test']
Testability,Support XYZ gates decomposition and modernize tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1356:46,test,tests,46,https://qutip.org,https://github.com/qutip/qutip/pull/1356,1,['test'],['tests']
Testability,"Temporarily disables the `brtools` test `test_zheevr` when using `scipy` version >= 1.5. See #1299 for more information and discussion. This does not _need_ to be merged if we solve the more general problem quickly, but will fix the problem in the interim if we need it. Build on top of #1298 just to show that taken together they ""fix"" all the tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1300:35,test,test,35,https://qutip.org,https://github.com/qutip/qutip/pull/1300,2,['test'],"['test', 'tests']"
Testability,"Test ""mesolve: time-dependence as string list"" fails with clang compiler",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/411:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/issues/411,1,['Test'],['Test']
Testability,Test for `svd` more robust,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2092:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/pull/2092,1,['Test'],['Test']
Testability,Test missing for floquet_master_equation_tensor,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/624:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/issues/624,1,['Test'],['Test']
Testability,Test reshape specialisations.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1637:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/pull/1637,1,['Test'],['Test']
Testability,Test skip for 4.5.1 release,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1257:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/pull/1257,1,['Test'],['Test']
Testability,Test updates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/458:0,Test,Test,0,https://qutip.org,https://github.com/qutip/qutip/pull/458,1,['Test'],['Test']
Testability,TestDicke fails with scipy 1.6.1: TypeError: can't convert complex to float,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:0,Test,TestDicke,0,https://qutip.org,https://github.com/qutip/qutip/issues/1451,1,['Test'],['TestDicke']
Testability,Testing code errors: TypeError,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039:0,Test,Testing,0,https://qutip.org,https://github.com/qutip/qutip/issues/1039,1,['Test'],['Testing']
Testability,Tests Error,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['Test'],['Tests']
Testability,Tests fail: No module named 'cqobjevo_compiled_coeff_130828459648281117',MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/1084,1,['Test'],['Tests']
Testability,Tests fail: No module named spmatfuncs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/891:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/891,1,['Test'],['Tests']
Testability,Tests failing (possibly) due to scipy Deprecation in power-gmres solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/862:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/862,1,['Test'],['Tests']
Testability,Tests for norm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1631:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/pull/1631,1,['Test'],['Tests']
Testability,Tests for plotting functions,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/12:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/12,1,['Test'],['Tests']
Testability,Tests not properly working on Canopy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469:0,Test,Tests,0,https://qutip.org,https://github.com/qutip/qutip/issues/469,1,['Test'],['Tests']
Testability,The .T and .H methods for fast_csr were not returning another fast_csr. This fixes that an verifies with tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/608:105,test,tests,105,https://qutip.org,https://github.com/qutip/qutip/pull/608,1,['test'],['tests']
Testability,"The `metrics.dnorm` function uses the cvxpy library to calculate the diamond norm. Twice now it has caused many test failures out of the blue #484 and #872.; It would seem like the developers do not prioritise maintaining a conda package. As this is our recommended platform, then it is a risk having this cvxpy dependence. Perhaps there is a method using scipy that we could employ?. @cgranade perhaps could provide some context?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874:112,test,test,112,https://qutip.org,https://github.com/qutip/qutip/issues/874,1,['test'],['test']
Testability,"The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python Version: 3.8.10; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1389,test,testcorrM,1389,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorrM']
Testability,"The checks are too restrictive. For the collapse and expectation operator lists, previous versions allowed the input of single operators. The documentation also explicitly states this is OK. Ex. ; mesolve(qzero(2), fock(2, 1), [0, 2], destroy(2), sigmaz()). But now this yields the error:. Traceback (most recent call last):; File ""/home/kevinf/PycharmProjects/QutipProjects/test/test.py"", line 3, in <module>; mesolve(qzero(2), fock(2, 1), [0, 2], destroy(2), sigmaz()); File ""/usr/local/lib/python3.4/dist-packages/qutip/mesolve.py"", line 208, in mesolve; _solver_safety_check(H, rho0, c_ops, e_ops, args); File ""/usr/local/lib/python3.4/dist-packages/qutip/solver.py"", line 813, in _solver_safety_check; for ii in range(len(c_ops)):; TypeError: object of type 'Qobj' has no len()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/630:375,test,test,375,https://qutip.org,https://github.com/qutip/qutip/issues/630,2,['test'],['test']
Testability,The commit af17ded3dec6d712eb852575bf6d5a6c5bbaf832 introduced a performance regression in Qobj.expm. https://github.com/qutip/continuous-benchmark#qobj_expm_20,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/50:138,benchmark,benchmark,138,https://qutip.org,https://github.com/qutip/qutip/issues/50,1,['benchmark'],['benchmark']
Testability,"The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4439,test,test,4439,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['test'],['test']
Testability,The dnorm tests are sporadically (quite regularly) failing e.g. ```; ======================================================================; ERROR: Metrics: checks that special cases for dnorm agree with SDP solutions.; ----------------------------------------------------------------------; cvxpy.error.SolverError: Solver 'CVXOPT' failed. Try another solver or solve with verbose=True for more information. Try recentering the problem data around 0 and rescaling to reduce the dynamic range.; ```. I suggest we turn them off by not installing cvxpy for any of the test configurations.; We can turn them on again if someone can make an attempt to make the dnorm tests more reliable @cgranade . I will raise a PR for this now.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/880:10,test,tests,10,https://qutip.org,https://github.com/qutip/qutip/issues/880,3,['test'],"['test', 'tests']"
Testability,"The eigenvectors returned by .eigenstates() method are determined up to a sign (which is correct, but leads to interesting issues in some cases). Is it possible to update the eigenstates method to fix these internally? A simple workaround is to invert (multiply by -1) any eigenstates that cause trouble, but I'm not sure I know of a universal test for ""trouble"". As an example, [this gist](https://gist.github.com/amcdawes/437f8756fcb8ff8ca4c1b720600adf43) demonstrates a fix whereby all eigenstates are made to have positive initial values. I suspect this fix is specific to SHO states, but perhaps a universal standard exists where each vector could be made to match the expected result?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1118:344,test,test,344,https://qutip.org,https://github.com/qutip/qutip/issues/1118,1,['test'],['test']
Testability,"The following error occurred several times while running the tests on my machine:; ```; ======================================================================; ERROR: Stochastic: ssesolve: heterodyne, time-dependent H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\tests\test_stochastic_se.py"", line 208, in test_ssesolve_heterodyne; map_func=parallel_map, args={""a"":2}); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\stochastic.py"", line 698, in ssesolve; args=args, **kwargs); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\stochastic.py"", line 417, in __init__; self.noise = np.random.randint(0, 2**32, ntraj).astype(""u4""); File ""mtrand.pyx"", line 990, in mtrand.RandomState.randint; ValueError: high is out of bounds for int32. ----------------------------------------------------------------------; ```; It is due to the fact that the default integer of python on windows is int32 instead of int64. `np.random.randint(0, 2**32)` produces the same error on my machine. Maybe it is better to add `dtype=np.int64` or `dtype=np.uint32` since they are platform independent. If you agree I can work on fixing it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/968:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/issues/968,3,['test'],"['test', 'tests']"
Testability,The information has been moved to the change log,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/431:45,log,log,45,https://qutip.org,https://github.com/qutip/qutip/pull/431,1,['log'],['log']
Testability,"The installation seems to succeed, but there seems to be a problem when the tests are run (or when I go into python, trying to load anything like `from qutip import *` gives an error. The script gives the following error (which can be reproduced by just running `import qutip.testing as qt` in python):. ```; [. . .]; Successfully installed qutip-3.1.0; Running QuTiP unit tests; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; /Users/justin/.pyxbld/temp.macosx-10.10-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:250:10: fatal error: 'numpy/arrayobject.h' file not found; #include ""numpy/arrayobject.h""; ^; 1 error generated.; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/usr/local/lib/python2.7/site-packages/qutip/__init__.py"", line 213, in <module>; from qutip.qobj import *; File ""/usr/local/lib/python2.7/site-packages/qutip/qobj.py"", line 60, in <module>; from qutip.ptrace import _ptrace; File ""/usr/local/lib/python2.7/site-packages/qutip/ptrace.py"", line 38, in <module>; from qutip.sparse import sp_reshape; File ""/usr/local/lib/python2.7/site-packages/qutip/sparse.py"", line 49, in <module>; from qutip.cy.sparse_utils import (_sparse_profile, _sparse_permute,; File ""/usr/local/lib/python2.7/site-packages/qutip/cy/__init__.py"", line 1, in <module>; from qutip.cy.spmatfuncs import *; File ""/usr/local/lib/python2.7/site-packages/pyximport/pyximport.py"", line 431, in load_module; language_level=self.language_level); File ""/usr/local/lib/python2.7/site-packages/pyximport/pyximport.py"", line 209, in load_module; inplace=build_inplace, language_level=language_level); File ""/usr/local/lib/python2.7/site-packages/pyximpo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/348:76,test,tests,76,https://qutip.org,https://github.com/qutip/qutip/issues/348,3,['test'],"['testing', 'tests']"
Testability,"The internal data type for storing dynamics generators (Hamiltonians), propagators, and the time evolution can now be set as Qobj. When using Qobj the propagators are computed using qutip methods for expm. Resolves #370; The default for small systems remains ndarray, as this provides much faster execution (factor of 10 approx). However, it is assumed, but not yet tested, that for larger systems the Qobj propagation will be faster, and certainly less memory consumptive. The internal data type (if not specified) is chosen automatically using the same criteria Qobj.expm() uses to determine whether to use the (cython) sparse method.; The main motivation for implementing this change is for users developing their own custom fidelity and gradient measures which use the partial trace method. Consequently, preserving the dimensions is important. This has been shown (by colleagues testing) to be more efficient than recreating the Qobjs from ndarrays.; The internal operator processing methods and attributes have been renamed with underscores preceding to indicate that these will be of the internal operator data type. Accessors have been added that will always provide Qobj representations of the operators.; Theoretically any operator data type that supports the dot() method could be used, e.g. some other sparse matrix type, however this has not been extensively tested and should be considered an experimental feature.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/397:366,test,tested,366,https://qutip.org,https://github.com/qutip/qutip/pull/397,3,['test'],"['tested', 'testing']"
Testability,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1574:91,test,testing,91,https://qutip.org,https://github.com/qutip/qutip/pull/1574,5,"['log', 'test']","['log', 'logically', 'testing']"
Testability,"The new test explicitly checks the eigenvalue equation for each generated eigenvalue/vector pair, and tests (via the determinant) that all eigenvectors are linearly independent, as they must be since they are eigenvectors of a Hermitian matrix. The previous test relied on the implementation of `zheevr` producing _exactly_ the same result as `scipy.linalg.eigh`, which was very fragile, and indeed broken by scipy 1.5. Fixes #1299.; Deprecates PR #1300, since this actually turned out to be a much easier fix than I had feared. Intermittent segfaults on Mac persist, unfortunately, so this still requires #1288.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1301:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/1301,3,['test'],"['test', 'tests']"
Testability,"The new version of expm that I grabbed from Expokit does not behave quite as well as the SciPy version. After a bit of testing, the SciPy version performs the best overall. For our purposes, I think that either method would be sufficient. However, the SciPy version is the current best algorithm, and replacing as much code as possible with SciPy code is probably a good thing. This code still defaults to the dense method.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/466:119,test,testing,119,https://qutip.org,https://github.com/qutip/qutip/pull/466,1,['test'],['testing']
Testability,"The previous implementation of `choi_to_chi` and `chi_to_choi` required that `dims` be specified explicitly as qubits; for example, `[[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]]` for a three-qubit system. This PR generalizes to allow for `dims` built from powers of 2 instead, as in `[[[8], [8]], [[8], [8]]]`. In addition, this PR adds new test cases to check that `to_choi` and `to_chi` properly roundtrip for multiqubit dimensions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/390:345,test,test,345,https://qutip.org,https://github.com/qutip/qutip/pull/390,1,['test'],['test']
Testability,"The problem appears in qutip version 4.0.0 when considering the tensor product of a few systems, and including more than one dissipation channel. I noticed a similar issue on a much more complex system, but in the code attached I consider the simplest system on which I have found the bug to appear. Consider three uncoupled qubits, each with a distinct frequency. The Hamiltonian is (ignoring tensor products with identity matrices) :. H = (w1 / 2) * sigmaz_1 + (w2 / 2) * sigmaz_2 + (w3 / 2) * sigmaz_3. Let us couple qubits 2 and 3 to independent white-noise environments through operators sigmax_2 and sigmax_3. Qubit 1 is decoupled from the other qubits, and does not couple to any relaxation channel. We consider the initial state |1:e, 2:g, 3:g>, where g(e) labels the ground (excited) state of a qubit, and evaluate the population of the excited state of qubit 1 as a function of time using bloch_redfield_tensor() and bloch_redfield_solve(). Since qubit 1 is decoupled from the other qubits, its excited-state population should remain 1 at all times. Yet, qutip yields exponential decay of the population of qubit 1. I noticed that when I remove dissipation for qubit 2 (keeping only dissipation through sigmax_3), the problem disappears and qubit 1 forever stays in its excited state. So the problem seems to arise when combining two relaxation sources. I am using qutip version 4.0.0. A colleague of mine tried the attached test code on qutip version 3.1.0 and did not catch any bug (i.e. qubit 1 did not relax with qutip 3.1.0). So the problem seems to be related to versions of qutip later than 3.1.0. Can anyone replicate the bug with the attached code ? . (I tried putting the code directly here but the hashtag signs for the comments made a mess, and github does not accept attached .py files, so I have put the code in a .txt file instead.). [redfield.txt](https://github.com/qutip/qutip/files/635122/redfield.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/572:1435,test,test,1435,https://qutip.org,https://github.com/qutip/qutip/issues/572,1,['test'],['test']
Testability,The qip.hadamard_transform function does not return return expected output. . Tested with N=1 in Python 2.7 and factor is 0.5 rather than 1/sqrt(2). . The 2*_(-N / 2) would need to be something like 2_(-N / 2.0) to ensure float division,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/257:78,Test,Tested,78,https://qutip.org,https://github.com/qutip/qutip/issues/257,1,['Test'],['Tested']
Testability,"The qutip.fortran module seems to be built and installed in the TravisCI environment, but for some reason loading it after install fails, so the tests are skipped. . See for example the build log at https://travis-ci.org/qutip/qutip/jobs/19551778",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/80:145,test,tests,145,https://qutip.org,https://github.com/qutip/qutip/issues/80,2,"['log', 'test']","['log', 'tests']"
Testability,"The qutip/setup.py; has these lines. ```; config.add_subpackage('cy'); config.add_subpackage('control'); ```. Should the qip packages and nonmarkov go in there or or is this covered by this in the main setup.py. ```; PACKAGES = ['qutip', 'qutip/ui', 'qutip/cy', 'qutip/qip', 'qutip/qip/models',; 'qutip/qip/algorithms', 'qutip/control', 'qutip/nonmarkov', ; 'qutip/tests']; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/450:365,test,tests,365,https://qutip.org,https://github.com/qutip/qutip/issues/450,1,['test'],['tests']
Testability,"The segfault on mac is not fixed yet. @nathanshammah found 3 tests that fails because of it.; Since we don't have a solution comming soon, we are simply skipping these tests for 4.5.1. This is the error in #1197. In common with these 3 test is the computation of eigenvalues, 2 of them do it directly with scipy, the last one compare the cython version to the scipy one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1257:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/pull/1257,3,['test'],"['test', 'tests']"
Testability,The six library is used for Python 2.x and 3.x compatibility tricks. It failed to import during Travis tests. Should we make this library available in Travis tests?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/378:103,test,tests,103,https://qutip.org,https://github.com/qutip/qutip/issues/378,2,['test'],['tests']
Testability,"The stochastic solver have been redone.; smesolve and ssesovle can be used for time dependent systems (H, c_ops and sc_ops).; The available solvers are : 'euler-maruyama', 'pc-euler, 'milstein', 'platen', 'milstein-imp', 'taylor15', 'taylor15-imp', 'explicit15'. All solvers are usable by both ssesolve and smesolve, for time-dependent cases and for both heterodyne and homodyne methods. There is no restriction on the number of sc_ops. The solvers are in cython, making them 2~3 time faster than the previous version, with the exception of the implicit solvers, where the timing is about the same. The photocurrent method as been moved to it's own functions: photocurrentmesolve and photocurrentsesolve. It can take time-dependent Hamiltonian. The stochastic (piecewse deterministic process) PDP solvers (ssepdpsolve and smepdpsolve) are untouched. The previous version of smesolve/ssesolve allowed the user to determine it's own d1 and d2 function. This capacity have been moved to the function general_stochastic. However the function only has access to some solver: 'euler-maruyama', 'platen', 'explicit15'. . I created a function which list the solvers with the references: stochastic_solver_info(). The convergence of the solvers was tested with a tests similar to https://github.com/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815:1240,test,tested,1240,https://qutip.org,https://github.com/qutip/qutip/pull/815,2,['test'],"['tested', 'tests']"
Testability,"The tests for this are sometimes erroring in Travis; See test result for #424 ; ERROR: Test Qobj: trunc_neg works for non-diagonal opers. I saw a conversation about this somewhere, but can't find it now",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/425:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/issues/425,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"The unitary operator evolution implemented in #832 was flawed.; This is a complete overhaul. It uses the method from mesolve map evolution.; The tests implemented in #832 did not uncover the flaws, and so extra ones are added that would have.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/868:145,test,tests,145,https://qutip.org,https://github.com/qutip/qutip/pull/868,1,['test'],['tests']
Testability,The version of ptrace can support bigger system and is faster for large matrices. The ptrace of 4.3 create a integer overflow when the matrix size is `2**16` (#828).; I tested this version up to `2**25` without problem.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/970:169,test,tested,169,https://qutip.org,https://github.com/qutip/qutip/pull/970,1,['test'],['tested']
Testability,"There are ""breaking"" changes within the scipy private code which various parts of QuTiP depended on (see gh-1298, gh-1301 and commits 46e04a1, 6c85261 and 663d7d2). We ensure that at least one test on Travis uses a scipy version before 1.5 so that we always maintain support for it - the other tests will typically install scipy>=1.5. This particular test is chosen by elimination:; - we want the ""default"" case testing against the newest versions of Python to use the newest versions of the libraries available; - we want the Cython parts to be tested against both versions of scipy, since we link against their versions of LAPACK/BLAS.; - the Mac tests (at the time of writing) skip some tests which are problematic because of intermittent segfaults, including at least one which has issues with scipy 1.5. The MKL/OMP one skips some tests, but not any which use scipy.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1302:193,test,test,193,https://qutip.org,https://github.com/qutip/qutip/pull/1302,8,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"There are many deprecation warnings arising from the Travis tests. It would seem wise to resolve these before generating the next stable release, as it is likely to be long-lived.; Although there are lots of warnings, the sources might be few.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/381:60,test,tests,60,https://qutip.org,https://github.com/qutip/qutip/issues/381,1,['test'],['tests']
Testability,"There is a section in qutip/**init**.py that checks the cython version, then re cythonizes all the pyx. It prints a warning if cython is not found. So after install, during which all the cython modules get built, during the first import of qutip all the building happens again. This seems unnecessary, and is actually an issue if we are making a pre-built package. I have patched out this section in the conda-forge feedstock. All but 7 of the tests are successful. Cython is not actually needed at run time for most of QuTiP. Why is it sometimes needed at runtime?. Should we look remove this section from the **init**.py, and put some warning in the methods that use cython at runtime?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/448:444,test,tests,444,https://qutip.org,https://github.com/qutip/qutip/issues/448,1,['test'],['tests']
Testability,"There seems to be a failure in how `Qobj.istp` checks trace-preservingness for superoperators acting on composite systems. I think there's an exception raised inside the property accessor which is being downgraded to `istp == False`; I'll investigate and fix it soon. In the meantime, I've written a [brief test case](https://gist.github.com/cgranade/31bce360282097d4abd545b68eb65b7d) that shows the problem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/498:307,test,test,307,https://qutip.org,https://github.com/qutip/qutip/issues/498,1,['test'],['test']
Testability,"There were a few invalid escape sequences and scipy imports that somehow escaped being fixed #1493, so this fixes those. Also, in #1480 we issued deprecation warnings for user-facing uses of `eseries`, `essolve` and `ode2es`, however we are not deprecating the correlation and spectrum methods (in QuTiP 5.0 the necessary components are just absorbed into private functions inside `correlation.py`), so these should not generate warnings. Simon (@hodgestar) and I briefly discussed whether we needed a special warnings filter inside those functions, but we thought we didn't need it because default Python filters would prevent `DeprecationWarning` from being shown, since it is triggered by library code and not code in `__main__`. The problem is that not everything uses the default filters; both `pytest` and the documentation build do not suppress all `DeprecationWarning` messages. This was a particular problem in `pytest`, where approximately 68,000 warnings (!) were generated. Since this is _not_ deprecated functionality, nor is it using deprecated functionality, so there shouldn't be any warnings. This PR removes those as well. The end result is that a completely clean documentation build now should generate 0 warnings. My eventual intent is to create an automatic documentation build process, which treats warnings as errors to prevent us from breaking it in PRs. This cannot happen until the merger of the documentation into this repository, however, because otherwise new features/feature removals could get into an impossible situation where the two PRs to `qutip` and `qutip-doc` would not be aware of each other, so would return failed CI. Tests still generate several warnings, but that's for a different PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1505:1661,Test,Tests,1661,https://qutip.org,https://github.com/qutip/qutip/pull/1505,1,['Test'],['Tests']
Testability,There were brackets missing in a list comprehension in the function `qip.qubit_states`. ; Additionally puting states = [0] put the qubit in the |1> state and states=[1] put the qubit in the |0> state. I have changed this so that [0] correpsonds to |0> and [1] corresponds to |1>. This pull request addresses these issues and provides a test to test the added functionality.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/553:336,test,test,336,https://qutip.org,https://github.com/qutip/qutip/pull/553,2,['test'],['test']
Testability,There's a bunch of warnings in the build log that indicate that scipy.special.factorial should be used in favor of scipy.misc.factorial.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/781:41,log,log,41,https://qutip.org,https://github.com/qutip/qutip/pull/781,1,['log'],['log']
Testability,"These are all the remaining files from #1181 that neither Eric nor Boxi had explicitly said they were checking, with the commits all tidied up and rebased onto `master`. This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1252:254,test,test,254,https://qutip.org,https://github.com/qutip/qutip/pull/1252,1,['test'],['test']
Testability,"These are the files that Boxi (@BoxiLi) was checking in #1181, but the commits are tidied up and rebased onto `master`. The merge conflict in `test_gates.py` that's present in #1181 is fixed (with all the tests safely maintained). This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:205,test,tests,205,https://qutip.org,https://github.com/qutip/qutip/pull/1251,2,['test'],"['test', 'tests']"
Testability,"These are the files that Eric (@Ericgig) was checking in #1181, but the commits are tidied up and rebased onto `master`. I'll copy over the review comments in that PR that haven't been actioned yet. The potential merge conflict with `test_mcsolve.py` is fixed. This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1250:345,test,test,345,https://qutip.org,https://github.com/qutip/qutip/pull/1250,1,['test'],['test']
Testability,"This PR addresses #315 by providing sampling for Haar (unitary), Hilbert-Schmidt (DMs), Ginibre (DMs) and BCSZ (superoperators) distributions. Some more documentation is needed still, but the tests pass locally on Python 2.7 and 3.4.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/316:192,test,tests,192,https://qutip.org,https://github.com/qutip/qutip/pull/316,1,['test'],['tests']
Testability,"This PR addresses #410 by attempting to import `setuptools`, which has support for unittesting and nose integration. Upon failure, it should leave the setup process as it was. This PR also fixes a rare exception in `settings.py` that can be caused if you have a `*.pyc` file for `logging.py` and call into QuTiP from something like nose.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/429:280,log,logging,280,https://qutip.org,https://github.com/qutip/qutip/pull/429,1,['log'],['logging']
Testability,This PR addresses #484 by skipping dnorm() tests in the known failure case that MKL is present (see #484 and cvxopt/cvxopt#57).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/487:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/487,1,['test'],['tests']
Testability,"This PR addresses #498 by collapsing composite (multipartite) dimensions before taking the partial trace. This is backed by new functions to collapse dimensions specifications of multipartite systems, and both these new functions and the originally erroneous behavior of `Qobj.istp` are now covered by new test cases.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/499:306,test,test,306,https://qutip.org,https://github.com/qutip/qutip/pull/499,1,['test'],['test']
Testability,"This PR changes `Qobj.__mul__` and `Qobj.__add__` to leave `isherm` lazily-evaluated (that is, `_isherm = None`) unless the Hermicity of the result is already known from closure under addition. This change was prompted by noticing that `isherm` alone took up over half of the runtime of a computation I was attempting, despite that nothing actually ever looked at the Hermicity of a product of two `Qobj` instances. I also added additional tests to ensure that `__mul__` doesn't result in incorrect values of `isherm`, something that was not previously covered by `qutip.tests.test_qobj.test_QobjHerm`. The new tests pass locally on Python 2.7 and 3.4 (Ubuntu 14.10) as well as on Windows with Python 2.7.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/359:440,test,tests,440,https://qutip.org,https://github.com/qutip/qutip/pull/359,3,['test'],['tests']
Testability,"This PR changes the norm used in `qutip.tests.test_superoper.testLiouvilleImplem` to the max-norm. Previously, this test used the tr-norm, which scaled badly with the dimension of the Liouvillian under test, such that spurious failures were generated (see #419).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/420:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/420,4,['test'],"['test', 'testLiouvilleImplem', 'tests']"
Testability,"This PR continues to expand on superoperator representation support by adding `superrep=""chi""` for chi (process) matrices in the Pauli basis. Currently, the unit tests fail on my system due to me misunderstanding how `dims` and `tensor` work together for `type=""super""` `Qobj`s (see line 92 of `test_superop_reps.py` and lines 161 and 173 of `superop_reps.py`), but hopefully this should be a straightforward fix. Once we have it working for qubits, we should be able to generalize to arbitrary dimensions by using the Heisenberg-Weyl group.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/97:162,test,tests,162,https://qutip.org,https://github.com/qutip/qutip/pull/97,1,['test'],['tests']
Testability,"This PR fixes #386 by changing checking if `j == i + 1`, in which case NumPy doesn't automatically move fancy indices to the left. In particular, for adjacent indices, we should sum over index `i`, not over index `0` as was assumed before. To catch regressions, this PR also adds more robust unit tests that check more unusual tensor contractions. Thanks to @arnelg for pointing this out!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/387:297,test,tests,297,https://qutip.org,https://github.com/qutip/qutip/pull/387,1,['test'],['tests']
Testability,"This PR fixes every warning reported in `pytest`, and then makes `pytest` treat warnings as errors to hopefully make sure we stick to this state of affairs. (Or at least it fixes all the ones that appear on my particular machine...). The reason this is desirable is that it means we cannot ignore deprecation warnings in dependencies or even in our own code. It also helps us not let certain parts of the codebase get lost in the sands of time, or at least compels us to do something about potential problems before they actually become catastrophic. This is _somewhat_ of a trial, though I hope we can stick to it; warnings usually indicate that something's wrong. Tests can still test run code that generates warnings, but you now have to mark it explicitly in `pytest`. This doesn't mean you should just ""blank out"" warnings by filtering them away. You should first consider if what you're doing is the right way to do it (fix the warning), and then only if it absolutely is and you're testing something that is _supposed_ to warn, then you can use `pytest.warns` to _assert_ that it warns. Of note: a `warnings.catch_warnings` block _inside_ a test (i.e. in test code, not module code) does not work when `pytest` is treating warnings as errors. There are a few classes of fixes in this PR:. - filtering ""expected"" warnings from `pyximport` (hoping to remove QuTiP's dependence on this in 5.0 anyway); - removal of the old `np.matrix` type in favour of `ndarray`, with some changes to accommodate the different arithmetic semantics; - convert an `__init__` method in a test into just class attributes to allow `pytest` to collect it; - bug fixes for behaviour that was raising warnings we hadn't been paying attention to. I'll be mightily surprised if all 5 CI runs pass immediately with warnings enabled; I haven't tested MKL on my laptop, and a quick glance at old logs suggests that SciPy 1.4 might be issuing a few more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506:666,Test,Tests,666,https://qutip.org,https://github.com/qutip/qutip/pull/1506,8,"['Test', 'log', 'test']","['Tests', 'logs', 'test', 'tested', 'testing']"
Testability,"This PR introduces a new generator function, qubit_clifford_group, that yields each member of the single-qubit Clifford group as a Qobj. This functionality should be useful in contexts such as quantum error correction and randomized benchmarking.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358:233,benchmark,benchmarking,233,https://qutip.org,https://github.com/qutip/qutip/pull/358,1,['benchmark'],['benchmarking']
Testability,"This PR introduces a new metric, unitarity, based on [work with Wallman, Harper and Flammia](https://scirate.com/arxiv/1503.07865). In that work, we show that this metric is useful for discriminating between coherent and incoherence noise. As such, I hope that contributing an implementation of our new metric to QuTiP will be of use, especially for comparison to experimental data from randomized benchmarking. While it still needs some more documentation and test cases, I wanted to open the PR now to get some initial feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/357:398,benchmark,benchmarking,398,https://qutip.org,https://github.com/qutip/qutip/pull/357,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:698,log,log,698,https://qutip.org,https://github.com/qutip/qutip/pull/1513,3,['log'],['log']
Testability,"This PR is very much still in progress, but adds three very nice new features inspired by the rather widespread interest in diamond norms (see, for example, pyGSTi, SchattenNorms.jl, QETLAB). Having them in QuTiP should help a lot. I've run some informal checks against other libraries, and the results returned by the new dnorm method agree pretty well; I'll write more formal tests soon. Adding tensor swap and dual channel functionality is helpful in writing specialized cases for dnorm based on the observation that the diamond norm for positive maps is the same as the completely-bounded infinity norm (see [Johnston and Kribs](http://arxiv.org/pdf/1102.0948v2.pdf) and Watrous' notes). I hope to have this case added to dnorm soon as well, but I wanted to focus on making sure that the prerequisite features are included and well-tested. Thanks to @ysanders for pointing out that CVXPY has come a long way recently. With that library in place, I think it's a good time to get dnorm() out there.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/456:378,test,tests,378,https://qutip.org,https://github.com/qutip/qutip/pull/456,2,['test'],"['tested', 'tests']"
Testability,"This PR should fix #451 by adding an additional check to `Qobj.iscp` to check the hermicity-preserving condition. Since this is a useful condition in its own right, the PR also adds `Qobj.ishp` to expose that logic separately. Finally, new unit tests have been added to check for regressions on #451, and for the new `Qobj.ishp` attribute.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/452:209,log,logic,209,https://qutip.org,https://github.com/qutip/qutip/pull/452,2,"['log', 'test']","['logic', 'tests']"
Testability,"This PR starts work on fixing #388 by splitting out much of the logic handling lists of dims into a new module, `dims_utils`, and providing a new function that converts between indices into `Qobj.dims` and tensor indices (as used by `np.reshape`). While this PR is not yet done, I wanted to make a PR for the fixes early to solicit feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389:64,log,logic,64,https://qutip.org,https://github.com/qutip/qutip/pull/389,1,['log'],['logic']
Testability,"This PR suggests enhancing the `qutip.metrics` module by adding a new distance b/w quantum states: the quantum Hellinger distance (QHD), implemented as new function `qutip.metrics.hellinger_dist()`. Excellent description is provided for example in:; _Geometric measures of quantum correlations with Bures and Hellinger distances_, D. Spehner, F. Illuminati, M. Orszag, W. Roga, https://arxiv.org/abs/1611.03449. Albeit a bit less popular than already implemented Bures and trace distances, the QHD is actively studied, eg:; https://arxiv.org/abs/1903.10455; https://arxiv.org/abs/1806.10814; https://arxiv.org/abs/1510.06995. The PR contains tests of properties of the QHD as outlined in arXiv:1611.03449. I am of course keen on performing additional tests, code refactoring, documentation of this feature etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998:642,test,tests,642,https://qutip.org,https://github.com/qutip/qutip/pull/998,2,['test'],['tests']
Testability,This Pull attempts to fix the issues with Win not finding RHS functions when repeated time-dependent solvers are used in the tests. I have also added some unit tests to verify that rhs_reuse still works.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/729:125,test,tests,125,https://qutip.org,https://github.com/qutip/qutip/pull/729,2,['test'],['tests']
Testability,"This branch adds support for `rho0` argument to `mesolve` being a superoperator, to resolve #384. The functionality has been added to all the different mesolvers (but not the sesolvers). Unit tests are added to tests/test_mesolve.py in a new class, `TestMESolveSuperInit`. There are tests for all the different mesolvers, and the result with `rho0` as a density matrix is compared to the result for `rho0` being the identity super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:192,test,tests,192,https://qutip.org,https://github.com/qutip/qutip/pull/404,9,"['Test', 'test']","['TestMESolveSuperInit', 'TestMESolveTDDecay', 'tests']"
Testability,"This branch adds the ability to calculate two-time correlations with fully time-dependent Hamiltonians and collapse operators. The time-dependence may now either be in the Hamiltonian or the collapse operators, or both. Additionally, support for the numpy list format was added. New tests were made to test all of these functionalities. Bugs were fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/509:283,test,tests,283,https://qutip.org,https://github.com/qutip/qutip/pull/509,2,['test'],"['test', 'tests']"
Testability,"This change enables the use of Python standard logging, and backs it by a new qutip.settings entry. A few instances of classic `if debug: print` style logging have been refactored. The new `qutip.settings` entry is based on [configobj](http://configobj.readthedocs.org), with a fallback to classic `~/.qutiprc` parsing if that library is not available. Errors in the new functionality introduced by this commit are also logged, and can be accessed by setting up `logging.basicConfig` _before_ importing QuTiP. The optional configobj dependency should almost always be met, since it's shipped with matplotlib.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:47,log,logging,47,https://qutip.org,https://github.com/qutip/qutip/pull/248,4,['log'],"['logged', 'logging']"
Testability,This commit should fix #331 and add extra tests to prevent regression. The new tests are of the form encountered in #332.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/333:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/333,2,['test'],['tests']
Testability,"This document is a design specification for new dimensions handling. It is only a draft right now; please feel free to offer comments and suggestions. If you only read one section, read ""Overview"" inside ""Proposal"" to get the gist of what will happen. ## Background. For an extended discussion of some of the problems in 4.x branch dimension handling, see #1320. With the new system, we aim to solve a few main problems:; 1. `Qobj` `type` inference should be instantaneous; 2. Binary operation dimension compatibility tests should be instantaneous; 3. Dimension/shape equality tests should be instantaneous; 4. Invalid dimensions should not be representable; Currently, dimension handling is the major overhead in `Qobj` because these problems are not solved. The allowed exception to point 1 is if we include a short-hand notation to represent dimension objects; we may allow a ""pure-Python"" representation (effectively the current dimension specification) to be parsed into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:518,test,tests,518,https://qutip.org,https://github.com/qutip/qutip/issues/1421,2,['test'],['tests']
Testability,"This feature starts work towards implementing diamond norms between quantum channels by providing Stinespring dilations of `type=""super""` Qobjs. This requires generalizing the current `to_kraus` feature, since the left and right Kraus operators are the same only for CP maps, whereas the arguments to diamond norms are very often not CP (in particular, will often be a difference, || \Lambda_1 - \Lambda_2 ||_\diamond). The pull request is currently in an incomplete state, so as to solicit feedback before solidifying the design. The docstrings are missing or are incomplete, Python 3 compatibility has not yet been tested, and I still need to make unit tests. Most importantly, the `dims` attribute of the input Qobj is not yet preserved, in lieu of solving #331.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/332:617,test,tested,617,https://qutip.org,https://github.com/qutip/qutip/pull/332,2,['test'],"['tested', 'tests']"
Testability,"This fixes #688, following the suggestion by @mrcalixe. The fix sets the swap targets to `[N - i - 1, i]`, instead of setting a target and a control separately. The method `qft_gate_sequence` was untested: This pull request provides various test cases of varying length (1-6) and with and without swapping enabled.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/709:241,test,test,241,https://qutip.org,https://github.com/qutip/qutip/pull/709,1,['test'],['test']
Testability,"This fixes the calls to the `qutip.configrc` module in `qutip/__init__.py` when setting up OpenMP. Also, this tidies up a lot of very old code out of `__init__.py` that was testing for ancient versions of SciPy and Numpy. Since we have hard requirements at installation time for those, it's fine for us not to test their versions at initialisation. We still should check the version of Cython because it's an optional dependency, so isn't always constrained by the package manager. Some of the changes deliberately make `qutip/__init__.py` less forgiving of exceptions, especially when it comes to loading up `pyximport`. This is deliberate, even though it may make a couple more errors surface that have previously gone undetected. As it stands right now, the file will causes several errors to be silently ignored, even if they weren't the error we were testing for. That masks problems for a short while, but they usually resurface during use when they're much harder to debug. We should be solving the underlying problems, not sweeping them under the rug. In particular, we've frequently had complaints about `pyximport` failing, or trying to import OpenMP modules that have previously been compiled but aren't currently active, and things like that. This patch won't fix all those problems, but it hopefully will make some of them easier to debug when they do appear. There is more explanation to the logic behind each change in the commit messages. Fix #1470.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1471:173,test,testing,173,https://qutip.org,https://github.com/qutip/qutip/pull/1471,4,"['log', 'test']","['logic', 'test', 'testing']"
Testability,"This has been going on for a while now - `test_diag_liou_mult` fails about ~5-10% of the time on Travis runs, with only 1 or 2 elements of the huge matrix differing by a small relative tolerance. I _think_ this started around the time that scipy 1.5 was released, which changed how `scipy.linalg.eigh` chose its underlying LAPACK driver, and broke a load of tests that relied on our custom `eigh` functions reproducing the `scipy` behaviour exactly (#1299). At the time we fixed those tests (#1298, #1301), but this intermittent failure of `test_diag_liou_mult` may have slipped through. Equally, at the same time on `dev.major` I think I was moving the `brtools` internals to use the new `CSR` types, which involved rewriting things like `diag_liou_mult`. I don't think this is the cause (though I may have done at the time), because we see the intermittent test failures still on `master`, which does not use the new types yet. I'm not absolutely certain the `eigh` changes are the cause, which is why I don't want to just bump up `atol`/`rtol` in the test without going through and calculating what the acceptable tolerance _should_ be. This is a note for posterity. I'll look into it myself and try and determine the true root cause, and PR an appropriate change.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1431:358,test,tests,358,https://qutip.org,https://github.com/qutip/qutip/issues/1431,4,['test'],"['test', 'tests']"
Testability,"This is a quick proof of concept for the approach listed in qutip/qutip#88. I've added and unit tests and modified those made by @bcriger, but one of them is currently failing for something deep in `norm()` that I'm not yet sure how to fix, sorry.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/90:96,test,tests,96,https://qutip.org,https://github.com/qutip/qutip/pull/90,1,['test'],['tests']
Testability,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:185,log,logically,185,https://qutip.org,https://github.com/qutip/qutip/pull/1583,2,"['log', 'test']","['logically', 'testing']"
Testability,"This is causing test failures in all CI builds against scipy 1.5 currently. The other failing tests on scipy 1.5 are due to changes to the handling of `csr` matmul operations, which is fixed in patch #1298. As far as I can see, there is no way to recover the exact same behaviour as existed in scipy < 1.5 (there's optimisations of the `lwork` input to the LAPACK routine), and consequently we are not getting the exact same set of eigenvectors for problem dimensions > 32. This does not mean that `brtools` is suddenly doing something wrong. It just means that the test assumed we would have the exact same output as `scipy`, and we don't any more. . This is an annoying problem to fix, I think. Two possible methods:. 1. attempt to ""trick"" scipy into doing the same pre-1.5 behaviour. Possibly this would involve monkey-patching out the ability of `eigh` to optimise the `lwork` parameters (i.e. stubbing out `scipy.linalg.lapack._compute_lwork` to always return `lwork=18*nrows`, `lrwork=24*nrows` and `liwork=10*nrows` to match `qutip.cy.brtools.ZHEEVR`).; 2. do some linear algebra work to determine that the eigenvectors we have returned are equivalent to the ones scipy has returned. 2 is a better solution, but harder to implement, especially in the presence of degenerate or near-degenerate eigenvalues (of which there are likely a lot around 0). 1 is very unsatisfying, but might be enough. In general, this problem will hopefully be solved a bit more thoroughly when `brmesolve` is updated to use the new data layer types, and we standardise the calculation of eigenvalues and -vectors across QuTiP. Hopefully someone has a better idea than me? @Ericgig, @nonhermitian.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299:16,test,test,16,https://qutip.org,https://github.com/qutip/qutip/issues/1299,4,"['stub', 'test']","['stubbing', 'test', 'tests']"
Testability,This is in ref to #610. I have also cleaned up some pep8 and added a test for `add_gate`. This is now ready for review. @ajgpitch,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/611:69,test,test,69,https://qutip.org,https://github.com/qutip/qutip/pull/611,1,['test'],['test']
Testability,"This is post for discussion over whether it might be beneficial to consider additional continuous integration (CI) tools for QuTiP, beyond Travis CI. . Some open-source projects use multiple CI tools, possibly to do different tasks and test different configurations. For example by adding QuTiP to the list of projects using Sphinx for the documentation I noticed they use concurrently Travis CI, CircleCI and [Appveyor](https://github.com/marketplace/appveyor). . [Stackshare](https://stackshare.io/stackups/circleci-vs-jenkins-vs-travis-ci) allows to compare multiple developers tools.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959:236,test,test,236,https://qutip.org,https://github.com/qutip/qutip/issues/959,1,['test'],['test']
Testability,This is post for discussion over whether it might be beneficial to switch from `nose` to another unit testing software. . - QuTiP is using nose for unit testing. A [disclaimer](https://nose.readthedocs.io/en/latest/) on that project homepage warns that nose might not be maintained in the future. . - [`nose2`](https://nose2.readthedocs.io/en/latest/differences.html) is the successor to `nose`. It is actively maintained. There are some [differences](https://nose2.readthedocs.io/en/latest/differences.html). . - [pytest](https://pytest.readthedocs.io/en/latest/) is another open-source solution. By comparing [nose2](https://github.com/nose-devs/nose2/graphs/contributors?from=2010-08-01&to=2019-02-27&type=a) and [pytest](https://github.com/pytest-dev/pytest/graphs/contributors?from=2009-04-05&to=2019-02-27&type=a) activity it seems that the latter has grown and is actively updated. . I wonder whether it would make sense to migrate to a more popular (possibly more robust?) software and how much work this would mean. Other implications are not clear to me at this moment.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/958:102,test,testing,102,https://qutip.org,https://github.com/qutip/qutip/issues/958,2,['test'],['testing']
Testability,This is testing using oldest supported numpy and enabling 3.10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1738:8,test,testing,8,https://qutip.org,https://github.com/qutip/qutip/pull/1738,1,['test'],['testing']
Testability,"This is the base PR for the split-up of #1181. This one puts in all the helper functions and updates to previously converted files that are present in that PR, and needs to be merged first before any of the others can be merged. The commits are tidied up and rebased onto `master`. This is the base PR for #1250, #1251 and #1252. **Changelog**; Add pytest helper functions for large-scale test refactoring",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249:389,test,test,389,https://qutip.org,https://github.com/qutip/qutip/pull/1249,1,['test'],['test']
Testability,This is to fix issue #413 that caused new installations to be non-functional.; Anyone got any ideas as to why this was not picked up by the travis tests?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/414:147,test,tests,147,https://qutip.org,https://github.com/qutip/qutip/pull/414,1,['test'],['tests']
Testability,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1589:601,test,tested,601,https://qutip.org,https://github.com/qutip/qutip/pull/1589,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:22,test,testing,22,https://qutip.org,https://github.com/qutip/qutip/pull/1551,8,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,This new function doesn't calculate the explicit sqrtm() unless; absolutely necessary to improve numerical stability. Also includes new; tests to check for regressions of #361.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/362:137,test,tests,137,https://qutip.org,https://github.com/qutip/qutip/pull/362,1,['test'],['tests']
Testability,"This pull implements a safety check where the Qobj data class is validated as fast_csr_matrix type everytime the Q.data attribute is set. This guarantees that the Qobj's have the correct data type. This was not always true previously. In addition, many items are fixed so that the above rule passes. Finally, we no longer need the tests that check for Qobj csr_matrix type. This is now strictly enforced.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609:331,test,tests,331,https://qutip.org,https://github.com/qutip/qutip/pull/609,1,['test'],['tests']
Testability,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:653,test,test,653,https://qutip.org,https://github.com/qutip/qutip/pull/1362,1,['test'],['test']
Testability,"This should at least partially address #377, as it seems that `from __future__ import absolute_import` isn't causing the built-in `logging` to appear in preference to `qutip.logging` on Windows 8. Given the hassles of calling both `logging`, the idea behind this PR is to just rename and avoid conflicts that way.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379:131,log,logging,131,https://qutip.org,https://github.com/qutip/qutip/pull/379,3,['log'],['logging']
Testability,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1576:98,log,logic,98,https://qutip.org,https://github.com/qutip/qutip/pull/1576,2,['log'],['logic']
Testability,This test seems to be failing with. ```; Sparse eigs Hermitian ... /home/travis/.travis/job_stages: line 57: 6699 Segmentation fault (core dumped) nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; ```; I will try and recreate locally,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/871:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/issues/871,1,['test'],['test']
Testability,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1474:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/1474,5,"['log', 'test']","['logic', 'test']"
Testability,"This took longer than anticipated because of a bunch of knock-on nasty Cython problems, and I struggled to get OpenMP running locally on macOS ([but I've got it now](https://www.binhbar.com/posts/2020/06/compiling-openmp-libraries-on-macos/)). Tag: @Ericgig, @ajgpitch. ---. Separate out what will become the ""core"" of qutip into its own subpackage. This package is intended to have most of its public symbols re-imported into the global package namespace. There should be no substantive changes to any actual worker code in this large commit, just what is necessary to carve out a major entangled part of the core library. Some files currently in core may be moved out in a future version (e.g. graph, metrics, semidefinite), but right now they are too entangled with `Qobj` or other true-core parts, and to remove them now would require too much substantive change to the code, which would be difficult to review in this commit. Major changes required as part of this:; - module-level imports (e.g. `from qutip.qobj import Qobj`) are replaced with simple ones from the namespace (e.g. `from qutip import Qobj`). While inside the `core` package, imports are kept as module-specific, largely to support the mess of circular imports present in qutip at the more.; - .pxi files are no longer recommended as the way to share code between Cython files, so these have been converted into proper Cython modules and added to the distribution.; - collection of Cython extension components in `setup.py` is consolidated to support them no longer all existing in the same place. As the data layer is fleshed out, likely there will be even more Cython locations present.; - the test for OpenMP in `__init__.py` had to be made more indirect via importlib to avoid causing a full import of `qutip.core`, which would in turn cause Qobj and other parts to be imported. These components required `__init__.py` to have discovered whether OpenMP existed already before they were imported, causing false negatives.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282:1667,test,test,1667,https://qutip.org,https://github.com/qutip/qutip/pull/1282,1,['test'],['test']
Testability,"This tries to address https://github.com/qutip/qutip/issues/73 using some type conversion and some fused types. I see a unit test error due to some fortran thing, and a couple of unit test failures, but I don't know if they are related.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76:125,test,test,125,https://qutip.org,https://github.com/qutip/qutip/pull/76,2,['test'],['test']
Testability,"This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:; ```; File ""C:\Users\ym24chen\Anaconda3\; x = lu.solve(b, verbose=verbose); File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000000000008; envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve; ```. Env info:; ```; QuTiP Version: 4.3.1; Numpy Version: 1.15.4; Scipy Version: 1.1.0; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.2; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip; ==============================================================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975:242,test,testing,242,https://qutip.org,https://github.com/qutip/qutip/issues/975,1,['test'],['testing']
Testability,Tidy up pep8 and minor logic bugs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1575:23,log,logic,23,https://qutip.org,https://github.com/qutip/qutip/pull/1575,1,['log'],['logic']
Testability,"TimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_457496861",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24183,test,tests,24183,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"To get more familiar with bits of the internals, I'm going through and migrating the tests to `pytest`. While I'm at it, I'm also fixing PEP8 issues in the testing files, since CodeClimate will moan at me if I don't. I'm basically learning how to use `pytest` and how to code as part of an organisation as I go, so please feel free to correct me if I'm doing something wrong. I'll leave this PR as in draft mode until I've made it through more of the testing files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1164:85,test,tests,85,https://qutip.org,https://github.com/qutip/qutip/pull/1164,3,['test'],"['testing', 'tests']"
Testability,"Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ERROR; td_brmesolve: time-dependent a_ops ... ERROR; td_brmesolve: time-dependent a_ops tuple of strings ... ERROR; td_brmesolve: time-dependent a_ops tuple interp ... ERROR; td_brmesolve: time-dependent a_ops & c_ops interp ... ERROR; td_brmesolve: non-Hermitian e_ops check ... ERROR; td_brmesolve: states check ... ERROR; td_brmesolve: split ops #1 ... ERROR; td_brmesolve: split ops #2 ... ERROR; td_brmesolve: split ops, Cubic_Spline td-terms ... ERROR; td_brmesolve: split ops, multiple ... ERROR; td_brmesolve: Hamiltonian args ... ERROR; BR Tools : zheevr ...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197:946,test,tests,946,https://qutip.org,https://github.com/qutip/qutip/issues/1197,1,['test'],['tests']
Testability,Travis CI tests - Specify blas type in conda env create,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/876:10,test,tests,10,https://qutip.org,https://github.com/qutip/qutip/pull/876,1,['test'],['tests']
Testability,"Travis CI tests update - NOMKL+OPENMP, cvx NOMKL only",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/875:10,test,tests,10,https://qutip.org,https://github.com/qutip/qutip/pull/875,1,['test'],['tests']
Testability,"Travis only runs 5 test suite in parallel. Each tested commit have 6 to 8 test suite (add 3.8 and 3.8 for mac) and each test take 20 to 30min. So if many of us are working at the same time, automated test can take a few hours to run (like today).; I propose:; 1) Run the short suite for older python version (3.6 and 3.7), keeping the full test for only the latest for each os (linux + mac).; 2) For the specialised test (mkl, openmp, no cython) only run test affected by it. While this will probably not speed up for when only one PR is done, it should help when many are lined up. (2) could be done by adding new marks for the tests. @jakelishman, will this cause conflict with your unmerged PRs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/issues/1217,9,['test'],"['test', 'tested', 'tests']"
Testability,Travis tests currently unpredictable,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/430:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/issues/430,1,['test'],['tests']
Testability,Travis tests failing for MacOS - incorrect checksum for freed object,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/issues/963,1,['test'],['tests']
Testability,"Two small bugs appeared in floquet steadystate in v5, this is a quick patch. **Description**; Two bugs:. 1) Small minus sign error in one of the terms (comparing to v4.7 and what is written in the old toolbox guide). 2) Some kind of data copying confusion with the S and T operators when updating their data contents with the results. Just initiating these two separately seems to fix it. other minor fix: updated the link to the toolbox guide. Some other minor niggles that I didn't fix:; - some of the optional solver methods dont work (seem not to support square right hand sides in '_data.solve()'. I didn't dig much on fixing these though. - the 'splu' method fails for a couple of reasons. I can get it to work by removing the choice of warnings as errors in 'solve.py' (which make it fail in other instances as well i suppose, like with normal steadystate()), making sure the solver option is not passed to steadystate(), and making sure that S and T are always converted back to CSR() after being updated in the iterative bit (in `steadystate_floquet()' they get returned as dense from _data.solve). I did not include those changes here though as the docstrings dont actually indicate support for splu anyway, so perhaps not needed. I am marking this as draft at the moment as I also want to update the test to be sensitive to these bugs (its a bit too coarse at the moment), and double check that the results from this solver are now correct. **Related issues or PRs**; fix #2386",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393:1311,test,test,1311,https://qutip.org,https://github.com/qutip/qutip/pull/2393,1,['test'],['test']
Testability,Typo in nose tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/106:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/106,1,['test'],['tests']
Testability,Udated tests to 3.8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1214:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1214,1,['test'],['tests']
Testability,Unit test for #490.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/495:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/495,1,['test'],['test']
Testability,"Unit testing software: nose, nose2, pytest",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/958:5,test,testing,5,https://qutip.org,https://github.com/qutip/qutip/issues/958,1,['test'],['testing']
Testability,Unit tests for fast_csr class,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/586:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/586,1,['test'],['tests']
Testability,Unit tests should be added for each of the main methods control.pulse_optim.; These should be based on the examples in qutip_notebooks; Gradient calcs should also be checked,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/368:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/issues/368,1,['test'],['tests']
Testability,Units tests added for the qutip.control modules; Tests based on the notebook examples; Some other small fixes applied to issues found during the testing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/383:6,test,tests,6,https://qutip.org,https://github.com/qutip/qutip/pull/383,3,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,Unreliable correlation tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/607:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/607,1,['test'],['tests']
Testability,Unreliable tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/621:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/issues/621,1,['test'],['tests']
Testability,"Unstable `qutip.testing.run()` prompts abort traps locally (Mac, Python 3.7)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:16,test,testing,16,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['test'],['testing']
Testability,Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1791:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/1791,1,['test'],['tests']
Testability,Update diag_liou_mult test tolerances,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1486:22,test,test,22,https://qutip.org,https://github.com/qutip/qutip/pull/1486,1,['test'],['test']
Testability,Update steadystates tests to pytest,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1679:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/1679,1,['test'],['tests']
Testability,Update test matrix to include python 3.12,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2309:7,test,test,7,https://qutip.org,https://github.com/qutip/qutip/pull/2309,1,['test'],['test']
Testability,Update tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1125:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1125,1,['test'],['tests']
Testability,Update the release action to push to testpypi and allow dev release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2069:37,test,testpypi,37,https://qutip.org,https://github.com/qutip/qutip/pull/2069,1,['test'],['testpypi']
Testability,"Update to the original 4.5.1 which is already a month old. New inclusions: . Better error message for failed string coefficient compilation.; Run the python 3.8 test in travis. (by Simon Cross ); Fix clebsch function for half-integer (by Thomas Walker); Deprecate graph function (by Jake Lishman); Fix travis warning (by Ivan Carvalho); Fix spin husimi/wigner functions (by maij). I would like the mac stuff to be fixed and moving the mac test to 3.8, but that will take some time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1215:161,test,test,161,https://qutip.org,https://github.com/qutip/qutip/pull/1215,2,['test'],['test']
Testability,Update with micro release to 4.5.1 to include bug fix on tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1173:57,test,tests,57,https://qutip.org,https://github.com/qutip/qutip/pull/1173,1,['test'],['tests']
Testability,Updated travis.yml to move to pytest. ; Also updated qutip.testing to use pytest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131:59,test,testing,59,https://qutip.org,https://github.com/qutip/qutip/pull/1131,1,['test'],['testing']
Testability,Updating superop module tests allowing rectangular channels/channels with tracing representation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1491,1,['test'],['tests']
Testability,"Updating tests in meetrics, superops,and tensor modules",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487:9,test,tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/1487,1,['test'],['tests']
Testability,Use anaconda for Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/300,1,['test'],['tests']
Testability,Use scipy's svd in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2239:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/2239,1,['test'],['tests']
Testability,"UserWarning: Multiplying superoperators with different representations; issued during tests.; @cgranade I think you implemented this part. Is this something to concern; I mainly raised it as I have spent my evening removing all the other warnings from the tests, so would be nice to clear them all",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/433:86,test,tests,86,https://qutip.org,https://github.com/qutip/qutip/issues/433,2,['test'],['tests']
Testability,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1550:299,test,test,299,https://qutip.org,https://github.com/qutip/qutip/pull/1550,2,"['log', 'test']","['logarithmic', 'test']"
Testability,"We (mainly @Ericgig ) are developing some changes that would only be included in the next major release. It would make sense to merge these into one branch, but not the `master` branch, so that we can test their compatibility. Maybe `development` is a good name, although we often refer to our `master` as the 'development' branch. I have seen some template for this in another project, but cannot remember where. If anyone has some ideas for this, then would be good if they could share here",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/964:201,test,test,201,https://qutip.org,https://github.com/qutip/qutip/issues/964,1,['test'],['test']
Testability,"We get warnings when compiling using the mingw32 compiler under windows.; ```; ""unknown conversion type 'z' in format""; ```; The warnings only seem to occur during the tests and not the build_ext, so there may be something we can do with CFLAGS. ; I have done quite a lot of reading around and it seems many projects suffer from this. There did not seem to be a clear resolution, other than to change the C code. We don't seem to use the 'z' in any of our source, but it is found in all the so files, so I guess it is used in one of the dependencies, and hence I don't think we can take that approach.; The tests still seem to pass, so I am putting it down as a won't fix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/597:168,test,tests,168,https://qutip.org,https://github.com/qutip/qutip/issues/597,2,['test'],['tests']
Testability,"We have a number of pull requests that are all nice fixes and enhancements, however we are delaying merging because of travis test failures. I can't see how any of these pull request can be an underlying cause:; #421; #422; #428; #429. So I will merge all these. We can then investigate what is causing some of the tests to fail under this issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/430:126,test,test,126,https://qutip.org,https://github.com/qutip/qutip/issues/430,2,['test'],"['test', 'tests']"
Testability,"We presently support operator in data layer including binary operators with themselves (`CSR + CSR`). But we use them sometime without confirming that both data object are of the same type, which will eventually cause bugs. Here I remove this support and fixed many places were we used them, but there are probably some uses remaining in place not covered by tests. This is an alternative solution to the issue from #1647.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1649:359,test,tests,359,https://qutip.org,https://github.com/qutip/qutip/pull/1649,1,['test'],['tests']
Testability,"What should we do with the qutip/examples directory? It contains a lot of old stuff which is not really maintained anymore, but there are still some useful tests examples there. The current situation is:. qutip/qutip/examples - official examples accessible through the GUI and used in the docs; qutip/qutip/tests - unit tests; qutip/notebooks - development tests and benchmarks; qutip/examples - no clear purpose and not well maintained. We need to think about what we want to do with the examples directory and what purpose these example scripts have. I'm inclined to getting rid of these examples in favor or more contextual development examples in notebook form stored in qutip/notebooks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/23:156,test,tests,156,https://qutip.org,https://github.com/qutip/qutip/issues/23,5,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"When I tried to use the `qutip.squeeze` function for my simulations I noticed that something was off. Upon further investigation I found out that the output is not a truncated version of the single-mode squeezing unitary, but rather the matrix exponential of the truncated generator. These are _very_ different things!. Am I right in assuming that the most useful matrix would be the truncated unitary? If that's the case, the current method to compute it is wrong. To compute the right matrix one can use the disentangling formula for SU(1,1) (formula (31) [here](http://aip.scitation.org/doi/pdf/10.1063/1.3413923)):. ```python; def squeeze(n,z):; s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); s1 = -2*np.log(np.cosh(abs(z))); s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); ; L = s0*0.5*(qt.create(n)*qt.create(n)); K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); ; return (L.expm())*(K.expm())*(R.expm()); ```. As you can see, this definition does *not* depend on the truncation parameter. Specifically, the upper-left portion of the matrix that `qutip.squeeze` outputs converges to my `squeeze` function for large `n`. I suspect that one can apply similar arguments to other functions in `qutip`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661:706,log,log,706,https://qutip.org,https://github.com/qutip/qutip/issues/661,1,['log'],['log']
Testability,"When I was trying to run a script written with qutip on a cluster with Ubunt 18.04, python 2.7 conda 4.7.12 installed, the following error occurred. Traceback (most recent call last):; File ""test.py"", line 13, in <module>; from qutip import *; File ""/home/user/miniconda2/lib/python2.7/site-packages/qutip/__init__.py"", line 171, in <module>; from qutip.qobj import *; File ""/home/user/miniconda2/lib/python2.7/site-packages/qutip/qobj.py"", line 2434, in <module>; import qutip.superop_reps as sr; File ""/home/user/miniconda2/lib/python2.7/site-packages/qutip/superop_reps.py"", line 61, in <module>; from qutip.superoperator import vec2mat, spre, spost, operator_to_vector; File ""/home/user/miniconda2/lib/python2.7/site-packages/qutip/superoperator.py"", line 408, in <module>; from qutip.qobjevo import QobjEvo; File ""/home/user/miniconda2/lib/python2.7/site-packages/qutip/qobjevo.py"", line 515; raise TypeError(""Qobj not compatible."") from e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1119:191,test,test,191,https://qutip.org,https://github.com/qutip/qutip/issues/1119,1,['test'],['test']
Testability,"When calling `ssesolve` or `smesolve` without any stochastic collapse operators but `store_measurement` set to True, there is an IndexError. This PR fixes the error and adds a test for this situation. Example code:; ```python; import qutip as qt; r = qt.ssesolve(qt.sigmaz(), qt.basis(2, 1), [0, 1, 2], options={'store_measurement': True}, ntraj=15); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2423:176,test,test,176,https://qutip.org,https://github.com/qutip/qutip/pull/2423,1,['test'],['test']
Testability,"When using qutip.propagator with unitary_mode='single' and parallel=False, the result does not have the same dims as the Hamiltonian, for other setting it does work.; Minimal example (tested with qutip 4.4.1):; ```; In [1]: import qutip . In [2]: H = qutip.tensor([qutip.qeye(2)]*2) . In [3]: H.dims ; Out[3]: [[2, 2], [2, 2]]. In [4]: qutip.propagator(H, 1 , unitary_mode='single', parallel=True).dims ; Out[4]: [[2, 2], [2, 2]]. In [5]: qutip.propagator(H, 1, unitary_mode='batch').dims ; Out[5]: [[2, 2], [2, 2]]. In [6]: qutip.propagator(H, 1 , unitary_mode='single').dims ; Out[6]: [[4], [4]]```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1152:184,test,tested,184,https://qutip.org,https://github.com/qutip/qutip/issues/1152,1,['test'],['tested']
Testability,"When using the `rhs_with_state=True` with list func type time dependence the state is passed to the user defined func as a numpy vector. I think users would expect this to be a `Qobj`, as in:; https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4. The question is whether this should be considered a bug, and hence whether we can fix this without worrying too much about how this will affect other users. My guess it that it is not a well used feature anyway @nonhermitian what do you think? There is no documentation on it's usage for instance, and I don't think there are any tests for it. This is perhaps related #824, insomuchas any fix we do here should be replicated in sesolve as well. The fix seems quite easy, as I think we can assume that the `rho` can be converted as; ```; def drho_list_td_with_state(t, rho, L_list, args):; d = np.sqrt(len(rho_vec)); rho_qobj = QObj(dense2D_to_fastcsr_fmode(vec2mat(rho), d, d)); ```; @Ericgig how do you accommodate rhs_with_state in `QobjEvo`?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947:582,test,tests,582,https://qutip.org,https://github.com/qutip/qutip/issues/947,1,['test'],['tests']
Testability,"While trying to migrate to pytest from nose , #1131, there is only one failed test arising on all platforms. ; The problem seems to be a test in the `control` module, exactly it is `qutip.tests.test_control_pulseoptim.TestPulseOptim` called by `test_03_dumping(self):` on line 340. . ```; AttributeError: 'TestPulseOptim' object has no attribute 'tmp_dirs'; ```; Indeed, TestPulseOptim seems to have this attribute where `tmp_dirs`; are defined, ; ```; def setUp(self):; # list of file paths to be removed after test; self.tmp_files = []; # list of folder paths to be removed after test; self.tmp_dirs = []; ```; Any help @tehruhn and @ajgpitch would be great. I think one should call `setUp`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1134:78,test,test,78,https://qutip.org,https://github.com/qutip/qutip/issues/1134,8,"['Test', 'test']","['TestPulseOptim', 'test', 'tests']"
Testability,"Windows does not allow opening a tempfile.NamedTemporaryFile more than once, so it's not really suitable for a lot of uses. We just remove this fixture and use `in_temporary_directory` instead. Fix #1311 . **Changelog**; Fix fileio tests on Windows",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1312:232,test,tests,232,https://qutip.org,https://github.com/qutip/qutip/pull/1312,1,['test'],['tests']
Testability,"With cython0.29 that came out this weeks there where warning at ""cythonization"" about language_level. Complied with it by adding `#cython: language_level=3` at the start of every .pyx and .pxd. Also rename the cy/*testing* files to cy/*checks* since nose detected them as tests to run which caused automated tests to fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/927:214,test,testing,214,https://qutip.org,https://github.com/qutip/qutip/pull/927,3,['test'],"['testing', 'tests']"
Testability,"With this PR mesolve and mcsolve accept single operators as input for the collapse operator or the operator for which the expectation value is calculated. Internally, a list containing only that operator is constructed and passed on. I added test cases, by just copying a test that was already there and changing the input to a single operator for the collapse and expectation value respectively. For mcsolve the tests take quite some time, so a simpler test might be better. Any idea?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/5:242,test,test,242,https://qutip.org,https://github.com/qutip/qutip/pull/5,4,['test'],"['test', 'tests']"
Testability,"[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; sta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:2997,test,tests,2997,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4609,test,tests,4609,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4252,Test,TestKrylovSolve,4252,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 self.format = 'csr'. AttributeError: property 'format' of 'fast_csr_matrix' object has no setter; ```. ### Expected Behaviour. I expected to be able to import qutip :) . ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.11.0; Cython Version: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:2527,test,test-env-scipy-qutip,2527,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3024,Test,TestKrylovSolve,3024,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:7328,test,tests,7328,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"_.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24699,test,tests,24699,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12497,test,tests,12497,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"_; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26669,test,tests,26669,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_Last updated: 2020-08-12_. This is an issue for tracking and publicising the development status of a separated data layer. This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of `Qobj`. This document and issue will change over time. Development is taking place on the [`dev.major` branch](https://github.com/qutip/qutip/tree/dev.major) in `qutip/qutip`. Pull requests implementing new features:; - #1282 separating out the core QuTiP operations into a (logical but user-transparent) package `qutip.core`.; - #1296 implementing the first parts of the data multiple dispatch and new data types.; - #1332 replacing the `fast_csr_matrix` with the new Cython type `CSR` all across QuTiP; - #1338 implementing the data-layer creation, conversion and dispatcher routines. We are writing a new ""developers' guide"" to explain the logic behind the design decisions, and help new QuTiP developers work on the code. You can follow initial development hosted as [a repo in my user account](https://github.com/jakelishman/qutip-devguide) until we decide how this will be added to the main documentation. You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide. Some design documents:; - [data layer](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/01-data-time-layer-separation.md); - [data structure implementation choices](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:549,log,logical,549,https://qutip.org,https://github.com/qutip/qutip/issues/1278,2,['log'],"['logic', 'logical']"
Testability,"__ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().of",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2695,test,tests,2695,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29194,test,test,29194,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"___; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python na",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22161,test,tests,22161,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_____; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python na",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3265,test,tests,3265,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"______ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Use",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6740,test,tests,6740,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"______; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python name",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19453,test,tests,19453,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_______; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16758,test,tests,16758,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"__________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:1661,assert,assert,1661,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['assert'],['assert']
Testability,"__________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14959,test,tests,14959,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_______________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2750,Test,TestIntegratorCte,2750,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,"['Test', 'test']","['TestIntegratorCte', 'tests']"
Testability,"________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13003,test,tests,13003,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8544,test,tests,8544,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/g",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15705,test,tests,15705,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10438,test,tests,10438,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"__________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21106,test,tests,21106,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"__________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28318,test,tests,28318,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11184,test,tests,11184,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/gugliel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13914,test,tests,13914,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17499,test,tests,17499,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25606,test,tests,25606,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4008,test,tests,4008,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_____________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:4158,test,tests,4158,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"_________________________________________________________________________________________________________________. collapse_operators = <function _2_tuple_split at 0x7fe9f0ca6520>. @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tuple_split, marks=pytest.mark.slow),; pytest.param(_2_tuple_splines, marks=pytest.mark.slow),; pytest.param(_2_list_entries_2_tuple_split, marks=pytest.mark.slow),; ]); def test_split_operators_maintain_answer(collapse_operators):; N = 10; w0 = 1.0 * 2*np.pi; g = 0.05 * w0; kappa = 0.15; ; a = qutip.destroy(N); H = w0*a.dag()*a + g*(a+a.dag()); psi0 = (qutip.basis(N, 4) + qutip.basis(N, 2) + qutip.basis(N, 0)).unit(); psi0 = qutip.ket2dm(psi0); times = np.linspace(0, 25, 1000); e_ops = [a.dag()*a, a+a.dag()]; ; me_c_ops, brme_c_ops, a_ops = collapse_operators(N, kappa, times); me = qutip.mesolve(H, psi0, times, me_c_ops, e_ops); > brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops, brme_c_ops). /usr/lib/python3/dist-packages/qutip/tests/test_brmesolve_td.py:256: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:200: in brmesolve; output = _td_brmesolve(H, psi0, tlist, a_ops=a_ops, e_ops=e_ops,; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:482: in _td_brmesolve; exec(code, globals()); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968611'. <string>:1: ModuleNotFoundError; _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:11250,test,tests,11250,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5612,test,testing,5612,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (asser",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5443,test,tests,5443,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14442,test,tests,14442,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"_bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24339,test,tests,24339,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%];,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6344,test,tests,6344,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6356,test,tests,6356,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,_init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11528,test,tests,11528,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11975,test,tests,11975,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4788,test,testing,4788,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11964,test,testing,11964,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/param,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44536,test,tests,44536,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-res,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46073,test,testing,46073,https://qutip.org,https://github.com/qutip/qutip/issues/1740,4,['test'],"['testing', 'tests']"
Testability,"_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3394,test,tests,3394,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"_ref = mesolve(H, rho0, times, c_ops, e_ops); #plot_expectation_values(result_ref); #plt.show(). L = liouvillian(H); D = lindblad_dissipator(c_ops[0]); d1_operator = L + D; def d1_rho_func(t, rho_vec):; return d1_operator * rho_vec. B1 = spre(c_ops[0]) + spost(c_ops[0].dag()); B2 = spre(c_ops[0]) + spost(c_ops[0].dag()); def d2_rho_func(t, rho_vec):; e1 = expect_rho_vec(B1.data, rho_vec, False); drho1 = B1 * rho_vec - e1 * rho_vec. e1 = expect_rho_vec(B2.data, rho_vec, False); drho2 = B2 * rho_vec - e1 * rho_vec. return np.vstack([1.0/np.sqrt(2) * drho1, -1.0j/np.sqrt(2) * drho2]); # Everything above is almost the same as the example. I only modified the following part; result = smesolve(H=H*0, rho0=ket2dm(rho0), times=times,; e_ops=e_ops,; d1=d1_rho_func, d2=d2_rho_func,; d2_len=2, ntraj=ntraj, nsubsteps=nsubsteps*2,; dW_factors=[np.sqrt(2/gamma), np.sqrt(2/gamma)],; store_measurement=True, map_func=parallel_map); ```. The error message; ```; ============================= test session starts ==============================; platform darwin -- Python 3.6.8, pytest-3.3.2, py-1.5.2, pluggy-0.6.0; rootdir: /Users/haiwen/PycharmProjects/Qutip_test, inifile:Total run time: 0.13s. test_smesolve2.py:None (test_smesolve2.py); multiprocessing.pool.RemoteTraceback: ; """"""; Traceback (most recent call last):; File ""/Users/haiwen/anaconda3/lib/python3.6/multiprocessing/pool.py"", line 119, in worker; result = (True, func(*args, **kwds)); File ""/Users/haiwen/anaconda3/lib/python3.6/site-packages/qutip/stochastic.py"", line 1040, in _smesolve_single_trajectory; A_ops, dt, dW[:, t_idx, j, :], d1, d2, sso.args); File ""/Users/haiwen/anaconda3/lib/python3.6/site-packages/qutip/stochastic.py"", line 1789, in _rhs_rho_euler_maruyama; dW_len = len(dW[0, :]); IndexError: index 0 is out of bounds for axis 0 with size 0; """""". The above exception was the direct cause of the following exception:; test_smesolve2.py:53: in <module>; store_measurement=True, map_func=parallel_map); ../../anaconda3/lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029:1933,test,test,1933,https://qutip.org,https://github.com/qutip/qutip/issues/1029,1,['test'],['test']
Testability,_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45034,test,testing,45034,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['testing']
Testability,"_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23493,test,testing,23493,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8421,test,testing,8421,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11061,test,testing,11061,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29023,test,testing,29023,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2157,test,tests,2157,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; lapack_armpl_info:; NOT AVAILABLE; lapack_mkl_info:; NOT AVAILABLE; openblas_lapack_info:; NOT AVAILABLE; openblas_clapack_info:; NOT AVAILABLE; flame_info:; NOT AVAILABLE; atlas_3_10_threads_info:; NOT AVAILABLE; atlas_3_10_info:; NOT AVAILABLE; atlas_threads_info:; NOT AVAILABLE; atlas_info:; NOT AVAILABLE; lapack_info:; libraries = ['lapack', 'lapack']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = f77; lapack_opt_info:; libraries = ['lapack', 'lapack', 'blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = c; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; include_dirs = ['/usr/local/include', '/usr/include']; Supported SIMD extensions in this NumPy install:; baseline = SSE,SSE2,SSE3; found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2; not found = AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL; ```; So numpy itself marks openblas_info as NOT AVAILABLE (evidently using a build-time test, not runtime, which arguably is a pity). It seems to me that `hasattr` in qutip's BLAS support tests is returning false positives and false negatives. It indicates i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:3439,test,test,3439,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['test'],['test']
Testability,`TestPulseOptim` fails,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1134:1,Test,TestPulseOptim,1,https://qutip.org,https://github.com/qutip/qutip/issues/1134,1,['Test'],['TestPulseOptim']
Testability,"``` bash; correlation: comparing TLS emission correlations (str-list td format) ... capi_return is NULL; Call-back cb_f_in_zvode__user__routines failed.; ERROR; ```. It seems that we are passing an extra arg to the td cython ode function, but this error does not occur when running the tests once, only twice in a row. ``` bash; Traceback (most recent call last):; File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/tests/test_correlation.py"", line 278, in test_str_list_td_corr; sm.dag(), sm.dag() * sm, sm, args=args); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/correlation.py"", line 392, in correlation_3op_2t; solver=solver, args=args, options=options); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/correlation.py"", line 1086, in _correlation_2t; args=args, options=options); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/correlation.py"", line 1135, in _correlation_me_2t; ).expect[0]; File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/mesolve.py"", line 280, in mesolve; progress_bar); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/mesolve.py"", line 618, in _mesolve_list_str_td; return _generic_ode_solve(r, rho0, tlist, e_ops, opt, progress_bar); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/qutip/mesolve.py"", line 867, in _generic_ode_solve; r.integrate(r.t + dt[t_idx]); File ""/opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/scipy/integrate/_ode.py"", line 388, in integrate; self.f_params, self.jac_params); File ""/opt/local/Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/269:286,test,tests,286,https://qutip.org,https://github.com/qutip/qutip/issues/269,3,['test'],"['test', 'tests']"
Testability,"```; File ""/home/alex/GitHub/qutip/qutip/floquet.py"", line 989, in fmmesolve; R = floquet_master_equation_tensor(Amat, f_energies); File ""/home/alex/GitHub/qutip/qutip/floquet.py"", line 724, in floquet_master_equation_tensor; R.data = R.data.tolil(); File ""/home/alex/GitHub/qutip/qutip/qobj.py"", line 328, in set_data; raise TypeError('Qobj data must be in fast_csr format.'); TypeError: Qobj data must be in fast_csr format.; ```. tests should have caught this #624",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/625:433,test,tests,433,https://qutip.org,https://github.com/qutip/qutip/issues/625,1,['test'],['tests']
Testability,"`setup.py test` invokes test_td_formats.py, which generates rhs*.pyx files in the build subdir. `setup.py install` installs everything in the build subdir. So that includes the rhs*pyx test files. The test files get installed at the toplevel of the installation path, just above the qutip dir.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/987:10,test,test,10,https://qutip.org,https://github.com/qutip/qutip/issues/987,3,['test'],['test']
Testability,"a, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4280,Test,TestMESolveDecay,4280,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['Test'],['TestMESolveDecay']
Testability,"ached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4444,test,testing,4444,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['testing']
Testability,acosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12064,test,tests,12064,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/dis,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19166,test,tests,19166,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19645,test,tests,19645,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,acosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30831,test,tests,30831,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,add isunitary attribute for checking if qobj is a unitary operator:; unitary checking func and property funcs added; initialisation of isunitary; clear flag on operations that risk unitarity; qobj unitarity testing added; preset isunitary for qeye,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817:207,test,testing,207,https://qutip.org,https://github.com/qutip/qutip/pull/817,1,['test'],['testing']
Testability,"added an argument to take dpsi (dots per inch) in Bloch.save(), whose usage would be as follows :; ``` b = Bloch(); b.save(""test"", dpsi = 1000); ```; Only modified bloch.py, hence merge ready",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104:124,test,test,124,https://qutip.org,https://github.com/qutip/qutip/pull/1104,1,['test'],['test']
Testability,"age/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4446,Test,TestKrylovSolve,4446,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"ages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15419,test,tests,15419,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['tests']
Testability,"ages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8627,test,test,8627,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochasti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21190,test,test,21190,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28402,test,test,28402,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"al/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4636,Test,TestKrylovSolve,4636,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"all_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; =====================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25729,test,tests,25729,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4710,test,testing,4710,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2977,test,tests,2977,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,ams.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38396,test,tests,38396,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"and compatible with previous syntax. **Description**; Operating System: MacOS Big Sur 11.0.1; CPU: Apple M1. The syntax of output of command ; ```; sysctl -n machdep.cpu.brand_string; ``` ; has been changed. The output for previous MacOS: ; ```; $ sysctl -n machdep.cpu.brand_string; Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n; ```. The updated output; ```; $ sysctl -n machdep.cpu.brand_string; VirtualApple @ 2.50GHz processor\n; ```. Therefore, the function [`_mac_hardware_info`](https://github.com/qutip/qutip/blob/cb201690a2ca3a9c904bc642ef6600f2ef54f763/qutip/hardware_info.py#L48) of file `hardware_info.py` cannot parse the frequency of CPU correctly. The popped error information is attached below. ```; ValueError: could not convert string to float: ' 2.50GHz proces'; ```. This pull request fix this problem and compatible with both syntax of hardware information. . Since the unit tests of file or function are not found, I do not add test files for this change. I attach python code below to prove the correctness of the implementation. ```python; # before change; old_str = 'Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz\n'; new_str = 'VirtualApple @ 2.50GHz processor\n'; # parse old hardware message; int(float(old_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); # parse new hardware message; int(float(new_str.split('@')[1].split(' ')[1].replace('GHz', ''))*1000); ```. **Related issues or PRs**; No related issue. **Changelog**; Fixed error parsing hardware information for MacOS Big Sur (Apple M1 chip)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1401:894,test,tests,894,https://qutip.org,https://github.com/qutip/qutip/pull/1401,2,['test'],"['test', 'tests']"
Testability,"ank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Importing qutip takes a long time. On a Windows system import takes almost 4 seconds. The import time can be analyzed with [importtime-waterfall](https://github.com/asottile/importtime-waterfall). A large part of the time is spend in importing external packages (scipy, IPython, matplotilib), but also qutip itself adds to the import time. This PR reduces the import time by setting the logger names in 4 submodules explicitly. ; Benchmark:; ```; python -c ""import time; import matplotlib; import IPython; import scipy; t0=time.time(); import qutip; dt=time.time()-t0; print(f'{dt*1e3:.2f} ms')""; ``` ; Results:; ```; dev.major: 1996.52 ms; PR: 1510.06 ms; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1980:1750,log,logger,1750,https://qutip.org,https://github.com/qutip/qutip/pull/1980,2,"['Benchmark', 'log']","['Benchmark', 'logger']"
Testability,annot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Pyt,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29980,test,tests,29980,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"annot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6541,test,testing,6541,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16586,test,tests,16586,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"are not engaged with the project, do not reply to communications or attend board meetings. . **<span style=""text-decoration:underline;"">Decisions</span>**; Each board member has a vote in decisions, which are taken by a majority vote. . **<span style=""text-decoration:underline;"">Communications</span>**; The board agrees to meet **[once a year]** (also via online meeting). The board is informed at least **[once a year]** by the Admin Team on QuTiP development and other activities (via email in the qutip-board channel). . ### 4. Non-profit Support; Since 2018, QuTiP is an affiliated project of [NumFOCUS](https://numfocus.org/), a 501(c)(3) nonprofit organization registered in the USA. The mission of NumFOCUS is to promote open practices in research, data, and scientific computing **[Unitary Fund](http://unitary.fund/)** pledges to support the QuTiP project as a fiscally sponsored project. QuTiP remains an affiliated project of NumFOCUS. [Unitary Fund](http://unitary.fund/) is a 501(c)(3) nonprofit organization registered in the USA working to create a quantum technology ecosystem that benefits the most people. Due to its role in the quantum software community, Unitary Fund pledges to: . * Promote the knowledge of QuTiP in the quantum software and sci-dev community.; * Provide scientific and technical software advice upon request of the Admin team and Board. ; * Provide logistic and financial support for code projects and meetings (subject to request by the QuTiP admins and availability of Unitary Fund funds). ; * Accept financial support on behalf of the QuTiP project. These funds will be allocated to and managed by the QuTiP admins on board’s approval in coordination with Unitary Fund. ; * Provide access to expert legal advice (subject to request by the QuTiP board or admin team and availability of Unitary Fund funds) through its legal counsel, useful for matters related to licensing, copyright, collaborations with industry and to protect the QuTiP brand and project.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:13650,log,logistic,13650,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['log'],['logistic']
Testability,arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18401,test,tests,18401,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40417,test,tests,40417,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44775,test,testing,44775,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,ary/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30061,test,tests,30061,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,ary/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30695,test,tests,30695,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ary/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18609,test,test,18609,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,arying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASS,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6606,test,tests,6606,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14594,test,testing,14594,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"at of the repository. First, a couple of arguments against doing so:; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1399,assert,assert,1399,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['assert'],['assert']
Testability,"at this is probably a subtle point which the user might overlook but using `np.dot(spre(Q).full(), rho)` take ns while the more readable `spre(Q)*vec` takes us. In most cases, we get away with this since we always pack the elements in `spre` into a sparse Liouvillian and invoke `cy_ode_rhs` but if there was some way to modify the `.__mul__` method of superoperators to use `np.dot`, it might be helpful to get up to 1000x speed improvement. This comes of use when the RHS is calculated on the fly by the action of these superoperators (eg., the Heom method). The comparisons are below. I pre-compute all the *operators* and *vectors* before running `%timeit` and these are the timing for the matrix-vector multiplication only. @nwlambert @ajgpitch Should we do something about this or mention it somewhere if it is important?. ```; np.dot(spre(Q).full(), vec); 789 ns ± 6.68 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each). spre(Q).data * vec; 5.66 µs ± 57.8 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each). spre(Q)*vec; 7.35 µs ± 213 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each). spre(Q)*operator_to_vector(rho); 62.5 µs ± 1.73 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each); ```. The code to reproduce this:; ```; from qutip.superoperator import spre, spost, operator_to_vector; from qutip import sigmax, basis; import numpy as np; from numpy.testing import assert_array_equal. Q = sigmax(); rho = basis(2,0)*basis(2,0).dag() \; + 0.25*basis(2,1)*basis(2,1).dag() \; - 0.1*basis(2,0)*basis(2,1).dag() . spreQ = spre(Q). numpy_vec = np.array(rho.data.todense().ravel(""F""), dtype=np.complex); vec = numpy_vec.T; qutip_vec = operator_to_vector(rho). spreQ_full = spreQ.full(); spreQ_data = spreQ.data. print(""np.dot(spre(Q).full(), vec)""); %timeit(np.dot(spreQ_full, vec)). print(""\nspre(Q).data * vec""); %timeit(spreQ_data*vec). print(""\nspre(Q)*vec""); %timeit(spreQ*vec). print(""\nspre(Q)*operator_to_vector(rho)""); %timeit(spreQ*qutip_vec); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831:1623,test,testing,1623,https://qutip.org,https://github.com/qutip/qutip/issues/831,1,['test'],['testing']
Testability,"at. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:2452,test,tested,2452,https://qutip.org,https://github.com/qutip/qutip/pull/1429,1,['test'],['tested']
Testability,ating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44439,test,tests,44439,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ave the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/quti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:7994,test,tests,7994,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12753,test,tests,12753,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14670,test,tests,14670,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,b.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14243,test,tests,14243,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31201,test,tests,31201,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31294,test,tests,31294,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"b/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7717,test,test,7717,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"b/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[ 4. 0...0. 0. 0. 0. 0. -1. 0. 0. 0. 0. -1. -2. 0.]; [ 0. 0. 0. -1. 0. 0. 0. 0. 0. -1. 0. 0. -1. 0. 0. -4.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8723,test,tests,8723,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,b/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35289,test,tests,35289,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"base=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3992,test,tests,3992,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, ru",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4539,test,tests,4539,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11715,test,tests,11715,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"brary/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26714,test,test,26714,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14579,test,tests,14579,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14410,test,tests,14410,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15955,test,tests,15955,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/depend,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16646,test,tests,16646,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39544,test,tests,39544,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45874,test,testing,45874,https://qutip.org,https://github.com/qutip/qutip/issues/1740,4,['test'],"['testing', 'tests']"
Testability,"ced from <a href=""https://github.com/kjd/idna/releases"">idna's releases</a>.</em></p>; <blockquote>; <h2>v3.7</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/kjd/idna/compare/v3.6...v3.7"">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1139,test,tests,1139,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['test'],['tests']
Testability,"ception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2933,test,testing,2933,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"cf04a2a547c57""><code>15ea1ed</code></a> release 8.10.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/560ad109197c0f8373865896af369bb3b36fd229""><code>560ad10</code></a> DOC: Update what's new for 8.10 (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13939"">#13939</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/7557ade0ed927475d5ab5b573d0ea4febfb22683""><code>7557ade</code></a> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1245,mock,mock,1245,https://qutip.org,https://github.com/qutip/qutip/pull/2085,2,"['mock', 'test']","['mock', 'test']"
Testability,"check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4950,Test,TestKrylovSolve,4950,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"chedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3904,Test,TestCircuitProcessor,3904,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testPlot']"
Testability,cial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38002,test,tests,38002,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"cient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: C",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24381,test,testPropHOStrTd,24381,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testPropHOStrTd']
Testability,"ck (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 73, in test_sparse_symmetric_reverse_permute; B=sparse_reverse_permute(x,perm,perm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Nonsymmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 89, in test_sparse_nonsymmetric_reverse_permute; B=sparse_reverse_permute(x,rperm,cperm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Bandwidth. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 144, in test_sparse_bandwidth; out2=sparse_bandwidth(B); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 603, in sparse_bandwidth; return _sparse_bandwidth(A.indices, A.indptr, nrows);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:1242,test,tests,1242,https://qutip.org,https://github.com/qutip/qutip/issues/73,1,['test'],['tests']
Testability,"ckages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6953,test,test,6953,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ckages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11267,test,test,11267,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:13896,test,tests,13896,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [si",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:19173,test,tests,19173,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4339,test,tests,4339,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16292,test,tests,16292,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32094,test,tests,32094,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,corr_mat casting made explicit; A cast from object to complex that was acceptable in numpy 1.9; was failing in numpy 1.10; This was causing an error in #379 Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/380:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/380,1,['test'],['tests']
Testability,correlation and mcsolve tests error without cython,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/449:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/issues/449,1,['test'],['tests']
Testability,cosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13023,test,tests,13023,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/di,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19353,test,tests,19353,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19738,test,tests,19738,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,cosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstat,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43147,test,tests,43147,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"cted, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; In case they are not skipped, the reason for the failure should somehow become more clear. Regarding the actual behavior, qutip could print a warning if `cython` is installed and `filelock` is not, but I am not sure whether that would be a good idea. ---. For completeness, my `qutip.about()` output:. ```; QuTiP Version: 5.0.0.dev0+7892453;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8461,test,tests,8461,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"cuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5067,test,tests,5067,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,cvxpy Variable and Parameter dims passed as tuple; cvxpy and its depends only installed in tests for NOMKL builds; Extra test added for NOMKL with OPENMP,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/pull/873,2,['test'],"['test', 'tests']"
Testability,d/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11363,test,tests,11363,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,d/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14926,test,tests,14926,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,d/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16004,test,tests,16004,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,d/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37453,test,tests,37453,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,d/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35852,test,tests,35852,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,d/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42506,test,tests,42506,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,d/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath; compile options: '-Ibuild/src.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46919,test,tests,46919,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"d=1"">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.3</h2>; <p>Released 2024-01-10</p>; <ul>; <li>Fix compiler error when checking if required blocks in parent templates are; empty. :pr:<code>1858</code></li>; <li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>; <li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks; more helpful. :pr:<code>1918</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1""><code>d9de4bb</code></a> release version 3.1.3</li>; <li><a href=""https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc""><code>50124e1</code></a> skip test pypi</li>; <li><a href=""https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b""><code>9ea7222</code></a> use trusted publishing</li>; <li><a href=""https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde""><code>da703f7</code></a> use trusted publishing</li>; <li><a href=""https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983""><code>bce1746</code></a> use trusted publishing</li>; <li><a href=""https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1""><code>7277d80</code></a> update pre-commit hooks</li>; <li><a href=""https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14""><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=""https://redirect.github.com/pallets/jinja/issues/1918"">#1918</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895""><code>19a55db</code></a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:1807,test,test,1807,https://qutip.org,https://github.com/qutip/qutip/pull/2291,1,['test'],['test']
Testability,"dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1870,test,testing,1870,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['testing']
Testability,"dencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if it's of any help. <details><summary>Output</summary>. ```; pip install --verbose qutip; Using pip 24.0 from /tmp/test-venv/lib/python3.8/site-packages/pip (python 3.8); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-69.5.1-py3-none-any.whl.metadata (6.2 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:2113,test,test-venv,2113,https://qutip.org,https://github.com/qutip/qutip/issues/2412,1,['test'],['test-venv']
Testability,"der-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4250,Test,TestCircuitProcessor,4250,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testNoise']"
Testability,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:6,test,tests,6,https://qutip.org,https://github.com/qutip/qutip/pull/1490,12,['test'],"['test', 'tests']"
Testability,dom/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45607,test,testing,45607,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"dule; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_eq",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19822,test,tests,19822,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"e ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 73, in test_sparse_symmetric_reverse_permute; B=sparse_reverse_permute(x,perm,perm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Nonsymmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 89, in test_sparse_nonsymmetric_reverse_permute; B=sparse_reverse_permute(x,rperm,cperm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Bandwidth. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 144, in test_sparse_bandwidth; out2=sparse_bandwidth(B); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 603, in sparse_bandwidth; return _sparse_bandwidth(A.indices, A.indptr, nrows); File ""sparse_utils.pyx"", line 42, in qutip.cy.sparse_utils._sparse_bandwidth (qutip/cy/sparse_utils.c:1458); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:1906,test,test,1906,https://qutip.org,https://github.com/qutip/qutip/issues/73,2,['test'],"['test', 'tests']"
Testability,"e 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18276,test,testing,18276,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:71322,log,logs,71322,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['log'],['logs']
Testability,"e left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.81s. Est. time left: 00:00:00:27; 20.0%. Run time: 4.76s. Est. time left: 00:00:00:19; 32.0%. Run time: 5.66s. Est. time left: 00:00:00:12; 40.0%. Run time: 5.67s. Est. time left: 00:00:00:08; 52.0%. Run time: 6.59s. Est. time left: 00:00:00:06; 60.0%. Run time: 6.65s. Est. time left: 00:00:00:04; 72.0%. Run time: 7.53s. Est. time left: 00:00:00:02; 80.0%. Run time: 8.38s. Est. time left: 00:00:00:02; Total run time: 8.43s. --------------------- >> end captured stdout << ----------------------. ----------------------------------------------------------------------; Ran 320 tests in 1336.173s. FAILED (SKIP=7, errors=6)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:10737,test,tests,10737,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"e not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3101,test,tests,3101,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"e rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj` factory functions that take a `dims` parameter should now also accept the new form. Since almost all of them just pass this directly to the `dims` argument in the `Qobj` constructor, t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:9573,log,logically,9573,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['log'],['logically']
Testability,"e the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); ch",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1005,test,tests,1005,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,"e, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7433,test,testing,7433,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"e-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-pack",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4865,Test,Test,4865,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"e-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10862,test,testing,10862,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"e-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13996,test,test,13996,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,e.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15097,test,tests,15097,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/lin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36692,test,tests,36692,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40201,test,tests,40201,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"e.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21687,test,testing,21687,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,e.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESo,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6808,test,tests,6808,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"e/releasenotes/10.2.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/10.2.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Add <code>keep_rgb</code> option when saving JPEG to prevent conversion of RGB colorspace <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7553"">#7553</a> [<a href=""https://github.com/bgilbert""><code>@​bgilbert</code></a>]</li>; <li>Trim negative glyph offsets in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7672"">#7672</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Removed unnecessary &quot;pragma: no cover&quot; <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7668"">#7668</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Trim glyph size in ImageFont.getmask() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7669"">#7669</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix loading IPTC images and update test <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7667"">#7667</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>; <li>Allow uncompressed TIFF images to be saved in chunks <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7650"">#7650</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Concatenate multiple JPEG EXIF markers <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7496"">#7496</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Changed IPTC tile tuple to match other plugins <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7661"">#7661</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not assign new fp attribute when exiting context manager <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7566"">#7566</a> [<a href=""https://github.com/radarhere""><code>@​",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:1348,test,test,1348,https://qutip.org,https://github.com/qutip/qutip/pull/2302,1,['test'],['test']
Testability,e/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/lib2def.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/pathccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distuti,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:20948,log,log,20948,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['log'],['log']
Testability,"e: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 2.08e+13); > > > warnings.wa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:5016,Test,Test,5016,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"e; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8343,test,testing,8343,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"e; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3634,test,tests,3634,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"e_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ======================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4578,test,tests,4578,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"e_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-package",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13790,test,testing,13790,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"e_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19992,test,testing,19992,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ect of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.37s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.74s. Est. time left: 00:00:00:01; Total run time: 5.89s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 89, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:7841,test,tests,7841,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"ect of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.31s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.89s. Est. time left: 00:00:00:01; Total run time: 7.03s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 90, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:3043,test,tests,3043,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"ect.dependabot.com/ipython/ipython/issues/13939"">#13939</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/7557ade0ed927475d5ab5b573d0ea4febfb22683""><code>7557ade</code></a> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vuln",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1490,mock,mock,1490,https://qutip.org,https://github.com/qutip/qutip/pull/2085,2,"['mock', 'test']","['mock', 'test']"
Testability,"ector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight change to the license for the code I added. This is why I made two new files for this work specifically (instead of putting it in e.g. gates.py), which now includes a Copyright NASA sentence. I will talk privately with someone about this. 2. ~~I actually think that we could make a wrapper function `local_multiply` which can additionally take a backend 'sparse', so that it is easier to compare the above code, to one using the default sparse way (e.g. using the `expand_operator` type functions). I didn't do this yet as thought i'd see what thoughts are on this -- I can easily add this.~~ **Update (20/12/20)**: I just added some basic functionality for this. Will need to add more tests and maybe re-work it a bit still. 3. Currently the input local operator is expected to be square, and we do not take output dimension arguments. This means it keeps the system dimensions the same. This can be relaxed easily, but we probably need an additional output dimension list, which needs to be consistent with the input operator. Again, this is easy to do, but was not sure if it is needed. If I get time I might add this anyway. 4. There are some examples of the code in the docstring to see how to run it (and also in the tests of course). I also have offline a script to perform certain speed comparisons (vs the sparse routine), I can share some more results of that. I figured this type of script shouldn't go into the project, but I can also add this. **Changelog**; Added a local multiplication routine, to speed up certain dense matrix operations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:2683,test,tests,2683,https://qutip.org,https://github.com/qutip/qutip/pull/1405,2,['test'],['tests']
Testability,"ed lines that have >linespace errors and more, should I edit them too?; >Output:. > ```; > D:\qutip\qutip\core\cy>pycodestyle --first qobjevo.pyx; > qobjevo.pyx:1:1: E265 block comment should start with '# '; > qobjevo.pyx:2:80: E501 line too long (83 > 79 characters); > qobjevo.pyx:20:37: E211 whitespace before '('; > qobjevo.pyx:46:56: W605 invalid escape sequence '\s'; > qobjevo.pyx:190:30: E225 missing whitespace around operator; > qobjevo.pyx:423:5: E303 too many blank lines (2); > qobjevo.pyx:426:5: E301 expected 1 blank line, found 0; > qobjevo.pyx:451:34: E127 continuation line over-indented for visual indent; > qobjevo.pyx:572:21: E128 continuation line under-indented for visual indent; > qobjevo.pyx:987:39: E231 missing whitespace after ','; > qobjevo.pyx:989:20: E124 closing bracket does not match visual indentation; > ```. - [ ] Please add tests to cover your changes if applicable. > The issue was to add `__repr__` function to `QobjEvo` class. Do I need to add a test? If so, can someone help me with it?. - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure. > I am not sure in what bracket this issue falls. The issue was labeled as `ENH`. - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). > Related to the previous point. **Description**; Added `__repr__` to `QobjEvo`. It is showing the following attributes: `dims`, `shape`, `type`, `superop` (if a super operator is present), `isconstant` and `num_elements`. Output:; ```; >>> import qutip; >>> qutip.QobjEvo([qutip.qeye(2), lambda t: t]); <QobjEvo dims = [[2], [2]], shape= (2, 2), type = oper, superrep ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111:1241,test,test,1241,https://qutip.org,https://github.com/qutip/qutip/pull/2111,1,['test'],['test']
Testability,"ement.density_measurement(self, measurement_ops, state)` : This adds generalized state/density matrix measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based measurements are slightly different than the measurements usually used on circuits (or I might be missing something). Ofc, in the case of measurements on all qubits, they amount to the same result. I have not added tests yet but I have added a basic quantum teleportation notebook. It will be nice to get feedback on testing methods as well as what kind of notebooks the community is interested in. Also, any other feature requests on this module would also be appreciated. . PS: I have also added measurement code from Simon's PR here so maybe we can either add him as a contributor to this PR or figure out something else. ; ; Update: . 1. Addressing some concerns about the PR containing multiple diverging pieces of code, I think classical registers, measurement on the circuit and the classically-controlled gates are best grouped together as they all rely on each other in some ways. The valid concern is that of the Measurement class encapsulating all projective style measurements. I also want to point out that it was raised by @BoxiLi that we may want to move the Gate class and Measurement class completely to qutip.qip.operations to which I agree but I believe that should be addressed in a clean-up PR with naming changes sugg",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:2212,test,tests,2212,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['test'],['tests']
Testability,ence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%];,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6479,test,tests,6479,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"enstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. se",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4072,Test,TestKrylovSolve,4072,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"ent'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:6182,test,tests,6182,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"ently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8017,Test,TestKrylovSolve,8017,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"epickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Install",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2918,test,testing,2918,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"er, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that ski",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1765,test,test,1765,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['test']
Testability,"er_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProces",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2590,test,tests,2590,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"erator_to_vector`; - all ""legacy"" files have been completely removed; - all previous scipy-CSR-like Cython code is completely gone (replaced by the data layer); - `Qobj` no longer defines `__array__`, and so will not automatically turn itself into one. Having this produced very inconsistent behaviour when multiplying by numpy arrays, or otherwise dealing with numpy functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:1813,log,logically,1813,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['log'],['logically']
Testability,"eroper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26197,test,testing,26197,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24692,test,tests,24692,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"es in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits. I'm still learning good workflow for this type of feature branch. Will use rebasing more in the future. Let me know if you have any questions about the implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1598,test,test,1598,https://qutip.org,https://github.com/qutip/qutip/pull/404,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"es/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3900,Test,TestKrylovSolve,3900,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,eselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6219,test,tests,6219,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"essor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7326,test,testing,7326,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"est_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/pytho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15393,test,testing,15393,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,esting/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45776,test,testing,45776,https://qutip.org,https://github.com/qutip/qutip/issues/1740,4,['test'],"['testing', 'tests']"
Testability,ests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44637,test,tests,44637,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"et; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. Est. time left: 00:00:00:04; 72.0%. Run time: 8.34s. Est. time left: 00:00:00:03; 80.0%. Run time: 9.25s. Est. time left: 00:00:00:02; Total run time: 9.33s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 59, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:6183,test,test,6183,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability,"evo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26489,Test,TestSESolve,26489,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an invalid URI that will not cause httpbin to throw 500</li>; <li><a href=""https://github.com/psf/requests/commit/2d5f54779ad174035c5437b3b3c1146b0eaf60fe""><code>2d5f547</code></a> Pin 3.8 and 3.9 runners back to macos-13 (<a href=""https://redirect.github.com/psf/requests/issues/6688"">#6688</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/f1bb07d39b74d6444e333879f8b8a3d9dd4d2311""><code>f1bb07d</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabot/github_actions/github/codeql-act...</li>; <li><a href=""https://github.com/psf/requests/commit/60047ade64b0b882cbc94e047198818ab580911e""><code>60047ad</code></a> Bump github/codeql-action from 3.24.0 to 3.25.0</li>; <li><a href=""https://github.com/psf/requests/commit/31ebb8102c00f8cf8b396a6356743cca4362e07b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:8636,test,test,8636,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['test'],['test']
Testability,f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32896,test,tests,32896,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) Q",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26096,Test,TestSESolve,26096,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"fidelity() returns >1 by a significant amount for certain pure states. States are normalised, and taking the inner product returns 1. Code below provides two examples of states which give fidelity >1 with themselves. ```; #to test qutip's fidelity routine; import qutip as qu. psi0=qu.Qobj(). i=0; while i<=1:; j=0; while j<=1:; psi0+=qu.state_number_qobj([2,2],[i,j]) #even superposition of qubit states; j+=1; i+=1. psi0=psi0.unit() #normalise. print(qu.fidelity(psi0,psi0)); print((psi0.dag()*psi0).norm()**2); print(""\n""). psi0=qu.tensor(psi0,qu.basis(10,1)) #tensor product with Fock state. print(qu.fidelity(psi0,psi0)); print((psi0.dag()*psi0).norm()**2). ```. Output:. ```; 1.00000002107; 1.0. 1.00000003485; 1.0; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361:226,test,test,226,https://qutip.org,https://github.com/qutip/qutip/issues/361,1,['test'],['test']
Testability,"file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1069: in _correlation_me_2t; rho_t = mesolve(H, rho0, tlist, c_ops, [],; /usr/lib/python3/dist-packages/qutip/mesolve.py:231: in mesolve; ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); /usr/lib/python3/dist-packages/qutip/mesolve.py:287: in _mesolve_QobjEvo; L_td.compile(omp=nthread); /usr/lib/python3/dist-packages/qutip/qobjevo.py:1641: in compile; self.coeff_get, Code, file_ = _compiled_coeffs(; /usr/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:14566,test,tests,14566,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,fileio tests are failing on windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1311:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/issues/1311,1,['test'],['tests']
Testability,fix Qobj division unit test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/306:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/306,1,['test'],['test']
Testability,fix failing circuit test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1658:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/pull/1658,1,['test'],['test']
Testability,fix seeds in stochastic tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1657:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1657,1,['test'],['tests']
Testability,"from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Libra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9203,test,testing,9203,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"from qutip import *; import numpy as np; import matplotlib.pyplot as plt; import qutip.testing as qt. Here is the part of the code that has error:. H = tensor(sigmaz(),sigmaz(),identity(2)) + tensor(identity(2),sigmaz(),sigmaz()) + 0.05 * tensor(sigmax(), sigmax(),sigmax()); psi0 = basis(8, 0); times = np.linspace(0.0, 10.0, 20.0); result = mesolve(H, psi0, times, [], [sigmaz()]). ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-26-752e3e5ccdb6> in <module>(); 4 psi0 = basis(8, 0); 5 times = np.linspace(0.0, 10.0, 20.0); ----> 6 result = mesolve(H, psi0, times, [], [sigmaz()]). /Users/lib/python2.7/site-packages/qutip/mesolve.pyc in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 223 ; 224 if _safe_mode:; --> 225 _solver_safety_check(H, rho0, c_ops, e_ops, args); 226 ; 227 if progress_bar is None:. /Users/lib/python2.7/site-packages/qutip/solver.pyc in _solver_safety_check(H, state, c_ops, e_ops, args); 795 Hdims = H.dims; 796 Htype = H.type; --> 797 _structure_check(Hdims, Htype, state); 798 # Input H is function; 799 elif isinstance(H, (FunctionType, BuiltinFunctionType)):. /Users/lib/python2.7/site-packages/qutip/solver.pyc in _structure_check(Hdims, Htype, state); 870 if Htype == 'oper':; 871 if Hdims[1] != state.dims[0]:; --> 872 raise Exception('Input operator and ket do not share same structure.'); 873 # Input is super and state is ket; 874 elif Htype == 'super':. Exception: Input operator and ket do not share same structure.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/802:87,test,testing,87,https://qutip.org,https://github.com/qutip/qutip/issues/802,1,['test'],['testing']
Testability,funcs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/control/cy_grape.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/cy_grape.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/tests/Hadamard_params.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/cy/openmp/benchmark.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating build/temp.macosx-10.9-x86_64-3.7/qutip; creating build/temp.macosx-10.9-x86_64-3.7/qutip/cy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:22388,test,tests,22388,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"g = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [sigmax(), sigmay(), sigmaz()],; /usr/lib/python3/dist-packages/qutip/sesolve.py:124: in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options); /usr/lib/python3/dist-packages/qutip/sesolve.py:155: in _sesolve_QobjEvo; H_td.compile(omp=nthread); /usr/lib/python3/dist-packages/qutip/qobjevo.py:1641: in compile; self.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:19742,test,tests,19742,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,g build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36134,test,tests,36134,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,g numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:15806,test,tests,15806,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,g numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32391,test,tests,32391,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"g time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1077,test,testcorr,1077,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorr']
Testability,"gcc 4.4 does not support the `-flto` option for link time optimization. This is still a common compiler because it is the system gcc in centos 6 and redhat enterprise 6. In this pull request I've removed that option. Users who need this could set the CCFLAGS environment variable to customize the compiler flags. Alternatively, we could add options to `setup.py` to enable or disable link time optimization. I've also added additional rows to the travis build matrix to test building with gcc 4.4 and clang. In its current form this adds 4 additional rows to the build matrix (2 additional compilers, each tested with python 2.7 and 3.4). Let me know if you think this is excessive. It's possible to add just one python version for gcc 4.4 and clang.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318:470,test,test,470,https://qutip.org,https://github.com/qutip/qutip/pull/318,2,['test'],"['test', 'tested']"
Testability,"generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5322,test,tests,5322,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ges/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:3989,assert,assert,3989,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,['assert'],['assert']
Testability,"ges/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13087,test,test,13087,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ges/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15789,test,test,15789,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ges/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 7.81e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 8.35e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:14061,test,test,14061,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability,"guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/User",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2210,test,tests,2210,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"h mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1581,test,tests,1581,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,"h`: see https://github.com/scipy/scipy/pull/3751. I suggest we consider dropping most of them, and consequently their surrounding `Cython` code to ease maintainability and reduce code bloat of the repository. First, a couple of arguments against doing so:; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1198,test,tests,1198,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['tests']
Testability,"he initial floquet modes, computing the propagator over one period, then using these to compute at other time, recomputing the propagator up to that time. When the modes at multiple times were needed, we could compute a list of them over one period using `floquet_modes_table`, but at least 2 computations over a period were needed. With the and the `Propagator` memoize capacities added in v5, only one computation of the propagator is required. Also with the table computation of v4, if a mode was not included in the table, the closest one was used. `fmesolve ` and `fsesolve` computed 100 slices over the period. It did not used the values in `tlist` and caused artifacts in the result. With `FloquetBasis`, the mode are always computed at the exact time. . I left the v4's functions with warnings. The construction of the floquet tensor was done using 2 functions: `floquet_master_equation_rates` which returned 4 tensors and `floquet_master_equation_tensor`. I added `floquet_tensor` which computed the tensor in one call and split `floquet_master_equation_rates` in 4 functions, one for each of the outputs. Floquet, like `brmesolve`, need a function for the noise power spectrum. Unlike `brmesolve`, string are not supported, only functions. We should have them match, but supporting string is quite heavy since coefficient are not a great fit. `fsesolve` have been rewritten without the class interface. As an integrator, the floquet method has no advantage since the propagator much be computed using another method. `fmesolve` work similarly to other solver. The `e_ops` are always in the laboratory basis. The result states are also in the laboratory basis. The option `""store_floquet_states""` is used to store the states in the floquet basis in `result.floquet_states`. In v4, there it an option for the environment temperature, but no tests for it. I kept the feature, but it's still untested.; Also all tests for `fmesolve` are either for constant systems or without collapse operator.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2034:2164,test,tests,2164,https://qutip.org,https://github.com/qutip/qutip/pull/2034,2,['test'],['tests']
Testability,"hese should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 self.format = 'csr'. AttributeError: property 'format' of 'fast_csr_matrix' object has no setter; ```. ### Expected Behaviour. I expected to be able to import qutip :) . ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.11.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. The environment above was generated with `scipy==1.10.1` (which still worked); I've changed the Scipy version to `1.11.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:2850,test,test-env-scipy-qutip,2850,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"hile importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28483,test,tests,28483,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"hon/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12170,test,test,12170,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"hon3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Boar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:5357,test,tests,5357,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"https://github.com/qutip/qutip/blob/f5149616a4071a273e7e48a63d956836739c4569/qutip/parallel.py#L7. When the latest scipy version is used (1.12.0), QuTiP (4.7.4) cannot be imported since `from scipy import array` is no longer supported in scipy. Code to reproduce the bug: ; `import qutip`. Output:; ```; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); Cell In[1], line 1; ----> 1 import qutip. File ~/anaconda3/envs/test/lib/python3.11/site-packages/qutip/__init__.py:133; 131 # graphics; 132 from qutip.bloch import *; --> 133 from qutip.visualization import *; 134 from qutip.orbital import *; 135 from qutip.bloch3d import *. File ~/anaconda3/envs/test/lib/python3.11/site-packages/qutip/visualization.py:24; 22 from qutip.qobj import Qobj, isket; 23 from qutip.states import ket2dm; ---> 24 from qutip.wigner import wigner; 25 from qutip.tensor import tensor; 26 from qutip.matplotlib_utilities import complex_phase_cmap. File ~/anaconda3/envs/test/lib/python3.11/site-packages/qutip/wigner.py:19; 17 import qutip; 18 from qutip import Qobj, ket2dm, jmat; ---> 19 from qutip.parallel import parfor; 20 from qutip.cy.sparse_utils import _csr_get_diag; 21 from qutip.sparse import eigh. File ~/anaconda3/envs/test/lib/python3.11/site-packages/qutip/parallel.py:7; 1 """"""; 2 This function provides functions for parallel execution of loops and function; 3 mappings, using the builtin Python module multiprocessing.; 4 """"""; 5 __all__ = ['parfor', 'parallel_map', 'serial_map']; ----> 7 from scipy import array; 8 import multiprocessing; 9 from functools import partial. ImportError: cannot import name 'array' from 'scipy' (/Users/konstantin/anaconda3/envs/test/lib/python3.11/site-packages/scipy/__init__.py); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300:492,test,test,492,https://qutip.org,https://github.com/qutip/qutip/issues/2300,5,['test'],['test']
Testability,"ial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3500,test,tests,3500,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,ial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ran,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42187,test,tests,42187,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16733,test,tests,16733,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,ib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14328,test,tests,14328,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,ib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37358,test,tests,37358,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Fram",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21316,test,test,21316,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,ide_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37905,test,tests,37905,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"iel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.6; Number of CPUs: 10; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _boot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:1621,test,test,1621,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"igmax(), qt.sigmay(), qt.sigmaz()]; options = qt.solver.options.SolverResultsOptions(store_states=True). solver = MeSolver(H, options=options); result = solver.run(psi0, t, e_ops=e_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); /tmp/ipykernel_9527/298290075.py in <module>; 6 options = qt.solver.options.SolverResultsOptions(store_states=True); 7 ; ----> 8 solver = MeSolver(H, options=options); 9 result = solver.run(psi0, t, e_ops=e_ops). ~/Documents/git/qutip/qutip5-dev/qutip/solver/mesolve.py in __init__(self, H, c_ops, options); 171 rhs += sum(c_op if c_op.issuper else lindblad_dissipator(c_op); 172 for c_op in c_ops); --> 173 super().__init__(rhs, options=options); 174 ; 175 self.stats['solver'] = ""Master Equation Evolution"". ~/Documents/git/qutip/qutip5-dev/qutip/solver/solver_base.py in __init__(self, rhs, options); 55 else:; 56 TypeError(""The rhs must be a QobjEvo""); ---> 57 self.options = options; 58 self.stats = {""preparation time"": 0}; 59 self._state_metadata = {}. ~/Documents/git/qutip/qutip5-dev/qutip/solver/solver_base.py in options(self, new); 248 new = self.optionsclass(**new); 249 elif not isinstance(new, self.optionsclass):; --> 250 raise TypeError(""options must be an instance of"" +; 251 str(self.optionsclass)); 252 self._options = new. TypeError: options must be an instance of<class 'qutip.solver.options.SolverOptions'>; ```. ### Expected Behaviour. I was expecting it work. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+08b5634 # Im using pr 1644; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.24; Matplotlib Version: 3.3.0; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I am using PR #1644 to test how it works with qutip-tensorflow.; I am also aware that `MeSolver(H, options = {""store_states"" : True})` works fine.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1804:2220,test,test,2220,https://qutip.org,https://github.com/qutip/qutip/issues/1804,1,['test'],['test']
Testability,ild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16130,test,tests,16130,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"ilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ and $w_r(T)$ are the absolute and relative weights, $\rho(T)$ the state associated with a trajectory, and $N_{\text{rel}}$ the number of trajectories that have not been assigned absolute weights. Intuitively, the idea is that absolute weights are for trajectories where the contribution to the full state is known exactly, and the trajectories without absolute weights are the stochastic part. **Things to do**; - [x] Update tests and create new ones; - [x] Update photocurrent to work with weights; - [x] Update target tolerance calculation to work with weights; - [x] Think about how result objects should be added if both contain trajectories with absolute weights; - [x] Double-check that this creates no problems for stochastic solvers; - [x] Towncrier entry. **Related issues or PRs**; https://github.com/qutip/qutip/issues/2235",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:2425,test,tests,2425,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['test'],['tests']
Testability,"illow/issues/7706"">#7706</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use subprocess with CREATE_NO_WINDOW flag in ImageShow WindowsViewer <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7791"">#7791</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving GIF frame that restores to background color, do not fill identical pixels <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7788"">#7788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed reading PNG iCCP compression method <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7823"">#7823</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Allow writing IFDRational to UNDEFINED tag <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7840"">#7840</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix logged tag name when loading Exif data <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7842"">#7842</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use maximum frame size in IHDR chunk when saving APNG images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7821"">#7821</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Prevent opening P TGA images without a palette <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7797"">#7797</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use palette when loading ICO images <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7798"">#7798</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use consistent arguments for load_read and load_seek <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7713"">#7713</a> [<a href=""https://github.com/radarhere""><c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:6201,log,logged,6201,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['log'],['logged']
Testability,iltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_def,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6744,test,tests,6744,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each); 4.63 ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1550:983,log,logarithmic,983,https://qutip.org,https://github.com/qutip/qutip/pull/1550,1,['log'],['logarithmic']
Testability,"in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.37s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.74s. Est. time left: 00:00:00:01; Total run time: 5.89s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 89, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:7782,test,test,7782,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability,"in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.31s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.89s. Est. time left: 00:00:00:01; Total run time: 7.03s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 90, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:2984,test,test,2984,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability,"in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1312,test,tests,1312,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"increased ``maxiter`` at ``test_driven_cavity_power_gmres()`` to 10000 in tests/test_steadystate.py; resolved mutable default value at ``parallel_map()`` in parallel.py; resolved mutable default value at various places in qobjevo.py; cleaned up now defunct class ``_file_list`` in qobjevo.py (fixes #1354). **Description**; Fixes #1354, increases ``maxiter`` at ``test_driven_cavity_power_gmres()`` to ``10000`` in ``tests/test_steadystate.py``. **Related issues or PRs**; fix #1354. **Changelog**; Increased ``maxiter`` at ``test_driven_cavity_power_gmres()`` to 10000 in tests/test_steadystate.py.; Resolved mutable default value at ``parallel_map()`` in parallel.py.; Resolved mutable default value at various places in qobjevo.py.; Cleaned up now defunct class ``_file_list`` in qobjevo.py (fixes #1354).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1355:74,test,tests,74,https://qutip.org,https://github.com/qutip/qutip/pull/1355,3,['test'],['tests']
Testability,"ine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating over the dictionary could give the indices and states in any order, and it seems to me that `enr_thermal_dm`, which did exactly that, was not guaranteed to work).; - `state_number_index` and `state_index_number` now just call `np.ravel_multi_index` and `np.unravel_i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1604:1357,test,test,1357,https://qutip.org,https://github.com/qutip/qutip/pull/1604,1,['test'],['test']
Testability,"infidelity threshold not reached on Windows tests. It is a strange failure, as the assert_almost_equal would seem to be within tolerance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/599:44,test,tests,44,https://qutip.org,https://github.com/qutip/qutip/issues/599,1,['test'],['tests']
Testability,ing numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35663,test,tests,35663,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ing numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46406,test,tests,46406,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ing tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1239,test,tests,1239,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"ing>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23152,test,tests,23152,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,ini files in tests will now be copied into dist,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/588:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/588,2,['test'],['tests']
Testability,init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42404,test,tests,42404,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26504,test,tests,26504,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,inverted test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1110:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/1110,1,['test'],['test']
Testability,"ionOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:5503,Assert,AssertionError,5503,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['Assert'],['AssertionError']
Testability,ions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38199,test,tests,38199,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1437,assert,assert,1437,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['assert'],['assert']
Testability,ip/cy/spmatfuncs.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmatfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/spmath.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; copying qutip/cy/stochastic.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/cy/src/zspmv.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/src; copying qutip/control/cy_grape.cpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/cy_grape.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/tests/Hadamard_params.ini -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/cy/openmp/benchmark.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/br_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/cqobjevo_omp.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/omp_sparse_utils.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pxd -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/parfuncs.pyx -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; copying qutip/cy/openmp/src/zspmv_openmp.hpp -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp/src; running build_ext; building 'qutip.cy.spmatfuncs' extension; creating build/temp.macosx-10.9-x86_64-3.7; creating bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:22320,test,tests,22320,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['test'],['tests']
Testability,"ip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4364,Test,TestCircuitProcessor,4364,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testMultiLevelSystem']"
Testability,"ipt, other than uninstalling cvxpy to make it run.; I then reinstalled cvxpy with upgrade and then qutip again. This time I can still import qutip, but with a warning. I ran the script with no problem, but still got the same deviated behavior from 3 years ago. [codes.zip](https://github.com/user-attachments/files/16367713/codes.zip). The 3-year-old script is included only to show the previous results. It is not meant to be run. I suspect if you run it with your likely different setup, you might get the same deviation as I did, or even yet another different deviation. I cannot recall the state of installation I had from 3 years ago. I believe I did it through conda. I just realized that I cannot include qutip scripts with this report. I included a zipped folder containing these two files. Please let me know if it didn'tgo through. Thank you! . ### Code to Reproduce the Bug. ```shell; Old code in ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb""; New code in ""Test.ipynb""; Both attached.; These two codes are exactly identical. Only difference is in the qutip installation, one from 3 years ago and one just completed.; ```. ### Code Output. ```shell; Output in block 23 in the new code is significantly different from that in block 215 in the old code.; ```. ### Expected Behaviour. Expected qutip to produce same results on identical codes 3 years apart. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://gi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501:1801,Test,Test,1801,https://qutip.org,https://github.com/qutip/qutip/issues/2501,1,['Test'],['Test']
Testability,"ir commitment to the QuTiP for the future, e.g., how they would help and support the project in their activity. Emeriti Admin Team members, including previous core contributors, are listed on the QuTiP website (at qutip.org/devs), governance (github.com/qutip/governance) and documentation. **<span style=""text-decoration:underline;"">Decisions</span>**; Each admin team member has a vote in decisions. As much as possible, admins try to take in feedback on changes from the wider community and timely communicate major changes in the software. . **<span style=""text-decoration:underline;"">Communications</span>**; The admin team agrees to keep in touch regularly, through the qutip-admin channel or chosed communication medium, through the repositories’ maintenance, and with regular virtual or in-person meetings. The admin team drafts a report, [once] a year and submits it to the Board to inform it of developments on the project. ### 3. Board; **Members of the Board make sure that the Admin Team and project is well supported financially and logistically.** Thanks to them helping enable the financial and logistics support, through scientific advisory and by keeping an eye on the project, they make the life of the admin team easier. . **<span style=""text-decoration:underline;"">Tasks</span>**; Board members are volunteers that pledge to:. - Meet** [once] **a year to review the development of the project (also online).; - Be consulted for scientific advice by the admins. ; - Help settle conflicts or roadblocks that may arise on the project development. ; - Help review student applications of interns that may volunteer or work on the QuTiP project.; - Try to provide funding for QuTiP development and maintenance.; - Become ambassadors for scientific open source in general and QuTiP in particular.; - Take formal decisions to allocate eventual funds, upon recommendation of the Admin Team. . **<span style=""text-decoration:underline;"">Composition</span>**; Initial board members are inv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:10557,log,logistically,10557,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['log'],['logistically']
Testability,"is profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5682,Test,TestTimeDependence,5682,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestTimeDependence', 'tests']"
Testability,"is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2119,test,tests,2119,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"ise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3706,Test,TestKrylovSolve,3706,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"ist[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4225,test,tests,4225,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"istests now return False if the object is not a Qobj instead of; raising an exception. In order to avoid a cyclical import qobj.py ->; istests.py -> qobj.py the istests have been moved to qobj.py and are; imported in istests.py for backwards compatability, closes #2. Sorry for the first failed attempt. I should also add some tests before that goes in I suppose. Just wanted to start the discussion about the cyclical import issue",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/4:327,test,tests,327,https://qutip.org,https://github.com/qutip/qutip/pull/4,1,['test'],['tests']
Testability,istutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27337,test,tests,27337,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"it/cf8f5ef50e32b836c4ffb43af68107f78dca8d80""><code>cf8f5ef</code></a> Moved news item from PR <a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/484"">#484</a> to its proper place</li>; <li><a href=""https://github.com/pypa/wheel/commit/9ec201660fa07ee0714edd17c979a7039ea852a4""><code>9ec2016</code></a> Removed install dependency on setuptools (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/483"">#483</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/747e1f6090547abcf65108c5a229cbe21a64a2ae""><code>747e1f6</code></a> Fixed PyPy SOABI parsing (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/484"">#484</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/76275484bc0de72d1f56601dbba3e816fc2f00c6""><code>7627548</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/480"">#480</a>)</li>; <li><a href=""https://github.com/pypa/wheel/commit/7b9e8e1022b9c850756ef34bc1a4a88042988a86""><code>7b9e8e1</code></a> Test on Python 3.11 final</li>; <li><a href=""https://github.com/pypa/wheel/commit/a04dfef41be0ab10eadbb2ed5d02b600682dc487""><code>a04dfef</code></a> Updated the pypi-publish action</li>; <li><a href=""https://github.com/pypa/wheel/commit/94bb62cb182023ac6586c5510ae9031ea56bd682""><code>94bb62c</code></a> Fixed docs not building due to code style changes</li>; <li><a href=""https://github.com/pypa/wheel/commit/d635664abe560d48723cfc3b73c52ad8c906760a""><code>d635664</code></a> Updated the codecov action to the latest version</li>; <li><a href=""https://github.com/pypa/wheel/commit/fcb94cd51f7dfd40d88dff37415750d9e3638d3b""><code>fcb94cd</code></a> Updated <strong>version</strong> to match the release</li>; <li>Additional commits viewable in <a href=""https://github.com/pypa/wheel/compare/0.37.0...0.38.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?depe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:4038,Test,Test,4038,https://qutip.org,https://github.com/qutip/qutip/pull/2052,1,['Test'],['Test']
Testability,"it__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18398,test,tests,18398,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ite-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23884,test,test,23884,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17301,test,testing,17301,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25408,test,testing,25408,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9281,test,testing,9281,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,ivate; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46492,test,tests,46492,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40946,test,tests,40946,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"jEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Excepti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25555,test,tests,25555,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"k.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; from itertools import combinations; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False))",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3775,test,tests,3775,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,kle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44215,test,tests,44215,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"kum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.0; Scipy Version: 1.7.0; Cython Version: 0.29.23; Matplotlib Version: 3.4.2; Python Version: 3.9.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; ```. **Additional context**; No sysctl hw.cpufrequency at all on this machine, so it blows up (some error handling in that function would be good :-). ```$ sysctl hw; hw.ncpu: 8; hw.byteorder: 1234; hw.memsize: 17179869184; hw.activecpu: 8; hw.optional.amx_version: 2; hw.optional.arm64: 1; hw.optional.armv8_1_atomics: 1; hw.optional.armv8_2_fhm: 1; hw.optional.armv8_2_sha3: 1; hw.optional.armv8_2_sha512: 1; hw.optional.armv8_crc32: 1; hw.optional.breakpoint: 6; hw.optional.floatingpoint: 1; hw.optional.neon: 1; hw.optional.neon_fp16: 1; hw.optional.neon_hpfp: 1; hw.optional.ucnormal_mem: 1; hw.optional.watchpoint: 4; hw.cacheconfig: 8 1 1 0 0 0 0 0 0 0; hw.cachelinesize: 128; hw.cachesize: 3616980992 65536 4194304 0 0 0 0 0 0 0; hw.cpu64bit_capable: 1; hw.cpufamily: 458787763; hw.cpusubfamily: 2; hw.cpusubtype: 2; hw.cputype: 16777228; hw.ephemeral_storage: 0; hw.l1dcachesize: 65536; hw.l1icachesize: 131072; hw.l2cachesize: 4194304; hw.logicalcpu: 8; hw.logicalcpu_max: 8; hw.osenvironment: ; hw.packages: 1; hw.pagesize: 16384; hw.pagesize32: 16384; hw.physicalcpu: 8; hw.physicalcpu_max: 8; hw.serialdebugmode: 0; hw.tbfrequency: 24000000; hw.use_kernelmanagerd: 1; hw.use_recovery_securityd: 0; hw.targettype: J293; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1606:3610,log,logicalcpu,3610,https://qutip.org,https://github.com/qutip/qutip/issues/1606,1,['log'],['logicalcpu']
Testability,"l tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are no",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1112,test,tests,1112,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"l/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5113,Test,TestKrylovSolve,5113,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"latform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465:2863,test,tested,2863,https://qutip.org,https://github.com/qutip/qutip/pull/1465,1,['test'],['tested']
Testability,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31384,test,tests,31384,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31487,test,tests,31487,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ld/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37170,test,tests,37170,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ld/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44856,test,testing,44856,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,ld/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler usin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45977,test,testing,45977,https://qutip.org,https://github.com/qutip/qutip/issues/1740,4,['test'],"['testing', 'tests']"
Testability,"le importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Tra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21271,test,tests,21271,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"le; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_modu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17129,test,tests,17129,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"le_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17379,test,testing,17379,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"le_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25486,test,testing,25486,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"le_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11886,test,testing,11886,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28899,test,testing,28899,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,lg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrix,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39182,test,tests,39182,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_info; writing qutip.egg-info/PKG-INFO; writing dependency_links to qutip.egg-info/dependency_links.txt; writing requirements to qutip.egg-info/requires.txt; writing top-level names to qutip.egg-info/top_level.txt; reading manifest file 'qutip.egg-info/SOURCES.txt,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16829,test,tests,16829,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['test'],['tests']
Testability,lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15530,test,tests,15530,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19548,test,tests,19548,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/lib2def,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:20123,test,tests,20123,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distuti,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19449,test,tests,19449,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46662,test,tests,46662,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6033,test,test,6033,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"list-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_bre",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4419,test,tests,4419,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,logarithmic_negativity using wrong logarithm base,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/777:35,log,logarithm,35,https://qutip.org,https://github.com/qutip/qutip/issues/777,1,['log'],['logarithm']
Testability,"ls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids))",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4464,test,tests,4464,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"ly their surrounding `Cython` code to ease maintainability and reduce code bloat of the repository. First, a couple of arguments against doing so:; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1322,test,tests,1322,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['tests']
Testability,m.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11613,test,tests,11613,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,m64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16769,test,tests,16769,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39450,test,tests,39450,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copyin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39724,test,tests,39724,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13977,test,tests,13977,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17629,test,tests,17629,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37267,test,tests,37267,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1503:1535,test,test,1535,https://qutip.org,https://github.com/qutip/qutip/issues/1503,2,['test'],['test']
Testability,"may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1670,test,test,1670,https://qutip.org,https://github.com/qutip/qutip/issues/1203,2,['test'],['test']
Testability,"mcsolve tests failing, probably due to states not being averaged",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/37:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/issues/37,1,['test'],['tests']
Testability,"me 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26382,test,testing,26382,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"mesolve returns num_collapse =0, even when I pass collapse operators to it like this ; ``` python; from qutip import *; import numpy as np; import matplotlib.pyplot as plt; from math import *. times = np.linspace(0.0, 10.0, 200); psi0 = tensor(fock(2,0), fock(10, 5)); a = tensor(qeye(2), destroy(10)); sm = tensor(destroy(2), qeye(10)); H = 2 * np.pi * a.dag() * a + 2 * np.pi * sm.dag() * sm + 2 * np.pi * 0.25 * (sm * a.dag() + sm.dag() * a). result = mesolve(H, psi0, times, [np.sqrt(0.1)*a], [a.dag()*a, sm.dag()*sm]); print(""result.num_collapse"",result.num_collapse); # I am getting the no of collapse operators as zero. print(""len(result.expect[0]): {}"".format(len(result.expect[0]))). fig1 = plt.figure(); ax1 = fig1.add_subplot(1, 1, 1). ax1.set_title(""Final evolution""); ax1.set_xlabel(""Time""); ax1.set_ylabel(""P""); ax1.plot(times, result.expect[0], 'b*', linewidth=2); ax1.plot(times, result.expect[1], 'g+', linewidth=2). plt.show(); ``` ; (Some of the code is from @ajgpitch ). PFA the test run of the qutip.testing module as [qutip_testing.pdf](https://github.com/qutip/qutip/files/1865397/qutip_testing.pdf) so that anyone interested could see if there is anything wrong with my installation. Also please let me know if there is any other piece of information that needs to be known. >Computer OS: MacOS 10.13.3 High Sierra. -- ; Thanking You,. Kind regards,. Tejas Shetty. Email ID: tejasshetty.1808@gmail.com",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/846:999,test,test,999,https://qutip.org,https://github.com/qutip/qutip/issues/846,2,['test'],"['test', 'testing']"
Testability,"mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 2.08e+13); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:5067,Test,Test,5067,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"mitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2190,test,test,2190,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,['test'],"['test', 'testPlot']"
Testability,"module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20070,test,testing,20070,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,mpiler/lahey.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26365,test,tests,26365,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"mplementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>; <li><a href=""https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe""><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=""https://redirect.github.com/psf/requests/issues/6424"">#6424</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149""><code>b639e66</code></a> test on py3.12 (<a href=""https://redirect.github.com/psf/requests/issues/6448"">#6448</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be""><code>d3d5044</code></a> Fixed a small typo (<a href=""https://redirect.github.com/psf/requests/issues/6452"">#6452</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29""><code>2ad18e0</code></a> v2.30.0</li>; <li><a href=""https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773""><code>f2629e9</code></a> Remove strict parameter (<a href=""https://redirect.github.com/psf/requests/issues/6434"">#6434</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8""><code>87d63de</code></a> v2.29.0</li>; <li><a href=""https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc""><code>51716c4</code></a> enable the warnings plugin (<a href=""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:5906,test,test,5906,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['test']
Testability,"mplex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = False; Qobj data =; [[0. 0.2236068... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. ]]]; kwargs = {'method': <900x900 _CustomLinearOperator with dtype=complex128>}, ss_args = {'ILU_MILU': 'smilu_2', 'M': None, 'all_states': False, 'diag_pivot_thresh': None, ...}, key = 'method'; L = Quantum object: dims = [[[30], [30]], [[30], [30]]], shape = (900, 900), type = super, isherm = False; Qobj data =; [[ 0.... +0.j 0. +0.j 0. +0.j ...; 0. +0.j 0. -0.33835988j -1.45 +0.j ]]; n = 30. def build_preconditioner(A, c_op_list=[], *",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:5485,test,tests,5485,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"mport name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16471,test,testing,16471,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"mport(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7276,test,tests,7276,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"mport_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:17576,Test,TestSESolve,17576,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"mporting test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python na",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13168,test,tests,13168,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"mputes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple C",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1828,Test,Tests,1828,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['Test'],['Tests']
Testability,"mpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29904,test,tests,29904,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,mpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctio,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32294,test,tests,32294,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,mpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35570,test,tests,35570,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"n _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_su",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16238,test,tests,16238,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"n and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:14819,test,tests,14819,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['tests']
Testability,"n(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4714,test,tests,4714,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['tests']
Testability,"n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:2029,test,tests,2029,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['tests']
Testability,"n-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:2623,log,logging,2623,https://qutip.org,https://github.com/qutip/qutip/pull/1695,1,['log'],['logging']
Testability,"n/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27621,test,test,27621,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"n/Includes/numpy/__init__.pxd.; Compiling qutip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Depend",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:2784,test,testing,2784,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['test'],['testing']
Testability,"n/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27490,test,test,27490,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"n: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris G",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2608,test,testing,2608,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22776,test,testing,22776,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23678,test,testing,23678,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR col",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5690,test,testing,5690,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27284,test,testing,27284,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18198,test,testing,18198,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"name = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:13919,Test,TestTimeDependence,13919,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"nction, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_457",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24524,test,tests,24524,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ne 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 246 in _main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 196 in wrap_session; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 239 in pytest_cmdline_main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/config/__init__.py"", line 92 in main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/testing.py"", line 45 in run; File ""<stdin>"", line 1 in <module>; Abort trap: 6; ```; This is in a conda environment with qutip development version with ; ```; Python 3.7.4 (default, Aug 13 2019, 15:17:50); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; ```; and ; ```; QuTiP Version: 4.5.0.dev0+d13f5435; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:4454,test,testing,4454,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['test'],['testing']
Testability,"ng Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10357,test,test,10357,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,ng numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30637,test,tests,30637,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ng numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32195,test,tests,32195,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ng/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19288,test,tests,19288,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ng/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21993,test,tests,21993,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,nit__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45711,test,testing,45711,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['testing']
Testability,"nnot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14672,test,testing,14672,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,nomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43912,test,tests,43912,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,nomkl mac test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1036:10,test,test,10,https://qutip.org,https://github.com/qutip/qutip/pull/1036,1,['test'],['test']
Testability,"note the reversal) a non-square operator that takes a two-qubit state to a tensor-product space between a 4-element space and 5-element space; - `[[[2], [2]], [[2], [2]]]` = `Map(Space(Map(Space(2), Space(2))), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4022,test,test,4022,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['test'],['test']
Testability,ns.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38105,test,tests,38105,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"nswer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1394,test,tests,1394,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"numpy give deprecation warning in some test related to mcsolve:; ```Monte-carlo: Constant H (str format) with no collapse ops (expect) ... /home/ericgig/.local/lib/python3.6/site-packages/qutip-4.4.0.dev0+7af31179-py3.6-linux-x86_64.egg/qutip/mcsolve.py:1152: DeprecationWarning: Calling np.sum(generator) is deprecated, and in the future will give a different result. Use np.sum(np.fromiter(generator)) or the python sum builtin instead.```. I replaced the 2 np.sum causing problem by the python builtin sum. Since we are not doing the sum on a numpy array and it's in the solver setup phase, there is only a negligible effect on performance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/945:39,test,test,39,https://qutip.org,https://github.com/qutip/qutip/pull/945,1,['test'],['test']
Testability,numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36037,test,tests,36037,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39817,test,tests,39817,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40517,test,tests,40517,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15013,test,test,15013,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16806,test,test,16806,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19499,test,test,19499,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"o_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ===================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25899,test,tests,25899,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,oadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11107,test,tests,11107,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"od = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:4187,Assert,AssertionError,4187,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"odule; 447 . F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path); 218 if is_package and not hasattr(mod, '__path__'):. F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 setup_args=sargs,; 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:6268,assert,assert,6268,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['assert'],['assert']
Testability,"odule_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29101,test,testing,29101,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"odule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24500,test,testing,24500,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"oeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; In case they are not skipped, the reason for the failure should somehow become more clear. Regarding the actual behavior, qutip could print a warning if `cython` is installed and `filelock` is not, but I am not sure whether that would be a good idea. ---. For completeness, my `qutip.about()` output:. ```; QuTiP Version: 5.0.0.dev0+7892453; Numpy Version: 1.24.3; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.3; Number of CPUs: 16; BLAS Info: INTEL MKL; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/paul/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8988,test,tests,8988,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,['test'],['tests']
Testability,"of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. Est. time left: 00:00:00:04; 72.0%. Run time: 8.34s. Est. time left: 00:00:00:03; 80.0%. Run time: 9.25s. Est. time left: 00:00:00:02; Total run time: 9.33s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 59, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:6242,test,tests,6242,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"oise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5491,test,testing,5491,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"olve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4586,test,testing,4586,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"olve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23815,Test,TestMESolveStepFuncCoeff,23815,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestMESolveStepFuncCoeff']
Testability,omebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/numpy/random; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src/distributions; compile options: '-Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; clang: numpy/random/src/distributions/distributions.c; clang: numpy/random/src/distributions/random_mvhg_marginals.c; clang: numpy/random/src/distributions/random_mvhg_count.c; clang: numpy/random/src/distributions/logfactorial.c; clang: numpy/random/src/distributions/random_hypergeometric.c; ar: adding 5 object files to build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; ranlib:@ build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; running build_ext; customize UnixCCompiler; customize UnixCCompiler using new_build_ext; building 'numpy.core._multiarray_tests' extension; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/common; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -Inumpy/core/include -Ibu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:59048,log,logfactorial,59048,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['log'],['logfactorial']
Testability,"on 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2741,test,tests,2741,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coef",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:4467,test,test,4467,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['test']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4216,test,test,4216,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,on/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30614,test,tests,30614,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14119,test,test,14119,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29815,test,tests,29815,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4994,test,test,4994,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"onstant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4965,Test,Test,4965,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"ootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23438,test,tests,23438,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1300,test,testcorr,1300,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorr']
Testability,opying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31106,test,tests,31106,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/lib/shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35194,test,tests,35194,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40625,test,tests,40625,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42827,test,tests,42827,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/setup_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/c,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:13101,test,tests,13101,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"or while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5977,test,tests,5977,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"or while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceba",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14077,test,tests,14077,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"or: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2614,test,tests,2614,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,ore/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16389,test,tests,16389,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ort name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19166,test,testing,19166,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21874,test,testing,21874,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path); 218 if is_package and not hasattr(mod, '__path__'):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 setup_args=sargs,; 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in run(self); 1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:2896,assert,assert,2896,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['assert'],['assert']
Testability,"ortError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have v",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12251,test,tests,12251,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ortError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24865,test,tests,24865,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ortError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10151,test,testing,10151,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29735,test,tests,29735,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs1. ---. Ran 111 tests in 33.425s. FAILED (errors=3). I can reproduce this on 2 different systems (both 64 bit and 14.04).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:16036,test,test,16036,https://qutip.org,https://github.com/qutip/qutip/issues/126,4,['test'],"['test', 'testMESimpleConstDecayAsStrList', 'tests']"
Testability,osx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11276,test,tests,11276,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12928,test,tests,12928,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12837,test,tests,12837,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo_codegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/topology.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/settings.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/tomography.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch3d.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/testing.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/pdpsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/essolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/matplotlib_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/logging_utils.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; creating build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/progressbar.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; creating build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:4765,test,testing,4765,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['test'],['testing']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18016,test,tests,18016,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:20026,test,tests,20026,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19930,test,tests,19930,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17442,test,tests,17442,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ot import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23179,Test,TestTimeDependence,23179,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"otFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [sigmax(), sigmay(), sigmaz()],; /usr/lib/python3/dist-packages/qutip/sesolve.py:124: in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options); /usr/lib/python3/dist-packages/qutip/sesolve.py:155: in _sesolve_QobjEvo; H_td.compile(omp=nthread); /usr/lib/python3/dist-packages/qutip/qobjevo.py:1641: in compile; self.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:20092,test,tests,20092,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"otstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'ru",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8177,test,tests,8177,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"otstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28851,test,tests,28851,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ould not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahme",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26268,test,tests,26268,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"p-0008/). >I did the `pycodestyle` on my code, but it is highlighting errors that were there in the original code. It returned lines that have >linespace errors and more, should I edit them too?; >Output:. > ```; > D:\qutip\qutip\core\cy>pycodestyle --first qobjevo.pyx; > qobjevo.pyx:1:1: E265 block comment should start with '# '; > qobjevo.pyx:2:80: E501 line too long (83 > 79 characters); > qobjevo.pyx:20:37: E211 whitespace before '('; > qobjevo.pyx:46:56: W605 invalid escape sequence '\s'; > qobjevo.pyx:190:30: E225 missing whitespace around operator; > qobjevo.pyx:423:5: E303 too many blank lines (2); > qobjevo.pyx:426:5: E301 expected 1 blank line, found 0; > qobjevo.pyx:451:34: E127 continuation line over-indented for visual indent; > qobjevo.pyx:572:21: E128 continuation line under-indented for visual indent; > qobjevo.pyx:987:39: E231 missing whitespace after ','; > qobjevo.pyx:989:20: E124 closing bracket does not match visual indentation; > ```. - [ ] Please add tests to cover your changes if applicable. > The issue was to add `__repr__` function to `QobjEvo` class. Do I need to add a test? If so, can someone help me with it?. - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure. > I am not sure in what bracket this issue falls. The issue was labeled as `ENH`. - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). > Related to the previous point. **Description**; Added `__repr__` to `QobjEvo`. It is showing the following attributes: `dims`, `shape`, `type`, `superop` (if a super operator is present), `isconstant` and `num_elements`. Output:; ```; >>> impo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111:1116,test,tests,1116,https://qutip.org,https://github.com/qutip/qutip/pull/2111,1,['test'],['tests']
Testability,"p.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2197,test,testing,2197,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['testing']
Testability,p/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11799,test,tests,11799,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"p/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4219,Test,TestMESolveDecay,4219,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,"['Test', 'test']","['TestMESolveDecay', 'tests']"
Testability,"p/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/step",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4107,test,tests,4107,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_ses",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17585,test,test,17585,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tens",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25692,test,test,25692,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"pagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/gugl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11762,test,testing,11762,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"pe[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Versi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16897,test,tests,16897,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:3363,test,tests,3363,https://qutip.org,https://github.com/qutip/qutip/issues/1495,6,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'TestSuperopReps', 'assert', 'test', 'tests']"
Testability,"perators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1148,test,testcorrM,1148,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorrM']
Testability,"platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5566,Test,TestTimeDependence,5566,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestTimeDependence', 'tests']"
Testability,"pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1441,test,tests,1441,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"port(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13537,test,tests,13537,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"portError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12803,test,testing,12803,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"portable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =====================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26974,Test,Tests,26974,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['Tests']
Testability,"precate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:7642,test,test,7642,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['test'],['test']
Testability,"precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:3221,benchmark,benchmarks,3221,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['benchmark'],['benchmarks']
Testability,"previous core contributors, are listed on the QuTiP website (at qutip.org/devs), governance (github.com/qutip/governance) and documentation. **<span style=""text-decoration:underline;"">Decisions</span>**; Each admin team member has a vote in decisions. As much as possible, admins try to take in feedback on changes from the wider community and timely communicate major changes in the software. . **<span style=""text-decoration:underline;"">Communications</span>**; The admin team agrees to keep in touch regularly, through the qutip-admin channel or chosed communication medium, through the repositories’ maintenance, and with regular virtual or in-person meetings. The admin team drafts a report, [once] a year and submits it to the Board to inform it of developments on the project. ### 3. Board; **Members of the Board make sure that the Admin Team and project is well supported financially and logistically.** Thanks to them helping enable the financial and logistics support, through scientific advisory and by keeping an eye on the project, they make the life of the admin team easier. . **<span style=""text-decoration:underline;"">Tasks</span>**; Board members are volunteers that pledge to:. - Meet** [once] **a year to review the development of the project (also online).; - Be consulted for scientific advice by the admins. ; - Help settle conflicts or roadblocks that may arise on the project development. ; - Help review student applications of interns that may volunteer or work on the QuTiP project.; - Try to provide funding for QuTiP development and maintenance.; - Become ambassadors for scientific open source in general and QuTiP in particular.; - Take formal decisions to allocate eventual funds, upon recommendation of the Admin Team. . **<span style=""text-decoration:underline;"">Composition</span>**; Initial board members are invited by the admin team, based on their track-record in supporting the project and future helping it grow. The admins elect new board members, in agree",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:10621,log,logistics,10621,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['log'],['logistics']
Testability,"processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2714,test,test,2714,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['test']
Testability,processor plot tests succeed but return error,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:1630,test,tests,1630,https://qutip.org,https://github.com/qutip/qutip/issues/1703,8,['test'],"['test', 'tests']"
Testability,"psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3679,test,tests,3679,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"ptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PRs**; #1476. **Changelog**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1826:2256,test,test,2256,https://qutip.org,https://github.com/qutip/qutip/pull/1826,1,['test'],['test']
Testability,"py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22895,test,tests,22895,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportEr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5807,test,tests,5807,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27404,test,tests,27404,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4910,test,tests,4910,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,py/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30544,test,tests,30544,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,py/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43613,test,tests,43613,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"py/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14790,test,tests,14790,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8119,test,test,8119,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,py3.6 tests run without cvxopt,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:6,test,tests,6,https://qutip.org,https://github.com/qutip/qutip/pull/2215,1,['test'],['tests']
Testability,"py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/gug",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12661,test,testing,12661,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7000,test,tests,7000,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7787,Test,TestSESolve,7787,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,pying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:41053,test,tests,41053,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,pying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11882,test,tests,11882,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2788,test,testing,2788,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26588,test,test,26588,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1138, in cythonize_one; raise CompileError(None, pyx_file); Cython.Compiler.Errors.CompileError: qutip/cy/sparse_utils.pyx; ```. Tested with:; * Cython 0.26; * numpy 1.13.1; * gcc 4.9.1. Any recommendation on how to fix this? . Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:3924,Test,Tested,3924,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['Test'],['Tested']
Testability,"pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_457496861",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24355,test,tests,24355,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"qual; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3807,test,testing,3807,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,qutip 4.5.0 tests fail when scipy 1.5.0 (released 8 days ago) is used,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/issues/1304,1,['test'],['tests']
Testability,qutip 4.7.3 QobjEvo test failures on Python 3.12,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['test']
Testability,qutip testing on ubuntu 14.04: 3 errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['testing']
Testability,qutip-doc/guide/scripts/floquet_ex3.py raises an exception in `floquet_master_equation_tensor`; ```; TypeError: Qobj data must be in fast_csr format.; ```; This should have been picked up by a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/624:193,test,test,193,https://qutip.org,https://github.com/qutip/qutip/issues/624,1,['test'],['test']
Testability,qutip.testing broken after installing with f90 solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/46,1,['test'],['testing']
Testability,qutip.testing.run() NameErrors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1158:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/1158,1,['test'],['testing']
Testability,qutip.testing.run() failed,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2245:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/2245,1,['test'],['testing']
Testability,qutip.testing.run() failed on test testPropHOSteadyPar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,['test'],"['test', 'testPropHOSteadyPar', 'testing']"
Testability,"qutip.testing.run() returns ""Ran 0 tests in 0.000s \ OK"" after installing QuTip 2.2.0 with f90 solver on OSX 10.8. This was reproducible on two macs. Before installing with fortran solver the QuTip installation and testing function normally. After installation with fortran solver the testing returns the above message. The installation seems to be fine though: mcsolve_f90 ran successfully in my simulation, and QuTip examples appear to work normally. To get fortran to compile I installed Xcode developer tools, and gfortran for OSX Mountain Lion from HPC following instructions from http://web.mit.edu/mfloyd/www/computing/mac/gfortran/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/46,4,['test'],"['testing', 'tests']"
Testability,"r us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1156,test,tests,1156,https://qutip.org,https://github.com/qutip/qutip/pull/1551,2,['test'],"['testing', 'tests']"
Testability,"r while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8708,test,tests,8708,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,r.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11447,test,tests,11447,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,r/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcom,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26473,test,tests,26473,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"r/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% ███",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3873,test,tests,3873,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"rallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8236,test,testing,8236,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"rallel_map and mpi_pmap are basically the same, except that the `multiprocessing.ProcessPoolExecutor` gets replaced by the `mpi4py.MPIPoolExecutor`, and we allow users to provide arbitrary keyword arguments to be passed on to the MPIPoolExecutor. **Detailed list of changes**; * Added `mpi_pmap`. Extracted the common functionality of parallel_map, loky_pmap and mpi_pmap into a `_generic_pmap` function. The behavior of parallel_map and loky_pmap should be unchanged (except for a tiny change in loky_pmap regarding the order in which reduce_func is called).; * Added a section showcasing QuTiP's MPI capabilities in the tutorial notebook ""Non-Markovian Monte Carlo Solver"", see [PR 78](https://github.com/qutip/qutip-tutorials/pull/78) in qutip-tutorials.; * Added `mpi_options` to the options of MultiTrajSolver and all its subclasses. This option only takes effect if the 'map' option is set to 'mpi', in which case the mpi_options are added to the map_kwargs.; * For MultiTrajSolver, all its subclasses and corresponding XXsolve functions, I double-checked that the descriptions of the options in the docstrings correspond to the `solver_options`. That is, I did not touch the solver options except for adding 'mpi_options', but I edited the docstrings in some places in order to reflect the actually available solver options.; * While creating the new section in the tutorial notebook, I noticed some bugs in `MultiTrajResult#__add__` and fixed them.; * Added tests. Tests are skipped if the mpi4py module is not available (like with loky_pmap and the loky module). **Todo**; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information).; - [x] Finish qutip-tutorials PR. **Related issues or PRs**; Continuing work started in [2280](https://github.com/qutip/qutip/pull/2280)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296:1793,test,tests,1793,https://qutip.org,https://github.com/qutip/qutip/pull/2296,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"rap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportEr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18038,test,tests,18038,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26145,test,tests,26145,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,rary/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30295,test,tests,30295,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,rary/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30374,test,tests,30374,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rary/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22213,test,test,22213,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,raypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35758,test,tests,35758,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,remove py 3.2 from travis testing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289:26,test,testing,26,https://qutip.org,https://github.com/qutip/qutip/pull/289,1,['test'],['testing']
Testability,remove the benchmark directory from the main qutip repository,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/217:11,benchmark,benchmark,11,https://qutip.org,https://github.com/qutip/qutip/pull/217,1,['benchmark'],['benchmark']
Testability,"rent():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.001121",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1334,assert,assert,1334,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['assert'],['assert']
Testability,"reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18091,test,testing,18091,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,rhs module load error - testing on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/728:24,test,testing,24,https://qutip.org,https://github.com/qutip/qutip/issues/728,1,['test'],['testing']
Testability,rivate/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46323,test,tests,46323,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"rker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:1738,test,tests,1738,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['test'],['tests']
Testability,rm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31890,test,tests,31890,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,rm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/p,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40839,test,tests,40839,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"rn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22536,test,tests,22536,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rojection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:1764,assert,assert,1764,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['assert'],['assert']
Testability,"rom "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23005,test,tests,23005,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"rom <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling of OpenSSL 3.2.0 new error message for misconfiguring an HTTP proxy as HTTPS. (<code>[#3405](https://github.com/urllib3/urllib3/issues/3405) &lt;https://github.com/urllib3/urllib3/issues/3405&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d9d85c88aa644af56d5e129634e750ce76e1a765""><code>d9d85c8</code></a> Release 1.26.19</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/8528b63b6fe5cfd7b21942cf988670de68fcd8c0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull request from GHSA-34jh-p97f-mpxf</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/29cfd02f66376c61bd20f1725477925106321f68""><code>29cfd02</code></a> Fix handling of OpenSSL 3.2.0 new error message &quot;record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/31",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:2587,test,tests,2587,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['test'],['tests']
Testability,"rop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:2080,Assert,Assert,2080,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Assert'],['Assert']
Testability,"ror while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python name",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4172,test,tests,4172,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"roxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1891,test,testing,1891,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['testing']
Testability,"rror while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python nam",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23063,test,tests,23063,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rs.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; q",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:1788,test,tests,1788,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"rsally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory her",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1501,test,tests,1501,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['tests']
Testability,"rtError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5075,test,tests,5075,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rt_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19088,test,testing,19088,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"rt_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); /nix/store/dz8lm4h0ivibad5kfc0ya3p3zqyd2fyf-python3-3.11.7/lib/python3.11/contextlib.py:81: AssertionError; =========================== short test summary info ============================; FAILED ../tests/test_countstat.py::test_dqd_current - AssertionError:; ```. ### Expected Behaviour. unit test succeeds. ### Your Environment. ```shell; QuTiP Version: 4.7.5; Numpy Version: 1.26.2; Scipy Version: 1.12.0; Cython Version: 0.29.36; Matplotlib Version: 3.8.2; Python Version: 3.11.7; Number of CPUs: 80; BLAS Info: Generic; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (aarch64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:3328,Assert,AssertionError,3328,https://qutip.org,https://github.com/qutip/qutip/issues/2316,5,"['Assert', 'test']","['AssertionError', 'test', 'tests']"
Testability,run unit tests for stochastic module with multiproceesing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/266:9,test,tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/266,1,['test'],['tests']
Testability,"run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24578,test,testing,24578,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,ry/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_format,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30449,test,tests,30449,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,ry/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30777,test,tests,30777,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"s profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1512,test,tests,1512,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:3827,test,testing,3827,https://qutip.org,https://github.com/qutip/qutip/pull/1429,2,['test'],['testing']
Testability,s.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30728,test,tests,30728,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"s.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20773,test,testing,20773,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"s/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3433,test,test,3433,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,"s/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3683,test,testing,3683,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"s; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ??",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:5467,test,tests,5467,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,s; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45194,test,testing,45194,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"se TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-sin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3328,test,tests,3328,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"se, args, args_ctypes, compile_opt, **_); 385 code = make_cy_code(parsed, variables, constants,; 386 raw, compile_opt); 387 try:; --> 388 coeff = compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ==================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3186,test,tests,3186,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,segmentation fault running testing environment,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:27,test,testing,27,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['test'],['testing']
Testability,"selected by default.; 3. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1385,test,test,1385,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability,"sertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:6050,assert,assert,6050,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['assert'],['assert']
Testability,setup.py installs rhs*.pyx test files generated during build-time tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/987:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/issues/987,2,['test'],"['test', 'tests']"
Testability,"sis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4017,Test,TestCircuitProcessor,4017,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testSpline']"
Testability,"site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5896,test,test,5896,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,six library not available during Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/378:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/issues/378,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4344,test,tests,4344,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.31s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.89s. Est. time left: 00:00:00:01; Total run time: 7.03s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 90, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:2749,test,tests,2749,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. Est. time left: 00:00:00:04; 72.0%. Run time: 8.34s. Est. time left: 00:00:00:03; 80.0%. Run time: 9.25s. Est. time left: 00:00:00:02; Total run time: 9.33s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 59, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:5944,test,tests,5944,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,solve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ===,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7203,test,tests,7203,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"sp_eigs now return a 2d ndarray instead of a list of 1d ndarray. Fix sqrtm accordingly, and adding a unit test for it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/170:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/pull/170,1,['test'],['test']
Testability,split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6411,test,tests,6411,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"sr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pyte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:6952,test,test,6952,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,"ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.37s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.74s. Est. time left: 00:00:00:01; Total run time: 5.89s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 89, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:7547,test,tests,7547,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9142,test,tests,9142,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"st from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1842,test,tests,1842,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['test'],['tests']
Testability,"st(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2131,test,testing,2131,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['testing']
Testability,"st); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16661,Assert,AssertionError,16661,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,"['Assert', 'test']","['AssertionError', 'tests']"
Testability,"st-packages/qutip/tests/test_brmesolve_td.py:256: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:200: in brmesolve; output = _td_brmesolve(H, psi0, tlist, a_ops=a_ops, e_ops=e_ops,; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:482: in _td_brmesolve; exec(code, globals()); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968611'. <string>:1: ModuleNotFoundError; __________________________________________________________________________________________________________ TestTimeDependence.test_varying_coefficient_hamiltonian_2ls[string] ___________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:12293,Test,TestTimeDependence,12293,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"st_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25207,test,tests,25207,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"st_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24393,test,testing,24393,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"st_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25287,test,testing,25287,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"sts/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_ops = [[a + a.dag(), _string_w_interpolating_t(kappa, times)]]; collapse_points = np.sqrt(kappa) * np.exp(-0.5*times); c_ops = [[a, qutip.Cubic_Spline(times[0], times[-1], col",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7968,Test,TestSESolve,7968,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"sts/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17180,test,testing,17180,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,sts; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43812,test,tests,43812,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15583,test,testing,15583,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,sumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:15907,test,tests,15907,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12148,test,tests,12148,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14160,test,tests,14160,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12672,test,tests,12672,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/dist,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19256,test,tests,19256,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17153,test,tests,17153,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"syncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5902,Test,TestMESolverConstDecay,5902,https://qutip.org,https://github.com/qutip/qutip/issues/2293,3,"['Test', 'test']","['TestMESolverConstDecay', 'testMEDecayAsStrList', 'tests']"
Testability,"t = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1069: in _correlation_me_2t; rho_t = mesolve(H, rho0, tlist, c_ops, [],; /usr/lib/python3/dist",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:14130,assert,assert,14130,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['assert'],['assert']
Testability,"t as plt; import numpy as np; from qutip import *; delta=0.2*2*np.pi;; eps0=1.0*2*np.pi;; A=2.5*2*np.pi;; omega=1.0*2*np.pi;; H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); H1=A/2.0*sigmaz(); args={'w':omega}; H=[H0,[H1,'sin(w*t)']]; T=2*np.pi/omega; f_modes_0, f_energies = floquet_modes(H, T, args); ```. Here is the error information：. ---------------------------------------------------------------------------; ```; DistutilsPlatformError Traceback (most recent call last); F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 184 ; --> 185 _build_ext.build_ext.run(self); 186 . F:\Anaconda3\lib\distutils\command\build_ext.py in run(self); 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extens",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:1294,assert,assert,1294,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['assert'],['assert']
Testability,"t be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% ████",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3355,Test,TestKrylovSolve,3355,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2894,test,testing,2894,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,['test'],"['test', 'testing']"
Testability,"t gates might differ, an additional step is required to compute the scheduled start time of each instruction.; It adds the additional dependency caused by hardware constraint to the graph and recomputes the distance of each node to the start and end node. This distance is then converted to the start time of each instruction. **Example**; ```python; >>> from qutip.qip.circuit import QubitCircuit; >>> from qutip.qip.scheduler import Scheduler; >>> circuit = QubitCircuit(7) ; >>> circuit.add_gate(""SNOT"", 3) # gate0; >>> circuit.add_gate(""CZ"", 5, 3) # gate1; >>> circuit.add_gate(""CZ"", 4, 3) # gate2; >>> circuit.add_gate(""CZ"", 2, 3) # gate3; >>> circuit.add_gate(""CZ"", 6, 5) # gate4; >>> circuit.add_gate(""CZ"", 2, 6) # gate5; >>> circuit.add_gate(""SWAP"", [0, 2]) # gate6; >>>; >>> scheduler = Scheduler(""ASAP""); >>> scheduler.schedule(circuit, gates_schedule=True) ; [0, 1, 3, 2, 2, 3, 4]; ```; The result list is the cycle indices for each gate. It means that the circuit can be executed in 5 gate cycles:; ```; gate0; gate1; gate3, gate4; gate2, gate5; gate6; ```; Notice that gate3 and gate4 commute with gate2, therefore, the order is changed to reduce the number of cycles. **Related issues or PRs**; Solve #1243 . **Changelog**; Add a gate(pulse) scheduler for quantum circuit. **Others**; @sarsid Maybe you will be interested in it. It can be used to determine which gates can be executed at the same time. So maybe we can improve the efficiency of the QubitCircuit by combining several gates together and generate the full matrix using `qutip.qip.expand_operation`. However, writing such scheduler in Python is usually not the most efficient choice and there will be some overhead. I'm not sure if it will bring any real improvement in circuit simulation and where is the threshold. I'm also pinging @tehruhn because I remember you mentioned something similar before (apologize if not). More tests are on the way, but you are very welcome to play with it a bit and see if there is any bug!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273:3755,test,tests,3755,https://qutip.org,https://github.com/qutip/qutip/pull/1273,1,['test'],['tests']
Testability,"t in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16762,assert,assert,16762,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,"['assert', 'test']","['assert', 'tests']"
Testability,"t module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6906,test,tests,6906,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29412,test,tests,29412,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7511,test,testing,7511,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"t of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.81s. Est. time left: 00:00:00:27; 20.0%. Run time: 4.76s. Est. time left: 00:00:00:19; 32.0%. Run time: 5.66s. Est. time left: 00:00:00:12; 40.0%. Run time: 5.67s. Est. time left: 00:00:00:08; 52.0%. Run time: 6.59s. Est. time left: 00:00:00:06; 60.0%. Run time: 6.65s. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9438,test,tests,9438,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"t of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4640,test,tests,4640,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2082,test,tested,2082,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['tested']
Testability,"t. excited = qp.basis(2, 1); ground = qp.basis(2, 0). H0 = qp.sigmaz(); H1 = qp.sigmax() # time-dependent term. H = [H0,[H1, 'A * exp(-(t / sigma) ** 2)']]. t = np.linspace(-1, 1, 200) # Define time vector; args = {'A': 6, 'sigma': 0.145}; output = qp.mesolve(H, ground, t, e_ops = [qp.sigmaz()], args=args); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; DistutilsPlatformError Traceback (most recent call last); ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. ~\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . ~\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~\Anaconda3\lib\distutils\command\build_ext.py in run(self); 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 . ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extensions(s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914:1933,assert,assert,1933,https://qutip.org,https://github.com/qutip/qutip/issues/1914,1,['assert'],['assert']
Testability,"t.figure(figsize=(10,5)); for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test,pulse_set[idx](time_test,None),label=name); plt.legend(loc=1); plt.xlabel('time'); plt.show(). for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; H = [Hsys['Hq'],[Hsys['Hc_x'], pulse_set[idx]]]; result = qu.mesolve(H, psi0, time_test, Hsys['Hlbld'],; [qu.sigmax(), qu.sigmay(), qu.sigmaz()],; progress_bar=None, options=None); b = qu.Bloch(); b.clear(); Pg, Pe = [], []; qu_blochs = result.expect; plt.title('probability of excited state'); for i,j,k in zip(qu_blochs[0],qu_blochs[1],qu_blochs[2]):; points = [i,j,k]; b.add_points(points); P0, P1 = (1+k)/2.0, (1-k)/2.0; Pg.append(P0); Pe.append(P1); plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test, Pe, label=name); plt.legend(loc=1); bloch_set.append(b); plt.xlabel('time'); plt.show(); if bloch:; bloch_set[0].show(); bloch_set[1].show(); return result. # to run the test:; test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=False); ```. The terminal out put is; ```; ![sequence](https://user-images.githubusercontent.com/41005903/82047831-11976380-96e6-11ea-869d-7278ba1cbeaa.png); ![probability](https://user-images.githubusercontent.com/41005903/82047837-12c89080-96e6-11ea-98d6-0ba6528a50ad.png); ```. **Expected behavior**; As discussed above. **Your Environment**. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.1; Numpy Version: 1.15.2; Scipy Version: 1.1.0; Cython Version: 0.28.4; Matplotlib Version: 3.0.3; Python Version: 3.5.5; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: D:\anaconda\envs\py3.5\lib\site-packages\qutip. **Additional context**; This issue is the same bug mention by @xlelephant at #1038 , but after trying the tweaking option m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265:2559,test,test,2559,https://qutip.org,https://github.com/qutip/qutip/issues/1265,1,['test'],['test']
Testability,"tError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20357,test,tests,20357,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5819,test,tests,5819,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"t__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9939,test,tests,9939,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6825,test,test,6825,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"t_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29335,test,tests,29335,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"tained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2726,test,test,2726,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability,"te dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4773,test,tests,4773,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"te or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general approach before I spend time on that. **Changelog**; Add a more flexible base result class for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:1921,test,tests,1921,https://qutip.org,https://github.com/qutip/qutip/pull/1907,1,['test'],['tests']
Testability,"te' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20984,test,testing,20984,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"te-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4091,test,test,4091,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"te-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22982,test,test,22982,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"te; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collec",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13712,test,testing,13712,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/V",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9616,test,test,9616,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to im",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25381,test,tests,25381,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2717,test,testMEDecayAsStrList,2717,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testMEDecayAsStrList', 'testPropHOStrTd']"
Testability,"test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1991,Test,TestSESolve,1991,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6679,test,tests,6679,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40729,test,tests,40729,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27085,test,testing,27085,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29491,test,tests,29491,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"thesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_comp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5801,Test,TestKrylovSolve,5801,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestKrylovSolve', 'tests']"
Testability,they are now available in the qutip/qutip-benchmark repository,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/217:42,benchmark,benchmark,42,https://qutip.org,https://github.com/qutip/qutip/pull/217,1,['benchmark'],['benchmark']
Testability,thon/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30536,test,tests,30536,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"thon/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Devel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20402,test,test,20402,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"thon/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9402,test,tests,9402,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"thon3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3540,Test,TestCircuitProcessor,3540,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,tils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27448,test,tests,27448,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6245,test,testPropHOStrTd,6245,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testPropHOStrTd', 'tests']"
Testability,"ting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [sigmax(), sigmay(), sigmaz()],; /usr/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:19192,Test,TestSESolve,19192,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"ting it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1605,Test,TestSuperopReps,1605,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Test'],['TestSuperopReps']
Testability,"ting/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16592,test,tests,16592,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"tion purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:4045,test,tests,4045,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['test'],['tests']
Testability,"tion.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1558,test,tests,1558,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,tip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ===============,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7073,test,tests,7073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"tip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4489,Test,TestCircuitProcessor,4489,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testDrift']"
Testability,"tip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18981,test,testing,18981,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:2275,assert,assert,2275,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['assert'],['assert']
Testability,"to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original develop",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26466,test,tests,26466,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,to reduce load on travis system and shorten test times ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/pull/289,1,['test'],['test']
Testability,trTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES =====================================================================,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7271,test,tests,7271,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"trap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27944,test,tests,27944,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ts/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14487,test,testing,14487,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ts/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16286,test,testing,16286,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ts/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =======",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:3027,test,testMEDecayAsStrList,3027,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testMEDecayAsStrList', 'testPropHOStrTd']"
Testability,"ts/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2471,test,tests,2471,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,ts; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39093,test,tests,39093,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ts; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45296,test,testing,45296,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"turn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E Imp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15336,test,tests,15336,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"turn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_modul",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25236,test,tests,25236,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15615,test,tests,15615,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15011,test,tests,15011,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16042,test,tests,16042,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36979,test,tests,36979,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1731,test,testing,1731,https://qutip.org,https://github.com/qutip/qutip/issues/1470,5,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"uite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28196,test,testing,28196,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26073,test,tests,26073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ule to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, ther",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:2000,Test,Tests,2000,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"ule; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_eq",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27037,test,tests,27037,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ule_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3885,test,testing,3885,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16393,test,testing,16393,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23600,test,testing,23600,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27206,test,testing,27206,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1549,test,test,1549,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,['test'],"['test', 'tests']"
Testability,"ument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1870,test,test,1870,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['test']
Testability,umpy/f2py/rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py2e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30251,test,tests,30251,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,umpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/h,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46176,test,testing,46176,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],"['testing', 'tests']"
Testability,"un_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26304,test,testing,26304,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,unit test failures with 4.7.5 and scipy 1.12 on aarch64 linux,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['test']
Testability,"urn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (asser",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12616,test,tests,12616,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"urn function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.0; Cython Version: 3.0.10; Matplotlib Version: 3.9.0; Python Version: 3.12.4; Number of CPUs: 10; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lorenzo/Desktop/virtual-envs/project1/lib/python3.12/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5576,test,tests,5576,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,['test'],['tests']
Testability,"urrently having an issue with the qutip.displace operator. I want to solve the dynamics of a 1D Hamiltonian which consists in two terms, the first one a displaced harmonic oscillator and the second one a cosine of the position operator.; Before writing all the Hamiltonian I tried several examples with different potentials : . 1) V(x) = 0.5*x**2 --> H_0 = num(dim)+0.5*qeye(dim) I found the good eigenvalues [0.5,1.5,2.5,....] no matter what was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597:1019,log,logical,1019,https://qutip.org,https://github.com/qutip/qutip/issues/1597,1,['log'],['logical']
Testability,utils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27561,test,tests,27561,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4916,Test,Test,4916,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,version 3.2.0 can not run self testing. OSX system,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:31,test,testing,31,https://qutip.org,https://github.com/qutip/qutip/issues/445,1,['test'],['testing']
Testability,"vfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjE",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5991,Test,TestMESolveStepFuncCoeff,5991,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability,"w you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` - it's near the very bottom of the list), unless you enjoy looking through a binary tonne of commits. Also, I'm laughing at the diff-stat line `+14,785 | -1`. It's the `-1` that makes it art.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1853,test,tests,1853,https://qutip.org,https://github.com/qutip/qutip/pull/1513,2,['test'],['tests']
Testability,"w/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1584,test,tests,1584,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15870,test,tests,15870,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = False; Qobj data =; [[0. 0.2236068... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. ]]]; kwargs = {'method': <900x900 _CustomLinearOperator with dtype=complex128>}, ss_args = {'ILU_MILU': 'smilu_2', 'M': None, 'all_states': False, 'diag_pivot_thresh': None, ...}, key = 'method'; L = Quantum object: dims = [[[30], [30]], [[30], [30]]], shape = (900, 900), type = super, isherm = False; Qobj data =; [[ 0.... +0.j 0. +0.j 0. +0.j ...; 0. +0.j 0. -0.33835988j -1.45 +0.j ]]; n = 30. def build_preconditioner(A, c_op_list=[], *",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:11584,test,tests,11584,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"works/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29646,test,tests,29646,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,wrong logic detecting BLAS support discrepant from numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:6,log,logic,6,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['log'],['logic']
Testability,"x measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based measurements are slightly different than the measurements usually used on circuits (or I might be missing something). Ofc, in the case of measurements on all qubits, they amount to the same result. I have not added tests yet but I have added a basic quantum teleportation notebook. It will be nice to get feedback on testing methods as well as what kind of notebooks the community is interested in. Also, any other feature requests on this module would also be appreciated. . PS: I have also added measurement code from Simon's PR here so maybe we can either add him as a contributor to this PR or figure out something else. ; ; Update: . 1. Addressing some concerns about the PR containing multiple diverging pieces of code, I think classical registers, measurement on the circuit and the classically-controlled gates are best grouped together as they all rely on each other in some ways. The valid concern is that of the Measurement class encapsulating all projective style measurements. I also want to point out that it was raised by @BoxiLi that we may want to move the Gate class and Measurement class completely to qutip.qip.operations to which I agree but I believe that should be addressed in a clean-up PR with naming changes suggested by @ajgpitch. . **Related issues or PRs**; Adds to #1090. **Changelog**; Adds partial and compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:2314,test,testing,2314,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['test'],['testing']
Testability,x-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12323,test,tests,12323,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17248,test,tests,17248,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17918,test,tests,17918,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17063,test,tests,17063,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17342,test,tests,17342,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17823,test,tests,17823,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46835,test,tests,46835,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13550,test,tests,13550,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13463,test,tests,13463,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"xception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24865,test,tests,24865,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15182,test,tests,15182,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/open,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16296,test,tests,16296,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26796,test,tests,26796,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36601,test,tests,36601,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36314,test,tests,36314,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"y); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while impor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20192,test,tests,20192,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"y); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while im",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12088,test,tests,12088,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"y-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1881,test,tests,1881,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"y/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Content",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12293,test,test,12293,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,y/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42295,test,tests,42295,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42720,test,tests,42720,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45500,test,testing,45500,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"y; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ===================================================== 51 deselected, 52 warnings, 30 errors in 0.97s =====================================================`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:31013,test,tests,31013,https://qutip.org,https://github.com/qutip/qutip/issues/2180,9,['test'],['tests']
Testability,y_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ====================================================================================,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7138,test,tests,7138,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,ying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/fin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32987,test,tests,32987,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43715,test,tests,43715,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42933,test,tests,42933,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1069: in _correlation_me_2t; rho_t = mesolve(H, rho0, tlist, c_ops, [],; /usr/lib/python3/dist-packages/qutip/mesolve.py:231: in mesolve; ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); /usr/lib/python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:14212,test,tests,14212,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Develo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5120,test,test,5120,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Fram",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7854,test,test,7854,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24913,test,test,24913,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13214,test,test,13214,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18482,test,test,18482,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3419,Test,TestCircuitProcessor,3419,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4800,Test,TestKrylovSolve,4800,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Usability," (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; print(w); gamma_phi = 44200000; gamma_minus = 100000000. epsilon = g*u*b/h*(2*cmath.pi); Delta = g*u*b_AC/h*(2*cmath.pi). H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy. print(abs(((w-w0)/(w)))*epsilon/2). #note here the final time satisfies: omega*t_final = pi/2; times=np.linspace(0, 0.0000001, 1000). #our initial qubit state ; state0=(state_z_plus)/(np.sqrt(1)). H/(2*cmath.pi). results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+ cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options). fig, ax=plt.subplots(); ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$'); ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$'); ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$'); ax.set_xlabel(""time""); ax.legend();. import imageio; def animate_bloch(values):; b = q.Bloch(); images=[] ; b.point_marker = ['o']; b.point_size = [30]; for i in range(len(values)):; b.clear(); b.add_states(values[i]); b.add_states(values[:(i+1)],'point'); beans = 'beans.png'; b.save(beans); images.append(imageio.imread(beans)); imageio.mimwrite('beans.gif',images). values = []; for t in range(0,len(times),30):; values.append((results.states[t])); animate_bloch(values). from IPython.core.interactiveshell import InteractiveShell; InteractiveShell.ast_node_interactivity = ""all""; from IPython import display. from pathlib import Path; gifPath = Path('beans.gif'); with open(gifPath,'rb') as f:; display.Image(data=f.read(), format='png'). ![g](https://user-images.githubusercontent.com/29261370/105053116-36429880-5a36-11eb-978b-8804dd1e679e.PNG); ![sp](https://user-images.githubusercontent.com/29261370/105053129-3c387980-5a36-11eb-9c0d-da3fd30bbaf5.PNG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418:2949,clear,clear,2949,https://qutip.org,https://github.com/qutip/qutip/issues/1418,1,['clear'],['clear']
Usability," > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_me",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15195,simpl,simple,15195,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability," This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product stru",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2928,simpl,simple,2928,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simple']
Usability," [Owner rights](https://github.com/orgs/qutip/people?query=role%3Aowner#) in QuTiP’s main Github Repository (qutip/qutip) that have been active in the past one year. . Additional Admin Team members can be nominated by the admin team among core developers and major contributors, and are voted by the admin team with a majority vote. Prospective Admin Team members can send self-candidatures with their proposed candidature, and two brief statements: one explaining their past involvement with the QuTiP project, and one with their commitment to the QuTiP for the future, e.g., how they would help and support the project in their activity. Emeriti Admin Team members, including previous core contributors, are listed on the QuTiP website (at qutip.org/devs), governance (github.com/qutip/governance) and documentation. **<span style=""text-decoration:underline;"">Decisions</span>**; Each admin team member has a vote in decisions. As much as possible, admins try to take in feedback on changes from the wider community and timely communicate major changes in the software. . **<span style=""text-decoration:underline;"">Communications</span>**; The admin team agrees to keep in touch regularly, through the qutip-admin channel or chosed communication medium, through the repositories’ maintenance, and with regular virtual or in-person meetings. The admin team drafts a report, [once] a year and submits it to the Board to inform it of developments on the project. ### 3. Board; **Members of the Board make sure that the Admin Team and project is well supported financially and logistically.** Thanks to them helping enable the financial and logistics support, through scientific advisory and by keeping an eye on the project, they make the life of the admin team easier. . **<span style=""text-decoration:underline;"">Tasks</span>**; Board members are volunteers that pledge to:. - Meet** [once] **a year to review the development of the project (also online).; - Be consulted for scientific advice by th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:9955,feedback,feedback,9955,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['feedback'],['feedback']
Usability," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:2275,Feedback,Feedback,2275,https://qutip.org,https://github.com/qutip/qutip/pull/1409,3,"['Feedback', 'feedback', 'progress bar']","['Feedback', 'feedback', 'progress bar']"
Usability," calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely bounded norms,” arXiv preprint arXiv:1207.5726, 2012.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1977,simpl,simple,1977,https://qutip.org,https://github.com/qutip/qutip/pull/2416,3,"['Simpl', 'simpl']","['Simpler', 'simple']"
Usability," coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:1313,simpl,simply,1313,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simply']
Usability," current documentation I cannot find anywhere how the underdamped spectral density for the HEOM module (i.e. `UnderDampedBath`) is defined. While for the `gamma` and `w0` parameters this is quite straightforward, different authors use very different conventions in the prefactors multiplying the spectral density (factors of two, pi, gamma, w0, etc.). This makes it very hard to understand how the `lam` parameter is exactly defined. Having a proper understanding of the `lam` parameter is quite essential to properly compare with the results obtained via other methods. I think it would be quite useful to explicitly write down the mathematical formula of the spectral density being used in the documentation. In the mean time, I would also appreciate if anyone with knowledge of the proper definition would be kind enough to share it here. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. I would expect the documentation to make it clear what each parameter controls in the spectral density definition. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.23.1; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.5; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/fc/bin/venvs/qutip/lib/python3.10/site-packages/qutip; =====================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1959:1015,clear,clear,1015,https://qutip.org,https://github.com/qutip/qutip/issues/1959,1,['clear'],['clear']
Usability," define all operations in the data layer as well:; ```python; >>> data.matmul[NewDataType, data.CSR]; <indirect specialisation (NewDataType, CSR, CSR) of matmul>; ```; All of the data layer will now work seamlessly with the new type, even though this is actually achieved by conversion to and from a known data type. There was no need to call anything other than `data.to.add_conversions`. Internally, this is achieved by `data.Dispatcher.__init__` storing a reference to itself in `data.to`, and `data.to` calling `rebuild_lookup` as part of `add_conversions`. Now the user only needs to add in the specialisations that they actually need for the bottle-neck parts of their application, and leave the dispatcher to handle all other minor components by automatic conversion. As in the previous subsection, they do this by calling `add_specialisations` on the relevant operations. #### Creating a new dispatcher. In most user-defined functions which operate on `Qobj.data` it will be completely sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:12264,simpl,simply,12264,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simply']
Usability," functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:2202,simpl,simple,2202,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['simpl'],['simple']
Usability," of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanholman/opt/anaconda3/envs/qutip/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:1720,simpl,simple,1720,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['simpl'],['simple']
Usability," pull request for a subpackage for non-Markovian solvers, called `nonmarkov`. This idea was mentioned in issue #384. The subpackage now includes two modules, with two quite different non-Markov solvers:. `transfertensormethod`: This module is an implementation of the ""Transfer Tensor Method"" (TTM) introduced by Cerrillo and Cao in [Phys. Rev. Lett 112, 110401 (2014)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.112.110401) ([arXiv link](http://arxiv.org/abs/1307.7743)). TTM is a completely general purpose approach to non-Markovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1043,feedback,feedback,1043,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['feedback'],['feedback']
Usability,"# Change log; Right now, maintainers need to go through the PRs in `qutip/qutip` to update the changelog. This is quite time consuming. . There may be automated tools to generate the change log. . I propose at minimum to keep a changelog file also in `qutip/qutip`, asking contributors to update it before merging the PR. This makes it simpler than for them to open another PR to `qutip/qutip-doc`. # Classes and functions; As note in the [`release_distribution`](https://github.com/qutip/qutip-doc/blob/master/release_distribution.rst) guidelines, one should check that new functions and classes are included in the `classes.rst` and `functions.rst` files. Having a recipe to check this quickly or automatically, maybe with a script like this [one](https://stackoverflow.com/questions/1796180/how-can-i-get-a-list-of-all-classes-within-current-module-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:336,simpl,simpler,336,https://qutip.org,https://github.com/qutip/qutip/issues/1533,2,"['guid', 'simpl']","['guidelines', 'simpler']"
Usability,"## Changelog; The changelog file is present in `qutip/qutip-doc`. This means that for each new release, the maintainers need to go through the merged PRs and update the file accordingly. . I propose introducing a copy of the changelog file, which would simplify maintenance: each contributor could update their own contribution without opening a PR in the separate repository, which often does not happen. A message of a basic template with checklist could be prompted in the PR for itself. . ## PR template; To prompt these actions, just like for the changelog, [a template](https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors) with suggested checklist could be made in the PRs. . ## Repositories refactoring ; Actually, this is all part of a wider problem for which the `qutip-doc` does not get well updated in general. In Qutip 4.5.0 I added a lot of missing elements to `functions.rst` and `classes.rst` in the api-doc. Moreover, the User guide is seldom updated. Maybe, moving the `qutip-doc` repository in the main `qutip/qutip` repository could help in this regard.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1172:253,simpl,simplify,253,https://qutip.org,https://github.com/qutip/qutip/issues/1172,2,"['guid', 'simpl']","['guide', 'simplify']"
Usability,"## Preliminaries; The diamond norm [1] is a commonly used metric in quantum information theory for calculating the distance between two quantum channels. It has a number of useful properties making it the gold standard [2] in the field for several applications. In general, a complex semidefinite program is required to calculate the diamond norm. Although elegant, this approach is very inefficient. Unfortunately, no alternative method has been discovered for calculating the diamond norm in the general case of CPTP channels. However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (cu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:993,simpl,simplified,993,https://qutip.org,https://github.com/qutip/qutip/pull/2416,1,['simpl'],['simplified']
Usability,"### Bug Description. A new warning is raised when using qutip with numpy 1.25:. `photonic-quantum-circuit-simulator-8sWQjw5Q-py3.9\lib\site-packages\qutip\superop_reps.py:241: DeprecationWarning: product is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use prod instead.; nq = _nq(q_oper.dims)`. Should be a simple fix of renaming `np.product` by `np.prod`. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. No warnings should be raised. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.13; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. The whole codebase should be searched for `np.product`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2179:334,simpl,simple,334,https://qutip.org,https://github.com/qutip/qutip/issues/2179,1,['simpl'],['simple']
Usability,### Bug Description. As reported on the QuTiP mailing list:. > I just find that one of our documentation pages has a plot that repeats several times and makes the page hard to read. I attach the link below: https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html. This is because this documentation page doesn't manage and clear the plot context properly. ### Code to Reproduce the Bug. ```shell; See the generated documentation.; ```. ### Code Output. _No response_. ### Expected Behaviour. The plot should only appear once. ### Your Environment. ```shell; The documentation online at https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html.; ```. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2007:237,guid,guide,237,https://qutip.org,https://github.com/qutip/qutip/issues/2007,3,"['clear', 'guid']","['clear', 'guide']"
Usability,"### Bug Description. Construct a density matrix, via some array creation method (in this case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1782:338,simpl,simple,338,https://qutip.org,https://github.com/qutip/qutip/issues/1782,1,['simpl'],['simple']
Usability,"### Bug Description. Hello, I just submitted this report but the system seems to have crashed. I am re-submitting it with a shorter title. If there is a duplicate, please disregard the first one. Thanks!. I have python scripts running qutip a couple of years ago. I never touched my qutip installation. Today I tried to run it again and got an error. It happened with the simple line ""_from qutip import *_"" (See error output in the output field below). So what changed? This happens even when I simply run the script from the command line, or run this command in the web-based Jupyter environment. I tried several solutions suggested on the web and by ChatGPT to uninstall/reinstall and roll back versions etc. Nothing worked. I got the exact same error each time.; The error happens as early as Import qutip. ### Code to Reproduce the Bug. ```shell; from qutip import *; ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_5760/2092932745.py in <module>; ----> 1 from qutip import *. ~\Anaconda3\lib\site-packages\qutip\__init__.py in <module>; 31 #; 32 ; ---> 33 from .core import *; 34 from .solver import *; 35 from .solver import nonmarkov. ~\Anaconda3\lib\site-packages\qutip\core\__init__.py in <module>; 1 from .options import *; 2 from .coefficient import *; ----> 3 from .qobj import *; 4 from .cy.qobjevo import *; 5 from .expect import *. ~\Anaconda3\lib\site-packages\qutip\core\qobj.py in <module>; 1806 from qutip.core.superoperator import vector_to_operator, operator_to_vector; 1807 from qutip.core.tensor import tensor_swap, tensor; -> 1808 from qutip.core import metrics as mts. ~\Anaconda3\lib\site-packages\qutip\core\metrics.py in <module>; 17 from .operators import qeye, qeye_like; 18 from .states import ket2dm; ---> 19 from .semidefinite import dnorm_problem, dnorm_sparse_problem; 20 from . import data as _data; 21 . ~\Anaconda3\lib\s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2500:372,simpl,simple,372,https://qutip.org,https://github.com/qutip/qutip/issues/2500,2,['simpl'],"['simple', 'simply']"
Usability,"### Bug Description. I attempted to recreate [this animation](https://raw.githubusercontent.com/qutip/qutip/master/doc/figures/bloch_decay.mp4) of the Bloch sphere using the instructions in the [Plotting on the Bloch Sphere/Directly Generating an Animation](https://qutip.org/docs/latest/guide/guide-bloch.html#directly-generating-an-animation) section of the user guide. Using Matplotlib 3.4.3 gives a warning,. > MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes. The movie is produced fine. If I use Matplotlib 3.7.1, the movie file contains a white background and no drawn Bloch sphere; see [here](https://user-images.githubusercontent.com/906390/232609935-a701d20f-aab0-43f8-bf27-7b7088517cf2.mp4). This issue appears to be fixed by modifying the line `ax = Axes3D(fig, azim=-40, elev=30)` in the example to `ax = fig.add_subplot(111, projection=""3d"", elev=30, azim=-40)`. ### Code to Reproduce the Bug. ```shell; import numpy as np; import qutip; from matplotlib import pyplot, animation; from mpl_toolkits.mplot3d import Axes3D. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); sm = qutip.sigmam(); H = w * (np.cos(theta) * sz + np.sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sz); # evolve and calculate expectation values; output = qutip.mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], outp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2156:288,guid,guide,288,https://qutip.org,https://github.com/qutip/qutip/issues/2156,3,['guid'],"['guide', 'guide-bloch']"
Usability,"### Bug Description. I'm unable to run a time-dependent Hamiltonian, or even compile one with a string coefficient. . I tried to copy the example code on the website ; [](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html); as well as write a simple script (below), but both fail. The output is a traceback which ends with the following errors and exceptions:; ```; **ImportError: Building module cqobjevo_compiled_coeff_8478972439442 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']; Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_8478972439442.pyx**; ```. I'd appreciate some help, as my code requires the string input to run faster, with the speed-up offered by Cython. It is quite slow with the function-based input. . ### Code to Reproduce the Bug. ```shell; import qutip as qp; import numpy as np; import matplotlib.pyplot as plt. excited = qp.basis(2, 1); ground = qp.basis(2, 0). H0 = qp.sigmaz(); H1 = qp.sigmax() # time-dependent term. H = [H0,[H1, 'A * exp(-(t / sigma) ** 2)']]. t = np.linspace(-1, 1, 200) # Define time vector; args = {'A': 6, 'sigma': 0.145}; output = qp.mesolve(H, ground, t, e_ops = [qp.sigmaz()], args=args); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; DistutilsPlatformError Traceback (most recent call last); ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~\Anaco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914:201,guid,guide,201,https://qutip.org,https://github.com/qutip/qutip/issues/1914,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"### Bug Description. In some rare cases, like the example below, simdiag does not return orthonormal eigenvectors, despite this always being possible. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import simdiag, Qobj. a = np.array([[1, 0, 1, -1, 0],; [0, 4, 0, 0, 1],; [1, 0, 4, 1, 0],; [-1, 0, 1, 4, 0],; [0, 1, 0, 0, 4]]). b = np.eye(5). evals, evecs = simdiag([Qobj(a), Qobj(b)]); evecs = np.array([evec.full() for evec in evecs]).squeeze(). # Check that eigenvectors form an othonormal basis (<=> matrix of eigenvectors is unitary); deviation_from_unitarity = np.linalg.norm(evecs@evecs.conj().T - np.eye(len(evecs))); assert np.isclose(deviation_from_unitarity, 0); ```. ### Code Output. ```shell; AssertionError; ```. ### Expected Behaviour. Since by requirement of simdiag all input matrices must be hermitian and commute, the common eigenvectors should always be orthonormal. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The fix is simple: ; Here; ```python; subspace = vecs.conj().T @ ops[i].full() @ vecs; eigvals, eigvecs = la.eig(subspace); ```; `la.eig` has to be replaced by `la.eigh`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2268:1242,simpl,simple,1242,https://qutip.org,https://github.com/qutip/qutip/issues/2268,1,['simpl'],['simple']
Usability,"### Bug Description. Perhaps I am not understanding how a qutip device works. I have been following the example from https://qutip.org/docs/latest/guide/qip/qip-processor.html#qip-processor as I want to add noise to my quantum circuits. However, I saw that using ```processor.run_state(init_state)``` returns a different state compared to ```qc.run(init_state)``` for certain circuits. ### Code to Reproduce the Bug. ```shell; import numpy as np. from qutip import basis, tensor; from qutip.qip.circuit import QubitCircuit; from qutip.qip.device import LinearSpinChain. num_qubits = 3; init_state = tensor([basis(2,1) for x in range(num_qubits)]); qc = QubitCircuit(num_qubits); qc.add_gate(""CNOT"", targets=1, controls=[0]). # Uses a LinearSpinChain processor to obtain the final state; processor = LinearSpinChain(num_qubits); processor.load_circuit(qc); processor_state = processor.run_state(init_state).states[-1].tidyup(1.0e-6). # Obtains state by running the circuit directly; circuit_state = qc.run(init_state). print(processor_state); print(); print(circuit_state); print(). # Calculates the fidelity between both states to show that states are not just differing by a phase; fidelity = np.abs((circuit_state.dag() * processor_state)[0]). print(""Fidelity:"", np.abs(fidelity[0])); ```. ### Code Output. ```shell; Quantum object: dims = [[2, 2, 2], [1, 1, 1]], shape = (8, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]]. Quantum object: dims = [[2, 2, 2], [1, 1, 1]], shape = (8, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]]. Fidelity: [0.]; ```. ### Expected Behaviour. By just adding an RY gate to the circuit, both methods of obtaining the state now returns the same state with unit fidelity. . ```; import numpy as np. from qutip import basis, tensor; from qutip.qip.circuit import QubitCircuit; from qutip.qip.device import LinearSpinChain. num_qubits = 3; init_state = tensor([basis(2,1) for x in range(num_qubits)]); qc = Qub",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2003:147,guid,guide,147,https://qutip.org,https://github.com/qutip/qutip/issues/2003,1,['guid'],['guide']
Usability,"### Bug Description. QuTiP Qobj has a `tinyup()` method that sets to 0 all values lower than a certain threshold defined by `settings.auto_tidyup_atol`:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L1383. As explained in [here](https://qutip.org/docs/latest/guide/guide-settings.html), the user should be able to change this value. . Playing with this options I realized that changing the `qutip.settings.auto_tidyup` to False works, but changing the `qutip.settings.auto_tidyup_atol` value doesn't. ### Code to Reproduce the Bug. ```shell; import qutip. qutip.settings.auto_tidyup_atol = 1e-30; a = qutip.Qobj(1); print(a * 1e-15); qutip.settings.auto_tidyup = False; print(a * 1e-15); ```. ### Code Output. ```shell; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[0.]]; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. ### Expected Behaviour. The first print should have been:; ```; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. When multiplying `a * 1e-15`, QuTiP calls the `__mul__` magic method, where `out.tidyup()` is called:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L581. Tidyup contains one argument set to `settings.auto_tidyup_atol` by default. This value should change to 1e-30 when running `qutip.settings.auto_tidyup_atol = 1e-30`, but this never happens. Consequently, the output value is set to 0. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1829:305,guid,guide,305,https://qutip.org,https://github.com/qutip/qutip/issues/1829,2,['guid'],"['guide', 'guide-settings']"
Usability,"### Bug Description. Qutip's HTMLProgressBar seems not to function any more in jupyter notebooks. Perhaps since ""jupyterlab"" was introduced. ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np; qt.mcsolve(qt.sigmax(), state=qt.basis(2, 0), tlist=np.linspace(0, 5, 100), c_ops=[qt.sigmam()], ntraj=100, options={'progress_bar': 'html'}); ```. ### Code Output. ```shell; [[ empty progress bar ]]; Javascript Error: $ is not defined; Javascript Error: $ is not defined; Javascript Error: $ is not defined; Javascript Error: $ is not defined; ...; ```. ### Expected Behaviour. There should be no error and the progress bar should display the progress. ### Your Environment. ```shell; ""About Jupyter Notebook"" shows version 7.2.1. QuTiP Version: 5.1.0.dev0+487e4ec; Numpy Version: 2.0.0; Scipy Version: 1.13.1; Cython Version: 3.0.10; Matplotlib Version: 3.8.4; Python Version: 3.12.4; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The weird thing is that `$()` actually is available, as one can see in the developer console. Relevant stackoverflow discussions:; * https://stackoverflow.com/questions/72316844/jupyter-notebook-jupyternotify-javascript-error-is-not-defined; * https://stackoverflow.com/questions/22004386/notify-when-execution-command-is-completed (in comments to top answer). Thanks to Hussein Shiri for pointing this bug out on the mailing list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2475:406,progress bar,progress bar,406,https://qutip.org,https://github.com/qutip/qutip/issues/2475,2,['progress bar'],['progress bar']
Usability,"### Bug Description. Realized that I was getting inconsistent results in my Hamiltonian simulation code, and was testing using basic matrix operations. Some pieces that qutip was not doing easily, I used numpy objects and operations to complete. . Qutip documentation suggests using * operator for matrix/vector multiplication https://qutip.org/docs/4.7/guide/guide-states.html -- but this will yield undesired results when the types of all objects are not rigorously checked. . ### Code to Reproduce the Bug. ```shell; import qutip; import numpy as np. A = qutip.Qobj([[0, 1], [1, 0]]); B = qutip.Qobj([[1, 2], [3, 4]]). # qutip objects; print(A * B) # gives expected results; print(A @ B) # gives expected results. C = np.array([[0, 1], [1, 0]]); D = np.array([[1, 2], [3, 4]]). # numpy objects; print(C * D) # gives wrong results; print(C.dot(D)) # gives expected results; print(C @ D) # gives expecting results; ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; [[0 2]; [3 0]]; [[3 4]; [1 2]]; [[3 4]; [1 2]]; ```. ### Expected Behaviour. Would prefer that qutip A*B yields the same results as numpy, and A @ B becomes the default matrix operator, or another function is suggested. Consistency with numpy would be better. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2547:354,guid,guide,354,https://qutip.org,https://github.com/qutip/qutip/issues/2547,2,['guid'],"['guide', 'guide-states']"
Usability,"### Bug Description. The act of the CNOT gate is not what it is expected. In particular it changes the target qubit when the control qubit is in the ground state instead of excited state given that in qutip basis(2,1) is the ground state. If this is on purpose it needs to be clearly stated in the tutorials or the documentation. ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip_qip.circuit import QubitCircuit; from qutip_qip.operations import (Gate, berkeley, cnot, cphase, csign, fredkin,; gate_sequence_product, globalphase, iswap,; molmer_sorensen, phasegate, qrot, rx, ry, rz,; snot, sqrtiswap, sqrtnot, sqrtswap, swap,; swapalpha, toffoli); test=cnot()*tensor(basis(2,1),basis(2,1)); print(test); ```. ### Code Output. ```shell; Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [1.]; [0.]]; ```. ### Expected Behaviour. Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [0.]; [1.]]. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.11.4; Cython Version: None; Matplotlib Version: 3.8.0; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/anaconda3/lib/python3.11/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2494:276,clear,clearly,276,https://qutip.org,https://github.com/qutip/qutip/issues/2494,1,['clear'],['clearly']
Usability,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:762,simpl,simple,762,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['simpl'],['simple']
Usability,"### Bug Description. The documentation indicates that there may be some subtlety about `rho` being vectorized. However, it is not clear how to then handle input with tensor product structure such that `propagator` doesn't fail with a `ValueError`. ### Code to Reproduce the Bug. ```shell; from qutip import sigmaz, qeye, propagator, tensor, sigmam. c_ops = [tensor(sigmam(), qeye(2))]; H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); H = H0; prop = propagator(H, 1.0, c_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); /var/folders/k_/98g3h5x154q9q5bnmlxj2zwr0000gr/T/ipykernel_59733/3250178117.py in <module>; 4 H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1899:130,clear,clear,130,https://qutip.org,https://github.com/qutip/qutip/issues/1899,1,['clear'],['clear']
Usability,"### Bug Description. The function steadystate() does not seem capable of handling Liouvillians with non-unique steady states. This is immediately apparent because steadystate() does not contain an argument for an initial state at time zero. Instead, it returns a state (presumably some linear combination of the null-space operators) that does not match the long time output from mesolve(), which varies based on initial condition. There are many Liouvillians which do not admit unique steady states, but a simple example can be found in Section 3.3 of [this tutorial](https://doi.org/10.48550/arXiv.2303.16449). ### Code to Reproduce the Bug. ```shell; The bug is apparent from the documentation, as steadystate() does not contain an argument for an initial state.; ```. ### Code Output. _No response_. ### Expected Behaviour. For Liouvillians that admit non-unique steady states, I expected steadystate() to return the long time limit of mesolve() given a particular initial condition. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /opt/anaconda3/lib/python3.7/site-packages/qutip; ================================================================================; Please cite QuTiP in ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2175:507,simpl,simple,507,https://qutip.org,https://github.com/qutip/qutip/issues/2175,1,['simpl'],['simple']
Usability,"### Bug Description. The option `vector_style=''` does not work. . Even though the fix is quite simple, I would like to remove it since it is not documented, it would simplify the code and the option '-' achieves the same thing anyways. @hodgestar and @Ericgig, any thoughts?. ### Code to Reproduce the Bug. ```shell; import qutip; bloch = qutip.Bloch(); bloch.add_vectors([0,0,1]); bloch.vector_style = ''; bloch.show(); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); Input In [4], in <cell line: 4>(); 2 bloch.add_vectors([0,0,1]); 3 bloch.vector_style = ''; ----> 4 bloch.show(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:883, in Bloch.show(self); 868 def show(self):; 869 """"""; 870 Display Bloch sphere and corresponding data sets.; 871 ; (...); 881 in the cell you create the figure in.; 882 """"""; --> 883 self.render(); 884 if self.run_from_ipython():; 885 display(self.fig). File ~/git_repo/qutip/qutip5/qutip/bloch.py:677, in Bloch.render(self); 675 self.plot_back(); 676 self.plot_points(); --> 677 self.plot_vectors(); 678 self.plot_lines(); 679 self.plot_arcs(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:779, in Bloch.plot_vectors(self); 775 color = self.vector_default_color[idx]; 777 if self.vector_style == '':; 778 # simple line style; --> 779 self.axes.plot(xs3d, ys3d, zs3d,; 780 zs=0, zdir='z', label='Z',; 781 lw=self.vector_width, color=color,; 782 alpha=alpha); 783 else:; 784 print(; 785 xs3d, ys3d, zs3d,; 786 self.vector_mutation,; (...); 789 color,; 790 alpha). File ~/.virtualenvs/qutip5/lib/python3.10/site-packages/mpl_toolkits/mplot3d/axes3d.py:1490, in Axes3D.plot(self, xs, ys, zdir, *args, **kwargs); 1488 zs, *args = args; 1489 if 'zs' in kwargs:; -> 1490 raise TypeError(""plot() for multiple values for argument 'z'""); 1491 else:; 1492 zs = kwargs.pop('zs', 0). TypeError: plot() for multiple values for argument 'z'; ```. ### Expected Behaviour. it should ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916:96,simpl,simple,96,https://qutip.org,https://github.com/qutip/qutip/issues/1916,2,['simpl'],"['simple', 'simplify']"
Usability,"### Bug Description. The qutip documentation at https://qutip.org/docs/4.0.2/guide/dynamics/dynamics-master.html#unitary-evolution has the code; ```; In [1]: H = 2 * np.pi * 0.1 * sigmax(). In [2]: psi0 = basis(2, 0). In [3]: times = np.linspace(0.0, 10.0, 20.0). In [4]: result = mesolve(H, psi0, times, [], [sigmaz()]); ```; This does not work with recent versions of numpy. In particular `np.linspace(0.0, 10.0, 20.0)` generates the exception `TypeError: 'float' object cannot be interpreted as an integer`. ### Code to Reproduce the Bug. ```shell; import numpy as np; np.linspace(0.0, 10.0, 20.0); ```. ### Code Output. _No response_. ### Expected Behaviour. Documenation examples should be able to execute. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 5.0.0.dev0+7425775; Numpy Version: 1.21.6; Scipy Version: 1.8.0; Cython Version: 0.29.30; Matplotlib Version: 3.5.1; Python Version: 3.10.0; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: c:\projects\misc\qutip\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. ### Additional Context. None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1944:77,guid,guide,77,https://qutip.org,https://github.com/qutip/qutip/issues/1944,1,['guid'],['guide']
Usability,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1831:284,guid,guide,284,https://qutip.org,https://github.com/qutip/qutip/issues/1831,1,['guid'],['guide']
Usability,"### Bug Description. When calling `mcsolve` with operators that have a collapse feedback, everything works as it should on the first trajectory. On all other trajectories, the collapse feedback parameter will still contain the collapses of the first trajectory (and only those). ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np. def hamiltonian(t, jumps):; print(t, ', ', jumps); return qt.sigmax() * (len(jumps) + 1). tlist = np.linspace(0, 10, 500); H = qt.QobjEvo(hamiltonian, args={'jumps': qt.MCSolver.CollapseFeedback()}). result = qt.mcsolve(H, qt.basis(2, 1), tlist,; c_ops=[qt.sigmam()], e_ops=[qt.sigmaz()],; ntraj=2, options={'keep_runs_results': True, 'map': 'serial'}); ```. ### Code Output. ```shell; ##### FIRST TRAJECTORY. 0.0 , []; 2.109452934261477e-12 , []; ...; 0.6212424849699398 , []; 0.6086836025648399 , [(0.6086836025648399, 0)]; ...; 1.6032064128256511 , [(0.6086836025648399, 0)]; 1.6024822039345563 , [(0.6086836025648399, 0), (1.6024822039345563, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]. ##### SECOND TRAJECTORY. 0.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; 1.0547264671307385e-12 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ```. ### Expected Behaviour. On the second trajectory, the list of collapses should have been reset to `[]` and then updated during the run of that trajectory. ### Your Environment. ```shell; QuTiP Version: 5.1.0.dev0+d8c6584; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I have tracked the source of the problem as follows:; * The `MCIntegrator` [correctly calls](https://github.com/qutip/qutip/blob/d8c6584",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2422:80,feedback,feedback,80,https://qutip.org,https://github.com/qutip/qutip/issues/2422,2,['feedback'],['feedback']
Usability,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:520,simpl,simple,520,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['simpl'],['simple']
Usability,"### Bug Description. When passing sesolve a time independent Hamiltonian, there is still time-dependent evolution returned. It seems to depend on the number of time steps passed to the solver, with more time steps giving more drastic time-dependent evolution. . ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *. qubit_freq = 5000. # operators; a = destroy(2). # Basis States; z_p = basis(2,0); z_m = basis(2,1); x_p = (z_p + z_m)/np.sqrt(2); x_m = (z_p - z_m)/np.sqrt(2); y_p = (z_p + 1j*z_m)/np.sqrt(2); y_m = (z_p - 1j*z_m)/np.sqrt(2) . psi0 = x_p. # Hamiltonian; H = qubit_freq*2*np.pi * (a.dag() * a + 1/2). tlist = np.linspace(0, 0.1, 100000). output1 = sesolve(H, psi0, tlist, e_ops=[a.dag()*a]); n_a = output1.expect[0]. # Plot Occupation with respect to time; fig, axes = plt.subplots(1, 1, figsize=(10,6)); axes.plot(tlist, n_a, label=""Qubit""); axes.legend(loc=0); axes.set_xlabel('Time'); axes.set_ylabel('Occupation probability'); plt.show(); ```. ### Code Output. _No response_. ### Expected Behaviour. The graph provided should be a flat line, indicating no time evolution. . ### Your Environment. ```shell; QuTiP Version: 4.7.3; Numpy Version: 1.23.5; Scipy Version: 1.11.4; Cython Version: 3.0.6; Matplotlib Version: 3.7.1; Python Version: 3.10.12; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. ![image](https://github.com/qutip/qutip/assets/112031379/cfee4cd8-6b7a-4b9c-87b3-a81d45128132). This plot shows a loss in population when beginning in the x state of a simple two level system. Playing around with the code, I find the slope of this line changes as you give a different number of points in tlist. This also happens with mesolve and mcsolve with no collapse operators (although I suspect this is because behind the scenes, it's just using sesolve).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2275:1644,simpl,simple,1644,https://qutip.org,https://github.com/qutip/qutip/issues/2275,1,['simpl'],['simple']
Usability,"### Bug Description. When trying to perform a trivial partial trace (of a ket) when no subsystem is traced over (all subsystems are kept), the result is a ket. ### Code to Reproduce the Bug. ```shell; from qutip import tensor,basis; psi = tensor(basis(2, 0), basis(2, 1)); print(psi.ptrace([0,1])); ```. ### Code Output. ```shell; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[0.]; [1.]; [0.]; [0.]]; ```. ### Expected Behaviour. A density operator should be returned for consistency. The documentation (https://qutip.org/docs/latest/guide/guide-tensor.html) also mentions that: . > Note that the partial trace always results in a density matrix (mixed state), regardless of whether the composite system is a pure state (described by a state vector) or a mixed state (described by a density matrix). ### Your Environment. ```shell; QuTiP version: 4.7.1; ```. ### Additional Context. The issue seems to originate in _ptrace_dense (see https://qutip.org/docs/latest/modules/qutip/qobj.html), where the following code appears:; ```; if not dtrace:; # If we are keeping all dimensions, no need to construct an ndarray.; return Q.copy(); ```; A projector onto the state should be returned here instead of the copy of the state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129:572,guid,guide,572,https://qutip.org,https://github.com/qutip/qutip/issues/2129,2,['guid'],"['guide', 'guide-tensor']"
Usability,"### Describe the Issue!. By building QuTiP 5 with:; ```; python -m build \; --wheel \; --config-setting=""--global-option=--with-idxint-64""; ```; one can use 64-bit integer indices. Currently this is only documented in the changelog. We should also write a short guide on it, perhaps. It might also be worthwhile adding a CI build for the 64-bit index case.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2278:262,guid,guide,262,https://qutip.org,https://github.com/qutip/qutip/issues/2278,1,['guid'],['guide']
Usability,### Describe the Issue!. Discussion of state vectors and density matrices in users' guide is slightly muddy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1770:84,guid,guide,84,https://qutip.org,https://github.com/qutip/qutip/issues/1770,1,['guid'],['guide']
Usability,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733:419,simpl,simple,419,https://qutip.org,https://github.com/qutip/qutip/issues/1733,1,['simpl'],['simple']
Usability,"### Describe the Issue!. I have a big matrix which is a [QuTiP](https://qutip.org/) object. I am trying to run this line of code:. ops_numpy = [op.full() for op in m_ops] # convert the QuTiP Qobj to numpy arrays. But I am getting the following error:. MemoryError: Unable to allocate 16.0 TiB for an array with shape (1048576, 1048576) and; data type complex128. Here, `m_ops` is a list with `len(m_ops) = 27` and every `m_ops[i]` is a quantum object of shape. In [91]: m_ops[1].shape; Out[91]: (1048576, 1048576). Ok, I can see that I am trying to convert a QuTiP object into a numpy array but this object is so big that I have a memory issue. My question is simple: is there any way to overcome this issue? can I 'cut' the object in smaller pieces to convert it and then put the ""pieces back together""?. I really have no idea. Maybe I am not doing in the optimal way but I was working with really smaller matrix until this one and I didn't foresaw this problem. Any help or reference will be highly appreciated. This is really important for me. ----------------------------------------------------------------. EDIT with the full code:. """""".""""""; import numpy as np; import tensorflow as tf; from qutip import tensor; from qutip import sigmax, sigmaz, sigmay; from qutip import coherent, coherent_dm, expect, Qobj, fidelity, hinton; from tqdm.auto import tqdm. #%load_ext autoreload; tf.keras.backend.set_floatx('float64') # Set float64 as the default. # Local paths:; local_path = ""0_qst_master/cgan_tf_20qb/%s""; data_path = ""0_qst_master/cgan_tf_20qb/data/%s"". # Reading projectors; projs_settings = np.loadtxt(data_path % 'measurement_settings.txt', dtype=str). X = sigmax(); Y = sigmay(); Z = sigmaz(). m_ops = [] # measurement operators. def string_to_operator(basis): ; mat_real = []; ; for j in range(len(basis)):; if basis[j] == 'X':; mat_real.append(X) ; if basis[j] =='Y':; mat_real.append(Y) ; if basis[j] =='-Y':; mat_real.append(-Y) ; if basis[j] == 'Z':; mat_real.append(Z) ; return mat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2176:660,simpl,simple,660,https://qutip.org,https://github.com/qutip/qutip/issues/2176,1,['simpl'],['simple']
Usability,"### Describe the Issue!. I have a question that is not really a bug or feature request (although it is, perhaps, a request for more documentation). I also don't know if this is the place to ask, please refer me elsewhere if it is not. I am trying to solve a problem with a time-dependent hamiltonian, time-dependent collapse operators, including calculating two-time-two-operator correllation functions. My questions are the following:. 1) The documentation only shows the use of square brackets for time-dependent terms. However, tuples also work, but give different behaviour. Is this desired? If its desired, can a description of the behaviour be added to the documentation?; In other words, what, in mesolve and correlation_2op_2t, is the difference between:; H = [H0, [H1, f1(t)], [H2, f2(t)]] and H = [H0, (H1, f1(t)), (H2, f2(t))] . 2) The same question as above goes for the collapse operators. . And, for me the most important question is the following; 3) For the system I try to simulate, I need to implement a collapse operator that is not simply of the shape shown in the documentation, but of the shape C_2 = f(t)*\hat{a} + c*\hat{b}. I've tried various ways to implement this, and some seem to work, but I cannot determine with certainty which is correct. Is it:; [C_0, C_1, [[\hat{a}, f(t)], [\hat{b}, c(t)]]]; (where c(t) is a dummy function that always outputs the (time-independent) value c?); Or is it:; [C_0, C_1, [(\hat{a}, f(t)), (\hat{b}, c(t))]]; Or is it something different entirely?. Thanks for your help!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065:1052,simpl,simply,1052,https://qutip.org,https://github.com/qutip/qutip/issues/2065,1,['simpl'],['simply']
Usability,"### Describe the Issue!. I have installed Qutip version 5.0.2, and I've been trying to use the parfor method (see https://qutip.org/docs/4.0.2/guide/guide-parfor.html). When calling it, I get the error: ""NameError: name 'parfor' is not defined"".; I'm not trying to do anything exotic yet, I was just testing the rudimentary example from the webpage:. from qutip import *; def func1(x): ; return x, x**2, x**3; a, b, c = parfor(func1, range(10)); print(a)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:143,guid,guide,143,https://qutip.org,https://github.com/qutip/qutip/issues/2551,2,['guid'],"['guide', 'guide-parfor']"
Usability,"### Describe the Issue!. I noticed some terminology used in the QuTip documentation that I think is not quite accurate. . The description of ""m_ops"" in the [stochastic solver options](https://qutip.org/docs/latest/apidoc/classes.html#qutip.stochastic.StochasticSolverOptions) states:. > List of operators representing the measurement operators. However, it is clear from the example given [here](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html) that ""m_ops"" represents the observable being measured and not the measurement operator. . The distinction is that the term ""measurement operator"" usually refers to an (efficient) quantum operation that brings a pure state to a pure state. The measurement operators are the operators that generate the stochastic evolution and are akin to ""sc_ops"", not to ""m_ops"". The operators ""m_ops"" used by the stochastic solver define the POVM elements, i.e., they define the probabilities of measurement outcomes. This is not the same as a measurement operator. . For more detail, see the first chapter of the [standard textbook](https://www.cambridge.org/core/books/quantum-measurement-and-control/F78F445CD9AF00B10593405E9BAC6B9F) by Wiseman and Milburn. P.S. Note that Wiseman also calls the POVM elements ""effects"", which I think is dreadfully confusing. But I think there is pretty universal agreement that ""measurement operator"" should refer to the quantum maps.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2212:360,clear,clear,360,https://qutip.org,https://github.com/qutip/qutip/issues/2212,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"### Describe the Issue!. I think our family packages - `qutip-qip`, `qutip-qoc`, `qutip-jax` - should be mentioned in the documentation somewhere. There is [a page in the Users Guide](https://qutip.readthedocs.io/en/master/guide/guide-control.html) about `qutip-qtrl`, which is however deprecated in favor of `qutip-qoc`. My suggestion would be to remove the content of the ""Quantum Optimal Control"" page in the Users Guide, which has been migrated to the [qutip-qoc documentation](https://qutip-qoc.readthedocs.io/latest/guide/guide-control.html), and instead have a page with short descriptions of the family packages and links to their documentations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2524:177,Guid,Guide,177,https://qutip.org,https://github.com/qutip/qutip/issues/2524,6,"['Guid', 'guid']","['Guide', 'guide', 'guide-control']"
Usability,"### Describe the Issue!. I'm trying to simulate a simple two-level system with a sinusoidally varying external magnetic field. The code is given below:. ```python3; import matplotlib.pyplot as plt; import numpy as np; from qutip import basis, sigmax, sigmay, sigmaz, Options, mesolve, expect; from scipy.constants import physical_constants. g = 2; muB = (physical_constants[""Bohr magneton in eV/T""])[0] ## Bohr-Magneton in eV/Tesla; gamma = 0.5*muB*g #in eV/Tesla. h_inv = (physical_constants[""reduced Planck constant in eV s""][0])**-1. gamma = gamma*h_inv #in sec-1/Tesla; del physical_constants; ## Defining time of evolution; times = np.linspace(0, 6*10**-7, 1000); noe = len(times); B = 1; Bx = -(1*10**-3); ## Create a Quantum 2 state basis; up = basis(2,0) ; down = basis(2,1) ; upd = up * up.dag() ; downd = down * down.dag(); sy = sigmay(); sz = sigmaz(); sx = sigmax(); Hx = gamma*Bx*sx; options = Options(nsteps=10000); H0 = -gamma*B*sz ; resonant_frequency = H0.eigenenergies() ; def Hx_coeff(t, args):; return 1 * np.cos(-2*resonant_frequency[0]*t );. H = [H0,[Hx,Hx_coeff]]; ; result = mesolve(H, downd, times, [], options=options); rh = result.states; upexpect, downexpect = [], []; for r in rh: ; up_e = expect(up*up.dag(), r); down_e = expect(down*down.dag(), r); upexpect.append(up_e); downexpect.append(down_e); plt.plot(times, upexpect, label = ""Upstate"", color='g', linestyle='-.'); plt.plot(times, downexpect, label = ""Downstate"", color='r', linestyle='-.'); plt.title(""Prob v/s Time for B = {}"".format(B)); plt.legend(loc=""best""); plt.xlabel(""Time""); plt.ylabel(""Probability of State""); plt.grid(); plt.show(); ```. The Hamiltonian of the system is hermitian, and theoretically, we don't expect such decay in the amplitude. So, what is happening in the above program that is leading to such a strange evolution? . ![Figure_2](https://user-images.githubusercontent.com/49644300/209442963-3e2a047f-1714-4d5c-b484-fa78e91a8062.png); . As soon as I increase the value of `B` the deca",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2051:50,simpl,simple,50,https://qutip.org,https://github.com/qutip/qutip/issues/2051,1,['simpl'],['simple']
Usability,"### Describe the Issue!. Most of our progress bars are in `qutip/ui/progressbar.py`, with the exception of `HTMLProgressBar` which is in `qutip/ipynbtools.py`. It is not available by the solvers. It should be moved with the other and added it to the `progess_bars` dictionary so it's usable with `mesolve`, etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2108:37,progress bar,progress bars,37,https://qutip.org,https://github.com/qutip/qutip/issues/2108,2,"['progress bar', 'usab']","['progress bars', 'usable']"
Usability,"### Describe the Issue!. The PR template has a link to the `qutip-notebooks` repository, however the notebooks for the website are now located in `qutip-tutorials`. ; A typo in the link in the changelog section have it point to the top of the contribution guide instead of the changelog generation paragraph.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2106:256,guid,guide,256,https://qutip.org,https://github.com/qutip/qutip/issues/2106,1,['guid'],['guide']
Usability,### Describe the Issue!. There are minor grammatical errors and a small amount verbiage in the users' guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/1759,1,['guid'],['guide']
Usability,"### Describe the Issue!. When running the example code from the documentation https://qutip.readthedocs.io/en/master/guide/dynamics/dynamics-stochastic.html using version 5.0.4 I get the AttributeError: 'SMESolver' object has no attribute 'run_from_experiment' . When looking at my local version of the stochastic.py, then the class StochasticSolver does not have the function run_from_experiment, but that function exists on the github version.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2525:117,guid,guide,117,https://qutip.org,https://github.com/qutip/qutip/issues/2525,1,['guid'],['guide']
Usability,"### Discussed in https://github.com/qutip/qutip/discussions/1682. <div type='discussions-op-text'>. <sup>Originally posted by **gaurav-iiser** October 4, 2021</sup>; Hello all,. So, I was writing a paper and wanted an image with a particular octant of the Bloch sphere highlighted. This octant was to be divided it into three subsets using three arcs [which is say, drawing an arc connecting the point ((1/sqrt(3), 1/sqrt(3), 1/sqrt(3)) with (0,0,1),(0,1,0),(1,0,0) ]. Besides, I also wanted to connect a state from each subset. So, in order to do this, I cloned the repository and modified bloch.py, and produced the desired image for my paper (figure attached) ; I then thought it will be useful as a feature for other users who might want to draw an arc on the Bloch sphere or join two points on the Bloch sphere using a line segment. Therefore, I have modified the bloch.py such that it can now draw an arc between any two points on the Bloch sphere by just specifying the cartesian coordinates of the two points, and similarly, a line segment can be drawn. The arc is red and the line segment is a black dashed line. . Before opening a PR, I just wanted to discuss whether it seems like a good idea? I am sure someone will find drawing an arc or drawing a line segment in the visualization of the Bloch sphere useful, just like I did. ; (I am just trying to follow the contribution guidelines as I have no experience in contributing to a library whatsoever). ; I would really appreciate your responses. Code-wise: We can simply use `add_line([x,y,z],[a,b,c])` to draw a line segment, or `b.add_arc([x,y,z],[a,b,c])` to draw an arc between two points; `. ![Bloch_sphere_poss_1](https://user-images.githubusercontent.com/33507538/135772530-be7dab07-2337-4ad1-839c-551483bddef5.png); </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1683:1387,guid,guidelines,1387,https://qutip.org,https://github.com/qutip/qutip/issues/1683,2,"['guid', 'simpl']","['guidelines', 'simply']"
Usability,"### Discussed in https://github.com/qutip/qutip/discussions/2255. <div type='discussions-op-text'>. <sup>Originally posted by **shiv6510** November 2, 2023</sup>; Hi, I am encountering some strange dynamics with mesolve that I don't understand. I have a simple hamiltonian of a harmonic oscillator with resonant frequency of 5 GHz. If I evolve the initial state (|0> + |1>)/sqrt(2) under the system hamiltonian (no time dependence) I would expect the expectation values of the |0> and |1> to stay at 0.5. (Amplitudes of eigenstates should not change). . However, when I plot the expectation values, I see a splitting of overtime, where the expectation value of |0> grows linear over time and |1> shrinks linearly with time. Looking through the forums, I figured it was an issue with the ode solver but playing around with the options (max_steps, rtol, atol, etc.) only changes the rate at which the expectation value drops (or grows); it doesn't get rid of the splitting. Any insight into this problem would be of great help :). Code:; ***********************************************************************; import matplotlib.pyplot as plt; from numpy import *; from scipy.optimize import fsolve; from qutip import *. a = destroy(20); wr = 5 # GHz; H = wr * a.dag() * a. e_nrgs, e_states = H.eigenstates(). psi0 = (e_states[0] + e_states[1]).unit(); wait_time = 2000; t_list = arange(0,wait_time+0.02, 0.01). options = Options(max_step=1/(wr * 100)); output = sesolve(2 * pi * H, ; psi0, ; t_list, ; e_ops=[e_states[0].proj(), e_states[1].proj()], ; args=None,; options=options,; progress_bar=True); ***********************************************************************. Plot:. plt.plot(t_list, output.expect[0], color='red', label='<0>'); plt.plot(t_list, output.expect[1],label='<1>'); plt.xlabel('Time[ns]'); plt.ylabel('Expectation Value'); plt.legend(); plt.show(). <img width=""840"" alt=""image"" src=""https://github.com/qutip/qutip/assets/43760523/c55016b4-5fbc-4032-b8e0-d143152250bb"">. </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258:254,simpl,simple,254,https://qutip.org,https://github.com/qutip/qutip/issues/2258,1,['simpl'],['simple']
Usability,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1894:1318,simpl,simple,1318,https://qutip.org,https://github.com/qutip/qutip/issues/1894,1,['simpl'],['simple']
Usability,"### Problem Description. For a Drude-Lorentz bath, the `HEOMSolver` can take `DrudeLorentzBath` (Matsubara decomposition) or `DrudeLorentzPadeBath` (Padé decomposition). A shifted Drude-Lorentz bath [1] has the following spectral distribution function (where $\Omega$ is the shift, and other symbols have the same meaning as given in [QuTiP's documentation](https://qutip.readthedocs.io/en/qutip-5.0.x/guide/heom/bosonic.html#describing-the-system-and-bath)): . $$; \begin{equation*}; J(\omega)=\left[\frac{\gamma \lambda \omega}{\gamma^2+; \left(\omega+\Omega\right)^2}+\frac{\gamma \lambda \omega}{\gamma^2+; \left(\omega-\Omega\right)^2}\right]; \end{equation*}; $$. This can be achieved by summating two Drude-Lorentz density with $\gamma \rightarrow \gamma \pm i \Omega$ and $\lambda \rightarrow \lambda/2$. As shown using Mathematica:. ![shifted_DL](https://github.com/user-attachments/assets/cece04e7-59c9-44ad-9b33-143942fc4093). When the transformation is made for `DrudeLorentzBath`, the result generated differs from that for `DrudeLorentzPadeBath` (and it is not about the number of frequencies used). [1] T. Kramer and C. Kreisbeck, “Modelling excitonic-energy transfer in light-harvesting complexes,” presented at the LATIN-AMERICAN SCHOOL OF PHYSICS MARCOS MOSHINSKY ELAF: Nonlinear Dynamics in Hamiltonian Systems, Mexico City, Mexico, 2014, pp. 111–135. doi: 10.1063/1.4861701. ### Proposed Solution. Looking at the [source code](https://qutip.readthedocs.io/en/qutip-5.0.x/_modules/qutip/solver/heom/bofin_baths.html#DrudeLorentzPadeBath) of `DrudeLorentzPadeBath` one can see that to generate `ck_real` only the real part of `eta` is considered, which would be correct if `gamma` was real. But for our case of shifted Drude-Lorentz Bath, doing so throws away the shift information from `eta` (which is not the case in `DrudeLorentzBath`). The following `git diff` provides the changes to be made in the class `DrudeLorentzPadeBath`:. ```python; @@ -481,11 +481,12 @@ class DrudeLore",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520:402,guid,guide,402,https://qutip.org,https://github.com/qutip/qutip/issues/2520,1,['guid'],['guide']
Usability,### Problem Description. I noticed that most of (if not all) the steps of the Contributing wiki can be automated via [**pre-commit**](https://pre-commit.com/). Manually going through all the required style conventions and guidelines would be a hassle. ### Proposed Solution. Having [**pre-commit**](https://pre-commit.com/) would make that process much easier and enforce that the developers follow coding conventions. ### Alternate Solutions. _No response_. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742:222,guid,guidelines,222,https://qutip.org,https://github.com/qutip/qutip/issues/1742,1,['guid'],['guidelines']
Usability,"### Problem Description. It would be nice, if one coud simply use th += operator for Qobj's. Now it raises TypeError:. ```; --> 219 else: H_L_lab += H_L_laser; 220 return H_L_lab. TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); ```. ### Proposed Solution. By defining the method `__iadd__` in the constructor, it could be easily done. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2326:55,simpl,simply,55,https://qutip.org,https://github.com/qutip/qutip/issues/2326,1,['simpl'],['simply']
Usability,"### Problem Description. The options that can be passed to the solvers are not entirely clear by looking at the documentation. For example:; ![image](https://github.com/qutip/qutip/assets/57414022/2c36d3a5-ca7b-42aa-86d2-cc6f273ed115); Does not show the explicit options even thought it refers to them in the parameter documentation. For comparison, SESolver does show the options. This I assume is because the options are inherited from SESolver. But this is not clear either by looking at `MESolver`'s rendered documentation.; ![image](https://github.com/qutip/qutip/assets/57414022/0d8d7a4d-6326-4d1a-a25e-d67264906f85). When using `help(MESolver)` the documentation of the class is much clearer but perhaps too verbose for the online documentation. ### Proposed Solution. I would suggest we render the options property explicitly for each solver. I would also consider rendering the documentation related to the `run` method. If not, we should render at least `Solver` documentation which does not seem to be listed in the class API documentation for solvers. Affected solvers:; - [ ] MESolver; - [ ] SMESolver; - [ ] SSESolver; - [ ] NonMarkovianMCSolver. ### Alternate Solutions. _No response_. ### Additional Context. The documentation was taken from qutip 5.0 ""ReadTheDocs"".",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2163:88,clear,clear,88,https://qutip.org,https://github.com/qutip/qutip/issues/2163,3,['clear'],"['clear', 'clearer']"
Usability,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:37,guid,guide,37,https://qutip.org,https://github.com/qutip/qutip/issues/1898,5,['guid'],['guide']
Usability,**Changelog**. Added missing citation for the GRAPE algorithm to the control guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1933:77,guid,guide,77,https://qutip.org,https://github.com/qutip/qutip/pull/1933,1,['guid'],['guide']
Usability,**Changelog**; Fixed a typo in docs (guide-settings.rst),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1786:37,guid,guide-settings,37,https://qutip.org,https://github.com/qutip/qutip/pull/1786,1,['guid'],['guide-settings']
Usability,**Changelog**; Modified some grammar in `dynamic-time.rst` to make some sentences clear.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1822:82,clear,clear,82,https://qutip.org,https://github.com/qutip/qutip/pull/1822,1,['clear'],['clear']
Usability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; sphereplot and plot_spin_distribution accepts a matrix of values, theta and phi, but the order of them is different and not intuitive to users.; ```; def sphereplot(theta, phi, values, ...; ```; ```; def plot_spin_distribution(P, THETA, PHI, ...; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2219:1181,intuit,intuitive,1181,https://qutip.org,https://github.com/qutip/qutip/pull/2219,1,['intuit'],['intuitive']
Usability,"**Describe the bug**; ""fmmesolve"" gives wrong expectation values with ""e_ops"". **To Reproduce**. Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html. ```python. output = fmmesolve(H, psi0, tlist, [sigmax()], [num(2)], [noise_spectrum], T, args); p_ex = output.expect[0]. ```. This p_ex is different from what computed above. **Expected behavior**; The expectation values are the same as the one without ""e_ops"" and manually computed. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.3.4; Python Version: 3.7.6; Number of CPUs: 52; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip. **Additional context**; Suspected the issues comes from floquet.py:829 , where the transformation is ""False""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1653:143,guid,guide,143,https://qutip.org,https://github.com/qutip/qutip/issues/1653,1,['guid'],['guide']
Usability,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1624:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/1624,1,['guid'],['guide']
Usability,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1663:27,simpl,simply,27,https://qutip.org,https://github.com/qutip/qutip/issues/1663,2,"['guid', 'simpl']","['guide', 'simply']"
Usability,"**Describe the bug**; Running Qutip on an **M1** MacBook Pro on import I can get the following error:. File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/__init__.py"", line 144, in <module>; info = qutip.hardware_info.hardware_info(); File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/hardware_info.py"", line 123, in hardware_info; out = _mac_hardware_info(); File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/hardware_info.py"", line 48, in _mac_hardware_info; results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); IndexError: list index out of range. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0; Numpy Version: 1.19.4; Scipy Version: 1.5.3; Cython Version: 0.29.21; Matplotlib Version: 3.3.3; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip. **Additional context**; I was able to ""fix"" the issue by simply commenting out lines 48 and 49 in Qutip's hardware_info.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395:1709,simpl,simply,1709,https://qutip.org,https://github.com/qutip/qutip/issues/1395,1,['simpl'],['simply']
Usability,**Describe the bug**; calling ptrace(0) should simply return the object. Instead it fails with an error. **To Reproduce**; import qutip as qp; qp.sigmax().ptrace(0). **Expected behavior**; expect it to return the existing object. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.16; Matplotlib Version: 3.2.1; Python Version: 3.7.6; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\Lior Ella\scoop\apps\miniconda3\4.5.12\envs\tfenv\lib\site-packages\qutip,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1239:47,simpl,simply,47,https://qutip.org,https://github.com/qutip/qutip/issues/1239,1,['simpl'],['simply']
Usability,"**Describe the issue**. The ""Stochastic Solver"" page on the users guide currently have typos on equations and the text. Additionally, I believe the page could be improved by: ; - adding an example for qutip.smesolve;; - adding references for the equations discussed on the page (Chapter 4, Quantum Measurement and Control, from Wiseman and Milburn, for example);; - add links on the page for [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-heterodyne.ipynb) and [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb) tutorials. I would like to volunteer to make these changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706:66,guid,guide,66,https://qutip.org,https://github.com/qutip/qutip/issues/1706,1,['guid'],['guide']
Usability,"**Describe the issue**; Hello,; I'm studying the classical case of a driven qubit, and i want to know the steady state of the system. **To Reproduce**; I declared the following Hamiltonian; ```python; H_0 = 0.5 * h * w_eg * sigmaz(); H_1 = A * sigmax(); def H_1_t(t, args):; return cos(w * t). H = [H_0, [H_1, H_1_t]]; ```; but using `rho_ss = steadystate(H, c_ops)` returns the error; ```; TypeError: Solving for steady states requires Liouvillian (super) operators; ```; This implies that i can't see the spectrum through `spectrum(H, w, c_ops, sigmap(), sigmam())` because it calculates the steady state first, and so returns the same error.; A way to do that is by calculating the propagator and then the FFT of the correlation function; ```python; U = propagator(H, 2 * pi / w, c_ops); rho_ss = propagator_steadystate(U); rho_ss; corr = correlation_2op_1t(H, rho_ss, t, c_ops, sigmap(), sigmam()); wlist1, spec1 = spectrum_correlation_fft(t, corr); ```. Of course using `steadystate(H, c_ops)` function is much simpler and straightforward, and my question is if is it normal that `steadystate(H, c_ops)` returns error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1377:1016,simpl,simpler,1016,https://qutip.org,https://github.com/qutip/qutip/issues/1377,1,['simpl'],['simpler']
Usability,"**Describe the issue**; I am using the EnhancedTextProgressBar to track progress of an mesolve calculation in a jupyter notebook. Sometimes it works as expected; occasionally (it doesn't seem to be deterministic), I get an extra progress after the updating progress bar that does not delete, so that when the mesolve is complete, I see this: ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00[*********70%**** ] Elapsed 1.79s / Remaining 00:00:00:00. Instead of just ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00. If I run the same thing repeatedly, sometimes I'll get the extra status (at different elapsed times), sometimes I'll get two extras, sometimes I'll get none. The longer the calculation takes, the more likely it is that I'll get one or more of these, it seems. . This is not a super huge problem, but just curious if there's any way to fix it! . Thanks,; Emma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1229:257,progress bar,progress bar,257,https://qutip.org,https://github.com/qutip/qutip/issues/1229,1,['progress bar'],['progress bar']
Usability,"**Describe the issue**; I was trying to generate random positive semi-definite matrices using the function `rand_herm` but the eigenvalues clearly don't seem to be random. For example, if I choose the dimension to be 3, then the eigenvalues are always like `3.something` or `4.something` or `5.something`; if I choose the dimension to be 4, the eigenvalues are always like '4.something` or `5.something` or `6.something`, and similarly for other dimensions. **To Reproduce**. ```; import numpy as np; from numpy.linalg import eig. N = 4; for i in range(10):; E = qutip.rand_herm(N, 0.35, None, True, None); w,v=eig(E); print('E-value:', w.real); ```; **The terminal output is**; ```; E-value: [6.32043755 6.06791959 5.24578891 4.99327095]; E-value: [5.37493846 5.8003551 6.26253682 5.65685425]; E-value: [5.17596435 5.5020902 5.8116183 6.13774415]; E-value: [6.25884718 5.05486132 5.71761238 5.59609612]; E-value: [5.94609905 5.36760945 6.2943825 5.33641017]; E-value: [6.25296302 5.06074548 5.65685425 5.65685425]; E-value: [4.81999397 5.75787997 6.57166109 5.65685425]; E-value: [5.23867334 6.35633232 5.8283425 5.65685425]; E-value: [5.13755732 5.71669004 6.21844559 5.65685425]; E-value: [6.32817223 5.48538456 5.30187642 6.01183208]; ```; **Expected Behaviour**; The eigenvalues should be random. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+nogit; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642:139,clear,clearly,139,https://qutip.org,https://github.com/qutip/qutip/issues/1642,1,['clear'],['clearly']
Usability,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1426:1058,Simpl,Simply,1058,https://qutip.org,https://github.com/qutip/qutip/issues/1426,1,['Simpl'],['Simply']
Usability,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:683,simpl,simple,683,https://qutip.org,https://github.com/qutip/qutip/pull/1632,1,['simpl'],['simple']
Usability,"**Description**. Add capacity to merge stochastic solver results. While adding it found a few bugs/ issues with the merge and weight that I fixed:. - When one result had trajectories and the other did not, but both stored the states, the merged result had no states.; - When merging 2 results with default ratio, that ratio would depend on whether the `improved_sampling` options was used.; - When the no-jump probability was 1, the total weight as measured by `sum(res.runs_weight)` would not be one.; - A no-jump probability over 1 by numerical error would break the evolution.; - Error in the weight application in the `_target_tolerance_end`. The last 3 are easy fix. For the default weight when merging, using the `num_trajectories` instead of `_num_rel_trajectories` is enough.; But I tried the approach of not counting the no-jumb evolution as a trajectory. This has many small advantages:; - All `result.trajectories` are the same, the first few are not special. ; - All seeds are used.; - No confusing on the merging ratio.; - Keeping the absolute and relative weight apart simply part of the merging.; - The progress bar run up to the expected number. I also tired to simplify the weight management by accumulating per data then split by abs, rel. This makes it easier to add averaged data (nmmc's trace). Seeing the change in lines number in `multitrajresults.py` it seems to be about the same. I am also thinking of removing the weight from trajectories and making it only a multitraj property:; `multitraj.add((seed, traj, rel_weight))`; `multitraj.add_deterministic(traj, abs_weight)`. The marginal / trace would stay in the trajectory, but not merging those with weight feel simpler to me. @pmenczel ; This PR larger than I expected, do you want me to break it into smaller ones for review or are you fine like this.; What do you think about splitting the no-jump / abs traj from the normal ones?; What about having the weights in the `add` instead of the trajectories?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2455:1083,simpl,simply,1083,https://qutip.org,https://github.com/qutip/qutip/pull/2455,4,"['progress bar', 'simpl']","['progress bar', 'simpler', 'simplify', 'simply']"
Usability,**Description**. Calling Version directly has given the strict parsing we require since the Version class was created and the class predates the parse(...) function itself. This simpler code should give the correct behaviour on all versions of packaging since 2014. **Related issues or PRs**; - See #2037; - See #2036,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043:178,simpl,simpler,178,https://qutip.org,https://github.com/qutip/qutip/pull/2043,1,['simpl'],['simpler']
Usability,**Description**. Calling Version directly has given the strict parsing we require since the Version class was created and the class predates the parse(...) function itself. This simpler code should give the correct behaviour on all versions of packaging since 2014. **Related issues or PRs**; - See #2039; - See #2043,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044:178,simpl,simpler,178,https://qutip.org,https://github.com/qutip/qutip/pull/2044,1,['simpl'],['simpler']
Usability,"**Description**. Edited the user guide documentation for Stochastic solvers. Text, equations, and example updated. **Related issues or PRs**; Related to issue #1706. **Changelog**. - Improved explanation of stochastic equation solvers.; - Added links for notebooks with examples for stochastic solvers.; - Added links to API documentation for smesolve, ssesolve, general_stochastic.; - New example highlighting the differences between result.expect and result.measurement.; - Added reference to Quantum Measurement and Control, Wiseman & Milburn (2009).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1743:33,guid,guide,33,https://qutip.org,https://github.com/qutip/qutip/pull/1743,1,['guid'],['guide']
Usability,"**Description**. Fix an error in 1 time correlations function's equations.; Make clearer that 2 times correlation functions always return 2D array even when `tlist` is `None`.; Add the `:class:` descriptor to `Qobj`, `QobjEvo` in docstrings.; Remove `HEOMSolver` from the list of supported input of `correlation_3op`. **Related issues or PRs**; Fix #2018",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2021:81,clear,clearer,81,https://qutip.org,https://github.com/qutip/qutip/pull/2021,1,['clear'],['clearer']
Usability,"**Description**. Hi, I would like to contribute to the issue https://github.com/qutip/qutip/issues/2389 as part of the UnitaryHack2024. I have incorporated a basic use of gates module to guide-basics.rst and a table of the available gates, with and example of how to use a Hadamard gate. Let me know if there is anything else that have to be done. **Related issues or PRs**; https://github.com/qutip/qutip/issues/2389",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441:187,guid,guide-basics,187,https://qutip.org,https://github.com/qutip/qutip/pull/2441,1,['guid'],['guide-basics']
Usability,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655:472,Feedback,Feedback,472,https://qutip.org,https://github.com/qutip/qutip/pull/1655,1,['Feedback'],['Feedback']
Usability,"**Description**. Introduces weights for the trajectories of trajectory solvers. These weights enter all trajectory averages. This concept is a generalization of two things that are already in qutip:; * The influence martingale in `nm_mcsolve` is simply a time-dependent weight from this point of view; * The ""improved sampling"" option for `mcsolve` weights the no-jump trajectory with its exact probability, and then only samples from the ensemble of trajectories with at least one jump. Currently, these two things cannot be combined: ""improved sampling"" does not work for `nm_mcsolve`. With these changes, it would work.; In the future, there might be at least one more application for weighted trajectories:; * For mixed initial states in `mcsolve`, it might be useful to allow sampling of initial states with frequencies or probabilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:246,simpl,simply,246,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['simpl'],['simply']
Usability,"**Description**. Python 3.6 tests fail to build cvxopt, there was a new version released last week.; This simply run these tests without it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:106,simpl,simply,106,https://qutip.org,https://github.com/qutip/qutip/pull/2215,1,['simpl'],['simply']
Usability,**Description**. The `Settings` class unnecessarily implements a singleton pattern and has a few unused underscore attributes (e.g. `_integartors`). This PR removes the unused / necessary code and simplifies the class. **Related issues or PRs**. - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2079:197,simpl,simplifies,197,https://qutip.org,https://github.com/qutip/qutip/pull/2079,1,['simpl'],['simplifies']
Usability,"**Description**. The word ""then"" is mistyped in the sentence ""If the operator is Hermitian, **than** the output will always be real"". **Related issues or PRs**. None. **Changelog**. Corrected typo in Guide / Manipulating States and Operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567:200,Guid,Guide,200,https://qutip.org,https://github.com/qutip/qutip/pull/1567,1,['Guid'],['Guide']
Usability,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in #1476.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by `Qobj` are all represented by a map between 2 spaces:. - ket: Dimensions(Field, Space); - bra: Dimensions(Space, Field); - oper: Dimensions(Space, Space); ... This `Dimension` is the `Map` proposed by Jake, but `ket` are map from `Field` to `Space` and not Space` themselves.; Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`.; Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims : `Space()[1]` does exist. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1826:621,simpl,simplify,621,https://qutip.org,https://github.com/qutip/qutip/pull/1826,1,['simpl'],['simplify']
Usability,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in https://github.com/qutip/qutip/discussions/1476, replace #1826, which was done before merging `master` into `dev.major` and had conflicts.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by Qobj are all represented by a map between 2 spaces:. ket: Dimensions(Field, Space); bra: Dimensions(Space, Field); oper: Dimensions(Space, Space); ... This Dimension is the `Map` proposed by Jake, but ket are map from `Field` to `Space` and not `Space` themselves. Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`. Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they ar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1996:740,simpl,simplify,740,https://qutip.org,https://github.com/qutip/qutip/pull/1996,1,['simpl'],['simplify']
Usability,"**Description**. Update the documentation of guide-random to fit the next interface with `seed`, `dtype`, `distribution` etc.; Remove some method no longer existing for `Qobj` listed in guide-random.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2024:45,guid,guide-random,45,https://qutip.org,https://github.com/qutip/qutip/pull/2024,2,['guid'],['guide-random']
Usability,"**Description**. With the inclusion of the new dimensions class, stored in Qobj()'s _dims property, the properties of ENR states are described by ENRspace(). However, when using ENR states with mesolve, Liouvillian, sum() and other functions these _dim properties would be discarded. This PR is a draft attempt to get things working, largely by subbing in _dims instead of dims in various places, and a test to check ENR+mesolve() works for a simple case. All tests pass, but since this is just some bodging to get things working, and messes a little bit with some core functions maybe its also good to check the tutorial notebooks also pass. edit: forgot to mention, this is not exhaustive; e.g., sprepost() has not been updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2341:443,simpl,simple,443,https://qutip.org,https://github.com/qutip/qutip/pull/2341,1,['simpl'],['simple']
Usability,"**Description**; - Add a mention that filelock is needed for string coefficient compilation in the guide.; - When a string coefficient is used, a warning will be raised (once) if either cython or filelock is missing.; - Skip string coefficient compilation test when cython is present by filelock is not instead of only checking for cython. **Related issues or PRs**; fix #2162",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2168:99,guid,guide,99,https://qutip.org,https://github.com/qutip/qutip/pull/2168,1,['guid'],['guide']
Usability,"**Description**; - Add a test for progress bars.; - Make `start` private. `start` was mostly used right after the initialization. The docstring indicated that it was not needed, but it was for most bars. #2148; - Remove the iteration argument in update.; - Have `HTMLProgressBar` import ipython. **Related issues or PRs**; Fix the issue #2148 for master.; Replace #2127",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:34,progress bar,progress bars,34,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['progress bar'],['progress bars']
Usability,"**Description**; - Fix a dimension problem for the argument `color` of `Bloch.add_states`; ```python; import qutip as qt; bloch.add_states([qt.basis(2,0), qt.basis(2,1)], colors=[""crimson"", ""gold""]) # fails whereas it should work; bloch.add_states([qt.basis(2,0), qt.basis(2,1)], colors=[[""crimson""], [""gold""]]) # what works; ```; - Clean-up of the code in `Bloch.add_states` as asked in #1913 ; - Add `Bloch.add_arc` and `Bloch.add_line` in the guide on Bloch class",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2445:446,guid,guide,446,https://qutip.org,https://github.com/qutip/qutip/pull/2445,1,['guid'],['guide']
Usability,"**Description**; - Fix memory cascade to work in v5.; - Move it to a new legacy folder. ; I would like to remove it, but I don't know if anybody uses it and it can't be replaced by another solver.; However, it create evolution with jump in the output coming from numerical methods, see https://github.com/qutip/qutip-notebooks/blob/master/examples/nonmarkov-coherent-feedback.ipynb.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2152:367,feedback,feedback,367,https://qutip.org,https://github.com/qutip/qutip/pull/2152,1,['feedback'],['feedback']
Usability,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1446:521,guid,guide,521,https://qutip.org,https://github.com/qutip/qutip/pull/1446,1,['guid'],['guide']
Usability,"**Description**; Add a new options that control where the `default_dtype` is taken into account: `default_dtype_range` (feel free to propose better name.); It has 3 possible values:; - ""creation"": At `Qobj` creation functions, behaviour we presently have.; - ""missing"": Missing specialization will output that type: `Dense + Jax` is not defined so will default to that type.; - ""full"": Every operations return that type: `Dense + Dense` would convert the result to the `default_dtype`. Unary operations will also convert the output type. It could break some functions that explicitly set the date type such as `steadystate` or `HEOM`... Also added control of the created format in `Qobj.__init__`: added `dtype`, when the initial data is a list of list, use `default_dtype`, with `""full""` also use `default_dtype`. Only using the default value with list normally is so solver states are not converted automatically which would slow the solver unexpectedly. . I am looking into creating alias for a group of data layer. This would allow to set the default to jax and jaxdiag at once. Used with `""full""`, this would ensure only jax compatible data layers are used while not forcing the sparcity. This would hopefully make `""full""` usable. **Related issues or PRs**; #2328",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519:1229,usab,usable,1229,https://qutip.org,https://github.com/qutip/qutip/pull/2519,1,['usab'],['usable']
Usability,**Description**; Add a simple example for `run_from_experiement` in the guide.; Also restore the link to the stochastic tutorial notebooks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2479:23,simpl,simple,23,https://qutip.org,https://github.com/qutip/qutip/pull/2479,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"**Description**; Add hypothesis strategies for data objects and some simple property-based tests for data operations. We aim for compatibility with numpy, but there are caveats in few different cases:. | Operations | Non-finites Equivalent | Notes |; | -- | -- | -- |; | Creation & negation | | No caveats |; | Equality checks | | The same tolerances must be specified |; | Addition & subtraction | Yes | |; | Scalar multiplication & division | Yes | CSR may raise an exception if the scalar is non-finite |; | Matrix multiplication | Not tests | Magnitude range is restrict to ensure precision |; | Trace, adjoint, transpose, conj & copy | | No caveats |. In some cases we also need to ignore warnings raised by numpy about operations with `nan` and `inf` when calculating the expected result. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:69,simpl,simple,69,https://qutip.org,https://github.com/qutip/qutip/pull/1957,1,['simpl'],['simple']
Usability,"**Description**; Adding a guide on *Superoperators, Pauli Basis and Channel Contraction* which is moved from this notebook:; https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/superop-contract.ipynb. **Related issues or PRs**; The corresponding notebook was removed from the new `qutip-tutorials` repository in this PR https://github.com/qutip/qutip-tutorials/pull/34",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1984:26,guid,guide,26,https://qutip.org,https://github.com/qutip/qutip/pull/1984,1,['guid'],['guide']
Usability,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862:38,guid,guide,38,https://qutip.org,https://github.com/qutip/qutip/pull/1862,5,['guid'],"['guide', 'guide-dynamics']"
Usability,"**Description**; Adding spin-1/2 fermionic creation and annihilation operators to close #2165 (for UnitaryHack 2023). Specifically, in `qutip.core.operators`, I added the `fcreate` and `fdestroy` functions, following the Jordan-Wigner transformation described in [this guide](https://learn.microsoft.com/en-us/azure/quantum/user-guide/libraries/chemistry/concepts/jordan-wigner). Specifically, I implemented the following using `qutip.tensor` objects, and documented this in the code. $$a_j = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x + i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. $$a_j^{\dagger} = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x - i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. Additionally, I wrote a new test in `qutip.tests.core.test_operators` that verified the commutation relations. I also ran the new code through `pycodestyle` to verify it was written nicely. Please let me know if there are any issues or anything I should be doing on the documentation side! I hope I understood the problem correctly :). **Related issues or PRs**; close #2165; I closely followed the protocol in #863",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166:269,guid,guide,269,https://qutip.org,https://github.com/qutip/qutip/pull/2166,3,"['guid', 'learn']","['guide', 'learn']"
Usability,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874:565,simpl,simpler,565,https://qutip.org,https://github.com/qutip/qutip/pull/1874,1,['simpl'],['simpler']
Usability,"**Description**; Adds support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in [arXiv:2209.08958](https://arxiv.org/abs/2209.08958) [quant-ph]. A simple example can be found in [this notebook](https://github.com/pmenczel/nm-mcsolve-example/blob/master/nonmarkovian_mcsolver.ipynb). Based on code provided by B. Donvil. **Todo-List**; - [X] Create users guide; - [X] Add example notebook to qutip-tutorial and link it in users guide ([PR in qutip-tutorials repo](https://github.com/qutip/qutip-tutorials/pull/59)); - [X] Store the trajectory-average of the influence martingale in the `Result` object; - Use this as end condition, or to warn users about bad convergence? ; (Unclear how effective that would be. Will not be implemented for now); - [X] Make associated `nm_mcsolve` function (name up for debate?); - [X] Write docstring comments; - [X] Write tests; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070:219,simpl,simple,219,https://qutip.org,https://github.com/qutip/qutip/pull/2070,3,"['guid', 'simpl']","['guide', 'simple']"
Usability,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633:671,simpl,simplifies,671,https://qutip.org,https://github.com/qutip/qutip/pull/1633,1,['simpl'],['simplifies']
Usability,"**Description**; Allow the dispatcher to accept specialisations on generic `Data`.; This as 2 uses:; - Simplify the creation of complex function using simpler ones: `inner` defined in term of `matmul`. ; - Allow us to create niche dispatched functions for some data layer without the need to be supported by all: blas' zgemm (matmul) can transpose and adjoint of each input matrix in the same operation. . The `Data` dispatched functions have less priority than direct specialization. They are used directly (no `_constructed_specialisation`) when the `Data` is in the inputs, but when the output data type is set, there will always be a conversion from `Data` to the desired type. . In this PR:; - Add dispatch on `Data`.; - Add direct tests for the dispatcher.; - Create `kron_transpose` which is `kron(left.T, tright)`. It's commonly used for superoperator and it can be optimized for `Dense` and `Jax` by doing it in one operation.; - Add `Data` specialization for `inner`, `inner_op`, `expect`, `expect_super` and `trace_oper_ket`.; - Make `zeros_like` and `identity_like` as dispatched function so the order is kept during operation for dense.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2157:103,Simpl,Simplify,103,https://qutip.org,https://github.com/qutip/qutip/pull/2157,2,"['Simpl', 'simpl']","['Simplify', 'simpler']"
Usability,"**Description**; As seen in #2102, there are some confusion to the definition of fidelity.; `fidelity`, `process_fidelity` each implement a different version of fidelity from different papers. `process_fidelity` has a note explaining the differences, but `fidelity` didn't.; In this PR, I add a note in `fidelity`, so that at least when looking at the documentation, which version used is clear. I also fixed a few flake8 issues.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2257:389,clear,clear,389,https://qutip.org,https://github.com/qutip/qutip/pull/2257,1,['clear'],['clear']
Usability,**Description**; Cherry-pick changes merged to master and added a changelog.; - Fixed link to the documentation that migrated to readthedocs; - Removed readme note about v5 being in alpha; - Fixed monte carlo documentation for open systems; - Fixed readthedocs search feature.; - Added setuptools to runtime compilation requirements; - Fixed progress bar OverFlowError,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2378:342,progress bar,progress bar,342,https://qutip.org,https://github.com/qutip/qutip/pull/2378,1,['progress bar'],['progress bar']
Usability,"**Description**; Clean up verbiage in guide overview and remove illegible figure.""; **Related issues or PRs**; 1759. **Changelog**; Clean up verbiage in guide overview and remove illegible figure.""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1769:38,guid,guide,38,https://qutip.org,https://github.com/qutip/qutip/pull/1769,2,['guid'],['guide']
Usability,"**Description**; Completed the guide page of the settings to include missing entries as well as options included in `settings.core` and `settings.compile`. Added `CoreOptions` and `CompileOptions` to the apidoc and completed the docstrings. I also removed settings that are no longer used anywhere. Lastly I changed the default for `accept_float` compile option. Presently, if an args is a float it cannot be updated to a complex:; ```; >>> a = qutip.coefficient(""A"", args={""A"": 1.}); >>> a(0, A=1j); TypeError: must be real number, not complex; ```; Creating a new coefficient work would be needed. This will certainly cause an issue eventually, but updating it to complex automatically would cause some error with brmesolve spectra: (`w > w0`) as complex cannot be compared. Without types, string are not any better than functions so removing them altogether is not ideal. So I changed it to use complex when no comparison are done and float otherwise. **Related issues or PRs**; fix #1524",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2403:31,guid,guide,31,https://qutip.org,https://github.com/qutip/qutip/pull/2403,1,['guid'],['guide']
Usability,**Description**; Couldn't make #2202 work...; There are segfault in brmesolve with cython 3.0.0 and the new compilation method does not work properly on windows. ; This replace the PR with a simple limitation to not use cython 3.0.0.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2204:191,simpl,simple,191,https://qutip.org,https://github.com/qutip/qutip/pull/2204,1,['simpl'],['simple']
Usability,**Description**; Describe here the proposed change. **Related issues or PRs**; #1774. **Changelog**; And an introduction to the dynamics guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775:137,guid,guide,137,https://qutip.org,https://github.com/qutip/qutip/pull/1775,1,['guid'],['guide']
Usability,"**Description**; Dicke density state matrix should only have positive eigenvalues, but rounding errors causes eigenvalues of 0 to instead be represented as a very small negative number.; This causes `dicke_trace_function` to return -Inf, since `scipy.special.entr` returns -Inf for any values < 0.; This issue was fixed by simply taking the absolute value of the eigenvalues in dicke_trace_function, which we are allowed to do since the density state matrix should only have positive eigenvalues. **Related issues or PRs**; fix #1919",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2466:323,simpl,simply,323,https://qutip.org,https://github.com/qutip/qutip/pull/2466,1,['simpl'],['simply']
Usability,"**Description**; Enables use of `mcsolve` and `nm_mcsolve` with mixed initial conditions. Added functions `run_mixed` to the MCSolver and NonMarkovianMCSolver classes. Instead of an initial pure state, these functions take either a density matrix or a list of `(psi_i, p_i)` where `psi_i` are pure initial states and `p_i` are the weights for the average over the initial states. In the latter case, the `ntraj` parameter can be a list specifying the number of trajectories to be used for each initial state. The trajectories automatically obtain correction weights if the fraction of trajectories starting in `psi_i` does not match `p_i`. The functions `mcsolve` and `nm_mcsolve` take either a pure state or a density matrix as the initial state, and call either `run` or `run_mixed` of the solver, respectively. The stochastic solvers also inherit the `run_mixed` functions, but I don't know if there is any use case for that. The most complicated issue here was the combination of a mixed initial state with ""improved sampling"". In this case, run_mixed first runs the no-jump trajectories for all initial states (potentially using `parallel_map` etc) and then runs all other trajectories (using `parallel_map` again, this means that there are two progress bars...). **Todo**; - [X] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437:1250,progress bar,progress bars,1250,https://qutip.org,https://github.com/qutip/qutip/pull/2437,1,['progress bar'],['progress bars']
Usability,**Description**; Fix the bug in collapse feedback that made it work properly only for the first trajectories. (#2422); Also added a check in the feedback test to ensure the collapse argument is reset for each trajectories.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:41,feedback,feedback,41,https://qutip.org,https://github.com/qutip/qutip/pull/2424,2,['feedback'],['feedback']
Usability,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/pull/1675,3,['guid'],['guide']
Usability,"**Description**; Follow up to #2271, looking at every other section of the guide in the documentation; - Fixed internal link to the apidoc.; - Removed reference to `Bloch3D` so it can easily be removed.; - Replaced the Quantum control section in QuTiP section with link to qutip-qtrl and qutip-qoc project.; - Removed the `parfor` page. parallel map implementation is not a core job of qutip.; - Added a short section about data layer format in the `Qobj` description. More is needed, but should be good enough for basic usage.; - Changed a 80 lines long Qobj output with a visual representation of the object.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/pull/2279,1,['guid'],['guide']
Usability,"**Description**; Hinton plots accept a `title` argument, but the code does not actually set the plot's title. Along with this fix, I also removed unused imports and fixed the other function's titles to avoid verbose such as. ```python; if title:; ax.set_title(title); ```; where the simple `ax.set_title(title)` does nothing when `title` is `None`. **Related issues or PRs**; No related issues or PRs. **Changelog**; Display a title for hinton and matrix_histogram plots when a title is given.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707:283,simpl,simple,283,https://qutip.org,https://github.com/qutip/qutip/pull/1707,1,['simpl'],['simple']
Usability,"**Description**; I found the description for unitary, non-dissipative time evolution a bit confusing as the text always referred to `mesolve` while the examples used `sesolve`. I adapted the text to `sesolve` for that section and introduced `mesolve` only in the next section. **Related issues or PRs**; understanding the docs. **Changelog**; Improve documentation on solving for unitary dynamics by making the use of sesolve and mesolve in the code examples more consistent with the text, and by making the text clearer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1921:513,clear,clearer,513,https://qutip.org,https://github.com/qutip/qutip/pull/1921,1,['clear'],['clearer']
Usability,"**Description**; In #1812, I worked on removing the tree structure of option and having options per solver instead of having them together.; This way, we don't need to pass `mcsolve` specific options to `mesolve`, etc. and it makes it simpler to know which options are used by which solver. That PR is getting quite large and went through multiple revision, so I am replacing it with two smaller ones. In this PR, I simplify the options in core. `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. Most of these settings are properties of the object and only computed when being called instead of at import in `__init__.py`. . `CoreOptions` and `CompilationOptions` are now both made from a simpler `QutipOptions` class instead of the `optionsclass` which generated many method at import. Some options have been moved around: `debug`, `log_handler`, `colorblind_safe` and `use_cython` has been moved to `CoreOptions`. Since instance of `CoreOptions` cannot be passed to functions using it. It supports context:; ```; with CoreOptions(auto_tidyup=False):; op = sparse1 + sparse2; ```; and global options change using:; ```; qutip.settings.core['atol'] = 1e-6; ```. `CompilationOptions` instance must be passed to `coefficient` to be used. `configrc` was removed. It was used to store settings in a file that would be read when importing qutip. This was mainly used to store the openmp threshold. Without openmp, we don't have any settings to store between sessions. Some test related to mkl had to be fixed, it seems that they were always skipped before these changes. **Related issues or PRs**; Replace #1812. **Changelog**; Simplify settings and core options.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1924:235,simpl,simpler,235,https://qutip.org,https://github.com/qutip/qutip/pull/1924,4,"['Simpl', 'simpl']","['Simplify', 'simpler', 'simplify']"
Usability,"**Description**; In #2308, the default for `point_color` was changed from `[]` to `None`, but `clear` still set it to an empty list.; This broke a notebook in qutip-tutorial: tutorials-v5/visualization/bloch-sphere-animation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336:95,clear,clear,95,https://qutip.org,https://github.com/qutip/qutip/pull/2336,1,['clear'],['clear']
Usability,"**Description**; In v4, using string was needed to run `brmesolve` with time dependent system. But from v5, using a `QobjEvo` is sufficient, any coefficient format is accepted. I removed the section in the guide saying that string format is needed. Also, I split the one paragraph per line to one sentence per lines.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2033:206,guid,guide,206,https://qutip.org,https://github.com/qutip/qutip/pull/2033,1,['guid'],['guide']
Usability,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:871,simpl,simply,871,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['simpl'],['simply']
Usability,"**Description**; Move `ttmsolve` to `qutip/solver` and update it. No class interface was created, `ttmsolve` work differently to other solver and would be hard to force into the `Solver` mould. Changed the interface a little, `learningtimes` needed use the first values `times` to be valid, it was replaced by an options for the number of values in ``times`` to use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2142:227,learn,learningtimes,227,https://qutip.org,https://github.com/qutip/qutip/pull/2142,1,['learn'],['learningtimes']
Usability,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:102,simpl,simply,102,https://qutip.org,https://github.com/qutip/qutip/pull/1288,1,['simpl'],['simply']
Usability,"**Description**; Provide a friendlier introduction to the dynamics section of the user's guide. **Related issues or PRs**; 1759; **Changelog**; Added an item to the toc of the user's guide under ""dynamics"", with an introduction to the QuTiP solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761:89,guid,guide,89,https://qutip.org,https://github.com/qutip/qutip/pull/1761,2,['guid'],['guide']
Usability,**Description**; Refactor Qutip.Qip.Circuit.solve_gates as a dispatch-like method for assigning different functions and make the QubitCircuit module more commutable.; These changes make it easier for maintenance and provide a clearer workflow. **Changelog**; Refactor Qutip.Qip.Circuit.solve_gates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1226:226,clear,clearer,226,https://qutip.org,https://github.com/qutip/qutip/pull/1226,1,['clear'],['clearer']
Usability,"**Description**; Remove tests using python 3.6 and 3.7 and openmp tests.; SInce we need to add a new job for each python version, we also need to remove older jobs so the whole test suite don't get bloated. Numpy has a suggestion for version support in scientific project in [NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html) which we can follow to decide when we can remove some tests and if it's fine to use newer feature forcing us to improve our requirements. I added a note in the contributing and release guides to refer to this when adding a change using feature of newer version of package we use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:525,guid,guides,525,https://qutip.org,https://github.com/qutip/qutip/pull/1941,1,['guid'],['guides']
Usability,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890:103,simpl,simply,103,https://qutip.org,https://github.com/qutip/qutip/pull/1890,1,['simpl'],['simply']
Usability,**Description**; Remove unused feature in `Bloch.plot_vectors`. This feature was bugged and undocumented. **Related issues or PRs**; #1916. **Changelog**; Remove unused feature in `Bloch.plot_vectors`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1932:92,undo,undocumented,92,https://qutip.org,https://github.com/qutip/qutip/pull/1932,1,['undo'],['undocumented']
Usability,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1792:515,simpl,simpler,515,https://qutip.org,https://github.com/qutip/qutip/pull/1792,1,['simpl'],['simpler']
Usability,"**Description**; Restore the feedback capacities of the solver.; In v4, this was done by using special names for the `args`, but this was confusing. . For v5, I propose to do it using a `add_feedback` method of the solver:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = SESolver(H); solver.add_feedback(""ket"", ""qobj""); solver.run(...); ```; With this, `args[""ket""]` will be updated with the state during the evolution. Most solver support it, the exception are floquet, nm_mcsolve. ; HEOM support it, but the state will be seen as a single ket.; @hodgestar , is that fine?. Available form are as `Qobj`, as `Data`, `expect(oper, data)`.; `mcsolve` also has the collapse and `stochastic` the wiener process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210:29,feedback,feedback,29,https://qutip.org,https://github.com/qutip/qutip/pull/2210,1,['feedback'],['feedback']
Usability,"**Description**; Review the guide-dynamics part of the guide for v5. - Fixed internal links; - Added section for new features for mcsolve.; - Added page for solver class interface.; - Improved the solver introduction table.; - Moved piqs to after steadystate, the only example did not do an evolution, but computed a steadystate.; - Moved nmmcsolve to it's own page after time dependent introduction.; - `mcsolve` uses `seeds` but `MCSolver.run` used `seed`, changed to use `seeds` every where.; - Cut too long lines to around ~80 characters in many places.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2271:28,guid,guide-dynamics,28,https://qutip.org,https://github.com/qutip/qutip/pull/2271,2,['guid'],"['guide', 'guide-dynamics']"
Usability,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1455:726,feedback,feedback,726,https://qutip.org,https://github.com/qutip/qutip/pull/1455,1,['feedback'],['feedback']
Usability,**Description**; Simplify `_index_permutations` using `itertools`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2145:17,Simpl,Simplify,17,https://qutip.org,https://github.com/qutip/qutip/pull/2145,1,['Simpl'],['Simplify']
Usability,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1604:30,simpl,simplify,30,https://qutip.org,https://github.com/qutip/qutip/pull/1604,2,['simpl'],"['simple', 'simplify']"
Usability,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1462:1572,progress bar,progress bar,1572,https://qutip.org,https://github.com/qutip/qutip/pull/1462,2,['progress bar'],['progress bar']
Usability,"**Description**; Splitting the coefficient from the data in QobjEvo,; This clean qobjevo a lot, no more type management, product between QobjEvo is a lot simpler.; I removed the `apply_decorator` method, which was probably never used. Build on top of #1231, most changes are from that PR. In this one, ; I will probably cancel this PR and 1231 and re-post them in more manageable steps. Documentation is not corrected. **Related issues or PRs**; @jakelishman 's GSoC talks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1277:154,simpl,simpler,154,https://qutip.org,https://github.com/qutip/qutip/pull/1277,1,['simpl'],['simpler']
Usability,"**Description**; The PR provides a way to characterize thermal environments for open quantum systems, The user can now construct Thermal environments by specifying The spectral density, or the correlation function , or the power spectrum and the Temperature. Once specified the other two are calculated. We hope once integrated with the solvers, this PR will allow for a more systematic way of comparing different approaches, and easier simulations by quickly obtaining the quantities needed from the bath objects. The PR also provides exponential approximations of the environment via a fit of the correlation function, and a fit of the spectral density in terms of underdamped modes, the PR allows for incorporation of more approximation methods, which will be added in the future. . **Related issues or PRs**; This PR is a generalization of #2260 . Special Thanks to @pmenczel for improving the code significantly and valuable suggestions!. **TODO:**. I think perhaps those are better finished once we have decided that this structure for the environments is the way to go. However, the most important missing bits are . - [x] Finish documentation in the User's guide; - [x] Add relevant tests for the HEOM solver using the enviroment class; - [ ] Finish tests for environment.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534:1165,guid,guide,1165,https://qutip.org,https://github.com/qutip/qutip/pull/2534,1,['guid'],['guide']
Usability,"**Description**; The algorithm used in `enr_destroy` was extremely inefficient, with a triple loop. This PR replaces it with a much simpler algorithm with only a single loop. For `dims = [3,8,2,4,6,1,3]` and `Nexc = 6`, on my computer `enr_destroy(dims,Nexc)` took almost 4 s, with the new algorithm it takes 20 ms. I've checked that the output is identical. **Changelog**; Made enr_destroy significantly faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1593:132,simpl,simpler,132,https://qutip.org,https://github.com/qutip/qutip/pull/1593,1,['simpl'],['simpler']
Usability,"**Description**; The api splitting functions and classes is not very intuitive. ; I reordered it so that similar feature are grouped together: `MESolver` follows `mesolve`, etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2531:69,intuit,intuitive,69,https://qutip.org,https://github.com/qutip/qutip/pull/2531,1,['intuit'],['intuitive']
Usability,"**Description**; The guide for time-dependent dynamic includes plots fro the guide before (stochastic dynamics) because it fails to reset its context and properly close figures. This PR fixes that. The same goes for many other uses of `.. plot::` in the guides and other documentation, but I will leave fix those for when someone has time to go through them more carefully. See https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html for the issue. **Related issues or PRs**; None. **Changelog**; Fix spurious plots that appear after many code blocks in the dynamics-time guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1931:21,guid,guide,21,https://qutip.org,https://github.com/qutip/qutip/pull/1931,5,['guid'],"['guide', 'guides']"
Usability,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1445:53,simpl,simplified,53,https://qutip.org,https://github.com/qutip/qutip/pull/1445,1,['simpl'],['simplified']
Usability,**Description**; The mcsolve guide incorrectly describes how random numbers are generated when determining jump locations and collapses. **Related issues or PRs**; * Fixes #1666. **Changelog**; Fix the description of random number usage in the Monte Carlo solver guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1677:29,guid,guide,29,https://qutip.org,https://github.com/qutip/qutip/pull/1677,2,['guid'],['guide']
Usability,**Description**; The sparse svd test is causing segfault in a setup that I can't reproduce.; The function `svd_csr` was never used as it could not work as a `svd_dense` replacement: `_data.svd(csr)` would use `svd_dense`. So I simply removed the function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:227,simpl,simply,227,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['simpl'],['simply']
Usability,**Description**; The website now direct to readthedocs for documentation.; I updated the `release_distribution` guide to not copy the docs file into qutip.github.io but update the readthedocs links.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2399:112,guid,guide,112,https://qutip.org,https://github.com/qutip/qutip/pull/2399,1,['guid'],['guide']
Usability,"**Description**; There are presently 8 variations of `CQobjEvo`. There are `Cte` and `Td` variants, Dense and csr sparse and serial vs openmp versions. Adding a feature, (ex. AHS support) result in the need to modify all of them and QobjEvoFunc and AHS PRs will add new one. So as a first step, I am merging them the ones presently available.; Cte (no coefficient) are now limit case of Td (time-dependant). omp ones have been removed in favor of a `spmvpy` variant that switch between the serial and omp version at compilation. . Also reworked the compilation of `QobjEvo`:; - Simpler with only 3 variants instead of 8.; - Compilation of the coefficient and object are separated. (`H *= -1j` does not force recompiling the coefficients.); - But have the side effect of making temp file cleanup harder. File are erased at python close instead of object deletion.; - Moved the location of temp file to ~/.qutip/temp for now, but does this work on windows?; - Auto-cleanup on importing qutip, for files older than 7 days for now. But should be set by user, the temp file location also. Other to-do:; Dense versions of CQobjEvo could be more optimized and is not parallel. One option would be to use blas and hope the user's blas is parallel. (probably other PR). ps. Running tests for now. Do not merge.; **Changelog**; Cleaned CObjEvo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1231:578,Simpl,Simpler,578,https://qutip.org,https://github.com/qutip/qutip/pull/1231,1,['Simpl'],['Simpler']
Usability,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1557:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/pull/1557,2,['guid'],['guide']
Usability,"**Description**; This change solver's options to be per solver. Thus mcsolve specific options are not included in options passed to sesolve etc.; It also simplify the options class which is now closer to a `dict` than to a `dataclass`. `SovlerOptions` take a new optional parameter `solver` to know which options to support. By passing it, it will fill the instance with the defaults and update the doc string. Passing an options not supported by the solver will raise an error. When not used, any options items will be accepted. ```; >>> SolverOptions(atol=1e-5, store_ados=True); SolverOptions(solver='', atol=1e-05, store_ados=True). >>> SolverOptions('sesolve', atol=1e-5, store_ados=True); KeyError: ""'store_ados' is not a supported options."". >>> SolverOptions('heomsolver', atol=1e-5, store_ados=True); SolverOptions(solver=heomsolver, atol=1e-05, store_ados=True); ```. `SolverOptions` can be used as `dict`, but most methods only use provided keys:; ```; >>> {**SolverOptions('sesolve', atol=1, rtol=2)}; {'atol': 1, 'rtol': 2}; ```; `store_states` etc. are not in `opt.keys()`.; The exceptions are `in` and `__getitem__` which knows of the default values:; ```; >>> opt = SolverOptions('sesolve', atol=1, rtol=2); >>> ""store_states"" in opt; True; >>> print(opt[""store_states""]); None; ```. `print` create a human readable list of options, including default:; ```; >>> print(SovlerOptions(""sesolve"", atol=1e-5, store_states=True)). Options for sesolve:; progress_bar : 'text' (default); progress_kwargs : {'chunk_size': 10} (default); store_final_state : False (default); store_states : True ; normalize_output : True (default); method : 'adams' (default); Options for adams integrator:; atol : 1e-05 ; rtol : 1e-06 (default); nsteps : 2500 (default); order : 12 (default); first_step : 0 (default); max_step : 0 (default); min_step : 0 (default); ```. Some integrators options will change depending on the method:; ```; >>> ""order"" in SovlerOptions(""sesolve"", method=""adams""); True; >>> ""ord",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947:154,simpl,simplify,154,https://qutip.org,https://github.com/qutip/qutip/pull/1947,1,['simpl'],['simplify']
Usability,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:895,simpl,simplified,895,https://qutip.org,https://github.com/qutip/qutip/pull/1869,1,['simpl'],['simplified']
Usability,"**Description**; Update correlation functions to use v5 solvers.; The interface remain the mostly the same, I only made a few changes:; - Support for mcsolve as a back-end is removed. It was very slow, had a low precision and the saved memory is not as useful as it was 10 years ago. Removing it simplify the code a lot, but i can add it back if there is demand for it.; - Time-dependent Hamiltonian no longer support numpy array format: some correlation have 2 times list: `tlist` and `taulist`. It was not clear which one was to be used when using that format. `QobjEvo` input are supported, so building it before passing it to the correlation function is the way to go.; - `a_op`, `b_op`, `c_op` can be `QobjEvo`. Spectrum functions have been moved to their own file, but are mostly unchanged. I added `correlation_3op` which work as other correlation functions, but take a `Solver` instead of an Hamiltonian and `c_ops`. This allows any solver able to evolve density matrices to be used (`BRSolver`, `HEOMSolver`). It is only one function that support it directly: adding support of `Solver` to existing function would make the interface quite complicated, and changing it would break a lot of code and calling them using `H` is useful. . Fixed a small bugs in brmesolve and heom. I added data type option for the eigen solver of the diag integrator as it would otherwise sometime fail with cases in correlation (system and state not hermitian.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1997:296,simpl,simplify,296,https://qutip.org,https://github.com/qutip/qutip/pull/1997,2,"['clear', 'simpl']","['clear', 'simplify']"
Usability,**Description**; Update minimum version supported ; - python >= 3.10; - numpy >= 1.22; - scipy >= 1.8; - matplotlib >= 3.5. According to scientific python spec 0. Cython 3.0.3 does not support python under 3.9. The changelog does not seems to indicate if it is intentional or not.; It also simplify some parts where we branch over module versions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2241:290,simpl,simplify,290,https://qutip.org,https://github.com/qutip/qutip/pull/2241,1,['simpl'],['simplify']
Usability,**Description**; Update the guide for setting to list options still available in v5 and add an example with the using newly added context.; Removed the `auto_herm` options which was removed with `Qobj.isherm` being a property.; `auto_tidyup_dims` is not used anywhere but I left if since it could be useful with the dimensions class.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2025:28,guid,guide,28,https://qutip.org,https://github.com/qutip/qutip/pull/2025,1,['guid'],['guide']
Usability,"**Description**; Update the guides for solver options, results and time-dependent system.; In `dynamics-data`, I added example of the `e_data` property and explained the difference between results for one and multiple trajectories. `dynamics-time` as been mostly rewritten to explain how to use `QobjEvo`. It explain most features needed to use them in solvers, but it's quite dry.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2028:28,guid,guides,28,https://qutip.org,https://github.com/qutip/qutip/pull/2028,1,['guid'],['guides']
Usability,**Description**; While trying to reproduce #1229. I found that the progress bar would raise an error (`OverflowError: date value out of range`) if `update` was called too often.; Now when the bar goes over 100% it says 0 sec remaining.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2374:67,progress bar,progress bar,67,https://qutip.org,https://github.com/qutip/qutip/pull/2374,1,['progress bar'],['progress bar']
Usability,"**Description**; While working on the [heom-tls notebook] I discovered two wrong behaviors of the `HEOMSolver`. ; 1. Running `hsolver.run()` does not return the states if `e_ops=None`, but the documentation says that it should do so. I added the missing if condition to `HEOMSolver`. ; 2. If passing a progress bar like `qutip.ui.progressbar.TextProgressBar()` to `HEOMSolver` it results in an error, because internally it only checks for `None` or `True`. The documentation says it should also work if I pass an instance of `BaseProgressBar` (or a subclass). I added the checks and a test in the testfile for this. **Related issues or PRs**; None. **Changelog**; Fix HEOMSolver state return and progress bar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:302,progress bar,progress bar,302,https://qutip.org,https://github.com/qutip/qutip/pull/1908,2,['progress bar'],['progress bar']
Usability,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880:523,simpl,simpler,523,https://qutip.org,https://github.com/qutip/qutip/pull/1880,1,['simpl'],['simpler']
Usability,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879:399,simpl,simpler,399,https://qutip.org,https://github.com/qutip/qutip/pull/1879,1,['simpl'],['simpler']
Usability,"**Description**; `mcsolve` runs with `improved_sampling` has a runs with no jump, therefore fully deterministic. This run is no longer counted in `ntraj`. ; This clear confusion when merging results with `improved_sampling`: ; ```; res1 = mcsolver.run(psi0, ..., ntraj=100); res2 = mcsolver.run(psi0, ..., ntraj=10); result = res1 + res2; ```; In this case, since the no jump trajectory is the same in both case, there is only 109 different trajectories. So if we merge keeping all random trajectories with the same weight, we get a `99:9` ratio instead of the `100:10` that we would naturally expect. To keep the intuitive ratio, we need to add relative weight between trajectories of each run. By not counting the no-jumb trajectory in the provided `ntraj`, then expected ratio comes naturally. It also help with reproducing result using seeds. To reproduce `result` from it's seeds, we would need to remove `seeds[100]` and run 109 trajectories. Keeping the no-jump appart, it does not use a seed and `result.seeds` can be used as is to reproduce the simulation. I created `MultitrajResult.add_deterministic` for no jump trajectories. It does not take the seed, but take the absolute weight. And added the weight to the `add` method. By having the weight be part of the multi trajectory object instead of each trajectories, merging `MultitrajResult` is simpler since they can reuse the same single trajectory result.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502:162,clear,clear,162,https://qutip.org,https://github.com/qutip/qutip/pull/2502,3,"['clear', 'intuit', 'simpl']","['clear', 'intuitive', 'simpler']"
Usability,**Description**; `mcsolve` taking Liouvillian input replace the photocurrent_mesolve function.; Add the equations for open mcsolve evolution to the mcsolve page in the guide. Help cases such as #2060,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2373:168,guid,guide,168,https://qutip.org,https://github.com/qutip/qutip/pull/2373,1,['guid'],['guide']
Usability,**Description**; `propagator` accept list format `H` but only pre-made `QobjEvo` for `c_ops`.; This make it also accept list `c_ops`. Also make clear in the documentation to pass `tlist` when using array format.; Propagator's `t` can be a scalar and the output time should not be forced to be the same as the sampling times. **Related issues or PRs**; fix #2532,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2540:144,clear,clear,144,https://qutip.org,https://github.com/qutip/qutip/pull/2540,1,['clear'],['clear']
Usability,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684:697,simpl,simplest,697,https://qutip.org,https://github.com/qutip/qutip/issues/1684,1,['simpl'],['simplest']
Usability,"**Is your feature request related to a problem? Please describe.**; A lot of issues in test fail seem to arise from random objects (as well as low-level math in MKL and/or cython issues). . **Describe the solution you'd like**; There are several options at hand. . ### stick to pytest and be creative; A possible fix in testing may be to add randomly generated data that then is pointed at or fix seeds.; **Pros**: fast (?); **Cons**: technical debt. ### pytest-randomly plugin; [pytest-randomly](https://github.com/pytest-dev/pytest-randomly) is a pytest plugin that addresses this kind of issues. It allows to control `random.seed`, rather than `numpy.random.seed`. ; **Pros**: pytest plugin, supports doctest. ; **Cons**: not super popular, not designed for numpy; ; ### property-based testing with Hypothesis; Hypothesis is a library that aims at changing the way tests are designed, allegedly: it should go from testing an instance to designing a test that applies to a domain of instances ([property-based testing](https://hypothesis.works/)). It is not super clear to me right now. ; It contains various randomness-related features, including a [seed function](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.seed). **Pros**: sounds powerful and clever, popular and growing, well documented, more robust even beyond this randomness problems.; **Cons**: radical change of testing framework (?), steep learning curve (?), overkill (?). I also admit I used nose until recently / used with pytest tests thought for nose, without taking advantage of pytest full power.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:1066,clear,clear,1066,https://qutip.org,https://github.com/qutip/qutip/issues/1268,2,"['clear', 'learn']","['clear', 'learning']"
Usability,"**Is your feature request related to a problem? Please describe.**; I would like to use a [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) as a key for a [``functools.lru_cache``](https://docs.python.org/3/library/functools.html#functools.lru_cache), but since the [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) is not hashable, I can't do this. **Describe the solution you'd like**; A clear and concise description of what you want to happen. I can implement ``qutip.Qobj.__hash__``, which would hash the dims and the data of the ``qutip.Qobj``. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321:434,clear,clear,434,https://qutip.org,https://github.com/qutip/qutip/issues/1321,2,['clear'],['clear']
Usability,"**Issue**; Currently, to develop qutip from source (e.g., installing from)the installation guide says to do ; ```; python setup.py develop; ```; However, it is [suggested](https://stackoverflow.com/questions/30306099/pip-install-editable-vs-python-setup-py-develop) to use the command; ```; pip -e .[development]; ```; This currently is not supported as there is no `development_requirements.txt` file. Also, in dev mode, one needs to install pytest, otherwise the `qt.run()` fails. If pytest as well as cython numpy and scipy were specified in such file, this should be done automatically. . Additionally, it may be ideal to pin only minor versions with tilde, stuff like `numpy~=1.18.1`, which should update micro releases but not minor. . **Describe the solution you'd like**; Add a `development_requirements.txt` file and in setup add; ```; extras_require={; 'development': set(dev_requirements),; 'test': dev_requirements,; ```; the set option should be needed for how pypi wants it given. . Add tildes pinning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/1263,1,['guid'],['guide']
Usability,"**Issue**; In the codebase, the weight for setting the unit trace condition in the steadystate function should be set according to the documentation to the average value of the (nonzero) elements in the Liouvillian L, if not specified explicitly. However in the code the weight is set as ; ```python; ss_args['weight'] = np.mean(np.abs(A.data.data.max())); ```; which is clearly different as it just set to the maximum value in the Liouvillian matrix A and hence the mean and abs are meaningless. I think this could be an overlooked mistake, or else just a mistake in the documentation of the parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1512:371,clear,clearly,371,https://qutip.org,https://github.com/qutip/qutip/issues/1512,1,['clear'],['clearly']
Usability,**Related issues or PRs**; 1759. **Changelog**; Removed a figure whose details were to small to see. Simplification of language (verbiage),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762:101,Simpl,Simplification,101,https://qutip.org,https://github.com/qutip/qutip/pull/1762,1,['Simpl'],['Simplification']
Usability,- Just a simple reorder of the e_ops to list and the safety checks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/631:9,simpl,simple,9,https://qutip.org,https://github.com/qutip/qutip/pull/631,1,['simpl'],['simple']
Usability,- Propagator can now be run in parallel.; - Simplified dissipative calling by unifying 'sparse' and dense calls when dissipative.; - Added propagator unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/496:44,Simpl,Simplified,44,https://qutip.org,https://github.com/qutip/qutip/pull/496,1,['Simpl'],['Simplified']
Usability,.**Description**; Some changes to the Bloch-Redfield Solver documentation. ; It was not clear from the documentation that `bloch_redfield_tensor` returns the eigenstates of the Hamiltonian ( and not the eigenstates of the tensor itself). And some minor equation mistake was fixed.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1950:88,clear,clear,88,https://qutip.org,https://github.com/qutip/qutip/pull/1950,1,['clear'],['clear']
Usability,".7/site-packages/matplotlib/figure.py"", line 1834, in savefig; self.canvas.print_figure(fname, **kwargs); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2188, in print_figure; self.figure.dpi = dpi; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 436, in _set_dpi; self.set_size_inches(w, h, forward=forward); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 745, in set_size_inches; manager.resize(int(canvasw), int(canvash)); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = sigmax(); sy = sigmay(); sz = sigmaz(); sm = sigmam(); H = w * (cos(theta) * sz + sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(sqrt(rate) * sz). # evolve and calculate expectation values; output = mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * pi # qubit angular frequency; theta = 0.2 * pi # qubit angle from sigma_z axis (toward sigm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:1702,Guid,Guide,1702,https://qutip.org,https://github.com/qutip/qutip/issues/796,1,['Guid'],['Guide']
Usability,".set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); H = Hrot(coef=coef*Omega0,tlist=tlist); result = qutip.mesolve(H,psi0,tlist=tlist); print(f""{wavedata_name}"",np.abs(psi0.dag()@result.final_state)**2); ```. ```; index92 1.9513183436107076e-10; index93 0.49999366030208936; index94 1.0264492246902099e-13; ```. I would appreciate any insights into the potential causes of these errors and guidance on how to prevent such issues in future simulations. Additional Information:; scipy version: 1.13.0; python version: 3.12.2; qutip version: 5.0.1; numpy version: 1.26.4; Operating system: macOS 15.1. The files with the preselected coefficients and tlist are provided for reproducibility.; [index92_coef.txt](https://github.com/user-attachments/files/17613505/index92_coef.txt); [index92_tlist.txt](https://github.com/user-attachments/files/17613506/index92_tlist.txt); [index93_coef.txt](https://github.com/user-attachments/files/17613507/index93_coef.txt); [index93_tlist.txt](https://github.com/user-attachments/files/17613509/index93_tlist.txt); [index94_coef.txt](https://github.com/user-attachments/files/17613510/index94_coef.txt); [index94_tlist.txt](https://github.com/user-attachments/files/17613511/index94_tlist.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:2736,guid,guidance,2736,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['guid'],['guidance']
Usability,"/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs); 126 ; 127 bytes_io = BytesIO(); --> 128 fig.canvas.print_figure(bytes_io, **kw); 129 data = bytes_io.getvalue(); 130 if fmt == 'svg':. /miniconda3/lib/python3.7/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs); 2054 orientation=orientation,; 2055 dryrun=True,; -> 2056 **kwargs); 2057 renderer = self.figure._cachedRenderer; 2058 bbox_artists = kwargs.pop(""bbox_extra_artists"", None). /miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs); 525 ; 526 else:; --> 527 FigureCanvasAgg.draw(self); 528 renderer = self.get_renderer(); 529 with cbook._setattr_cm(renderer, dpi=self.figure.dpi), \. /miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py in draw(self); 386 self.renderer = self.get_renderer(cleared=True); 387 with RendererAgg.lock:; --> 388 self.figure.draw(self.renderer); 389 # A GUI class may be need to update a window using this draw, so; 390 # don't forget to call the superclass. /miniconda3/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 36 renderer.start_filter(); 37 ; ---> 38 return draw(artist, renderer, *args, **kwargs); 39 finally:; 40 if artist.get_agg_filter() is not None:. /miniconda3/lib/python3.7/site-packages/matplotlib/figure.py in draw(self, renderer); 1707 self.patch.draw(renderer); 1708 mimage._draw_list_compositing_images(; -> 1709 renderer, self, artists, self.suppressComposite); 1710 ; 1711 renderer.close_group('figure'). /miniconda3/lib/python3.7/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 133 if not_composite or not has_images:; 134 for a in artists:; --> 135 a.draw(renderer); 136 else:; 137 # Composite any adjacent images together. /min",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1027:2010,clear,cleared,2010,https://qutip.org,https://github.com/qutip/qutip/issues/1027,1,['clear'],['cleared']
Usability,"/github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data.Data`; - `bra * ket` now returns a scalar, not a `Qobj` (no need to do `(bra * ket).data[0, 0]` or `(bra * ket).tr()`) any more; - 1D subspaces in `Qobj.dims` are now never contracted silently (they were, but inconsistently before), but the new function `Qobj.contract()` can be called to do this explicitly; - `Qobj` no longer defines `__array__`, and so cannot be treated as if it is a numpy array. Having this led to inconsistent behaviour when `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:2535,simpl,simple,2535,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['simpl'],['simple']
Usability,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414:53,simpl,simple,53,https://qutip.org,https://github.com/qutip/qutip/pull/1414,1,['simpl'],['simple']
Usability,"5262849, 0)]. ##### SECOND TRAJECTORY. 0.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; 1.0547264671307385e-12 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ```. ### Expected Behaviour. On the second trajectory, the list of collapses should have been reset to `[]` and then updated during the run of that trajectory. ### Your Environment. ```shell; QuTiP Version: 5.1.0.dev0+d8c6584; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I have tracked the source of the problem as follows:; * The `MCIntegrator` [correctly calls](https://github.com/qutip/qutip/blob/d8c6584ffa74ee40bda88bb44e04ba5d9026bced/qutip/solver/mcsolve.py#L240); ```python; self.collapses = []; self.system._register_feedback(""CollapseFeedback"", self.collapses); ```; at the beginning of every trajectory.; * `_register_feedback` of `QobjEvo` is [defined](https://github.com/qutip/qutip/blob/d8c6584ffa74ee40bda88bb44e04ba5d9026bced/qutip/core/cy/qobjevo.pyx#L465) as follows:; ```python; new_args = {}; for key, feed in self._solver_only_feedback.items():; # [...]; new_args[key] = solvers_feeds[feed]; self.arguments(**new_args); ```; This works for the first trajectory, but after that, the dict `self._solver_only_feedback` is empty, and `_register_feedback` does nothing.; * That dict is empty because of the call to `self.arguments` at the end, where we have the following code:; ```python; for key, val in args.items():; if isinstance(val, _Feedback):; # [...]; else:; new_args[key] = val; # [...]; if key in self._solver_only_feedback:; del self._solver_only_feedback[key]; ```. My understanding of the feedback stuff is not deep enough to know what the correct fix would be.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2422:3014,feedback,feedback,3014,https://qutip.org,https://github.com/qutip/qutip/issues/2422,1,['feedback'],['feedback']
Usability,"://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has grown immensely with several projects that build on top of it. In this document we refer to the “QuTiP project” or “ the project” with reference to all software developed under the QuTiP Github organization, hosted at “[www.github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening through its official channels. **<span style=""text-decoration:underline;"">The Community</span>**. QuTiP is at the center of a lively ecosystem and creative community. As of October 2020, QuTiP’",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3861,simpl,simple,3861,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['simpl'],['simple']
Usability,"======================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+d377c997-py3.7-macos; x-10.9-x86_64.egg/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fau",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:2913,simpl,simple,2913,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['simpl'],['simple']
Usability,"@Ericgig @nathanshammah @hodgestar ; Hi. All. I need help with creating PR for the qutip-lattice repo. Not quite sure how to do it separately. This is try 1. The lattice.py and topology.py are moved from qutip/ to qutip/lattice which also contains the qutip/lattice/tests/test_lattice.py with all the test functions for the new functions. Usage examples for the new functions can be found in https://github.com/sbisw002/qutip.lattice-notebooks; You'll know how I imported the module and understand the examples. . I still need to learn how the separate repository can be updated, please help with that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2014:530,learn,learn,530,https://qutip.org,https://github.com/qutip/qutip/pull/2014,1,['learn'],['learn']
Usability,"@quantshah spotted that the function visualisation tree was out-of-date in qutip/qutip-doc#63. Thanks for that.; @nathanshammah and I spent some time updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:524,guid,guide,524,https://qutip.org,https://github.com/qutip/qutip/issues/1525,2,['guid'],['guide']
Usability,"A few people have been asking for this again recently. ; I have produced this new PR, rather than apply #396, as its a bit simpler and more flexible. It is a bit more memory consumptive, but probably a small percentage of the whole. It's also based an recent pull. . No notebook as yet, as I will wait for feedback from those who requested it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/506:123,simpl,simpler,123,https://qutip.org,https://github.com/qutip/qutip/pull/506,2,"['feedback', 'simpl']","['feedback', 'simpler']"
Usability,A much simpler way to get PEP compliance.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/523:7,simpl,simpler,7,https://qutip.org,https://github.com/qutip/qutip/pull/523,1,['simpl'],['simpler']
Usability,"A representation of a quantum circuit consiting of qubit initialisation (I), controlled NOT gates (C) and measurements (M) with respect to different bases. According to [1], the transformation of a circuit to the ICM representation provides a cannonical form for an exact and fault-tolerant, error corrected circuit needed for optimization prior to final implementation on a hardware model. The algorithm consists of magic qubit initializations, gate teleportation and conditional measurements on qubits. It can be a starting point for topological descriptions of quantum cirucuits important for fault-tolerant quantum computation and can become a part of a pipeline for optimization of topological quantum computing circuits. Check out the game (MeQuanics)[http://www.mequanics.com.au] which aims to do so using crowd sourcing. Several proposals exist for circuit optimizations once we have the topological circuit model (Machine learning, monte carlo search etc) and the ICM model can be a good starting point to get to the initial topological circuit (as far as I could understand). . The algorithm can be roughly described as follows : . ```; Require: Circuit C composed from {Toffoli,CNOT,H,P,T}; Replace the Toffoli gates with their decomposition; Replace the H gates with P V P (already implemented using `resolve_gates`); Implement P V P using gate teleportation outlined in [1]; ```. The final output is a quantum circuit only using qubit initialisations, CNOT and conditional measurements/correction. Once that is complete, maybe another addition can be a conversion to the topological model and visualizations. This is a work in progress. TODO; ------; [ ] Fix code errors; [ ] Write tests; [ ] Update examples and docs. References; ----------; .. [1] arXiv:1509.03962v1 [quant-ph]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603:931,learn,learning,931,https://qutip.org,https://github.com/qutip/qutip/pull/603,1,['learn'],['learning']
Usability,"A simple line plot is produced that illustrates clearly that the pulse is piecewise constant in the timeslots; A standard Matplotlib line plot suggests that the amplitudes vary linearly throughout the timeslot, which is not the case",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/406:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/pull/406,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,A simple question about Stochastic Solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/2194,2,['simpl'],['simple']
Usability,"A simple test shows that the Clenshaw method from @Vutshi does not give results consistant with the other solvers. This slipped through because the test suite was not testing this new method against random operators. ``` python; N = 20; xvec = np.linspace(-10, 10, 128); for i in range(3):; rho = rand_dm(N). Wfft = wigner(rho, xvec, xvec, method='iterative'); W = wigner(rho, xvec, xvec, method='clenshaw'). Wdiff = abs(W - Wfft); print(np.sum(abs(Wdiff))); ```. With the above code, I am getting differences on the order of one, where as the other methods all are close on the order of 1e-12 or so. I will revert back to the old iterative method until this is resolved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/526,1,['simpl'],['simple']
Usability,"A user was confused because they were on the readthedocs website, thought that was the main qutip website, and couldn't find the tutorial notebooks. I added a link to the main qutip website and the tutorials section to the landing page of the readthedocs. I also used the opportunity to update the list of admins in several places to match the admin team as listed on the qutip website. Meaning, mostly, I added @AGaliciaMartinez , myself, and @flowerthrower . Let me know in case that isn't okay and I will undo it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2439:508,undo,undo,508,https://qutip.org,https://github.com/qutip/qutip/pull/2439,1,['undo'],['undo']
Usability,"Add a `Coefficient` object to encapsulate the coefficients of the QobjEvo.; `Coefficient`s replace qobjevo's codegen. Their advantages are; - Coefficient are always 'compiled'. String are compiled to cython code at initialization.; - Have cython decorator: taking the conjugate does no longer require new compilation.; - String coefficient are saved to reuse with basic pattern matching: ""cos(a*t)"" and ""cos( w1 *t )"" will use the same compiled object. This object is compiled once and kept between session.; - Cleaner compilation using `setuptools` instead of a monkey patched `pyximport`.; - `QobjEvo` is always compiled.; - `ObjeEvo` does not need to keep track of type making the code simpler. There are shims to make `Pulse` and qip tests work since they used `QobjEvo.tlist` and `QobjEvo.ops.coeff`.; @BoxiLi, the new QobjEvo can be added even if coefficient's tlist are different, but you cannot get back the tlist and the array from them. Also for _step_func_coeff, before the first time, `Coefficient` return the first value of the array, not 0 as expected in pulse.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1336:689,simpl,simpler,689,https://qutip.org,https://github.com/qutip/qutip/pull/1336,1,['simpl'],['simpler']
Usability,"Add a simple method onto the Qobj to calculate the purity of a quantum object, `(rho*rho).tr()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1045:6,simpl,simple,6,https://qutip.org,https://github.com/qutip/qutip/pull/1045,1,['simpl'],['simple']
Usability,Add a test for progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:15,progress bar,progress bar,15,https://qutip.org,https://github.com/qutip/qutip/pull/2150,2,['progress bar'],['progress bar']
Usability,Add equation in the guide for open mcsolve evolution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2373:20,guid,guide,20,https://qutip.org,https://github.com/qutip/qutip/pull/2373,2,['guid'],['guide']
Usability,Add example of `SMESolver.run_from_experiement` in the guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2479:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/pull/2479,2,['guid'],['guide']
Usability,"Add the `data.CSR` and `data.Dense` types, and begin the port of the current operations of a mixture of `fast_csr_matrix` and `CSR_Matrix` into simple ones on the new `CSR` type. This is significantly faster at initialisation and interaction between Python and Cython. Also add the base multiple dispatcher type which will be used in the future to implement data layer multiple dispatch. @qutip/data-layer-devs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296:144,simpl,simple,144,https://qutip.org,https://github.com/qutip/qutip/pull/1296,1,['simpl'],['simple']
Usability,"Added CSIGN, SWAPalpha and Berkeley gates and simplified base case of other gates",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/136:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/pull/136,2,['simpl'],['simplified']
Usability,"Added CSIGN, SWAPalpha and Berkeley gates and simplified base case of other gates.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/136:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/pull/136,1,['simpl'],['simplified']
Usability,Added MPI section in Users Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2550:27,Guid,Guide,27,https://qutip.org,https://github.com/qutip/qutip/pull/2550,1,['Guid'],['Guide']
Usability,Addressing #993: nonlinear functions such as the Von Neumann entropy or purity of a density matrix written in the Dicke basis need to account for the identical copies of the blocks relative to non-symmetrical Dicke states. . This can be done by cycling into the blocks and applying the correct weight accounting for degeneracy (using `piqs.state_degeneracy`). . This PR also contains auxiliary functions to visualize and unpack the Dicke-basis density matrix into the full 2^N space still of collective spin but with degenerate blocks. . It uses the `purity` method proposed in #1045. . Will add info in User Guide and notebooks to highlight this features that need to be considered to correctly calculate nonlinear functions of a density matrix in the Dicke basis.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1046:609,Guid,Guide,609,https://qutip.org,https://github.com/qutip/qutip/pull/1046,1,['Guid'],['Guide']
Usability,"All deprecation warnings issued by numpy during the tests have now been fixed, resolving #381 ; The motivation was to try and make it more clear when and why issue #430 arises",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/434:139,clear,clear,139,https://qutip.org,https://github.com/qutip/qutip/pull/434,1,['clear'],['clear']
Usability,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:101,feedback,feedback,101,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['feedback'],['feedback']
Usability,"As it stands now, all of the steady state solvers treat the solution vector as a dense array. However, often times the steady state density matrix is sparse and therefore the current implementation is not optimal. As of SciPy 0.14, the sparse LU solver can now access the underlying L and U sparse matrices. Therefore, we should be able to do some kind of sparse forward and backward substitution to get the solution vector. In particular, since the RHS vector has only a single nonzero entry, the substitutions are greatly simplified,and we could also see a speed up.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/163:524,simpl,simplified,524,https://qutip.org,https://github.com/qutip/qutip/issues/163,1,['simpl'],['simplified']
Usability,Automate or simplify documentation release,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:12,simpl,simplify,12,https://qutip.org,https://github.com/qutip/qutip/issues/1533,2,['simpl'],['simplify']
Usability,BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:1986,guid,guide,1986,https://qutip.org,https://github.com/qutip/qutip/pull/1601,1,['guid'],['guide']
Usability,"Building the documentation guide, dynamics-monte takes minutes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1534:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1534,2,['guid'],['guide']
Usability,"Building the documentation guide, dynamics-monte takes minutes; ```; Reading sources... [ 41%] guide/dynamics/dynamics-monte; ```; as well parfor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1534:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1534,2,['guid'],['guide']
Usability,"Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/releases"">idna's releases</a>.</em></p>; <blockquote>; <h2>v3.7</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/kjd/idna/compare/v3.6...v3.7"">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:419,Guid,Guido,419,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guido']
Usability,"Clarification of some variable naming to attempt to link with literature and also be usable without having to read the papers.; Switch to a class module. In line with recent work from @arnelg ; Moved to nonmarkov folder, as this is a non-Markovian approx method. Old file remains with deprecated function, just in case anyone was using it. This now links to the new instance method.; Many efficiency improvements (now up to 10x faster). Test added. . Will provide a notebook example soon. Then some documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:85,usab,usable,85,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['usab'],['usable']
Usability,Clarification of user's guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1770:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/issues/1770,2,['guid'],['guide']
Usability,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:427,guid,guide,427,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['guid'],['guide']
Usability,"Consider the following code:. ```; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(); b.show(); ```. When run in a Jupyter notebook, as per the tutorial on http://qutip.org/docs/latest/guide/guide-bloch.html, the Bloch sphere is immediately displayed in the cell output. However, nothing is displayed (no matplotlib window opens) when this code is run as a standalone script from the terminal, or even in IPython. For this, an additional call to `plt.show()` is required. I understand how this behaviour could be useful when moving code that has been developed in a notebook into a standalone script, as `plt.show()` is a blocking command. However, I still see this as inconsistent as we get distinctly different results depending on where the code is being run. If this is indeed intentional behaviour, might I suggest a note in the tutorial/API documentation? At present, there is no way to tell that this is what happens and if this is consistent. (It is possible that this is specific to my OS/environment, so I can provide those details if necessary)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1182:200,guid,guide,200,https://qutip.org,https://github.com/qutip/qutip/issues/1182,2,['guid'],"['guide', 'guide-bloch']"
Usability,"Consider the following example:; ~~~; >>> import qutip; >>> from qutip.operators import *; >>> import numpy as np; >>> ket = (qutip.tensor(qutip.ket('0'), qutip.ket('0')) - 1j * qutip.tensor(qutip.ket('1'), qutip.ket('1')))/np.sqrt(2); >>> rho = qutip.ket2dm(ket); >>> H = qutip.tensor(sigmaz(), identity(2)) + qutip.tensor(identity(2), sigmaz()); >>> c_ops = [qutip.tensor(sigmam(), identity(2)), qutip.tensor(identity(2), sigmam())]; >>> L = qutip.superoperator.liouvillian(H, c_ops=c_ops); ~~~. Now, it seems very sensible to want to apply the superoperator to the density matrix via a simple product. However, this fails:; ~~~; >>> L * rho; Traceback (most recent call last):; File ""<ipython-input-50-c0fe3dea3c39>"", line 1, in <module>; L * rho; File ""/Users/goerz/anaconda3/lib/python3.5/site-packages/qutip/qobj.py"", line 515, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes; ~~~. The only way to do it seems to be:. ~~~; >>> qutip.vector_to_operator(L * qutip.operator_to_vector(rho)); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[-1.0+0.j 0.0+0.j 0.0+0.j 2.0-0.5j]; [ 0.0+0.j 0.5+0.j 0.0+0.j 0.0+0.j ]; [ 0.0+0.j 0.0+0.j 0.5+0.j 0.0+0.j ]; [ 2.0+0.5j 0.0+0.j 0.0+0.j 0.0+0.j ]]; ~~~. I would argue that the product `L * rho` should do this kind of conversion internally instead of throwing an exception. It seems to me the intention of `L * rho` is completely unambiguous, but maybe I'm missing something?. Having the product work out of the box means that I can write a simple propagation routine as `(A * dt).expm() * state` and it would work independent of whether (A, state) are a (Hamiltonian, vector) or a (Liouvillian, density matrix). Currently, I have to catch the different cases and handle them separately.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/939:589,simpl,simple,589,https://qutip.org,https://github.com/qutip/qutip/issues/939,2,['simpl'],['simple']
Usability,"Continuing the work of #1164 - this is part two of many more to come, depending on how long I can keep doing this! Of particular note is the first commit in this PR, which registers `pytest.mark.slow` with `pytest` to stop it warning about an unknown mark in use. There are several additional comments and explanations in the expanded commit messages, where I've tried to explain a little bit about bugs I found and reasons for swapping over to certain libraries (e.g. for temporary file handling). I'm in part opening a new PR now so that I can see if the CodeClimate tests are passing. I shouldn't have many pep8 issues because I have a tool to check, but I don't have CodeClimate working locally for things like the complexity (if it even checks them for tests...). I've been really rather aggressively using the parametrisation that `pytest` offers for fixtures, which is cutting out an awful lot of code duplication, and hopefully making it a bit clearer when things are exactly the same. One common theme I'm finding when I'm running these tests is that there's an awful lot of warnings caused by `pyximport`, a part of `Cython`, which is using the Python 2 era `imp` instead of the newer `importlib`. I'm not sure there's anything we can or should do about this, though.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:952,clear,clearer,952,https://qutip.org,https://github.com/qutip/qutip/pull/1181,1,['clear'],['clearer']
Usability,Control amplitudes are now cleared when initialize_controls is called,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/281:27,clear,cleared,27,https://qutip.org,https://github.com/qutip/qutip/pull/281,2,['clear'],['cleared']
Usability,Correct typo in guide-states.rst,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567:16,guid,guide-states,16,https://qutip.org,https://github.com/qutip/qutip/pull/1567,2,['guid'],['guide-states']
Usability,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:325,progress bar,progress bar,325,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['progress bar'],['progress bar']
Usability,"Currently, `Qobj` has several attributes which are somewhat expensive to compute:; - `type`; - `isherm`; - `istp`; - `iscp`; - `ishp` (added in #452). Of these, `type` and `isherm` are cached by `Qobj._type` and `Qobj._isherm`, respectively. These should be unified, so that the other three are also cached properly. Moreover, we should add unit tests to make sure that this caching is properly invalidated under at least some reasonably common manipulations. For instance, with the caching of `type`, it can sometimes fail in unexpected ways to build an object up then redefine its `dims`:. ``` python; >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type). >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> print(J.type); >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type); ```. The first of these two snippets correctly prints `super`, while the extra `print(J.type)` in the second snippet causes it to cache `type` and print `oper` twice. An experienced user can of course invalidate the cache with `J._type = None`, but that is somewhat counter-intuitive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453:1261,intuit,intuitive,1261,https://qutip.org,https://github.com/qutip/qutip/issues/453,1,['intuit'],['intuitive']
Usability,"Currently, many `Qobj` operations are tagged as ""tidied up"" operations, which means that if the global option `auto_tidyup` is set to `True` (its default), then small values (< 1e-15) are truncated from the output matrices. This generally ends up with ""neater"" looking matrices when output; there are far fewer numbers like `1 + 4.516584e-17j` reported, when that's basically just `1`. There are, however, a couple of problems because of this. The first is speed; after every (very simple)_ operation, such as `matmul` or `add`, the tidier runs on the matrix. This typically has `O(nnz)` complexity for sparse matrices, and `O(n * n)` complexity for a dense square matrix with `n` rows. This adds very significant overhead on to simple operations. Second is numerical precision. By dropping small terms, we are effectively turning numerical imprecision into a ""feature"" as opposed to a bug. Because QuTiP 5 uses the new data-layer to do most of its operations, rather than constructing intermediary `Qobj` instances, many mathematical operations will not give the same result if the data layer is used directly compared to if `Qobj` is used at every step. For example, let's say we have three random `Qobj`:; ```python; a, b, c = [qutip.rand_herm(5) for _ in [None]*3]; ```; Now, in general,; ```python; a + b + c != qutip.Qobj(a.data + b.data + c.data); ```; because `a + b + c` will invoke the `tidyup` code twice, whereas the right-hand side will not invoke it at all. This means that despite the fact that `Qobj.__add__` uses the data-layer addition underneath, there will be numerical differences using the QuTiP default settings. I suspect these sort of problems are behind the recent test instabilities on `dev.major` with regards to tolerances. ----. My vote is for a removal of `auto_tidyup`, or at the very least, changing the default value of the option to `False`. We still want nice values for display, so perhaps we could consider having an option to produce a tidied up copy when callin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349:482,simpl,simple,482,https://qutip.org,https://github.com/qutip/qutip/issues/1349,2,['simpl'],['simple']
Usability,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1539:968,guid,guide-visualization-,968,https://qutip.org,https://github.com/qutip/qutip/issues/1539,1,['guid'],['guide-visualization-']
Usability,"Currently, the issue template reads (for fearure requests):. **Is your feature request related to a problem? Please describe.**; A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]. **Describe the solution you'd like**; A clear and concise description of what you want to happen. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here. Similarly, for bug reports, one finds:. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; from qutip import identity; print(identity(2)); ```; The terminal out put is; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; A clear and concise description of what you expected to happen. **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. **Additional context**; Add any other context about the problem here. -------------; The slight hiccup I find with these great templates introduced by @BoxiLi, especially in the first case above, is that many sub-titles need to be deleted by the user and are not uniform in the end. Something more standard could be achieved by clearly stating what lines should be removed by the user and are just explanations, and what are to be kept in the structure. Sometimes simply rewording the titles could help. For example:; From; ```; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; ```; To something like; ```; **Feature Request Description**; +++ remove this line and the text example below; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; +++ remove ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266:131,clear,clear,131,https://qutip.org,https://github.com/qutip/qutip/issues/1266,5,['clear'],['clear']
Usability,"Dear qutip developers,. In the documentation of version 4.5 the c_ops argument is said to support callback functions, however they are not implemented in that version and as far as I can tell neither in the current branch. It would be nice to have this feature added to allow for arbitrary time-dependent Lindbladians to be implemented. There are cases where Lindbladians cannot simply be described as the product of a time-dependent scalar and a time-independent Lindbladian, this is where the callback becomes useful. I envisage a single callback passed to c_ops as being useful, where the user has to manually add multiple decoherence channels. This way, arbitrary data can be passed through the args parameter of the callback to build the operators at a given time step. I believe this would also allow channel cross-correlations to be implemented too. I have hacked my local copy of qutip 4.5 to check this can in principle be done with mesolve, and it has worked. Here is a link to a patch file that shows the changes I made to get this working:; https://pastebin.com/iZCgBbNQ. I am happy to add this functionality properly to a clone and make a pull request.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1254:379,simpl,simply,379,https://qutip.org,https://github.com/qutip/qutip/issues/1254,1,['simpl'],['simply']
Usability,Description; Fixes TypeError: 'Axes3D' object is not iterable when running the code from the tutorial. Related issues or PRs; #799 . Changelog; Fixed runtime error in http://qutip.org/docs/latest/guide/guide-bloch.html#generating-images-for-animation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558:196,guid,guide,196,https://qutip.org,https://github.com/qutip/qutip/pull/1558,2,['guid'],"['guide', 'guide-bloch']"
Usability,Details of QuTiP user's guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/issues/1759,2,['guid'],['guide']
Usability,Documentation for progress bars,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1517:18,progress bar,progress bars,18,https://qutip.org,https://github.com/qutip/qutip/issues/1517,2,['progress bar'],['progress bars']
Usability,"Documentation has been requested about using the progress bars in qutip/qutip#444.; @cgranade maybe you could look at this, as you did quite a lot of work on the web progress bar?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1517:49,progress bar,progress bars,49,https://qutip.org,https://github.com/qutip/qutip/issues/1517,2,['progress bar'],"['progress bar', 'progress bars']"
Usability,"Doing some further testing of `type='super'` `Qobj`s, I ran into a simple test case in which operator multiplication fails to be associative. ```; >>> rho_psi = operator_to_vector(Qobj(np.diag(np.array([0.9, 0.1], dtype=complex))))>>> E_psi = rho_psi.dag(); >>> S = to_super(sigmax()); >>> (E_psi * S) * rho_psi; Traceback (most recent call last):; File ""<ipython-input-22-90cbfac2a43e>"", line 1, in <module>; (E_psi * S) * rho_psi; File ""qutip/qobj.py"", line 416, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes. >>> E_psi * (S * rho_psi); Quantum object: dims = [[1], [1]], shape = [1, 1], type = oper, isherm = True; Qobj data =; [[ 0.18]]; >>> E_psi; Quantum object: dims = [[1], [[2], [2]]], shape = [1, 4], type = bra; Qobj data =; [[ 0.9 0. 0. 0.1]]; >>> rho_psi; Quantum object: dims = [[[2], [2]], [1]], shape = [4, 1], type = operator-vector; Qobj data =; [[ 0.9]; [ 0. ]; [ 0. ]; [ 0.1]]; >>> S; Quantum object: dims = [[[2], [2]], [[2], [2]]], shape = [4, 4], type = super, isherm = True; Qobj data =; [[ 0. 0. 0. 1.]; [ 0. 0. 1. 0.]; [ 0. 1. 0. 0.]; [ 1. 0. 0. 0.]]; ```. I'm not sure why this is happening yet, but I'll keep looking.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96:67,simpl,simple,67,https://qutip.org,https://github.com/qutip/qutip/issues/96,1,['simpl'],['simple']
Usability,Dynamics section of user's guide needs an introduction,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1774:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1774,2,['guid'],['guide']
Usability,ENH: Ensure PEP8 style guidelines are applied in docstrings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527:23,guid,guidelines,23,https://qutip.org,https://github.com/qutip/qutip/issues/1527,2,['guid'],['guidelines']
Usability,ENH: Simplified & optimized mcsolve codegen,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/541:5,Simpl,Simplified,5,https://qutip.org,https://github.com/qutip/qutip/pull/541,1,['Simpl'],['Simplified']
Usability,ENH: Simplify Compiler flags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/308:5,Simpl,Simplify,5,https://qutip.org,https://github.com/qutip/qutip/pull/308,1,['Simpl'],['Simplify']
Usability,Ensure feedback work for all trajectories,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:7,feedback,feedback,7,https://qutip.org,https://github.com/qutip/qutip/pull/2424,2,['feedback'],['feedback']
Usability,Ensure progress bars don't break on too many update,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2374:7,progress bar,progress bars,7,https://qutip.org,https://github.com/qutip/qutip/pull/2374,2,['progress bar'],['progress bars']
Usability,Error from brmesolve() when trying to run code from User Guide examples,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223:57,Guid,Guide,57,https://qutip.org,https://github.com/qutip/qutip/issues/1223,1,['Guid'],['Guide']
Usability,"Finally, `Qobj` can use any backing data store. This fairly small and simple PR is effectively the culmination of all the work on `dev.major` over the last few months, and effectively is just like flicking a switch to turn on all the capabilities that we've built up through #1282, #1296, #1332, #1338 and #1341. There is still a lot of work to be done, but I'm trying to transition to smaller, easier-to-check PRs to make review easier. Possibly incomplete to do list:; - write a proper `data.create`; - possibly add the dispatchers in as `data.Data` mathematical methods (e.g. `__matmul__`); - add options for controlling default output types from the dispatchers; - tests for `Qobj` with both types; - tests for creation and property routines of the data layer; - tests for the dispatch operation; - tests for conversion operations; - more specialisations to be written for `Dense` and `CSR`/`Dense`; - more ergonomic selection of _method_, not just output type (for example, you should be able to specify you want the `Dense` specialisation of `eigs` even if you pass it a `CSR`); - more ergonomic dispatchers for matrix creation (e.g. how exactly will `qutip.basis` function, and how will users add specialisations?); - documentation, both user-facing and developer-facing; - fix algorithms in `add_csr` and `matmul_csr` to use `csr.Accumulator` (should provide a speedup and remove some sorts); - fix `isherm_csr` (see #1350 - `isherm_csr` uses the same algorithm, so has the same problem)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1351:70,simpl,simple,70,https://qutip.org,https://github.com/qutip/qutip/pull/1351,1,['simpl'],['simple']
Usability,"Finding the full power spectrum given a time-dependent Hamiltonian usually requires a 2-sided power spectrum. For convenience, it would be useful to be able to access this data in a properly ordered array. Additionally, the majority of literature regarding cavity optomechanics uses a positive e^(i w t) Fourier convention. Passing a simple boolean parameter to this function would allow for the use of scipy's ifft function, scaled by the number of elements.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/821:334,simpl,simple,334,https://qutip.org,https://github.com/qutip/qutip/pull/821,1,['simpl'],['simple']
Usability,Fix `bloch.clear` breaking `point_color`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336:11,clear,clear,11,https://qutip.org,https://github.com/qutip/qutip/pull/2336,2,['clear'],['clear']
Usability,Fix for error that popped up when running:; ```; qutip-doc/guide/scripts/floquet_ex3.py; ```; Had to fix the last fix #626 as well.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/628:59,guid,guide,59,https://qutip.org,https://github.com/qutip/qutip/pull/628,1,['guid'],['guide']
Usability,Fix typo in guide-settings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1786:12,guid,guide-settings,12,https://qutip.org,https://github.com/qutip/qutip/pull/1786,2,['guid'],['guide-settings']
Usability,Floquet Formalism not working for the case in Users Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:52,Guid,Guide,52,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['Guid'],['Guide']
Usability,"For map evolution in mesolve and unitary oper evolution is sesolve (in #868) has a python function for the ode rhs, for all td types. For const and list_str we have a Cython for dm / state evolution. Focusing on list_str: The spmv function(s) are called on each column of the vectorised map matrix. This could be done inside the custom rhs function. Or we could reshape the vector into a matrix and call some version of spmm (sparse matrix*dense matrix). Questions:; 1. which of these options do we think would be more efficient?; 2. I see we have a `cy_spmm_tr` function, but it's not apparent to me what it does. Does it compute the transpose of the sparse*dense matrix?; 3. There does not seem to be any `zspmm` or equiv in `cy/src`. Is this because it does not really exist anywhere?; 4. As 3 but using with `cy/openmp/src`. It would seem like the simplest option would be to spmv on each 'column', but inside the Cython RHS function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/877:852,simpl,simplest,852,https://qutip.org,https://github.com/qutip/qutip/issues/877,1,['simpl'],['simplest']
Usability,"For now, there is no description of the chosen value of hbar in the documentation of the [evolution solvers](http://qutip.org/docs/latest/apidoc/functions.html#dynamics-and-time-evolution). It seems that the convention `hbar = 1` is used, but it should be documented both in the doctrings of `sesolve`, `mesolve`… and in the [guide](http://qutip.org/docs/latest/guide/dynamics/dynamics-master.html). I even think that the solved equation should be explicitly written in the docstring.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1360:326,guid,guide,326,https://qutip.org,https://github.com/qutip/qutip/issues/1360,2,['guid'],['guide']
Usability,Gates in qutip-v5 User Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441:23,Guid,Guide,23,https://qutip.org,https://github.com/qutip/qutip/pull/2441,1,['Guid'],['Guide']
Usability,Guide - Superoperators,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1984:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1984,1,['Guid'],['Guide']
Usability,Guide basics2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1768:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1768,1,['Guid'],['Guide']
Usability,Guide dynamics data,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1773,1,['Guid'],['Guide']
Usability,Guide dynamics intro,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1761,1,['Guid'],['Guide']
Usability,Guide dynamics intro2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1775,1,['Guid'],['Guide']
Usability,Guide overview,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1762,1,['Guid'],['Guide']
Usability,Guide overview2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1769:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1769,1,['Guid'],['Guide']
Usability,Guide states2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1771:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1771,1,['Guid'],['Guide']
Usability,Guide tensor,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1772:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1772,1,['Guid'],['Guide']
Usability,HEOMSolver return states and progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:29,progress bar,progress bar,29,https://qutip.org,https://github.com/qutip/qutip/pull/1908,2,['progress bar'],['progress bar']
Usability,HTML progress bar is broken in Jupyter notebooks,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2475:5,progress bar,progress bar,5,https://qutip.org,https://github.com/qutip/qutip/issues/2475,2,['progress bar'],['progress bar']
Usability,"Hello again. Since these are very simple and related issues I will adress them in a single post. **1) Adding control over plotted line width**; When we create a Bloch sphere with `b = Bloch()` and add points, `pnts_list`, to it with `b.add_points(pnts_list, meth = 'l')` we can use this handy `meth` parameter to instead of plotting points (which corresponds to the value `'s'` and [looks like this](https://i.imgur.com/pGhU55e.png)) connect them with line segments (which corresponds to the value `'l'` and [looks like this](https://i.imgur.com/QrvLSmd.png)). We can control de size of the points with `b.point_size` but we can't do it for lines (when `meth = 'l'` is been used). It would be nice to have that option, to allow control over the width of the lines plotted just like with points. In that way we could prevent it to be confused with the frame of the bloch sphere in a black and white image. Maybe a good way of solving this would be to use the value of `b.point_size` for that. Or maybe a better option would be to have a new `b.line_size` parameter to allow for different sizes between points and lines (which makes everything more customizable).; _______________________________________________________________. **2) Adding styles for markers and lines for plotting**; In [the code](http://qutip.org/docs/4.0.2/modules/qutip/bloch.html) for the add_points function it is written that. ```; meth : str {'s', 'm', 'l'}; Type of points to plot, use 'm' for multicolored, 'l' for points; connected with a line.; ```. First of all, it is not true that `meth = 'l'` gives points connected by lines (which in pyplot would be done with the `linestyle='-'` and `marker='o'` parameters) but it gives lines without the point markers (`linestyle='-'` and `marker='None'` in pyplot). But this is not important since it is just a comment on a function. The thing that matters is that it would be great if we had a `b.linestyle` and `b.marker` methods for the Bloch sphere instead of a `meth` paramet",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1105:34,simpl,simple,34,https://qutip.org,https://github.com/qutip/qutip/issues/1105,1,['simpl'],['simple']
Usability,"Hello! This is the first of hopefully a few PRs to add measurement functions to qutip. This PR adds a new module named `qutip.measurement` that contains two functions:. * `measure(op, state)` that performs a classic quantum measurement as described in most introductory texts (measurement collapses a state to an eigenvector of an hermitian operator and the result is the corresponding eigenvalue). It is intended to simulate a simple measurement that could be performed in a real experiment. * `measurement_statistics(op, state)` returns information that is not available via a real experiment, but is nevertheless often useful in simulator (the eigenvalues and vectors or projection operators for the measurement operator and the probabilities of each measurement result). Both functions support either kets or density matrices and return sensible results based on the kind of input. Not currently supported:. * Partial measurements of a system.; * Destructive measurements (aka von Neumann measurements of the second kind); * Density matrix ensembles (applying the measurement probabilities to the density matrix rather than making a specific measurement); * Any custom support for qubit measurement (my plan is to add those to a `qutip.qip.measurements` module once we have the basics of this module agreed on). Questions / things I'd like feedback on:. * Do the inputs and outputs of the current functions seem intuitive / sensible?; * What are the most important other features to support?; * I don't want to have too many functions, but I also don't necessarily want to cram all possible kinds of measurements into one function. Any thoughts on how to split these up?; * What other unit tests should I be writing?; * I haven't given any thought to performance yet. Anything egregious I should fix now or any important cases to optimize for?. General stylistic feedback welcomed too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090:428,simpl,simple,428,https://qutip.org,https://github.com/qutip/qutip/pull/1090,4,"['feedback', 'intuit', 'simpl']","['feedback', 'intuitive', 'simple']"
Usability,"Hello, ; when trying to run the examples from the User Guides in the Bloch-Redfield master equation section; ( http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) I get an error . I'm running the code in a conda environment using ipython on Windows 10, the details of the packages installed at the end of the post. To reproduce the error:; ```; import numpy as np; import matplotlib.pyplot as plt; from qutip import *. delta = 0.2 * 2*np.pi; eps0 = 1.0 * 2*np.pi; gamma1 = 0.5; H = - delta/2.0 * sigmax() - eps0/2.0 * sigmaz(); def ohmic_spectrum(w):; 	if w == 0.0: # dephasing inducing noise; 		return gamma1; 	else: # relaxation inducing noise; 		return gamma1 / 2 * (w / (2 * np.pi)) * (w > 0.0). R, ekets = bloch_redfield_tensor(H, [sigmax()], [ohmic_spectrum]). np.real(R.full()). tlist = np.linspace(0, 15.0, 1000). psi0 = rand_ket(2). e_ops = [sigmax(), sigmay(), sigmaz()]. expt_list = bloch_redfield_solve(R, ekets, psi0, tlist, e_ops). sphere = Bloch(). sphere.add_points([expt_list[0], expt_list[1], expt_list[2]]). sphere.vector_color = ['r']. sphere.add_vectors(np.array([delta, 0, eps0]) / np.sqrt(delta ** 2 + eps0 ** 2)). sphere.make_sphere(). plt.show(). output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]); ```. The code runs fine until the last line which gives the following response:; ```; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-1-79f7f2013969> in <module>; 35 plt.show(); 36; ---> 37 output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]). ~\Anaconda3\envs\qutip-env\lib\site-packages\qutip\bloch_redfield.py in brmesolve(H, psi0, tlist, a_ops, e_ops, c_ops, args, use_secular, sec_cutoff, tol, spectra_cb, options, progress_bar, _safe_mode, verbose); 196; 197 if _safe_mode:; --> 198 _solver_safety_check(H, psi0, a_ops+c_ops, e_ops, args); 199; 200 # check for type (if any) of time-dependent inputs. ~\Anaconda3\envs\qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223:55,Guid,Guides,55,https://qutip.org,https://github.com/qutip/qutip/issues/1223,2,"['Guid', 'guid']","['Guides', 'guide']"
Usability,"Hello, I want to solve problems in optomechanics with QuTip but I don't know which packages(mathmp, sympy,sympsi,..) must be used. please guide me about writing QuTip programs for optomechanical systems. also, I want to know in steady state, how I can plot a quantity(like variance) versus variables other than time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/507:138,guid,guide,138,https://qutip.org,https://github.com/qutip/qutip/issues/507,1,['guid'],['guide']
Usability,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834:52,simpl,simple,52,https://qutip.org,https://github.com/qutip/qutip/issues/1834,2,['simpl'],"['simple', 'simply']"
Usability,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:1320,guid,guide,1320,https://qutip.org,https://github.com/qutip/qutip/issues/1156,2,['guid'],"['guide', 'guide-settings']"
Usability,"Hello,; I noticed that vector_to_operator stopped working after updating to 4.5. Simple code that gives error:. ```; import qutip as qu. def zero_state_qutip(nb_qubits):; zero=qu.basis(2,0); if nb_qubits>1:; for i in range(1,nb_qubits):; zero=qu.tensor(zero,qu.basis(2,0)); return zero. nb_qubits=4. Psi=zero_state_qutip(nb_qubits). V=qu.vector_to_operator(Psi); ```. The code works fine with nb_qubits=2, but not with 4, 6 etc. The error is:. File ""qutip\superoperator.py"", line 279, in vector_to_operator; q.data = sp_reshape(op.data.T, shape[::-1]).T. File ""qutip\sparse.py"", line 135, in sp_reshape; return zcsr_reshape(A, shape[0], shape[1]). File ""qutip/cy/spconvert.pyx"", line 254, in qutip.cy.spconvert.zcsr_reshape. Exception: Total size of array must be unchanged.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204:81,Simpl,Simple,81,https://qutip.org,https://github.com/qutip/qutip/issues/1204,1,['Simpl'],['Simple']
Usability,"Hello,; I'm the Lead developer of [netket](https://github.com/netket/netket), a jax-based framework for using Machine-Learning techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:118,Learn,Learning,118,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['Learn'],['Learning']
Usability,"Hello. I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000. ; Units are µs for time (so MHz for frequency). . versions used:; ```python; matplotlib.pylab 1.16.4; qutip 4.4.1; matplotlib 3.1.1; numpy 1.16.4; scipy 1.3.1; CPython 3.7.3; IPython 7.5.0; ```. I solve with sesolve or mesolve with (|+. 1> + |0>)/sqrt(2) as initial state.; **expected:** quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>; **result:** population of |+1> goes down linearly and |0> goes up ; a few observations: ; - if I make the coefficient of Sz^2 smaller, the population diverges less ; - with less time steps but same overall propagation time, I see the divergence less obviously because I see the beginning of it; - I am aware one can somehow optimize the number of time steps but this is about the convenient settings for the next steps for me; - I was thinking of increasing floating point precision or something like that but wasn't able to find a simple way to do that in the docs. it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?; anyway, this is about the right, convenient choice of unit for us here. any idea what's wrong ?. ```python; %load_ext watermark; import numpy as np; import scipy; import matplotlib; import matplotlib.pylab as plt; import qutip; %watermark -v --iversions; %matplotlib qt. #Spin 1 operators; S1_x = 1/np.sqrt(2)*qutip.Qobj([[0,1.,0],; [1.,0,1.],; [0,1.,0]]). S1_y = 1.j/np.sqrt(2)*qutip.Qobj([[0,-1.,0],; [1.,0,-1.],; [0,1.,0]]). S1_z = qutip.qdiags([1.,0,-1.], 0). #canonical basis with corresponding projectors; canon_100 = qutip.basis(3,0) #ket |+1>; canon_010 = qutip.basis(3,1) #ket |0>; canon_001 = qutip.basis(3,2) #ket |-1>. proj100 = qutip.ket2dm(canon_100); proj010 = qutip.ket2dm(canon_010); proj001 = qutip.ket2dm(canon_001). #Hamiltonian pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085:144,simpl,simple,144,https://qutip.org,https://github.com/qutip/qutip/issues/1085,2,['simpl'],['simple']
Usability,"Hey QiTiP community,; I wanted to make a simple bloch sphere animation, but can only get one image from the save() function.; Only the first .png image has a bloch sphere in it, the others are empty. ; ..............................................................; bloch_0.png; ![bloch_0](https://cloud.githubusercontent.com/assets/8253676/5883346/bca4bdf6-a351-11e4-8d04-9f1ba385a42c.png); ..............................................................; bloch_1.png; ![bloch_3](https://cloud.githubusercontent.com/assets/8253676/5883348/bca8d08a-a351-11e4-88b6-8c97800aedc3.png); ..............................................................; bloch_2.png; ![bloch_2](https://cloud.githubusercontent.com/assets/8253676/5883349/bca9d25a-a351-11e4-8b10-eacea1b7437f.png); ..............................................................; bloch_3.png; ![bloch_1](https://cloud.githubusercontent.com/assets/8253676/5883347/bca637ee-a351-11e4-8495-b5f12557ad6d.png); .............................................................. Here is my simple piece of code mainly coped from the tutorial. ```; import numpy as np; from qutip import *; from scipy import *. b = Bloch(). for i in range(30):; print i; b.add_vectors([np.sin(i),0,np.cos(i)]); b.save(dirc='temp'); ```. I would be glad if someone could help me. ```; >>> about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0.dev-23e5259; Numpy Version: 1.8.2; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.3.1; Fortran mcsolver: False; scikits.umfpack: False; Python Version: 2.7.8; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python2.7/dist-packages/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/304:41,simpl,simple,41,https://qutip.org,https://github.com/qutip/qutip/issues/304,2,['simpl'],['simple']
Usability,"Hi QuTip team and community! I just installed QuTiP on my Mac and I am very excited to try it out. I started playing with this section of QuTiP User Guide [Plotting on the Bloch Sphere; ](http://qutip.org/docs/4.1/guide/guide-bloch.html), but encountered an error. This code works well if I run it in Python console:; ```; from qutip import *; bloch = Bloch(); bloch.show(); ```; But the following code in Python console shows an error; ```; bloch.save(); ```. ```; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/qutip/bloch.py"", line 663, in save; '.' + format); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 1834, in savefig; self.canvas.print_figure(fname, **kwargs); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2188, in print_figure; self.figure.dpi = dpi; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 436, in _set_dpi; self.set_size_inches(w, h, forward=forward); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 745, in set_size_inches; manager.resize(int(canvasw), int(canvash)); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltoni",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:149,Guid,Guide,149,https://qutip.org,https://github.com/qutip/qutip/issues/796,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"Hi again,. In the documents [there is an example](http://qutip.org/docs/4.1/guide/guide-bloch.html#animating-with-the-bloch-sphere) of how to do an animation of a Bloch sphere by saving the frames of the movie using a for loop like so:. ```python; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:76,guid,guide,76,https://qutip.org,https://github.com/qutip/qutip/issues/1106,4,"['clear', 'guid']","['clear', 'guide', 'guide-bloch']"
Usability,"Hi all, I'm learning to use this great package and I've found it very helpful, but I'm having trouble looking for thermal equilibrium density operator, $e^{-\beta H}$. There is a thermal density matrix constructor `thermal_dm` in this package but it seems to be too simple for my purpose. Any advice on how to calculate this value? Thank you all in advance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1002:12,learn,learning,12,https://qutip.org,https://github.com/qutip/qutip/issues/1002,2,"['learn', 'simpl']","['learning', 'simple']"
Usability,"Hi all,. I have a simple toy model of a 2-dim Hamiltonian. When I use; `mesolve(H, c_states[prepare], t, [Qobj([[0,0],[0,0]])], args={'tau': tau})`; I get the right result - however, if I try; `mesolve(H, c_states[prepare], t, [], args={'tau': tau})` or; `mesolve(H, c_states[prepare], t, c_ops=[], args={'tau': tau})`; the result is most definitely wrong. Any ideas?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/813:18,simpl,simple,18,https://qutip.org,https://github.com/qutip/qutip/issues/813,1,['simpl'],['simple']
Usability,"Hi all,. I'm getting to the point where I have enough of a developers' guide written, and we should start thinking about how and where to merge it in. It's currently hosted on my account at [jakelishman/qutip-devguide](https://github.com/jakelishman/qutip-devguide), with a rendered version at https://jakelishman.github.io/qutip-devguide. The section on the data layer hopefully gives quite a lot of detail on why the data layer exists, how it works, and how it's implemented. The whole data layer is still in alpha (check out the `dev.major` branch if you want to play with it, and the rest of what will become QuTiP 5.0), so some of the text will need to change, but hopefully it's now enough that if I get hit by a bus tomorrow, the work isn't incomprehensible. Any suggestions on parts to expand are welcome - either leave them in this issue, or make issues/PRs against my repository for the time being (until it's merged somewhere under QuTiP control). Clearly the documentation and notebooks sections aren't written yet, and at some point I'll migrate the packaging and distribution instructions into the dev guide too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359:71,guid,guide,71,https://qutip.org,https://github.com/qutip/qutip/issues/1359,3,"['Clear', 'guid']","['Clearly', 'guide']"
Usability,"Hi all,. I'm not sure how to do pull request in this case so let it be a new Issue. I have implemented Milstein method for solving SME for homodyne detection scheme. For my problems it works much better than the simple Euler-Maruyama method. In case of a single Wiener increment all what is required is the new rhs function (see notebook attached). For multiple Wiener increments the provided infrastructure of QuTiP is not enough. One needs to provide all of the A_ops to the rhs. The modified stochastic.py file is also attached (from qutip.stochastic import smesolve_mil). The attached Notebook contains an example of SME with an analytical solution. Which allows to test smesolver for a single quantum trajectory. The notebook and the modified stochastic.py is here:; http://db.tt/dJNjGo3g. P.S. Due to nonlinearity in the stochastic term of quantum SME the simple Euler-Maruyama scheme doesn't work properly sometimes. Even Milstein struggles. From my experience semi implicit methods help. But in order to implement it in a convenient way one needs to modify QuTiP approach to the problem. Maybe instead of rhs function it would be better to have a function which returns \rho_{n+1} instead of d\rho. It could be more flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:212,simpl,simple,212,https://qutip.org,https://github.com/qutip/qutip/issues/35,2,['simpl'],['simple']
Usability,"Hi all,; I am trying to reproduce the results of the photocurrent solver for open systems with my own methods, but I see some differences in the dynamics. In the [documentation webpage](http://qutip.org/docs/latest/guide/dynamics/dynamics-photocurrent.html#open-system) to what L_sys is, and why it should be corrected with that effective term. Can someone please give provide a reference for that statement?. Furthermore, are C_n in that equation equivalent to the sc_ops in Qutip?. Thank you for your help!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163:215,guid,guide,215,https://qutip.org,https://github.com/qutip/qutip/issues/1163,1,['guid'],['guide']
Usability,"Hi!; I was thinking to use Floquet Formalism to solve some time-dependent problem.; So I firstly try the case in Users Guide, but some unexpected errors occurred. ---------------------------------------------------------------------------; ```; %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; delta=0.2*2*np.pi;; eps0=1.0*2*np.pi;; A=2.5*2*np.pi;; omega=1.0*2*np.pi;; H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); H1=A/2.0*sigmaz(); args={'w':omega}; H=[H0,[H1,'sin(w*t)']]; T=2*np.pi/omega; f_modes_0, f_energies = floquet_modes(H, T, args); ```. Here is the error information：. ---------------------------------------------------------------------------; ```; DistutilsPlatformError Traceback (most recent call last); F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:119,Guid,Guide,119,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['Guid'],['Guide']
Usability,"Hi, I've been starting to learn qutip to write my dissertation on Quantum computing. I was running the script on Vacuum Rabi oscillations in the Jaynes-cummings model from the example section on [qutip.com](http://qutip.com/). Originally it was working correctly. However, I have come back to it after about a month and I have run into an issue. When I run the code copied straight from the website it returns this error . ""ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". so I increase the nsteps to 100000:; output = mesolve(H, psi0, tlist, c_op_list, [a.dag() * a, sm.dag() * sm], options = Options(nsteps= 10000)). however I get an output that is completely different to what I should be getting. What I should be getting: . ![image](https://user-images.githubusercontent.com/75099190/186995018-26029946-bba2-4b71-888d-74b88361c832.png). What my code is outputting:. ![image](https://user-images.githubusercontent.com/75099190/186995092-75b9d285-f854-487f-bd11-7dffc19d57cb.png). Do you have any idea what could be causing this error?; Any help would be hugely appreciated . my code:. import matplotlib.pyplot as plt; import numpy as np; from qutip import *. wc = 1.0 * 2 * np.pi # cavity frequency; wa = 1.0 * 2 * np.pi # atom frequency; g = 0.05 * 2 * np.pi # coupling strength; kappa = 0.005 # cavity dissipation rate; gamma = 0.05 # atom dissipation rate; N = 15 # number of cavity fock states; n_th_a = 0.0 # temperature in frequency units; use_rwa = True. tlist = np.linspace(0, 25, 100). psi0 = tensor(basis(N, 0), basis(2, 1)) # start with an excited atom. a = tensor(destroy(N), qeye(2)); sm = tensor(qeye(N), destroy(2)). if use_rwa:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() * sm + a * sm.dag()); else:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() + a) * (sm + sm.dag()). c_op_list = []. rate = kappa * (1 + n_th_a); if rate > 0.0:; c_op_list.append(np.sqrt(rate) * a). rate = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987:26,learn,learn,26,https://qutip.org,https://github.com/qutip/qutip/issues/1987,1,['learn'],['learn']
Usability,"Hi,. I cannot find any doc (except the source code itself) about which progress bar are available and how to use them. Especially, the only references to the progress bar in [the doc](http://qutip.org/docs/3.1.0/) are the options for `mesolve` etc. I think it could be really useful to document it, or provide an iPython notebook making use of it. EDIT: Plus the docstring of `mesolve` function (for instance) seems to contradict the first lines of the function:. ```; progress_bar: BaseProgressBar; Optional instance of BaseProgressBar, or a subclass thereof, for; showing the progress of the simulation.; ```. versus. ``` python; if progress_bar is None:; progress_bar = BaseProgressBar(); elif progress_bar is True:; progress_bar = TextProgressBar(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/444:71,progress bar,progress bar,71,https://qutip.org,https://github.com/qutip/qutip/issues/444,2,['progress bar'],['progress bar']
Usability,"Hi,. I have been trying to use `qutip.floquet.floquet_master_equation_steadystate` method to get the steadystate of my system, but the docstring is not super useful. From the docstring, I guess I should call it as `qutip.floquet.floquet_master_equation_steadystate(H, A)` where. * `H` is my (time-dependent) hamiltonian, similar as the one used in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html#floquet-formalism-in-qutip.; * `A` is the [`A` matrix output](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L587-L588) from `floquet_master_equation_rates` call. I think I missed something as I am getting an error; ```; TypeError: Solving for steady states requires Liouvillian (super) operators; ```; from https://github.com/qutip/qutip/blob/master/qutip/steadystate.py#L224. Additionnally, I think there is a much easier way to find the steadystate of such a system, using something like (not really well written nor optimised):. ```python; def floquet_master_equation_steadystate2(A):; """"""; TODO. Parameters; ----------. A : TODO; A matrix used to build the master equation.; """"""; B = np.zeros_like(A); N = A.shape[0]; for a in range(N):; for b in range(N):; # Convergence of off-diagonal terms in density matrix to 0; assert(-0.5 * np.sum(A[:, a] + A[:, b]) < 0); # Diagonal terms of density matrix; if a != b:; B[a, b] = A[a, b]; else:; B[a, b] = -1.0 * np.sum([; A[nu, a] for nu in range(N) if nu != a]; ); eigval, eigvec = Qobj(B).eigenstates(); assert(np.isclose(eigval[-1], 0, atol=1e-15)); return eigvec[-1] * eigvec[-1].dag(); ```. which basically looks for the eigenvector associated with 0 eigenvalue of a matrix derived from `A`, which is basically coming directly from equation 251 of [Gri98](http://qutip.org/docs/latest/biblio.html#gri98).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/768:377,guid,guide,377,https://qutip.org,https://github.com/qutip/qutip/issues/768,1,['guid'],['guide']
Usability,"Hi,. I was trying to run some simulations with [Floquet formalism in Qutip](http://qutip.org/docs/4.1/guide/dynamics/dynamics-floquet.html) in a Jupyter notebook, when I ran into a ""The kernel appears to died unexpectedly, it will restart"" error message. I tried to understand what is happening, and it seems it is due to a segmentation fault. It happens also when run in CPython 3.5.2. `gdb` was not super useful, and I could not get it to output any interesting backtrace. Manually tracking the issue down, it seems that `qutip.floquet.floquet_modes` call `qutip.propagator.propagator` which itself calls `sesolve`. As far as I could track the error down for the moment, it seems to happen in [this call](https://github.com/qutip/qutip/blob/master/qutip/propagator.py#L159-L160). My code is quite lengthy, and I did not yet manage to isolate a small snippet to reproduce the error :/ Not sure what is the best way to debug this either :/. ```python; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 0.19.1; Cython Version: 0.27.1; Matplotlib Version: 2.0.0; Python Version: 3.5.2; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip; ```. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/761:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/761,1,['guid'],['guide']
Usability,"Hi,. I was writing a simple code for a time dependent driving of a two level atom with the excited state decay and encountered the following problem: If I evolve the system using mesolve for particular time dependence of my driving field, namely if the evolution time is set to be from t = 0 to t = 3.5 in the units of 1/(Rabi frequency) and the driving is only present between t = pi/2 and t = pi, I get expected results if I do not include any collapse operators (using []), however as soon as I use the usual collapse operator corresponding to the excited state decay it gives me for all the time the initial values of the quantities. It happens even if I set the decay rate to zero! Also, mcsolve works fine in both cases.; Here is the code that I use:; ```; import numpy as np; import pylab as plt; import scipy as scipy; from qutip import *. #System parameters; Omega = 1; Gamma = 0.1. g = basis(2,0); e = basis(2,1); sgg = g * g.dag() #ground state population; see = e * e.dag() #excited state population; sge = g * e.dag() #atomic coherence sigma_ge. #Driving Hamiltonian; H1 = Omega * (sge + sge.dag()). #Time dependence of the drive; def H1_coeff(t,args):; if t > np.pi:; c =0; elif t >= np.pi/2:; c = 1; else:; c = 0; return c. #Complete Hamiltonian; H = [[H1, H1_coeff]]. #Time; tspan = np.linspace(0,3.5,500). #initial state; psi0 = g. #collapse operators; c_ops = [np.sqrt(Gamma) * sge]. #calculated expectation values; e_ops = [sgg, see]; results = mesolve(H, psi0, tspan, c_ops, e_ops). #plotting the results; fig, ax = plt.subplots(1,1); ax.plot(tspan, results.expect[0]); ax.plot(tspan, results.expect[1]); plt.show(); ```; And here is the information about the packages that I'm using; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.1; Scipy Version: 0.19.1; Cython Version: 0.26; Matplotlib Version: 2.0.2; Python Version: 3.6.2; Number of ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771:21,simpl,simple,21,https://qutip.org,https://github.com/qutip/qutip/issues/771,1,['simpl'],['simple']
Usability,"Hi,. I'm new to the project as a user. I am trying to solve some problems involving multiple baths with Floquet formalism. Just wondering if you already implemented it in your current version? . Notice this just now in the documentation: http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-floquet.html where 'Currently the qutip.floquet.fmmesolve can only accept a single environment coupling operator and spectral-density function.' But I think it's good and not so difficult to come up with a general solvers where multiple baths are supported by myself. Is it okay if I contribute to this as well?. Cheers,; Tianqi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1464:266,guid,guide,266,https://qutip.org,https://github.com/qutip/qutip/issues/1464,1,['guid'],['guide']
Usability,"Hi,. Is there a reason for not using aspect ratio ""equal"" for the resulting plot of the `plot_wigner` function? Wigner plots are much more readable when using such settings, in my opinion. Thanks. EDIT: I can make a PR for this, but would rather have some feedback before doing it :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/539:256,feedback,feedback,256,https://qutip.org,https://github.com/qutip/qutip/issues/539,1,['feedback'],['feedback']
Usability,"Hi,. It seems there are some errors in the Floquet `mesolve`-equivalent function, which are not seen when considering a simple qubit. Consider for instance an harmonic oscillator with a drive, which should converge towards a coherent state:. ```python; %matplotlib notebook. import numpy as np; from qutip import (basis, destroy, expect, fsesolve, sigmax, sigmaz, rand_ket, num,; mesolve); from qutip.floquet import (floquet_modes, floquet_modes_table,; floquet_modes_t_lookup, fmmesolve). # Parameters; wc = 1.0 * 2 * np.pi; wp = 1.5 * 2 * np.pi; T = 2 * np.pi / wp; N = 20; epsilon_p = np.sqrt(2) * np.sqrt(8) * (wp - wc). psi0 = basis(N,0); a = destroy(N); H = [; wc * a.dag() * a,; [1.0j * epsilon_p * (a.dag() - a), 'cos(wp * t)']; ]. args = {; 'wp': wp; }. # noise power spectrum; gamma1 = 0.05; def noise_spectrum(omega):; return 0.5 * gamma1 * omega / (2 * np.pi). tlist = np.linspace(0, 5 / gamma1, 100). # find the floquet modes for the time-dependent hamiltonian; f_modes_0, f_energies = floquet_modes(H, T, args). # precalculate mode table; f_modes_table_t = floquet_modes_table(f_modes_0, f_energies,; np.linspace(0, T, 500 + 1),; H, T, args). # solve the floquet-markov master equation; output = fmmesolve(H, psi0, tlist,; [a], [], [noise_spectrum], T, args). # For reference: calculate the same thing with mesolve; output_ref = mesolve(H, psi0, tlist, [np.sqrt(gamma1) * a],; [], args); ```. `output_ref.states[-1]` is a coherent state as expected. ![image png 1200 x 1200 pixels - redimensionnee 79](https://user-images.githubusercontent.com/3856586/31828448-433fd44a-b588-11e7-9305-e44f88ed8c1b.png). But `output.states[-1]` is far from being a coherent state. ![image png 1200 x 1200 pixels](https://user-images.githubusercontent.com/3856586/31828469-56631e42-b588-11e7-8950-0ca04ce3c70c.png). I tried to debug it, without real success for now :/. EDIT: Might be partially related to #624.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772:120,simpl,simple,120,https://qutip.org,https://github.com/qutip/qutip/issues/772,1,['simpl'],['simple']
Usability,"Hi,. There is a [manual integration](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L602-L624) using rectangles method in `qutip.floquet` file which sometimes fail. Problem is that the number of timesteps, `nT`, is hardcoded and not accessible to the user. In my case, `nT = 100` does not seem to be enough and the integral is wrong. A quick and dirty fix is to have an extra `nT=100` keyword argument to `floquet_master_equation_rates`, so that user can overload it. Still, it does not seem to be the most efficient way of doing it. I have a quick fix I can contribute which is using `scipy.integrate.simps` instead. This requires keeping an array of values to integrate in memory (which is less memory-efficient) but I could keep `nT=100` and get the correct integral by using this method. I guess the best option would be to use [`scipy.integrate.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad), as it uses an adaptive algorithm. I can contribute a fix for this, just looking for feedback on the best available option :). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/767:1056,feedback,feedback,1056,https://qutip.org,https://github.com/qutip/qutip/issues/767,1,['feedback'],['feedback']
Usability,"Hi,; I just recently installed qutip on Canopy using a Windows Binary. When I try to run one of the tests, e.g. test_wigner.py, I get this error:. ---. AttributeError Traceback (most recent call last); C:\Users\David Feng\Desktop\qutip-3.1.0\qutip\tests\test_wigner.py in <module>(); 37 from numpy.testing import assert_, run_module_suite, assert_equal; 38 ; ---> 39 from qutip.states import coherent, fock; 40 from qutip.wigner import wigner; 41 from qutip.random_objects import rand_dm, rand_ket. C:\Users\David Feng\Desktop\qutip-3.1.0\qutip__init__.pyc in <module>(); 60 qutip.settings.ipython = True; 61 except:; ---> 62 qutip.settings.ipython = False; 63 ; 64 # -----------------------------------------------------------------------------. AttributeError: 'module' object has no attribute 'settings' . The AttributeError also appears when I simply try to import qutip from the command line. I'm not too familiar with Python scripting so any assistance on the matter would be greatly appreciated. Thank you!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469:848,simpl,simply,848,https://qutip.org,https://github.com/qutip/qutip/issues/469,1,['simpl'],['simply']
Usability,"I am running an iterative method that requires calling mesolve many times.; At some point, the program crashes. It seems that every time mesolve is called, the list of arguments passed to the gcc complier grows. Eventually that list is too big for gcc and returns errors and stops the program. I wrote a simplified code that eventually leads to that problem. It took close to 2 hours to reproduce, and but maybe you can figure out a way to reach that point faster (faster calls ? more arguments passed to gcc to make it reach that point faster?). The screen capture shows how many calls were required in my case, how many seconds had elapsed since the program started, as well as how the error manifests. [test_qutip_error.txt](https://github.com/qutip/qutip/files/2973153/test_qutip_error.txt); <img width=""982"" alt=""Screen Shot"" src=""https://user-images.githubusercontent.com/28269924/54465696-b1034400-4739-11e9-91ab-be1fff21f057.png"">. I experienced this problem a while ago, both on my laptop and amazon instances, on Qutip 4.2.0 with Python 2.7.15. Both with the Anaconda and pip installs. Are there any ways to fix this? I need this for my research. Thank you very much !",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966:304,simpl,simplified,304,https://qutip.org,https://github.com/qutip/qutip/issues/966,1,['simpl'],['simplified']
Usability,"I am trying to create an exponential of some operators multiplied by time-dependent functions. I am using the[ standard](http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html) method to define the time-dependent operators. However, the expm method cannot exponentiate this list format. Is there another way to obtain the exponential of quantum operators multiplied by time-dependent coefficients in qutip?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308:150,guid,guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/1308,1,['guid'],['guide']
Usability,"I am trying to learn to use qutip and I made a local environment. As per the instruction guide, I ran the qutip testing environment and got the following: . ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.4.1; Numpy Version: 1.17.3; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.3; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanholman/opt/anaconda3/envs/qutip/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:15,learn,learn,15,https://qutip.org,https://github.com/qutip/qutip/issues/1124,2,"['guid', 'learn']","['guide', 'learn']"
Usability,"I am trying to perform this simple operation <a href=""https://www.codecogs.com/eqnedit.php?latex=(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" title=""(H^{\otimes 2} \otimes I^{\otimes 2} ) \times \psi"" /></a>; where ; <a href=""https://www.codecogs.com/eqnedit.php?latex=H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" title=""H = \frac{1}{\sqrt{2}} \times \begin{bmatrix} 1 & 1\\ 1 & -1 \end{bmatrix} , I = \begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix}"" /></a>; and ; <a href=""https://www.codecogs.com/eqnedit.php?latex=\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" title=""\psi = \left|0\right\rangle^{\otimes 4}"" /></a>; I do that as follow: ; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); ```; and i got the following : . ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); Traceback (most recent call last):. File ""<ipython-input-160-ae66af2f799c>"", line 1, in <module>; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1). File ""/home/user/anaconda2/envs/Quantu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:28,simpl,simple,28,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['simpl'],['simple']
Usability,"I am trying to use `mesolve` to solve an annealing problem using density matrices. The Hamiltonian evolves with time, $H(t) = \dfrac{t}{T}H_p + (1-\dfrac{t}{T})H_d,~ 0\leq t \leq T$, and I aim to solve the corresponding master equation using qutip, $\hat{\dot{\rho}} = i\left[\hat{H},\hat{\rho}\right]$. I have been doing this with a state vector approach, and the code works fine. With my knowledge of density matrices, I would assume that I can simply replace $\ket{\psi}$ with $\hat{\rho} = \ket{\psi}\bra{\psi}$, and use this as my initial state in `mesolve`. This would obtain density matrices for `sln.states` at each time step, however this seems not to be the case. Code:; ```; from bacon import bacon; import qutip as qt; import numpy as np. #inputs into bacon; spin_coeff = [; 4.8,; 9.5,; 4.82,; ]. coupling_coeff = [; 6.4,; 0,; 6.4; ]. H_input = bacon(; 3,; spin_coeff,; coupling_coeff; ). Hd = H_input.driver(); Hp = H_input.problem(). def init_superpsn(n):; '''; n - number of qubits; '''; state = np.ones((2**n), dtype = int)/np.sqrt(2**n); state = qt.Qobj(state); return state. #forming density matrix; initial_state = init_superpsn(3) * init_superpsn(3).dag(); #commenting out this line gives a different error; #initial_state = qt.Qobj(initial_state, dims = [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]]). grain = 100; anneal_time = 100. # initial coefficients; def d_coeff(t,params): ; return (1-t/params[""T""]); def p_coeff(t,params):; return (t/params[""T""]). Hs = [[Hd, d_coeff], [Hp, p_coeff]]; # ""writes down"" hamiltonian at time t ; H_dyn = qt.QobjEvo(Hs,args={""T"":anneal_time}) ; # solves SE for a particular hamiltonian that we ""wrote down""; s = np.linspace(0, anneal_time, grain); sln = qt.mesolve(H_dyn, initial_state, s) ; states0 = sln.states; ```. Bacon is a class I wrote that forms $H_d$ and $H_d$ Hamiltonians using tensor products. `Hp` is ; ```; Qobj data =; [[ 31.92 0. 0. 0. 0. 0. 0. 0. ]; [ 0. 9.48 0. 0. 0. 0. 0. 0. ]; [ 0. 0. -12.68 0. 0. 0. 0. 0. ]; [ 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989:447,simpl,simply,447,https://qutip.org,https://github.com/qutip/qutip/issues/1989,1,['simpl'],['simply']
Usability,"I am trying to use code from User Guide's [Directly Generating an Animation section](http://qutip.org/docs/4.1/guide/guide-bloch.html?highlight=funcanimation#directly-generating-an-animation):. ```; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); ```. I get the following error:; ```; Traceback (most recent call last):; File ""bloch_test.py"", line 59, in <module>; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); TypeError: save() got an unexpected keyword argument 'clear_temp'; ```. It looks like OpenDrift may have had the same or similar issue:; https://github.com/OpenDrift/opendrift/issues/9. My hypothesis is that QuTip needs to be adapted to the newer version of Matplotlib.; According to ; ```; from qutip import *; about(); ```; I use Matplotlib version: 2.1.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/798:34,Guid,Guide,34,https://qutip.org,https://github.com/qutip/qutip/issues/798,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"I am using Anaconda on windows 10 and installed qutip from conda-forge package, I don't have VS-15 on my system, Is it possible that that I could run qutip with VS-15 runtime liberaries instead of complete installation of visual studio. If it is possible please guide me.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826:262,guid,guide,262,https://qutip.org,https://github.com/qutip/qutip/issues/826,1,['guid'],['guide']
Usability,"I can't quite figure out if this is simply due to the DeprecationWarnings or something else but all tests are failing due to `atol` not being set for the gmres solver. I will try to set `atol` and check if the tests pass. Error log: https://api.travis-ci.org/v3/job/379109482/log.txt.; ```; scipy/sparse/linalg/isolve/iterative.py:2: DeprecationWarning: scipy.sparse.linalg.bicgstab called without specifying `atol`. The default value will be changed in a future release. For compatibility, specify a value for `atol` explicitly, e.g., ``bicgstab(..., atol=0)``, or to retain the old behavior ``bicgstab(..., atol='legacy')``. ```. ```; ..................................................; ======================================================================; ERROR: Steady state: Thermal qubit - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/Users/shahnawaz/dev/qutip/qutip/tests/test_steadystate.py"", line 145, in test_qubit_power_gmres; rho_ss = steadystate(H, c_op_list, method='power-gmres'); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 298, in steadystate; return _steadystate_power(A, ss_args); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 863, in _steadystate_power; v = v / la.norm(v, np.inf); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/scipy/linalg/misc.py"", line 137, in norm; a = np.asarray_chkfinite(a); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/numpy/lib/function_base.py"", line 1233, in asarray_chkfinite; ""array must not contain infs or NaNs""); ValueError: array must not contain infs or NaNs. ----------------------------------------------------------------------; Ran 561 tests in 576.175s. FAILED (SKIP=19, errors=1); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/862:36,simpl,simply,36,https://qutip.org,https://github.com/qutip/qutip/issues/862,1,['simpl'],['simply']
Usability,"I encountered a numerical error while simulating a Ramsey experiment using mesolve in QuTiP. Specifically, the simulation shows unexpected discontinuities and unphysical results in the oscillatory pattern. I have highlighted these problematic points with red circles in the plot for clarity.; <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/e7a6fb3e-c9e8-4cf9-96ba-aefaf7e9a554"">; </div>. To make the problem clearer, I simplified the simulation model. The Hamiltonian used is:. $$ H_{\rm rot} = {\rm Re}[\Omega(t)]\frac{\sigma_x}{2} + {\rm Im}[\Omega(t)]\frac{\sigma_y}{2} $$. where $\Omega(t)$ is a time-dependent coefficient. The tlist and coefficients are both numpy arrays. Providing the entire code that generates these coefficients would be lengthy, so I preselected a few sets of coefficients and tlist where the issue is present. Specifically, the problematic data is from indices 92, 93, and 94, which have been highlighted in the plot. These are stored using np.savetxt. Below is the plot of the coefficients, showing that they are mainly real and differ only slightly. ```; plt.figure(); ax0 = plt.subplot(221); ax1 = plt.subplot(222). for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:460,clear,clearer,460,https://qutip.org,https://github.com/qutip/qutip/issues/2552,2,"['clear', 'simpl']","['clearer', 'simplified']"
Usability,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:9,simpl,simple,9,https://qutip.org,https://github.com/qutip/qutip/issues/1900,2,['simpl'],['simple']
Usability,"I have not been using qutip for a long time yet, so I apologize in case I am missing something stupid. I'm solving a simple problem with t-dependent Hamiltonian. I have simplified up to the point where the solution should actually just be a constant occupation of ground and first excited state. Here is the setup:. ``` python; from qutip import *; from pylab import *. dim = 40 # number of harmonic oscillator states kept in decomposition; # -- always need to check convergence w.r.t. this. E_j = 20.0 # Josephson energy. a = destroy(dim) # definition of the annihilation operator via qutip. exponent = 1j * (a + a.dag()) # argument of the matrix exponential; exp_iphi = exponent.expm(); cos_phi = 0.5*(exp_iphi + exp_iphi.dag()). H_0 = a.dag() * a # Hamiltonian of LC harmonic oscillator; h_j = - cos_phi # Hamiltonian for the Josephson tunneling contribution; prefactor E_j(t) to be provided separately . energies, states = (H_0 + E_j * h_j).eigenstates() . jump_op_list = [] # no jump operators. # monitor projectors onto the ground and first excited eigenstates; projector0 = states[0] * states[0].dag(); projector1 = states[1] * states[1].dag(). monitor_ops = [projector0, projector1]. psi_0 = states[0] # initial state is the ground state . # tlist = np.linspace(0, Delta_t_min + Delta_t_max + 6*dt, 300) # evenly-spaced time values; tlist = np.linspace(0, 0.5, 300) # evenly-spaced time values; ```. The crucial piece comes now:. ``` python; timefunc_string1 = '20.0'; H1 = [H_0, [h_j, timefunc_string1]]; odesolution1 = mcsolve(H1, psi_0, tlist, jump_op_list, monitor_ops). # NOTE: ONLY ""DIFFERENCE"" W.R.T. PREVIOUS EXAMPLE IS ADDING ZERO!; timefunc_string2 = '0.0*20.0 + 20.0'; H2 = [H_0, [h_j, timefunc_string2]]; odesolution2 = mcsolve(H2, psi_0, tlist, jump_op_list, monitor_ops). plot(tlist, odesolution1.expect[0], tlist, odesolution1.expect[1], lw=2); legend(('Ground state','1st exc.')); ylabel('Occupation probability'); xlabel('Time'). show(). plot(tlist, odesolution2.expect[0], tl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/215:117,simpl,simple,117,https://qutip.org,https://github.com/qutip/qutip/issues/215,2,['simpl'],"['simple', 'simplified']"
Usability,"I have noticed that when I try to use the `.dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422:255,simpl,simple,255,https://qutip.org,https://github.com/qutip/qutip/issues/1422,1,['simpl'],['simple']
Usability,"I have recently started to use QuTiP to compute unitary and Hamiltonian evolutions. Most of the calculations involved Hamiltonians (or circuits) defined on separate regions of the Hilbert space plus some other Hamiltonians used to couple the different systems together. When performing the simulations I have found that the requirement that Qobjs must have the same dims attribute to be summed or multiplied tends to make the code quite convoluted (the convolution might also come from my inexperience with QuTiP). For example (I will use circuits but the same issues applies to Hamiltonians). Let |psi> be a random 4-qubit state and C a random unitary on the first two qubits. In order to compute C|psi> one must specify the tensor structure of the random objects and not use qeye(8) but the tensor product of three qeye(2):. `C = tensor(rand_unitary_haar(4, dims = [[2,2],[2,2]]), tensor(qeye(2),qeye(2),qeye(2)))`; `psi = rand_ket(32, dims = [[2,2,2,2,2], [1,1,1,1,1]])`. I understand that the tensor product structure in the Qobj class might yield lots of advantages but it might be interesting to consider if in some cases it is possible to allow the summation or multiplication of Qobs of different dims but with the same shape. In this case, the above example would simplify to:. `C = tensor(rand_unitary_haar(4), qeye(8))`; `psi = rand_ket(32)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1253:1273,simpl,simplify,1273,https://qutip.org,https://github.com/qutip/qutip/issues/1253,1,['simpl'],['simplify']
Usability,"I have simple code for Time evaluation, with ```mesolve``` and ```sesolve```I consider two time list as``` t1=[0,5,10]``` and ```t2=[0,10]```.But I get different states in``` t=10``` in two case . ```python; from qutip import*; import numpy as np; H= 2*np.pi * 0.1 * sigmax(); psi0 = basis(2, 0); t1=[0,5,10]; t2=[0,10]; result1 = sesolve(H, psi0, t1); result2 = sesolve(H, psi0, t2); r1=result1.states[2]; r2=result1.states[1]; if r1==r2:; print('True'); else:; print('False'). ```; If you run code you get ```False```. This difference between to case is ```1.1620088200000005e-6j``` but it's important in many context such as measure entanglement in general Form.; Best",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1686:7,simpl,simple,7,https://qutip.org,https://github.com/qutip/qutip/issues/1686,1,['simpl'],['simple']
Usability,"I just updated to qutip 4.1.0 on archlinux and now code that ran fine before simply fails. The smallest example I managed to boil it down to is multiplying a daggered state with an operator:; ```; import qutip as qt; import numpy as np. N = 10; x = qt.Qobj(np.ones(N, complex)/(N**(1/2))); op = qt.destroy(N) + qt.create(N). for i in range(10):; print(x.dag()*op); ```; which randomly yields different results, e.g.; ```; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+241j; 5.37624943e+241 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; 0.94868330+0.j ]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; 0.94868330+0.j ]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +0.00000000e+000j 0.00000000e+000 +5.29328215e+180j; 5.29328215e+180 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+24",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/681:77,simpl,simply,77,https://qutip.org,https://github.com/qutip/qutip/issues/681,1,['simpl'],['simply']
Usability,"I ran into this while working on a different project, but tried to simplify the bug in another simple [example](http://nbviewer.ipython.org/github/ComradeVVA/qutip/blob/master/time_dep_supers.ipynb). It compares some of the ways to input the same thing, with the last part (which uses list callback format) obtaining different results. Thanks to @krastanov for encouraging me to submit my first bug report.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/226:67,simpl,simplify,67,https://qutip.org,https://github.com/qutip/qutip/issues/226,2,['simpl'],"['simple', 'simplify']"
Usability,"I try to run the code for finding floquet energies from the qutip user guide. . ```python; import numpy as np; from qutip import *; import matplotlib.pyplot as plt. delta = 0.2 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 2.5 * 2*np.pi; omega = 1.0 * 2*np.pi; H0 = - delta/2.0 * sigmax() - eps0/2.0 * sigmaz(); H1 = A/2.0 * sigmaz(); args = {'w': omega}; H = [H0, [H1, 'sin(w * t)']]; T = 2*pi / omega; f_modes_0, f_energies = floquet_modes(H, T, args); f_energies; ```. I got the following error . ```text; File ""<ipython-input-6-76f4206b44f0>"", line 1, in <module>; runfile('C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py', wdir='C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations'). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 827, in runfile; execfile(filename, namespace). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 110, in execfile; exec(compile(f.read(), filename, 'exec'), namespace). File ""C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py"", line 27, in <module>; f_modes_0, f_energies = floquet_modes(H, T, args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\floquet.py"", line 102, in floquet_modes; U = propagator(H, T, [], args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\propagator.py"", line 186, in propagator; _safe_mode=False). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 157, in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 189, in _sesolve_QobjEvo; H_td.compile(omp=nthread). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207:71,guid,guide,71,https://qutip.org,https://github.com/qutip/qutip/issues/1207,1,['guid'],['guide']
Usability,"I was trying to see the phase transition of magnetization of a transverse Ising model, and I have the following graph. The magnetization changes unusually rapidly under the change of magnetic field and, I don't have this problem using my own library. Since the code I wrote is extremely simple and there is no error message, I wonder do you possibly have encountered the similar issues and have some suggestions on what it happens. Here is the code, and the graph. ----------------------------------------------------------; harray = np.zeros(11); for i in range(11):; harray[i] = 0.0001 * i; ; #print harray; ; marray4 = np.zeros(11). Mx = tensor(sigmaz(),identity(2),identity(2),identity(2))\; + tensor(identity(2),sigmaz(),identity(2),identity(2))\; + tensor(identity(2),identity(2),sigmaz(),identity(2))\; + tensor(identity(2),identity(2),identity(2),sigmaz()). earray4 = np.zeros(11); ; for ii in range(0, 11):; ; H = -(tensor(sigmaz(),sigmaz(),identity(2),identity(2)) \; + tensor(identity(2),sigmaz(),sigmaz(),identity(2)) \; + tensor(identity(2),identity(2),sigmaz(),sigmaz()) \; + tensor(sigmaz(),identity(2),identity(2),sigmaz())) \; - harray[ii]*(tensor(sigmax(),identity(2),identity(2),identity(2))\; + tensor(identity(2),sigmax(),identity(2),identity(2))\; + tensor(identity(2),identity(2),sigmax(),identity(2))\; + tensor(identity(2),identity(2),identity(2),sigmax())); . marray4[ii] = expect(Mx, H.eigenstates()[1][0]); ; plt.plot(harray, marray4, 'o-'); plt.show(). ![screen shot 2018-02-05 at 11 59 45 am](https://user-images.githubusercontent.com/35711575/35817669-17d7afe2-0a6c-11e8-859f-6ae1d686a7fe.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/811:287,simpl,simple,287,https://qutip.org,https://github.com/qutip/qutip/issues/811,1,['simpl'],['simple']
Usability,"I've been playing around with larger systems recently; when I started out ptrace had a memory issue and couldn't handle what I was doing, so I had written a home-made version to do it. Recently I ended up doing the ptrace with the fixed built-in function and I found it to be much slower. I did some testing with my new function. At least on the machine I'm running on, with 9+ qubits it's about 10x faster for calculating a partial trace on a density matrix. If you're starting out with a ket, you can go even faster, an additional 5x improvement: (test code below); ```; Running time (ms/trace); 2 3 4 5 6 7 8 9 10 qubits; ptrace (dm) 0.4 0.3 0.3 0.3 0.6 1.9 6.6 33.4 137.9; new func (dm) 0.5 0.4 0.4 0.4 0.5 0.7 1.0 2.8 13.1 ; ptrace (ket) 0.6 0.5 0.5 0.5 0.9 2.7 8.5 37.2 167.7; new func (ket) 0.5 0.4 0.4 0.4 0.5 0.6 0.9 1.0 3.2 ; sum((rho-rho).norm()); dm 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ket 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ```. My new version is pretty simple, using numpy's built-in ndarray routines. I've looked at the code for ptrace and it's a bit opaque to me; at the moment I don't feel quite up to modifying it, so I'm just putting up the code I've used instead of doing a pull request. My new function is here:; ```; def ptracealt(rho,qkeep) :; rd = rho.dims[0]; nd = len(rd); qkeep = list(sort(qkeep)); dkeep = (np.array(rd)[qkeep]).tolist(); qtrace = list(set(np.arange(nd))-set(qkeep)); dtrace = (np.array(rd)[qtrace]).tolist(); if isket(rho) :; vmat = (rho.full(); .reshape(rd); .transpose(qkeep+qtrace); .reshape([prod(dkeep),prod(dtrace)])); rhomat = vmat.dot(vmat.conj().T); else :; rhomat = np.trace(rho.full(); .reshape(rd+rd); .transpose(qtrace+[nd+q for q in qtrace]+qkeep+[nd+q for q in qkeep]); .reshape([prod(dtrace),prod(dtrace),prod(dkeep),prod(dkeep)])); return Qobj(rhomat,dims=[dkeep, dkeep]); ```; and the test code here: ; ```; Nqmax=10; ntest = 100; trdiff = np.zeros([2,Nqmax-1]); ttr = np.zeros([4,Nqmax-1]); for nd in range(2,Nqmax+1) :; r0 = [ rand_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:970,simpl,simple,970,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['simpl'],['simple']
Usability,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1540:545,guid,guide,545,https://qutip.org,https://github.com/qutip/qutip/issues/1540,2,['guid'],['guide']
Usability,"Implements the changes mentioned in #1203. The `qutip.graph` functions are pure mathematical functions which are beyond the purview of the package. Most of them have already been merged into `scipy.sparse.csgraph`, so we now move to using those and mark the functions as deprecated. Only two functions are actually used, and they're not even currently tested. `weighted_bipartite_matching` is not present in `scipy`, but is still marked as deprecated because we can move it into being an internal-only function, or simply remove the code that depends on it since those paths are not tested. This will allow the removal of a good amount of Cython code, and simplify maintenance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1206:515,simpl,simply,515,https://qutip.org,https://github.com/qutip/qutip/pull/1206,2,['simpl'],"['simplify', 'simply']"
Usability,Improve description of random number generation in mcsolve guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1677:59,guid,guide,59,https://qutip.org,https://github.com/qutip/qutip/pull/1677,2,['guid'],['guide']
Usability,Improve setting explanation in the guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2403:35,guid,guide,35,https://qutip.org,https://github.com/qutip/qutip/pull/2403,2,['guid'],['guide']
Usability,"In all my recent PR branches many commits are shown. I think these date back to when we started Squash & Merge as our policy. The same policy is in use on our conda-forge/qutip-feedstock but I don't find this issue there. I did a lot of reading, but could not find a nice simple way to stop this happening. Do we know why this is happening? I see @nonhermitian has a similar string of old commits on his PR branches too. I see we have a new 'Rebase and Merge' option for merging PRs now. Do we think we should be using this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/672:272,simpl,simple,272,https://qutip.org,https://github.com/qutip/qutip/issues/672,1,['simpl'],['simple']
Usability,"In certain circumstances, `zcsr_isherm` can give a `False` negative. This is usually masked by the `auto_tidyup` option being turned on. Reproduce:; ```python; >>> import numpy as np; >>> import scipy.sparse; >>> import qutip; >>> x = scipy.sparse.csr_matrix(np.array([[1, 1e-15j], [0, 1]])); >>> bool(qutip.cy.spmath.zcsr_isherm(x, 1e-12)); False; ```; Up to the tolerance specified (`1e-12`), the given matrix _is_ Hermitian, so it should return `True`. This happens when a small non-zero value (lower than the tolerance) is compared to a zero. This is because the structure test in `zcsr_isherm` assumes that for Hermicity to hold, there _must_ always be an explicitly stored corresponding element for each entry, however clearly this isn't always the case. It hasn't appeared before because we always have `auto_tidyup` turned on with a sufficiently large tolerance that these values would be removed by almost all operations which could have introduced this disparity (mostly matrix multiplication). (I'll fix this on both the `master` branch and on `dev.major`, this is just for posterity)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1350:725,clear,clearly,725,https://qutip.org,https://github.com/qutip/qutip/issues/1350,1,['clear'],['clearly']
Usability,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607:462,simpl,simplicity,462,https://qutip.org,https://github.com/qutip/qutip/issues/1607,1,['simpl'],['simplicity']
Usability,"It could be nice to highlight also graphically the contents of the documentation and/or tutorials, using [`sphinx-gallery`](https://github.com/sphinx-gallery/sphinx-gallery). This could even be added to the website, as it is the case for https://scikit-learn.org, I think.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1530:253,learn,learn,253,https://qutip.org,https://github.com/qutip/qutip/issues/1530,1,['learn'],['learn']
Usability,"It is possible that someone having trouble compiling qutip extensions may wish to set CFLAGS, CPATH, C_INCLUDE_PATH. Currently these would not be used in the qutip installation / building or extensions generally. I had a scenario where I was trying to install qutip on machines which I did not have sudo access on. They did not have cython or pydev. So I managed to install pydev and cython into the home folder. For the latter I had to set the C_INCLUDE_PATH to the local install of the C headers, or maybe I used the -I switch with CFLAGS. This did not work for qutip, so I made some changes to the `setup.py` files, and also the `pyximport` in `__init__.py`. However, none of it worked due to disk space issues in the end. Clearly, if there had been enough disk space, then Anaconda would have been a much better solution. So, the question are: ; 1. Is there any value in making a PR from the changes I made (in a local copy) to use the CFLAGS, CPATH, C_INCLUDE_PATH env vars if they are set?. 2. If so should the qutip pyximport extend or prepend the CFLAGS or should it not set CFLAGS at all if the user has set values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/571:726,Clear,Clearly,726,https://qutip.org,https://github.com/qutip/qutip/issues/571,1,['Clear'],['Clearly']
Usability,"It would be nice if the docstrings in QuTiP were well formatted, such that, when Sphinx builds the API and guidelines documentation, there are working link to QuTiP functions and classes. An example of working link is `qutip.steadystate.steadystate` in; http://qutip.org/docs/latest/guide/guide-steady.html#steady-state-solvers-in-qutip. An example of working link in the API doc is options: `qutip.solver.Options` in the attributes of the `HEOMSolver` class; http://qutip.org/docs/latest/apidoc/classes.html#non-markovian-solvers. A way to proceed would be to:. 1) reformat all instances in the docstrings of qutip/qutip such that they are in the form of :py:meth:`mymodule.MyClass.mymethod`, see; https://stackoverflow.com/questions/22700606/how-would-i-cross-reference-a-function-generated-by-autodoc-in-sphinx. 2) Build the documentation with Sphinx to check that the change works and generates an active hyperlink in the relative html page of the documentation. . 3) Iterate 1) and 2) for instances in which Qobj or other QuTiP functions or classes are found.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1526:107,guid,guidelines,107,https://qutip.org,https://github.com/qutip/qutip/issues/1526,3,['guid'],"['guide', 'guide-steady', 'guidelines']"
Usability,Iterable access to solver results and possibility of feedback to solvers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:53,feedback,feedback,53,https://qutip.org,https://github.com/qutip/qutip/issues/1571,2,['feedback'],['feedback']
Usability,Link to Bloch_Decay.mp4 in User Guide seems broken,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/800:32,Guid,Guide,32,https://qutip.org,https://github.com/qutip/qutip/issues/800,1,['Guid'],['Guide']
Usability,MAINT: Simplify some floats,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1393:7,Simpl,Simplify,7,https://qutip.org,https://github.com/qutip/qutip/pull/1393,1,['Simpl'],['Simplify']
Usability,"Main module control.ctrlpulseoptim provides functions for optimising control; pulses for quantum systems. Relies on the other classes for processing. Uses the BFGS (actually primarily the L-BFGS-B) algorthim, which is a quasi-second order Newton method for multivar function optimisation. Examples in the 'examples' folder to demonstrate usage.; 1. Hadamard - a simple example of Hadamard gate synthesis; 2. Lindbladian (open systems) - amplitude damping channel example; 3. Symplectic - a coupled oscillator example; 4. QFT - a 2 qubit example, showing alternative (more configurable) method for invoking the optimisation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246:362,simpl,simple,362,https://qutip.org,https://github.com/qutip/qutip/pull/246,1,['simpl'],['simple']
Usability,"Many of the features in the pulse optimization module are difficult to use, or poorly documented. For example, for the functions `optimize_pulse` and `optimize_pulse_unitary` there are 'params' arguments for many of the underlying classes, but it's not at all clear what count as valid key value pairs for each class.; ```python; Parameters; ----------; alg_params : Dictionary; options that are specific to the algorithm see above; ; optim_params : Dictionary; The key value pairs are the attribute name and value; used to set attribute values; Note: attributes are created if they do not exist already,; and are overwritten if they do.; Note: method_params are applied afterwards and so may override these. method_params : dict; Parameters for the optim_method. ; Note that where there is an attribute of the; Optimizer object or the termination_conditions matching the key ; that attribute. Otherwise, and in some case also, ; they are assumed to be method_options; for the scipy.optimize.minimize method. . dyn_params : dict; Parameters for the Dynamics object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. prop_params : dict; Parameters for the PropagatorComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. fid_params : dict; Parameters for the FidelityComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. init_pulse_params : dict; Parameters for the initial / guess pulse generator object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created; ```. As a further example, `dyn_params` is passed to a `Dynamics` object which stores it locally in `self.params`, but there isn't any checking of valid keys and values, and I can't find a function which actually uses whatever these params are set to. It's really difficult to run a top-le",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:260,clear,clear,260,https://qutip.org,https://github.com/qutip/qutip/issues/1284,1,['clear'],['clear']
Usability,Minor change - just fixes a simplification I accidentally left in when writing the original function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1361:28,simpl,simplification,28,https://qutip.org,https://github.com/qutip/qutip/pull/1361,1,['simpl'],['simplification']
Usability,Minor updates to guide overview and guide basic operations,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1757:17,guid,guide,17,https://qutip.org,https://github.com/qutip/qutip/pull/1757,4,['guid'],['guide']
Usability,"Mostly by replacing explicit loops with vectorized numpy expressions. For a simple test Hamiltonian with a single N-level bosonic operator, it is faster by a factor of ~40 for N=100 (Hamiltonian 100x100), i.e., it takes 12 seconds instead of 460 seconds. The speedup improves about linearly with N for this system. I checked for some test systems that the results are the same as before. The only difference in interface is that c_ops is [] by default, and c_ops=None is not accepted anymore. This seems to me more in line with the rest of qutip, but could be changed back trivially.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/336:76,simpl,simple,76,https://qutip.org,https://github.com/qutip/qutip/pull/336,1,['simpl'],['simple']
Usability,"Not really expecting anyone to fix this urgently, I am just recording some ideas, as I have spent a lot of time looking into this recently while try to build a conda package. Currently on Windows we compile under mingw. This is sub-optimal, according to various sources, including:; https://wiki.python.org/moin/WindowsCompilers; Python C extensions should be compiled using the same compiler that was used to compile the Python distro that is being used. Failing to do so can result in some strange behaviour. I have experienced issues with qutip tests hanging on Windows. Therefore it would clearly be beneficial if we could build qutip under MSVC. It is of particular interest now that we have a conda recipe that autobuilds for all the version, platform variations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/447:593,clear,clearly,593,https://qutip.org,https://github.com/qutip/qutip/issues/447,1,['clear'],['clearly']
Usability,"Once a Pull Request is merged to QuTiP, the contributor could add a short description to the Changelog, which contains changes of each [version release](http://qutip.org/docs/latest/changelog.html). ; It could be in the style of current changelog:. * A one-liner for **minor changes**, with a descriptive text and the author's name. ; * A short paragraph for **major changes**. . This guideline could be added to the contribution [how-to](https://github.com/qutip/qutip-doc/blob/master/qutip_dev_contrib.md ).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1055:385,guid,guideline,385,https://qutip.org,https://github.com/qutip/qutip/issues/1055,1,['guid'],['guideline']
Usability,Parfor is not usable,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:14,usab,usable,14,https://qutip.org,https://github.com/qutip/qutip/issues/2551,2,['usab'],['usable']
Usability,Prefix variable names with _ to clear Travis CI warnings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:32,clear,clear,32,https://qutip.org,https://github.com/qutip/qutip/pull/1213,2,['clear'],['clear']
Usability,"Prefixes variable names with ```_``` to clear the Travis CI warnings, as mentioned in #1133. Before the changes, the ```travis lint``` output was:. ```; Warnings for .travis.yml:; [x] [warn] on root: deprecated key: stage_generic_linux (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_36 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_38 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_no_cython (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_openblas (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_omp (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_osx (anchor on a non-private key); ```. After the changes, it is:. ```; Hooray, .travis.yml looks valid :); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:40,clear,clear,40,https://qutip.org,https://github.com/qutip/qutip/pull/1213,1,['clear'],['clear']
Usability,"QuTiP 4.4 changed the type of values that are returned from indexing into a `Qobj`:. ~~~; >>> import qutip; >>> CNOT = qutip.gates.cnot(); >>> CNOT[0,0] # (1+0j) on 4.3.1; array(1.+0.j); >>> type(CNOT[0,0]) # numpy.complex128 on 4.3.1; <class 'numpy.ndarray'>; >>> CNOT.data[0,0]; array(1.+0.j); ~~~. I'm using CNOT here as an example, but the same is true for any `Qobj`. The problem with the zero-dimensional `array(1.+0.j)` is that you can't multiply it to another `Qobj` (the result of the product is a sparse matrix, not a `Qobj`, as it would be for a scalar factor):; ~~~; >>> CNOT[0,0] * qutip.ket('10'); <4x1 sparse matrix of type '<class 'numpy.complex128'>'; with 1 stored elements in Compressed Sparse Row format>; ~~~ . In my specific case, it breaks this function I had: ; ~~~; def mapped_basis(gate, basis):; """"""Result of applying `gate` to `basis`""""""; return tuple([; sum([gate[i, j] * basis[i] for i in range(gate.shape[0])]); for j in range(gate.shape[1])]); ~~~. I can work around the new behavior by changing `gate[i, j]` to `complex(gate[i, j])`, but I still wanted to raise the issue, to see whether this change was intentional, and what the reasoning behind it was. My intuitive expectation would be for `gate[i, j]` to be a simple scalar. I could see the zero-dimensional array causing some subtle problems for users, e.g. if there were to index into a density matrix to get populations (apart from my `mapped_basis` use case above). Note that numpy itself returns scalars:; ~~~; >>> import numpy as np; >>> np.array(CNOT)[0, 0]; (1+0j); >>> type(np.array(CNOT)[0, 0]); <class 'numpy.complex128'>; ~~~. On the other hand, scipy's sparse matrices have the same behavior as the most recent QuTiP, so there is a precedent:; ~~~; >>> import scipy.sparse; >>> s = scipy.sparse.csr_matrix(CNOT); >>> s[0,0]; array(1.+0.j); ~~~. If the change in QuTiP is deliberate, feel free to close the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1063:1191,intuit,intuitive,1191,https://qutip.org,https://github.com/qutip/qutip/issues/1063,2,"['intuit', 'simpl']","['intuitive', 'simple']"
Usability,"QuTiP `qip` module currently supports six different single-qubits gate, including rx, ry, yz, http://qutip.org/docs/latest/guide/guide-qip.html. However, the commonly used Pauli X, Y, Z gates, T gate and S gate are not there. Although in principle they can all be realized by the existing gate set. It would still be good to have them supported in `qutip.qip.QubitCircuit`. - Define those gates in `qutip.qip.operation`. If they already exist in `qutip.operators`, import them as functions such as `x_gate`, `y_gate`, `z_gate`, `s_gate`, `t_gate`; - Add the gates to `quip.qip.QubitCircuit`; - Add them also to the LaTeX code if applicable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1208:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/issues/1208,2,['guid'],"['guide', 'guide-qip']"
Usability,QuTiP developers' guide (including the new data layer),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359:18,guid,guide,18,https://qutip.org,https://github.com/qutip/qutip/issues/1359,2,['guid'],['guide']
Usability,"QuTiP is currently distributed through both Anaconda's conda-forge channel (`conda install qutip`) and PyPI (`pip install qutip`).; It could be helpful to the maintainers to have the project also on the test channel of PyPI, https://test.pypi.org, testing the distribution before uploading a new release on the actual PyPI channel. The [instructions](https://packaging.python.org/guides/using-testpypi/) are straightforward. Placing this as a memo for v. 4.4. Testing this would be helpful also as we attempt the wheels configuration (#933), which, as I understood from @Ericgig, might not be so straightforward given the low-level calls that QuTiP makes in some functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:380,guid,guides,380,https://qutip.org,https://github.com/qutip/qutip/issues/992,1,['guid'],['guides']
Usability,Qubit Decay code example on [this page; ](http://qutip.org/docs/4.1/guide/guide-bloch.html) lists these imports. ```; from qutip import *; from scipy import *; ```; I think it misses; `import numpy as np`; for np.sin and np.cos functions. If I don't add that line I get an error.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/797:68,guid,guide,68,https://qutip.org,https://github.com/qutip/qutip/issues/797,2,['guid'],"['guide', 'guide-bloch']"
Usability,"R; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3868,simpl,simple,3868,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,Remove string coefficient comment in brmesolve's guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2033:49,guid,guide,49,https://qutip.org,https://github.com/qutip/qutip/pull/2033,2,['guid'],['guide']
Usability,Reset and clear up figures more correctly in dynamics-time guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1931:10,clear,clear,10,https://qutip.org,https://github.com/qutip/qutip/pull/1931,4,"['clear', 'guid']","['clear', 'guide']"
Usability,Restore feedback for solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210:8,feedback,feedback,8,https://qutip.org,https://github.com/qutip/qutip/pull/2210,2,['feedback'],['feedback']
Usability,Review guide section of documentation.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279:7,guid,guide,7,https://qutip.org,https://github.com/qutip/qutip/pull/2279,2,['guid'],['guide']
Usability,"Rewrote, cythonized and simplified `mcsolve`.; `mcsolve` implementation based on `qobjevo`.; It is now class based with the general structure I would propose for solvers.; It has (experimental, hidden for now) support for diagonalized evolution.; Collapse history can be obtained by the Hamiltonian.; Otherwise the same algorithm than the previous version. Between #990 and #969",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991:24,simpl,simplified,24,https://qutip.org,https://github.com/qutip/qutip/pull/991,1,['simpl'],['simplified']
Usability,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1544:140,clear,clear,140,https://qutip.org,https://github.com/qutip/qutip/pull/1544,1,['clear'],['clear']
Usability,Simplify initiating options in solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2071:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2071,1,['Simpl'],['Simplify']
Usability,Simplify options for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['Simpl'],['Simplify']
Usability,Simplify version parsing (v5).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2044,1,['Simpl'],['Simplify']
Usability,Simplify version parsing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2043,1,['Simpl'],['Simplify']
Usability,Simply setting compiler flags and add link-time optimizations.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/308:0,Simpl,Simply,0,https://qutip.org,https://github.com/qutip/qutip/pull/308,1,['Simpl'],['Simply']
Usability,"Some correlation tests fail on some attempts.; Not really clear why.; This issue can be used to keep a record, and then they can be fixed. This is an example:; ```; ======================================================================; FAIL: correlation: comparing me and mc for driven oscillator in fock state; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/qutip-4.1.0.dev0+0e91439-py2.7-linux-x86_64.egg/qutip/tests/test_correlation.py"", line 125, in test_compare_solvers_coherent_state_memc; assert_(abs(corr1 - corr2).max() < 0.2); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/numpy/testing/utils.py"", line 77, in assert_; raise AssertionError(smsg); AssertionError; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/607:58,clear,clear,58,https://qutip.org,https://github.com/qutip/qutip/issues/607,1,['clear'],['clear']
Usability,Thank you @hodgestar for noticing that there was nothing about MPI in the Users Guide yet. I wrote a short section based on the example in the `nm_mcsolve` tutorial notebook.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2550:80,Guid,Guide,80,https://qutip.org,https://github.com/qutip/qutip/pull/2550,1,['Guid'],['Guide']
Usability,"The LaTeX code generated for the following simple circuit is invalid, and trying to plot the circuit results in a RuntimeError:. ```; qc = QubitCircuit(1, num_cbits=1, reverse_states=False); qc.add_measurement(""M0"", targets=0, classical_store=0); qc.png; ```; Setting `reverse_states=True` works fine. The following line in `QubitCircuit.latex_code()` needs to include a sign dependent on the value of `reverse_states`:; https://github.com/qutip/qutip/blob/00d0fe43055cff44fad803bd1ad1530e17fedeee/qutip/qip/circuit.py#L1741",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1842:43,simpl,simple,43,https://qutip.org,https://github.com/qutip/qutip/issues/1842,1,['simpl'],['simple']
Usability,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; * None yet. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1697:267,simpl,simple,267,https://qutip.org,https://github.com/qutip/qutip/pull/1697,1,['simpl'],['simple']
Usability,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; - Supercedes #1702, #1699 and #1697. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1819:267,simpl,simple,267,https://qutip.org,https://github.com/qutip/qutip/pull/1819,1,['simpl'],['simple']
Usability,"The eigenvectors returned by .eigenstates() method are determined up to a sign (which is correct, but leads to interesting issues in some cases). Is it possible to update the eigenstates method to fix these internally? A simple workaround is to invert (multiply by -1) any eigenstates that cause trouble, but I'm not sure I know of a universal test for ""trouble"". As an example, [this gist](https://gist.github.com/amcdawes/437f8756fcb8ff8ca4c1b720600adf43) demonstrates a fix whereby all eigenstates are made to have positive initial values. I suspect this fix is specific to SHO states, but perhaps a universal standard exists where each vector could be made to match the expected result?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1118:221,simpl,simple,221,https://qutip.org,https://github.com/qutip/qutip/issues/1118,1,['simpl'],['simple']
Usability,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1479:405,clear,clearly,405,https://qutip.org,https://github.com/qutip/qutip/pull/1479,1,['clear'],['clearly']
Usability,"The following codes come from the documentation of mcsolver; http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html; ```; from qutip import *; import numpy as np; times = np.linspace(0.0, 10.0, 200); psi0 = tensor(fock(2, 0), fock(10, 5)); a = tensor(qeye(2), destroy(10)); sm = tensor(destroy(2), qeye(10)); H = 2 * np.pi * a.dag() * a + 2 * np.pi * sm.dag() * sm + 2 * np.pi * 0.25 * (sm * a.dag() + sm.dag() * a); data = mcsolve(H, psi0, times, [np.sqrt(0.1) * a], [a.dag() * a, sm.dag() * sm]); ```; Sofar it is fine, but if I now try to print `data` with; ```; print(data); ```; The following error shows up in either Ipython or Jupyter Notebook; ```; c:\users\boxi\onedrive\studium\qutip-project\qutip\qutip\solver.py in __str__(self); 272 s += ""missing solver information.\n""; 273 s += ""-"" * (len(s) - 1) + ""\n""; --> 274 if self.states is not None and len(self.states) > 0:; 275 s += ""states = True\n""; 276 elif self.expect is not None and len(self.expect) > 0:; TypeError: len() of unsized object; ```; It is because in the default option is `store_states=False`. Maybe `self.states` should be initialized as e.g. an empty list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1016:90,guid,guide,90,https://qutip.org,https://github.com/qutip/qutip/issues/1016,1,['guid'],['guide']
Usability,"The formatting of several .py files in qutip/qutip could be improved according to [PEP8](https://www.python.org/dev/peps/pep-0008/) and appropriate guidelines. An example in ; [qutip/piqs.py](https://github.com/qutip/qutip/blob/master/qutip/piqs.py) is given by . ```; def num_dicke_states(N):; """"""Calculate the number of Dicke states.; Parameters; ----------; N: int; The number of two-level systems.; ```; that can be changed to introduce spaces after the : ; ```; def num_dicke_states(N):; """"""Calculate the number of Dicke states.; Parameters; ----------; N : int; The number of two-level systems.; ```. These changes would affect the documentation upon build, but need to be made in qutip/qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527:148,guid,guidelines,148,https://qutip.org,https://github.com/qutip/qutip/issues/1527,1,['guid'],['guidelines']
Usability,"The function `spectrum_correlation_fft(taulist, y)` accepts all kinds of (non-linspace) taulists with corresponding correlation values `y`.; However, `y` is passed to `scipy.fftpack.fft(y)`, which assumes the values to be linearly spaced in time. If 'taulist' is not a linspace, the result of `spectrum_correlation_fft(taulist, y)` will seem realistic, but in fact be totally off.; This behaviour is especially critical, because it is often advantageous to use non-linear taulists for the calculation of correlation values. I guess this limitation is indicated by the fact that it uses a fast fourier transform, but I think it should be indicated more clearly, at least in the docstring. P.S: Thanks for the great module! I quite enjoy working with qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/689:652,clear,clearly,652,https://qutip.org,https://github.com/qutip/qutip/issues/689,1,['clear'],['clearly']
Usability,"The latest changes in `mcsolve` with option `average_states = False, store_states = True` is much slower than `average_states = True, store_states = True`. . Strangely, the cell runs for much longer after the progress bar is completed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1023:209,progress bar,progress bar,209,https://qutip.org,https://github.com/qutip/qutip/issues/1023,1,['progress bar'],['progress bar']
Usability,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1574:670,simpl,simpler,670,https://qutip.org,https://github.com/qutip/qutip/pull/1574,1,['simpl'],['simpler']
Usability,"The new random Qobj functions `rand_ket_haar`, `rand_dm_hs`, `rand_dm_ginibre`, `rand_unitary_haar` and `rand_super_bcsz` need to be explained in the Guide as well as in the apidocs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1523:150,Guid,Guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/1523,1,['Guid'],['Guide']
Usability,"The problem appears in qutip version 4.0.0 when considering the tensor product of a few systems, and including more than one dissipation channel. I noticed a similar issue on a much more complex system, but in the code attached I consider the simplest system on which I have found the bug to appear. Consider three uncoupled qubits, each with a distinct frequency. The Hamiltonian is (ignoring tensor products with identity matrices) :. H = (w1 / 2) * sigmaz_1 + (w2 / 2) * sigmaz_2 + (w3 / 2) * sigmaz_3. Let us couple qubits 2 and 3 to independent white-noise environments through operators sigmax_2 and sigmax_3. Qubit 1 is decoupled from the other qubits, and does not couple to any relaxation channel. We consider the initial state |1:e, 2:g, 3:g>, where g(e) labels the ground (excited) state of a qubit, and evaluate the population of the excited state of qubit 1 as a function of time using bloch_redfield_tensor() and bloch_redfield_solve(). Since qubit 1 is decoupled from the other qubits, its excited-state population should remain 1 at all times. Yet, qutip yields exponential decay of the population of qubit 1. I noticed that when I remove dissipation for qubit 2 (keeping only dissipation through sigmax_3), the problem disappears and qubit 1 forever stays in its excited state. So the problem seems to arise when combining two relaxation sources. I am using qutip version 4.0.0. A colleague of mine tried the attached test code on qutip version 3.1.0 and did not catch any bug (i.e. qubit 1 did not relax with qutip 3.1.0). So the problem seems to be related to versions of qutip later than 3.1.0. Can anyone replicate the bug with the attached code ? . (I tried putting the code directly here but the hashtag signs for the comments made a mess, and github does not accept attached .py files, so I have put the code in a .txt file instead.). [redfield.txt](https://github.com/qutip/qutip/files/635122/redfield.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/572:243,simpl,simplest,243,https://qutip.org,https://github.com/qutip/qutip/issues/572,1,['simpl'],['simplest']
Usability,"The scalar product (f_modes_t[a].dag() * c_op * f_modes_t[b])[0, 0] is computed at each loop in the for loop on k. But it only depends on a and b and can then be computed outside of the loop. In my case, I was dealing with Hilbert spaces of size 100, which resulted in a significantly reduced run time. Please, let me know about any feedback about this PR :). Follow up of !762.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/766:333,feedback,feedback,333,https://qutip.org,https://github.com/qutip/qutip/pull/766,1,['feedback'],['feedback']
Usability,"The scalar product `(f_modes_t[a].dag() * c_op * f_modes_t[b])[0, 0]` is computed at each loop in the `for` loop on `k`. But it only depends on `a` and `b` and can then be computed outside of the loop. In my case, I was dealing with Hilbert spaces of size 100, which resulted in a significantly reduced run time. Please, let me know about any feedback about this PR :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/762:343,feedback,feedback,343,https://qutip.org,https://github.com/qutip/qutip/pull/762,1,['feedback'],['feedback']
Usability,"The segfault on mac is not fixed yet. @nathanshammah found 3 tests that fails because of it.; Since we don't have a solution comming soon, we are simply skipping these tests for 4.5.1. This is the error in #1197. In common with these 3 test is the computation of eigenvalues, 2 of them do it directly with scipy, the last one compare the cython version to the scipy one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1257:146,simpl,simply,146,https://qutip.org,https://github.com/qutip/qutip/pull/1257,1,['simpl'],['simply']
Usability,"The stochastic solver have been redone.; smesolve and ssesovle can be used for time dependent systems (H, c_ops and sc_ops).; The available solvers are : 'euler-maruyama', 'pc-euler, 'milstein', 'platen', 'milstein-imp', 'taylor15', 'taylor15-imp', 'explicit15'. All solvers are usable by both ssesolve and smesolve, for time-dependent cases and for both heterodyne and homodyne methods. There is no restriction on the number of sc_ops. The solvers are in cython, making them 2~3 time faster than the previous version, with the exception of the implicit solvers, where the timing is about the same. The photocurrent method as been moved to it's own functions: photocurrentmesolve and photocurrentsesolve. It can take time-dependent Hamiltonian. The stochastic (piecewse deterministic process) PDP solvers (ssepdpsolve and smepdpsolve) are untouched. The previous version of smesolve/ssesolve allowed the user to determine it's own d1 and d2 function. This capacity have been moved to the function general_stochastic. However the function only has access to some solver: 'euler-maruyama', 'platen', 'explicit15'. . I created a function which list the solvers with the references: stochastic_solver_info(). The convergence of the solvers was tested with a tests similar to https://github.com/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815:279,usab,usable,279,https://qutip.org,https://github.com/qutip/qutip/pull/815,1,['usab'],['usable']
Usability,"The usage of the `tensor_contract` function is explained in [QuTiP Example: Superoperators, Pauli Basis and Channel Contraction](http://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/example-superop-contract.ipynb). It is explained in terms of the graphical notation in http://arxiv.org/abs/1111.6950. However, there is no figure explaining how the ""tensor wires"" are numbered. In the notebook it says ""Numbering the tensor wires from 0 to 3, this corresponds to a tensor_contract argument of (1, 3)."" But it is not clear what the convention is... does the numbering follow in an anticlockwise fashion, starting with 0 at the top left?. A figure in the notebook showing the numbering convention would be extremely helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385:540,clear,clear,540,https://qutip.org,https://github.com/qutip/qutip/issues/385,1,['clear'],['clear']
Usability,"There are two places where one can read about the development guidelines. One is ; on `qutip/qutip`'s Wiki page:; https://github.com/qutip/qutip/wiki/QuTiP-Development-Guidelines. The other one is in `[qutip-doc/qutip_dev_contrib.md`](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md). I see that we may want both to be there, but I guess they should contain the same information and possibly cross-reference each other.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1135:62,guid,guidelines,62,https://qutip.org,https://github.com/qutip/qutip/issues/1135,2,"['Guid', 'guid']","['Guidelines', 'guidelines']"
Usability,There is a Bloch_Decay.mp4 link at the bottom of the [Plotting on the Bloch Sphere](http://qutip.org/docs/4.1/guide/guide-bloch.html#plotting-on-the-bloch-sphere) webpage. When I click on it I get a 404 error from linked Google Code page:; http://qutip.googlecode.com/svn/doc/figures/bloch_decay.mp4,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/800:110,guid,guide,110,https://qutip.org,https://github.com/qutip/qutip/issues/800,2,['guid'],"['guide', 'guide-bloch']"
Usability,"There is a problem with `mesolve` and `sesolve`'s default `options`, which determine whether the propagated states are stored in the `result` object:. ~~~; >>> import qutip; >>> import numpy as np; >>> qutip.__version__; '4.5.0.dev0+19f172cb'; >>> H = qutip.sigmaz() + qutip.sigmax(); >>> psi = qutip.ket('0'); >>> tlist = np.linspace(0,10, 200); >>> p0 = qutip.ket2dm(psi); >>> res1 = qutip.mesolve(H, psi, tlist, e_ops=[p0]); >>> len(res1.states) # should be 0; 0; >>> len(res1.expect) # should be 1; 1; >>>; >>> len(res2.states) # should be 200; 200; >>> len(res2.expect) # should be 0; 0; >>> res3 = qutip.mesolve(H, psi, tlist, e_ops=[p0]); >>> len(res3.states) # should be 0 (same as res1); 200; >>> len(res3.expect) # should be 1; 1; ~~~; In `res3`, there should be no stored `states`, as I'm requesting expectation values. The problem is due to the common gotcha of [mutable default arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments) in the definition of of e.g. `mesolve`:; ~~~; def mesolve(H, rho0, tlist, c_ops=[], e_ops=[], args={}, options=Options(),; progress_bar=BaseProgressBar(), _safe_mode=True); ~~~; What happens is that the default `options` get instantiated once when `qutip` is imported. In the example above `res2 = qutip.mesolve(H, psi, tlist)` will then internally set `options.store_states = True`, and this value will still be there for `res3 = qutip.mesolve(H, psi, tlist, e_ops=[p0])`. Also, `c_ops`, `e_ops`, `args`, and `progress_bar` are all mutable in this definition, which could cause more problems. The correct thing to do is to initialize with `None` and set the mutable defaults in the body of the function. I can prepare a pull request for this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1061:922,guid,guide,922,https://qutip.org,https://github.com/qutip/qutip/issues/1061,1,['guid'],['guide']
Usability,This PR also includes fixes and code simplifications in qutip.cy.codegen.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/153:37,simpl,simplifications,37,https://qutip.org,https://github.com/qutip/qutip/pull/153,1,['simpl'],['simplifications']
Usability,"This PR introduces a new metric, unitarity, based on [work with Wallman, Harper and Flammia](https://scirate.com/arxiv/1503.07865). In that work, we show that this metric is useful for discriminating between coherent and incoherence noise. As such, I hope that contributing an implementation of our new metric to QuTiP will be of use, especially for comparison to experimental data from randomized benchmarking. While it still needs some more documentation and test cases, I wanted to open the PR now to get some initial feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/357:521,feedback,feedback,521,https://qutip.org,https://github.com/qutip/qutip/pull/357,1,['feedback'],['feedback']
Usability,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:56,simpl,simply,56,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['simpl'],['simply']
Usability,"This PR makes `Qobj` a callable, in keeping with the proposed semantics discussed in #475. Hopefully, this should make it easier for newcomers and experienced users alike to use the superoperator functionality by removing the need to use `operator_to_vector` and `vector_to_operator` in simple cases.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/488:287,simpl,simple,287,https://qutip.org,https://github.com/qutip/qutip/pull/488,1,['simpl'],['simple']
Usability,"This PR starts work on fixing #388 by splitting out much of the logic handling lists of dims into a new module, `dims_utils`, and providing a new function that converts between indices into `Qobj.dims` and tensor indices (as used by `np.reshape`). While this PR is not yet done, I wanted to make a PR for the fixes early to solicit feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389:332,feedback,feedback,332,https://qutip.org,https://github.com/qutip/qutip/pull/389,1,['feedback'],['feedback']
Usability,"This branch adds support for `rho0` argument to `mesolve` being a superoperator, to resolve #384. The functionality has been added to all the different mesolvers (but not the sesolvers). Unit tests are added to tests/test_mesolve.py in a new class, `TestMESolveSuperInit`. There are tests for all the different mesolvers, and the result with `rho0` as a density matrix is compared to the result for `rho0` being the identity super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:872,simpl,simple,872,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['simpl'],['simple']
Usability,"This code produces an animation of the Bloch sphere vector evolution. I have implemented a rotating frame approximation as defined by H. The goal is to model T1 and T2 decay. I am still experimenting with different gamma_phi and gamma_minus values, but right now they're big enough to have a visible effect over the 10^-7 time scale that's being plotted. Right now, I am only plotting state_z_plus so I can focus on the T1 decay from 1 to -1. However, as the animation and graph indicate, it seems to stop short of -1 and I don't see why that should be happening. I appreciate any feedback. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; import qutip as q; import cmath; import matplotlib as mpl; from mpl_toolkits.mplot3d import Axes3D. rc_dict = {; ""figure.subplot.bottom"": 0.11,; ""figure.subplot.hspace"": 0.2,; ""figure.subplot.left"": 0.125,; ""figure.subplot.right"": 0.9,; ""figure.subplot.top"": 0.88,; ""figure.subplot.wspace"": 0.2,; ""figure.figsize"":(10,10/1.61),; ""axes.grid"": True,; ""text.usetex"": True,; ""grid.linestyle"": "":"",; ""grid.color"": ""black"", #; ""legend.fontsize"": 20,; ""lines.linewidth"": 2.5,; ""axes.linewidth"": 1.5,; ""font.family"": [""serif""],; ""font.sans-serif"": ""Times New Roman Bold"",; ""font.size"":26,; }; plt.rcParams.update(rc_dict). qutip_options = q.Odeoptions(; store_states=True,; nsteps=20000000; ); si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); sp, sm=q.sigmap(), q.sigmam(); state_z_plus=q.basis(2,0); state_z_minus=q.basis(2,1); state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; prin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418:581,feedback,feedback,581,https://qutip.org,https://github.com/qutip/qutip/issues/1418,1,['feedback'],['feedback']
Usability,This extension simplifies copying code blocks from examples in rst files then hosted on html page.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1536:15,simpl,simplifies,15,https://qutip.org,https://github.com/qutip/qutip/issues/1536,1,['simpl'],['simplifies']
Usability,"This feature starts work towards implementing diamond norms between quantum channels by providing Stinespring dilations of `type=""super""` Qobjs. This requires generalizing the current `to_kraus` feature, since the left and right Kraus operators are the same only for CP maps, whereas the arguments to diamond norms are very often not CP (in particular, will often be a difference, || \Lambda_1 - \Lambda_2 ||_\diamond). The pull request is currently in an incomplete state, so as to solicit feedback before solidifying the design. The docstrings are missing or are incomplete, Python 3 compatibility has not yet been tested, and I still need to make unit tests. Most importantly, the `dims` attribute of the input Qobj is not yet preserved, in lieu of solving #331.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/332:491,feedback,feedback,491,https://qutip.org,https://github.com/qutip/qutip/pull/332,1,['feedback'],['feedback']
Usability,"This file has been added and removed a few times, but GitHub likes it if; we have it. The main contributing guidelines remain in the actual; documentation, so this just replicates the readme and points to the main; version. I think the UnitaryHack guidelines say we should have it, too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1549:108,guid,guidelines,108,https://qutip.org,https://github.com/qutip/qutip/pull/1549,2,['guid'],['guidelines']
Usability,"This fixes an incompatibility between the current version of QuTiP and the current version of matplotlib. When plotting the Bloch sphere, the call to Bloch.show() produces a run-time error because the Arrow3D class does not implement the method do_3d_projection. This method returns a sort key to matlotlib for sorting artists. This fix adds the method, simply returning a value of 1. The assumption here is that there is only one artist, or that the sort order does not matter. This PR also modifies the conventions for the viewing angles specified in the view attribute of the Bloch and Bloch3d classes, rotating them by a quarter of a turn. See prior PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1824:354,simpl,simply,354,https://qutip.org,https://github.com/qutip/qutip/pull/1824,1,['simpl'],['simply']
Usability,"This is a proof of principle and work in progress, demonstrating that parallelization in mcsolve can be simplified significantly by using qutip.parallel.parallel_map.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276:104,simpl,simplified,104,https://qutip.org,https://github.com/qutip/qutip/pull/276,1,['simpl'],['simplified']
Usability,This is an extension of PR #141 which adds a simplified way of defining array based time-dependent hamiltonians and collapse operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/162:45,simpl,simplified,45,https://qutip.org,https://github.com/qutip/qutip/pull/162,1,['simpl'],['simplified']
Usability,This is post for discussion over whether it might be beneficial to switch from `nose` to another unit testing software. . - QuTiP is using nose for unit testing. A [disclaimer](https://nose.readthedocs.io/en/latest/) on that project homepage warns that nose might not be maintained in the future. . - [`nose2`](https://nose2.readthedocs.io/en/latest/differences.html) is the successor to `nose`. It is actively maintained. There are some [differences](https://nose2.readthedocs.io/en/latest/differences.html). . - [pytest](https://pytest.readthedocs.io/en/latest/) is another open-source solution. By comparing [nose2](https://github.com/nose-devs/nose2/graphs/contributors?from=2010-08-01&to=2019-02-27&type=a) and [pytest](https://github.com/pytest-dev/pytest/graphs/contributors?from=2009-04-05&to=2019-02-27&type=a) activity it seems that the latter has grown and is actively updated. . I wonder whether it would make sense to migrate to a more popular (possibly more robust?) software and how much work this would mean. Other implications are not clear to me at this moment.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/958:1052,clear,clear,1052,https://qutip.org,https://github.com/qutip/qutip/issues/958,1,['clear'],['clear']
Usability,"This is the initial pull request for a subpackage for non-Markovian solvers, called `nonmarkov`. This idea was mentioned in issue #384. The subpackage now includes two modules, with two quite different non-Markov solvers:. `transfertensormethod`: This module is an implementation of the ""Transfer Tensor Method"" (TTM) introduced by Cerrillo and Cao in [Phys. Rev. Lett 112, 110401 (2014)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.112.110401) ([arXiv link](http://arxiv.org/abs/1307.7743)). TTM is a completely general purpose approach to non-Markovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:661,learn,learning,661,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learning']
Usability,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1576:5,simpl,simplifies,5,https://qutip.org,https://github.com/qutip/qutip/pull/1576,3,['simpl'],"['simpler', 'simplifies', 'simplify']"
Usability,"This took longer than anticipated because of a bunch of knock-on nasty Cython problems, and I struggled to get OpenMP running locally on macOS ([but I've got it now](https://www.binhbar.com/posts/2020/06/compiling-openmp-libraries-on-macos/)). Tag: @Ericgig, @ajgpitch. ---. Separate out what will become the ""core"" of qutip into its own subpackage. This package is intended to have most of its public symbols re-imported into the global package namespace. There should be no substantive changes to any actual worker code in this large commit, just what is necessary to carve out a major entangled part of the core library. Some files currently in core may be moved out in a future version (e.g. graph, metrics, semidefinite), but right now they are too entangled with `Qobj` or other true-core parts, and to remove them now would require too much substantive change to the code, which would be difficult to review in this commit. Major changes required as part of this:; - module-level imports (e.g. `from qutip.qobj import Qobj`) are replaced with simple ones from the namespace (e.g. `from qutip import Qobj`). While inside the `core` package, imports are kept as module-specific, largely to support the mess of circular imports present in qutip at the more.; - .pxi files are no longer recommended as the way to share code between Cython files, so these have been converted into proper Cython modules and added to the distribution.; - collection of Cython extension components in `setup.py` is consolidated to support them no longer all existing in the same place. As the data layer is fleshed out, likely there will be even more Cython locations present.; - the test for OpenMP in `__init__.py` had to be made more indirect via importlib to avoid causing a full import of `qutip.core`, which would in turn cause Qobj and other parts to be imported. These components required `__init__.py` to have discovered whether OpenMP existed already before they were imported, causing false negatives.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282:1050,simpl,simple,1050,https://qutip.org,https://github.com/qutip/qutip/pull/1282,1,['simpl'],['simple']
Usability,Time dynamics documentation doesn't clear plots and so repeats them.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2007:36,clear,clear,36,https://qutip.org,https://github.com/qutip/qutip/issues/2007,2,['clear'],['clear']
Usability,"To generate a random ket and have it be in the tensor product space of 3 qubits I would use. ket = qutip.rand_ket(8, dims=[[2, 2, 2], [1, 1, 1]]); so to have the `dims` form I would get by actually taking the tensor product of three 1-qubit kets.; However this will fail due to the check performed of [L652](https://github.com/qutip/qutip/blob/master/qutip/random_objects.py#L652) of `random_objects.py`:. if not isinstance(dims, list) or isinstance(dims[0], list):; Did I understood wrong how the `dims` parameter of `rand_ket` is supposed to work? or is there a simple typo in the above line and it was instead supposed to be something like:. if not (isinstance(dims, list) or isinstance(dims[0], list)):; ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/617:564,simpl,simple,564,https://qutip.org,https://github.com/qutip/qutip/issues/617,1,['simpl'],['simple']
Usability,"To get more familiar with bits of the internals, I'm going through and migrating the tests to `pytest`. While I'm at it, I'm also fixing PEP8 issues in the testing files, since CodeClimate will moan at me if I don't. I'm basically learning how to use `pytest` and how to code as part of an organisation as I go, so please feel free to correct me if I'm doing something wrong. I'll leave this PR as in draft mode until I've made it through more of the testing files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1164:231,learn,learning,231,https://qutip.org,https://github.com/qutip/qutip/pull/1164,1,['learn'],['learning']
Usability,"Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ERROR; td_brmesolve: time-dependent a_ops ... ERROR; td_brmesolve: time-dependent a_ops tuple of strings ... ERROR; td_brmesolve: time-dependent a_ops tuple interp ... ERROR; td_brmesolve: time-dependent a_ops & c_ops interp ... ERROR; td_brmesolve: non-Hermitian e_ops check ... ERROR; td_brmesolve: states check ... ERROR; td_brmesolve: split ops #1 ... ERROR; td_brmesolve: split ops #2 ... ERROR; td_brmesolve: split ops, Cubic_Spline td-terms ... ERROR; td_brmesolve: split ops, multiple ... ERROR; td_brmesolve: Hamiltonian args ... ERROR; BR Tools : zheevr ...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197:504,simpl,simple,504,https://qutip.org,https://github.com/qutip/qutip/issues/1197,1,['simpl'],['simple']
Usability,"Two small bugs appeared in floquet steadystate in v5, this is a quick patch. **Description**; Two bugs:. 1) Small minus sign error in one of the terms (comparing to v4.7 and what is written in the old toolbox guide). 2) Some kind of data copying confusion with the S and T operators when updating their data contents with the results. Just initiating these two separately seems to fix it. other minor fix: updated the link to the toolbox guide. Some other minor niggles that I didn't fix:; - some of the optional solver methods dont work (seem not to support square right hand sides in '_data.solve()'. I didn't dig much on fixing these though. - the 'splu' method fails for a couple of reasons. I can get it to work by removing the choice of warnings as errors in 'solve.py' (which make it fail in other instances as well i suppose, like with normal steadystate()), making sure the solver option is not passed to steadystate(), and making sure that S and T are always converted back to CSR() after being updated in the iterative bit (in `steadystate_floquet()' they get returned as dense from _data.solve). I did not include those changes here though as the docstrings dont actually indicate support for splu anyway, so perhaps not needed. I am marking this as draft at the moment as I also want to update the test to be sensitive to these bugs (its a bit too coarse at the moment), and double check that the results from this solver are now correct. **Related issues or PRs**; fix #2386",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393:209,guid,guide,209,https://qutip.org,https://github.com/qutip/qutip/pull/2393,2,['guid'],['guide']
Usability,Undo wheels,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/376:0,Undo,Undo,0,https://qutip.org,https://github.com/qutip/qutip/pull/376,1,['Undo'],['Undo']
Usability,Update `guide-settings` with v5's options,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2025:8,guid,guide-settings,8,https://qutip.org,https://github.com/qutip/qutip/pull/2025,2,['guid'],['guide-settings']
Usability,Update guide-random/basic for v5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2024:7,guid,guide-random,7,https://qutip.org,https://github.com/qutip/qutip/pull/2024,2,['guid'],['guide-random']
Usability,"Update the ""Stochastic Solver"" page on the Users Guide",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706:49,Guid,Guide,49,https://qutip.org,https://github.com/qutip/qutip/issues/1706,1,['Guid'],['Guide']
Usability,Update the release guide to use readthedocs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2399:19,guid,guide,19,https://qutip.org,https://github.com/qutip/qutip/pull/2399,2,['guid'],['guide']
Usability,Update user guide content of documentation to QuTiP 5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:12,guid,guide,12,https://qutip.org,https://github.com/qutip/qutip/issues/1898,2,['guid'],['guide']
Usability,"UserWarning: Multiplying superoperators with different representations; issued during tests.; @cgranade I think you implemented this part. Is this something to concern; I mainly raised it as I have spent my evening removing all the other warnings from the tests, so would be nice to clear them all",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/433:283,clear,clear,283,https://qutip.org,https://github.com/qutip/qutip/issues/433,1,['clear'],['clear']
Usability,"Using Time dependent Hamiltonian in mcsolve and mesolve product different result for expectation value for `sigmay()`. It seems to work well for expectation value for `sigmax()` or `sigmaz()`. I wonder if dealing with complex number leads to this or there is another issue. This is a simple code illustrating the problem. ```; from qutip import *; from scipy import *; from pylab import*; #sigmay problem. psi0 = (basis(2,0) + basis(2,1)).unit() ; rho0 = psi0*psi0.dag(). H0 = 0*sigmax(); H1 = sigmax(); print(psi0); print(H0*psi0); H2 = sigmaz(); def H1_coeff(t,args):; return t-1. def H2_coeff(t,args):; return -t. h_t = [H0,[H1, H1_coeff],; [H2, H2_coeff]]. ntraj = 500. tlist = linspace(0, 3, 100); medata = mesolve(h_t, rho0, tlist, [], [sigmay()], args = {}); mcdata = mcsolve(h_t, psi0, tlist, [], [sigmay()], ntraj = ntraj, args = {}). fig,axes = subplots(1,1,figsize=(12,6)); axes.plot(mcdata.expect[0], color=""green"", alpha =0.6, label = ""mcsolve""); axes.plot(medata.expect[0], color=""blue"", alpha =0.6, label = ""mesolve""); axes.set_xlabel(r'$\frac{t}{t_f}$'); axes.set_ylabel('Expectation value'); axes.legend((""mcsolve"", ""mesolve"")). show(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/490:284,simpl,simple,284,https://qutip.org,https://github.com/qutip/qutip/issues/490,1,['simpl'],['simple']
Usability,"We get warnings when compiling using the mingw32 compiler under windows.; ```; ""unknown conversion type 'z' in format""; ```; The warnings only seem to occur during the tests and not the build_ext, so there may be something we can do with CFLAGS. ; I have done quite a lot of reading around and it seems many projects suffer from this. There did not seem to be a clear resolution, other than to change the C code. We don't seem to use the 'z' in any of our source, but it is found in all the so files, so I guess it is used in one of the dependencies, and hence I don't think we can take that approach.; The tests still seem to pass, so I am putting it down as a won't fix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/597:362,clear,clear,362,https://qutip.org,https://github.com/qutip/qutip/issues/597,1,['clear'],['clear']
Usability,We need to document more clearly what kind of spectrum spectrum_ss calculates and have more examples.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1515:25,clear,clearly,25,https://qutip.org,https://github.com/qutip/qutip/issues/1515,1,['clear'],['clearly']
Usability,Web-based progress bar.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255:10,progress bar,progress bar,10,https://qutip.org,https://github.com/qutip/qutip/pull/255,2,['progress bar'],['progress bar']
Usability,"What should we do with the qutip/examples directory? It contains a lot of old stuff which is not really maintained anymore, but there are still some useful tests examples there. The current situation is:. qutip/qutip/examples - official examples accessible through the GUI and used in the docs; qutip/qutip/tests - unit tests; qutip/notebooks - development tests and benchmarks; qutip/examples - no clear purpose and not well maintained. We need to think about what we want to do with the examples directory and what purpose these example scripts have. I'm inclined to getting rid of these examples in favor or more contextual development examples in notebook form stored in qutip/notebooks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/23:399,clear,clear,399,https://qutip.org,https://github.com/qutip/qutip/issues/23,1,['clear'],['clear']
Usability,"When I follow the example to generate animation for bloch sphere plotting, i.e., page 120-122 from [this doc](http://qutip.org/downloads/4.2.0/QuTiP_4.2.pdf), I faced ; `'Axes3D' object is not iterable`; problem, which happens for the `save` function. > .../matplotlib/animation.py in save(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs); 1192 for anim in all_anim:; 1193 # Clear the initial frame; -> 1194 anim._init_draw(); 1195 for data in zip(*[a.new_saved_frame_seq() for a in all_anim]):; 1196 for anim, d in zip(all_anim, data):. > .../matplotlib/animation.py in _init_draw(self); 1755 raise RuntimeError('The init_func must return a '; 1756 'sequence of Artist objects.'); -> 1757 for a in self._drawn_artists:; 1758 a.set_animated(self._blit); 1759 self._save_seq = []. >TypeError: 'Axes3D' object is not iterable. My environment:. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.14.1; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.2.0; Python Version: 3.5.2; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/836:426,Clear,Clear,426,https://qutip.org,https://github.com/qutip/qutip/issues/836,1,['Clear'],['Clear']
Usability,"When I run `ffmpeg -r 20 -b 1800 -i bloch_%01d.png bloch.mp4`; from the User Guide's [Generating Images for Animation; ](http://qutip.org/docs/4.1/guide/guide-bloch.html#generating-images-for-animation) section I get the following error:. ```; Option b (video bitrate (please use -b:v)) cannot be applied to input url %04d.png -- you are trying to apply an input option to an output file or vice versa. Move this option before the file it belongs to.; Error parsing options for input file bloch_%01d.png.; Error opening input files: Invalid argument; ```. What works for me instead is this:; `ffmpeg -r 20 -i bloch_%01d.png -pix_fmt yuv420p bloch.mp4`. Note: personally I print files as zeropadded 4-digit number, so I have %04d.png instead of bloch_%01d.png.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799:77,Guid,Guide,77,https://qutip.org,https://github.com/qutip/qutip/issues/799,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616:272,pause,pause,272,https://qutip.org,https://github.com/qutip/qutip/issues/1616,2,"['pause', 'simpl']","['pause', 'simply']"
Usability,"While we are at it, I have found another undocumented, untested ""feature"" is the solvers.; In `sesolve`, when H is a function and a Qobj is in args, it is replaced by it's data""; sesolve.py, 696:; ``` ; for key in args:; if isinstance(args[key], Qobj):; new_args[key] = args[key].data; ```; `mesolve` does a similar thing: (mesolve.py:889) ; ```; for key in args:; if isinstance(args[key], Qobj):; if isoper(args[key]):; new_args[key] = (; -1j * (spre(args[key]) - spost(args[key]))); ```; While this is probably not common, I don't see it being useful (at least without proper documentation).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/948:41,undo,undocumented,41,https://qutip.org,https://github.com/qutip/qutip/issues/948,1,['undo'],['undocumented']
Usability,"With this PR mesolve and mcsolve accept single operators as input for the collapse operator or the operator for which the expectation value is calculated. Internally, a list containing only that operator is constructed and passed on. I added test cases, by just copying a test that was already there and changing the input to a single operator for the collapse and expectation value respectively. For mcsolve the tests take quite some time, so a simpler test might be better. Any idea?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/5:446,simpl,simpler,446,https://qutip.org,https://github.com/qutip/qutip/pull/5,1,['simpl'],['simpler']
Usability,Work in progress:; - Refactor tensor so that it plays better with tensor products of superoperators (see PR #99); - Simplify and cleanup the code,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/100:116,Simpl,Simplify,116,https://qutip.org,https://github.com/qutip/qutip/pull/100,1,['Simpl'],['Simplify']
Usability,"[[3], [2]]], shape=(9, 6), type='super', isherm=False; Qobj data =; [[1. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 1. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 1. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]]; ```. So at the very least the behavior of spre has changed for nonsquare operators. I haven't installed the master branch to see what the current behavior is there but if I'm reading [this commit](https://github.com/qutip/qutip/commit/8d6883da7c373dc65fc3adb88b74c2b27e350db6#diff-53b46f507cc9fff2a9bd96162758693033d4d57ad7e06ea2b58ad3dcee2205d1) correctly, then it appears as though the master branch will just throw a `ValueError(""Can't create and identity like a non square matrix."")`. From searching throw past issues, it looks like these are the relevant pull requests:; - https://github.com/qutip/qutip/pull/1098; - https://github.com/qutip/qutip/pull/1491. For `sprepost` for rectangular operators, it's clear that the expected behavior should correspond to a supoperator taking density matrices in an input hilbert space to one in a potentially different dimensional output hilbert space. However, I think that it's not completely clear what behavior one should expect of `spre` (and `spost`) for rectangular operators. One potentially sensible behavior would be to view `spre` and `spost` as special cases of `sprepost` where one uses the identity isometry between input and output hilbert spaces to form a superoperator which will act like `sprepost(A, A.dag())`. However, I don't think such superoperators will necessarily correspond to CPTP channels as they may not admit Kraus decompositions which obey the completeness relation (I haven't actually checked this, it's just my intuition). Since it appears somewhat doubtful that anyone is currently using `spre` or `spost` with nonsquare operators, my suggestion would actually be to raise a more helpful error that acknowledges there still may be use cases for such a situation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2171:2762,clear,clear,2762,https://qutip.org,https://github.com/qutip/qutip/issues/2171,3,"['clear', 'intuit']","['clear', 'intuition']"
Usability,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538:30,guid,guide,30,https://qutip.org,https://github.com/qutip/qutip/issues/1538,1,['guid'],['guide']
Usability,"_Last updated: 2020-08-12_. This is an issue for tracking and publicising the development status of a separated data layer. This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of `Qobj`. This document and issue will change over time. Development is taking place on the [`dev.major` branch](https://github.com/qutip/qutip/tree/dev.major) in `qutip/qutip`. Pull requests implementing new features:; - #1282 separating out the core QuTiP operations into a (logical but user-transparent) package `qutip.core`.; - #1296 implementing the first parts of the data multiple dispatch and new data types.; - #1332 replacing the `fast_csr_matrix` with the new Cython type `CSR` all across QuTiP; - #1338 implementing the data-layer creation, conversion and dispatcher routines. We are writing a new ""developers' guide"" to explain the logic behind the design decisions, and help new QuTiP developers work on the code. You can follow initial development hosted as [a repo in my user account](https://github.com/jakelishman/qutip-devguide) until we decide how this will be added to the main documentation. You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide. Some design documents:; - [data layer](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/01-data-time-layer-separation.md); - [data structure implementation choices](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:895,guid,guide,895,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['guid'],['guide']
Usability,"`QubitCircuit` doesn't find `png` (or `svg`) as expected. Using a simple example right out of [one of the demo notebooks](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/quantum-gates.ipynb). ```python; qc3 = QubitCircuit(3); qc3.add_gate(""CNOT"", 1, 0); qc3.add_gate(""RX"", 0, None, np.pi/2, r""\pi/2""); qc3.add_gate(""RY"", 1, None, np.pi/2, r""\pi/2""); qc3.add_gate(""RZ"", 2, None, np.pi/2, r""\pi/2""); qc3.add_gate(""ISWAP"", [1, 2]); qc3.svg; ```; I get. ```; ---------------------------------------------------------------------------; IOError Traceback (most recent call last); <ipython-input-17-90c37b42f323> in <module>(); 5 qc3.add_gate(""RZ"", 2, None, np.pi/2, r""\pi/2""); 6 qc3.add_gate(""ISWAP"", [1, 2]); ----> 7 qc3.svg; 8 dir(qc3). /usr/local/lib/python2.7/site-packages/qutip/qip/circuit.pyc in svg(self); 1049 def svg(self):; 1050 from IPython.display import SVG; -> 1051 return SVG(self._repr_svg_()); 1052 ; 1053 def qasm(self):. /usr/local/lib/python2.7/site-packages/qutip/qip/circuit.pyc in _repr_svg_(self); 1039 ; 1040 def _repr_svg_(self):; -> 1041 return _latex_compile(self.latex_code(), format=""svg""); 1042 ; 1043 @property. /usr/local/lib/python2.7/site-packages/qutip/qip/circuit_latex.pyc in _latex_compile(code, filename, format); 64 else:; 65 os.system(""pdf2svg %s.pdf %s.svg"" % (filename, filename)); ---> 66 with open(""%s.svg"" % filename) as f:; 67 result = f.read(); 68 . IOError: [Errno 2] No such file or directory: 'qcirc.svg'; ```; with. > uTiP | 4.2.0; > Numpy | 1.13.1; > SciPy | 0.19.1; > matplotlib | 2.0.2; > Cython | 0.27; > Number of CPUs | 2; > BLAS Info | OPENBLAS; > IPython | 5.5.0; > Python | 2.7.13 (default, Jul 18 2017, 09:17:00) [GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]; > OS | posix [darwin]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/754:66,simpl,simple,66,https://qutip.org,https://github.com/qutip/qutip/issues/754,1,['simpl'],['simple']
Usability,"`python3 setup.py clean` creates cpp files in qutip/control and qutip/cy. This is the exact opposite of what it should do. It's supposed to clear out build files, not create new ones.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/986:140,clear,clear,140,https://qutip.org,https://github.com/qutip/qutip/issues/986,1,['clear'],['clear']
Usability,add Krylovsolve guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862:16,guid,guide,16,https://qutip.org,https://github.com/qutip/qutip/pull/1862,2,['guid'],['guide']
Usability,add isunitary attribute for checking if qobj is a unitary operator:; unitary checking func and property funcs added; initialisation of isunitary; clear flag on operations that risk unitarity; qobj unitarity testing added; preset isunitary for qeye,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817:146,clear,clear,146,https://qutip.org,https://github.com/qutip/qutip/pull/817,1,['clear'],['clear']
Usability,"af717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:2799,progress bar,progress bar,2799,https://qutip.org,https://github.com/qutip/qutip/pull/1695,1,['progress bar'],['progress bar']
Usability,"ally rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is it a bra? [no]; 3. is it a super-operator? [no]; 4. if here, it must be an operator. Such objects do have a use. Let's say we have a system with two computational qubits and one ancillary qubit, we've performed a calculation on it and ended up in some state `|x> = |a>.|b>.|c>`, and we want to extract the computational subspace when the ancilla bit is projected onto `|0>`. We can do this in a mathematically rigourous way with; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).proj()); >>> (projector * x).ptrace([0, 1]); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; ...; ```; which will always return a density matrix. Alternatively, we can instead define the operator (note `proj()` to create `|g><g|` has become `dag()` to simply make `<g|`) as; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).dag()); >>> projector * x; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; ...; ```; which gets us what we wanted. This is not necessarily _common_, but it is useful in some circumstances. ## Other problem discussions. There have been some cases of complaint about the handling of tensor-product spaces in QuTiP in the past (see [this discussion in the Google group](https://groups.google.com/forum/#!msg/qutip/NAGU4iKZNBY/NjqiFEkyDlkJ)), but these largely revolve around people not liking the idea that we enforce the tensor structure to be maintained at all. My reading of these issues is that some people would like to see `dims` removed, or make mathematical operations effectively ignore it. ## Solutions. ### Rejections. Personally, I think enforcing the tensor product structure catches a whole lot of potential issues in code when working with o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:5152,simpl,simply,5152,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simply']
Usability,"am(); H = w * (np.cos(theta) * sz + np.sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sz); # evolve and calculate expectation values; output = qutip.mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * np.pi # qubit angular frequency; theta = 0.2 * np.pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2); tlist = np.linspace(0, 4, 250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = qutip.Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np.sin(theta), 0, np.cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = animation.FuncAnimation(fig, animate, np.arange(len(sx)),; init_func=init, blit=False, repeat=False); ani.save('bloch_sphere.mp4', fps=20); ```. ### Code Output. _No response_. ### Expected Behaviour. An animated Bloch sphere similar to the animation on the user guide [here](https://raw.githubusercontent.com/qutip/qutip/master/doc/figures/bloch_decay.mp4). ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.2; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2156:2613,clear,clear,2613,https://qutip.org,https://github.com/qutip/qutip/issues/2156,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"antiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2755,simpl,simply,2755,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simply']
Usability,"appens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1163,simpl,simple,1163,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['simpl'],['simple']
Usability,"arkovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implement",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1575,feedback,feedback,1575,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['feedback'],['feedback']
Usability,"ated_controlvalue_qobjevo = np.gradient(angle_qobjevo, tlist_state_eval); interpolated_controlvalue_calling_qobjevo = np.gradient(angle_calling_qobjevo, tlist_state_eval); interpolated_controlvalue_callable_corrected = np.gradient(angle_callable_corrected, tlist_state_eval). fig, axs = plt.subplots(2); axs[0].plot(tlist_state_eval, interpolated_controlvalue_qobjevo, label='passing qobjevo', marker='.'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo, label='passing qobjevo as callable'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected, label='callable H, corrected'); axs[0].grid(); axs[0].legend(); axs[0].set_ylabel('interpolated values of control parameter'). axs[1].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo - interpolated_controlvalue_qobjevo,; label='passing qobjevo as callable - qobjevo'); axs[1].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected - interpolated_controlvalue_qobjevo,; label='callable H, corrected - qobjevo'); axs[1].set_yscale('symlog', linthresh=1e-9); axs[1].grid(); axs[1].legend(); fig.savefig('qobjevo_vs_callable_interpolation.png'); ```. ### Code Output. _No response_. ### Expected Behaviour. The interpolation which is used when calling `qobjevo(t)` should match the interpolation used inside the solvers. I find the out-of-bounds behaviour inside the solvers (constant) more intuitive than the one used in `qobjevo(t)` (extrapolate). Between the different boundary condition types, I have no preference. The easiest would probably be to change the interpolation used in `qobjevo(t)` to match the one used inside the solvers. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.21.5; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.2; Python Version: 3.10.4; ```. ### Additional Context. ![qobjevo_vs_callable_interpolation](https://user-images.githubusercontent.com/46033310/214979557-609de51a-caab-4821-9341-e734ee45d6fd.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2063:3689,intuit,intuitive,3689,https://qutip.org,https://github.com/qutip/qutip/issues/2063,1,['intuit'],['intuitive']
Usability,"ble to use, `pypinfo` ; https://github.com/ofek/pypinfo; Note that with`pypinfo` Google's Big Data queries are not free, but new accounts come with some budget credited. Some data: . *`pip install qutip` data starts in 2016. In 2018, 8000 downloads are reported. For 2019, well over 10,000 downloads are predicted. *`conda install qutip` data starts in March 2017. For 2018, 30,000 downloads have been performed. This data is useful to gauge the effective popularity of the two package managers and distribution platforms and can help in setting priorities for relative support and bug fixing. . ## Anaconda downloads; <img width=""441"" alt=""qutip-conda-forge-downloads"" src=""https://user-images.githubusercontent.com/14573436/57989417-45d94380-7ad5-11e9-9694-623fec86865b.png"">. ## PyPI downloads; ![pip-install-qutip-png](https://user-images.githubusercontent.com/14573436/57979590-df174400-7a5a-11e9-807e-c2f46bbb830e.png). With `pypinfo` we can also easily extract other information on users' machines details, such as python usage, which can provide guidance on aspects: . ### Python version; #### 2018; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 3.6 | 47.33% | 4,079 |; | 2.7 | 24.25% | 2,090 |; | 3.7 | 13.97% | 1,204 |; | 3.5 | 12.43% | 1,071 |; | 3.4 | 1.94% | 167 |; | 2.6 | 0.09% | 8 |; | Total | | 8,619 |. #### 2017; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 2.7 | 51.55% | 4,333 |; | 3.6 | 22.13% | 1,860 |; | 3.5 | 19.73% | 1,658 |; | 3.4 | 6.00% | 504 |; | 3.3 | 0.35% | 29 |; | 2.6 | 0.18% | 15 |; | 3.7 | 0.05% | 4 |; | 3.2 | 0.02% | 2 |; | Total | | 8,405 |. This information is relevant also regarding #882. About OS:; ### Operating System; #### 2018; | system_name | percent | download_count |; | -------------- | ------: | -------------: |; | Linux | 57.25% | 4,934 |; | Windows | 26.15% | 2,254 |; | Darwin | 16.38% | 1,412 |; | CYGWIN_NT-10.0 | 0.08% | 7 |; | FreeBSD | 0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/997:1553,guid,guidance,1553,https://qutip.org,https://github.com/qutip/qutip/issues/997,1,['guid'],['guidance']
Usability,"ced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""http",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1746,Guid,Guide,1746,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guide']
Usability,"coupled differential equation for the state $\rho$ of an open system, and a number of auxiliary density operators $\rho_{\mathbf n}$.; * The goat algorithm in qutip-qoc works by integrating coupled Schroedinger equations for two ore more unitary operators.; * In full counting statistics, we can find the first n derivatives of a moment-generating function by solving coupled Lindblad equations for n+1 operators.; * A direct product state could potentially be used instead of a tensor product state in cases where we know that two systems are only coupled classically and there will never be any coherences between them. ### Proposed Solution. I think that we would need the following:; * A way to construct objects such as $( |\psi\rangle, |\psi'\rangle )$ and the matrix in the equation above from their constituents.; * A way to describe the dimensions of these objects.; * A way to extract the constituents from these objects at the end of the calculation.; * The differential equations mentioned in the applications above should be solvable with `sesolve` and/or `mesolve`.; * Note that in the first three applications, we actually have direct products of operator spaces (which might make things complicated?). ### Alternate Solutions. If all the involved Hilbert spaces have the same dimension, then $\mathcal H \times \cdots \times \mathcal H \simeq \mathbb C^n \otimes \mathcal H$. In other words, a ""big matrix"" can be obtained by tensoring a ""small matrix"" with another appropriate matrix, for example. $$ \begin{pmatrix} H & 0 \\\\ H' & H \end{pmatrix} = \begin{pmatrix} 1 & 0 \\\\ 0 & 1 \end{pmatrix} \otimes H + \begin{pmatrix} 0 & 0 \\\\ 1 & 0 \end{pmatrix} \otimes H' . $$. This can be written in qutip already now, of course. However, proper support for this kind of object would be nicer. Also, it is not clear to me how one would apply this tensoring-approach, for example, to the coupled differential equations for unitary operators in goat. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384:2512,clear,clear,2512,https://qutip.org,https://github.com/qutip/qutip/issues/2384,1,['clear'],['clear']
Usability,"culating the distance between two quantum channels. It has a number of useful properties making it the gold standard [2] in the field for several applications. In general, a complex semidefinite program is required to calculate the diamond norm. Although elegant, this approach is very inefficient. Unfortunately, no alternative method has been discovered for calculating the diamond norm in the general case of CPTP channels. However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qut",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1098,simpl,simple,1098,https://qutip.org,https://github.com/qutip/qutip/pull/2416,1,['simpl'],['simple']
Usability,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:70773,simpl,simple,70773,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['simpl'],['simple']
Usability,"e any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.dag()) #position operator (m); p = 1j*np.sqrt((hbar*m*w)/2) * (a - a.dag()) #momentum operator (kg(m/s)). # duration of ion transport; T = 1; t_f = (2*pi*T)/w; t_list = linspace(0,t_f,1001). # total distance travelled; dist = 220e-6 # distance in (m). # pre-define arguments; args = {'d' : dist, 't_f' : t_f, 'step' : t_list[1]-t_list[0]}. # hamiltonian ; H_0 = (p**2)/(2*m) + (m/2)*(w**2)*(x**2). H = [H_0,; [-m*(w**2)*x,q_0], ; [(m/2)*(w**2)*qeye(N),q_02]]. # initial state; psi0 = basis(N,0). # solve; result = mesolve(H, # hamiltonian; psi0, # initial state; t_list, # time; [], # expectation operators; args=args, # arguments to time dependent function; options=Options(nsteps=1e9), # number of steps solver can take; progress_bar=True) # progress bar; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834:2829,progress bar,progress bar,2829,https://qutip.org,https://github.com/qutip/qutip/issues/1834,1,['progress bar'],['progress bar']
Usability,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:2539,simpl,simple,2539,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simple']
Usability,"e updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx/issues. If no-one has picked this up after a few months, then we will just add the instructions (steps 1 to 4) above to the readme and close this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:1273,guid,guide-overview,1273,https://qutip.org,https://github.com/qutip/qutip/issues/1525,1,['guid'],['guide-overview']
Usability,"emory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implementation I chose a more object oriented style for the interface. The user first creates a `MemoryCascade` object, storing all the relevant parameters, and subsequently calls class methods to runs simulations. I personally like this style, and I think it is a general style that could be used across a great variety of solvers. I could however in addition write a function with a more `mesolve`-like interface. It can't, however, be identical, as there are several special arguments that has to be given. There is also a separate class method that computes output ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:2101,learn,learn,2101,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learn']
Usability,"er only needs to add in the specialisations that they actually need for the bottle-neck parts of their application, and leave the dispatcher to handle all other minor components by automatic conversion. As in the previous subsection, they do this by calling `add_specialisations` on the relevant operations. #### Creating a new dispatcher. In most user-defined functions which operate on `Qobj.data` it will be completely sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing; ```python; >>> add_square = data.Dispatcher(add_square_csr, inputs=('left', 'right'), name='add_square', out=True); >>> add_square.add_specialisations([; ... (data.CSR, data.CSR, data.CSR, add_square_csr),; ... (data.Dense, data.Dense, data.Dense, add_square_dense),; ... ]); ```; This is enough for `Dispatcher` to have extracted the signature and satisfied all of the specialisations. Note that the `inputs` argument does not provide the signature, it tells the dispatcher which arguments are data-layer types it should dispatch on, e.g. for `data.pow` as defined abo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:12814,simpl,simple,12814,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simple']
Usability,"es in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits. I'm still learning good workflow for this type of feature branch. Will use rebasing more in the future. Let me know if you have any questions about the implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1591,simpl,simple,1591,https://qutip.org,https://github.com/qutip/qutip/pull/404,3,"['learn', 'simpl']","['learning', 'simple', 'simplistic']"
Usability,"expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qub",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3932,simpl,simple,3932,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,expm() fails on simple Qobjs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/508:16,simpl,simple,16,https://qutip.org,https://github.com/qutip/qutip/issues/508,2,['simpl'],['simple']
Usability,"fS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has grown immensely with several projects that build on top of it. In this document we refer to the “QuTiP project” or “ the project” with reference to all software developed under the QuTiP Github organization, hosted at “[www.github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3731,intuit,intuitive,3731,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['intuit'],['intuitive']
Usability,ffmpeg command from User Guide gives an error,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799:25,Guid,Guide,25,https://qutip.org,https://github.com/qutip/qutip/issues/799,1,['Guid'],['Guide']
Usability,"g. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Also, the last outcomes have some overlap with the last project. Although I also find this circuit importation very important, I guess two projects should not have overlap if they are both selected.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:2097,simpl,simple,2097,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['simpl'],['simple']
Usability,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:3593,Simpl,Simple,3593,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['Simpl'],['Simple']
Usability,"hape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum ob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8365,simpl,simple,8365,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['simpl'],['simple']
Usability,"he problem is. Ex. I'm always frustrated when [...]. **Describe the solution you'd like**; A clear and concise description of what you want to happen. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here. Similarly, for bug reports, one finds:. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; from qutip import identity; print(identity(2)); ```; The terminal out put is; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; A clear and concise description of what you expected to happen. **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. **Additional context**; Add any other context about the problem here. -------------; The slight hiccup I find with these great templates introduced by @BoxiLi, especially in the first case above, is that many sub-titles need to be deleted by the user and are not uniform in the end. Something more standard could be achieved by clearly stating what lines should be removed by the user and are just explanations, and what are to be kept in the structure. Sometimes simply rewording the titles could help. For example:; From; ```; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; ```; To something like; ```; **Feature Request Description**; +++ remove this line and the text example below; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; +++ remove this line and the text example above; ```; or something like that. Similarly, ; ```; **Describe the bug** ; ```; could become; ```; **Bug description** ; ```; and so on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266:1480,clear,clearly,1480,https://qutip.org,https://github.com/qutip/qutip/issues/1266,4,"['clear', 'simpl']","['clear', 'clearly', 'simply']"
Usability,"heir projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projects, even on their own funding resources (most probably together with the development of research projects), in coordination with the lead development team, could help foster development in a more sustainable way. . ## Proposal; I propose to help sustain available projects in a more structural way than what is done now. This is an example of a what we could call a **QEP, or ""QuTiP Enhancement Proposal"".**. - One thing that could be done is to simply expand the existing Wiki. The downside of taking only this action is that only organization members can modify the wiki. So this could work, but mainly as a more static and cleaner staple. . - I propose to integrate the Wiki with Issues that contain the projects, adding a `projects` (or similar) label. This is in the spirit also of other large quantum open source projects such as Qiskit, which has even an ad-hoc `qiskit-community` repository, https://github.com/qiskit-community/. In QuTiP case, we could create a new repository similar to the notebooks one, e.g., https://github.com/qutip/qutip-community/. The downside is that in general the division is subfolders is not advised for easiness of maintainability. So one could just open issues with open projects. Of course, for physics questions, sometimes spilling in to PRs and Issues, qutip already has a Google Group forum, where I advise that this new capabilities may be advertised with a proper thread.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:2447,simpl,simply,2447,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['simpl'],['simply']
Usability,"https://github.com/kjd/idna) from 3.4 to 3.7.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/releases"">idna's releases</a>.</em></p>; <blockquote>; <h2>v3.7</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/kjd/idna/compare/v3.6...v3.7"">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1016,Guid,Guido,1016,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guido']
Usability,"ilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ and $w_r(T)$ are the absolute and relative weights, $\rho(T)$ the state associated with a trajectory, and $N_{\text{rel}}$ the number of trajectories that have not been assigned absolute weights. Intuitively, the idea is that absolute weights are for trajectories where the contribution to the full state is known exactly, and the trajectories without absolute weights are the stochastic part. **Things to do**; - [x] Update tests and create new ones; - [x] Update photocurrent to work with weights; - [x] Update target tolerance calculation to work with weights; - [x] Think about how result objects should be added if both contain trajectories with absolute weights; - [x] Double-check that this creates no problems for stochastic solvers; - [x] Towncrier entry. **Related issues or PRs**; https://github.com/qutip/qutip/issues/2235",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:2196,Intuit,Intuitively,2196,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['Intuit'],['Intuitively']
Usability,"imeline regarding governance talks**:; * April 2018: QuTiP Joins NumFOCUS as an Affiliated Project (and since then participates in Google Summer of Code).; * September 2018: a slide presentation is shared among lead developers with ideas on QuTiP development and governance. ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3339,Feedback,Feedback,3339,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['Feedback'],['Feedback']
Usability,"ing; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4530,guid,guide,4530,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex number.; - `Compound(dims1, dims2, ...)` for tensor-product spaces. The current `Qobj.type` values (with no tensor products) map like so:; - ket: `Space`; - bra: `Map(Space, Field)`; - oper: `Map(Space, Space)`; - operator-ket: `Space(Map(Space, Space))`; - operator-bra: `Map(Space(Map(Space, Space)), Field)`; - super: `Map(Space(Map(Space, Space)), Space(Map(Space, Space)))`. Users will not have to type out such monstrosities as the mapping for `super`; the current QuTiP dims syntax will be parsed into these types, but internally this form will almost completely remove parsing costs. Some explicit mappings between the current list syntax and the new parsed syntax:; - `[[2], [1]]` = `Space(2)`: a qubit pure state; - `[[2, 10], [1, 1]]` = `Compound(Space(2), Space(10))`: a pure state of a qubit space tensor-product a 10-element space; - `[[2, 2], [2, 2]]` = `Map(Compound(Space(2), Space(2)), Compound(Space(2), Space(2)))`: a square operator on a two-qubit st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:1980,simpl,simply,1980,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['simpl'],['simply']
Usability,"itial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 0]]); gell_mann[4] = np.array([[0, 0, 1], [0, 0, 0], [1, 0, 0]]); gell_mann[5] = np.array([[0, 0, -1j], [0, 0, 0], [1j, 0, 0]]); gell_mann[6] = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 0]]); gell_mann[7] = np.array([[0, 0, 0], [0, 0, -1j], [0, 1j, 0]]). def gm(n):; return qt.Qobj(gell_mann[n]); ```. The code above has the following output.; ```; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 7.569736410260631e-09; 7.569736410260631e-09; 7.569736410260631e-09; 1.1027338361068281e-05; 1.1027338361068281e-05; 1.1027338361068281e-05; 5.5136691805341405e-06; 5.5136691805341405e-06; 5.5136691805341405e-06; 0.05514220547452194; 0.05514220547452194; 0.05514220547452194; 0.6065091235279361; 0.6065091235279361; 0.6065091235279361; 6.120178304062077; 6.120178304062077; 6.120178304062077; 60.14556517658347; 60.14556517658347; 60.14556517658347; ```; Without even looking at the output of `mesolve`, there is an issue. Note that the values being printed are generated from the time dependent coefficient `coeff_1`, where I am just printing out the values of time that it has been given. Clearly, there are *not* 250 values, here, and in addition, values like 60.1 are not even in `tlist`, which ranges from 0 to 40. My `about()` is below; thank you in advance for any help.; ```; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1638:3100,Clear,Clearly,3100,https://qutip.org,https://github.com/qutip/qutip/issues/1638,1,['Clear'],['Clearly']
Usability,"ization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum ob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5461,simpl,simple,5461,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['simpl'],['simple']
Usability,keep the new text based progress bar as EnhancedTextProgressBar. Related to #121,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256:24,progress bar,progress bar,24,https://qutip.org,https://github.com/qutip/qutip/pull/256,1,['progress bar'],['progress bar']
Usability,"l details. As of QuTiP 4.5 (and all previous versions), `Qobj` instantiation is slow and this permeates through to all operations on `Qobj`. Matrix multiplication, scalar multiplication, addition and so forth all need to instantiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2538,simpl,simple,2538,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simple']
Usability,"ling test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead to problems with the documentation, since the docstrings in; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L50-L53; and; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L71-L74; are out-of-date. I find that the only uses of `qutip.graph` are in `qutip.steadystate`, which uses `reverse_cuthill_mckee` and `weighted_bipartite_matching`. The former can be replaced directly with the `scipy` version, at the cost of ~10% speed. The latter is not yet in `scipy`, so we ought to perhaps keep it, since it is used and documented for `qutip.steadystate.steadystate`. All other functions in `qutip.graph` are not used, and not documented (and in `scipy` anyway). While obviously I don't want to trample on anybody's code, I think it might be worth co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:2688,clear,clear,2688,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['clear'],['clear']
Usability,made the use of progress bar in mcsolve optional. closes #219,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/220:16,progress bar,progress bar,16,https://qutip.org,https://github.com/qutip/qutip/pull/220,2,['progress bar'],['progress bar']
Usability,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1503:110,Simpl,Simple,110,https://qutip.org,https://github.com/qutip/qutip/issues/1503,1,['Simpl'],['Simple']
Usability,"may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1655,learn,learn,1655,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['learn'],['learn']
Usability,"me build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19` this is due to the fact that on this platform `oldest-supported-numpy` (from `pyproject.toml`) defaults to 1.17.3, but `setup.cfg` requires `numpy>=1.19`. ### Code to Reproduce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1069,simpl,simple,1069,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['simpl'],['simple']
Usability,"mics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implementation I chose a more object oriented style for the interface. The user first creates a `MemoryCascade` object, storing all the relevant parameters, and subsequently calls class methods to runs simulations. I personally like this style, and I think it is a general style that could be used across a great variety of solvers. I could however in addition write a function with a more `mesolve`-like interface. It can't, however, be iden",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1991,learn,learningtimes,1991,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learningtimes']
Usability,"n QuTiP website's news section (http://qutip.org/news.html) and on the QuTiP google group (https://groups.google.com/forum/#!forum/qutip). . Below it is reported how we got there and the text we're adding to the governance. Before making any more official announcements, we thought it nice to ping the community watching this repository. . **Timeline regarding governance talks**:; * April 2018: QuTiP Joins NumFOCUS as an Affiliated Project (and since then participates in Google Summer of Code).; * September 2018: a slide presentation is shared among lead developers with ideas on QuTiP development and governance. ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most compr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3111,feedback,feedback,3111,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['feedback'],['feedback']
Usability,"np.inf; c_ops = (1/T_dephasing) * sigmaz(). ### Run simulation. tlist = np.linspace(0, 2, 10000); e_ops = [sigmaz()]; output = mesolve(H, psi0, tlist, c_ops = c_ops, e_ops = e_ops); Z_expectation = output.expect[0]; ```. ### Notes on system:. - The Hamiltonian is periodic and formed of two-pulses.; - H2 applies a full spin flip when applied for time 0.5, so if we start in a Z basis state then Z_expectation should change from +1 to -1 or vice versa. ### Problem:. - When I set c_ops = [], I get the expected behaviour of Z_expectation.; - When I set c_ops to be the zero matrix as in the code above, Z_expectation remains constant, even though this should give exactly the same result as setting c_ops = [].; - This effect seems to depend on the choice of initial state. For a random pure state, setting c_ops to be the zero matrix seems to give the correct result, but for a Z basis state I get the inconsistency.; - This effect is not reproduced by the Monte Carlo based solver, mcsolve. However, I would like to use mesolve if possible because it is much faster for the systems I am considering. ### Some further notes:. - I think this is something to do with the fact that the Hamiltonian is time-dependent. ; - If I just simulate H2, then Z_expectation oscillates as expected. ; - Additionally, if I swap the order of H1 and H2 in the Hamiltonian, then I get the correct result.; - Setting c_ops as the zero matrix results in a much quicker simulation time than setting c_ops = []. This seems somewhat counter-intuitive, since I thought setting c_ops as the zero matrix would force the program to simulate the evolution of the density matrix rather than the state vector.; - Given this, I wonder if mesolve is making an approximation to speed up the calculation which is not valid here. I would very much appreciate any insights into where this inconsistency comes from, and how to fix it. Since mcsolve does not reproduce it, I think this might be an issue with mesolve. Many thanks,. Oliver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/898:3017,intuit,intuitive,3017,https://qutip.org,https://github.com/qutip/qutip/issues/898,1,['intuit'],['intuitive']
Usability,"np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more usable. **Related issues or PRs**; Build on top of #1644. **Changelog**; Remove casting of coefficients to complex.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:3498,simpl,simpler,3498,https://qutip.org,https://github.com/qutip/qutip/pull/1816,2,"['simpl', 'usab']","['simpler', 'usable']"
Usability,"nt some time updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx/issues. If no-one has picked this up after a few months, then we will just add the instructions (steps 1 to 4) above to the readme and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:1176,guid,guide-overview,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1525,1,['guid'],['guide-overview']
Usability,"och = qutip.Bloch(); bloch.add_vectors([0,0,1]); bloch.vector_style = ''; bloch.show(); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); Input In [4], in <cell line: 4>(); 2 bloch.add_vectors([0,0,1]); 3 bloch.vector_style = ''; ----> 4 bloch.show(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:883, in Bloch.show(self); 868 def show(self):; 869 """"""; 870 Display Bloch sphere and corresponding data sets.; 871 ; (...); 881 in the cell you create the figure in.; 882 """"""; --> 883 self.render(); 884 if self.run_from_ipython():; 885 display(self.fig). File ~/git_repo/qutip/qutip5/qutip/bloch.py:677, in Bloch.render(self); 675 self.plot_back(); 676 self.plot_points(); --> 677 self.plot_vectors(); 678 self.plot_lines(); 679 self.plot_arcs(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:779, in Bloch.plot_vectors(self); 775 color = self.vector_default_color[idx]; 777 if self.vector_style == '':; 778 # simple line style; --> 779 self.axes.plot(xs3d, ys3d, zs3d,; 780 zs=0, zdir='z', label='Z',; 781 lw=self.vector_width, color=color,; 782 alpha=alpha); 783 else:; 784 print(; 785 xs3d, ys3d, zs3d,; 786 self.vector_mutation,; (...); 789 color,; 790 alpha). File ~/.virtualenvs/qutip5/lib/python3.10/site-packages/mpl_toolkits/mplot3d/axes3d.py:1490, in Axes3D.plot(self, xs, ys, zdir, *args, **kwargs); 1488 zs, *args = args; 1489 if 'zs' in kwargs:; -> 1490 raise TypeError(""plot() for multiple values for argument 'z'""); 1491 else:; 1492 zs = kwargs.pop('zs', 0). TypeError: plot() for multiple values for argument 'z'; ```. ### Expected Behaviour. it should draw a line. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+9bb7c7a; Numpy Version: 1.22.4; Scipy Version: 1.8.1; Cython Version: None; Matplotlib Version: 3.5.2; Python Version: 3.10.4; Number of CPUs: 8; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916:1342,simpl,simple,1342,https://qutip.org,https://github.com/qutip/qutip/issues/1916,1,['simpl'],['simple']
Usability,"oeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; In case they are not skipped, the reason for the failure should somehow become more clear. Regarding the actual behavior, qutip could print a warning if `cython` is installed and `filelock` is not, but I am not sure whether that would be a good idea. ---. For completeness, my `qutip.about()` output:. ```; QuTiP Version: 5.0.0.dev0+7892453; Numpy Version: 1.24.3; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.3; Number of CPUs: 16; BLAS Info: INTEL MKL; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/paul/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:9213,clear,clear,9213,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['clear'],['clear']
Usability,"on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> he",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:2043,guid,guide,2043,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"or (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3805,simpl,simple,3805,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"or ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4133,simpl,simple,4133,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"orly documented. For example, for the functions `optimize_pulse` and `optimize_pulse_unitary` there are 'params' arguments for many of the underlying classes, but it's not at all clear what count as valid key value pairs for each class.; ```python; Parameters; ----------; alg_params : Dictionary; options that are specific to the algorithm see above; ; optim_params : Dictionary; The key value pairs are the attribute name and value; used to set attribute values; Note: attributes are created if they do not exist already,; and are overwritten if they do.; Note: method_params are applied afterwards and so may override these. method_params : dict; Parameters for the optim_method. ; Note that where there is an attribute of the; Optimizer object or the termination_conditions matching the key ; that attribute. Otherwise, and in some case also, ; they are assumed to be method_options; for the scipy.optimize.minimize method. . dyn_params : dict; Parameters for the Dynamics object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. prop_params : dict; Parameters for the PropagatorComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. fid_params : dict; Parameters for the FidelityComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. init_pulse_params : dict; Parameters for the initial / guess pulse generator object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created; ```. As a further example, `dyn_params` is passed to a `Dynamics` object which stores it locally in `self.params`, but there isn't any checking of valid keys and values, and I can't find a function which actually uses whatever these params are set to. It's really difficult to run a top-level routine that creates all these objects which you have no clear control over.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:2062,clear,clear,2062,https://qutip.org,https://github.com/qutip/qutip/issues/1284,1,['clear'],['clear']
Usability,"passes _all_ the information in one go:; ```python; out = Qobj(left.data + right.data,; copy=False,; dims=left.dims,; type=left.type,; isherm=left._isherm and right._isherm); ```; This is more verbose, but significantly faster. With no other changes to the code, doing this can save around one-quarter of the overhead on several `Qobj` operations. Moving to the new data-layer types also gets large improvements in instantiation time. This is fine, except for matrix multiplication of tensor structures. In these, like in the example above, the matrix multiplication can cause tensor structures to contract, and so they then become incompatible with their previous Hilbert spaces. If we instead maintain a _list_ of `'type'` and introduce a `'scalar'` type, such objects can sensibly be broadcast back up to the correct size when needed, treating the spaces containing as identities of the correct dimension. I envisage that this may have some nice use-cases within `qip`, for example a gate on a single qubit could be represented by a two-by-two matrix with all other dimensions scalars, rather than requiring the whole Hilbert space to be represented all the time. Optimisations can be done using only the required elements of the subspace, and only broadcast up to the full representation once at the end. Further, we can ease the burden of parsing the dimensions in the first place. I haven't fully attempted this yet so I don't have full details on this, but I imagine there is some internal information we can keep after a single parsing pass that will make other operations simpler. This is particularly true of super-operators, which often care about the input and output shapes of the spaces, necessitating several more calls to `np.prod`. Since this information _has_ to be computed at type-inference time, it's easy to save it and remove the overhead. I'd propose having this type be internal, something like `dimensions.Parsed` and storing it as a protected attribute on `Qobj` instances.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:9612,simpl,simpler,9612,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simpler']
Usability,"pi*x/w)) * ((x+w/2.)>0) * ((-x+w/2.)>0) * \; np.exp(1j*phase- 2j*np.pi*df*x). c_x = lambda t, arg: cosine_pulse(t, t0=piLen/2.0, amp=0.5*piAmp)+\; cosine_pulse(t, t0=1.0*piLen+piLen/2.0, amp=0.5*piAmp). c_x_bug = lambda t, arg: cosine_pulse(t, t0=piLen/2.0, amp=0.5*piAmp)+\; cosine_pulse(t, t0=3.0*piLen+piLen/2.0, amp=0.5*piAmp). pulse_set = [c_x, c_x_bug]; bloch_set = []. def test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=True):; if show_seq:; plt.figure(figsize=(10,5)); for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test,pulse_set[idx](time_test,None),label=name); plt.legend(loc=1); plt.xlabel('time'); plt.show(). for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; H = [Hsys['Hq'],[Hsys['Hc_x'], pulse_set[idx]]]; result = qu.mesolve(H, psi0, time_test, Hsys['Hlbld'],; [qu.sigmax(), qu.sigmay(), qu.sigmaz()],; progress_bar=None, options=None); b = qu.Bloch(); b.clear(); Pg, Pe = [], []; qu_blochs = result.expect; plt.title('probability of excited state'); for i,j,k in zip(qu_blochs[0],qu_blochs[1],qu_blochs[2]):; points = [i,j,k]; b.add_points(points); P0, P1 = (1+k)/2.0, (1-k)/2.0; Pg.append(P0); Pe.append(P1); plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test, Pe, label=name); plt.legend(loc=1); bloch_set.append(b); plt.xlabel('time'); plt.show(); if bloch:; bloch_set[0].show(); bloch_set[1].show(); return result. # to run the test:; test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=False); ```. The terminal out put is; ```; ![sequence](https://user-images.githubusercontent.com/41005903/82047831-11976380-96e6-11ea-869d-7278ba1cbeaa.png); ![probability](https://user-images.githubusercontent.com/41005903/82047837-12c89080-96e6-11ea-98d6-0ba6528a50ad.png); ```. **Expected behavior**; As discussed above. **Your Environment**. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265:2076,clear,clear,2076,https://qutip.org,https://github.com/qutip/qutip/issues/1265,1,['clear'],['clear']
Usability,"pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a hr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:3687,Simpl,Simplified,3687,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['Simpl'],['Simplified']
Usability,"plotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = sigmax(); sy = sigmay(); sz = sigmaz(); sm = sigmam(); H = w * (cos(theta) * sz + sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(sqrt(rate) * sz). # evolve and calculate expectation values; output = mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * pi # qubit angular frequency; theta = 0.2 * pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a* basis(2,0) + (1-a)*basis(2,1))/(sqrt(a**2 + (1-a)**2)); tlist = linspace(0,4,250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; print 'len(sx) is ', len(sx); for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp') #saving images to temp directory in current working directory; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:3112,clear,clear,3112,https://qutip.org,https://github.com/qutip/qutip/issues/796,1,['clear'],['clear']
Usability,"python; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'/temp/bloch_'+str(i)+'.png', dirc='temp'); b.clear(); ```. Could Qutip be modified so that attributes (such as viewing angle or the color of vectors) can be updated in the way I showed before? So that we don't have to create a new bloch sph",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:1235,clear,clear,1235,https://qutip.org,https://github.com/qutip/qutip/issues/1106,1,['clear'],['clear']
Usability,qutip-doc/guide/scripts/floquet_ex3.py raises an exception in `floquet_master_equation_tensor`; ```; TypeError: Qobj data must be in fast_csr format.; ```; This should have been picked up by a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/624:10,guid,guide,10,https://qutip.org,https://github.com/qutip/qutip/issues/624,1,['guid'],['guide']
Usability,qutip/qutip wiki duplicates qutip-doc development guidelines,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1135:50,guid,guidelines,50,https://qutip.org,https://github.com/qutip/qutip/issues/1135,2,['guid'],['guidelines']
Usability,"r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'/temp/bloch_'+str(i)+'.png', dirc='temp'); b.clear(); ```. Could Qutip be modified so that attributes (such as viewing angle or the color of vectors) can be updated in the way I showed before? So that we don't have to create a new bloch sphere on each iteration of the animation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:2046,clear,clear,2046,https://qutip.org,https://github.com/qutip/qutip/issues/1106,1,['clear'],['clear']
Usability,"r. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>; <li><a href=""https://github.com/psf/requests/commi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4596,guid,guide,4596,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,restore the old text based progress bar as default,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256:27,progress bar,progress bar,27,https://qutip.org,https://github.com/qutip/qutip/pull/256,2,['progress bar'],['progress bar']
Usability,"rs, and the result with `rho0` as a density matrix is compared to the result for `rho0` being the identity super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1329,simpl,simply,1329,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['simpl'],['simply']
Usability,"s (not sure what the most appropriate subpackage would be):. - `depolarizing_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the depolarizing noise channel Λ(ρ) = (1 − 𝑝) ρ + 𝑝 (𝟙 / 𝑑), where 𝑑 is the dimension of ρ. Defaults to returning single-qubit channels. For example, `depolarizing_noise(1.0)` would map all input states to the maximally mixed state `qutip.qeye(2).unit()`.; - `pauli_channel(paulis : Union[Dict[str, float], List[float]], dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the Pauli channel Λ(ρ) = Σᵢ 𝑝ᵢ 𝑃ᵢ ρ 𝑃ᵢ, where {𝑝ᵢ} are the coefficients of each Pauli operator and where each 𝑃ᵢ is a Pauli operator. For example, `pauli_channel([0.9, 0, 0, 0.1])` would represent 10% dephasing noise along the 𝑍 axis, and could also be written as `pauli_channel({'I': 0.9, 'Z': 0.1})`. The `dims` input would be restricted to only allow elements of the form `2 ** nq` for `nq` a nonnegative integer.; - `amplitude_damping_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ |0⟩⟨0|.; - `generalized_amplitude_damping_channel(strength : float, fixed_point : Qobj) -> Qobj`: Returns a representation of the generalized amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ ρ\_\*, where ρ\_\* is given by `fixed_point`. It may also be good to consider introducing a function to represent simple overrotation channels (e.g.: ∫ 𝑒^{−𝑖𝐻θ} Pr(θ) 𝑑θ), perhaps by Monte Carlo sampling. **Describe alternatives you've considered**. - Allow specifying channels by fidelity rather than strength; e.g. `average_gate_fidelity(depolarizing_channel(fidelity=0.95))` would be guaranteed to be close to 0.95.; - Combining `amplitude_damping_channel` and `generalized_amplitude_damping_channel` into a single function, distinguished by making `fixed_point` have type `Optional[Qobj]`, with a default of `basis(dims, 0) * basis(dims, 0).dag()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1676:2081,simpl,simple,2081,https://qutip.org,https://github.com/qutip/qutip/issues/1676,1,['simpl'],['simple']
Usability,"s is that some people would like to see `dims` removed, or make mathematical operations effectively ignore it. ## Solutions. ### Rejections. Personally, I think enforcing the tensor product structure catches a whole lot of potential issues in code when working with objects in different Hilbert spaces, and so far I've not actually seen any examples where I think frequent overriding of the `dims` is necessary. I'd argue that the `Qobj` constructor taking a `dims` parameter is sufficient for any use-case which needs to manually set the dimensions because they're passing in an object constructed outside of QuTiP functions. Removing `dims` also makes a lot of operations harder to do. Various places in the code permute the order of the tensored spaces, and dropping `dims` means that the user has to ""remember"" the tensor product structure themselves so that they can pass it in, and we can then know what to reorder. Clearly this is undesirable - the `dims` are a non-computable property of the object, and therefore should be carried around as a data attribute on the class. The alternative in the Google group that's sometimes suggested is to keep `dims` for these use-cases, but make it more of a suggestion, so that any two objects which satisfy `left.shape == right.shape` should be compatible for addition-like operations, and ones which satisfy `left.shape[1] == right.shape[0]` should be compatible for matrix-multiplication-like operations. Again, I personally would tend to reject this on the grounds that enforcing the tensor-product structure is respected is a core part of what `Qobj` does; it ensures that the operations are mathematically possible, and that operations between different Hilbert spaces are not mixed. ### Proposal. First off, we can sidestep some of these issues by improving library code which creates `Qobj` instances. Operations like `Qobj.__add__` already know exactly what the output dimensions are, what the the type must be, and other things like if Hermitic",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:6782,Clear,Clearly,6782,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['Clear'],['Clearly']
Usability,"s` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:1861,simpl,simplest-to-use,1861,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simplest-to-use']
Usability,"sible to enforce the Code of Conduct. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at qutip-admin@googlegroups.com _[activate this or alternate email]_. . ### 2. Admin Team; **The Admin Team leads technical code development and manages directly QuTiP-related activities.** It’s thanks to their work and the broader community that the QuTiP project keeps lively, the software is maintained and the features keep expanding and improving. . **<span style=""text-decoration:underline;"">Tasks</span>**. The admin team is listed on the qutip website and specific areas of competence are shown. Members of the admin team pledge to volunteer to:. - Maintain the project through software release updates and bug fixes (core code development, documentation, notebooks, website, other Github-related things). . **- Make decisions about specific technical issues, features, bugs and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests. This includes closing pull requests or issues that are inactive for long or deemed not relevant. **. - Develop new features in qutip/qutip and qutip/other-libraries. ; - Help keep a steady pace of qutip library releases (e.g., ~2 minor releases/year). ; - Actively participate / respond to the qutip-dev internal forum.; - Help in the Q&A support group, qutip public forum. ; - Volunteer time for remote mentorship.; - Discuss code developments.; - Once a year, on a rotation basis, one admin team member is responsible for drafting a report for the QuTiP board.; - **For each subproject that is not qutip/qutip, at least one admin should actively be watching the repository.**. - If there are new projects that wish to come under the umbrella of qutip/, either one of the existing admins should get involved with the project, or the maintainer/developer of the new project joins the admin team upon a consensus reached by the existing admins. **<span s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:7874,guid,guiding,7874,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['guid'],['guiding']
Usability,simplified setup.py by only supporting cythonizing pyx and not shipping ...,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/191:0,simpl,simplified,0,https://qutip.org,https://github.com/qutip/qutip/pull/191,2,['simpl'],['simplified']
Usability,"sion on the design. For this specific PR, I am in two minds: . A. I follow the previous code and make a `HSolverUnderDampedBrownian` class. This will be quite different from the HSolverDL class as now, we will take the coefficients ck and vk separately for the non-Matsubara part and then the Mastsubara part and combine them to get the RHS instead of computing them from the coupling strength as before. B. Rewrite a new `Heom` class with the `configure` method taking the ck and vk values and not caring about the spectral density. We add some additional functions to compute the cks and vks based on Drude-Lorrentz, Underdamped Lorrentzian or Ohmic spectral density. We can even do a numerical fitting for the coefficients using the `bath_correlation` function that I added now for any arbitrary spectral density and then feed it to the `configure` method of the new `Heom` class to build the RHS. This is a more generic version of the HEOM which separates the method from specific spectral densities and is close to implementing the following version that is simplified from @nwlambert 's paper :. ![screenshot 2019-03-05 14 41 25](https://user-images.githubusercontent.com/6968324/53809476-16468080-3f55-11e9-90bd-50159a075663.png). I am leaning more towards B and re-structuring the HEOM functions to seperate the SD and the implementation itself. This has some advantages in the future too perhaps if we want to work specificially on the HEOM part without caring about the form of the spectral density. The second point is:. Most of QuTiP's solvers are function based eg., `mesolve`. In `qutip.piqs` however, we tried to do things with the class called `Dicke`. We defined a `pisolve` method similar in spirit to `mesolve` which takes in an initial state, tlist and computes the evolution. For many sophisticated approaches like `piqs` or `heom`, there needs to be some amount of pre-processing such as computing the Liouvillian/Lindbladian or the levels of the Hierarchy that needs to be done ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/962:1184,simpl,simplified,1184,https://qutip.org,https://github.com/qutip/qutip/pull/962,1,['simpl'],['simplified']
Usability,"solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:5658,simpl,simply,5658,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['simpl'],['simply']
Usability,"specific to some methods. SInce new integrators could be added by project such as qutip-cupy, `Options` can no longer be the place to list all supported options. It become little more that a dict. So I propose deprecating it. The documentation of `sesolve`, `mesolve`, etc. now list the options used by the solver and most common ode options and link the the integrator documentation. The class interface has the options property which document the options used by the solver and the integrators have the same. In the online documentation, the integrator api entries only contain the description of the method and the supported options. Since users don't need to call them directly, other methods are hidden and will be included in the dev documentation only. Usage will look like this, for functions:; ```; sesolve(H, psi, tlist, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); ```; and for the class interface:; ```; solver = SeSolver(H, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); solver.run(...); solver.options[""atol""] = 1e-9; solver.run(...) # run with the new tol.; solver.options = {""atol"": 1e-2} # only change the affected items. ; solver.run(...) # Also run with the new tol.; solver.options[""method""] = ""adams"" # reset all ode options, including ""atol"" supported by both.; solver.options = {""method"": ""bdf"", ""atol"": 1e-2} # reset all ode options then apply the new atol ; ```. Inside solvers, options are stored in a `_SolverOptions` which is a dict with frozen keys and feedback (chaging atol will reset the integrator).; ; Some `Intergrator` are slip so one method correspond to one integrator. Otherwise, `method` was an options used by both the solver to know which integrator to use and by some integrators. `Options` and `SolverOptions` still both exist for backward compatibility: they raise a warning but return the dict of the same options so the change should not immediately break any code. **Related issues or PRs**; Alternative to #1947",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1955:1796,feedback,feedback,1796,https://qutip.org,https://github.com/qutip/qutip/pull/1955,1,['feedback'],['feedback']
Usability,"sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing; ```python; >>> add_square = data.Dispatcher(add_square_csr, inputs=('left', 'right'), name='add_square', out=True); >>> add_square.add_specialisations([; ... (data.CSR, data.CSR, data.CSR, add_square_csr),; ... (data.Dense, data.Dense, data.Dense, add_square_dense),; ... ]); ```; This is enough for `Dispatcher` to have extracted the signature and satisfied all of the specialisations. Note that the `inputs` argument does not provide the signature, it tells the dispatcher which arguments are data-layer types it should dispatch on, e.g. for `data.pow` as defined above `inputs = ('matrix',)`, but the signature is `(matrix, n) -> out`. See that the specialisations are now complete:; ```python; >>> add_square; <dispatcher: add_square(left, right)>; >>> add_square[data.Dense, data.CSR, data.CSR]; <indirect specialisation (Dense, CSR, CSR) of add_square>; ```. In the initialisation, the function `add_square_csr` is passed as an example from which `Dispatcher` extracts the call signatur",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:13233,simpl,simply,13233,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simply']
Usability,"the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1977,guid,guide,1977,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:1663,simpl,simply,1663,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['simpl'],['simply']
Usability,"ts using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product structure. Some of this is because QuTiP allows us to construct objects which do not have a really rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is it a bra? [no]; 3. is it a super-operator? [no]; 4. if here, it must be an operator. Such objects do have a use. Let's say we have a system with two computational qubits and one ancillary qubit, we've performed a calculation on it and ended up in some state `|x> = |a>.|b>.|c>`, and we want to extract the computational subspace when the ancilla bit is projected onto `|0>`. We can do this in a mathematically rigourous way with; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:3776,simpl,simple,3776,https://qutip.org,https://github.com/qutip/qutip/issues/1320,2,"['intuit', 'simpl']","['intuitive', 'simple']"
Usability,"ture using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work well but they need to be removed for the new signature candidate (`f(t, **args)`). Also you cannot remove / fix to a constant them once declared. Since they are not used/working yet, now is the time to change to something better. I could see 2 other options:; - reserved keys: `args = {""state_vec"":psi0}`, this will always be the state (np.array) if available.; -- collapse are less practical this way.; - special values: `args = {""state_vec"":qt.feedback(""vec"")}`. This seems the most natural to me since the value is what change. . I would appreciate feedback and ideas on the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:2444,feedback,feedback,2444,https://qutip.org,https://github.com/qutip/qutip/issues/1136,2,['feedback'],['feedback']
Usability,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1675,simpl,simple,1675,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['simpl'],['simple']
Usability,"ve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4088,simpl,simple,4088,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"x measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based measurements are slightly different than the measurements usually used on circuits (or I might be missing something). Ofc, in the case of measurements on all qubits, they amount to the same result. I have not added tests yet but I have added a basic quantum teleportation notebook. It will be nice to get feedback on testing methods as well as what kind of notebooks the community is interested in. Also, any other feature requests on this module would also be appreciated. . PS: I have also added measurement code from Simon's PR here so maybe we can either add him as a contributor to this PR or figure out something else. ; ; Update: . 1. Addressing some concerns about the PR containing multiple diverging pieces of code, I think classical registers, measurement on the circuit and the classically-controlled gates are best grouped together as they all rely on each other in some ways. The valid concern is that of the Measurement class encapsulating all projective style measurements. I also want to point out that it was raised by @BoxiLi that we may want to move the Gate class and Measurement class completely to qutip.qip.operations to which I agree but I believe that should be addressed in a clean-up PR with naming changes suggested by @ajgpitch. . **Related issues or PRs**; Adds to #1090. **Changelog**; Adds partial and compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:2302,feedback,feedback,2302,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['feedback'],['feedback']
